ca65 V2.19 - Git 3dfe03300
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 3               ; configuration
000000r 3               CONFIG_2B := 1
000000r 3               
000000r 3               CONFIG_NO_POKE := 1
000000r 3               CONFIG_NO_READ_Y_IS_ZERO_HACK := 1
000000r 3               CONFIG_SAFE_NAMENOTFOUND := 1
000000r 3               CONFIG_SCRTCH_ORDER := 3
000000r 3               CONFIG_SMALL := 1
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $0F
000000r 3               ZP_START3 = $06
000000r 3               ZP_START4 = $15
000000r 3               
000000r 3               ; extra/override ZP variables
000000r 3               TXPSV           := $0049
000000r 3               JMPADRS         := $0093
000000r 3               LOWTRX          := $0094                        ; $AB also EXPSGN?
000000r 3               Z96				:= $0096
000000r 3               Z17             := $06FC
000000r 3               Z18             := $06FD
000000r 3               
000000r 3               ; inputbuffer
000000r 3               INPUTBUFFER     := $0700
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $FE
000000r 3               SPACE_FOR_GOSUB := $49
000000r 3               CRLF_1 := LF
000000r 3               CRLF_2 := CR
000000r 3               
000000r 3               ; magic memory locations
000000r 3               L06FE			:= $06FE
000000r 3               L6874			:= $6874
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2		:= $0300
000000r 3               CONST_MEMSIZ	:= $3FFF
000000r 3               
000000r 3               ; monitor functions
000000r 3               MONCOUT         := $FDFA
000000r 3               LC000			:= $C000
000000r 3               LC009			:= $C009
000000r 3               LDE24			:= $DE24
000000r 3               PRIMM			:= $DE42
000000r 3               LDE48			:= $DE48
000000r 3               LDE53			:= $DE53
000000r 3               LDE7F			:= $DE7F
000000r 3               LDE8C			:= $DE8C
000000r 3               
000000r 3               
000000r 3               
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(eater)
000000r 2               EATER := 1
000000r 2               .include "defines_eater.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
00000F  2               Z15:
00000F  2  xx           	.res 1
000010  2               .ifndef POSX; allow override
000010  2               POSX:
000010  2               .endif
000010  2  xx           	.res 1
000011  2               .ifndef Z17; allow override
000011  2               Z17:
000011  2               .endif
000011  2  xx           	.res 1
000012  2               .ifndef Z18; allow override
000012  2               Z18:
000012  2               .endif
000012  2  xx           	.res 1
000013  2               LINNUM:
000013  2               .ifndef TXPSV; allow override
000013  2               TXPSV:
000013  2               .endif
000013  2  xx xx        	.res 2
000015  2               .ifndef INPUTBUFFER; allow override
000015  2               INPUTBUFFER:
000015  2               .endif
000015  2               
000015  2               .org ZP_START3
000006  2               
000006  2               CHARAC:
000006  2  xx           	.res 1
000007  2               ENDCHR:
000007  2  xx           	.res 1
000008  2               EOLPNTR:
000008  2  xx           	.res 1
000009  2               DIMFLG:
000009  2  xx           	.res 1
00000A  2               VALTYP:
00000A  2               .ifdef CONFIG_SMALL
00000A  2  xx           	.res 1
00000B  2               .else
00000B  2               	.res 2
00000B  2               .endif
00000B  2               DATAFLG:
00000B  2  xx           	.res 1
00000C  2               SUBFLG:
00000C  2  xx           	.res 1
00000D  2               INPUTFLG:
00000D  2  xx           	.res 1
00000E  2               CPRMASK:
00000E  2  xx           	.res 1
00000F  2               Z14:
00000F  2  xx           	.res 1
000010  2               
000010  2               .org ZP_START4
000015  2               
000015  2               TEMPPT:
000015  2  xx           	.res 1
000016  2               LASTPT:
000016  2  xx xx        	.res 2
000018  2               TEMPST:
000018  2  xx xx xx xx  	.res 9
00001C  2  xx xx xx xx  
000020  2  xx           
000021  2               INDEX:
000021  2  xx xx        	.res 2
000023  2               DEST:
000023  2  xx xx        	.res 2
000025  2               RESULT:
000025  2  xx xx xx xx  	.res BYTES_FP
000029  2               RESULT_LAST = RESULT + BYTES_FP-1
000029  2               TXTTAB:
000029  2  xx xx        	.res 2
00002B  2               VARTAB:
00002B  2  xx xx        	.res 2
00002D  2               ARYTAB:
00002D  2  xx xx        	.res 2
00002F  2               STREND:
00002F  2  xx xx        	.res 2
000031  2               FRETOP:
000031  2  xx xx        	.res 2
000033  2               FRESPC:
000033  2  xx xx        	.res 2
000035  2               MEMSIZ:
000035  2  xx xx        	.res 2
000037  2               CURLIN:
000037  2  xx xx        	.res 2
000039  2               OLDLIN:
000039  2  xx xx        	.res 2
00003B  2               OLDTEXT:
00003B  2  xx xx        	.res 2
00003D  2               Z8C:
00003D  2  xx xx        	.res 2
00003F  2               DATPTR:
00003F  2  xx xx        	.res 2
000041  2               INPTR:
000041  2  xx xx        	.res 2
000043  2               VARNAM:
000043  2  xx xx        	.res 2
000045  2               VARPNT:
000045  2  xx xx        	.res 2
000047  2               FORPNT:
000047  2  xx xx        	.res 2
000049  2               LASTOP:
000049  2  xx xx        	.res 2
00004B  2               CPRTYP:
00004B  2  xx           	.res 1
00004C  2               FNCNAM:
00004C  2               TEMP3:
00004C  2  xx xx        	.res 2
00004E  2               DSCPTR:
00004E  2               .ifdef CONFIG_SMALL
00004E  2  xx xx        		.res 2
000050  2               .else
000050  2               		.res 3
000050  2               .endif
000050  2               DSCLEN:
000050  2  xx xx        	.res 2
000052  2               .ifndef JMPADRS ; allow override
000052  2               JMPADRS			:= DSCLEN + 1
000052  2               .endif
000052  2               Z52:
000052  2  xx           	.res 1
000053  2               ARGEXTENSION:
000053  2               .ifndef CONFIG_SMALL
000053  2               	.res 1
000053  2               .endif
000053  2               TEMP1:
000053  2  xx           	.res 1
000054  2               HIGHDS:
000054  2  xx xx        	.res 2
000056  2               HIGHTR:
000056  2  xx xx        	.res 2
000058  2               .ifndef CONFIG_SMALL
000058  2               TEMP2:
000058  2               	.res 1
000058  2               .endif
000058  2               INDX:
000058  2               TMPEXP:
000058  2               .ifdef CONFIG_SMALL
000058  2               TEMP2:
000058  2               .endif
000058  2  xx           	.res 1
000059  2               EXPON:
000059  2  xx           	.res 1
00005A  2               LOWTR:
00005A  2               .ifndef LOWTRX ; allow override
00005A  2               LOWTRX:
00005A  2               .endif
00005A  2  xx           	.res 1
00005B  2               EXPSGN:
00005B  2  xx           	.res 1
00005C  2               FAC:
00005C  2  xx xx xx xx  	.res BYTES_FP
000060  2               FAC_LAST = FAC + BYTES_FP-1
000060  2               FACSIGN:
000060  2  xx           	.res 1
000061  2               SERLEN:
000061  2  xx           	.res 1
000062  2               SHIFTSIGNEXT:
000062  2  xx           	.res 1
000063  2               ARG:
000063  2  xx xx xx xx  	.res BYTES_FP
000067  2               ARG_LAST = ARG + BYTES_FP-1
000067  2               ARGSIGN:
000067  2  xx           	.res 1
000068  2               STRNG1:
000068  2  xx xx        	.res 2
00006A  2               SGNCPR = STRNG1
00006A  2               FACEXTENSION = STRNG1+1
00006A  2               STRNG2:
00006A  2  xx xx        	.res 2
00006C  2               .ifdef AIM65
00006C  2               ATN:
00006C  2               	.res 3
00006C  2               ZBE:
00006C  2               	.res 1
00006C  2               .endif
00006C  2               .ifdef SYM1
00006C  2               USR1:
00006C  2               	.res 3
00006C  2               USR2:
00006C  2               	.res 3
00006C  2               USR3:
00006C  2               	.res 3
00006C  2               .endif
00006C  2               CHRGET:
00006C  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
00006C  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
00006C  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
00006C  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
00006C  2               
00006C  2               
00006C  2               
00006C  1               
00006C  1               .include "header.s"
00006C  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2  4C rr rr             jmp     LE68C
000003r 2  00 13 56             .byte   $00,$13,$56
000006r 2               .endif
000006r 2               .ifdef AIM65
000006r 2                       jmp     COLD_START
000006r 2                       jmp     RESTART
000006r 2                       .word   AYINT,GIVAYF
000006r 2               .endif
000006r 2               .ifdef SYM1
000006r 2                       jmp     PR_WRITTEN_BY
000006r 2               .endif
000006r 2               .ifdef EATER
000006r 2                       jmp COLD_START
000006r 2               .endif
000006r 2               
000006r 1               .include "token.s"
000006r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               .else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2               		keyword_rts "NULL", NULL
000011r 2               .endif
000011r 2               .ifdef KBD
000011r 2  rr rr 50 4C  		keyword_rts "PLOD", PLOD
000015r 2  4F C4 xx     
000012r 2  rr rr 50 53  		keyword_rts "PSAV", PSAV
000016r 2  41 D6 xx     
000013r 2  rr rr 56 4C  		keyword_rts "VLOD", VLOD
000017r 2  4F C4 xx     
000014r 2  rr rr 56 53  		keyword_rts "VSAV", VSAV
000018r 2  41 D6 xx     
000015r 2               .endif
000015r 2               .ifndef CONFIG_NO_POKE
000015r 2               		keyword_rts "WAIT", WAIT
000015r 2               .endif
000015r 2               .ifndef KBD
000015r 2               		keyword_rts "LOAD", LOAD
000015r 2               		keyword_rts "SAVE", SAVE
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2               		keyword_rts "VERIFY", VERIFY
000015r 2               .endif
000015r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000019r 2  C6 xx        
000016r 2               .ifdef KBD
000016r 2  rr rr 53 4C  		keyword_rts "SLOD", SLOD
00001Ar 2  4F C4 xx     
000017r 2               .endif
000017r 2               .ifndef CONFIG_NO_POKE
000017r 2               		keyword_rts "POKE", POKE
000017r 2               .endif
000017r 2               .ifdef CONFIG_FILE
000017r 2               		keyword_rts "PRINT#", PRINTH
000017r 2               .endif
000017r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Br 2  49 4E D4 xx  
000018r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Cr 2  4E D4 xx     
000019r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Dr 2  53 D4 xx     
00001Ar 2               .ifdef CONFIG_CBM_ALL
00001Ar 2               		keyword_rts "CLR", CLEAR
00001Ar 2               .else
00001Ar 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Er 2  45 41 D2 xx  
00001Br 2               .endif
00001Br 2               .ifdef CONFIG_FILE
00001Br 2               		keyword_rts "CMD", CMD
00001Br 2               		keyword_rts "SYS", SYS
00001Br 2               		keyword_rts "OPEN", OPEN
00001Br 2               		keyword_rts "CLOSE", CLOSE
00001Br 2               .endif
00001Br 2               .ifndef CONFIG_SMALL
00001Br 2               		keyword_rts "GET", GET
00001Br 2               .endif
00001Br 2               .ifdef KBD
00001Br 2  rr rr 50 52  		keyword_rts "PRT", PRT
00001Fr 2  D4 xx        
00001Cr 2               .endif
00001Cr 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000020r 2  D7 xx        
00001Dr 2               .ifdef EATER
00001Dr 2               		keyword_rts "LCDCMD", LCDCMD
00001Dr 2               		keyword_rts "LCDPRINT", LCDPRINT
00001Dr 2               .endif
00001Dr 2               
00001Dr 2               		count_tokens
00001Dr 2               
00001Dr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000021r 2  xx           
00001Er 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Fr 2  46 CE xx     		keyword	"FN", TOKEN_FN
000020r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000024r 2  xx           
000021r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000025r 2  xx           
000022r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000023r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000027r 2  xx           
000024r 2  AB xx        		keyword	"+", TOKEN_PLUS
000025r 2  AD xx        		keyword	"-", TOKEN_MINUS
000026r 2  AA xx        		keyword	"*"
000027r 2  AF xx        		keyword	"/"
000028r 2               .ifdef KBD
000028r 2  A3 xx        		keyword	"#"
000029r 2               .else
000029r 2               		keyword	"^"
000029r 2               .endif
000029r 2  41 4E C4 xx  		keyword	"AND"
00002Ar 2  4F D2 xx     		keyword	"OR"
00002Br 2  BE xx        		keyword	">", TOKEN_GREATER
00002Cr 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Dr 2  BC xx        		keyword	"<"
00002Er 2               
00002Er 2                       .segment "VECTORS"
00003Ar 2               UNFNC:
00003Ar 2               
00003Ar 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Er 2  CE xx        
00002Fr 2  rr rr 49 4E  		keyword_addr "INT", INT
000033r 2  D4 xx        
000030r 2  rr rr 41 42  		keyword_addr "ABS", ABS
000034r 2  D3 xx        
000031r 2               .ifdef KBD
000031r 2  rr rr 56 45  		keyword_addr "VER", VER
000035r 2  D2 xx        
000032r 2               .endif
000032r 2               .ifndef CONFIG_NO_POKE
000032r 2                 .ifdef CONFIG_RAM
000032r 2               		keyword_addr "USR", IQERR
000032r 2                 .else
000032r 2               		keyword_addr "USR", USR, TOKEN_USR
000032r 2                 .endif
000032r 2               .endif
000032r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000036r 2  C5 xx        
000033r 2  rr rr 50 4F  		keyword_addr "POS", POS
000037r 2  D3 xx        
000034r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000038r 2  D2 xx        
000035r 2  rr rr 52 4E  		keyword_addr "RND", RND
000039r 2  C4 xx        
000036r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
00003Ar 2  C7 xx        
000037r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Br 2  D0 xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_COS:
00004Er 2  rr rr 43 4F  		keyword_addr "COS", COS
000052r 2  D3 xx        
000039r 2               .segment "VECTORS"
000050r 2               UNFNC_SIN:
000050r 2  rr rr 53 49  		keyword_addr "SIN", SIN
000054r 2  CE xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_TAN:
000052r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000056r 2  CE xx        
00003Br 2               .segment "VECTORS"
000054r 2               UNFNC_ATN:
000054r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000058r 2  CE xx        
00003Cr 2               .ifdef KBD
00003Cr 2  rr rr 47 45  		keyword_addr "GETC", GETC
000040r 2  54 C3 xx     
00003Dr 2               .endif
00003Dr 2               .ifndef CONFIG_NO_POKE
00003Dr 2               		keyword_addr "PEEK", PEEK
00003Dr 2               .endif
00003Dr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000041r 2  CE xx        
00003Er 2  rr rr 53 54  		keyword_addr "STR$", STR
000042r 2  52 A4 xx     
00003Fr 2  rr rr 56 41  		keyword_addr "VAL", VAL
000043r 2  CC xx        
000040r 2  rr rr 41 53  		keyword_addr "ASC", ASC
000044r 2  C3 xx        
000041r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000045r 2  52 A4 xx     
000042r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000046r 2  46 54 A4 xx  
000043r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000047r 2  47 48 54 A4  
00004Br 2  xx           
000044r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000048r 2  44 A4 xx     
000045r 2               .ifdef CONFIG_2
000045r 2  47 CF xx     		keyword	"GO", TOKEN_GO
000046r 2               .endif
000046r 2                       .segment "KEYWORDS"
0000E4r 2  00           		.byte   0
0000E5r 2               
0000E5r 2                       .segment "VECTORS"
000068r 2               MATHTBL:
000068r 2  79                   .byte   $79
000069r 2  rr rr                .word   FADDT-1
00006Br 2  79                   .byte   $79
00006Cr 2  rr rr                .word   FSUBT-1
00006Er 2  7B                   .byte   $7B
00006Fr 2  rr rr                .word   FMULTT-1
000071r 2  7B                   .byte   $7B
000072r 2  rr rr                .word   FDIVT-1
000074r 2  7F                   .byte   $7F
000075r 2  rr rr                .word   FPWRT-1
000077r 2  50                   .byte   $50
000078r 2  rr rr                .word   TAND-1
00007Ar 2  46                   .byte   $46
00007Br 2  rr rr                .word   OR-1
00007Dr 2  7D                   .byte   $7D
00007Er 2  rr rr                .word   NEGOP-1
000080r 2  5A                   .byte   $5A
000081r 2  rr rr                .word   EQUOP-1
000083r 2  64                   .byte   $64
000084r 2  rr rr                .word   RELOPS-1
000086r 2               
000086r 1               .include "error.s"
000086r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2  4E C6        define_error ERR_NOFOR, "NF"
000002r 2  53 CE        define_error ERR_SYNTAX, "SN"
000004r 2  52 C7        define_error ERR_NOGOSUB, "RG"
000006r 2  4F C4        define_error ERR_NODATA, "OD"
000008r 2  46 C3        define_error ERR_ILLQTY, "FC"
00000Ar 2  4F D6        define_error ERR_OVERFLOW, "OV"
00000Cr 2  4F CD        define_error ERR_MEMFULL, "OM"
00000Er 2  55 D3        define_error ERR_UNDEFSTAT, "US"
000010r 2  42 D3        define_error ERR_BADSUBS, "BS"
000012r 2  44 C4        define_error ERR_REDIMD, "DD"
000014r 2  2F B0        define_error ERR_ZERODIV, "/0"
000016r 2  49 C4        define_error ERR_ILLDIR, "ID"
000018r 2  54 CD        define_error ERR_BADTYPE, "TM"
00001Ar 2  4C D3        define_error ERR_STRLONG, "LS"
00001Cr 2  53 D4        define_error ERR_FRMCPX, "ST"
00001Er 2  43 CE        define_error ERR_CANTCONT, "CN"
000020r 2  55 C6        define_error ERR_UNDEFFN, "UF"
000022r 2               .else
000022r 2               define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000022r 2               define_error ERR_SYNTAX, "SYNTAX"
000022r 2               define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
000022r 2               define_error ERR_NODATA, "OUT OF DATA"
000022r 2               define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000022r 2               .ifdef CBM1
000022r 2               	.byte 0,0,0,0,0
000022r 2               .endif
000022r 2               define_error ERR_OVERFLOW, "OVERFLOW"
000022r 2               define_error ERR_MEMFULL, "OUT OF MEMORY"
000022r 2               define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
000022r 2               define_error ERR_BADSUBS, "BAD SUBSCRIPT"
000022r 2               define_error ERR_REDIMD, "REDIM'D ARRAY"
000022r 2               define_error ERR_ZERODIV, "DIVISION BY ZERO"
000022r 2               define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000022r 2               define_error ERR_BADTYPE, "TYPE MISMATCH"
000022r 2               define_error ERR_STRLONG, "STRING TOO LONG"
000022r 2               .ifdef CONFIG_FILE
000022r 2                 .ifdef CBM1
000022r 2               define_error ERR_BADDATA, "BAD DATA"
000022r 2                 .else
000022r 2               define_error ERR_BADDATA, "FILE DATA"
000022r 2                 .endif
000022r 2               .endif
000022r 2               define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
000022r 2               define_error ERR_CANTCONT, "CAN'T CONTINUE"
000022r 2               define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
000022r 2               .endif
000022r 2               
000022r 1               .include "message.s"
000022r 2               ; global messages: "error", "in", "ready", "break"
000022r 2               
000022r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2  20 65 72 72          .byte   " err"
000004r 2               .else
000004r 2                 .ifdef APPLE
000004r 2                       .byte   " ERR"
000004r 2               		.byte	$07,$07
000004r 2                 .else
000004r 2                       .byte   " ERROR"
000004r 2                 .endif
000004r 2               .endif
000004r 2  00                   .byte   0
000005r 2               
000005r 2               .ifndef KBD
000005r 2               QT_IN:
000005r 2                       .byte   " IN "
000005r 2                       .byte   $00
000005r 2               .endif
000005r 2               
000005r 2               .ifdef KBD
000005r 2  54 D2        		.byte	$54,$D2 ; ???
000007r 2               OKPRT:
000007r 2  20 42 DE     		jsr     PRIMM
00000Ar 2  0D 0D 3E 3E          .byte   CR,CR,">>",CR,LF
00000Er 2  0D 0A        
000010r 2  00           		.byte	0
000011r 2  60                   rts
000012r 2  EA                   nop
000013r 2               .else
000013r 2                .ifndef AIM65
000013r 2               QT_OK:
000013r 2                 .ifdef CONFIG_CBM_ALL
000013r 2               		.byte   CR,LF,"READY.",CR,LF
000013r 2                 .else
000013r 2                   .ifdef APPLE
000013r 2               		; binary patch!
000013r 2                       .byte   CR,0,0,"K",CR,LF
000013r 2                   .else
000013r 2               		.byte   CR,LF,"OK",CR,LF
000013r 2                   .endif
000013r 2                 .endif
000013r 2               		.byte	0
000013r 2                .endif
000013r 2               .endif
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2  0D 0A 20 42  		.byte	CR,LF," Brk"
000017r 2  72 6B        
000019r 2  00                   .byte   0
00001Ar 2  54 D0                .byte   $54,$D0 ; ???
00001Cr 2               .elseif .def(MICROTAN) || .def(AIM65)
00001Cr 2               		.byte CR,LF," BREAK"
00001Cr 2                       .byte   0
00001Cr 2               .else
00001Cr 2               		.byte CR,LF,"BREAK"
00001Cr 2                       .byte   0
00001Cr 2               .endif
00001Cr 2               
00001Cr 1               .include "memory.s"
00001Cr 2               ; generic stack and memory management code
00001Cr 2               ; this code is identical across all versions of
00001Cr 2               ; BASIC
00001Cr 2               
00001Cr 2               .segment "CODE"
00001Cr 2               
00001Cr 2               ; ----------------------------------------------------------------------------
00001Cr 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Cr 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Cr 2               ;
00001Cr 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Cr 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Cr 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Cr 2               ;
00001Cr 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Cr 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Cr 2               ;
00001Cr 2               ;	.EQ. IF FOUND
00001Cr 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Cr 2               ; ----------------------------------------------------------------------------
00001Cr 2               GTFORPNT:
00001Cr 2  BA                   tsx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2  E8                   inx
000021r 2               L2279:
000021r 2  BD 01 01             lda     STACK+1,x
000024r 2  C9 81                cmp     #$81
000026r 2  D0 21                bne     L22A1
000028r 2  A5 48                lda     FORPNT+1
00002Ar 2  D0 0A                bne     L228E
00002Cr 2  BD 02 01             lda     STACK+2,x
00002Fr 2  85 47                sta     FORPNT
000031r 2  BD 03 01             lda     STACK+3,x
000034r 2  85 48                sta     FORPNT+1
000036r 2               L228E:
000036r 2  DD 03 01             cmp     STACK+3,x
000039r 2  D0 07                bne     L229A
00003Br 2  A5 47                lda     FORPNT
00003Dr 2  DD 02 01             cmp     STACK+2,x
000040r 2  F0 07                beq     L22A1
000042r 2               L229A:
000042r 2  8A                   txa
000043r 2  18                   clc
000044r 2  69 10                adc     #BYTES_PER_FRAME
000046r 2  AA                   tax
000047r 2  D0 D8                bne     L2279
000049r 2               L22A1:
000049r 2  60                   rts
00004Ar 2               
00004Ar 2               ; ----------------------------------------------------------------------------
00004Ar 2               ; MOVE BLOCK OF MEMORY UP
00004Ar 2               ;
00004Ar 2               ; ON ENTRY:
00004Ar 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00004Ar 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00004Ar 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00004Ar 2               ; ----------------------------------------------------------------------------
00004Ar 2               BLTU:
00004Ar 2  20 rr rr             jsr     REASON
00004Dr 2  85 2F                sta     STREND
00004Fr 2  84 30                sty     STREND+1
000051r 2               BLTU2:
000051r 2  38                   sec
000052r 2  A5 56                lda     HIGHTR
000054r 2  E5 5A                sbc     LOWTR
000056r 2  85 21                sta     INDEX
000058r 2  A8                   tay
000059r 2  A5 57                lda     HIGHTR+1
00005Br 2  E5 5B                sbc     LOWTR+1
00005Dr 2  AA                   tax
00005Er 2  E8                   inx
00005Fr 2  98                   tya
000060r 2  F0 23                beq     L22DD
000062r 2  A5 56                lda     HIGHTR
000064r 2  38                   sec
000065r 2  E5 21                sbc     INDEX
000067r 2  85 56                sta     HIGHTR
000069r 2  B0 03                bcs     L22C6
00006Br 2  C6 57                dec     HIGHTR+1
00006Dr 2  38                   sec
00006Er 2               L22C6:
00006Er 2  A5 54                lda     HIGHDS
000070r 2  E5 21                sbc     INDEX
000072r 2  85 54                sta     HIGHDS
000074r 2  B0 08                bcs     L22D6
000076r 2  C6 55                dec     HIGHDS+1
000078r 2  90 04                bcc     L22D6
00007Ar 2               L22D2:
00007Ar 2  B1 56                lda     (HIGHTR),y
00007Cr 2  91 54                sta     (HIGHDS),y
00007Er 2               L22D6:
00007Er 2  88                   dey
00007Fr 2  D0 F9                bne     L22D2
000081r 2  B1 56                lda     (HIGHTR),y
000083r 2  91 54                sta     (HIGHDS),y
000085r 2               L22DD:
000085r 2  C6 57                dec     HIGHTR+1
000087r 2  C6 55                dec     HIGHDS+1
000089r 2  CA                   dex
00008Ar 2  D0 F2                bne     L22D6
00008Cr 2  60                   rts
00008Dr 2               
00008Dr 2               ; ----------------------------------------------------------------------------
00008Dr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Dr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Dr 2               ; ----------------------------------------------------------------------------
00008Dr 2               CHKMEM:
00008Dr 2  0A                   asl     a
00008Er 2  69 49                adc     #SPACE_FOR_GOSUB
000090r 2  B0 35                bcs     MEMERR
000092r 2  85 21                sta     INDEX
000094r 2  BA                   tsx
000095r 2  E4 21                cpx     INDEX
000097r 2  90 2E                bcc     MEMERR
000099r 2  60                   rts
00009Ar 2               
00009Ar 2               ; ----------------------------------------------------------------------------
00009Ar 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00009Ar 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00009Ar 2               ; ----------------------------------------------------------------------------
00009Ar 2               REASON:
00009Ar 2  C4 32                cpy     FRETOP+1
00009Cr 2  90 28                bcc     L231E
00009Er 2  D0 04                bne     L22FC
0000A0r 2  C5 31                cmp     FRETOP
0000A2r 2  90 22                bcc     L231E
0000A4r 2               L22FC:
0000A4r 2  48                   pha
0000A5r 2  A2 08                ldx     #FAC-TEMP1-1
0000A7r 2  98                   tya
0000A8r 2               L2300:
0000A8r 2  48                   pha
0000A9r 2  B5 53                lda     TEMP1,x
0000ABr 2  CA                   dex
0000ACr 2  10 FA                bpl     L2300
0000AEr 2  20 rr rr             jsr     GARBAG
0000B1r 2  A2 F8                ldx     #TEMP1-FAC+1
0000B3r 2               L230B:
0000B3r 2  68                   pla
0000B4r 2  95 5C                sta     FAC,x
0000B6r 2  E8                   inx
0000B7r 2  30 FA                bmi     L230B
0000B9r 2  68                   pla
0000BAr 2  A8                   tay
0000BBr 2  68                   pla
0000BCr 2  C4 32                cpy     FRETOP+1
0000BEr 2  90 06                bcc     L231E
0000C0r 2  D0 05                bne     MEMERR
0000C2r 2  C5 31                cmp     FRETOP
0000C4r 2  B0 01                bcs     MEMERR
0000C6r 2               L231E:
0000C6r 2  60                   rts
0000C7r 2               
0000C7r 1               .include "program.s"
0000C7r 2               ; error
0000C7r 2               ; line input, line editing
0000C7r 2               ; tokenize
0000C7r 2               ; detokenize
0000C7r 2               ; BASIC program memory management
0000C7r 2               
0000C7r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C7r 2               
0000C7r 2               .segment "CODE"
0000C7r 2               
0000C7r 2               MEMERR:
0000C7r 2  A2 0C                ldx     #ERR_MEMFULL
0000C9r 2               
0000C9r 2               ; ----------------------------------------------------------------------------
0000C9r 2               ; HANDLE AN ERROR
0000C9r 2               ;
0000C9r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C9r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C9r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C9r 2               ; ----------------------------------------------------------------------------
0000C9r 2               ERROR:
0000C9r 2  46 0F                lsr     Z14
0000CBr 2               .ifdef CONFIG_FILE
0000CBr 2                       lda     CURDVC    ; output
0000CBr 2                       beq     LC366     ; is screen
0000CBr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CBr 2                       lda     #$00
0000CBr 2                       sta     CURDVC
0000CBr 2               LC366:
0000CBr 2               .endif
0000CBr 2  20 rr rr             jsr     CRDO
0000CEr 2  20 rr rr             jsr     OUTQUES
0000D1r 2               L2329:
0000D1r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D4r 2               .ifndef CONFIG_SMALL_ERROR
0000D4r 2                       pha
0000D4r 2                       and     #$7F
0000D4r 2               .endif
0000D4r 2  20 rr rr             jsr     OUTDO
0000D7r 2               .ifdef CONFIG_SMALL_ERROR
0000D7r 2  BD rr rr             lda     ERROR_MESSAGES+1,x
0000DAr 2                 .ifdef KBD
0000DAr 2  29 7F                and     #$7F
0000DCr 2                 .endif
0000DCr 2  20 rr rr             jsr     OUTDO
0000DFr 2               .else
0000DFr 2                       inx
0000DFr 2                       pla
0000DFr 2                       bpl     L2329
0000DFr 2               .endif
0000DFr 2  20 rr rr             jsr     STKINI
0000E2r 2  A9 rr                lda     #<QT_ERROR
0000E4r 2  A0 rr                ldy     #>QT_ERROR
0000E6r 2               
0000E6r 2               ; ----------------------------------------------------------------------------
0000E6r 2               ; PRINT STRING AT (Y,A)
0000E6r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E6r 2               ; FALL INTO WARM RESTART
0000E6r 2               ; ----------------------------------------------------------------------------
0000E6r 2               PRINT_ERROR_LINNUM:
0000E6r 2  20 rr rr             jsr     STROUT
0000E9r 2  A4 38                ldy     CURLIN+1
0000EBr 2  C8                   iny
0000ECr 2  F0 03                beq     RESTART
0000EEr 2  20 rr rr             jsr     INPRT
0000F1r 2               
0000F1r 2               ; ----------------------------------------------------------------------------
0000F1r 2               ; WARM RESTART ENTRY
0000F1r 2               ; ----------------------------------------------------------------------------
0000F1r 2               RESTART:
0000F1r 2               .ifdef KBD
0000F1r 2  20 rr rr             jsr     CRDO
0000F4r 2  EA                   nop
0000F5r 2               L2351X:
0000F5r 2  20 rr rr             jsr     OKPRT
0000F8r 2               L2351:
0000F8r 2  20 rr rr             jsr     INLIN
0000FBr 2               LE28E:
0000FBr 2  10 F4                bpl     RESTART
0000FDr 2               .else
0000FDr 2                       lsr     Z14
0000FDr 2                .ifndef AIM65
0000FDr 2                       lda     #<QT_OK
0000FDr 2                       ldy     #>QT_OK
0000FDr 2                 .ifdef CONFIG_CBM_ALL
0000FDr 2                       jsr     STROUT
0000FDr 2                 .else
0000FDr 2                       jsr     GOSTROUT
0000FDr 2                 .endif
0000FDr 2                .else
0000FDr 2                       jsr     GORESTART
0000FDr 2                .endif
0000FDr 2               L2351:
0000FDr 2                       jsr     INLIN
0000FDr 2               .endif
0000FDr 2  86 73                stx     TXTPTR
0000FFr 2  84 74                sty     TXTPTR+1
000101r 2  20 6C 00             jsr     CHRGET
000104r 2               .ifdef CONFIG_11
000104r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000104r 2               ; and ':' - a line starting with ':' in
000104r 2               ; direct mode gets ignored
000104r 2  AA                   tax
000105r 2               .endif
000105r 2               .ifdef KBD
000105r 2  F0 EE                beq     L2351X
000107r 2               .else
000107r 2                       beq     L2351
000107r 2               .endif
000107r 2  A2 FF                ldx     #$FF
000109r 2  86 38                stx     CURLIN+1
00010Br 2  90 06                bcc     NUMBERED_LINE
00010Dr 2  20 rr rr             jsr     PARSE_INPUT_LINE
000110r 2  4C rr rr             jmp     NEWSTT2
000113r 2               
000113r 2               ; ----------------------------------------------------------------------------
000113r 2               ; HANDLE NUMBERED LINE
000113r 2               ; ----------------------------------------------------------------------------
000113r 2               NUMBERED_LINE:
000113r 2  20 rr rr             jsr     LINGET
000116r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000119r 2  84 08                sty     EOLPNTR
00011Br 2               .ifdef KBD
00011Br 2  20 rr rr             jsr     FNDLIN2
00011Er 2  A5 94                lda     JMPADRS+1
000120r 2  85 5A                sta     LOWTR
000122r 2  85 96                sta     Z96
000124r 2  A5 95                lda     JMPADRS+2
000126r 2  85 5B                sta     LOWTR+1
000128r 2  85 97                sta     Z96+1
00012Ar 2  A5 13                lda     LINNUM
00012Cr 2  8D FE 06             sta     L06FE
00012Fr 2  A5 14                lda     LINNUM+1
000131r 2  8D FF 06             sta     L06FE+1
000134r 2  E6 13                inc     LINNUM
000136r 2  D0 07                bne     LE2D2
000138r 2  E6 14                inc     LINNUM+1
00013Ar 2  D0 03                bne     LE2D2
00013Cr 2  4C rr rr             jmp     SYNERR
00013Fr 2               LE2D2:
00013Fr 2  20 rr rr             jsr     LF457
000142r 2  A2 96                ldx     #Z96
000144r 2  20 rr rr             jsr     CMPJMPADRS
000147r 2  B0 21                bcs     LE2FD
000149r 2               LE2DC:
000149r 2  A2 00                ldx     #$00
00014Br 2  A1 94                lda     (JMPADRS+1,x)
00014Dr 2  81 96                sta     (Z96,x)
00014Fr 2  E6 94                inc     JMPADRS+1
000151r 2  D0 02                bne     LE2E8
000153r 2  E6 95                inc     JMPADRS+2
000155r 2               LE2E8:
000155r 2  E6 96                inc     Z96
000157r 2  D0 02                bne     LE2EE
000159r 2  E6 97                inc     Z96+1
00015Br 2               LE2EE:
00015Br 2  A2 2B                ldx     #VARTAB
00015Dr 2  20 rr rr             jsr     CMPJMPADRS
000160r 2  D0 E7                bne     LE2DC
000162r 2  A5 96                lda     Z96
000164r 2  85 2B                sta     VARTAB
000166r 2  A5 97                lda     Z96+1
000168r 2  85 2C                sta     VARTAB+1
00016Ar 2               LE2FD:
00016Ar 2  20 rr rr             jsr     SETPTRS
00016Dr 2  20 rr rr             jsr     LE33D
000170r 2  AD 00 07             lda     INPUTBUFFER
000173r 2               LE306:
000173r 2  F0 86                beq     LE28E
000175r 2  C9 A5                cmp     #$A5
000177r 2  F0 FA                beq     LE306
000179r 2  18                   clc
00017Ar 2               .else
00017Ar 2                       jsr     FNDLIN
00017Ar 2                       bcc     PUT_NEW_LINE
00017Ar 2                       ldy     #$01
00017Ar 2                       lda     (LOWTR),y
00017Ar 2                       sta     INDEX+1
00017Ar 2                       lda     VARTAB
00017Ar 2                       sta     INDEX
00017Ar 2                       lda     LOWTR+1
00017Ar 2                       sta     DEST+1
00017Ar 2                       lda     LOWTR
00017Ar 2                       dey
00017Ar 2                       sbc     (LOWTR),y
00017Ar 2                       clc
00017Ar 2                       adc     VARTAB
00017Ar 2                       sta     VARTAB
00017Ar 2                       sta     DEST
00017Ar 2                       lda     VARTAB+1
00017Ar 2                       adc     #$FF
00017Ar 2                       sta     VARTAB+1
00017Ar 2                       sbc     LOWTR+1
00017Ar 2                       tax
00017Ar 2                       sec
00017Ar 2                       lda     LOWTR
00017Ar 2                       sbc     VARTAB
00017Ar 2                       tay
00017Ar 2                       bcs     L23A5
00017Ar 2                       inx
00017Ar 2                       dec     DEST+1
00017Ar 2               L23A5:
00017Ar 2                       clc
00017Ar 2                       adc     INDEX
00017Ar 2                       bcc     L23AD
00017Ar 2                       dec     INDEX+1
00017Ar 2                       clc
00017Ar 2               L23AD:
00017Ar 2                       lda     (INDEX),y
00017Ar 2                       sta     (DEST),y
00017Ar 2                       iny
00017Ar 2                       bne     L23AD
00017Ar 2                       inc     INDEX+1
00017Ar 2                       inc     DEST+1
00017Ar 2                       dex
00017Ar 2                       bne     L23AD
00017Ar 2               .endif
00017Ar 2               ; ----------------------------------------------------------------------------
00017Ar 2               PUT_NEW_LINE:
00017Ar 2               .ifndef KBD
00017Ar 2                 .ifdef CONFIG_2
00017Ar 2                       jsr     SETPTRS
00017Ar 2                       jsr     LE33D
00017Ar 2                       lda     INPUTBUFFER
00017Ar 2                       beq     L2351
00017Ar 2                       clc
00017Ar 2                 .else
00017Ar 2                       lda     INPUTBUFFER
00017Ar 2                       beq     FIX_LINKS
00017Ar 2                       lda     MEMSIZ
00017Ar 2                       ldy     MEMSIZ+1
00017Ar 2                       sta     FRETOP
00017Ar 2                       sty     FRETOP+1
00017Ar 2                 .endif
00017Ar 2               .endif
00017Ar 2  A5 2B                lda     VARTAB
00017Cr 2  85 56                sta     HIGHTR
00017Er 2  65 08                adc     EOLPNTR
000180r 2  85 54                sta     HIGHDS
000182r 2  A4 2C                ldy     VARTAB+1
000184r 2  84 57                sty     HIGHTR+1
000186r 2  90 01                bcc     L23D6
000188r 2  C8                   iny
000189r 2               L23D6:
000189r 2  84 55                sty     HIGHDS+1
00018Br 2  20 rr rr             jsr     BLTU
00018Er 2               .ifdef CONFIG_INPUTBUFFER_0200
00018Er 2                       lda     LINNUM
00018Er 2                       ldy     LINNUM+1
00018Er 2                       sta     INPUTBUFFER-2
00018Er 2                       sty     INPUTBUFFER-1
00018Er 2               .endif
00018Er 2  A5 2F                lda     STREND
000190r 2  A4 30                ldy     STREND+1
000192r 2  85 2B                sta     VARTAB
000194r 2  84 2C                sty     VARTAB+1
000196r 2  A4 08                ldy     EOLPNTR
000198r 2  88                   dey
000199r 2               ; ---COPY LINE INTO PROGRAM-------
000199r 2               L23E6:
000199r 2  B9 FC 06             lda     INPUTBUFFER-4,y
00019Cr 2  91 5A                sta     (LOWTR),y
00019Er 2  88                   dey
00019Fr 2  10 F8                bpl     L23E6
0001A1r 2               
0001A1r 2               ; ----------------------------------------------------------------------------
0001A1r 2               ; CLEAR ALL VARIABLES
0001A1r 2               ; RE-ESTABLISH ALL FORWARD LINKS
0001A1r 2               ; ----------------------------------------------------------------------------
0001A1r 2               FIX_LINKS:
0001A1r 2  20 rr rr             jsr     SETPTRS
0001A4r 2               .ifdef CONFIG_2
0001A4r 2  20 rr rr             jsr     LE33D
0001A7r 2  4C rr rr             jmp     L2351
0001AAr 2               LE33D:
0001AAr 2               .endif
0001AAr 2  A5 29                lda     TXTTAB
0001ACr 2  A4 2A                ldy     TXTTAB+1
0001AEr 2  85 21                sta     INDEX
0001B0r 2  84 22                sty     INDEX+1
0001B2r 2  18                   clc
0001B3r 2               L23FA:
0001B3r 2  A0 01                ldy     #$01
0001B5r 2  B1 21                lda     (INDEX),y
0001B7r 2               .ifdef CONFIG_2
0001B7r 2  F0 5F                beq     RET3
0001B9r 2               .else
0001B9r 2                       jeq     L2351
0001B9r 2               .endif
0001B9r 2  A0 04                ldy     #$04
0001BBr 2               L2405:
0001BBr 2  C8                   iny
0001BCr 2  B1 21                lda     (INDEX),y
0001BEr 2  D0 FB                bne     L2405
0001C0r 2  C8                   iny
0001C1r 2  98                   tya
0001C2r 2  65 21                adc     INDEX
0001C4r 2  AA                   tax
0001C5r 2  A0 00                ldy     #$00
0001C7r 2  91 21                sta     (INDEX),y
0001C9r 2  A5 22                lda     INDEX+1
0001CBr 2  69 00                adc     #$00
0001CDr 2  C8                   iny
0001CEr 2  91 21                sta     (INDEX),y
0001D0r 2  86 21                stx     INDEX
0001D2r 2  85 22                sta     INDEX+1
0001D4r 2  90 DD                bcc     L23FA	; always
0001D6r 2               
0001D6r 2               ; ----------------------------------------------------------------------------
0001D6r 2               .ifdef KBD
0001D6r 2               .include "kbd_loadsave.s"
0001D6r 3               .segment "CODE"
0001D6r 3               SLOD:
0001D6r 3  A2 01                ldx     #$01
0001D8r 3  2C                   .byte   $2C
0001D9r 3               PLOD:
0001D9r 3  A2 00                ldx     #$00
0001DBr 3  A4 38                ldy     CURLIN+1
0001DDr 3  C8                   iny
0001DEr 3  84 93                sty     JMPADRS
0001E0r 3  20 rr rr             jsr     LFFD3
0001E3r 3  20 rr rr             jsr     VARTAB_MINUS_2_TO_AY
0001E6r 3  A2 02                ldx     #$02
0001E8r 3  20 rr rr             jsr     LFF64
0001EBr 3  A2 6F                ldx     #$6F
0001EDr 3  A0 00                ldy     #$00
0001EFr 3  20 rr rr             jsr     LE39A
0001F2r 3  20 rr rr             jsr     LE33D
0001F5r 3  4C rr rr             jmp     CLEARC
0001F8r 3  FF FF FF             .byte   $FF,$FF,$FF
0001FBr 3               
0001FBr 3               ; ----------------------------------------------------------------------------
0001FBr 3               VER:
0001FBr 3  A9 13                lda     #$13
0001FDr 3  A6 5C                ldx     FAC
0001FFr 3  F0 03                beq     LE397
000201r 3  AD F9 DF             lda     $DFF9
000204r 3               LE397:
000204r 3  4C rr rr             jmp     FLOAT
000207r 3               LE39A:
000207r 3  B5 2B                lda     VARTAB,x
000209r 3  18                   clc
00020Ar 3  79 1B 05             adc     $051B,y
00020Dr 3  99 2B 00             sta     VARTAB,y
000210r 3  B5 2C                lda     VARTAB+1,x
000212r 3  79 1C 05             adc     $051C,y
000215r 3  99 2C 00             sta     VARTAB+1,y
000218r 3               ; !!! next instruction is an RTS!
000218r 3               
000218r 2               .endif
000218r 2               
000218r 2               .ifdef CONFIG_2
000218r 2               ; !!! kbd_loadsave.s requires an RTS here!
000218r 2               RET3:
000218r 2  60           		rts
000219r 2               .endif
000219r 2               
000219r 2               .include "inline.s"
000219r 3               .segment "CODE"
000219r 3               
000219r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
000219r 3               L2420:
000219r 3                 .ifdef OSI
000219r 3                       jsr     OUTDO
000219r 3                 .endif
000219r 3                       dex
000219r 3                 .ifdef AIM65
000219r 3                       bmi     L2423
000219r 3                       jsr     PSLS
000219r 3                       jmp     INLIN2
000219r 3               LB35F:
000219r 3                       jsr     OUTDO
000219r 3                 .else
000219r 3                       bpl     INLIN2
000219r 3                 .endif
000219r 3               L2423:
000219r 3                 .ifdef OSI
000219r 3                       jsr     OUTDO
000219r 3                 .endif
000219r 3                       jsr     CRDO
000219r 3               .endif
000219r 3               
000219r 3               ; ----------------------------------------------------------------------------
000219r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
000219r 3               ; ----------------------------------------------------------------------------
000219r 3               .ifndef KBD
000219r 3               INLIN:
000219r 3                 .ifdef APPLE
000219r 3                       ldx     #$DD
000219r 3               INLIN1:
000219r 3                       stx     $33
000219r 3                       jsr     L2900
000219r 3                       cpx     #$EF
000219r 3                       bcs     L0C32
000219r 3                       ldx     #$EF
000219r 3               L0C32:
000219r 3                       lda     #$00
000219r 3                       sta     INPUTBUFFER,x
000219r 3                       ldx     #<INPUTBUFFER-1
000219r 3                       ldy     #>INPUTBUFFER-1
000219r 3                       rts
000219r 3                 .endif
000219r 3               
000219r 3                 .ifndef APPLE
000219r 3                       ldx     #$00
000219r 3               INLIN2:
000219r 3                       jsr     GETLN
000219r 3                   .ifdef AIM65
000219r 3                       cmp     #$1A
000219r 3                       bne     INLINAIM
000219r 3                       jsr     DU13
000219r 3                       jmp     INLIN
000219r 3               INLINAIM:
000219r 3                   .endif
000219r 3                   .ifndef CONFIG_NO_LINE_EDITING
000219r 3                       cmp     #$07
000219r 3                       beq     L2443
000219r 3                   .endif
000219r 3                       cmp     #$0D
000219r 3                       beq     L2453
000219r 3                   .ifndef CONFIG_NO_LINE_EDITING
000219r 3                       cmp     #$20
000219r 3                     .ifdef AIM65
000219r 3                       bcc     L244E
000219r 3                     .else
000219r 3                       bcc     INLIN2
000219r 3                     .endif
000219r 3                     .ifdef MICROTAN
000219r 3                       cmp     #$80
000219r 3                     .else
000219r 3                       .ifdef AIM65
000219r 3                       cmp     #$7F
000219r 3                       beq     L2420
000219r 3                       .endif
000219r 3                       cmp     #$7D
000219r 3                     .endif
000219r 3                       bcs     INLIN2
000219r 3                       cmp     #$40 ; @
000219r 3                     .ifdef AIM65
000219r 3                       beq     LB35F
000219r 3                     .else
000219r 3                       beq     L2423
000219r 3                     .ifdef MICROTAN
000219r 3                       cmp     #$7F ; DEL
000219r 3                     .else
000219r 3                       cmp     #$5F ; _
000219r 3                     .endif
000219r 3                       beq     L2420
000219r 3                     .endif
000219r 3               L2443:
000219r 3                     .ifdef MICROTAN
000219r 3                       cpx     #$4F
000219r 3                     .else
000219r 3                       cpx     #$47
000219r 3                     .endif
000219r 3                       bcs     L244C
000219r 3                   .endif
000219r 3                       sta     INPUTBUFFER,x
000219r 3                       inx
000219r 3                   .if .def(OSI) || .def(AIM65)
000219r 3                       .byte   $2C
000219r 3                   .else
000219r 3                       bne     INLIN2
000219r 3                   .endif
000219r 3               L244C:
000219r 3                   .ifndef CONFIG_NO_LINE_EDITING
000219r 3                       lda     #$07 ; BEL
000219r 3               L244E:
000219r 3                       jsr     OUTDO
000219r 3                       bne     INLIN2
000219r 3                   .endif
000219r 3               L2453:
000219r 3                       jmp     L29B9
000219r 3                 .endif
000219r 3               .endif
000219r 3               
000219r 3               .ifndef KBD
000219r 3                 .ifndef APPLE
000219r 3               GETLN:
000219r 3                   .ifdef CONFIG_FILE
000219r 3                       jsr     CHRIN
000219r 3                       ldy     CURDVC
000219r 3                       bne     L2465
000219r 3                   .else
000219r 3                       jsr     MONRDKEY
000219r 3                   .endif
000219r 3                   .ifdef OSI
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       nop
000219r 3                       and     #$7F
000219r 3                   .endif
000219r 3                 .endif
000219r 3                 .ifdef APPLE
000219r 3               RDKEY:
000219r 3                       jsr     LFD0C
000219r 3                       and     #$7F
000219r 3                 .endif
000219r 3                   .ifdef SYM1
000219r 3                       cmp     #$14
000219r 3                   .else
000219r 3                       cmp     #$0F
000219r 3                   .endif
000219r 3                       bne     L2465
000219r 3                       pha
000219r 3                       lda     Z14
000219r 3                       eor     #$FF
000219r 3                       sta     Z14
000219r 3                       pla
000219r 3               L2465:
000219r 3                       rts
000219r 3               .endif
000219r 3               
000219r 2               
000219r 2               ; ----------------------------------------------------------------------------
000219r 2               ; TOKENIZE THE INPUT LINE
000219r 2               ; ----------------------------------------------------------------------------
000219r 2               PARSE_INPUT_LINE:
000219r 2  A6 73                ldx     TXTPTR
00021Br 2  A0 04                ldy     #$04
00021Dr 2  84 0B                sty     DATAFLG
00021Fr 2               L246C:
00021Fr 2  BD 00 07             lda     INPUTBUFFERX,x
000222r 2               .ifdef CONFIG_CBM_ALL
000222r 2                       bpl     LC49E
000222r 2                       cmp     #$FF
000222r 2                       beq     L24AC
000222r 2                       inx
000222r 2                       bne     L246C
000222r 2               LC49E:
000222r 2               .endif
000222r 2  C9 20                cmp     #$20
000224r 2  F0 37                beq     L24AC
000226r 2  85 07                sta     ENDCHR
000228r 2  C9 22                cmp     #$22
00022Ar 2  F0 56                beq     L24D0
00022Cr 2  24 0B                bit     DATAFLG
00022Er 2  70 2D                bvs     L24AC
000230r 2  C9 3F                cmp     #$3F
000232r 2  D0 04                bne     L2484
000234r 2  A9 97                lda     #TOKEN_PRINT
000236r 2  D0 25                bne     L24AC
000238r 2               L2484:
000238r 2  C9 30                cmp     #$30
00023Ar 2  90 04                bcc     L248C
00023Cr 2  C9 3C                cmp     #$3C
00023Er 2  90 1D                bcc     L24AC
000240r 2               ; ----------------------------------------------------------------------------
000240r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000240r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000240r 2               ; ----------------------------------------------------------------------------
000240r 2               L248C:
000240r 2  84 6A                sty     STRNG2
000242r 2  A0 00                ldy     #$00
000244r 2  84 08                sty     EOLPNTR
000246r 2  88                   dey
000247r 2  86 73                stx     TXTPTR
000249r 2  CA                   dex
00024Ar 2               L2496:
00024Ar 2  C8                   iny
00024Br 2               L2497:
00024Br 2  E8                   inx
00024Cr 2               L2498:
00024Cr 2               .ifdef KBD
00024Cr 2  20 rr rr             jsr     GET_UPPER
00024Fr 2               .else
00024Fr 2                       lda     INPUTBUFFERX,x
00024Fr 2                 .ifndef CONFIG_2
00024Fr 2                       cmp     #$20
00024Fr 2                       beq     L2497
00024Fr 2                 .endif
00024Fr 2               .endif
00024Fr 2  38                   sec
000250r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
000253r 2  F0 F5                beq     L2496
000255r 2  C9 80                cmp     #$80
000257r 2  D0 30                bne     L24D7
000259r 2  05 08                ora     EOLPNTR
00025Br 2               ; ----------------------------------------------------------------------------
00025Br 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00025Br 2               ; ----------------------------------------------------------------------------
00025Br 2               L24AA:
00025Br 2  A4 6A                ldy     STRNG2
00025Dr 2               L24AC:
00025Dr 2  E8                   inx
00025Er 2  C8                   iny
00025Fr 2  99 FB 06             sta     INPUTBUFFER-5,y
000262r 2  B9 FB 06             lda     INPUTBUFFER-5,y
000265r 2  F0 36                beq     L24EA
000267r 2  38                   sec
000268r 2  E9 3A                sbc     #$3A
00026Ar 2  F0 04                beq     L24BF
00026Cr 2  C9 49                cmp     #$49
00026Er 2  D0 02                bne     L24C1
000270r 2               L24BF:
000270r 2  85 0B                sta     DATAFLG
000272r 2               L24C1:
000272r 2  38                   sec
000273r 2  E9 54                sbc     #TOKEN_REM-':'
000275r 2  D0 A8                bne     L246C
000277r 2  85 07                sta     ENDCHR
000279r 2               ; ----------------------------------------------------------------------------
000279r 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000279r 2               ; BY COPYING CHARS UP TO ENDCHR.
000279r 2               ; ----------------------------------------------------------------------------
000279r 2               L24C8:
000279r 2  BD 00 07             lda     INPUTBUFFERX,x
00027Cr 2  F0 DF                beq     L24AC
00027Er 2  C5 07                cmp     ENDCHR
000280r 2  F0 DB                beq     L24AC
000282r 2               L24D0:
000282r 2  C8                   iny
000283r 2  99 FB 06             sta     INPUTBUFFER-5,y
000286r 2  E8                   inx
000287r 2  D0 F0                bne     L24C8
000289r 2               ; ----------------------------------------------------------------------------
000289r 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
000289r 2               ; ----------------------------------------------------------------------------
000289r 2               L24D7:
000289r 2  A6 73                ldx     TXTPTR
00028Br 2  E6 08                inc     EOLPNTR
00028Dr 2               L24DB:
00028Dr 2  C8                   iny
00028Er 2  B9 rr rr             lda     MATHTBL+28+1,y
000291r 2  10 FA                bpl     L24DB
000293r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000296r 2  D0 B4                bne     L2498
000298r 2  BD 00 07             lda     INPUTBUFFERX,x
00029Br 2  10 BE                bpl     L24AA
00029Dr 2               ; ---END OF LINE------------------
00029Dr 2               L24EA:
00029Dr 2  99 FD 06             sta     INPUTBUFFER-3,y
0002A0r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
0002A0r 2  C6 74                dec     TXTPTR+1
0002A2r 2               .endif
0002A2r 2  A9 FF                lda     #<INPUTBUFFER-1
0002A4r 2  85 73                sta     TXTPTR
0002A6r 2  60                   rts
0002A7r 2               
0002A7r 2               ; ----------------------------------------------------------------------------
0002A7r 2               ; SEARCH FOR LINE
0002A7r 2               ;
0002A7r 2               ; (LINNUM) = LINE # TO FIND
0002A7r 2               ; IF NOT FOUND:  CARRY = 0
0002A7r 2               ;	LOWTR POINTS AT NEXT LINE
0002A7r 2               ; IF FOUND:      CARRY = 1
0002A7r 2               ;	LOWTR POINTS AT LINE
0002A7r 2               ; ----------------------------------------------------------------------------
0002A7r 2               FNDLIN:
0002A7r 2               .ifdef KBD
0002A7r 2  20 6C 00             jsr     CHRGET
0002AAr 2  4C rr rr             jmp     LE444
0002ADr 2               LE440:
0002ADr 2  08                   php
0002AEr 2  20 rr rr             jsr     LINGET
0002B1r 2               LE444:
0002B1r 2  20 rr rr             jsr     LF457
0002B4r 2  A2 FF                ldx     #$FF
0002B6r 2  28                   plp
0002B7r 2  F0 18                beq     LE464
0002B9r 2  20 72 00             jsr     CHRGOT
0002BCr 2  F0 17                beq     L2520
0002BEr 2  C9 A5                cmp     #$A5
0002C0r 2  D0 13                bne     L2520
0002C2r 2  20 6C 00             jsr     CHRGET
0002C5r 2  F0 0A                beq     LE464
0002C7r 2  B0 05                bcs     LE461
0002C9r 2  20 rr rr             jsr     LINGET
0002CCr 2  F0 07                beq     L2520
0002CEr 2               LE461:
0002CEr 2  4C rr rr             jmp     SYNERR
0002D1r 2               LE464:
0002D1r 2  86 13                stx     LINNUM
0002D3r 2  86 14                stx     LINNUM+1
0002D5r 2               .else
0002D5r 2                       lda     TXTTAB
0002D5r 2                       ldx     TXTTAB+1
0002D5r 2               FL1:
0002D5r 2                       ldy     #$01
0002D5r 2                       sta     LOWTR
0002D5r 2                       stx     LOWTR+1
0002D5r 2                       lda     (LOWTR),y
0002D5r 2                       beq     L251F
0002D5r 2                       iny
0002D5r 2                       iny
0002D5r 2                       lda     LINNUM+1
0002D5r 2                       cmp     (LOWTR),y
0002D5r 2                       bcc     L2520
0002D5r 2                       beq     L250D
0002D5r 2                       dey
0002D5r 2                       bne     L2516
0002D5r 2               L250D:
0002D5r 2                       lda     LINNUM
0002D5r 2                       dey
0002D5r 2                       cmp     (LOWTR),y
0002D5r 2                       bcc     L2520
0002D5r 2                       beq     L2520
0002D5r 2               L2516:
0002D5r 2                       dey
0002D5r 2                       lda     (LOWTR),y
0002D5r 2                       tax
0002D5r 2                       dey
0002D5r 2                       lda     (LOWTR),y
0002D5r 2                       bcs     FL1
0002D5r 2               L251F:
0002D5r 2                       clc
0002D5r 2               .endif
0002D5r 2               L2520:
0002D5r 2  60                   rts
0002D6r 2               
0002D6r 2               ; ----------------------------------------------------------------------------
0002D6r 2               ; "NEW" STATEMENT
0002D6r 2               ; ----------------------------------------------------------------------------
0002D6r 2               NEW:
0002D6r 2  D0 FD                bne     L2520
0002D8r 2               SCRTCH:
0002D8r 2  A9 00                lda     #$00
0002DAr 2  A8                   tay
0002DBr 2  91 29                sta     (TXTTAB),y
0002DDr 2  C8                   iny
0002DEr 2  91 29                sta     (TXTTAB),y
0002E0r 2  A5 29                lda     TXTTAB
0002E2r 2               .ifdef CONFIG_2
0002E2r 2  18           		clc
0002E3r 2               .endif
0002E3r 2  69 02                adc     #$02
0002E5r 2  85 2B                sta     VARTAB
0002E7r 2  A5 2A                lda     TXTTAB+1
0002E9r 2  69 00                adc     #$00
0002EBr 2  85 2C                sta     VARTAB+1
0002EDr 2               ; ----------------------------------------------------------------------------
0002EDr 2               SETPTRS:
0002EDr 2  20 rr rr             jsr     STXTPT
0002F0r 2               .ifdef CONFIG_11A
0002F0r 2  A9 00                lda     #$00
0002F2r 2               
0002F2r 2               ; ----------------------------------------------------------------------------
0002F2r 2               ; "CLEAR" STATEMENT
0002F2r 2               ; ----------------------------------------------------------------------------
0002F2r 2               CLEAR:
0002F2r 2  D0 2A                bne     L256A
0002F4r 2               .endif
0002F4r 2               CLEARC:
0002F4r 2               .ifdef KBD
0002F4r 2  A9 FF                lda     #<CONST_MEMSIZ
0002F6r 2  A0 3F                ldy     #>CONST_MEMSIZ
0002F8r 2               .else
0002F8r 2                       lda     MEMSIZ
0002F8r 2                       ldy     MEMSIZ+1
0002F8r 2               .endif
0002F8r 2  85 31                sta     FRETOP
0002FAr 2  84 32                sty     FRETOP+1
0002FCr 2               .ifdef CONFIG_CBM_ALL
0002FCr 2                       jsr     CLALL
0002FCr 2               .endif
0002FCr 2  A5 2B                lda     VARTAB
0002FEr 2  A4 2C                ldy     VARTAB+1
000300r 2  85 2D                sta     ARYTAB
000302r 2  84 2E                sty     ARYTAB+1
000304r 2  85 2F                sta     STREND
000306r 2  84 30                sty     STREND+1
000308r 2  20 rr rr             jsr     RESTORE
00030Br 2               ; ----------------------------------------------------------------------------
00030Br 2               STKINI:
00030Br 2  A2 18                ldx     #TEMPST
00030Dr 2  86 15                stx     TEMPPT
00030Fr 2  68                   pla
000310r 2               .ifdef CONFIG_2
000310r 2  A8           		tay
000311r 2               .else
000311r 2                       sta     STACK+STACK_TOP+1
000311r 2               .endif
000311r 2  68                   pla
000312r 2               .ifndef CONFIG_2
000312r 2                       sta     STACK+STACK_TOP+2
000312r 2               .endif
000312r 2  A2 FE                ldx     #STACK_TOP
000314r 2  9A                   txs
000315r 2               .ifdef CONFIG_2
000315r 2  48                   pha
000316r 2  98                   tya
000317r 2  48                   pha
000318r 2               .endif
000318r 2  A9 00                lda     #$00
00031Ar 2  85 3C                sta     OLDTEXT+1
00031Cr 2  85 0C                sta     SUBFLG
00031Er 2               L256A:
00031Er 2  60                   rts
00031Fr 2               
00031Fr 2               ; ----------------------------------------------------------------------------
00031Fr 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
00031Fr 2               ; ----------------------------------------------------------------------------
00031Fr 2               STXTPT:
00031Fr 2  18                   clc
000320r 2  A5 29                lda     TXTTAB
000322r 2  69 FF                adc     #$FF
000324r 2  85 73                sta     TXTPTR
000326r 2  A5 2A                lda     TXTTAB+1
000328r 2  69 FF                adc     #$FF
00032Ar 2  85 74                sta     TXTPTR+1
00032Cr 2  60                   rts
00032Dr 2               
00032Dr 2               ; ----------------------------------------------------------------------------
00032Dr 2               .ifdef KBD
00032Dr 2               LE4C0:
00032Dr 2  A0 rr                ldy     #<LE444
00032Fr 2  A2 rr                ldx     #>LE444
000331r 2               LE4C4:
000331r 2  20 rr rr             jsr     LFFD6
000334r 2  20 rr rr             jsr     LFFED
000337r 2  AD 04 05             lda     $0504
00033Ar 2  18                   clc
00033Br 2  69 08                adc     #$08
00033Dr 2  8D 04 05             sta     $0504
000340r 2  60                   rts
000341r 2               
000341r 2               CMPJMPADRS:
000341r 2  B5 01                lda     1,x
000343r 2  C5 95                cmp     JMPADRS+2
000345r 2  D0 04                bne     LE4DE
000347r 2  B5 00                lda     0,x
000349r 2  C5 94                cmp     JMPADRS+1
00034Br 2               LE4DE:
00034Br 2  60                   rts
00034Cr 2               .endif
00034Cr 2               
00034Cr 2               ; ----------------------------------------------------------------------------
00034Cr 2               ; "LIST" STATEMENT
00034Cr 2               ; ----------------------------------------------------------------------------
00034Cr 2               LIST:
00034Cr 2               .ifdef KBD
00034Cr 2  20 rr rr             jsr     LE440
00034Fr 2  D0 FA                bne     LE4DE
000351r 2  68                   pla
000352r 2  68                   pla
000353r 2               L25A6:
000353r 2  20 rr rr             jsr     CRDO
000356r 2               .else
000356r 2                   .ifdef AIM65
000356r 2                       pha
000356r 2                       lda     #$00
000356r 2               LB4BF:
000356r 2                       sta     INPUTFLG
000356r 2                       pla
000356r 2                   .endif
000356r 2                 .ifdef MICROTAN
000356r 2                       php
000356r 2                       jmp     LE21C ; patch
000356r 2               LC57E:
000356r 2                  .elseif .def(AIM65) || .def(SYM1)
000356r 2                       php
000356r 2                       jsr     LINGET
000356r 2               LC57E:
000356r 2                 .else
000356r 2                       bcc     L2581
000356r 2                       beq     L2581
000356r 2                       cmp     #TOKEN_MINUS
000356r 2                       bne     L256A
000356r 2               L2581:
000356r 2                       jsr     LINGET
000356r 2                 .endif
000356r 2                       jsr     FNDLIN
000356r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000356r 2                       plp
000356r 2                       beq     L2598
000356r 2                 .endif
000356r 2                       jsr     CHRGOT
000356r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000356r 2                       beq     L25A6
000356r 2                 .else
000356r 2                       beq     L2598
000356r 2                 .endif
000356r 2                       cmp     #TOKEN_MINUS
000356r 2                       bne     L2520
000356r 2                       jsr     CHRGET
000356r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000356r 2                       beq     L2598
000356r 2                       jsr     LINGET
000356r 2                       beq     L25A6
000356r 2                       rts
000356r 2                 .else
000356r 2                       jsr     LINGET
000356r 2                       bne     L2520
000356r 2                 .endif
000356r 2               L2598:
000356r 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
000356r 2                       pla
000356r 2                       pla
000356r 2                       lda     LINNUM
000356r 2                       ora     LINNUM+1
000356r 2                       bne     L25A6
000356r 2                 .endif
000356r 2                       lda     #$FF
000356r 2                       sta     LINNUM
000356r 2                       sta     LINNUM+1
000356r 2               L25A6:
000356r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000356r 2                       pla
000356r 2                       pla
000356r 2                 .endif
000356r 2               L25A6X:
000356r 2               .endif
000356r 2  A0 01                ldy     #$01
000358r 2               .ifdef CONFIG_DATAFLG
000358r 2                       sty     DATAFLG
000358r 2               .endif
000358r 2  B1 94                lda     (LOWTRX),y
00035Ar 2  F0 36                beq     L25E5
00035Cr 2               .ifdef MICROTAN
00035Cr 2                       jmp     LE21F
00035Cr 2               LC5A9:
00035Cr 2               .else
00035Cr 2  20 rr rr             jsr     ISCNTC
00035Fr 2               .endif
00035Fr 2               .ifndef KBD
00035Fr 2                       jsr     CRDO
00035Fr 2               .endif
00035Fr 2  C8                   iny
000360r 2  B1 94                lda     (LOWTRX),y
000362r 2  AA                   tax
000363r 2  C8                   iny
000364r 2  B1 94                lda     (LOWTRX),y
000366r 2  C5 14                cmp     LINNUM+1
000368r 2  D0 04                bne     L25C1
00036Ar 2  E4 13                cpx     LINNUM
00036Cr 2  F0 02                beq     L25C3
00036Er 2               L25C1:
00036Er 2  B0 22                bcs     L25E5
000370r 2               ; ---LIST ONE LINE----------------
000370r 2               L25C3:
000370r 2  84 47                sty     FORPNT
000372r 2  20 rr rr             jsr     LINPRT
000375r 2  A9 20                lda     #$20
000377r 2               L25CA:
000377r 2  A4 47                ldy     FORPNT
000379r 2  29 7F                and     #$7F
00037Br 2               L25CE:
00037Br 2  20 rr rr             jsr     OUTDO
00037Er 2               .ifdef CONFIG_DATAFLG
00037Er 2                       cmp     #$22
00037Er 2                       bne     LA519
00037Er 2                       lda     DATAFLG
00037Er 2                       eor     #$FF
00037Er 2                       sta     DATAFLG
00037Er 2               LA519:
00037Er 2               .endif
00037Er 2  C8                   iny
00037Fr 2               .ifdef CONFIG_11
00037Fr 2  F0 11                beq     L25E5
000381r 2               .endif
000381r 2  B1 94                lda     (LOWTRX),y
000383r 2  D0 10                bne     L25E8
000385r 2  A8                   tay
000386r 2  B1 94                lda     (LOWTRX),y
000388r 2  AA                   tax
000389r 2  C8                   iny
00038Ar 2  B1 94                lda     (LOWTRX),y
00038Cr 2  86 94                stx     LOWTRX
00038Er 2  85 95                sta     LOWTRX+1
000390r 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000390r 2                       bne     L25A6X
000390r 2               .else
000390r 2  D0 C1                bne     L25A6
000392r 2               .endif
000392r 2               L25E5:
000392r 2               .ifdef AIM65
000392r 2                       lda     INPUTFLG
000392r 2                       beq     L25E5a
000392r 2                       jsr     CRDO
000392r 2                       jsr     CRDO
000392r 2                       lda     #$1a
000392r 2                       jsr     OUTDO
000392r 2                       jsr     $e50a
000392r 2               L25E5a:
000392r 2               .endif
000392r 2  4C rr rr             jmp     RESTART
000395r 2               L25E8:
000395r 2  10 E4                bpl     L25CE
000397r 2               .ifdef CONFIG_DATAFLG
000397r 2                       cmp     #$FF
000397r 2                       beq     L25CE
000397r 2                       bit     DATAFLG
000397r 2                       bmi     L25CE
000397r 2               .endif
000397r 2  38                   sec
000398r 2  E9 7F                sbc     #$7F
00039Ar 2  AA                   tax
00039Br 2  84 47                sty     FORPNT
00039Dr 2  A0 FF                ldy     #$FF
00039Fr 2               L25F2:
00039Fr 2  CA                   dex
0003A0r 2  F0 08                beq     L25FD
0003A2r 2               L25F5:
0003A2r 2  C8                   iny
0003A3r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003A6r 2  10 FA                bpl     L25F5
0003A8r 2  30 F5                bmi     L25F2
0003AAr 2               L25FD:
0003AAr 2  C8                   iny
0003ABr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003AEr 2  30 C7                bmi     L25CA
0003B0r 2  20 rr rr             jsr     OUTDO
0003B3r 2  D0 F5                bne     L25FD	; always
0003B5r 2               
0003B5r 2               
0003B5r 1               .include "flow1.s"
0003B5r 2               .segment "CODE"
0003B5r 2               
0003B5r 2               ; ----------------------------------------------------------------------------
0003B5r 2               ; "FOR" STATEMENT
0003B5r 2               ;
0003B5r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003B5r 2               ; 2 -- TXTPTR
0003B5r 2               ; 2 -- LINE NUMBER
0003B5r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003B5r 2               ; 1 -- STEP SIGN
0003B5r 2               ; 5 -- STEP VALUE
0003B5r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003B5r 2               ; 1 -- FOR TOKEN ($81)
0003B5r 2               ; ----------------------------------------------------------------------------
0003B5r 2               FOR:
0003B5r 2  A9 80                lda     #$80
0003B7r 2  85 0C                sta     SUBFLG
0003B9r 2  20 rr rr             jsr     LET
0003BCr 2  20 rr rr             jsr     GTFORPNT
0003BFr 2  D0 05                bne     L2619
0003C1r 2  8A                   txa
0003C2r 2  69 0D                adc     #FOR_STACK1
0003C4r 2  AA                   tax
0003C5r 2  9A                   txs
0003C6r 2               L2619:
0003C6r 2  68                   pla
0003C7r 2  68                   pla
0003C8r 2  A9 08                lda     #FOR_STACK2
0003CAr 2  20 rr rr             jsr     CHKMEM
0003CDr 2  20 rr rr             jsr     DATAN
0003D0r 2  18                   clc
0003D1r 2  98                   tya
0003D2r 2  65 73                adc     TXTPTR
0003D4r 2  48                   pha
0003D5r 2  A5 74                lda     TXTPTR+1
0003D7r 2  69 00                adc     #$00
0003D9r 2  48                   pha
0003DAr 2  A5 38                lda     CURLIN+1
0003DCr 2  48                   pha
0003DDr 2  A5 37                lda     CURLIN
0003DFr 2  48                   pha
0003E0r 2  A9 9E                lda     #TOKEN_TO
0003E2r 2  20 rr rr             jsr     SYNCHR
0003E5r 2  20 rr rr             jsr     CHKNUM
0003E8r 2  20 rr rr             jsr     FRMNUM
0003EBr 2  A5 60                lda     FACSIGN
0003EDr 2  09 7F                ora     #$7F
0003EFr 2  25 5D                and     FAC+1
0003F1r 2  85 5D                sta     FAC+1
0003F3r 2  A9 rr                lda     #<STEP
0003F5r 2  A0 rr                ldy     #>STEP
0003F7r 2  85 21                sta     INDEX
0003F9r 2  84 22                sty     INDEX+1
0003FBr 2  4C rr rr             jmp     FRM_STACK3
0003FEr 2               
0003FEr 2               ; ----------------------------------------------------------------------------
0003FEr 2               ; "STEP" PHRASE OF "FOR" STATEMENT
0003FEr 2               ; ----------------------------------------------------------------------------
0003FEr 2               STEP:
0003FEr 2  A9 rr                lda     #<CON_ONE
000400r 2  A0 rr                ldy     #>CON_ONE
000402r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000405r 2  20 72 00             jsr     CHRGOT
000408r 2  C9 A3                cmp     #TOKEN_STEP
00040Ar 2  D0 06                bne     L2665
00040Cr 2  20 6C 00             jsr     CHRGET
00040Fr 2  20 rr rr             jsr     FRMNUM
000412r 2               L2665:
000412r 2  20 rr rr             jsr     SIGN
000415r 2  20 rr rr             jsr     FRM_STACK2
000418r 2  A5 48                lda     FORPNT+1
00041Ar 2  48                   pha
00041Br 2  A5 47                lda     FORPNT
00041Dr 2  48                   pha
00041Er 2  A9 81                lda     #$81
000420r 2  48                   pha
000421r 2               
000421r 2               ; ----------------------------------------------------------------------------
000421r 2               ; PERFORM NEXT STATEMENT
000421r 2               ; ----------------------------------------------------------------------------
000421r 2               NEWSTT:
000421r 2  20 rr rr             jsr     ISCNTC
000424r 2  A5 73                lda     TXTPTR
000426r 2  A4 74                ldy     TXTPTR+1
000428r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000428r 2  C0 07                cpy     #>INPUTBUFFER
00042Ar 2                 .ifdef CBM2
00042Ar 2                       nop
00042Ar 2                 .endif
00042Ar 2  F0 04                beq     LC6D4
00042Cr 2               .else
00042Cr 2               ; BUG on AppleSoft I,
00042Cr 2               ; fixed differently on AppleSoft II (ldx/inx)
00042Cr 2                       beq     L2683
00042Cr 2               .endif
00042Cr 2  85 3B                sta     OLDTEXT
00042Er 2  84 3C                sty     OLDTEXT+1
000430r 2               LC6D4:
000430r 2  A0 00                ldy     #$00
000432r 2               L2683:
000432r 2  B1 73                lda     (TXTPTR),y
000434r 2               .ifndef CONFIG_11
000434r 2                       beq     LA5DC	; old: 1 cycle more on generic case
000434r 2                       cmp     #$3A
000434r 2                       beq     NEWSTT2
000434r 2               SYNERR1:
000434r 2                       jmp     SYNERR
000434r 2               LA5DC:
000434r 2               .else
000434r 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
000436r 2               .endif
000436r 2  A0 02                ldy     #$02
000438r 2  B1 73                lda     (TXTPTR),y
00043Ar 2  18                   clc
00043Br 2               .ifdef CONFIG_2
00043Br 2  D0 03 4C rr          jeq     L2701
00043Fr 2  rr           
000440r 2               .else
000440r 2                       beq     L2701
000440r 2               .endif
000440r 2  C8                   iny
000441r 2  B1 73                lda     (TXTPTR),y
000443r 2  85 37                sta     CURLIN
000445r 2  C8                   iny
000446r 2  B1 73                lda     (TXTPTR),y
000448r 2  85 38                sta     CURLIN+1
00044Ar 2  98                   tya
00044Br 2  65 73                adc     TXTPTR
00044Dr 2  85 73                sta     TXTPTR
00044Fr 2  90 02                bcc     NEWSTT2
000451r 2  E6 74                inc     TXTPTR+1
000453r 2               NEWSTT2:
000453r 2  20 6C 00             jsr     CHRGET
000456r 2  20 rr rr             jsr     EXECUTE_STATEMENT
000459r 2  4C rr rr             jmp     NEWSTT
00045Cr 2               
00045Cr 2               ; ----------------------------------------------------------------------------
00045Cr 2               ; EXECUTE A STATEMENT
00045Cr 2               ;
00045Cr 2               ; (A) IS FIRST CHAR OF STATEMENT
00045Cr 2               ; CARRY IS SET
00045Cr 2               ; ----------------------------------------------------------------------------
00045Cr 2               EXECUTE_STATEMENT:
00045Cr 2               .ifndef CONFIG_11A
00045Cr 2                       beq     RET1
00045Cr 2               .else
00045Cr 2  F0 3C                beq     RET2
00045Er 2               .endif
00045Er 2               .ifndef CONFIG_11
00045Er 2                       sec
00045Er 2               .endif
00045Er 2               EXECUTE_STATEMENT1:
00045Er 2  E9 80                sbc     #$80
000460r 2               .ifndef CONFIG_11
000460r 2                       jcc     LET	; old: 1 cycle more on instr.
000460r 2               .else
000460r 2  90 11                bcc     LET1; new: 1 cycle more on assignment
000462r 2               .endif
000462r 2  C9 1D                cmp     #NUM_TOKENS
000464r 2               .ifdef CONFIG_2
000464r 2  B0 17                bcs     LC721
000466r 2               .else
000466r 2                       bcs     SYNERR1
000466r 2               .endif
000466r 2  0A                   asl     a
000467r 2  A8                   tay
000468r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
00046Br 2  48                   pha
00046Cr 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
00046Fr 2  48                   pha
000470r 2  4C 6C 00             jmp     CHRGET
000473r 2               
000473r 2               .ifdef CONFIG_11
000473r 2               LET1:
000473r 2  4C rr rr             jmp     LET
000476r 2               
000476r 2               COLON:
000476r 2  C9 3A                cmp     #$3A
000478r 2  F0 D9                beq     NEWSTT2
00047Ar 2               SYNERR1:
00047Ar 2  4C rr rr             jmp     SYNERR
00047Dr 2               .endif
00047Dr 2               
00047Dr 2               .ifdef CONFIG_2; GO TO
00047Dr 2               LC721:
00047Dr 2  C9 45                cmp     #TOKEN_GO-$80
00047Fr 2  D0 F9                bne     SYNERR1
000481r 2  20 6C 00             jsr     CHRGET
000484r 2  A9 9E                lda     #TOKEN_TO
000486r 2  20 rr rr             jsr     SYNCHR
000489r 2  4C rr rr             jmp     GOTO
00048Cr 2               .endif
00048Cr 2               
00048Cr 2               ; ----------------------------------------------------------------------------
00048Cr 2               ; "RESTORE" STATEMENT
00048Cr 2               ; ----------------------------------------------------------------------------
00048Cr 2               RESTORE:
00048Cr 2  38                   sec
00048Dr 2  A5 29                lda     TXTTAB
00048Fr 2  E9 01                sbc     #$01
000491r 2  A4 2A                ldy     TXTTAB+1
000493r 2  B0 01                bcs     SETDA
000495r 2  88                   dey
000496r 2               SETDA:
000496r 2  85 3F                sta     DATPTR
000498r 2  84 40                sty     DATPTR+1
00049Ar 2               RET2:
00049Ar 2  60                   rts
00049Br 2               
00049Br 2               .include "iscntc.s"
00049Br 3               .segment "CODE"
00049Br 3               ; ----------------------------------------------------------------------------
00049Br 3               ; SEE IF CONTROL-C TYPED
00049Br 3               ; ----------------------------------------------------------------------------
00049Br 3               .ifndef CONFIG_CBM_ALL
00049Br 3               .include "cbm_iscntc.s"
00049Br 4               ; nothing - ISCNTC is a KERNAL function
00049Br 4               
00049Br 3               .endif
00049Br 3               .ifdef KBD
00049Br 3               .include "kbd_iscntc.s"
00049Br 4               .segment "CODE"
00049Br 4               ISCNTC:
00049Br 4  20 rr rr             jsr     LE8F3
00049Er 4  90 4E                bcc     RET1
0004A0r 4               LE633:
0004A0r 4  20 7F DE             jsr     LDE7F
0004A3r 4  F0 04                beq     STOP
0004A5r 4  C9 03                cmp     #$03
0004A7r 4  D0 F7                bne     LE633
0004A9r 4               ;!!! runs into "STOP"
0004A9r 4               
0004A9r 3               .endif
0004A9r 3               .ifdef OSI
0004A9r 3               .include "osi_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef APPLE
0004A9r 3               .include "apple_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef KIM
0004A9r 3               .include "kim_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef MICROTAN
0004A9r 3               .include "microtan_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef AIM65
0004A9r 3               .include "aim65_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef SYM1
0004A9r 3               .include "sym1_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef EATER
0004A9r 3               .include "eater_iscntc.s"
0004A9r 3               .endif
0004A9r 3               ;!!! runs into "STOP"
0004A9r 3               
0004A9r 2               ;!!! runs into "STOP"
0004A9r 2               ; ----------------------------------------------------------------------------
0004A9r 2               ; "STOP" STATEMENT
0004A9r 2               ; ----------------------------------------------------------------------------
0004A9r 2               STOP:
0004A9r 2  B0 01                bcs     END2
0004ABr 2               
0004ABr 2               ; ----------------------------------------------------------------------------
0004ABr 2               ; "END" STATEMENT
0004ABr 2               ; ----------------------------------------------------------------------------
0004ABr 2               END:
0004ABr 2  18                   clc
0004ACr 2               END2:
0004ACr 2  D0 40                bne     RET1
0004AEr 2  A5 73                lda     TXTPTR
0004B0r 2  A4 74                ldy     TXTPTR+1
0004B2r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004B2r 2               ; BUG on AppleSoft I
0004B2r 2               ; fix exists on AppleSoft II
0004B2r 2               ; TXTPTR+1 will always be > 0
0004B2r 2  A6 38                ldx     CURLIN+1
0004B4r 2  E8                   inx
0004B5r 2               .endif
0004B5r 2  F0 0C                beq     END4
0004B7r 2  85 3B                sta     OLDTEXT
0004B9r 2  84 3C                sty     OLDTEXT+1
0004BBr 2               CONTROL_C_TYPED:
0004BBr 2  A5 37                lda     CURLIN
0004BDr 2  A4 38                ldy     CURLIN+1
0004BFr 2  85 39                sta     OLDLIN
0004C1r 2  84 3A                sty     OLDLIN+1
0004C3r 2               END4:
0004C3r 2  68                   pla
0004C4r 2  68                   pla
0004C5r 2               L2701:
0004C5r 2  A9 rr                lda     #<QT_BREAK
0004C7r 2  A0 rr                ldy     #>QT_BREAK
0004C9r 2               .ifndef KBD
0004C9r 2                       ldx     #$00
0004C9r 2                       stx     Z14
0004C9r 2               .endif
0004C9r 2  90 03                bcc     L270E
0004CBr 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004CEr 2               L270E:
0004CEr 2  4C rr rr             jmp     RESTART
0004D1r 2               .ifdef KBD
0004D1r 2               LE664:
0004D1r 2  A8                   tay
0004D2r 2  4C rr rr             jmp     SNGFLT
0004D5r 2               .endif
0004D5r 2               
0004D5r 2               ; ----------------------------------------------------------------------------
0004D5r 2               ; "CONT" COMMAND
0004D5r 2               ; ----------------------------------------------------------------------------
0004D5r 2               CONT:
0004D5r 2  D0 17                bne     RET1
0004D7r 2  A2 1E                ldx     #ERR_CANTCONT
0004D9r 2  A4 3C                ldy     OLDTEXT+1
0004DBr 2  D0 03                bne     L271C
0004DDr 2  4C rr rr             jmp     ERROR
0004E0r 2               L271C:
0004E0r 2  A5 3B                lda     OLDTEXT
0004E2r 2  85 73                sta     TXTPTR
0004E4r 2  84 74                sty     TXTPTR+1
0004E6r 2  A5 39                lda     OLDLIN
0004E8r 2  A4 3A                ldy     OLDLIN+1
0004EAr 2  85 37                sta     CURLIN
0004ECr 2  84 38                sty     CURLIN+1
0004EEr 2               RET1:
0004EEr 2  60                   rts
0004EFr 2               
0004EFr 2               .ifdef KBD
0004EFr 2               PRT:
0004EFr 2  20 rr rr             jsr     GETBYT
0004F2r 2  8A                   txa
0004F3r 2               ; not ROR bug safe
0004F3r 2  6A                   ror     a
0004F4r 2  6A                   ror     a
0004F5r 2  6A                   ror     a
0004F6r 2  85 8F                sta     $8F
0004F8r 2  60                   rts
0004F9r 2               
0004F9r 2               LE68C:
0004F9r 2  A0 12                ldy     #$12
0004FBr 2               LE68E:
0004FBr 2  B9 rr rr             lda     LEA30,y
0004FEr 2  99 A2 03             sta     $03A2,y
000501r 2  88                   dey
000502r 2  10 F7                bpl     LE68E
000504r 2  60                   rts
000505r 2               .endif
000505r 2               
000505r 2               .ifndef AIM65
000505r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
000505r 2               ; CBM1 has the keyword removed,
000505r 2               ; but the code is still here
000505r 2               NULL:
000505r 2                       jsr     GETBYT
000505r 2                       bne     RET1
000505r 2                       inx
000505r 2                       cpx     #NULL_MAX
000505r 2                       bcs     L2739
000505r 2                       dex
000505r 2                       stx     Z15
000505r 2               L2738:
000505r 2                       rts
000505r 2               L2739:
000505r 2                       jmp     IQERR
000505r 2               .endif
000505r 2               .ifndef CONFIG_11A
000505r 2               CLEAR:
000505r 2                       bne     RET1
000505r 2                       jmp     CLEARC
000505r 2               .endif
000505r 2               .endif
000505r 2               
000505r 1               .include "loadsave.s"
000505r 2               .segment "CODE"
000505r 2               
000505r 2               .ifdef APPLE
000505r 2               .include "apple_loadsave.s"
000505r 2               .endif
000505r 2               .ifdef KIM
000505r 2               .include "kim_loadsave.s"
000505r 2               .endif
000505r 2               .ifdef MICROTAN
000505r 2               .include "microtan_loadsave.s"
000505r 2               .endif
000505r 2               .ifdef AIM65
000505r 2               .include "aim65_loadsave.s"
000505r 2               .endif
000505r 2               .ifdef SYM1
000505r 2               .include "sym1_loadsave.s"
000505r 2               .endif
000505r 2               
000505r 1               .include "flow2.s"
000505r 2               .segment "CODE"
000505r 2               ; ----------------------------------------------------------------------------
000505r 2               ; "RUN" COMMAND
000505r 2               ; ----------------------------------------------------------------------------
000505r 2               RUN:
000505r 2  D0 03                bne     L27CF
000507r 2  4C rr rr             jmp     SETPTRS
00050Ar 2               L27CF:
00050Ar 2  20 rr rr             jsr     CLEARC
00050Dr 2  4C rr rr             jmp     L27E9
000510r 2               
000510r 2               ; ----------------------------------------------------------------------------
000510r 2               ; "GOSUB" STATEMENT
000510r 2               ;
000510r 2               ; LEAVES 7 BYTES ON STACK:
000510r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
000510r 2               ; 2 -- TXTPTR
000510r 2               ; 2 -- LINE #
000510r 2               ; 1 -- GOSUB TOKEN
000510r 2               ; ----------------------------------------------------------------------------
000510r 2               GOSUB:
000510r 2  A9 03                lda     #$03
000512r 2  20 rr rr             jsr     CHKMEM
000515r 2  A5 74                lda     TXTPTR+1
000517r 2  48                   pha
000518r 2  A5 73                lda     TXTPTR
00051Ar 2  48                   pha
00051Br 2  A5 38                lda     CURLIN+1
00051Dr 2  48                   pha
00051Er 2  A5 37                lda     CURLIN
000520r 2  48                   pha
000521r 2  A9 8C                lda     #TOKEN_GOSUB
000523r 2  48                   pha
000524r 2               L27E9:
000524r 2  20 72 00             jsr     CHRGOT
000527r 2  20 rr rr             jsr     GOTO
00052Ar 2  4C rr rr             jmp     NEWSTT
00052Dr 2               
00052Dr 2               ; ----------------------------------------------------------------------------
00052Dr 2               ; "GOTO" STATEMENT
00052Dr 2               ; ALSO USED BY "RUN" AND "GOSUB"
00052Dr 2               ; ----------------------------------------------------------------------------
00052Dr 2               GOTO:
00052Dr 2  20 rr rr             jsr     LINGET
000530r 2  20 rr rr             jsr     REMN
000533r 2  A5 38                lda     CURLIN+1
000535r 2  C5 14                cmp     LINNUM+1
000537r 2  B0 0B                bcs     L2809
000539r 2  98                   tya
00053Ar 2  38                   sec
00053Br 2  65 73                adc     TXTPTR
00053Dr 2  A6 74                ldx     TXTPTR+1
00053Fr 2  90 07                bcc     L280D
000541r 2  E8                   inx
000542r 2  B0 04                bcs     L280D
000544r 2               L2809:
000544r 2  A5 29                lda     TXTTAB
000546r 2  A6 2A                ldx     TXTTAB+1
000548r 2               L280D:
000548r 2               .ifdef KBD
000548r 2  20 rr rr             jsr     LF457
00054Br 2  D0 1E                bne     UNDERR
00054Dr 2               .else
00054Dr 2                       jsr     FL1
00054Dr 2                       bcc     UNDERR
00054Dr 2               .endif
00054Dr 2  A5 94                lda     LOWTRX
00054Fr 2  E9 01                sbc     #$01
000551r 2  85 73                sta     TXTPTR
000553r 2  A5 95                lda     LOWTRX+1
000555r 2  E9 00                sbc     #$00
000557r 2  85 74                sta     TXTPTR+1
000559r 2               L281E:
000559r 2  60                   rts
00055Ar 2               
00055Ar 2               ; ----------------------------------------------------------------------------
00055Ar 2               ; "POP" AND "RETURN" STATEMENTS
00055Ar 2               ; ----------------------------------------------------------------------------
00055Ar 2               POP:
00055Ar 2  D0 FD                bne     L281E
00055Cr 2  A9 FF                lda     #$FF
00055Er 2               .ifdef CONFIG_2A
00055Er 2  85 48                sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000560r 2               .else
000560r 2                       sta     FORPNT
000560r 2               .endif
000560r 2  20 rr rr             jsr     GTFORPNT
000563r 2  9A                   txs
000564r 2  C9 8C                cmp     #TOKEN_GOSUB
000566r 2  F0 0B                beq     RETURN
000568r 2  A2 04                ldx     #ERR_NOGOSUB
00056Ar 2  2C                   .byte   $2C
00056Br 2               UNDERR:
00056Br 2  A2 0E                ldx     #ERR_UNDEFSTAT
00056Dr 2  4C rr rr             jmp     ERROR
000570r 2               ; ----------------------------------------------------------------------------
000570r 2               SYNERR2:
000570r 2  4C rr rr             jmp     SYNERR
000573r 2               ; ----------------------------------------------------------------------------
000573r 2               RETURN:
000573r 2  68                   pla
000574r 2  68                   pla
000575r 2  85 37                sta     CURLIN
000577r 2  68                   pla
000578r 2  85 38                sta     CURLIN+1
00057Ar 2  68                   pla
00057Br 2  85 73                sta     TXTPTR
00057Dr 2  68                   pla
00057Er 2  85 74                sta     TXTPTR+1
000580r 2               
000580r 2               ; ----------------------------------------------------------------------------
000580r 2               ; "DATA" STATEMENT
000580r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000580r 2               ; ----------------------------------------------------------------------------
000580r 2               DATA:
000580r 2  20 rr rr             jsr     DATAN
000583r 2               
000583r 2               ; ----------------------------------------------------------------------------
000583r 2               ; ADD (Y) TO TXTPTR
000583r 2               ; ----------------------------------------------------------------------------
000583r 2               ADDON:
000583r 2  98                   tya
000584r 2  18                   clc
000585r 2  65 73                adc     TXTPTR
000587r 2  85 73                sta     TXTPTR
000589r 2  90 02                bcc     L2852
00058Br 2  E6 74                inc     TXTPTR+1
00058Dr 2               L2852:
00058Dr 2  60                   rts
00058Er 2               
00058Er 2               ; ----------------------------------------------------------------------------
00058Er 2               ; SCAN AHEAD TO NEXT ":" OR EOL
00058Er 2               ; ----------------------------------------------------------------------------
00058Er 2               DATAN:
00058Er 2  A2 3A                ldx     #$3A
000590r 2  2C                   .byte   $2C
000591r 2               REMN:
000591r 2  A2 00                ldx     #$00
000593r 2  86 06                stx     CHARAC
000595r 2  A0 00                ldy     #$00
000597r 2  84 07                sty     ENDCHR
000599r 2               L285E:
000599r 2  A5 07                lda     ENDCHR
00059Br 2  A6 06                ldx     CHARAC
00059Dr 2  85 06                sta     CHARAC
00059Fr 2  86 07                stx     ENDCHR
0005A1r 2               L2866:
0005A1r 2  B1 73                lda     (TXTPTR),y
0005A3r 2  F0 E8                beq     L2852
0005A5r 2  C5 07                cmp     ENDCHR
0005A7r 2  F0 E4                beq     L2852
0005A9r 2  C8                   iny
0005AAr 2  C9 22                cmp     #$22
0005ACr 2               .ifndef CONFIG_11
0005ACr 2                       beq     L285E; old: swap & cont is faster
0005ACr 2                       bne     L2866
0005ACr 2               .else
0005ACr 2  D0 F3                bne     L2866; new: cont is faster
0005AEr 2  F0 E9                beq     L285E
0005B0r 2               .endif
0005B0r 2               
0005B0r 2               ; ----------------------------------------------------------------------------
0005B0r 2               ; "IF" STATEMENT
0005B0r 2               ; ----------------------------------------------------------------------------
0005B0r 2               IF:
0005B0r 2  20 rr rr             jsr     FRMEVL
0005B3r 2  20 72 00             jsr     CHRGOT
0005B6r 2  C9 88                cmp     #TOKEN_GOTO
0005B8r 2  F0 05                beq     L2884
0005BAr 2  A9 A1                lda     #TOKEN_THEN
0005BCr 2  20 rr rr             jsr     SYNCHR
0005BFr 2               L2884:
0005BFr 2  A5 5C                lda     FAC
0005C1r 2  D0 05                bne     L288D
0005C3r 2               
0005C3r 2               ; ----------------------------------------------------------------------------
0005C3r 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005C3r 2               ; ----------------------------------------------------------------------------
0005C3r 2               REM:
0005C3r 2  20 rr rr             jsr     REMN
0005C6r 2  F0 BB                beq     ADDON
0005C8r 2               L288D:
0005C8r 2  20 72 00             jsr     CHRGOT
0005CBr 2  B0 03                bcs     L2895
0005CDr 2  4C rr rr             jmp     GOTO
0005D0r 2               L2895:
0005D0r 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005D3r 2               
0005D3r 2               ; ----------------------------------------------------------------------------
0005D3r 2               ; "ON" STATEMENT
0005D3r 2               ;
0005D3r 2               ; ON <EXP> GOTO <LIST>
0005D3r 2               ; ON <EXP> GOSUB <LIST>
0005D3r 2               ; ----------------------------------------------------------------------------
0005D3r 2               ON:
0005D3r 2  20 rr rr             jsr     GETBYT
0005D6r 2  48                   pha
0005D7r 2  C9 8C                cmp     #TOKEN_GOSUB
0005D9r 2  F0 04                beq     L28A4
0005DBr 2               L28A0:
0005DBr 2  C9 88                cmp     #TOKEN_GOTO
0005DDr 2  D0 91                bne     SYNERR2
0005DFr 2               L28A4:
0005DFr 2  C6 5F                dec     FAC_LAST
0005E1r 2  D0 04                bne     L28AC
0005E3r 2  68                   pla
0005E4r 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005E7r 2               L28AC:
0005E7r 2  20 6C 00             jsr     CHRGET
0005EAr 2  20 rr rr             jsr     LINGET
0005EDr 2  C9 2C                cmp     #$2C
0005EFr 2  F0 EE                beq     L28A4
0005F1r 2  68                   pla
0005F2r 2               L28B7:
0005F2r 2  60                   rts
0005F3r 2               
0005F3r 1               .include "misc1.s"
0005F3r 2               .segment "CODE"
0005F3r 2               
0005F3r 2               ; ----------------------------------------------------------------------------
0005F3r 2               ; CONVERT LINE NUMBER
0005F3r 2               ; ----------------------------------------------------------------------------
0005F3r 2               LINGET:
0005F3r 2  A2 00                ldx     #$00
0005F5r 2  86 13                stx     LINNUM
0005F7r 2  86 14                stx     LINNUM+1
0005F9r 2               L28BE:
0005F9r 2  B0 F7                bcs     L28B7
0005FBr 2  E9 2F                sbc     #$2F
0005FDr 2  85 06                sta     CHARAC
0005FFr 2  A5 14                lda     LINNUM+1
000601r 2  85 21                sta     INDEX
000603r 2  C9 19                cmp     #$19
000605r 2  B0 D4                bcs     L28A0
000607r 2               ; <<<<<DANGEROUS CODE>>>>>
000607r 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
000607r 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
000607r 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
000607r 2               ; FOR OTHER CALLS TO LINGET.
000607r 2               ;
000607r 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
000607r 2               ; THEN TYPE "GO TO 437761".
000607r 2               ;
000607r 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
000607r 2               ; THE PROBLEM.  ($AB00 - $ABFF)
000607r 2               ; <<<<<DANGEROUS CODE>>>>>
000607r 2  A5 13                lda     LINNUM
000609r 2  0A                   asl     a
00060Ar 2  26 21                rol     INDEX
00060Cr 2  0A                   asl     a
00060Dr 2  26 21                rol     INDEX
00060Fr 2  65 13                adc     LINNUM
000611r 2  85 13                sta     LINNUM
000613r 2  A5 21                lda     INDEX
000615r 2  65 14                adc     LINNUM+1
000617r 2  85 14                sta     LINNUM+1
000619r 2  06 13                asl     LINNUM
00061Br 2  26 14                rol     LINNUM+1
00061Dr 2  A5 13                lda     LINNUM
00061Fr 2  65 06                adc     CHARAC
000621r 2  85 13                sta     LINNUM
000623r 2  90 02                bcc     L28EC
000625r 2  E6 14                inc     LINNUM+1
000627r 2               L28EC:
000627r 2  20 6C 00             jsr     CHRGET
00062Ar 2  4C rr rr             jmp     L28BE
00062Dr 2               
00062Dr 2               ; ----------------------------------------------------------------------------
00062Dr 2               ; "LET" STATEMENT
00062Dr 2               ;
00062Dr 2               ; LET <VAR> = <EXP>
00062Dr 2               ; <VAR> = <EXP>
00062Dr 2               ; ----------------------------------------------------------------------------
00062Dr 2               LET:
00062Dr 2  20 rr rr             jsr     PTRGET
000630r 2  85 47                sta     FORPNT
000632r 2  84 48                sty     FORPNT+1
000634r 2  A9 AC                lda     #TOKEN_EQUAL
000636r 2  20 rr rr             jsr     SYNCHR
000639r 2               .ifndef CONFIG_SMALL
000639r 2                       lda     VALTYP+1
000639r 2                       pha
000639r 2               .endif
000639r 2  A5 0A                lda     VALTYP
00063Br 2  48                   pha
00063Cr 2  20 rr rr             jsr     FRMEVL
00063Fr 2  68                   pla
000640r 2  2A                   rol     a
000641r 2  20 rr rr             jsr     CHKVAL
000644r 2  D0 03                bne     LETSTRING
000646r 2               .ifndef CONFIG_SMALL
000646r 2                       pla
000646r 2               LET2:
000646r 2                       bpl     L2923
000646r 2                       jsr     ROUND_FAC
000646r 2                       jsr     AYINT
000646r 2                       ldy     #$00
000646r 2                       lda     FAC+3
000646r 2                       sta     (FORPNT),y
000646r 2                       iny
000646r 2                       lda     FAC+4
000646r 2                       sta     (FORPNT),y
000646r 2                       rts
000646r 2               L2923:
000646r 2               .endif
000646r 2               
000646r 2               ; ----------------------------------------------------------------------------
000646r 2               ; REAL VARIABLE = EXPRESSION
000646r 2               ; ----------------------------------------------------------------------------
000646r 2  4C rr rr             jmp     SETFOR
000649r 2               LETSTRING:
000649r 2               .ifndef CONFIG_SMALL
000649r 2                       pla
000649r 2               .endif
000649r 2               
000649r 2               ; ----------------------------------------------------------------------------
000649r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
000649r 2               ; ----------------------------------------------------------------------------
000649r 2               PUTSTR:
000649r 2               .ifdef CONFIG_CBM_ALL
000649r 2                       ldy     FORPNT+1
000649r 2                 .ifdef CBM1
000649r 2                       cpy     #$D0	; TI$
000649r 2                 .else
000649r 2                       cpy     #$DE
000649r 2                 .endif
000649r 2                       bne     LC92B
000649r 2                       jsr     FREFAC
000649r 2                       cmp     #$06
000649r 2                 .ifdef CBM2
000649r 2                       bne     IQERR1
000649r 2                 .else
000649r 2                       jne     IQERR
000649r 2                 .endif
000649r 2                       ldy     #$00
000649r 2                       sty     FAC
000649r 2                       sty     FACSIGN
000649r 2               LC8E8:
000649r 2                       sty     STRNG2
000649r 2                       jsr     LC91C
000649r 2                       jsr     MUL10
000649r 2                       inc     STRNG2
000649r 2                       ldy     STRNG2
000649r 2                       jsr     LC91C
000649r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
000649r 2                       tax
000649r 2                       beq     LC902
000649r 2                       inx
000649r 2                       txa
000649r 2                       jsr     LD9BF
000649r 2               LC902:
000649r 2                       ldy     STRNG2
000649r 2                       iny
000649r 2                       cpy     #$06
000649r 2                       bne     LC8E8
000649r 2                       jsr     MUL10
000649r 2                       jsr     QINT
000649r 2                       ldx     #$02
000649r 2                       sei
000649r 2               LC912:
000649r 2                       lda     FAC+2,x
000649r 2                       sta     TISTR,x
000649r 2                       dex
000649r 2                       bpl     LC912
000649r 2                       cli
000649r 2                       rts
000649r 2               LC91C:
000649r 2                       lda     (INDEX),y
000649r 2                       jsr     CHRGOT2
000649r 2                       bcc     LC926
000649r 2               IQERR1:
000649r 2                       jmp     IQERR
000649r 2               LC926:
000649r 2                       sbc     #$2F
000649r 2                       jmp     ADDACC
000649r 2               LC92B:
000649r 2               .endif
000649r 2  A0 02                ldy     #$02
00064Br 2  B1 5E                lda     (FAC_LAST-1),y
00064Dr 2  C5 32                cmp     FRETOP+1
00064Fr 2  90 17                bcc     L2946
000651r 2  D0 07                bne     L2938
000653r 2  88                   dey
000654r 2  B1 5E                lda     (FAC_LAST-1),y
000656r 2  C5 31                cmp     FRETOP
000658r 2  90 0E                bcc     L2946
00065Ar 2               L2938:
00065Ar 2  A4 5F                ldy     FAC_LAST
00065Cr 2  C4 2C                cpy     VARTAB+1
00065Er 2  90 08                bcc     L2946
000660r 2  D0 0D                bne     L294D
000662r 2  A5 5E                lda     FAC_LAST-1
000664r 2  C5 2B                cmp     VARTAB
000666r 2  B0 07                bcs     L294D
000668r 2               L2946:
000668r 2  A5 5E                lda     FAC_LAST-1
00066Ar 2  A4 5F                ldy     FAC_LAST
00066Cr 2  4C rr rr             jmp     L2963
00066Fr 2               L294D:
00066Fr 2  A0 00                ldy     #$00
000671r 2  B1 5E                lda     (FAC_LAST-1),y
000673r 2  20 rr rr             jsr     STRINI
000676r 2  A5 4E                lda     DSCPTR
000678r 2  A4 4F                ldy     DSCPTR+1
00067Ar 2  85 68                sta     STRNG1
00067Cr 2  84 69                sty     STRNG1+1
00067Er 2  20 rr rr             jsr     MOVINS
000681r 2  A9 5C                lda     #FAC
000683r 2  A0 00                ldy     #$00
000685r 2               L2963:
000685r 2  85 4E                sta     DSCPTR
000687r 2  84 4F                sty     DSCPTR+1
000689r 2  20 rr rr             jsr     FRETMS
00068Cr 2  A0 00                ldy     #$00
00068Er 2  B1 4E                lda     (DSCPTR),y
000690r 2  91 47                sta     (FORPNT),y
000692r 2  C8                   iny
000693r 2  B1 4E                lda     (DSCPTR),y
000695r 2  91 47                sta     (FORPNT),y
000697r 2  C8                   iny
000698r 2  B1 4E                lda     (DSCPTR),y
00069Ar 2  91 47                sta     (FORPNT),y
00069Cr 2               RET5:
00069Cr 2  60                   rts
00069Dr 2               .ifdef AIM65
00069Dr 2               LB89D:
00069Dr 2                       cmp     #$21
00069Dr 2                       bne     RET5
00069Dr 2                       lda     #$80
00069Dr 2                       sta     PRIFLG
00069Dr 2                       jmp     CHRGET
00069Dr 2               .endif
00069Dr 2               
00069Dr 2               .ifdef CONFIG_FILE
00069Dr 2               PRINTH:
00069Dr 2                       jsr     CMD
00069Dr 2                       jmp     LCAD6
00069Dr 2               CMD:
00069Dr 2                       jsr     GETBYT
00069Dr 2                       beq     LC98F
00069Dr 2                       lda     #$2C
00069Dr 2                       jsr     SYNCHR
00069Dr 2               LC98F:
00069Dr 2                       php
00069Dr 2                       jsr     CHKOUT
00069Dr 2                       stx     CURDVC
00069Dr 2                       plp
00069Dr 2                       jmp     PRINT
00069Dr 2               .endif
00069Dr 2               
00069Dr 2               
00069Dr 1               .include "print.s"
00069Dr 2               .segment "CODE"
00069Dr 2               
00069Dr 2               .ifdef AIM65
00069Dr 2               PRINT:
00069Dr 2                       lda     PRIFLG
00069Dr 2                       sta     ZBE
00069Dr 2                       jsr     L297E
00069Dr 2               LB8B1:
00069Dr 2                       lda     ZBE
00069Dr 2                       sta     PRIFLG
00069Dr 2                       rts
00069Dr 2               .endif
00069Dr 2               
00069Dr 2               PRSTRING:
00069Dr 2  20 rr rr             jsr     STRPRT
0006A0r 2               L297E:
0006A0r 2  20 72 00             jsr     CHRGOT
0006A3r 2               
0006A3r 2               ; ----------------------------------------------------------------------------
0006A3r 2               ; "PRINT" STATEMENT
0006A3r 2               ; ----------------------------------------------------------------------------
0006A3r 2               .ifndef AIM65
0006A3r 2               PRINT:
0006A3r 2               .endif
0006A3r 2  F0 43                beq     CRDO
0006A5r 2               PRINT2:
0006A5r 2  F0 53                beq     L29DD
0006A7r 2               .ifdef AIM65
0006A7r 2                       jsr     LB89D
0006A7r 2                       beq     L29DD
0006A7r 2               .endif
0006A7r 2  C9 9D                cmp     #TOKEN_TAB
0006A9r 2  F0 67                beq     L29F5
0006ABr 2  C9 A0                cmp     #TOKEN_SPC
0006ADr 2               .ifdef CONFIG_2
0006ADr 2  18                   clc	; also AppleSoft II
0006AEr 2               .endif
0006AEr 2  F0 62                beq     L29F5
0006B0r 2  C9 2C                cmp     #','
0006B2r 2               ; Pre-KIM had no CLC. KIM added the CLC
0006B2r 2               ; here. Post-KIM moved the CLC up...
0006B2r 2               ; (makes no sense on KIM, liveness = 0)
0006B2r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
0006B2r 2                       clc
0006B2r 2               .endif
0006B2r 2  F0 47                beq     L29DE
0006B4r 2  C9 3B                cmp     #$3B
0006B6r 2  F0 6F                beq     L2A0D
0006B8r 2  20 rr rr             jsr     FRMEVL
0006BBr 2  24 0A                bit     VALTYP
0006BDr 2  30 DE                bmi     PRSTRING
0006BFr 2  20 rr rr             jsr     FOUT
0006C2r 2  20 rr rr             jsr     STRLIT
0006C5r 2               .ifndef CONFIG_NO_CR
0006C5r 2  A0 00                ldy     #$00
0006C7r 2  B1 5E                lda     (FAC_LAST-1),y
0006C9r 2  18                   clc
0006CAr 2  65 10                adc     POSX
0006CCr 2                 .ifdef KBD
0006CCr 2  C9 28                cmp     #$28
0006CEr 2                 .else
0006CEr 2                       cmp     Z17
0006CEr 2                 .endif
0006CEr 2  90 03                bcc     L29B1
0006D0r 2  20 rr rr             jsr     CRDO
0006D3r 2               L29B1:
0006D3r 2               .endif
0006D3r 2  20 rr rr             jsr     STRPRT
0006D6r 2               .ifdef KBD
0006D6r 2  4C rr rr             jmp     L297E
0006D9r 2               .else
0006D9r 2                       jsr     OUTSP
0006D9r 2                       bne     L297E ; branch always
0006D9r 2               .endif
0006D9r 2               
0006D9r 2               .ifdef KBD
0006D9r 2               ; PATCHES
0006D9r 2               LE86C:
0006D9r 2  68                   pla
0006DAr 2  4C rr rr             jmp     CONTROL_C_TYPED
0006DDr 2               LE870:
0006DDr 2  20 rr rr             jsr     GETBYT
0006E0r 2  8A                   txa
0006E1r 2               LE874:
0006E1r 2  F0 02                beq     LE878
0006E3r 2  10 7A                bpl     LE8F2
0006E5r 2               LE878:
0006E5r 2  4C rr rr             jmp     IQERR
0006E8r 2               ; PATCHES
0006E8r 2               .endif
0006E8r 2               
0006E8r 2               
0006E8r 2               
0006E8r 2               .ifndef KBD
0006E8r 2               L29B9:
0006E8r 2                 .ifdef CBM2
0006E8r 2                       lda     #$00
0006E8r 2                       sta     INPUTBUFFER,x
0006E8r 2                       ldx     #<(INPUTBUFFER-1)
0006E8r 2                       ldy     #>(INPUTBUFFER-1)
0006E8r 2                 .else
0006E8r 2                   .ifndef APPLE
0006E8r 2                       ldy     #$00
0006E8r 2                       sty     INPUTBUFFER,x
0006E8r 2                       ldx     #LINNUM+1
0006E8r 2                   .endif
0006E8r 2                   .if .def(MICROTAN) || .def(SYM1)
0006E8r 2                       bne     CRDO2
0006E8r 2               	.endif
0006E8r 2                 .endif
0006E8r 2                 .ifdef CONFIG_FILE
0006E8r 2                       lda     CURDVC
0006E8r 2                       bne     L29DD
0006E8r 2                 .endif
0006E8r 2               .endif
0006E8r 2               
0006E8r 2               
0006E8r 2               CRDO:
0006E8r 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
0006E8r 2                       lda     CURDVC
0006E8r 2                       bne     LC9D8
0006E8r 2                       sta     POSX
0006E8r 2               LC9D8:
0006E8r 2               .endif
0006E8r 2  A9 0A                lda     #CRLF_1
0006EAr 2               .ifndef CONFIG_CBM_ALL
0006EAr 2  85 10                sta     POSX
0006ECr 2               .endif
0006ECr 2  20 rr rr             jsr     OUTDO
0006EFr 2               CRDO2:
0006EFr 2  A9 0D                lda     #CRLF_2
0006F1r 2  20 rr rr             jsr     OUTDO
0006F4r 2               
0006F4r 2               PRINTNULLS:
0006F4r 2               .if .def(KBD) || .def(AIM65)
0006F4r 2  A9 00                lda     #$00
0006F6r 2  85 10                sta     POSX
0006F8r 2  49 FF                eor     #$FF
0006FAr 2               .else
0006FAr 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0006FAr 2                   .ifdef CONFIG_FILE
0006FAr 2                   ; Although there is no statement for it,
0006FAr 2                   ; CBM1 had NULL support and ignores
0006FAr 2                   ; it when not targeting the screen,
0006FAr 2                   ; CBM2 dropped it completely.
0006FAr 2                       lda     CURDVC
0006FAr 2                       bne     L29DD
0006FAr 2                   .endif
0006FAr 2                       txa
0006FAr 2                       pha
0006FAr 2                       ldx     Z15
0006FAr 2                       beq     L29D9
0006FAr 2                     .ifdef SYM1
0006FAr 2                       lda     #$FF
0006FAr 2                     .else
0006FAr 2                       lda     #$00
0006FAr 2                     .endif
0006FAr 2               L29D3:
0006FAr 2                       jsr     OUTDO
0006FAr 2                       dex
0006FAr 2                       bne     L29D3
0006FAr 2               L29D9:
0006FAr 2                       stx     POSX
0006FAr 2                       pla
0006FAr 2                       tax
0006FAr 2                 .else
0006FAr 2                   .ifndef CONFIG_2
0006FAr 2                       lda     #$00
0006FAr 2                       sta     POSX
0006FAr 2                   .endif
0006FAr 2                       eor     #$FF
0006FAr 2                 .endif
0006FAr 2               .endif
0006FAr 2               L29DD:
0006FAr 2  60                   rts
0006FBr 2               L29DE:
0006FBr 2  A5 10                lda     POSX
0006FDr 2               .ifndef CONFIG_NO_CR
0006FDr 2                 .ifdef KBD
0006FDr 2  C9 1A                cmp     #$1A
0006FFr 2                 .else
0006FFr 2                       cmp     Z18
0006FFr 2                 .endif
0006FFr 2  90 06                bcc     L29EA
000701r 2  20 rr rr             jsr     CRDO
000704r 2  4C rr rr             jmp     L2A0D
000707r 2               L29EA:
000707r 2               .endif
000707r 2  38                   sec
000708r 2               L29EB:
000708r 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
000708r 2                       sbc     #$0A
000708r 2               .else
000708r 2                 .ifdef KBD
000708r 2  E9 0D                sbc     #$0D
00070Ar 2                 .else
00070Ar 2                       sbc     #$0E
00070Ar 2                 .endif
00070Ar 2               .endif
00070Ar 2  B0 FC                bcs     L29EB
00070Cr 2  49 FF                eor     #$FF
00070Er 2  69 01                adc     #$01
000710r 2  D0 10                bne     L2A08
000712r 2               L29F5:
000712r 2               .ifdef CONFIG_11A
000712r 2  08                   php
000713r 2               .else
000713r 2                       pha
000713r 2               .endif
000713r 2  20 rr rr             jsr     GTBYTC
000716r 2  C9 29                cmp     #')'
000718r 2               .ifdef CONFIG_11A
000718r 2                 .ifdef CONFIG_2
000718r 2  D0 61                bne     SYNERR4
00071Ar 2                 .else
00071Ar 2                       jne     SYNERR
00071Ar 2                 .endif
00071Ar 2  28                   plp
00071Br 2  90 06                bcc     L2A09
00071Dr 2               .else
00071Dr 2                 .ifdef CONFIG_11
00071Dr 2                       jne     SYNERR
00071Dr 2                 .else
00071Dr 2                       bne     SYNERR4
00071Dr 2                 .endif
00071Dr 2                       pla
00071Dr 2                       cmp     #TOKEN_TAB
00071Dr 2                 .ifdef CONFIG_11
00071Dr 2                       bne     L2A09
00071Dr 2                 .else
00071Dr 2                       bne     L2A0A
00071Dr 2                 .endif
00071Dr 2               .endif
00071Dr 2  8A                   txa
00071Er 2  E5 10                sbc     POSX
000720r 2  90 05                bcc     L2A0D
000722r 2               .ifndef CONFIG_11
000722r 2                       beq     L2A0D
000722r 2               .endif
000722r 2               L2A08:
000722r 2  AA                   tax
000723r 2               .ifdef CONFIG_11
000723r 2               L2A09:
000723r 2  E8                   inx
000724r 2               .endif
000724r 2               L2A0A:
000724r 2               .ifndef CONFIG_11
000724r 2                       jsr     OUTSP
000724r 2               .endif
000724r 2  CA                   dex
000725r 2               .ifndef CONFIG_11
000725r 2                       bne     L2A0A
000725r 2               .else
000725r 2  D0 06                bne     L2A13
000727r 2               .endif
000727r 2               L2A0D:
000727r 2  20 6C 00             jsr     CHRGET
00072Ar 2  4C rr rr             jmp     PRINT2
00072Dr 2               .ifdef CONFIG_11
00072Dr 2               L2A13:
00072Dr 2  20 rr rr             jsr     OUTSP
000730r 2  D0 F2                bne     L2A0A
000732r 2               .endif
000732r 2               
000732r 2               ; ----------------------------------------------------------------------------
000732r 2               ; PRINT STRING AT (Y,A)
000732r 2               ; ----------------------------------------------------------------------------
000732r 2               STROUT:
000732r 2  20 rr rr             jsr     STRLIT
000735r 2               
000735r 2               ; ----------------------------------------------------------------------------
000735r 2               ; PRINT STRING AT (FACMO,FACLO)
000735r 2               ; ----------------------------------------------------------------------------
000735r 2               STRPRT:
000735r 2  20 rr rr             jsr     FREFAC
000738r 2  AA                   tax
000739r 2  A0 00                ldy     #$00
00073Br 2  E8                   inx
00073Cr 2               L2A22:
00073Cr 2  CA                   dex
00073Dr 2  F0 BB                beq     L29DD
00073Fr 2  B1 21                lda     (INDEX),y
000741r 2  20 rr rr             jsr     OUTDO
000744r 2  C8                   iny
000745r 2  C9 0D                cmp     #$0D
000747r 2  D0 F3                bne     L2A22
000749r 2  20 rr rr             jsr     PRINTNULLS
00074Cr 2  4C rr rr             jmp     L2A22
00074Fr 2               ; ----------------------------------------------------------------------------
00074Fr 2               OUTSP:
00074Fr 2               .ifdef CONFIG_FILE
00074Fr 2                 .ifndef CBM1
00074Fr 2               ; on non-screen devices, print SPACE
00074Fr 2               ; instead of CRSR RIGHT
00074Fr 2                       lda     CURDVC
00074Fr 2                       beq     LCA40
00074Fr 2                       lda     #$20
00074Fr 2                       .byte   $2C
00074Fr 2               LCA40:
00074Fr 2                 .endif
00074Fr 2                       lda     #$1D ; CRSR RIGHT
00074Fr 2               .else
00074Fr 2  A9 20                lda     #$20
000751r 2               .endif
000751r 2  2C                   .byte   $2C
000752r 2               OUTQUES:
000752r 2  A9 3F                lda     #$3F
000754r 2               
000754r 2               ; ----------------------------------------------------------------------------
000754r 2               ; PRINT CHAR FROM (A)
000754r 2               ; ----------------------------------------------------------------------------
000754r 2               OUTDO:
000754r 2               .ifndef KBD
000754r 2                       bit     Z14
000754r 2                       bmi     L2A56
000754r 2               .endif
000754r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000754r 2               ; Commodore forgot to remove this in CBM1
000754r 2                       pha
000754r 2               .endif
000754r 2               .ifdef CBM1
000754r 2                       cmp     #$1D ; CRSR RIGHT
000754r 2                       beq     LCA6A
000754r 2                       cmp     #$9D ; CRSR LEFT
000754r 2                       beq     LCA5A
000754r 2                       cmp     #$14 ; DEL
000754r 2                       bne     LCA64
000754r 2               LCA5A:
000754r 2                       lda     POSX
000754r 2                       beq     L2A4E
000754r 2                       lda     CURDVC
000754r 2                       bne     L2A4E
000754r 2                       dec     POSX
000754r 2               LCA64:
000754r 2                       and     #$7F
000754r 2               .endif
000754r 2               .ifndef CBM2
000754r 2  C9 20                cmp     #$20
000756r 2  90 02                bcc     L2A4E
000758r 2               .endif
000758r 2               LCA6A:
000758r 2               .ifdef CONFIG_CBM1_PATCHES
000758r 2                       lda     CURDVC
000758r 2                       jsr     PATCH6
000758r 2                       nop
000758r 2               .endif
000758r 2               .ifdef CONFIG_PRINT_CR
000758r 2                       lda     POSX
000758r 2                       cmp     Z17
000758r 2                       bne     L2A4C
000758r 2                 .ifdef AIM65
000758r 2                       lda #$00
000758r 2                       sta POSX
000758r 2                 .elseif .def(APPLE)
000758r 2                       nop ; PATCH!
000758r 2                       nop ; don't print CR
000758r 2                       nop
000758r 2                 .else
000758r 2                       jsr     CRDO
000758r 2                 .endif
000758r 2               L2A4C:
000758r 2               .endif
000758r 2               .ifndef CONFIG_CBM_ALL
000758r 2  E6 10                inc     POSX
00075Ar 2               .endif
00075Ar 2               L2A4E:
00075Ar 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
00075Ar 2               ; Commodore forgot to remove this in CBM1
00075Ar 2                       pla
00075Ar 2               .endif
00075Ar 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
00075Ar 2                       sty     DIMFLG
00075Ar 2               .endif
00075Ar 2               .ifdef CONFIG_IO_MSB
00075Ar 2                       ora     #$80
00075Ar 2               .endif
00075Ar 2  20 FA FD             jsr     MONCOUT
00075Dr 2               .ifdef CONFIG_IO_MSB
00075Dr 2                       and     #$7F
00075Dr 2               .endif
00075Dr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
00075Dr 2                       ldy     DIMFLG
00075Dr 2               .endif
00075Dr 2               .ifdef OSI
00075Dr 2                       nop
00075Dr 2                       nop
00075Dr 2                       nop
00075Dr 2                       nop
00075Dr 2               .endif
00075Dr 2               L2A56:
00075Dr 2  29 FF                and     #$FF
00075Fr 2               LE8F2:
00075Fr 2  60                   rts
000760r 2               
000760r 2               ; ----------------------------------------------------------------------------
000760r 2               ; ???
000760r 2               ; ----------------------------------------------------------------------------
000760r 2               .ifdef KBD
000760r 2               LE8F3:
000760r 2  48                   pha
000761r 2  AD 7F 04             lda     $047F
000764r 2  18                   clc
000765r 2  F0 06                beq     LE900
000767r 2  A9 00                lda     #$00
000769r 2  8D 7F 04             sta     $047F
00076Cr 2  38                   sec
00076Dr 2               LE900:
00076Dr 2  68                   pla
00076Er 2  60                   rts
00076Fr 2               .endif
00076Fr 2               
00076Fr 1               .include "input.s"
00076Fr 2               .segment "CODE"
00076Fr 2               
00076Fr 2               ; ----------------------------------------------------------------------------
00076Fr 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00076Fr 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00076Fr 2               ; BETWEEN INPUT, READ, AND GET
00076Fr 2               ; ----------------------------------------------------------------------------
00076Fr 2               INPUTERR:
00076Fr 2  A5 0D                lda     INPUTFLG
000771r 2  F0 0B                beq     RESPERR	; INPUT
000773r 2               .ifndef SYM1
000773r 2               .ifndef CONFIG_SMALL
000773r 2               .ifdef CONFIG_10A
000773r 2               ; without this, it treats GET errors
000773r 2               ; like READ errors
000773r 2                       bmi     L2A63	; READ
000773r 2                       ldy     #$FF	; GET
000773r 2                       bne     L2A67
000773r 2               L2A63:
000773r 2               .endif
000773r 2               .endif
000773r 2               .endif
000773r 2               .ifdef CONFIG_CBM1_PATCHES
000773r 2                       jsr     PATCH5
000773r 2               		nop
000773r 2               .else
000773r 2  A5 3D                lda     Z8C
000775r 2  A4 3E                ldy     Z8C+1
000777r 2               .endif
000777r 2               L2A67:
000777r 2  85 37                sta     CURLIN
000779r 2  84 38                sty     CURLIN+1
00077Br 2               SYNERR4:
00077Br 2  4C rr rr             jmp     SYNERR
00077Er 2               RESPERR:
00077Er 2               .ifdef CONFIG_FILE
00077Er 2                       lda     CURDVC
00077Er 2                       beq     LCA8F
00077Er 2                       ldx     #ERR_BADDATA
00077Er 2                       jmp     ERROR
00077Er 2               LCA8F:
00077Er 2               .endif
00077Er 2  A9 rr                lda     #<ERRREENTRY
000780r 2  A0 rr                ldy     #>ERRREENTRY
000782r 2  20 rr rr             jsr     STROUT
000785r 2  A5 3B                lda     OLDTEXT
000787r 2  A4 3C                ldy     OLDTEXT+1
000789r 2  85 73                sta     TXTPTR
00078Br 2  84 74                sty     TXTPTR+1
00078Dr 2               RTS20:
00078Dr 2  60                   rts
00078Er 2               
00078Er 2               ; ----------------------------------------------------------------------------
00078Er 2               ; "GET" STATEMENT
00078Er 2               ; ----------------------------------------------------------------------------
00078Er 2               .ifndef CONFIG_SMALL
00078Er 2               .ifndef SYM1
00078Er 2               GET:
00078Er 2                       jsr     ERRDIR
00078Er 2               ; CBM: if GET#, then switch input
00078Er 2               .ifdef CONFIG_FILE
00078Er 2                       cmp     #'#'
00078Er 2                       bne     LCAB6
00078Er 2                       jsr     CHRGET
00078Er 2                       jsr     GETBYT
00078Er 2                       lda     #','
00078Er 2                       jsr     SYNCHR
00078Er 2                       jsr     CHKIN
00078Er 2                       stx     CURDVC
00078Er 2               LCAB6:
00078Er 2               .endif
00078Er 2                       ldx     #<(INPUTBUFFER+1)
00078Er 2                       ldy     #>(INPUTBUFFER+1)
00078Er 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00078Er 2                       lda     #$00
00078Er 2                       sta     INPUTBUFFER+1
00078Er 2               .else
00078Er 2                       sty     INPUTBUFFER+1
00078Er 2               .endif
00078Er 2                       lda     #$40
00078Er 2                       jsr     PROCESS_INPUT_LIST
00078Er 2               ; CBM: if GET#, then switch input back
00078Er 2               .ifdef CONFIG_FILE
00078Er 2                       ldx     CURDVC
00078Er 2                       bne     LCAD8
00078Er 2               .endif
00078Er 2                       rts
00078Er 2               .endif
00078Er 2               .endif
00078Er 2               
00078Er 2               ; ----------------------------------------------------------------------------
00078Er 2               ; "INPUT#" STATEMENT
00078Er 2               ; ----------------------------------------------------------------------------
00078Er 2               .ifdef CONFIG_FILE
00078Er 2               INPUTH:
00078Er 2                       jsr     GETBYT
00078Er 2                       lda     #$2C
00078Er 2                       jsr     SYNCHR
00078Er 2                       jsr     CHKIN
00078Er 2                       stx     CURDVC
00078Er 2                       jsr     L2A9E
00078Er 2               LCAD6:
00078Er 2                       lda     CURDVC
00078Er 2               LCAD8:
00078Er 2                       jsr     CLRCH
00078Er 2                       ldx     #$00
00078Er 2                       stx     CURDVC
00078Er 2                       rts
00078Er 2               LCAE0:
00078Er 2               .endif
00078Er 2               
00078Er 2               .ifdef SYM1
00078Er 2               LC9B0:
00078Er 2                       jsr     OUTQUES	; '?'
00078Er 2                       jsr     OUTSP
00078Er 2                       jmp     L2A9E
00078Er 2               .endif
00078Er 2               ; ----------------------------------------------------------------------------
00078Er 2               ; "INPUT" STATEMENT
00078Er 2               ; ----------------------------------------------------------------------------
00078Er 2               INPUT:
00078Er 2               .ifndef KBD
00078Er 2                       lsr     Z14
00078Er 2               .endif
00078Er 2               .ifdef AIM65
00078Er 2                       lda     PRIFLG
00078Er 2                       sta     ZBE
00078Er 2                       jsr     LCFFA
00078Er 2               .endif
00078Er 2  C9 22                cmp     #$22
000790r 2               .ifdef SYM1
000790r 2                       bne     LC9B0
000790r 2               .else
000790r 2  D0 0B                bne     L2A9E
000792r 2               .endif
000792r 2  20 rr rr             jsr     STRTXT
000795r 2  A9 3B                lda     #$3B
000797r 2  20 rr rr             jsr     SYNCHR
00079Ar 2  20 rr rr             jsr     STRPRT
00079Dr 2               L2A9E:
00079Dr 2  20 rr rr             jsr     ERRDIR
0007A0r 2  A9 2C                lda     #$2C
0007A2r 2  8D FF 06             sta     INPUTBUFFER-1
0007A5r 2               LCAF8:
0007A5r 2               .ifdef APPLE
0007A5r 2                       jsr     INLINX
0007A5r 2               .elseif .def(SYM1)
0007A5r 2                       jsr     INLIN
0007A5r 2               .else
0007A5r 2  20 rr rr             jsr     NXIN
0007A8r 2               .endif
0007A8r 2               .ifdef KBD
0007A8r 2  30 19                bmi     L2ABE
0007AAr 2               .else
0007AAr 2                 .ifdef CONFIG_FILE
0007AAr 2                       lda     CURDVC
0007AAr 2                       beq     LCB0C
0007AAr 2                       lda     Z96
0007AAr 2                       and     #$02
0007AAr 2                       beq     LCB0C
0007AAr 2                       jsr     LCAD6
0007AAr 2                       jmp     DATA
0007AAr 2               LCB0C:
0007AAr 2                 .endif
0007AAr 2                       lda     INPUTBUFFER
0007AAr 2                       bne     L2ABE
0007AAr 2                 .ifdef CONFIG_FILE
0007AAr 2                       lda     CURDVC
0007AAr 2                       bne     LCAF8
0007AAr 2                 .endif
0007AAr 2                 .ifdef CONFIG_CBM1_PATCHES
0007AAr 2                       jmp     PATCH1
0007AAr 2                 .else
0007AAr 2                       clc
0007AAr 2                       jmp     CONTROL_C_TYPED
0007AAr 2                 .endif
0007AAr 2               .endif
0007AAr 2               
0007AAr 2               NXIN:
0007AAr 2               .ifdef KBD
0007AAr 2  20 rr rr             jsr     INLIN
0007ADr 2  30 DE                bmi     RTS20
0007AFr 2  68                   pla
0007B0r 2  4C rr rr             jmp     LE86C
0007B3r 2               .else
0007B3r 2                 .ifdef CONFIG_FILE
0007B3r 2                       lda     CURDVC
0007B3r 2                       bne     LCB21
0007B3r 2                 .endif
0007B3r 2                       jsr     OUTQUES	; '?'
0007B3r 2                       jsr     OUTSP
0007B3r 2               LCB21:
0007B3r 2                       jmp     INLIN
0007B3r 2               .endif
0007B3r 2               
0007B3r 2               ; ----------------------------------------------------------------------------
0007B3r 2               ; "GETC" STATEMENT
0007B3r 2               ; ----------------------------------------------------------------------------
0007B3r 2               .ifdef KBD
0007B3r 2               GETC:
0007B3r 2  20 rr rr             jsr     CONINT
0007B6r 2  20 rr rr             jsr     LF43D
0007B9r 2  4C rr rr             jmp     LE664
0007BCr 2               .endif
0007BCr 2               
0007BCr 2               ; ----------------------------------------------------------------------------
0007BCr 2               ; "READ" STATEMENT
0007BCr 2               ; ----------------------------------------------------------------------------
0007BCr 2               READ:
0007BCr 2  A6 3F                ldx     DATPTR
0007BEr 2  A4 40                ldy     DATPTR+1
0007C0r 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
0007C0r 2               ; AppleSoft II, too
0007C0r 2  A9 98                lda     #$98	; READ
0007C2r 2  2C                   .byte   $2C
0007C3r 2               L2ABE:
0007C3r 2  A9 00                lda     #$00	; INPUT
0007C5r 2               .else
0007C5r 2                       .byte   $A9	; LDA #$98
0007C5r 2               L2ABE:
0007C5r 2                       tya
0007C5r 2               .endif
0007C5r 2               
0007C5r 2               ; ----------------------------------------------------------------------------
0007C5r 2               ; PROCESS INPUT LIST
0007C5r 2               ;
0007C5r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
0007C5r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
0007C5r 2               ; 				$40 FOR GET
0007C5r 2               ;				$98 FOR READ
0007C5r 2               ; ----------------------------------------------------------------------------
0007C5r 2               PROCESS_INPUT_LIST:
0007C5r 2  85 0D                sta     INPUTFLG
0007C7r 2  86 41                stx     INPTR
0007C9r 2  84 42                sty     INPTR+1
0007CBr 2               PROCESS_INPUT_ITEM:
0007CBr 2  20 rr rr             jsr     PTRGET
0007CEr 2  85 47                sta     FORPNT
0007D0r 2  84 48                sty     FORPNT+1
0007D2r 2  A5 73                lda     TXTPTR
0007D4r 2  A4 74                ldy     TXTPTR+1
0007D6r 2  85 49                sta     TXPSV
0007D8r 2  84 4A                sty     TXPSV+1
0007DAr 2  A6 41                ldx     INPTR
0007DCr 2  A4 42                ldy     INPTR+1
0007DEr 2  86 73                stx     TXTPTR
0007E0r 2  84 74                sty     TXTPTR+1
0007E2r 2  20 72 00             jsr     CHRGOT
0007E5r 2  D0 0E                bne     INSTART
0007E7r 2  24 0D                bit     INPUTFLG
0007E9r 2               .ifndef CONFIG_SMALL ; GET
0007E9r 2                .ifndef SYM1
0007E9r 2                       bvc     L2AF0
0007E9r 2                 .ifdef MICROTAN
0007E9r 2                       jsr     MONRDKEY2
0007E9r 2                 .elseif .def(AIM65)
0007E9r 2                       jsr     MONRDKEY2
0007E9r 2                 .else
0007E9r 2                       jsr     MONRDKEY
0007E9r 2                 .endif
0007E9r 2                 .ifdef CONFIG_IO_MSB
0007E9r 2                       and     #$7F
0007E9r 2                 .endif
0007E9r 2                       sta     INPUTBUFFER
0007E9r 2               ; BUG: The beq/bne L2AF8 below is supposed
0007E9r 2               ; to be always taken. For this to happen,
0007E9r 2               ; the last load must be a 0 for beq
0007E9r 2               ; and != 0 for bne. The original Microsoft
0007E9r 2               ; code had ldx/ldy/bne here, which was only
0007E9r 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0007E9r 2               ; fixed it in CBMBASIC V1 by swapping the
0007E9r 2               ; ldx and the ldy. It was broken on KIM,
0007E9r 2               ; but okay on APPLE and CBM2, because
0007E9r 2               ; these used a non-ZP INPUTBUFFER.
0007E9r 2               ; Microsoft fixed this somewhere after KIM
0007E9r 2               ; and before MICROTAN, by using beq instead
0007E9r 2               ; of bne in the ZP case.
0007E9r 2                 .ifdef CBM1
0007E9r 2                       ldy     #>(INPUTBUFFER-1)
0007E9r 2                       ldx     #<(INPUTBUFFER-1)
0007E9r 2                 .else
0007E9r 2                       ldx     #<(INPUTBUFFER-1)
0007E9r 2                       ldy     #>(INPUTBUFFER-1)
0007E9r 2                 .endif
0007E9r 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0007E9r 2                       beq     L2AF8	; always
0007E9r 2                 .else
0007E9r 2                       bne     L2AF8	; always
0007E9r 2                 .endif
0007E9r 2               L2AF0:
0007E9r 2                .endif
0007E9r 2               .endif
0007E9r 2  30 62                bmi     FINDATA
0007EBr 2               .ifdef CONFIG_FILE
0007EBr 2                       lda     CURDVC
0007EBr 2                       bne     LCB64
0007EBr 2               .endif
0007EBr 2               .ifdef KBD
0007EBr 2  20 rr rr             jsr     OUTQUESSP
0007EEr 2               .else
0007EEr 2                       jsr     OUTQUES
0007EEr 2               .endif
0007EEr 2               LCB64:
0007EEr 2  20 rr rr             jsr     NXIN
0007F1r 2               L2AF8:
0007F1r 2  86 73                stx     TXTPTR
0007F3r 2  84 74                sty     TXTPTR+1
0007F5r 2               
0007F5r 2               ; ----------------------------------------------------------------------------
0007F5r 2               INSTART:
0007F5r 2  20 6C 00             jsr     CHRGET
0007F8r 2  24 0A                bit     VALTYP
0007FAr 2  10 24                bpl     L2B34
0007FCr 2               .ifndef CONFIG_SMALL ; GET
0007FCr 2                .ifndef SYM1
0007FCr 2                       bit     INPUTFLG
0007FCr 2                       bvc     L2B10
0007FCr 2                 .ifdef CONFIG_CBM1_PATCHES
0007FCr 2                       lda     #$00
0007FCr 2                       jsr     PATCH4
0007FCr 2                       nop
0007FCr 2                 .else
0007FCr 2                       inx
0007FCr 2                       stx     TXTPTR
0007FCr 2                       lda     #$00
0007FCr 2                       sta     CHARAC
0007FCr 2                       beq     L2B1C
0007FCr 2                 .endif
0007FCr 2               L2B10:
0007FCr 2                .endif
0007FCr 2               .endif
0007FCr 2  85 06                sta     CHARAC
0007FEr 2  C9 22                cmp     #$22
000800r 2  F0 07                beq     L2B1D
000802r 2  A9 3A                lda     #$3A
000804r 2  85 06                sta     CHARAC
000806r 2  A9 2C                lda     #$2C
000808r 2               L2B1C:
000808r 2  18                   clc
000809r 2               L2B1D:
000809r 2  85 07                sta     ENDCHR
00080Br 2  A5 73                lda     TXTPTR
00080Dr 2  A4 74                ldy     TXTPTR+1
00080Fr 2  69 00                adc     #$00
000811r 2  90 01                bcc     L2B28
000813r 2  C8                   iny
000814r 2               L2B28:
000814r 2  20 rr rr             jsr     STRLT2
000817r 2  20 rr rr             jsr     POINT
00081Ar 2               .ifdef CONFIG_SMALL
00081Ar 2  20 rr rr             jsr     LETSTRING
00081Dr 2               .else
00081Dr 2                       jsr     PUTSTR
00081Dr 2               .endif
00081Dr 2  4C rr rr             jmp     INPUT_MORE
000820r 2               ; ----------------------------------------------------------------------------
000820r 2               L2B34:
000820r 2  20 rr rr             jsr     FIN
000823r 2               .ifdef CONFIG_SMALL
000823r 2  20 rr rr             jsr     SETFOR
000826r 2               .else
000826r 2                       lda     VALTYP+1
000826r 2                       jsr     LET2
000826r 2               .endif
000826r 2               ; ----------------------------------------------------------------------------
000826r 2               INPUT_MORE:
000826r 2  20 72 00             jsr     CHRGOT
000829r 2  F0 07                beq     L2B48
00082Br 2  C9 2C                cmp     #$2C
00082Dr 2  F0 03                beq     L2B48
00082Fr 2  4C rr rr             jmp     INPUTERR
000832r 2               L2B48:
000832r 2  A5 73                lda     TXTPTR
000834r 2  A4 74                ldy     TXTPTR+1
000836r 2  85 41                sta     INPTR
000838r 2  84 42                sty     INPTR+1
00083Ar 2  A5 49                lda     TXPSV
00083Cr 2  A4 4A                ldy     TXPSV+1
00083Er 2  85 73                sta     TXTPTR
000840r 2  84 74                sty     TXTPTR+1
000842r 2  20 72 00             jsr     CHRGOT
000845r 2  F0 2C                beq     INPDONE
000847r 2  20 rr rr             jsr     CHKCOM
00084Ar 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
00084Dr 2               ; ----------------------------------------------------------------------------
00084Dr 2               FINDATA:
00084Dr 2  20 rr rr             jsr     DATAN
000850r 2  C8                   iny
000851r 2  AA                   tax
000852r 2  D0 12                bne     L2B7C
000854r 2  A2 06                ldx     #ERR_NODATA
000856r 2  C8                   iny
000857r 2  B1 73                lda     (TXTPTR),y
000859r 2  F0 69                beq     GERR
00085Br 2  C8                   iny
00085Cr 2  B1 73                lda     (TXTPTR),y
00085Er 2  85 3D                sta     Z8C
000860r 2  C8                   iny
000861r 2  B1 73                lda     (TXTPTR),y
000863r 2  C8                   iny
000864r 2  85 3E                sta     Z8C+1
000866r 2               L2B7C:
000866r 2  B1 73                lda     (TXTPTR),y
000868r 2  AA                   tax
000869r 2  20 rr rr             jsr     ADDON
00086Cr 2  E0 83                cpx     #$83
00086Er 2  D0 DD                bne     FINDATA
000870r 2  4C rr rr             jmp     INSTART
000873r 2               ; ---NO MORE INPUT REQUESTED------
000873r 2               INPDONE:
000873r 2  A5 41                lda     INPTR
000875r 2  A4 42                ldy     INPTR+1
000877r 2  A6 0D                ldx     INPUTFLG
000879r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000879r 2                       beq     L2B94 ; INPUT
000879r 2               .else
000879r 2  10 03                bpl     L2B94; INPUT or GET
00087Br 2               .endif
00087Br 2  4C rr rr             jmp     SETDA
00087Er 2               L2B94:
00087Er 2  A0 00                ldy     #$00
000880r 2               .ifdef AIM65
000880r 2                       jsr     LB8B1
000880r 2               .endif
000880r 2  B1 41                lda     (INPTR),y
000882r 2  F0 07                beq     L2BA1
000884r 2               .ifdef CONFIG_FILE
000884r 2                       lda     CURDVC
000884r 2                       bne     L2BA1
000884r 2               .endif
000884r 2  A9 rr                lda     #<ERREXTRA
000886r 2  A0 rr                ldy     #>ERREXTRA
000888r 2  4C rr rr             jmp     STROUT
00088Br 2               L2BA1:
00088Br 2  60                   rts
00088Cr 2               
00088Cr 2               ; ----------------------------------------------------------------------------
00088Cr 2               ERREXTRA:
00088Cr 2               .ifdef KBD
00088Cr 2  3F 45 78 74          .byte   "?Extra"
000890r 2  72 61        
000892r 2               .else
000892r 2                       .byte   "?EXTRA IGNORED"
000892r 2               .endif
000892r 2  0D 0A 00             .byte   $0D,$0A,$00
000895r 2               ERRREENTRY:
000895r 2               .ifdef KBD
000895r 2  57 68 61 74          .byte   "What?"
000899r 2  3F           
00089Ar 2               .else
00089Ar 2                       .byte   "?REDO FROM START"
00089Ar 2               .endif
00089Ar 2  0D 0A 00             .byte   $0D,$0A,$00
00089Dr 2               .ifdef KBD
00089Dr 2               LEA30:
00089Dr 2  42                   .byte   "B"
00089Er 2  FD                   .byte   $FD
00089Fr 2  47 73 42 41          .byte   "GsBASIC"
0008A3r 2  53 49 43     
0008A6r 2  00 1B 0D 13          .byte   $00,$1B,$0D,$13
0008AAr 2  20 42 41 53          .byte   " BASIC"
0008AEr 2  49 43        
0008B0r 2               .endif
0008B0r 2               
0008B0r 1               .include "eval.s"
0008B0r 2               .segment "CODE"
0008B0r 2               
0008B0r 2               ; ----------------------------------------------------------------------------
0008B0r 2               ; "NEXT" STATEMENT
0008B0r 2               ; ----------------------------------------------------------------------------
0008B0r 2               NEXT:
0008B0r 2  D0 04                bne     NEXT1
0008B2r 2  A0 00                ldy     #$00
0008B4r 2  F0 03                beq     NEXT2
0008B6r 2               NEXT1:
0008B6r 2  20 rr rr             jsr     PTRGET
0008B9r 2               NEXT2:
0008B9r 2  85 47                sta     FORPNT
0008BBr 2  84 48                sty     FORPNT+1
0008BDr 2  20 rr rr             jsr     GTFORPNT
0008C0r 2  F0 04                beq     NEXT3
0008C2r 2  A2 00                ldx     #$00
0008C4r 2               GERR:
0008C4r 2  F0 66                beq     JERROR
0008C6r 2               NEXT3:
0008C6r 2  9A                   txs
0008C7r 2               .ifndef CONFIG_2
0008C7r 2                       inx
0008C7r 2                       inx
0008C7r 2                       inx
0008C7r 2                       inx
0008C7r 2               .endif
0008C7r 2  8A                   txa
0008C8r 2               .ifdef CONFIG_2
0008C8r 2  18                   clc
0008C9r 2  69 04                adc     #$04
0008CBr 2  48                   pha
0008CCr 2  69 05                adc     #BYTES_FP+1
0008CEr 2  85 23                sta     DEST
0008D0r 2  68                   pla
0008D1r 2               .else
0008D1r 2                       inx
0008D1r 2                       inx
0008D1r 2                       inx
0008D1r 2                       inx
0008D1r 2                       inx
0008D1r 2               .ifndef CONFIG_SMALL
0008D1r 2                       inx
0008D1r 2               .endif
0008D1r 2                       stx     DEST
0008D1r 2               .endif
0008D1r 2  A0 01                ldy     #>STACK
0008D3r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0008D6r 2  BA                   tsx
0008D7r 2  BD 08 01             lda     STACK+BYTES_FP+4,x
0008DAr 2  85 60                sta     FACSIGN
0008DCr 2  A5 47                lda     FORPNT
0008DEr 2  A4 48                ldy     FORPNT+1
0008E0r 2  20 rr rr             jsr     FADD
0008E3r 2  20 rr rr             jsr     SETFOR
0008E6r 2  A0 01                ldy     #>STACK
0008E8r 2  20 rr rr             jsr     FCOMP2
0008EBr 2  BA                   tsx
0008ECr 2  38                   sec
0008EDr 2  FD 08 01             sbc     STACK+BYTES_FP+4,x
0008F0r 2  F0 17                beq     L2C22
0008F2r 2  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
0008F5r 2  85 37                sta     CURLIN
0008F7r 2  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
0008FAr 2  85 38                sta     CURLIN+1
0008FCr 2  BD 10 01             lda     STACK+2*BYTES_FP+8,x
0008FFr 2  85 73                sta     TXTPTR
000901r 2  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
000904r 2  85 74                sta     TXTPTR+1
000906r 2               L2C1F:
000906r 2  4C rr rr             jmp     NEWSTT
000909r 2               L2C22:
000909r 2  8A                   txa
00090Ar 2  69 0F                adc     #2*BYTES_FP+7
00090Cr 2  AA                   tax
00090Dr 2  9A                   txs
00090Er 2  20 72 00             jsr     CHRGOT
000911r 2  C9 2C                cmp     #$2C
000913r 2  D0 F1                bne     L2C1F
000915r 2  20 6C 00             jsr     CHRGET
000918r 2  20 rr rr             jsr     NEXT1
00091Br 2               
00091Br 2               ; ----------------------------------------------------------------------------
00091Br 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
00091Br 2               ; ----------------------------------------------------------------------------
00091Br 2               FRMNUM:
00091Br 2  20 rr rr             jsr     FRMEVL
00091Er 2               
00091Er 2               ; ----------------------------------------------------------------------------
00091Er 2               ; MAKE SURE (FAC) IS NUMERIC
00091Er 2               ; ----------------------------------------------------------------------------
00091Er 2               CHKNUM:
00091Er 2  18                   clc
00091Fr 2  24                   .byte   $24
000920r 2               
000920r 2               ; ----------------------------------------------------------------------------
000920r 2               ; MAKE SURE (FAC) IS STRING
000920r 2               ; ----------------------------------------------------------------------------
000920r 2               CHKSTR:
000920r 2  38                   sec
000921r 2               
000921r 2               ; ----------------------------------------------------------------------------
000921r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
000921r 2               ; IF C=0, TYPE MUST BE NUMERIC
000921r 2               ; IF C=1, TYPE MUST BE STRING
000921r 2               ; ----------------------------------------------------------------------------
000921r 2               CHKVAL:
000921r 2  24 0A                bit     VALTYP
000923r 2  30 03                bmi     L2C41
000925r 2  B0 03                bcs     L2C43
000927r 2               L2C40:
000927r 2  60                   rts
000928r 2               L2C41:
000928r 2  B0 FD                bcs     L2C40
00092Ar 2               L2C43:
00092Ar 2  A2 18                ldx     #ERR_BADTYPE
00092Cr 2               JERROR:
00092Cr 2  4C rr rr             jmp     ERROR
00092Fr 2               
00092Fr 2               ; ----------------------------------------------------------------------------
00092Fr 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00092Fr 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00092Fr 2               ; EXPRESSIONS.
00092Fr 2               ; ----------------------------------------------------------------------------
00092Fr 2               FRMEVL:
00092Fr 2  A6 73                ldx     TXTPTR
000931r 2  D0 02                bne     L2C4E
000933r 2  C6 74                dec     TXTPTR+1
000935r 2               L2C4E:
000935r 2  C6 73                dec     TXTPTR
000937r 2  A2 00                ldx     #$00
000939r 2  24                   .byte   $24
00093Ar 2               FRMEVL1:
00093Ar 2  48                   pha
00093Br 2  8A                   txa
00093Cr 2  48                   pha
00093Dr 2  A9 01                lda     #$01
00093Fr 2  20 rr rr             jsr     CHKMEM
000942r 2  20 rr rr             jsr     FRM_ELEMENT
000945r 2  A9 00                lda     #$00
000947r 2  85 4B                sta     CPRTYP
000949r 2               FRMEVL2:
000949r 2  20 72 00             jsr     CHRGOT
00094Cr 2               L2C65:
00094Cr 2  38                   sec
00094Dr 2  E9 AB                sbc     #TOKEN_GREATER
00094Fr 2  90 17                bcc     L2C81
000951r 2  C9 03                cmp     #$03
000953r 2  B0 13                bcs     L2C81
000955r 2  C9 01                cmp     #$01
000957r 2  2A                   rol     a
000958r 2  49 01                eor     #$01
00095Ar 2  45 4B                eor     CPRTYP
00095Cr 2  C5 4B                cmp     CPRTYP
00095Er 2  90 61                bcc     SNTXERR
000960r 2  85 4B                sta     CPRTYP
000962r 2  20 6C 00             jsr     CHRGET
000965r 2  4C rr rr             jmp     L2C65
000968r 2               L2C81:
000968r 2  A6 4B                ldx     CPRTYP
00096Ar 2  D0 2C                bne     FRM_RELATIONAL
00096Cr 2  B0 7C                bcs     L2D02
00096Er 2  69 07                adc     #$07
000970r 2  90 78                bcc     L2D02
000972r 2  65 0A                adc     VALTYP
000974r 2  D0 03                bne     L2C92
000976r 2  4C rr rr             jmp     CAT
000979r 2               L2C92:
000979r 2  69 FF                adc     #$FF
00097Br 2  85 21                sta     INDEX
00097Dr 2  0A                   asl     a
00097Er 2  65 21                adc     INDEX
000980r 2  A8                   tay
000981r 2               FRM_PRECEDENCE_TEST:
000981r 2  68                   pla
000982r 2  D9 rr rr             cmp     MATHTBL,y
000985r 2  B0 68                bcs     FRM_PERFORM1
000987r 2  20 rr rr             jsr     CHKNUM
00098Ar 2               L2CA3:
00098Ar 2  48                   pha
00098Br 2               L2CA4:
00098Br 2  20 rr rr             jsr     FRM_RECURSE
00098Er 2  68                   pla
00098Fr 2  A4 49                ldy     LASTOP
000991r 2  10 17                bpl     PREFNC
000993r 2  AA                   tax
000994r 2  F0 57                beq     GOEX
000996r 2  D0 60                bne     FRM_PERFORM2
000998r 2               
000998r 2               ; ----------------------------------------------------------------------------
000998r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000998r 2               ; ----------------------------------------------------------------------------
000998r 2               FRM_RELATIONAL:
000998r 2  46 0A                lsr     VALTYP
00099Ar 2  8A                   txa
00099Br 2  2A                   rol     a
00099Cr 2  A6 73                ldx     TXTPTR
00099Er 2  D0 02                bne     L2CBB
0009A0r 2  C6 74                dec     TXTPTR+1
0009A2r 2               L2CBB:
0009A2r 2  C6 73                dec     TXTPTR
0009A4r 2  A0 1B                ldy     #$1B
0009A6r 2  85 4B                sta     CPRTYP
0009A8r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
0009AAr 2               PREFNC:
0009AAr 2  D9 rr rr             cmp     MATHTBL,y
0009ADr 2  B0 49                bcs     FRM_PERFORM2
0009AFr 2  90 D9                bcc     L2CA3
0009B1r 2               
0009B1r 2               ; ----------------------------------------------------------------------------
0009B1r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
0009B1r 2               ; ANOTHER ONE
0009B1r 2               ; ----------------------------------------------------------------------------
0009B1r 2               FRM_RECURSE:
0009B1r 2  B9 rr rr             lda     MATHTBL+2,y
0009B4r 2  48                   pha
0009B5r 2  B9 rr rr             lda     MATHTBL+1,y
0009B8r 2  48                   pha
0009B9r 2  20 rr rr             jsr     FRM_STACK1
0009BCr 2  A5 4B                lda     CPRTYP
0009BEr 2  4C rr rr             jmp     FRMEVL1
0009C1r 2               SNTXERR:
0009C1r 2  4C rr rr             jmp     SYNERR
0009C4r 2               
0009C4r 2               ; ----------------------------------------------------------------------------
0009C4r 2               ; STACK (FAC)
0009C4r 2               ; THREE ENTRY POINTS:
0009C4r 2               ; 	1, FROM FRMEVL
0009C4r 2               ;	2, FROM "STEP"
0009C4r 2               ;	3, FROM "FOR"
0009C4r 2               ; ----------------------------------------------------------------------------
0009C4r 2               FRM_STACK1:
0009C4r 2  A5 60                lda     FACSIGN
0009C6r 2  BE rr rr             ldx     MATHTBL,y
0009C9r 2               
0009C9r 2               ; ----------------------------------------------------------------------------
0009C9r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
0009C9r 2               ; ----------------------------------------------------------------------------
0009C9r 2               FRM_STACK2:
0009C9r 2  A8                   tay
0009CAr 2  68                   pla
0009CBr 2  85 21                sta     INDEX
0009CDr 2               .ifndef CONFIG_2B
0009CDr 2                       inc     INDEX ; bug: assumes not on page boundary
0009CDr 2               ; bug exists on AppleSoft II
0009CDr 2               .endif
0009CDr 2  68                   pla
0009CEr 2  85 22                sta     INDEX+1
0009D0r 2               .ifdef CONFIG_2B
0009D0r 2  E6 21                inc     INDEX
0009D2r 2  D0 02                bne     LEB69
0009D4r 2  E6 22                inc     INDEX+1
0009D6r 2               LEB69:
0009D6r 2               .endif
0009D6r 2  98                   tya
0009D7r 2  48                   pha
0009D8r 2               
0009D8r 2               ; ----------------------------------------------------------------------------
0009D8r 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
0009D8r 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
0009D8r 2               ; ----------------------------------------------------------------------------
0009D8r 2               FRM_STACK3:
0009D8r 2  20 rr rr             jsr     ROUND_FAC
0009DBr 2               .ifndef CONFIG_SMALL
0009DBr 2                       lda     FAC+4
0009DBr 2                       pha
0009DBr 2               .endif
0009DBr 2  A5 5F                lda     FAC+3
0009DDr 2  48                   pha
0009DEr 2  A5 5E                lda     FAC+2
0009E0r 2  48                   pha
0009E1r 2  A5 5D                lda     FAC+1
0009E3r 2  48                   pha
0009E4r 2  A5 5C                lda     FAC
0009E6r 2  48                   pha
0009E7r 2  6C 21 00             jmp     (INDEX)
0009EAr 2               L2D02:
0009EAr 2  A0 FF                ldy     #$FF
0009ECr 2  68                   pla
0009EDr 2               GOEX:
0009EDr 2  F0 20                beq     EXIT
0009EFr 2               
0009EFr 2               ; ----------------------------------------------------------------------------
0009EFr 2               ; PERFORM STACKED OPERATION
0009EFr 2               ;
0009EFr 2               ; (A) = PRECEDENCE BYTE
0009EFr 2               ; STACK:  1 -- CPRMASK
0009EFr 2               ;	5 -- (ARG)
0009EFr 2               ;	2 -- ADDR OF PERFORMER
0009EFr 2               ; ----------------------------------------------------------------------------
0009EFr 2               FRM_PERFORM1:
0009EFr 2  C9 64                cmp     #$64
0009F1r 2  F0 03                beq     L2D0E
0009F3r 2  20 rr rr             jsr     CHKNUM
0009F6r 2               L2D0E:
0009F6r 2  84 49                sty     LASTOP
0009F8r 2               FRM_PERFORM2:
0009F8r 2  68                   pla
0009F9r 2  4A                   lsr     a
0009FAr 2  85 0E                sta     CPRMASK
0009FCr 2  68                   pla
0009FDr 2  85 63                sta     ARG
0009FFr 2  68                   pla
000A00r 2  85 64                sta     ARG+1
000A02r 2  68                   pla
000A03r 2  85 65                sta     ARG+2
000A05r 2  68                   pla
000A06r 2  85 66                sta     ARG+3
000A08r 2  68                   pla
000A09r 2               .ifndef CONFIG_SMALL
000A09r 2                       sta     ARG+4
000A09r 2                       pla
000A09r 2               .endif
000A09r 2  85 67                sta     ARGSIGN
000A0Br 2  45 60                eor     FACSIGN
000A0Dr 2  85 68                sta     SGNCPR
000A0Fr 2               EXIT:
000A0Fr 2  A5 5C                lda     FAC
000A11r 2  60                   rts
000A12r 2               
000A12r 2               ; ----------------------------------------------------------------------------
000A12r 2               ; GET ELEMENT IN EXPRESSION
000A12r 2               ;
000A12r 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000A12r 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000A12r 2               ; ----------------------------------------------------------------------------
000A12r 2               FRM_ELEMENT:
000A12r 2  A9 00                lda     #$00
000A14r 2  85 0A                sta     VALTYP
000A16r 2               L2D31:
000A16r 2  20 6C 00             jsr     CHRGET
000A19r 2  B0 03                bcs     L2D39
000A1Br 2               L2D36:
000A1Br 2  4C rr rr             jmp     FIN
000A1Er 2               L2D39:
000A1Er 2  20 rr rr             jsr     ISLETC
000A21r 2  B0 67                bcs     FRM_VARIABLE
000A23r 2               .ifdef CONFIG_CBM_ALL
000A23r 2                       cmp     #$FF
000A23r 2                       bne     LCDC1
000A23r 2                       lda     #<CON_PI
000A23r 2                       ldy     #>CON_PI
000A23r 2                       jsr     LOAD_FAC_FROM_YA
000A23r 2                       jmp     CHRGET
000A23r 2               CON_PI:
000A23r 2                       .byte   $82,$49,$0f,$DA,$A1
000A23r 2               LCDC1:
000A23r 2               .endif
000A23r 2  C9 2E                cmp     #$2E
000A25r 2  F0 F4                beq     L2D36
000A27r 2  C9 A5                cmp     #TOKEN_MINUS
000A29r 2  F0 58                beq     MIN
000A2Br 2  C9 A4                cmp     #TOKEN_PLUS
000A2Dr 2  F0 E7                beq     L2D31
000A2Fr 2  C9 22                cmp     #$22
000A31r 2  D0 0F                bne     NOT_
000A33r 2               
000A33r 2               ; ----------------------------------------------------------------------------
000A33r 2               ; STRING CONSTANT ELEMENT
000A33r 2               ;
000A33r 2               ; SET Y,A = (TXTPTR)+CARRY
000A33r 2               ; ----------------------------------------------------------------------------
000A33r 2               STRTXT:
000A33r 2  A5 73                lda     TXTPTR
000A35r 2  A4 74                ldy     TXTPTR+1
000A37r 2  69 00                adc     #$00
000A39r 2  90 01                bcc     L2D57
000A3Br 2  C8                   iny
000A3Cr 2               L2D57:
000A3Cr 2  20 rr rr             jsr     STRLIT
000A3Fr 2  4C rr rr             jmp     POINT
000A42r 2               
000A42r 2               ; ----------------------------------------------------------------------------
000A42r 2               ; "NOT" FUNCTION
000A42r 2               ; IF FAC=0, RETURN FAC=1
000A42r 2               ; IF FAC<>0, RETURN FAC=0
000A42r 2               ; ----------------------------------------------------------------------------
000A42r 2               NOT_:
000A42r 2  C9 A2                cmp     #TOKEN_NOT
000A44r 2  D0 13                bne     L2D74
000A46r 2  A0 18                ldy     #$18
000A48r 2  D0 3B                bne     EQUL
000A4Ar 2               
000A4Ar 2               ; ----------------------------------------------------------------------------
000A4Ar 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000A4Ar 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000A4Ar 2               ; ----------------------------------------------------------------------------
000A4Ar 2               EQUOP:
000A4Ar 2  20 rr rr             jsr     AYINT
000A4Dr 2  A5 5F                lda     FAC_LAST
000A4Fr 2  49 FF                eor     #$FF
000A51r 2  A8                   tay
000A52r 2  A5 5E                lda     FAC_LAST-1
000A54r 2  49 FF                eor     #$FF
000A56r 2  4C rr rr             jmp     GIVAYF
000A59r 2               L2D74:
000A59r 2               .ifdef SYM1
000A59r 2                       cmp     #TOKEN_USR
000A59r 2                       bne     LCC8A
000A59r 2                       jmp     LCDBD
000A59r 2               LCC8A:
000A59r 2                       cmp     #$26
000A59r 2                       bne     LCC91
000A59r 2                       jmp     LCDFE
000A59r 2               LCC91:
000A59r 2               .endif
000A59r 2  C9 9F                cmp     #TOKEN_FN
000A5Br 2  D0 03                bne     L2D7B
000A5Dr 2  4C rr rr             jmp     L31F3
000A60r 2               L2D7B:
000A60r 2  C9 AE                cmp     #TOKEN_SGN
000A62r 2  90 03                bcc     PARCHK
000A64r 2  4C rr rr             jmp     UNARY
000A67r 2               
000A67r 2               ; ----------------------------------------------------------------------------
000A67r 2               ; EVALUATE "(EXPRESSION)"
000A67r 2               ; ----------------------------------------------------------------------------
000A67r 2               PARCHK:
000A67r 2  20 rr rr             jsr     CHKOPN
000A6Ar 2  20 rr rr             jsr     FRMEVL
000A6Dr 2               CHKCLS:
000A6Dr 2  A9 29                lda     #$29
000A6Fr 2  2C                   .byte   $2C
000A70r 2               CHKOPN:
000A70r 2  A9 28                lda     #$28
000A72r 2  2C                   .byte   $2C
000A73r 2               CHKCOM:
000A73r 2  A9 2C                lda     #$2C
000A75r 2               
000A75r 2               ; ----------------------------------------------------------------------------
000A75r 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000A75r 2               ; ----------------------------------------------------------------------------
000A75r 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000A75r 2  A0 00                ldy     #$00
000A77r 2  D1 73                cmp     (TXTPTR),y
000A79r 2  D0 03                bne     SYNERR
000A7Br 2  4C 6C 00             jmp     CHRGET
000A7Er 2               ; ----------------------------------------------------------------------------
000A7Er 2               SYNERR:
000A7Er 2  A2 02                ldx     #ERR_SYNTAX
000A80r 2  4C rr rr             jmp     ERROR
000A83r 2               ; ----------------------------------------------------------------------------
000A83r 2               MIN:
000A83r 2  A0 15                ldy     #$15
000A85r 2               EQUL:
000A85r 2  68                   pla
000A86r 2  68                   pla
000A87r 2  4C rr rr             jmp     L2CA4
000A8Ar 2               ; ----------------------------------------------------------------------------
000A8Ar 2               FRM_VARIABLE:
000A8Ar 2  20 rr rr             jsr     PTRGET
000A8Dr 2               FRM_VARIABLE_CALL	= *-1
000A8Dr 2  85 5E                sta     FAC_LAST-1
000A8Fr 2  84 5F                sty     FAC_LAST
000A91r 2               .ifdef CONFIG_CBM_ALL
000A91r 2                       lda     VARNAM
000A91r 2                       ldy     VARNAM+1
000A91r 2               .endif
000A91r 2  A6 0A                ldx     VALTYP
000A93r 2  F0 05                beq     L2DB1
000A95r 2               .ifdef CONFIG_CBM_ALL
000A95r 2                 .ifdef CONFIG_CBM1_PATCHES
000A95r 2                       jmp     PATCH2
000A95r 2                       clc
000A95r 2               LCE3B:
000A95r 2                 .else
000A95r 2                       ldx     #$00
000A95r 2                       stx     STRNG1+1
000A95r 2                       bit     FAC+4
000A95r 2                       bpl     LCE53
000A95r 2                       cmp     #$54	; T
000A95r 2                       bne     LCE53
000A95r 2                 .endif
000A95r 2                       cpy     #$C9	; I$
000A95r 2                       bne     LCE53
000A95r 2                       jsr     LCE76
000A95r 2                       sty     EXPON
000A95r 2                       dey
000A95r 2                       sty     STRNG2
000A95r 2                       ldy     #$06
000A95r 2                       sty     INDX
000A95r 2                       ldy     #$24
000A95r 2                       jsr     LDD3A
000A95r 2                       jmp     LD353
000A95r 2               LCE53:
000A95r 2               .endif
000A95r 2               .ifdef CONFIG_2
000A95r 2                 .ifndef CBM2
000A95r 2               ; bugfix?
000A95r 2               ; fixed on AppleSoft II, not on any CBM
000A95r 2  A2 00                ldx     #$00
000A97r 2  86 69                stx     STRNG1+1
000A99r 2                 .endif
000A99r 2               .endif
000A99r 2  60                   rts
000A9Ar 2               L2DB1:
000A9Ar 2               .ifndef CONFIG_SMALL
000A9Ar 2                       ldx     VALTYP+1
000A9Ar 2                       bpl     L2DC2
000A9Ar 2                       ldy     #$00
000A9Ar 2                       lda     (FAC+3),y
000A9Ar 2                       tax
000A9Ar 2                       iny
000A9Ar 2                       lda     (FAC+3),y
000A9Ar 2                       tay
000A9Ar 2                       txa
000A9Ar 2                       jmp     GIVAYF
000A9Ar 2               L2DC2:
000A9Ar 2               .endif
000A9Ar 2               .ifdef CONFIG_CBM1_PATCHES
000A9Ar 2                       jmp     PATCH3
000A9Ar 2                       .byte   $19
000A9Ar 2               .endif
000A9Ar 2               .ifdef CBM2
000A9Ar 2                       bit     FAC+4
000A9Ar 2                       bpl     LCE90
000A9Ar 2                       cmp     #$54
000A9Ar 2                       bne     LCE82
000A9Ar 2               .endif
000A9Ar 2               .ifndef CONFIG_CBM_ALL
000A9Ar 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000A9Dr 2               .endif
000A9Dr 2               .ifdef CONFIG_CBM_ALL
000A9Dr 2               LCE69:
000A9Dr 2                       cpy     #$49
000A9Dr 2               .ifdef CBM1
000A9Dr 2                       bne     LCE82
000A9Dr 2               .else
000A9Dr 2                       bne     LCE90
000A9Dr 2               .endif
000A9Dr 2                       jsr     LCE76
000A9Dr 2                       tya
000A9Dr 2                       ldx     #$A0
000A9Dr 2                       jmp     LDB21
000A9Dr 2               LCE76:
000A9Dr 2               .ifdef CBM1
000A9Dr 2                       lda     #$FE
000A9Dr 2                       ldy     #$01
000A9Dr 2               .else
000A9Dr 2                       lda     #$8B
000A9Dr 2                       ldy     #$00
000A9Dr 2               .endif
000A9Dr 2                       sei
000A9Dr 2                       jsr     LOAD_FAC_FROM_YA
000A9Dr 2                       cli
000A9Dr 2                       sty     FAC+1
000A9Dr 2                       rts
000A9Dr 2               LCE82:
000A9Dr 2                       cmp     #$53
000A9Dr 2                       bne     LCE90
000A9Dr 2                       cpy     #$54
000A9Dr 2                       bne     LCE90
000A9Dr 2                       lda     Z96
000A9Dr 2                       jmp     FLOAT
000A9Dr 2               LCE90:
000A9Dr 2                       lda     FAC+3
000A9Dr 2                       ldy     FAC+4
000A9Dr 2                       jmp     LOAD_FAC_FROM_YA
000A9Dr 2               .endif
000A9Dr 2               
000A9Dr 2               ; ----------------------------------------------------------------------------
000A9Dr 2               UNARY:
000A9Dr 2  0A                   asl     a
000A9Er 2  48                   pha
000A9Fr 2  AA                   tax
000AA0r 2  20 6C 00             jsr     CHRGET
000AA3r 2  E0 83                cpx     #<(TOKEN_LEFTSTR*2-1)
000AA5r 2  90 20                bcc     L2DEF
000AA7r 2  20 rr rr             jsr     CHKOPN
000AAAr 2  20 rr rr             jsr     FRMEVL
000AADr 2  20 rr rr             jsr     CHKCOM
000AB0r 2  20 rr rr             jsr     CHKSTR
000AB3r 2  68                   pla
000AB4r 2  AA                   tax
000AB5r 2  A5 5F                lda     FAC_LAST
000AB7r 2  48                   pha
000AB8r 2  A5 5E                lda     FAC_LAST-1
000ABAr 2  48                   pha
000ABBr 2  8A                   txa
000ABCr 2  48                   pha
000ABDr 2  20 rr rr             jsr     GETBYT
000AC0r 2  68                   pla
000AC1r 2  A8                   tay
000AC2r 2  8A                   txa
000AC3r 2  48                   pha
000AC4r 2  4C rr rr             jmp     L2DF4
000AC7r 2               L2DEF:
000AC7r 2  20 rr rr             jsr     PARCHK
000ACAr 2  68                   pla
000ACBr 2  A8                   tay
000ACCr 2               L2DF4:
000ACCr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000ACFr 2  85 94                sta     JMPADRS+1
000AD1r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000AD4r 2  85 95                sta     JMPADRS+2
000AD6r 2               .ifdef KBD
000AD6r 2  20 rr rr             jsr     LF47D
000AD9r 2               .else
000AD9r 2                       jsr     JMPADRS
000AD9r 2               .endif
000AD9r 2  4C rr rr             jmp     CHKNUM
000ADCr 2               
000ADCr 2               ; ----------------------------------------------------------------------------
000ADCr 2               OR:
000ADCr 2  A0 FF                ldy     #$FF
000ADEr 2  2C                   .byte   $2C
000ADFr 2               ; ----------------------------------------------------------------------------
000ADFr 2               TAND:
000ADFr 2  A0 00                ldy     #$00
000AE1r 2  84 08                sty     EOLPNTR
000AE3r 2  20 rr rr             jsr     AYINT
000AE6r 2  A5 5E                lda     FAC_LAST-1
000AE8r 2  45 08                eor     EOLPNTR
000AEAr 2  85 06                sta     CHARAC
000AECr 2  A5 5F                lda     FAC_LAST
000AEEr 2  45 08                eor     EOLPNTR
000AF0r 2  85 07                sta     ENDCHR
000AF2r 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000AF5r 2  20 rr rr             jsr     AYINT
000AF8r 2  A5 5F                lda     FAC_LAST
000AFAr 2  45 08                eor     EOLPNTR
000AFCr 2  25 07                and     ENDCHR
000AFEr 2  45 08                eor     EOLPNTR
000B00r 2  A8                   tay
000B01r 2  A5 5E                lda     FAC_LAST-1
000B03r 2  45 08                eor     EOLPNTR
000B05r 2  25 06                and     CHARAC
000B07r 2  45 08                eor     EOLPNTR
000B09r 2  4C rr rr             jmp     GIVAYF
000B0Cr 2               
000B0Cr 2               ; ----------------------------------------------------------------------------
000B0Cr 2               ; PERFORM RELATIONAL OPERATIONS
000B0Cr 2               ; ----------------------------------------------------------------------------
000B0Cr 2               RELOPS:
000B0Cr 2  20 rr rr             jsr     CHKVAL
000B0Fr 2  B0 13                bcs     STRCMP
000B11r 2  A5 67                lda     ARGSIGN
000B13r 2  09 7F                ora     #$7F
000B15r 2  25 64                and     ARG+1
000B17r 2  85 64                sta     ARG+1
000B19r 2  A9 63                lda     #<ARG
000B1Br 2  A0 00                ldy     #$00
000B1Dr 2  20 rr rr             jsr     FCOMP
000B20r 2  AA                   tax
000B21r 2  4C rr rr             jmp     NUMCMP
000B24r 2               
000B24r 2               ; ----------------------------------------------------------------------------
000B24r 2               ; STRING COMPARISON
000B24r 2               ; ----------------------------------------------------------------------------
000B24r 2               STRCMP:
000B24r 2  A9 00                lda     #$00
000B26r 2  85 0A                sta     VALTYP
000B28r 2  C6 4B                dec     CPRTYP
000B2Ar 2  20 rr rr             jsr     FREFAC
000B2Dr 2  85 5C                sta     FAC
000B2Fr 2  86 5D                stx     FAC+1
000B31r 2  84 5E                sty     FAC+2
000B33r 2  A5 65                lda     ARG_LAST-1
000B35r 2  A4 66                ldy     ARG_LAST
000B37r 2  20 rr rr             jsr     FRETMP
000B3Ar 2  86 65                stx     ARG_LAST-1
000B3Cr 2  84 66                sty     ARG_LAST
000B3Er 2  AA                   tax
000B3Fr 2  38                   sec
000B40r 2  E5 5C                sbc     FAC
000B42r 2  F0 08                beq     L2E74
000B44r 2  A9 01                lda     #$01
000B46r 2  90 04                bcc     L2E74
000B48r 2  A6 5C                ldx     FAC
000B4Ar 2  A9 FF                lda     #$FF
000B4Cr 2               L2E74:
000B4Cr 2  85 60                sta     FACSIGN
000B4Er 2  A0 FF                ldy     #$FF
000B50r 2  E8                   inx
000B51r 2               STRCMP1:
000B51r 2  C8                   iny
000B52r 2  CA                   dex
000B53r 2  D0 07                bne     L2E84
000B55r 2  A6 60                ldx     FACSIGN
000B57r 2               NUMCMP:
000B57r 2  30 0F                bmi     CMPDONE
000B59r 2  18                   clc
000B5Ar 2  90 0C                bcc     CMPDONE
000B5Cr 2               L2E84:
000B5Cr 2  B1 65                lda     (ARG_LAST-1),y
000B5Er 2  D1 5D                cmp     (FAC+1),y
000B60r 2  F0 EF                beq     STRCMP1
000B62r 2  A2 FF                ldx     #$FF
000B64r 2  B0 02                bcs     CMPDONE
000B66r 2  A2 01                ldx     #$01
000B68r 2               CMPDONE:
000B68r 2  E8                   inx
000B69r 2  8A                   txa
000B6Ar 2  2A                   rol     a
000B6Br 2  25 0E                and     CPRMASK
000B6Dr 2  F0 02                beq     L2E99
000B6Fr 2  A9 FF                lda     #$FF
000B71r 2               L2E99:
000B71r 2  4C rr rr             jmp     FLOAT
000B74r 2               
000B74r 2               .ifdef SYM1
000B74r 2               LCDBD:
000B74r 2                       jsr     CHRGET
000B74r 2                       jsr     CHKOPN
000B74r 2                       jsr     FRMEVL
000B74r 2                       jsr     CHRGOT
000B74r 2                       cmp     #$29
000B74r 2                       beq     LCDF1
000B74r 2                       jsr     AYINT
000B74r 2                       lda     FAC+4
000B74r 2                       ldy     FAC+3
000B74r 2                       sta     USR+1
000B74r 2                       sty     USR+2
000B74r 2               LCDD8:
000B74r 2                       jsr     CHKCOM
000B74r 2                       jsr     FRMEVL
000B74r 2                       jsr     CHRGOT
000B74r 2                       cmp     #$29
000B74r 2                       beq     LCDF1
000B74r 2                       jsr     AYINT
000B74r 2                       lda     FAC+3
000B74r 2                       pha
000B74r 2                       lda     FAC+4
000B74r 2                       pha
000B74r 2                       jmp     LCDD8
000B74r 2               
000B74r 2               LCDF1:
000B74r 2                       jsr     CHRGET
000B74r 2                       jsr     AYINT
000B74r 2                       lda     FAC+3
000B74r 2                       ldy     FAC+4
000B74r 2                       jmp     USR
000B74r 2               
000B74r 2               LCDFE:
000B74r 2                       lda     ZD4
000B74r 2                       pha
000B74r 2                       lda     ZD3
000B74r 2                       pha
000B74r 2                       jsr     CHRGET
000B74r 2                       cmp     #$22
000B74r 2                       bne     LCE49
000B74r 2                       jsr     CHRGET
000B74r 2                       jsr     LCE2B
000B74r 2                       tax
000B74r 2                       jsr     CHRGOT
000B74r 2                       jsr     LCE2B
000B74r 2                       pha
000B74r 2                       jsr     CHRGOT
000B74r 2                       cmp     #$22
000B74r 2                       bne     LCE48
000B74r 2                       jsr     CHRGET
000B74r 2                       pla
000B74r 2                       tay
000B74r 2                       pla
000B74r 2                       pla
000B74r 2                       txa
000B74r 2                       jmp     GIVAYF
000B74r 2               
000B74r 2               LCE2B:
000B74r 2                       jsr     ASCNIB
000B74r 2                       bcs     LCE47
000B74r 2                       pha
000B74r 2                       jsr     CHRGET
000B74r 2                       jsr     ASCNIB
000B74r 2                       sta     FAC+4
000B74r 2                       bcs     LCE46
000B74r 2                       jsr     CHRGET
000B74r 2                       pla
000B74r 2                       asl     a
000B74r 2                       asl     a
000B74r 2                       asl     a
000B74r 2                       asl     a
000B74r 2                       ora     FAC+4
000B74r 2                       rts
000B74r 2               
000B74r 2               LCE46:
000B74r 2                       pla
000B74r 2               LCE47:
000B74r 2                       pla
000B74r 2               LCE48:
000B74r 2                       pla
000B74r 2               LCE49:
000B74r 2                       pla
000B74r 2                       sta     ZD3
000B74r 2                       pla
000B74r 2                       sta     ZD4
000B74r 2                       jmp     ZERO_FAC
000B74r 2               .endif
000B74r 2               
000B74r 1               .include "var.s"
000B74r 2               .segment "CODE"
000B74r 2               
000B74r 2               ; ----------------------------------------------------------------------------
000B74r 2               ; "DIM" STATEMENT
000B74r 2               ; ----------------------------------------------------------------------------
000B74r 2               NXDIM:
000B74r 2  20 rr rr             jsr     CHKCOM
000B77r 2               DIM:
000B77r 2  AA                   tax
000B78r 2  20 rr rr             jsr     PTRGET2
000B7Br 2  20 72 00             jsr     CHRGOT
000B7Er 2  D0 F4                bne     NXDIM
000B80r 2  60                   rts
000B81r 2               
000B81r 2               ; ----------------------------------------------------------------------------
000B81r 2               ; PTRGET -- GENERAL VARIABLE SCAN
000B81r 2               ;
000B81r 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000B81r 2               ; VARTAB AND ARYTAB FOR THE NAME.
000B81r 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000B81r 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000B81r 2               ;
000B81r 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000B81r 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000B81r 2               ;		ELSE = 0
000B81r 2               ;
000B81r 2               ;	SUBFLG -- = $00
000B81r 2               ;		= $40 IF CALLED FROM "GETARYPT"
000B81r 2               ; ----------------------------------------------------------------------------
000B81r 2               PTRGET:
000B81r 2  A2 00                ldx     #$00
000B83r 2  20 72 00             jsr     CHRGOT
000B86r 2               PTRGET2:
000B86r 2  86 09                stx     DIMFLG
000B88r 2               PTRGET3:
000B88r 2  85 43                sta     VARNAM
000B8Ar 2  20 72 00             jsr     CHRGOT
000B8Dr 2  20 rr rr             jsr     ISLETC
000B90r 2  B0 03                bcs     NAMOK
000B92r 2               SYNERR3:
000B92r 2  4C rr rr             jmp     SYNERR
000B95r 2               NAMOK:
000B95r 2  A2 00                ldx     #$00
000B97r 2  86 0A                stx     VALTYP
000B99r 2               .ifndef CONFIG_SMALL
000B99r 2                       stx     VALTYP+1
000B99r 2               .endif
000B99r 2  20 6C 00             jsr     CHRGET
000B9Cr 2  90 05                bcc     L2ECD
000B9Er 2  20 rr rr             jsr     ISLETC
000BA1r 2  90 0B                bcc     L2ED8
000BA3r 2               L2ECD:
000BA3r 2  AA                   tax
000BA4r 2               L2ECE:
000BA4r 2  20 6C 00             jsr     CHRGET
000BA7r 2  90 FB                bcc     L2ECE
000BA9r 2  20 rr rr             jsr     ISLETC
000BACr 2  B0 F6                bcs     L2ECE
000BAEr 2               L2ED8:
000BAEr 2  C9 24                cmp     #$24
000BB0r 2               .ifdef CONFIG_SMALL
000BB0r 2  D0 0B                bne     L2EF9
000BB2r 2               .else
000BB2r 2                       bne     L2EE2
000BB2r 2               .endif
000BB2r 2  A9 FF                lda     #$FF
000BB4r 2  85 0A                sta     VALTYP
000BB6r 2               .ifndef CONFIG_SMALL
000BB6r 2                       bne     L2EF2
000BB6r 2               L2EE2:
000BB6r 2                       cmp     #$25
000BB6r 2                       bne     L2EF9
000BB6r 2                       lda     SUBFLG
000BB6r 2                       bne     SYNERR3
000BB6r 2                       lda     #$80
000BB6r 2                       sta     VALTYP+1
000BB6r 2                       ora     VARNAM
000BB6r 2                       sta     VARNAM
000BB6r 2               L2EF2:
000BB6r 2               .endif
000BB6r 2  8A                   txa
000BB7r 2  09 80                ora     #$80
000BB9r 2  AA                   tax
000BBAr 2  20 6C 00             jsr     CHRGET
000BBDr 2               L2EF9:
000BBDr 2  86 44                stx     VARNAM+1
000BBFr 2  38                   sec
000BC0r 2  05 0C                ora     SUBFLG
000BC2r 2  E9 28                sbc     #$28
000BC4r 2  D0 03                bne     L2F05
000BC6r 2  4C rr rr             jmp     ARRAY
000BC9r 2               L2F05:
000BC9r 2  A9 00                lda     #$00
000BCBr 2  85 0C                sta     SUBFLG
000BCDr 2  A5 2B                lda     VARTAB
000BCFr 2  A6 2C                ldx     VARTAB+1
000BD1r 2  A0 00                ldy     #$00
000BD3r 2               L2F0F:
000BD3r 2  86 5B                stx     LOWTR+1
000BD5r 2               L2F11:
000BD5r 2  85 5A                sta     LOWTR
000BD7r 2  E4 2E                cpx     ARYTAB+1
000BD9r 2  D0 04                bne     L2F1B
000BDBr 2  C5 2D                cmp     ARYTAB
000BDDr 2  F0 22                beq     NAMENOTFOUND
000BDFr 2               L2F1B:
000BDFr 2  A5 43                lda     VARNAM
000BE1r 2  D1 5A                cmp     (LOWTR),y
000BE3r 2  D0 08                bne     L2F29
000BE5r 2  A5 44                lda     VARNAM+1
000BE7r 2  C8                   iny
000BE8r 2  D1 5A                cmp     (LOWTR),y
000BEAr 2  F0 67                beq     SET_VARPNT_AND_YA
000BECr 2  88                   dey
000BEDr 2               L2F29:
000BEDr 2  18                   clc
000BEEr 2  A5 5A                lda     LOWTR
000BF0r 2  69 06                adc     #BYTES_PER_VARIABLE
000BF2r 2  90 E1                bcc     L2F11
000BF4r 2  E8                   inx
000BF5r 2  D0 DC                bne     L2F0F
000BF7r 2               
000BF7r 2               ; ----------------------------------------------------------------------------
000BF7r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000BF7r 2               ;
000BF7r 2               ; RETURN CARRY = 1 IF A-Z
000BF7r 2               ;	= 0 IF NOT
000BF7r 2               ; ----------------------------------------------------------------------------
000BF7r 2               ISLETC:
000BF7r 2  C9 41                cmp     #$41
000BF9r 2  90 05                bcc     L2F3C
000BFBr 2  E9 5B                sbc     #$5B
000BFDr 2  38                   sec
000BFEr 2  E9 A5                sbc     #$A5
000C00r 2               L2F3C:
000C00r 2  60                   rts
000C01r 2               
000C01r 2               ; ----------------------------------------------------------------------------
000C01r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000C01r 2               ; ----------------------------------------------------------------------------
000C01r 2               NAMENOTFOUND:
000C01r 2  68                   pla
000C02r 2  48                   pha
000C03r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000C05r 2  D0 0D                bne     MAKENEWVARIABLE
000C07r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000C07r 2  BA                   tsx
000C08r 2  BD 02 01             lda     STACK+2,x
000C0Br 2  C9 rr                cmp     #>FRM_VARIABLE_CALL
000C0Dr 2  D0 05                bne     MAKENEWVARIABLE
000C0Fr 2               .endif
000C0Fr 2               LD015:
000C0Fr 2  A9 rr                lda     #<C_ZERO
000C11r 2  A0 rr                ldy     #>C_ZERO
000C13r 2  60                   rts
000C14r 2               
000C14r 2               ; ----------------------------------------------------------------------------
000C14r 2               .ifndef CONFIG_2
000C14r 2               C_ZERO:
000C14r 2                       .byte   $00,$00
000C14r 2               .endif
000C14r 2               
000C14r 2               ; ----------------------------------------------------------------------------
000C14r 2               ; MAKE A NEW SIMPLE VARIABLE
000C14r 2               ;
000C14r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000C14r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000C14r 2               ; ----------------------------------------------------------------------------
000C14r 2               MAKENEWVARIABLE:
000C14r 2               .ifdef CONFIG_CBM_ALL
000C14r 2                       lda     VARNAM
000C14r 2                       ldy     VARNAM+1
000C14r 2                       cmp     #$54
000C14r 2                       bne     LD02F
000C14r 2                       cpy     #$C9
000C14r 2                       beq     LD015
000C14r 2                       cpy     #$49
000C14r 2                       bne     LD02F
000C14r 2               LD02C:
000C14r 2                       jmp     SYNERR
000C14r 2               LD02F:
000C14r 2                       cmp     #$53
000C14r 2                       bne     LD037
000C14r 2                       cpy     #$54
000C14r 2                       beq     LD02C
000C14r 2               LD037:
000C14r 2               .endif
000C14r 2  A5 2D                lda     ARYTAB
000C16r 2  A4 2E                ldy     ARYTAB+1
000C18r 2  85 5A                sta     LOWTR
000C1Ar 2  84 5B                sty     LOWTR+1
000C1Cr 2  A5 2F                lda     STREND
000C1Er 2  A4 30                ldy     STREND+1
000C20r 2  85 56                sta     HIGHTR
000C22r 2  84 57                sty     HIGHTR+1
000C24r 2  18                   clc
000C25r 2  69 06                adc     #BYTES_PER_VARIABLE
000C27r 2  90 01                bcc     L2F68
000C29r 2  C8                   iny
000C2Ar 2               L2F68:
000C2Ar 2  85 54                sta     HIGHDS
000C2Cr 2  84 55                sty     HIGHDS+1
000C2Er 2  20 rr rr             jsr     BLTU
000C31r 2  A5 54                lda     HIGHDS
000C33r 2  A4 55                ldy     HIGHDS+1
000C35r 2  C8                   iny
000C36r 2  85 2D                sta     ARYTAB
000C38r 2  84 2E                sty     ARYTAB+1
000C3Ar 2  A0 00                ldy     #$00
000C3Cr 2  A5 43                lda     VARNAM
000C3Er 2  91 5A                sta     (LOWTR),y
000C40r 2  C8                   iny
000C41r 2  A5 44                lda     VARNAM+1
000C43r 2  91 5A                sta     (LOWTR),y
000C45r 2  A9 00                lda     #$00
000C47r 2  C8                   iny
000C48r 2  91 5A                sta     (LOWTR),y
000C4Ar 2  C8                   iny
000C4Br 2  91 5A                sta     (LOWTR),y
000C4Dr 2  C8                   iny
000C4Er 2  91 5A                sta     (LOWTR),y
000C50r 2  C8                   iny
000C51r 2  91 5A                sta     (LOWTR),y
000C53r 2               .ifndef CONFIG_SMALL
000C53r 2                       iny
000C53r 2                       sta     (LOWTR),y
000C53r 2               .endif
000C53r 2               
000C53r 2               ; ----------------------------------------------------------------------------
000C53r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000C53r 2               ; ----------------------------------------------------------------------------
000C53r 2               SET_VARPNT_AND_YA:
000C53r 2  A5 5A                lda     LOWTR
000C55r 2  18                   clc
000C56r 2  69 02                adc     #$02
000C58r 2  A4 5B                ldy     LOWTR+1
000C5Ar 2  90 01                bcc     L2F9E
000C5Cr 2  C8                   iny
000C5Dr 2               L2F9E:
000C5Dr 2  85 45                sta     VARPNT
000C5Fr 2  84 46                sty     VARPNT+1
000C61r 2  60                   rts
000C62r 2               
000C62r 1               .include "array.s"
000C62r 2               .segment "CODE"
000C62r 2               
000C62r 2               ; ----------------------------------------------------------------------------
000C62r 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000C62r 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000C62r 2               ; ----------------------------------------------------------------------------
000C62r 2               GETARY:
000C62r 2  A5 08                lda     EOLPNTR
000C64r 2  0A                   asl     a
000C65r 2  69 05                adc     #$05
000C67r 2  65 5A                adc     LOWTR
000C69r 2  A4 5B                ldy     LOWTR+1
000C6Br 2  90 01                bcc     L2FAF
000C6Dr 2  C8                   iny
000C6Er 2               L2FAF:
000C6Er 2  85 54                sta     HIGHDS
000C70r 2  84 55                sty     HIGHDS+1
000C72r 2  60                   rts
000C73r 2               
000C73r 2               ; ----------------------------------------------------------------------------
000C73r 2               NEG32768:
000C73r 2  90 80 00 00          .byte   $90,$80,$00,$00
000C77r 2               
000C77r 2               .ifdef CONFIG_2C
000C77r 2               		.byte	$00; bugfix: short number
000C77r 2               .endif
000C77r 2               
000C77r 2               ; ----------------------------------------------------------------------------
000C77r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000C77r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000C77r 2               ; IN FAC+3,4
000C77r 2               ; ----------------------------------------------------------------------------
000C77r 2               MAKINT:
000C77r 2  20 6C 00             jsr     CHRGET
000C7Ar 2               .ifdef CONFIG_2
000C7Ar 2  20 rr rr             jsr     FRMEVL
000C7Dr 2               .else
000C7Dr 2                       jsr     FRMNUM
000C7Dr 2               .endif
000C7Dr 2               
000C7Dr 2               ; ----------------------------------------------------------------------------
000C7Dr 2               ; CONVERT FAC TO INTEGER
000C7Dr 2               ; MUST BE POSITIVE AND LESS THAN 32768
000C7Dr 2               ; ----------------------------------------------------------------------------
000C7Dr 2               MKINT:
000C7Dr 2               .ifdef CONFIG_2
000C7Dr 2  20 rr rr             jsr     CHKNUM
000C80r 2               .endif
000C80r 2  A5 60                lda     FACSIGN
000C82r 2  30 0D                bmi     MI1
000C84r 2               
000C84r 2               ; ----------------------------------------------------------------------------
000C84r 2               ; CONVERT FAC TO INTEGER
000C84r 2               ; MUST BE -32767 <= FAC <= 32767
000C84r 2               ; ----------------------------------------------------------------------------
000C84r 2               AYINT:
000C84r 2  A5 5C                lda     FAC
000C86r 2  C9 90                cmp     #$90
000C88r 2  90 09                bcc     MI2
000C8Ar 2  A9 rr                lda     #<NEG32768
000C8Cr 2  A0 rr                ldy     #>NEG32768
000C8Er 2  20 rr rr             jsr     FCOMP
000C91r 2               MI1:
000C91r 2  D0 74                bne     IQERR
000C93r 2               MI2:
000C93r 2  4C rr rr             jmp     QINT
000C96r 2               
000C96r 2               ; ----------------------------------------------------------------------------
000C96r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000C96r 2               ; ----------------------------------------------------------------------------
000C96r 2               ARRAY:
000C96r 2  A5 09                lda     DIMFLG
000C98r 2               .ifndef CONFIG_SMALL
000C98r 2                       ora     VALTYP+1
000C98r 2               .endif
000C98r 2  48                   pha
000C99r 2  A5 0A                lda     VALTYP
000C9Br 2  48                   pha
000C9Cr 2  A0 00                ldy     #$00
000C9Er 2               L2FDE:
000C9Er 2  98                   tya
000C9Fr 2  48                   pha
000CA0r 2  A5 44                lda     VARNAM+1
000CA2r 2  48                   pha
000CA3r 2  A5 43                lda     VARNAM
000CA5r 2  48                   pha
000CA6r 2  20 rr rr             jsr     MAKINT
000CA9r 2  68                   pla
000CAAr 2  85 43                sta     VARNAM
000CACr 2  68                   pla
000CADr 2  85 44                sta     VARNAM+1
000CAFr 2  68                   pla
000CB0r 2  A8                   tay
000CB1r 2  BA                   tsx
000CB2r 2  BD 02 01             lda     STACK+2,x
000CB5r 2  48                   pha
000CB6r 2  BD 01 01             lda     STACK+1,x
000CB9r 2  48                   pha
000CBAr 2  A5 5E                lda     FAC_LAST-1
000CBCr 2  9D 02 01             sta     STACK+2,x
000CBFr 2  A5 5F                lda     FAC_LAST
000CC1r 2  9D 01 01             sta     STACK+1,x
000CC4r 2  C8                   iny
000CC5r 2  20 72 00             jsr     CHRGOT
000CC8r 2  C9 2C                cmp     #$2C
000CCAr 2  F0 D2                beq     L2FDE
000CCCr 2  84 08                sty     EOLPNTR
000CCEr 2  20 rr rr             jsr     CHKCLS
000CD1r 2  68                   pla
000CD2r 2  85 0A                sta     VALTYP
000CD4r 2  68                   pla
000CD5r 2               .ifndef CONFIG_SMALL
000CD5r 2                       sta     VALTYP+1
000CD5r 2                       and     #$7F
000CD5r 2               .endif
000CD5r 2  85 09                sta     DIMFLG
000CD7r 2               ; ----------------------------------------------------------------------------
000CD7r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000CD7r 2               ; ----------------------------------------------------------------------------
000CD7r 2  A6 2D                ldx     ARYTAB
000CD9r 2  A5 2E                lda     ARYTAB+1
000CDBr 2               L301F:
000CDBr 2  86 5A                stx     LOWTR
000CDDr 2  85 5B                sta     LOWTR+1
000CDFr 2  C5 30                cmp     STREND+1
000CE1r 2  D0 04                bne     L302B
000CE3r 2  E4 2F                cpx     STREND
000CE5r 2  F0 39                beq     MAKE_NEW_ARRAY
000CE7r 2               L302B:
000CE7r 2  A0 00                ldy     #$00
000CE9r 2  B1 5A                lda     (LOWTR),y
000CEBr 2  C8                   iny
000CECr 2  C5 43                cmp     VARNAM
000CEEr 2  D0 06                bne     L303A
000CF0r 2  A5 44                lda     VARNAM+1
000CF2r 2  D1 5A                cmp     (LOWTR),y
000CF4r 2  F0 16                beq     USE_OLD_ARRAY
000CF6r 2               L303A:
000CF6r 2  C8                   iny
000CF7r 2  B1 5A                lda     (LOWTR),y
000CF9r 2  18                   clc
000CFAr 2  65 5A                adc     LOWTR
000CFCr 2  AA                   tax
000CFDr 2  C8                   iny
000CFEr 2  B1 5A                lda     (LOWTR),y
000D00r 2  65 5B                adc     LOWTR+1
000D02r 2  90 D7                bcc     L301F
000D04r 2               
000D04r 2               ; ----------------------------------------------------------------------------
000D04r 2               ; ERROR:  BAD SUBSCRIPTS
000D04r 2               ; ----------------------------------------------------------------------------
000D04r 2               SUBERR:
000D04r 2  A2 10                ldx     #ERR_BADSUBS
000D06r 2  2C                   .byte   $2C
000D07r 2               
000D07r 2               ; ----------------------------------------------------------------------------
000D07r 2               ; ERROR:  ILLEGAL QUANTITY
000D07r 2               ; ----------------------------------------------------------------------------
000D07r 2               IQERR:
000D07r 2  A2 08                ldx     #ERR_ILLQTY
000D09r 2               JER:
000D09r 2  4C rr rr             jmp     ERROR
000D0Cr 2               
000D0Cr 2               ; ----------------------------------------------------------------------------
000D0Cr 2               ; FOUND THE ARRAY
000D0Cr 2               ; ----------------------------------------------------------------------------
000D0Cr 2               USE_OLD_ARRAY:
000D0Cr 2  A2 12                ldx     #ERR_REDIMD
000D0Er 2  A5 09                lda     DIMFLG
000D10r 2  D0 F7                bne     JER
000D12r 2  20 rr rr             jsr     GETARY
000D15r 2  A5 08                lda     EOLPNTR
000D17r 2  A0 04                ldy     #$04
000D19r 2  D1 5A                cmp     (LOWTR),y
000D1Br 2  D0 E7                bne     SUBERR
000D1Dr 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000D20r 2               
000D20r 2               ; ----------------------------------------------------------------------------
000D20r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000D20r 2               ; ----------------------------------------------------------------------------
000D20r 2               MAKE_NEW_ARRAY:
000D20r 2  20 rr rr             jsr     GETARY
000D23r 2  20 rr rr             jsr     REASON
000D26r 2  A9 00                lda     #$00
000D28r 2  A8                   tay
000D29r 2  85 6B                sta     STRNG2+1
000D2Br 2  A2 04                ldx     #BYTES_PER_ELEMENT
000D2Dr 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000D2Dr 2                       stx     STRNG2
000D2Dr 2               .endif
000D2Dr 2  A5 43                lda     VARNAM
000D2Fr 2  91 5A                sta     (LOWTR),y
000D31r 2               .ifndef CONFIG_SMALL
000D31r 2                       bpl     L3078
000D31r 2                       dex
000D31r 2               L3078:
000D31r 2               .endif
000D31r 2  C8                   iny
000D32r 2  A5 44                lda     VARNAM+1
000D34r 2  91 5A                sta     (LOWTR),y
000D36r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000D36r 2  10 01                bpl     L3081
000D38r 2  CA                   dex
000D39r 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000D39r 2                       dex
000D39r 2                 .endif
000D39r 2               L3081:
000D39r 2  86 6A                stx     STRNG2
000D3Br 2               .endif
000D3Br 2  A5 08                lda     EOLPNTR
000D3Dr 2  C8                   iny
000D3Er 2  C8                   iny
000D3Fr 2  C8                   iny
000D40r 2  91 5A                sta     (LOWTR),y
000D42r 2               L308A:
000D42r 2  A2 0B                ldx     #$0B
000D44r 2  A9 00                lda     #$00
000D46r 2  24 09                bit     DIMFLG
000D48r 2  50 08                bvc     L309A
000D4Ar 2  68                   pla
000D4Br 2  18                   clc
000D4Cr 2  69 01                adc     #$01
000D4Er 2  AA                   tax
000D4Fr 2  68                   pla
000D50r 2  69 00                adc     #$00
000D52r 2               L309A:
000D52r 2  C8                   iny
000D53r 2  91 5A                sta     (LOWTR),y
000D55r 2  C8                   iny
000D56r 2  8A                   txa
000D57r 2  91 5A                sta     (LOWTR),y
000D59r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000D5Cr 2  86 6A                stx     STRNG2
000D5Er 2  85 6B                sta     STRNG2+1
000D60r 2  A4 21                ldy     INDEX
000D62r 2  C6 08                dec     EOLPNTR
000D64r 2  D0 DC                bne     L308A
000D66r 2  65 55                adc     HIGHDS+1
000D68r 2  B0 5D                bcs     GME
000D6Ar 2  85 55                sta     HIGHDS+1
000D6Cr 2  A8                   tay
000D6Dr 2  8A                   txa
000D6Er 2  65 54                adc     HIGHDS
000D70r 2  90 03                bcc     L30BD
000D72r 2  C8                   iny
000D73r 2  F0 52                beq     GME
000D75r 2               L30BD:
000D75r 2  20 rr rr             jsr     REASON
000D78r 2  85 2F                sta     STREND
000D7Ar 2  84 30                sty     STREND+1
000D7Cr 2  A9 00                lda     #$00
000D7Er 2  E6 6B                inc     STRNG2+1
000D80r 2  A4 6A                ldy     STRNG2
000D82r 2  F0 05                beq     L30D1
000D84r 2               L30CC:
000D84r 2  88                   dey
000D85r 2  91 54                sta     (HIGHDS),y
000D87r 2  D0 FB                bne     L30CC
000D89r 2               L30D1:
000D89r 2  C6 55                dec     HIGHDS+1
000D8Br 2  C6 6B                dec     STRNG2+1
000D8Dr 2  D0 F5                bne     L30CC
000D8Fr 2  E6 55                inc     HIGHDS+1
000D91r 2  38                   sec
000D92r 2  A5 2F                lda     STREND
000D94r 2  E5 5A                sbc     LOWTR
000D96r 2  A0 02                ldy     #$02
000D98r 2  91 5A                sta     (LOWTR),y
000D9Ar 2  A5 30                lda     STREND+1
000D9Cr 2  C8                   iny
000D9Dr 2  E5 5B                sbc     LOWTR+1
000D9Fr 2  91 5A                sta     (LOWTR),y
000DA1r 2  A5 09                lda     DIMFLG
000DA3r 2  D0 5C                bne     RTS9
000DA5r 2  C8                   iny
000DA6r 2               
000DA6r 2               ; ----------------------------------------------------------------------------
000DA6r 2               ; FIND SPECIFIED ARRAY ELEMENT
000DA6r 2               ;
000DA6r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000DA6r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000DA6r 2               ; ----------------------------------------------------------------------------
000DA6r 2               FIND_ARRAY_ELEMENT:
000DA6r 2  B1 5A                lda     (LOWTR),y
000DA8r 2  85 08                sta     EOLPNTR
000DAAr 2  A9 00                lda     #$00
000DACr 2  85 6A                sta     STRNG2
000DAEr 2               L30F6:
000DAEr 2  85 6B                sta     STRNG2+1
000DB0r 2  C8                   iny
000DB1r 2  68                   pla
000DB2r 2  AA                   tax
000DB3r 2  85 5E                sta     FAC_LAST-1
000DB5r 2  68                   pla
000DB6r 2  85 5F                sta     FAC_LAST
000DB8r 2  D1 5A                cmp     (LOWTR),y
000DBAr 2  90 0E                bcc     FAE2
000DBCr 2  D0 06                bne     GSE
000DBEr 2  C8                   iny
000DBFr 2  8A                   txa
000DC0r 2  D1 5A                cmp     (LOWTR),y
000DC2r 2  90 07                bcc     FAE3
000DC4r 2               ; ----------------------------------------------------------------------------
000DC4r 2               GSE:
000DC4r 2  4C rr rr             jmp     SUBERR
000DC7r 2               GME:
000DC7r 2  4C rr rr             jmp     MEMERR
000DCAr 2               ; ----------------------------------------------------------------------------
000DCAr 2               FAE2:
000DCAr 2  C8                   iny
000DCBr 2               FAE3:
000DCBr 2  A5 6B                lda     STRNG2+1
000DCDr 2  05 6A                ora     STRNG2
000DCFr 2  18                   clc
000DD0r 2  F0 0A                beq     L3124
000DD2r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000DD5r 2  8A                   txa
000DD6r 2  65 5E                adc     FAC_LAST-1
000DD8r 2  AA                   tax
000DD9r 2  98                   tya
000DDAr 2  A4 21                ldy     INDEX
000DDCr 2               L3124:
000DDCr 2  65 5F                adc     FAC_LAST
000DDEr 2  86 6A                stx     STRNG2
000DE0r 2  C6 08                dec     EOLPNTR
000DE2r 2  D0 CA                bne     L30F6
000DE4r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000DE4r 2                       asl     STRNG2
000DE4r 2                       rol     a
000DE4r 2                       bcs     GSE
000DE4r 2                       asl     STRNG2
000DE4r 2                       rol     a
000DE4r 2                       bcs     GSE
000DE4r 2                       tay
000DE4r 2                       lda     STRNG2
000DE4r 2               .else
000DE4r 2                 .ifdef CONFIG_11A
000DE4r 2  85 6B                sta     STRNG2+1
000DE6r 2                 .endif
000DE6r 2  A2 04                ldx     #BYTES_FP
000DE8r 2                 .ifdef CONFIG_SMALL
000DE8r 2  A5 44                lda     VARNAM+1
000DEAr 2                 .else
000DEAr 2                       lda     VARNAM
000DEAr 2                 .endif
000DEAr 2  10 01                bpl     L3135
000DECr 2  CA                   dex
000DEDr 2               L3135:
000DEDr 2                 .ifdef CONFIG_SMALL
000DEDr 2  86 26                stx     RESULT+1
000DEFr 2                 .else
000DEFr 2                       lda     VARNAM+1
000DEFr 2                       bpl     L313B
000DEFr 2                       dex
000DEFr 2                       dex
000DEFr 2               L313B:
000DEFr 2                       stx     RESULT+2
000DEFr 2                 .endif
000DEFr 2  A9 00                lda     #$00
000DF1r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000DF4r 2  8A                   txa
000DF5r 2               .endif
000DF5r 2  65 54                adc     HIGHDS
000DF7r 2  85 45                sta     VARPNT
000DF9r 2  98                   tya
000DFAr 2  65 55                adc     HIGHDS+1
000DFCr 2  85 46                sta     VARPNT+1
000DFEr 2  A8                   tay
000DFFr 2  A5 45                lda     VARPNT
000E01r 2               RTS9:
000E01r 2  60                   rts
000E02r 2               
000E02r 2               ; ----------------------------------------------------------------------------
000E02r 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000E02r 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000E02r 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000E02r 2               ; ----------------------------------------------------------------------------
000E02r 2               MULTIPLY_SUBSCRIPT:
000E02r 2  84 21                sty     INDEX
000E04r 2  B1 5A                lda     (LOWTR),y
000E06r 2  85 26                sta     RESULT_LAST-2
000E08r 2  88                   dey
000E09r 2  B1 5A                lda     (LOWTR),y
000E0Br 2               MULTIPLY_SUBS1:
000E0Br 2  85 27                sta     RESULT_LAST-1
000E0Dr 2  A9 10                lda     #$10
000E0Fr 2  85 58                sta     INDX
000E11r 2  A2 00                ldx     #$00
000E13r 2  A0 00                ldy     #$00
000E15r 2               L3163:
000E15r 2  8A                   txa
000E16r 2  0A                   asl     a
000E17r 2  AA                   tax
000E18r 2  98                   tya
000E19r 2  2A                   rol     a
000E1Ar 2  A8                   tay
000E1Br 2  B0 AA                bcs     GME
000E1Dr 2  06 6A                asl     STRNG2
000E1Fr 2  26 6B                rol     STRNG2+1
000E21r 2  90 0B                bcc     L317C
000E23r 2  18                   clc
000E24r 2  8A                   txa
000E25r 2  65 26                adc     RESULT_LAST-2
000E27r 2  AA                   tax
000E28r 2  98                   tya
000E29r 2  65 27                adc     RESULT_LAST-1
000E2Br 2  A8                   tay
000E2Cr 2  B0 99                bcs     GME
000E2Er 2               L317C:
000E2Er 2  C6 58                dec     INDX
000E30r 2  D0 E3                bne     L3163
000E32r 2  60                   rts
000E33r 2               
000E33r 2               
000E33r 1               .include "misc2.s"
000E33r 2               .segment "CODE"
000E33r 2               
000E33r 2               ; ----------------------------------------------------------------------------
000E33r 2               ; "FRE" FUNCTION
000E33r 2               ;
000E33r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000E33r 2               ; ----------------------------------------------------------------------------
000E33r 2               FRE:
000E33r 2  A5 0A                lda     VALTYP
000E35r 2  F0 03                beq     L3188
000E37r 2  20 rr rr             jsr     FREFAC
000E3Ar 2               L3188:
000E3Ar 2  20 rr rr             jsr     GARBAG
000E3Dr 2  38                   sec
000E3Er 2  A5 31                lda     FRETOP
000E40r 2  E5 2F                sbc     STREND
000E42r 2  A8                   tay
000E43r 2  A5 32                lda     FRETOP+1
000E45r 2  E5 30                sbc     STREND+1
000E47r 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000E47r 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000E47r 2               
000E47r 2               ; ----------------------------------------------------------------------------
000E47r 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000E47r 2               ; ----------------------------------------------------------------------------
000E47r 2               GIVAYF:
000E47r 2  A2 00                ldx     #$00
000E49r 2  86 0A                stx     VALTYP
000E4Br 2  85 5D                sta     FAC+1
000E4Dr 2  84 5E                sty     FAC+2
000E4Fr 2  A2 90                ldx     #$90
000E51r 2  4C rr rr             jmp     FLOAT1
000E54r 2               POS:
000E54r 2  A4 10                ldy     POSX
000E56r 2               
000E56r 2               ; ----------------------------------------------------------------------------
000E56r 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000E56r 2               ; ----------------------------------------------------------------------------
000E56r 2               SNGFLT:
000E56r 2  A9 00                lda     #$00
000E58r 2  F0 ED                beq     GIVAYF
000E5Ar 2               
000E5Ar 2               ; ----------------------------------------------------------------------------
000E5Ar 2               ; CHECK FOR DIRECT OR RUNNING MODE
000E5Ar 2               ; GIVING ERROR IF DIRECT MODE
000E5Ar 2               ; ----------------------------------------------------------------------------
000E5Ar 2               ERRDIR:
000E5Ar 2  A6 38                ldx     CURLIN+1
000E5Cr 2  E8                   inx
000E5Dr 2  D0 A2                bne     RTS9
000E5Fr 2  A2 16                ldx     #ERR_ILLDIR
000E61r 2               .ifdef CONFIG_2
000E61r 2  2C                   .byte   $2C
000E62r 2               LD288:
000E62r 2  A2 20                ldx     #ERR_UNDEFFN
000E64r 2               .endif
000E64r 2               L31AF:
000E64r 2  4C rr rr             jmp     ERROR
000E67r 2               DEF:
000E67r 2  20 rr rr             jsr     FNC
000E6Ar 2  20 rr rr             jsr     ERRDIR
000E6Dr 2  20 rr rr             jsr     CHKOPN
000E70r 2  A9 80                lda     #$80
000E72r 2  85 0C                sta     SUBFLG
000E74r 2  20 rr rr             jsr     PTRGET
000E77r 2  20 rr rr             jsr     CHKNUM
000E7Ar 2  20 rr rr             jsr     CHKCLS
000E7Dr 2  A9 AC                lda     #TOKEN_EQUAL
000E7Fr 2  20 rr rr             jsr     SYNCHR
000E82r 2               .ifndef CONFIG_SMALL
000E82r 2                       pha
000E82r 2               .endif
000E82r 2  A5 46                lda     VARPNT+1
000E84r 2  48                   pha
000E85r 2  A5 45                lda     VARPNT
000E87r 2  48                   pha
000E88r 2  A5 74                lda     TXTPTR+1
000E8Ar 2  48                   pha
000E8Br 2  A5 73                lda     TXTPTR
000E8Dr 2  48                   pha
000E8Er 2  20 rr rr             jsr     DATA
000E91r 2  4C rr rr             jmp     L3250
000E94r 2               FNC:
000E94r 2  A9 9F                lda     #TOKEN_FN
000E96r 2  20 rr rr             jsr     SYNCHR
000E99r 2  09 80                ora     #$80
000E9Br 2  85 0C                sta     SUBFLG
000E9Dr 2  20 rr rr             jsr     PTRGET3
000EA0r 2  85 4C                sta     FNCNAM
000EA2r 2  84 4D                sty     FNCNAM+1
000EA4r 2  4C rr rr             jmp     CHKNUM
000EA7r 2               L31F3:
000EA7r 2  20 rr rr             jsr     FNC
000EAAr 2  A5 4D                lda     FNCNAM+1
000EACr 2  48                   pha
000EADr 2  A5 4C                lda     FNCNAM
000EAFr 2  48                   pha
000EB0r 2  20 rr rr             jsr     PARCHK
000EB3r 2  20 rr rr             jsr     CHKNUM
000EB6r 2  68                   pla
000EB7r 2  85 4C                sta     FNCNAM
000EB9r 2  68                   pla
000EBAr 2  85 4D                sta     FNCNAM+1
000EBCr 2  A0 02                ldy     #$02
000EBEr 2               .ifndef CONFIG_2
000EBEr 2                       ldx     #ERR_UNDEFFN
000EBEr 2               .endif
000EBEr 2  B1 4C                lda     (FNCNAM),y
000EC0r 2               .ifndef CONFIG_2
000EC0r 2                       beq     L31AF
000EC0r 2               .endif
000EC0r 2  85 45                sta     VARPNT
000EC2r 2  AA                   tax
000EC3r 2  C8                   iny
000EC4r 2  B1 4C                lda     (FNCNAM),y
000EC6r 2               .ifdef CONFIG_2
000EC6r 2  F0 9A                beq     LD288
000EC8r 2               .endif
000EC8r 2  85 46                sta     VARPNT+1
000ECAr 2               .ifndef CONFIG_SMALL
000ECAr 2                       iny
000ECAr 2               .endif
000ECAr 2               L3219:
000ECAr 2  B1 45                lda     (VARPNT),y
000ECCr 2  48                   pha
000ECDr 2  88                   dey
000ECEr 2  10 FA                bpl     L3219
000ED0r 2  A4 46                ldy     VARPNT+1
000ED2r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000ED5r 2  A5 74                lda     TXTPTR+1
000ED7r 2  48                   pha
000ED8r 2  A5 73                lda     TXTPTR
000EDAr 2  48                   pha
000EDBr 2  B1 4C                lda     (FNCNAM),y
000EDDr 2  85 73                sta     TXTPTR
000EDFr 2  C8                   iny
000EE0r 2  B1 4C                lda     (FNCNAM),y
000EE2r 2  85 74                sta     TXTPTR+1
000EE4r 2  A5 46                lda     VARPNT+1
000EE6r 2  48                   pha
000EE7r 2  A5 45                lda     VARPNT
000EE9r 2  48                   pha
000EEAr 2  20 rr rr             jsr     FRMNUM
000EEDr 2  68                   pla
000EEEr 2  85 4C                sta     FNCNAM
000EF0r 2  68                   pla
000EF1r 2  85 4D                sta     FNCNAM+1
000EF3r 2  20 72 00             jsr     CHRGOT
000EF6r 2  F0 03                beq     L324A
000EF8r 2  4C rr rr             jmp     SYNERR
000EFBr 2               L324A:
000EFBr 2  68                   pla
000EFCr 2  85 73                sta     TXTPTR
000EFEr 2  68                   pla
000EFFr 2  85 74                sta     TXTPTR+1
000F01r 2               L3250:
000F01r 2  A0 00                ldy     #$00
000F03r 2  68                   pla
000F04r 2  91 4C                sta     (FNCNAM),y
000F06r 2  68                   pla
000F07r 2  C8                   iny
000F08r 2  91 4C                sta     (FNCNAM),y
000F0Ar 2  68                   pla
000F0Br 2  C8                   iny
000F0Cr 2  91 4C                sta     (FNCNAM),y
000F0Er 2  68                   pla
000F0Fr 2  C8                   iny
000F10r 2  91 4C                sta     (FNCNAM),y
000F12r 2               .ifndef CONFIG_SMALL
000F12r 2                       pla
000F12r 2                       iny
000F12r 2                       sta     (FNCNAM),y
000F12r 2               .endif
000F12r 2  60                   rts
000F13r 2               
000F13r 1               .include "string.s"
000F13r 2               .segment "CODE"
000F13r 2               ; ----------------------------------------------------------------------------
000F13r 2               ; "STR$" FUNCTION
000F13r 2               ; ----------------------------------------------------------------------------
000F13r 2               STR:
000F13r 2  20 rr rr             jsr     CHKNUM
000F16r 2  A0 00                ldy     #$00
000F18r 2  20 rr rr             jsr     FOUT1
000F1Br 2  68                   pla
000F1Cr 2  68                   pla
000F1Dr 2               LD353:
000F1Dr 2  A9 FF                lda     #<(STACK2-1)
000F1Fr 2  A0 00                ldy     #>(STACK2-1)
000F21r 2               .if STACK2 > $0100
000F21r 2                       bne     STRLIT
000F21r 2               .else
000F21r 2  F0 12                beq     STRLIT
000F23r 2               .endif
000F23r 2               
000F23r 2               ; ----------------------------------------------------------------------------
000F23r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F23r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000F23r 2               ; ----------------------------------------------------------------------------
000F23r 2               STRINI:
000F23r 2  A6 5E                ldx     FAC_LAST-1
000F25r 2  A4 5F                ldy     FAC_LAST
000F27r 2  86 4E                stx     DSCPTR
000F29r 2  84 4F                sty     DSCPTR+1
000F2Br 2               
000F2Br 2               ; ----------------------------------------------------------------------------
000F2Br 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F2Br 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000F2Br 2               ; ----------------------------------------------------------------------------
000F2Br 2               STRSPA:
000F2Br 2  20 rr rr             jsr     GETSPA
000F2Er 2  86 5D                stx     FAC+1
000F30r 2  84 5E                sty     FAC+2
000F32r 2  85 5C                sta     FAC
000F34r 2  60                   rts
000F35r 2               
000F35r 2               ; ----------------------------------------------------------------------------
000F35r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F35r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000F35r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F35r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F35r 2               ; ----------------------------------------------------------------------------
000F35r 2               STRLIT:
000F35r 2  A2 22                ldx     #$22
000F37r 2  86 06                stx     CHARAC
000F39r 2  86 07                stx     ENDCHR
000F3Br 2               
000F3Br 2               ; ----------------------------------------------------------------------------
000F3Br 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F3Br 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000F3Br 2               ;
000F3Br 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F3Br 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F3Br 2               ; ----------------------------------------------------------------------------
000F3Br 2               STRLT2:
000F3Br 2  85 68                sta     STRNG1
000F3Dr 2  84 69                sty     STRNG1+1
000F3Fr 2  85 5D                sta     FAC+1
000F41r 2  84 5E                sty     FAC+2
000F43r 2  A0 FF                ldy     #$FF
000F45r 2               L3298:
000F45r 2  C8                   iny
000F46r 2  B1 68                lda     (STRNG1),y
000F48r 2  F0 0C                beq     L32A9
000F4Ar 2  C5 06                cmp     CHARAC
000F4Cr 2  F0 04                beq     L32A5
000F4Er 2  C5 07                cmp     ENDCHR
000F50r 2  D0 F3                bne     L3298
000F52r 2               L32A5:
000F52r 2  C9 22                cmp     #$22
000F54r 2  F0 01                beq     L32AA
000F56r 2               L32A9:
000F56r 2  18                   clc
000F57r 2               L32AA:
000F57r 2  84 5C                sty     FAC
000F59r 2  98                   tya
000F5Ar 2  65 68                adc     STRNG1
000F5Cr 2  85 6A                sta     STRNG2
000F5Er 2  A6 69                ldx     STRNG1+1
000F60r 2  90 01                bcc     L32B6
000F62r 2  E8                   inx
000F63r 2               L32B6:
000F63r 2  86 6B                stx     STRNG2+1
000F65r 2  A5 69                lda     STRNG1+1
000F67r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000F67r 2  F0 04                beq     LD399
000F69r 2  C9 07                cmp     #>INPUTBUFFER
000F6Br 2               .elseif .def(AIM65)
000F6Br 2                       beq     LD399
000F6Br 2                       cmp     #$01
000F6Br 2               .endif
000F6Br 2  D0 0B                bne     PUTNEW
000F6Dr 2               LD399:
000F6Dr 2  98                   tya
000F6Er 2  20 rr rr             jsr     STRINI
000F71r 2  A6 68                ldx     STRNG1
000F73r 2  A4 69                ldy     STRNG1+1
000F75r 2  20 rr rr             jsr     MOVSTR
000F78r 2               
000F78r 2               ; ----------------------------------------------------------------------------
000F78r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
000F78r 2               ;
000F78r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
000F78r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
000F78r 2               ; ----------------------------------------------------------------------------
000F78r 2               PUTNEW:
000F78r 2  A6 15                ldx     TEMPPT
000F7Ar 2  E0 21                cpx     #TEMPST+9
000F7Cr 2  D0 05                bne     PUTEMP
000F7Er 2  A2 1C                ldx     #ERR_FRMCPX
000F80r 2               JERR:
000F80r 2  4C rr rr             jmp     ERROR
000F83r 2               PUTEMP:
000F83r 2  A5 5C                lda     FAC
000F85r 2  95 00                sta     0,x
000F87r 2  A5 5D                lda     FAC+1
000F89r 2  95 01                sta     1,x
000F8Br 2  A5 5E                lda     FAC+2
000F8Dr 2  95 02                sta     2,x
000F8Fr 2  A0 00                ldy     #$00
000F91r 2  86 5E                stx     FAC_LAST-1
000F93r 2  84 5F                sty     FAC_LAST
000F95r 2               .ifdef CONFIG_2
000F95r 2  84 69                sty     FACEXTENSION
000F97r 2               .endif
000F97r 2  88                   dey
000F98r 2  84 0A                sty     VALTYP
000F9Ar 2  86 16                stx     LASTPT
000F9Cr 2  E8                   inx
000F9Dr 2  E8                   inx
000F9Er 2  E8                   inx
000F9Fr 2  86 15                stx     TEMPPT
000FA1r 2  60                   rts
000FA2r 2               
000FA2r 2               ; ----------------------------------------------------------------------------
000FA2r 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
000FA2r 2               ; (A)=# BYTES SPACE TO MAKE
000FA2r 2               ;
000FA2r 2               ; RETURN WITH (A) SAME,
000FA2r 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
000FA2r 2               ; ----------------------------------------------------------------------------
000FA2r 2               GETSPA:
000FA2r 2  46 0B                lsr     DATAFLG
000FA4r 2               L32F1:
000FA4r 2  48                   pha
000FA5r 2  49 FF                eor     #$FF
000FA7r 2  38                   sec
000FA8r 2  65 31                adc     FRETOP
000FAAr 2  A4 32                ldy     FRETOP+1
000FACr 2  B0 01                bcs     L32FC
000FAEr 2  88                   dey
000FAFr 2               L32FC:
000FAFr 2  C4 30                cpy     STREND+1
000FB1r 2  90 11                bcc     L3311
000FB3r 2  D0 04                bne     L3306
000FB5r 2  C5 2F                cmp     STREND
000FB7r 2  90 0B                bcc     L3311
000FB9r 2               L3306:
000FB9r 2  85 31                sta     FRETOP
000FBBr 2  84 32                sty     FRETOP+1
000FBDr 2  85 33                sta     FRESPC
000FBFr 2  84 34                sty     FRESPC+1
000FC1r 2  AA                   tax
000FC2r 2  68                   pla
000FC3r 2  60                   rts
000FC4r 2               L3311:
000FC4r 2  A2 0C                ldx     #ERR_MEMFULL
000FC6r 2  A5 0B                lda     DATAFLG
000FC8r 2  30 B6                bmi     JERR
000FCAr 2  20 rr rr             jsr     GARBAG
000FCDr 2  A9 80                lda     #$80
000FCFr 2  85 0B                sta     DATAFLG
000FD1r 2  68                   pla
000FD2r 2  D0 D0                bne     L32F1
000FD4r 2               
000FD4r 2               ; ----------------------------------------------------------------------------
000FD4r 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
000FD4r 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
000FD4r 2               ; BELOW STRING AREA DOWN TO STREND.
000FD4r 2               ; ----------------------------------------------------------------------------
000FD4r 2               GARBAG:
000FD4r 2               
000FD4r 2               .ifdef CONST_MEMSIZ
000FD4r 2  A2 FF                ldx     #<CONST_MEMSIZ
000FD6r 2  A9 3F                lda     #>CONST_MEMSIZ
000FD8r 2               .else
000FD8r 2                       ldx     MEMSIZ
000FD8r 2                       lda     MEMSIZ+1
000FD8r 2               .endif
000FD8r 2               FINDHIGHESTSTRING:
000FD8r 2  86 31                stx     FRETOP
000FDAr 2  85 32                sta     FRETOP+1
000FDCr 2  A0 00                ldy     #$00
000FDEr 2  84 4D                sty     FNCNAM+1
000FE0r 2               .ifdef CONFIG_2
000FE0r 2  84 4C                sty     FNCNAM	; GC bugfix!
000FE2r 2               .endif
000FE2r 2  A5 2F                lda     STREND
000FE4r 2  A6 30                ldx     STREND+1
000FE6r 2  85 5A                sta     LOWTR
000FE8r 2  86 5B                stx     LOWTR+1
000FEAr 2  A9 18                lda     #TEMPST
000FECr 2  A2 00                ldx     #$00
000FEEr 2  85 21                sta     INDEX
000FF0r 2  86 22                stx     INDEX+1
000FF2r 2               L333D:
000FF2r 2  C5 15                cmp     TEMPPT
000FF4r 2  F0 05                beq     L3346
000FF6r 2  20 rr rr             jsr     CHECK_VARIABLE
000FF9r 2  F0 F7                beq     L333D
000FFBr 2               L3346:
000FFBr 2  A9 06                lda     #BYTES_PER_VARIABLE
000FFDr 2  85 50                sta     DSCLEN
000FFFr 2  A5 2B                lda     VARTAB
001001r 2  A6 2C                ldx     VARTAB+1
001003r 2  85 21                sta     INDEX
001005r 2  86 22                stx     INDEX+1
001007r 2               L3352:
001007r 2  E4 2E                cpx     ARYTAB+1
001009r 2  D0 04                bne     L335A
00100Br 2  C5 2D                cmp     ARYTAB
00100Dr 2  F0 05                beq     L335F
00100Fr 2               L335A:
00100Fr 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
001012r 2  F0 F3                beq     L3352
001014r 2               L335F:
001014r 2  85 54                sta     HIGHDS
001016r 2  86 55                stx     HIGHDS+1
001018r 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
00101Ar 2  85 50                sta     DSCLEN
00101Cr 2               L3367:
00101Cr 2  A5 54                lda     HIGHDS
00101Er 2  A6 55                ldx     HIGHDS+1
001020r 2               L336B:
001020r 2  E4 30                cpx     STREND+1
001022r 2  D0 07                bne     L3376
001024r 2  C5 2F                cmp     STREND
001026r 2  D0 03                bne     L3376
001028r 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
00102Br 2               L3376:
00102Br 2  85 21                sta     INDEX
00102Dr 2  86 22                stx     INDEX+1
00102Fr 2               .ifdef CONFIG_SMALL
00102Fr 2  A0 01                ldy     #$01
001031r 2               .else
001031r 2                       ldy     #$00
001031r 2                       lda     (INDEX),y
001031r 2                       tax
001031r 2                       iny
001031r 2               .endif
001031r 2  B1 21                lda     (INDEX),y
001033r 2  08                   php
001034r 2  C8                   iny
001035r 2  B1 21                lda     (INDEX),y
001037r 2  65 54                adc     HIGHDS
001039r 2  85 54                sta     HIGHDS
00103Br 2  C8                   iny
00103Cr 2  B1 21                lda     (INDEX),y
00103Er 2  65 55                adc     HIGHDS+1
001040r 2  85 55                sta     HIGHDS+1
001042r 2  28                   plp
001043r 2  10 D7                bpl     L3367
001045r 2               .ifndef CONFIG_SMALL
001045r 2                       txa
001045r 2                       bmi     L3367
001045r 2               .endif
001045r 2  C8                   iny
001046r 2  B1 21                lda     (INDEX),y
001048r 2               .ifdef CONFIG_CBM1_PATCHES
001048r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
001048r 2               .else
001048r 2                 .ifdef CONFIG_11
001048r 2  A0 00                ldy     #$00	; GC bugfix
00104Ar 2                 .endif
00104Ar 2  0A                   asl     a
00104Br 2  69 05                adc     #$05
00104Dr 2               .endif
00104Dr 2  65 21                adc     INDEX
00104Fr 2  85 21                sta     INDEX
001051r 2  90 02                bcc     L33A7
001053r 2  E6 22                inc     INDEX+1
001055r 2               L33A7:
001055r 2  A6 22                ldx     INDEX+1
001057r 2               L33A9:
001057r 2  E4 55                cpx     HIGHDS+1
001059r 2  D0 04                bne     L33B1
00105Br 2  C5 54                cmp     HIGHDS
00105Dr 2  F0 C1                beq     L336B
00105Fr 2               L33B1:
00105Fr 2  20 rr rr             jsr     CHECK_VARIABLE
001062r 2  F0 F3                beq     L33A9
001064r 2               
001064r 2               ; ----------------------------------------------------------------------------
001064r 2               ; PROCESS A SIMPLE VARIABLE
001064r 2               ; ----------------------------------------------------------------------------
001064r 2               CHECK_SIMPLE_VARIABLE:
001064r 2               .ifndef CONFIG_SMALL
001064r 2                       lda     (INDEX),y
001064r 2                       bmi     CHECK_BUMP
001064r 2               .endif
001064r 2  C8                   iny
001065r 2  B1 21                lda     (INDEX),y
001067r 2  10 30                bpl     CHECK_BUMP
001069r 2  C8                   iny
00106Ar 2               
00106Ar 2               ; ----------------------------------------------------------------------------
00106Ar 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00106Ar 2               ; ----------------------------------------------------------------------------
00106Ar 2               CHECK_VARIABLE:
00106Ar 2  B1 21                lda     (INDEX),y
00106Cr 2  F0 2B                beq     CHECK_BUMP
00106Er 2  C8                   iny
00106Fr 2  B1 21                lda     (INDEX),y
001071r 2  AA                   tax
001072r 2  C8                   iny
001073r 2  B1 21                lda     (INDEX),y
001075r 2  C5 32                cmp     FRETOP+1
001077r 2  90 06                bcc     L33D5
001079r 2  D0 1E                bne     CHECK_BUMP
00107Br 2  E4 31                cpx     FRETOP
00107Dr 2  B0 1A                bcs     CHECK_BUMP
00107Fr 2               L33D5:
00107Fr 2  C5 5B                cmp     LOWTR+1
001081r 2  90 16                bcc     CHECK_BUMP
001083r 2  D0 04                bne     L33DF
001085r 2  E4 5A                cpx     LOWTR
001087r 2  90 10                bcc     CHECK_BUMP
001089r 2               L33DF:
001089r 2  86 5A                stx     LOWTR
00108Br 2  85 5B                sta     LOWTR+1
00108Dr 2  A5 21                lda     INDEX
00108Fr 2  A6 22                ldx     INDEX+1
001091r 2  85 4C                sta     FNCNAM
001093r 2  86 4D                stx     FNCNAM+1
001095r 2  A5 50                lda     DSCLEN
001097r 2  85 52                sta     Z52
001099r 2               
001099r 2               ; ----------------------------------------------------------------------------
001099r 2               ; ADD (DSCLEN) TO PNTR IN INDEX
001099r 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
001099r 2               ; ----------------------------------------------------------------------------
001099r 2               CHECK_BUMP:
001099r 2  A5 50                lda     DSCLEN
00109Br 2  18                   clc
00109Cr 2  65 21                adc     INDEX
00109Er 2  85 21                sta     INDEX
0010A0r 2  90 02                bcc     L33FA
0010A2r 2  E6 22                inc     INDEX+1
0010A4r 2               L33FA:
0010A4r 2  A6 22                ldx     INDEX+1
0010A6r 2  A0 00                ldy     #$00
0010A8r 2  60                   rts
0010A9r 2               
0010A9r 2               ; ----------------------------------------------------------------------------
0010A9r 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
0010A9r 2               ; TO TOP AND GO BACK FOR ANOTHER
0010A9r 2               ; ----------------------------------------------------------------------------
0010A9r 2               MOVE_HIGHEST_STRING_TO_TOP:
0010A9r 2               .ifdef CONFIG_2
0010A9r 2  A5 4D                lda     FNCNAM+1	; GC bugfix
0010ABr 2  05 4C                ora     FNCNAM
0010ADr 2               .else
0010ADr 2                       ldx     FNCNAM+1
0010ADr 2               .endif
0010ADr 2  F0 F5                beq     L33FA
0010AFr 2  A5 52                lda     Z52
0010B1r 2               .ifndef CONFIG_10A
0010B1r 2                       sbc     #$03
0010B1r 2               .else
0010B1r 2  29 04                and     #$04
0010B3r 2               .endif
0010B3r 2  4A                   lsr     a
0010B4r 2  A8                   tay
0010B5r 2  85 52                sta     Z52
0010B7r 2  B1 4C                lda     (FNCNAM),y
0010B9r 2  65 5A                adc     LOWTR
0010BBr 2  85 56                sta     HIGHTR
0010BDr 2  A5 5B                lda     LOWTR+1
0010BFr 2  69 00                adc     #$00
0010C1r 2  85 57                sta     HIGHTR+1
0010C3r 2  A5 31                lda     FRETOP
0010C5r 2  A6 32                ldx     FRETOP+1
0010C7r 2  85 54                sta     HIGHDS
0010C9r 2  86 55                stx     HIGHDS+1
0010CBr 2  20 rr rr             jsr     BLTU2
0010CEr 2  A4 52                ldy     Z52
0010D0r 2  C8                   iny
0010D1r 2  A5 54                lda     HIGHDS
0010D3r 2  91 4C                sta     (FNCNAM),y
0010D5r 2  AA                   tax
0010D6r 2  E6 55                inc     HIGHDS+1
0010D8r 2  A5 55                lda     HIGHDS+1
0010DAr 2  C8                   iny
0010DBr 2  91 4C                sta     (FNCNAM),y
0010DDr 2  4C rr rr             jmp     FINDHIGHESTSTRING
0010E0r 2               
0010E0r 2               ; ----------------------------------------------------------------------------
0010E0r 2               ; CONCATENATE TWO STRINGS
0010E0r 2               ; ----------------------------------------------------------------------------
0010E0r 2               CAT:
0010E0r 2  A5 5F                lda     FAC_LAST
0010E2r 2  48                   pha
0010E3r 2  A5 5E                lda     FAC_LAST-1
0010E5r 2  48                   pha
0010E6r 2  20 rr rr             jsr     FRM_ELEMENT
0010E9r 2  20 rr rr             jsr     CHKSTR
0010ECr 2  68                   pla
0010EDr 2  85 68                sta     STRNG1
0010EFr 2  68                   pla
0010F0r 2  85 69                sta     STRNG1+1
0010F2r 2  A0 00                ldy     #$00
0010F4r 2  B1 68                lda     (STRNG1),y
0010F6r 2  18                   clc
0010F7r 2  71 5E                adc     (FAC_LAST-1),y
0010F9r 2  90 05                bcc     L3454
0010FBr 2  A2 1A                ldx     #ERR_STRLONG
0010FDr 2  4C rr rr             jmp     ERROR
001100r 2               L3454:
001100r 2  20 rr rr             jsr     STRINI
001103r 2  20 rr rr             jsr     MOVINS
001106r 2  A5 4E                lda     DSCPTR
001108r 2  A4 4F                ldy     DSCPTR+1
00110Ar 2  20 rr rr             jsr     FRETMP
00110Dr 2  20 rr rr             jsr     MOVSTR1
001110r 2  A5 68                lda     STRNG1
001112r 2  A4 69                ldy     STRNG1+1
001114r 2  20 rr rr             jsr     FRETMP
001117r 2  20 rr rr             jsr     PUTNEW
00111Ar 2  4C rr rr             jmp     FRMEVL2
00111Dr 2               
00111Dr 2               ; ----------------------------------------------------------------------------
00111Dr 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
00111Dr 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
00111Dr 2               ; ----------------------------------------------------------------------------
00111Dr 2               MOVINS:
00111Dr 2  A0 00                ldy     #$00
00111Fr 2  B1 68                lda     (STRNG1),y
001121r 2  48                   pha
001122r 2  C8                   iny
001123r 2  B1 68                lda     (STRNG1),y
001125r 2  AA                   tax
001126r 2  C8                   iny
001127r 2  B1 68                lda     (STRNG1),y
001129r 2  A8                   tay
00112Ar 2  68                   pla
00112Br 2               
00112Br 2               ; ----------------------------------------------------------------------------
00112Br 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00112Br 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00112Br 2               ; ----------------------------------------------------------------------------
00112Br 2               MOVSTR:
00112Br 2  86 21                stx     INDEX
00112Dr 2  84 22                sty     INDEX+1
00112Fr 2               MOVSTR1:
00112Fr 2  A8                   tay
001130r 2  F0 0A                beq     L3490
001132r 2  48                   pha
001133r 2               L3487:
001133r 2  88                   dey
001134r 2  B1 21                lda     (INDEX),y
001136r 2  91 33                sta     (FRESPC),y
001138r 2  98                   tya
001139r 2  D0 F8                bne     L3487
00113Br 2  68                   pla
00113Cr 2               L3490:
00113Cr 2  18                   clc
00113Dr 2  65 33                adc     FRESPC
00113Fr 2  85 33                sta     FRESPC
001141r 2  90 02                bcc     L3499
001143r 2  E6 34                inc     FRESPC+1
001145r 2               L3499:
001145r 2  60                   rts
001146r 2               
001146r 2               ; ----------------------------------------------------------------------------
001146r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
001146r 2               ; ----------------------------------------------------------------------------
001146r 2               FRESTR:
001146r 2  20 rr rr             jsr     CHKSTR
001149r 2               
001149r 2               ; ----------------------------------------------------------------------------
001149r 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
001149r 2               ; A TEMPORARY STRING, RELEASE IT.
001149r 2               ; ----------------------------------------------------------------------------
001149r 2               FREFAC:
001149r 2  A5 5E                lda     FAC_LAST-1
00114Br 2  A4 5F                ldy     FAC_LAST
00114Dr 2               
00114Dr 2               ; ----------------------------------------------------------------------------
00114Dr 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
00114Dr 2               ; A TEMPORARY STRING, RELEASE IT.
00114Dr 2               ; ----------------------------------------------------------------------------
00114Dr 2               FRETMP:
00114Dr 2  85 21                sta     INDEX
00114Fr 2  84 22                sty     INDEX+1
001151r 2  20 rr rr             jsr     FRETMS
001154r 2  08                   php
001155r 2  A0 00                ldy     #$00
001157r 2  B1 21                lda     (INDEX),y
001159r 2  48                   pha
00115Ar 2  C8                   iny
00115Br 2  B1 21                lda     (INDEX),y
00115Dr 2  AA                   tax
00115Er 2  C8                   iny
00115Fr 2  B1 21                lda     (INDEX),y
001161r 2  A8                   tay
001162r 2  68                   pla
001163r 2  28                   plp
001164r 2  D0 13                bne     L34CD
001166r 2  C4 32                cpy     FRETOP+1
001168r 2  D0 0F                bne     L34CD
00116Ar 2  E4 31                cpx     FRETOP
00116Cr 2  D0 0B                bne     L34CD
00116Er 2  48                   pha
00116Fr 2  18                   clc
001170r 2  65 31                adc     FRETOP
001172r 2  85 31                sta     FRETOP
001174r 2  90 02                bcc     L34CC
001176r 2  E6 32                inc     FRETOP+1
001178r 2               L34CC:
001178r 2  68                   pla
001179r 2               L34CD:
001179r 2  86 21                stx     INDEX
00117Br 2  84 22                sty     INDEX+1
00117Dr 2  60                   rts
00117Er 2               
00117Er 2               ; ----------------------------------------------------------------------------
00117Er 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00117Er 2               ; ----------------------------------------------------------------------------
00117Er 2               FRETMS:
00117Er 2               .ifdef KBD
00117Er 2  C0 00                cpy     #$00
001180r 2               .else
001180r 2                       cpy     LASTPT+1
001180r 2               .endif
001180r 2  D0 0C                bne     L34E2
001182r 2  C5 16                cmp     LASTPT
001184r 2  D0 08                bne     L34E2
001186r 2  85 15                sta     TEMPPT
001188r 2  E9 03                sbc     #$03
00118Ar 2  85 16                sta     LASTPT
00118Cr 2  A0 00                ldy     #$00
00118Er 2               L34E2:
00118Er 2  60                   rts
00118Fr 2               
00118Fr 2               ; ----------------------------------------------------------------------------
00118Fr 2               ; "CHR$" FUNCTION
00118Fr 2               ; ----------------------------------------------------------------------------
00118Fr 2               CHRSTR:
00118Fr 2  20 rr rr             jsr     CONINT
001192r 2  8A                   txa
001193r 2  48                   pha
001194r 2  A9 01                lda     #$01
001196r 2  20 rr rr             jsr     STRSPA
001199r 2  68                   pla
00119Ar 2  A0 00                ldy     #$00
00119Cr 2  91 5D                sta     (FAC+1),y
00119Er 2  68                   pla
00119Fr 2  68                   pla
0011A0r 2  4C rr rr             jmp     PUTNEW
0011A3r 2               
0011A3r 2               ; ----------------------------------------------------------------------------
0011A3r 2               ; "LEFT$" FUNCTION
0011A3r 2               ; ----------------------------------------------------------------------------
0011A3r 2               LEFTSTR:
0011A3r 2  20 rr rr             jsr     SUBSTRING_SETUP
0011A6r 2  D1 4E                cmp     (DSCPTR),y
0011A8r 2  98                   tya
0011A9r 2               SUBSTRING1:
0011A9r 2  90 04                bcc     L3503
0011ABr 2  B1 4E                lda     (DSCPTR),y
0011ADr 2  AA                   tax
0011AEr 2  98                   tya
0011AFr 2               L3503:
0011AFr 2  48                   pha
0011B0r 2               SUBSTRING2:
0011B0r 2  8A                   txa
0011B1r 2               SUBSTRING3:
0011B1r 2  48                   pha
0011B2r 2  20 rr rr             jsr     STRSPA
0011B5r 2  A5 4E                lda     DSCPTR
0011B7r 2  A4 4F                ldy     DSCPTR+1
0011B9r 2  20 rr rr             jsr     FRETMP
0011BCr 2  68                   pla
0011BDr 2  A8                   tay
0011BEr 2  68                   pla
0011BFr 2  18                   clc
0011C0r 2  65 21                adc     INDEX
0011C2r 2  85 21                sta     INDEX
0011C4r 2  90 02                bcc     L351C
0011C6r 2  E6 22                inc     INDEX+1
0011C8r 2               L351C:
0011C8r 2  98                   tya
0011C9r 2  20 rr rr             jsr     MOVSTR1
0011CCr 2  4C rr rr             jmp     PUTNEW
0011CFr 2               
0011CFr 2               ; ----------------------------------------------------------------------------
0011CFr 2               ; "RIGHT$" FUNCTION
0011CFr 2               ; ----------------------------------------------------------------------------
0011CFr 2               RIGHTSTR:
0011CFr 2  20 rr rr             jsr     SUBSTRING_SETUP
0011D2r 2  18                   clc
0011D3r 2  F1 4E                sbc     (DSCPTR),y
0011D5r 2  49 FF                eor     #$FF
0011D7r 2  4C rr rr             jmp     SUBSTRING1
0011DAr 2               
0011DAr 2               ; ----------------------------------------------------------------------------
0011DAr 2               ; "MID$" FUNCTION
0011DAr 2               ; ----------------------------------------------------------------------------
0011DAr 2               MIDSTR:
0011DAr 2  A9 FF                lda     #$FF
0011DCr 2  85 5F                sta     FAC_LAST
0011DEr 2  20 72 00             jsr     CHRGOT
0011E1r 2  C9 29                cmp     #$29
0011E3r 2  F0 06                beq     L353F
0011E5r 2  20 rr rr             jsr     CHKCOM
0011E8r 2  20 rr rr             jsr     GETBYT
0011EBr 2               L353F:
0011EBr 2  20 rr rr             jsr     SUBSTRING_SETUP
0011EEr 2               .ifdef CONFIG_2
0011EEr 2  F0 4B                beq     GOIQ
0011F0r 2               .endif
0011F0r 2  CA                   dex
0011F1r 2  8A                   txa
0011F2r 2  48                   pha
0011F3r 2  18                   clc
0011F4r 2  A2 00                ldx     #$00
0011F6r 2  F1 4E                sbc     (DSCPTR),y
0011F8r 2  B0 B6                bcs     SUBSTRING2
0011FAr 2  49 FF                eor     #$FF
0011FCr 2  C5 5F                cmp     FAC_LAST
0011FEr 2  90 B1                bcc     SUBSTRING3
001200r 2  A5 5F                lda     FAC_LAST
001202r 2  B0 AD                bcs     SUBSTRING3
001204r 2               
001204r 2               ; ----------------------------------------------------------------------------
001204r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
001204r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
001204r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
001204r 2               ; ----------------------------------------------------------------------------
001204r 2               SUBSTRING_SETUP:
001204r 2  20 rr rr             jsr     CHKCLS
001207r 2  68                   pla
001208r 2               .ifndef CONFIG_11
001208r 2                       sta     JMPADRS+1
001208r 2                       pla
001208r 2                       sta     JMPADRS+2
001208r 2               .else
001208r 2  A8                   tay
001209r 2  68                   pla
00120Ar 2  85 52                sta     Z52
00120Cr 2               .endif
00120Cr 2  68                   pla
00120Dr 2  68                   pla
00120Er 2  68                   pla
00120Fr 2  AA                   tax
001210r 2  68                   pla
001211r 2  85 4E                sta     DSCPTR
001213r 2  68                   pla
001214r 2  85 4F                sta     DSCPTR+1
001216r 2               .ifdef CONFIG_11
001216r 2  A5 52                lda     Z52
001218r 2  48                   pha
001219r 2  98                   tya
00121Ar 2  48                   pha
00121Br 2               .endif
00121Br 2  A0 00                ldy     #$00
00121Dr 2  8A                   txa
00121Er 2               .ifndef CONFIG_2
00121Er 2                       beq     GOIQ
00121Er 2               .endif
00121Er 2               .ifndef CONFIG_11
00121Er 2                       inc     JMPADRS+1
00121Er 2                       jmp     (JMPADRS+1)
00121Er 2               .else
00121Er 2  60                   rts
00121Fr 2               .endif
00121Fr 2               
00121Fr 2               ; ----------------------------------------------------------------------------
00121Fr 2               ; "LEN" FUNCTION
00121Fr 2               ; ----------------------------------------------------------------------------
00121Fr 2               LEN:
00121Fr 2  20 rr rr             jsr     GETSTR
001222r 2               SNGFLT1:
001222r 2  4C rr rr             jmp     SNGFLT
001225r 2               
001225r 2               ; ----------------------------------------------------------------------------
001225r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
001225r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
001225r 2               ; ----------------------------------------------------------------------------
001225r 2               GETSTR:
001225r 2  20 rr rr             jsr     FRESTR
001228r 2  A2 00                ldx     #$00
00122Ar 2  86 0A                stx     VALTYP
00122Cr 2  A8                   tay
00122Dr 2  60                   rts
00122Er 2               
00122Er 2               ; ----------------------------------------------------------------------------
00122Er 2               ; "ASC" FUNCTION
00122Er 2               ; ----------------------------------------------------------------------------
00122Er 2               ASC:
00122Er 2  20 rr rr             jsr     GETSTR
001231r 2  F0 08                beq     GOIQ
001233r 2  A0 00                ldy     #$00
001235r 2  B1 21                lda     (INDEX),y
001237r 2  A8                   tay
001238r 2               .ifndef CONFIG_11A
001238r 2                       jmp     SNGFLT1
001238r 2               .else
001238r 2  4C rr rr             jmp     SNGFLT
00123Br 2               .endif
00123Br 2               ; ----------------------------------------------------------------------------
00123Br 2               GOIQ:
00123Br 2  4C rr rr             jmp     IQERR
00123Er 2               
00123Er 2               ; ----------------------------------------------------------------------------
00123Er 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
00123Er 2               ; TO SINGLE BYTE IN X-REG
00123Er 2               ; ----------------------------------------------------------------------------
00123Er 2               GTBYTC:
00123Er 2  20 6C 00             jsr     CHRGET
001241r 2               
001241r 2               ; ----------------------------------------------------------------------------
001241r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
001241r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
001241r 2               ; ----------------------------------------------------------------------------
001241r 2               GETBYT:
001241r 2  20 rr rr             jsr     FRMNUM
001244r 2               
001244r 2               ; ----------------------------------------------------------------------------
001244r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
001244r 2               ; ----------------------------------------------------------------------------
001244r 2               CONINT:
001244r 2  20 rr rr             jsr     MKINT
001247r 2  A6 5E                ldx     FAC_LAST-1
001249r 2  D0 F0                bne     GOIQ
00124Br 2  A6 5F                ldx     FAC_LAST
00124Dr 2  4C 72 00             jmp     CHRGOT
001250r 2               
001250r 2               ; ----------------------------------------------------------------------------
001250r 2               ; "VAL" FUNCTION
001250r 2               ; ----------------------------------------------------------------------------
001250r 2               VAL:
001250r 2  20 rr rr             jsr     GETSTR
001253r 2  D0 03                bne     L35AC
001255r 2  4C rr rr             jmp     ZERO_FAC
001258r 2               L35AC:
001258r 2  A6 73                ldx     TXTPTR
00125Ar 2  A4 74                ldy     TXTPTR+1
00125Cr 2  86 6A                stx     STRNG2
00125Er 2  84 6B                sty     STRNG2+1
001260r 2  A6 21                ldx     INDEX
001262r 2  86 73                stx     TXTPTR
001264r 2  18                   clc
001265r 2  65 21                adc     INDEX
001267r 2  85 23                sta     DEST
001269r 2  A6 22                ldx     INDEX+1
00126Br 2  86 74                stx     TXTPTR+1
00126Dr 2  90 01                bcc     L35C4
00126Fr 2  E8                   inx
001270r 2               L35C4:
001270r 2  86 24                stx     DEST+1
001272r 2  A0 00                ldy     #$00
001274r 2  B1 23                lda     (DEST),y
001276r 2  48                   pha
001277r 2  A9 00                lda     #$00
001279r 2  91 23                sta     (DEST),y
00127Br 2  20 72 00             jsr     CHRGOT
00127Er 2  20 rr rr             jsr     FIN
001281r 2  68                   pla
001282r 2  A0 00                ldy     #$00
001284r 2  91 23                sta     (DEST),y
001286r 2               
001286r 2               ; ----------------------------------------------------------------------------
001286r 2               ; COPY STRNG2 INTO TXTPTR
001286r 2               ; ----------------------------------------------------------------------------
001286r 2               POINT:
001286r 2  A6 6A                ldx     STRNG2
001288r 2  A4 6B                ldy     STRNG2+1
00128Ar 2  86 73                stx     TXTPTR
00128Cr 2  84 74                sty     TXTPTR+1
00128Er 2  60                   rts
00128Fr 2               
00128Fr 2               
00128Fr 1               .include "misc3.s"
00128Fr 2               ; KBD specific patches
00128Fr 2               
00128Fr 2               .segment "CODE"
00128Fr 2               
00128Fr 2               .ifdef KBD
00128Fr 2               VARTAB_MINUS_2_TO_AY:
00128Fr 2  A5 2B                lda     VARTAB
001291r 2  38                   sec
001292r 2  E9 02                sbc     #$02
001294r 2  A4 2C                ldy     VARTAB+1
001296r 2  B0 01                bcs     LF42C
001298r 2  88                   dey
001299r 2               LF42C:
001299r 2  60                   rts
00129Ar 2               
00129Ar 2               ; ----------------------------------------------------------------------------
00129Ar 2               GET_UPPER:
00129Ar 2  BD 00 07             lda     INPUTBUFFERX,x
00129Dr 2               LF430:
00129Dr 2  C9 61                cmp     #'a'
00129Fr 2  90 06                bcc     LF43A
0012A1r 2  C9 7B                cmp     #'z'+1
0012A3r 2  B0 02                bcs     LF43A
0012A5r 2               LF438:
0012A5r 2  E9 1F                sbc     #$1F
0012A7r 2               LF43A:
0012A7r 2  60                   rts
0012A8r 2               
0012A8r 2               ; ----------------------------------------------------------------------------
0012A8r 2               GETLN:
0012A8r 2  A2 5D                ldx     #$5D
0012AAr 2               LF43D:
0012AAr 2  8A                   txa
0012ABr 2  29 7F                and     #$7F
0012ADr 2  CD 40 03             cmp     $0340
0012B0r 2  F0 08                beq     LF44D
0012B2r 2  8D 40 03             sta     $0340
0012B5r 2  A9 03                lda     #$03
0012B7r 2  20 48 DE             jsr     LDE48
0012BAr 2               LF44D:
0012BAr 2  20 7F DE             jsr     LDE7F
0012BDr 2  D0 04                bne     RTS4
0012BFr 2  E0 80                cpx     #$80
0012C1r 2  90 F7                bcc     LF44D
0012C3r 2               RTS4:
0012C3r 2  60                   rts
0012C4r 2               
0012C4r 2               ; ----------------------------------------------------------------------------
0012C4r 2               LF457:
0012C4r 2  A5 29                lda     TXTTAB
0012C6r 2  A6 2A                ldx     TXTTAB+1
0012C8r 2               LF45B:
0012C8r 2  85 94                sta     JMPADRS+1
0012CAr 2  86 95                stx     JMPADRS+2
0012CCr 2  A0 01                ldy     #$01
0012CEr 2  B1 94                lda     (JMPADRS+1),y
0012D0r 2  F0 D3                beq     LF438
0012D2r 2  C8                   iny
0012D3r 2  C8                   iny
0012D4r 2  B1 94                lda     (JMPADRS+1),y
0012D6r 2  88                   dey
0012D7r 2  C5 14                cmp     LINNUM+1
0012D9r 2  D0 04                bne     LF472
0012DBr 2  B1 94                lda     (JMPADRS+1),y
0012DDr 2  C5 13                cmp     LINNUM
0012DFr 2               LF472:
0012DFr 2  B0 C6                bcs     LF43A
0012E1r 2  88                   dey
0012E2r 2  B1 94                lda     (JMPADRS+1),y
0012E4r 2  AA                   tax
0012E5r 2  88                   dey
0012E6r 2  B1 94                lda     (JMPADRS+1),y
0012E8r 2  90 DE                bcc     LF45B
0012EAr 2               LF47D:
0012EAr 2  6C 94 00             jmp     (JMPADRS+1)
0012EDr 2               .endif
0012EDr 2               
0012EDr 1               .include "poke.s"
0012EDr 2               .segment "CODE"
0012EDr 2               
0012EDr 2               .ifndef CONFIG_NO_POKE
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               ; EVALUATE "EXP1,EXP2"
0012EDr 2               ;
0012EDr 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
0012EDr 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               GTNUM:
0012EDr 2                       jsr     FRMNUM
0012EDr 2                       jsr     GETADR
0012EDr 2               
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               ; EVALUATE ",EXPRESSION"
0012EDr 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               COMBYTE:
0012EDr 2                       jsr     CHKCOM
0012EDr 2                       jmp     GETBYT
0012EDr 2               
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               GETADR:
0012EDr 2                       lda     FACSIGN
0012EDr 2                 .ifdef APPLE
0012EDr 2                       nop ; PATCH
0012EDr 2                       nop
0012EDr 2                 .else
0012EDr 2                       bmi     GOIQ
0012EDr 2                 .endif
0012EDr 2                       lda     FAC
0012EDr 2                       cmp     #$91
0012EDr 2                       bcs     GOIQ
0012EDr 2                       jsr     QINT
0012EDr 2                       lda     FAC_LAST-1
0012EDr 2                       ldy     FAC_LAST
0012EDr 2                       sty     LINNUM
0012EDr 2                       sta     LINNUM+1
0012EDr 2                       rts
0012EDr 2               
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               ; "PEEK" FUNCTION
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               PEEK:
0012EDr 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0012EDr 2                       lda     LINNUM+1
0012EDr 2                       pha
0012EDr 2                       lda     LINNUM
0012EDr 2                       pha
0012EDr 2               .endif
0012EDr 2                       jsr     GETADR
0012EDr 2                       ldy     #$00
0012EDr 2               .ifdef CBM1
0012EDr 2               ; disallow PEEK between $C000 and $DFFF
0012EDr 2                       cmp     #$C0
0012EDr 2                       bcc     LD6F3
0012EDr 2                       cmp     #$E1
0012EDr 2                       bcc     LD6F6
0012EDr 2               LD6F3:
0012EDr 2               .endif
0012EDr 2               .ifdef CBM2
0012EDr 2               		nop ; patch that disables the compares above
0012EDr 2               		nop
0012EDr 2               		nop
0012EDr 2               		nop
0012EDr 2               		nop
0012EDr 2               		nop
0012EDr 2               		nop
0012EDr 2               		nop
0012EDr 2               .endif
0012EDr 2                       lda     (LINNUM),y
0012EDr 2                       tay
0012EDr 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0012EDr 2                       pla
0012EDr 2                       sta     LINNUM
0012EDr 2                       pla
0012EDr 2                       sta     LINNUM+1
0012EDr 2               .endif
0012EDr 2               LD6F6:
0012EDr 2                       jmp     SNGFLT
0012EDr 2               
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               ; "POKE" STATEMENT
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               POKE:
0012EDr 2                       jsr     GTNUM
0012EDr 2                       txa
0012EDr 2                       ldy     #$00
0012EDr 2                       sta     (LINNUM),y
0012EDr 2                       rts
0012EDr 2               
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               ; "WAIT" STATEMENT
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               WAIT:
0012EDr 2                       jsr     GTNUM
0012EDr 2                       stx     FORPNT
0012EDr 2                       ldx     #$00
0012EDr 2                       jsr     CHRGOT
0012EDr 2               .ifdef CONFIG_EASTER_EGG
0012EDr 2                       beq     EASTER_EGG
0012EDr 2               .else
0012EDr 2                       beq     L3628
0012EDr 2               .endif
0012EDr 2                       jsr     COMBYTE
0012EDr 2               L3628:
0012EDr 2                       stx     FORPNT+1
0012EDr 2                       ldy     #$00
0012EDr 2               L362C:
0012EDr 2                       lda     (LINNUM),y
0012EDr 2                       eor     FORPNT+1
0012EDr 2                       and     FORPNT
0012EDr 2                       beq     L362C
0012EDr 2               RTS3:
0012EDr 2                       rts
0012EDr 2               .endif
0012EDr 2               
0012EDr 1               .include "float.s"
0012EDr 2               .segment "CODE"
0012EDr 2               
0012EDr 2               TEMP1X = TEMP1+(5-BYTES_FP)
0012EDr 2               
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               ; ADD 0.5 TO FAC
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               FADDH:
0012EDr 2  A9 rr                lda     #<CON_HALF
0012EFr 2  A0 rr                ldy     #>CON_HALF
0012F1r 2  4C rr rr             jmp     FADD
0012F4r 2               
0012F4r 2               ; ----------------------------------------------------------------------------
0012F4r 2               ; FAC = (Y,A) - FAC
0012F4r 2               ; ----------------------------------------------------------------------------
0012F4r 2               FSUB:
0012F4r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012F7r 2               
0012F7r 2               ; ----------------------------------------------------------------------------
0012F7r 2               ; FAC = ARG - FAC
0012F7r 2               ; ----------------------------------------------------------------------------
0012F7r 2               FSUBT:
0012F7r 2  A5 60                lda     FACSIGN
0012F9r 2  49 FF                eor     #$FF
0012FBr 2  85 60                sta     FACSIGN
0012FDr 2  45 67                eor     ARGSIGN
0012FFr 2  85 68                sta     SGNCPR
001301r 2  A5 5C                lda     FAC
001303r 2  4C rr rr             jmp     FADDT
001306r 2               
001306r 2               ; ----------------------------------------------------------------------------
001306r 2               ; Commodore BASIC V2 Easter Egg
001306r 2               ; ----------------------------------------------------------------------------
001306r 2               .ifdef CONFIG_EASTER_EGG
001306r 2               EASTER_EGG:
001306r 2                       lda     LINNUM
001306r 2                       cmp     #<6502
001306r 2                       bne     L3628
001306r 2                       lda     LINNUM+1
001306r 2                       sbc     #>6502
001306r 2                       bne     L3628
001306r 2                       sta     LINNUM
001306r 2                       tay
001306r 2                       lda     #$80
001306r 2                       sta     LINNUM+1
001306r 2               LD758:
001306r 2                       ldx     #$0A
001306r 2               LD75A:
001306r 2                       lda     MICROSOFT-1,x
001306r 2                       and     #$3F
001306r 2                       sta     (LINNUM),y
001306r 2                       iny
001306r 2                       bne     LD766
001306r 2                       inc     LINNUM+1
001306r 2               LD766:
001306r 2                       dex
001306r 2                       bne     LD75A
001306r 2                       dec     FORPNT
001306r 2                       bne     LD758
001306r 2                       rts
001306r 2               .endif
001306r 2               
001306r 2               ; ----------------------------------------------------------------------------
001306r 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
001306r 2               ; ----------------------------------------------------------------------------
001306r 2               FADD1:
001306r 2  20 rr rr             jsr     SHIFT_RIGHT
001309r 2  90 3C                bcc     FADD3
00130Br 2               
00130Br 2               ; ----------------------------------------------------------------------------
00130Br 2               ; FAC = (Y,A) + FAC
00130Br 2               ; ----------------------------------------------------------------------------
00130Br 2               FADD:
00130Br 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00130Er 2               
00130Er 2               ; ----------------------------------------------------------------------------
00130Er 2               ; FAC = ARG + FAC
00130Er 2               ; ----------------------------------------------------------------------------
00130Er 2               FADDT:
00130Er 2  D0 03                bne     L365B
001310r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
001313r 2               L365B:
001313r 2  A6 69                ldx     FACEXTENSION
001315r 2  86 53                stx     ARGEXTENSION
001317r 2  A2 63                ldx     #ARG
001319r 2  A5 63                lda     ARG
00131Br 2               FADD2:
00131Br 2  A8                   tay
00131Cr 2               .ifdef KBD
00131Cr 2  F0 A5                beq     RTS4
00131Er 2               .else
00131Er 2                       beq     RTS3
00131Er 2               .endif
00131Er 2  38                   sec
00131Fr 2  E5 5C                sbc     FAC
001321r 2  F0 24                beq     FADD3
001323r 2  90 12                bcc     L367F
001325r 2  84 5C                sty     FAC
001327r 2  A4 67                ldy     ARGSIGN
001329r 2  84 60                sty     FACSIGN
00132Br 2  49 FF                eor     #$FF
00132Dr 2  69 00                adc     #$00
00132Fr 2  A0 00                ldy     #$00
001331r 2  84 53                sty     ARGEXTENSION
001333r 2  A2 5C                ldx     #FAC
001335r 2  D0 04                bne     L3683
001337r 2               L367F:
001337r 2  A0 00                ldy     #$00
001339r 2  84 69                sty     FACEXTENSION
00133Br 2               L3683:
00133Br 2  C9 F9                cmp     #$F9
00133Dr 2  30 C7                bmi     FADD1
00133Fr 2  A8                   tay
001340r 2  A5 69                lda     FACEXTENSION
001342r 2  56 01                lsr     1,x
001344r 2  20 rr rr             jsr     SHIFT_RIGHT4
001347r 2               FADD3:
001347r 2  24 68                bit     SGNCPR
001349r 2  10 4C                bpl     FADD4
00134Br 2  A0 5C                ldy     #FAC
00134Dr 2  E0 63                cpx     #ARG
00134Fr 2  F0 02                beq     L369B
001351r 2  A0 63                ldy     #ARG
001353r 2               L369B:
001353r 2  38                   sec
001354r 2  49 FF                eor     #$FF
001356r 2  65 53                adc     ARGEXTENSION
001358r 2  85 69                sta     FACEXTENSION
00135Ar 2               .ifndef CONFIG_SMALL
00135Ar 2                       lda     4,y
00135Ar 2                       sbc     4,x
00135Ar 2                       sta     FAC+4
00135Ar 2               .endif
00135Ar 2  B9 03 00             lda     3,y
00135Dr 2  F5 03                sbc     3,x
00135Fr 2  85 5F                sta     FAC+3
001361r 2  B9 02 00             lda     2,y
001364r 2  F5 02                sbc     2,x
001366r 2  85 5E                sta     FAC+2
001368r 2  B9 01 00             lda     1,y
00136Br 2  F5 01                sbc     1,x
00136Dr 2  85 5D                sta     FAC+1
00136Fr 2               
00136Fr 2               ; ----------------------------------------------------------------------------
00136Fr 2               ; NORMALIZE VALUE IN FAC
00136Fr 2               ; ----------------------------------------------------------------------------
00136Fr 2               NORMALIZE_FAC1:
00136Fr 2  B0 03                bcs     NORMALIZE_FAC2
001371r 2  20 rr rr             jsr     COMPLEMENT_FAC
001374r 2               NORMALIZE_FAC2:
001374r 2  A0 00                ldy     #$00
001376r 2  98                   tya
001377r 2  18                   clc
001378r 2               L36C7:
001378r 2  A6 5D                ldx     FAC+1
00137Ar 2  D0 3E                bne     NORMALIZE_FAC4
00137Cr 2  A6 5E                ldx     FAC+2
00137Er 2  86 5D                stx     FAC+1
001380r 2  A6 5F                ldx     FAC+3
001382r 2  86 5E                stx     FAC+2
001384r 2               .ifdef CONFIG_SMALL
001384r 2  A6 69                ldx     FACEXTENSION
001386r 2  86 5F                stx     FAC+3
001388r 2               .else
001388r 2                       ldx     FAC+4
001388r 2                       stx     FAC+3
001388r 2                       ldx     FACEXTENSION
001388r 2                       stx     FAC+4
001388r 2               .endif
001388r 2  84 69                sty     FACEXTENSION
00138Ar 2  69 08                adc     #$08
00138Cr 2               .ifdef CONFIG_2B
00138Cr 2               ; bugfix?
00138Cr 2               ; fix does not exist on AppleSoft 2
00138Cr 2  C9 20                cmp     #(MANTISSA_BYTES+1)*8
00138Er 2               .else
00138Er 2                       cmp     #MANTISSA_BYTES*8
00138Er 2               .endif
00138Er 2  D0 E8                bne     L36C7
001390r 2               
001390r 2               ; ----------------------------------------------------------------------------
001390r 2               ; SET FAC = 0
001390r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
001390r 2               ; ----------------------------------------------------------------------------
001390r 2               ZERO_FAC:
001390r 2  A9 00                lda     #$00
001392r 2               STA_IN_FAC_SIGN_AND_EXP:
001392r 2  85 5C                sta     FAC
001394r 2               STA_IN_FAC_SIGN:
001394r 2  85 60                sta     FACSIGN
001396r 2  60                   rts
001397r 2               
001397r 2               ; ----------------------------------------------------------------------------
001397r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
001397r 2               ; ----------------------------------------------------------------------------
001397r 2               FADD4:
001397r 2  65 53                adc     ARGEXTENSION
001399r 2  85 69                sta     FACEXTENSION
00139Br 2               .ifndef CONFIG_SMALL
00139Br 2                       lda     FAC+4
00139Br 2                       adc     ARG+4
00139Br 2                       sta     FAC+4
00139Br 2               .endif
00139Br 2  A5 5F                lda     FAC+3
00139Dr 2  65 66                adc     ARG+3
00139Fr 2  85 5F                sta     FAC+3
0013A1r 2  A5 5E                lda     FAC+2
0013A3r 2  65 65                adc     ARG+2
0013A5r 2  85 5E                sta     FAC+2
0013A7r 2  A5 5D                lda     FAC+1
0013A9r 2  65 64                adc     ARG+1
0013ABr 2  85 5D                sta     FAC+1
0013ADr 2  4C rr rr             jmp     NORMALIZE_FAC5
0013B0r 2               
0013B0r 2               ; ----------------------------------------------------------------------------
0013B0r 2               ; FINISH NORMALIZING FAC
0013B0r 2               ; ----------------------------------------------------------------------------
0013B0r 2               NORMALIZE_FAC3:
0013B0r 2  69 01                adc     #$01
0013B2r 2  06 69                asl     FACEXTENSION
0013B4r 2               .ifndef CONFIG_SMALL
0013B4r 2                       rol     FAC+4
0013B4r 2               .endif
0013B4r 2  26 5F                rol     FAC+3
0013B6r 2  26 5E                rol     FAC+2
0013B8r 2  26 5D                rol     FAC+1
0013BAr 2               NORMALIZE_FAC4:
0013BAr 2  10 F4                bpl     NORMALIZE_FAC3
0013BCr 2  38                   sec
0013BDr 2  E5 5C                sbc     FAC
0013BFr 2  B0 CF                bcs     ZERO_FAC
0013C1r 2  49 FF                eor     #$FF
0013C3r 2  69 01                adc     #$01
0013C5r 2  85 5C                sta     FAC
0013C7r 2               NORMALIZE_FAC5:
0013C7r 2  90 0C                bcc     L3764
0013C9r 2               NORMALIZE_FAC6:
0013C9r 2  E6 5C                inc     FAC
0013CBr 2  F0 36                beq     OVERFLOW
0013CDr 2               .ifndef CONFIG_ROR_WORKAROUND
0013CDr 2  66 5D                ror     FAC+1
0013CFr 2  66 5E                ror     FAC+2
0013D1r 2  66 5F                ror     FAC+3
0013D3r 2                 .ifndef CONFIG_SMALL
0013D3r 2                       ror     FAC+4
0013D3r 2                 .endif
0013D3r 2  66 69                ror     FACEXTENSION
0013D5r 2               .else
0013D5r 2                       lda     #$00
0013D5r 2                       bcc     L372E
0013D5r 2                       lda     #$80
0013D5r 2               L372E:
0013D5r 2                       lsr     FAC+1
0013D5r 2                       ora     FAC+1
0013D5r 2                       sta     FAC+1
0013D5r 2                       lda     #$00
0013D5r 2                       bcc     L373A
0013D5r 2                       lda     #$80
0013D5r 2               L373A:
0013D5r 2                       lsr     FAC+2
0013D5r 2                       ora     FAC+2
0013D5r 2                       sta     FAC+2
0013D5r 2                       lda     #$00
0013D5r 2                       bcc     L3746
0013D5r 2                       lda     #$80
0013D5r 2               L3746:
0013D5r 2                       lsr     FAC+3
0013D5r 2                       ora     FAC+3
0013D5r 2                       sta     FAC+3
0013D5r 2                       lda     #$00
0013D5r 2                       bcc     L3752
0013D5r 2                       lda     #$80
0013D5r 2               L3752:
0013D5r 2                       lsr     FAC+4
0013D5r 2                       ora     FAC+4
0013D5r 2                       sta     FAC+4
0013D5r 2                       lda     #$00
0013D5r 2                       bcc     L375E
0013D5r 2                       lda     #$80
0013D5r 2               L375E:
0013D5r 2                       lsr     FACEXTENSION
0013D5r 2                       ora     FACEXTENSION
0013D5r 2                       sta     FACEXTENSION
0013D5r 2               .endif
0013D5r 2               L3764:
0013D5r 2  60                   rts
0013D6r 2               
0013D6r 2               ; ----------------------------------------------------------------------------
0013D6r 2               ; 2'S COMPLEMENT OF FAC
0013D6r 2               ; ----------------------------------------------------------------------------
0013D6r 2               COMPLEMENT_FAC:
0013D6r 2  A5 60                lda     FACSIGN
0013D8r 2  49 FF                eor     #$FF
0013DAr 2  85 60                sta     FACSIGN
0013DCr 2               
0013DCr 2               ; ----------------------------------------------------------------------------
0013DCr 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
0013DCr 2               ; ----------------------------------------------------------------------------
0013DCr 2               COMPLEMENT_FAC_MANTISSA:
0013DCr 2  A5 5D                lda     FAC+1
0013DEr 2  49 FF                eor     #$FF
0013E0r 2  85 5D                sta     FAC+1
0013E2r 2  A5 5E                lda     FAC+2
0013E4r 2  49 FF                eor     #$FF
0013E6r 2  85 5E                sta     FAC+2
0013E8r 2  A5 5F                lda     FAC+3
0013EAr 2  49 FF                eor     #$FF
0013ECr 2  85 5F                sta     FAC+3
0013EEr 2               .ifndef CONFIG_SMALL
0013EEr 2                       lda     FAC+4
0013EEr 2                       eor     #$FF
0013EEr 2                       sta     FAC+4
0013EEr 2               .endif
0013EEr 2  A5 69                lda     FACEXTENSION
0013F0r 2  49 FF                eor     #$FF
0013F2r 2  85 69                sta     FACEXTENSION
0013F4r 2  E6 69                inc     FACEXTENSION
0013F6r 2  D0 0A                bne     RTS12
0013F8r 2               
0013F8r 2               ; ----------------------------------------------------------------------------
0013F8r 2               ; INCREMENT FAC MANTISSA
0013F8r 2               ; ----------------------------------------------------------------------------
0013F8r 2               INCREMENT_FAC_MANTISSA:
0013F8r 2               .ifndef CONFIG_SMALL
0013F8r 2                       inc     FAC+4
0013F8r 2                       bne     RTS12
0013F8r 2               .endif
0013F8r 2  E6 5F                inc     FAC+3
0013FAr 2  D0 06                bne     RTS12
0013FCr 2  E6 5E                inc     FAC+2
0013FEr 2  D0 02                bne     RTS12
001400r 2  E6 5D                inc     FAC+1
001402r 2               RTS12:
001402r 2  60                   rts
001403r 2               OVERFLOW:
001403r 2  A2 0A                ldx     #ERR_OVERFLOW
001405r 2  4C rr rr             jmp     ERROR
001408r 2               
001408r 2               ; ----------------------------------------------------------------------------
001408r 2               ; SHIFT 1,X THRU 5,X RIGHT
001408r 2               ; (A) = NEGATIVE OF SHIFT COUNT
001408r 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
001408r 2               ;
001408r 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
001408r 2               ; ----------------------------------------------------------------------------
001408r 2               SHIFT_RIGHT1:
001408r 2  A2 24                ldx     #RESULT-1
00140Ar 2               SHIFT_RIGHT2:
00140Ar 2               .ifdef CONFIG_SMALL
00140Ar 2  B4 03                ldy     3,x
00140Cr 2               .else
00140Cr 2                       ldy     4,x
00140Cr 2               .endif
00140Cr 2  84 69                sty     FACEXTENSION
00140Er 2               .ifndef CONFIG_SMALL
00140Er 2                       ldy     3,x
00140Er 2                       sty     4,x
00140Er 2               .endif
00140Er 2  B4 02                ldy     2,x
001410r 2  94 03                sty     3,x
001412r 2  B4 01                ldy     1,x
001414r 2  94 02                sty     2,x
001416r 2  A4 62                ldy     SHIFTSIGNEXT
001418r 2  94 01                sty     1,x
00141Ar 2               
00141Ar 2               ; ----------------------------------------------------------------------------
00141Ar 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
00141Ar 2               ; ----------------------------------------------------------------------------
00141Ar 2               SHIFT_RIGHT:
00141Ar 2  69 08                adc     #$08
00141Cr 2  30 EC                bmi     SHIFT_RIGHT2
00141Er 2  F0 EA                beq     SHIFT_RIGHT2
001420r 2  E9 08                sbc     #$08
001422r 2  A8                   tay
001423r 2  A5 69                lda     FACEXTENSION
001425r 2  B0 12                bcs     SHIFT_RIGHT5
001427r 2               .ifndef CONFIG_ROR_WORKAROUND
001427r 2               LB588:
001427r 2  16 01                asl     1,x
001429r 2  90 02                bcc     LB58E
00142Br 2  F6 01                inc     1,x
00142Dr 2               LB58E:
00142Dr 2  76 01                ror     1,x
00142Fr 2  76 01                ror     1,x
001431r 2               
001431r 2               ; ----------------------------------------------------------------------------
001431r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
001431r 2               ; ----------------------------------------------------------------------------
001431r 2               SHIFT_RIGHT4:
001431r 2  76 02                ror     2,x
001433r 2  76 03                ror     3,x
001435r 2                 .ifndef CONFIG_SMALL
001435r 2                       ror     4,x
001435r 2                 .endif
001435r 2  6A                   ror     a
001436r 2  C8                   iny
001437r 2  D0 EE                bne     LB588
001439r 2               .else
001439r 2               L37C4:
001439r 2                       pha
001439r 2                       lda     1,x
001439r 2                       and     #$80
001439r 2                       lsr     1,x
001439r 2                       ora     1,x
001439r 2                       sta     1,x
001439r 2                       .byte   $24
001439r 2               SHIFT_RIGHT4:
001439r 2                       pha
001439r 2                       lda     #$00
001439r 2                       bcc     L37D7
001439r 2                       lda     #$80
001439r 2               L37D7:
001439r 2                       lsr     2,x
001439r 2                       ora     2,x
001439r 2                       sta     2,x
001439r 2                       lda     #$00
001439r 2                       bcc     L37E3
001439r 2                       lda     #$80
001439r 2               L37E3:
001439r 2                       lsr     3,x
001439r 2                       ora     3,x
001439r 2                       sta     3,x
001439r 2                       lda     #$00
001439r 2                       bcc     L37EF
001439r 2                       lda     #$80
001439r 2               L37EF:
001439r 2                       lsr     4,x
001439r 2                       ora     4,x
001439r 2                       sta     4,x
001439r 2                       pla
001439r 2                       php
001439r 2                       lsr     a
001439r 2                       plp
001439r 2                       bcc     L37FD
001439r 2                       ora     #$80
001439r 2               L37FD:
001439r 2                       iny
001439r 2                       bne     L37C4
001439r 2               .endif
001439r 2               SHIFT_RIGHT5:
001439r 2  18                   clc
00143Ar 2  60                   rts
00143Br 2               
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               .ifdef CONFIG_SMALL
00143Br 2               CON_ONE:
00143Br 2  81 00 00 00          .byte   $81,$00,$00,$00
00143Fr 2               POLY_LOG:
00143Fr 2  02           		.byte	$02
001440r 2  80 19 56 62  		.byte   $80,$19,$56,$62
001444r 2  80 76 22 F3  		.byte   $80,$76,$22,$F3
001448r 2  82 38 AA 40  		.byte   $82,$38,$AA,$40
00144Cr 2               CON_SQR_HALF:
00144Cr 2  80 35 04 F3  		.byte   $80,$35,$04,$F3
001450r 2               CON_SQR_TWO:
001450r 2  81 35 04 F3  		.byte   $81,$35,$04,$F3
001454r 2               CON_NEG_HALF:
001454r 2  80 80 00 00  		.byte   $80,$80,$00,$00
001458r 2               CON_LOG_TWO:
001458r 2  80 31 72 18  		.byte   $80,$31,$72,$18
00145Cr 2               .else
00145Cr 2               CON_ONE:
00145Cr 2                       .byte   $81,$00,$00,$00,$00
00145Cr 2               POLY_LOG:
00145Cr 2                       .byte   $03
00145Cr 2               		.byte   $7F,$5E,$56,$CB,$79
00145Cr 2               		.byte   $80,$13,$9B,$0B,$64
00145Cr 2               		.byte   $80,$76,$38,$93,$16
00145Cr 2                       .byte   $82,$38,$AA,$3B,$20
00145Cr 2               CON_SQR_HALF:
00145Cr 2                       .byte   $80,$35,$04,$F3,$34
00145Cr 2               CON_SQR_TWO:
00145Cr 2                       .byte   $81,$35,$04,$F3,$34
00145Cr 2               CON_NEG_HALF:
00145Cr 2                       .byte   $80,$80,$00,$00,$00
00145Cr 2               CON_LOG_TWO:
00145Cr 2                       .byte   $80,$31,$72,$17,$F8
00145Cr 2               .endif
00145Cr 2               
00145Cr 2               ; ----------------------------------------------------------------------------
00145Cr 2               ; "LOG" FUNCTION
00145Cr 2               ; ----------------------------------------------------------------------------
00145Cr 2               LOG:
00145Cr 2  20 rr rr             jsr     SIGN
00145Fr 2  F0 02                beq     GIQ
001461r 2  10 03                bpl     LOG2
001463r 2               GIQ:
001463r 2  4C rr rr             jmp     IQERR
001466r 2               LOG2:
001466r 2  A5 5C                lda     FAC
001468r 2  E9 7F                sbc     #$7F
00146Ar 2  48                   pha
00146Br 2  A9 80                lda     #$80
00146Dr 2  85 5C                sta     FAC
00146Fr 2  A9 rr                lda     #<CON_SQR_HALF
001471r 2  A0 rr                ldy     #>CON_SQR_HALF
001473r 2  20 rr rr             jsr     FADD
001476r 2  A9 rr                lda     #<CON_SQR_TWO
001478r 2  A0 rr                ldy     #>CON_SQR_TWO
00147Ar 2  20 rr rr             jsr     FDIV
00147Dr 2  A9 rr                lda     #<CON_ONE
00147Fr 2  A0 rr                ldy     #>CON_ONE
001481r 2  20 rr rr             jsr     FSUB
001484r 2  A9 rr                lda     #<POLY_LOG
001486r 2  A0 rr                ldy     #>POLY_LOG
001488r 2  20 rr rr             jsr     POLYNOMIAL_ODD
00148Br 2  A9 rr                lda     #<CON_NEG_HALF
00148Dr 2  A0 rr                ldy     #>CON_NEG_HALF
00148Fr 2  20 rr rr             jsr     FADD
001492r 2  68                   pla
001493r 2  20 rr rr             jsr     ADDACC
001496r 2  A9 rr                lda     #<CON_LOG_TWO
001498r 2  A0 rr                ldy     #>CON_LOG_TWO
00149Ar 2               
00149Ar 2               ; ----------------------------------------------------------------------------
00149Ar 2               ; FAC = (Y,A) * FAC
00149Ar 2               ; ----------------------------------------------------------------------------
00149Ar 2               FMULT:
00149Ar 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00149Dr 2               
00149Dr 2               ; ----------------------------------------------------------------------------
00149Dr 2               ; FAC = ARG * FAC
00149Dr 2               ; ----------------------------------------------------------------------------
00149Dr 2               FMULTT:
00149Dr 2               .ifndef CONFIG_11
00149Dr 2                       beq     L3903
00149Dr 2               .else
00149Dr 2  D0 03 4C rr          jeq     L3903
0014A1r 2  rr           
0014A2r 2               .endif
0014A2r 2  20 rr rr             jsr     ADD_EXPONENTS
0014A5r 2  A9 00                lda     #$00
0014A7r 2  85 25                sta     RESULT
0014A9r 2  85 26                sta     RESULT+1
0014ABr 2  85 27                sta     RESULT+2
0014ADr 2               .ifndef CONFIG_SMALL
0014ADr 2                       sta     RESULT+3
0014ADr 2               .endif
0014ADr 2  A5 69                lda     FACEXTENSION
0014AFr 2  20 rr rr             jsr     MULTIPLY1
0014B2r 2               .ifndef CONFIG_SMALL
0014B2r 2                       lda     FAC+4
0014B2r 2                       jsr     MULTIPLY1
0014B2r 2               .endif
0014B2r 2  A5 5F                lda     FAC+3
0014B4r 2  20 rr rr             jsr     MULTIPLY1
0014B7r 2  A5 5E                lda     FAC+2
0014B9r 2  20 rr rr             jsr     MULTIPLY1
0014BCr 2  A5 5D                lda     FAC+1
0014BEr 2  20 rr rr             jsr     MULTIPLY2
0014C1r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0014C4r 2               
0014C4r 2               ; ----------------------------------------------------------------------------
0014C4r 2               ; MULTIPLY ARG BY (A) INTO RESULT
0014C4r 2               ; ----------------------------------------------------------------------------
0014C4r 2               MULTIPLY1:
0014C4r 2  D0 03                bne     MULTIPLY2
0014C6r 2  4C rr rr             jmp     SHIFT_RIGHT1
0014C9r 2               MULTIPLY2:
0014C9r 2  4A                   lsr     a
0014CAr 2  09 80                ora     #$80
0014CCr 2               L38A7:
0014CCr 2  A8                   tay
0014CDr 2  90 13                bcc     L38C3
0014CFr 2  18                   clc
0014D0r 2               .ifndef CONFIG_SMALL
0014D0r 2                       lda     RESULT+3
0014D0r 2                       adc     ARG+4
0014D0r 2                       sta     RESULT+3
0014D0r 2               .endif
0014D0r 2  A5 27                lda     RESULT+2
0014D2r 2  65 66                adc     ARG+3
0014D4r 2  85 27                sta     RESULT+2
0014D6r 2  A5 26                lda     RESULT+1
0014D8r 2  65 65                adc     ARG+2
0014DAr 2  85 26                sta     RESULT+1
0014DCr 2  A5 25                lda     RESULT
0014DEr 2  65 64                adc     ARG+1
0014E0r 2  85 25                sta     RESULT
0014E2r 2               L38C3:
0014E2r 2               .ifndef CONFIG_ROR_WORKAROUND
0014E2r 2  66 25                ror     RESULT
0014E4r 2  66 26                ror     RESULT+1
0014E6r 2               .ifdef APPLE_BAD_BYTE
0014E6r 2               ; this seems to be a bad byte in the dump
0014E6r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
0014E6r 2               .else
0014E6r 2  66 27                ror     RESULT+2
0014E8r 2               .endif
0014E8r 2               .ifndef CONFIG_SMALL
0014E8r 2                       ror     RESULT+3
0014E8r 2               .endif
0014E8r 2  66 69                ror     FACEXTENSION
0014EAr 2               .else
0014EAr 2                       lda     #$00
0014EAr 2                       bcc     L38C9
0014EAr 2                       lda     #$80
0014EAr 2               L38C9:
0014EAr 2                       lsr     RESULT
0014EAr 2                       ora     RESULT
0014EAr 2                       sta     RESULT
0014EAr 2                       lda     #$00
0014EAr 2                       bcc     L38D5
0014EAr 2                       lda     #$80
0014EAr 2               L38D5:
0014EAr 2                       lsr     RESULT+1
0014EAr 2                       ora     RESULT+1
0014EAr 2                       sta     RESULT+1
0014EAr 2                       lda     #$00
0014EAr 2                       bcc     L38E1
0014EAr 2                       lda     #$80
0014EAr 2               L38E1:
0014EAr 2                       lsr     RESULT+2
0014EAr 2                       ora     RESULT+2
0014EAr 2                       sta     RESULT+2
0014EAr 2                       lda     #$00
0014EAr 2                       bcc     L38ED
0014EAr 2                       lda     #$80
0014EAr 2               L38ED:
0014EAr 2                       lsr     RESULT+3
0014EAr 2                       ora     RESULT+3
0014EAr 2                       sta     RESULT+3
0014EAr 2                       lda     #$00
0014EAr 2                       bcc     L38F9
0014EAr 2                       lda     #$80
0014EAr 2               L38F9:
0014EAr 2                       lsr     FACEXTENSION
0014EAr 2                       ora     FACEXTENSION
0014EAr 2                       sta     FACEXTENSION
0014EAr 2               .endif
0014EAr 2  98                   tya
0014EBr 2  4A                   lsr     a
0014ECr 2  D0 DE                bne     L38A7
0014EEr 2               L3903:
0014EEr 2  60                   rts
0014EFr 2               
0014EFr 2               ; ----------------------------------------------------------------------------
0014EFr 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0014EFr 2               ; ----------------------------------------------------------------------------
0014EFr 2               LOAD_ARG_FROM_YA:
0014EFr 2  85 21                sta     INDEX
0014F1r 2  84 22                sty     INDEX+1
0014F3r 2  A0 03                ldy     #BYTES_FP-1
0014F5r 2               .ifndef CONFIG_SMALL
0014F5r 2                       lda     (INDEX),y
0014F5r 2                       sta     ARG+4
0014F5r 2                       dey
0014F5r 2               .endif
0014F5r 2  B1 21                lda     (INDEX),y
0014F7r 2  85 66                sta     ARG+3
0014F9r 2  88                   dey
0014FAr 2  B1 21                lda     (INDEX),y
0014FCr 2  85 65                sta     ARG+2
0014FEr 2  88                   dey
0014FFr 2  B1 21                lda     (INDEX),y
001501r 2  85 67                sta     ARGSIGN
001503r 2  45 60                eor     FACSIGN
001505r 2  85 68                sta     SGNCPR
001507r 2  A5 67                lda     ARGSIGN
001509r 2  09 80                ora     #$80
00150Br 2  85 64                sta     ARG+1
00150Dr 2  88                   dey
00150Er 2  B1 21                lda     (INDEX),y
001510r 2  85 63                sta     ARG
001512r 2  A5 5C                lda     FAC
001514r 2  60                   rts
001515r 2               
001515r 2               ; ----------------------------------------------------------------------------
001515r 2               ; ADD EXPONENTS OF ARG AND FAC
001515r 2               ; (CALLED BY FMULT AND FDIV)
001515r 2               ;
001515r 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
001515r 2               ; ----------------------------------------------------------------------------
001515r 2               ADD_EXPONENTS:
001515r 2  A5 63                lda     ARG
001517r 2               ADD_EXPONENTS1:
001517r 2  F0 1F                beq     ZERO
001519r 2  18                   clc
00151Ar 2  65 5C                adc     FAC
00151Cr 2  90 04                bcc     L393C
00151Er 2  30 1D                bmi     JOV
001520r 2  18                   clc
001521r 2  2C                   .byte   $2C
001522r 2               L393C:
001522r 2  10 14                bpl     ZERO
001524r 2  69 80                adc     #$80
001526r 2  85 5C                sta     FAC
001528r 2  D0 03                bne     L3947
00152Ar 2  4C rr rr             jmp     STA_IN_FAC_SIGN
00152Dr 2               L3947:
00152Dr 2  A5 68                lda     SGNCPR
00152Fr 2  85 60                sta     FACSIGN
001531r 2  60                   rts
001532r 2               
001532r 2               ; ----------------------------------------------------------------------------
001532r 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
001532r 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
001532r 2               ; CALLED FROM "EXP" FUNCTION
001532r 2               ; ----------------------------------------------------------------------------
001532r 2               OUTOFRNG:
001532r 2  A5 60                lda     FACSIGN
001534r 2  49 FF                eor     #$FF
001536r 2  30 05                bmi     JOV
001538r 2               
001538r 2               ; ----------------------------------------------------------------------------
001538r 2               ; POP RETURN ADDRESS AND SET FAC=0
001538r 2               ; ----------------------------------------------------------------------------
001538r 2               ZERO:
001538r 2  68                   pla
001539r 2  68                   pla
00153Ar 2  4C rr rr             jmp     ZERO_FAC
00153Dr 2               JOV:
00153Dr 2  4C rr rr             jmp     OVERFLOW
001540r 2               
001540r 2               ; ----------------------------------------------------------------------------
001540r 2               ; MULTIPLY FAC BY 10
001540r 2               ; ----------------------------------------------------------------------------
001540r 2               MUL10:
001540r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001543r 2  AA                   tax
001544r 2  F0 10                beq     L3970
001546r 2  18                   clc
001547r 2  69 02                adc     #$02
001549r 2  B0 F2                bcs     JOV
00154Br 2               LD9BF:
00154Br 2  A2 00                ldx     #$00
00154Dr 2  86 68                stx     SGNCPR
00154Fr 2  20 rr rr             jsr     FADD2
001552r 2  E6 5C                inc     FAC
001554r 2  F0 E7                beq     JOV
001556r 2               L3970:
001556r 2  60                   rts
001557r 2               
001557r 2               ; ----------------------------------------------------------------------------
001557r 2               CONTEN:
001557r 2               .ifdef CONFIG_SMALL
001557r 2  84 20 00 00          .byte   $84,$20,$00,$00
00155Br 2               .else
00155Br 2                       .byte   $84,$20,$00,$00,$00
00155Br 2               .endif
00155Br 2               
00155Br 2               ; ----------------------------------------------------------------------------
00155Br 2               ; DIVIDE FAC BY 10
00155Br 2               ; ----------------------------------------------------------------------------
00155Br 2               DIV10:
00155Br 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00155Er 2  A9 rr                lda     #<CONTEN
001560r 2  A0 rr                ldy     #>CONTEN
001562r 2  A2 00                ldx     #$00
001564r 2               
001564r 2               ; ----------------------------------------------------------------------------
001564r 2               ; FAC = ARG / (Y,A)
001564r 2               ; ----------------------------------------------------------------------------
001564r 2               DIV:
001564r 2  86 68                stx     SGNCPR
001566r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001569r 2  4C rr rr             jmp     FDIVT
00156Cr 2               
00156Cr 2               ; ----------------------------------------------------------------------------
00156Cr 2               ; FAC = (Y,A) / FAC
00156Cr 2               ; ----------------------------------------------------------------------------
00156Cr 2               FDIV:
00156Cr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00156Fr 2               
00156Fr 2               ; ----------------------------------------------------------------------------
00156Fr 2               ; FAC = ARG / FAC
00156Fr 2               ; ----------------------------------------------------------------------------
00156Fr 2               FDIVT:
00156Fr 2  F0 68                beq     L3A02
001571r 2  20 rr rr             jsr     ROUND_FAC
001574r 2  A9 00                lda     #$00
001576r 2  38                   sec
001577r 2  E5 5C                sbc     FAC
001579r 2  85 5C                sta     FAC
00157Br 2  20 rr rr             jsr     ADD_EXPONENTS
00157Er 2  E6 5C                inc     FAC
001580r 2  F0 BB                beq     JOV
001582r 2  A2 FD                ldx     #-MANTISSA_BYTES
001584r 2  A9 01                lda     #$01
001586r 2               L39A1:
001586r 2  A4 64                ldy     ARG+1
001588r 2  C4 5D                cpy     FAC+1
00158Ar 2  D0 0A                bne     L39B7
00158Cr 2  A4 65                ldy     ARG+2
00158Er 2  C4 5E                cpy     FAC+2
001590r 2  D0 04                bne     L39B7
001592r 2  A4 66                ldy     ARG+3
001594r 2  C4 5F                cpy     FAC+3
001596r 2               .ifndef CONFIG_SMALL
001596r 2                       bne     L39B7
001596r 2                       ldy     ARG+4
001596r 2                       cpy     FAC+4
001596r 2               .endif
001596r 2               L39B7:
001596r 2  08                   php
001597r 2  2A                   rol     a
001598r 2  90 09                bcc     L39C4
00159Ar 2  E8                   inx
00159Br 2  95 27                sta     RESULT_LAST-1,x
00159Dr 2  F0 2A                beq     L39F2
00159Fr 2  10 2C                bpl     L39F6
0015A1r 2  A9 01                lda     #$01
0015A3r 2               L39C4:
0015A3r 2  28                   plp
0015A4r 2  B0 0C                bcs     L39D5
0015A6r 2               L39C7:
0015A6r 2  06 66                asl     ARG_LAST
0015A8r 2               .ifndef CONFIG_SMALL
0015A8r 2                       rol     ARG+3
0015A8r 2               .endif
0015A8r 2  26 65                rol     ARG+2
0015AAr 2  26 64                rol     ARG+1
0015ACr 2  B0 E8                bcs     L39B7
0015AEr 2  30 D6                bmi     L39A1
0015B0r 2  10 E4                bpl     L39B7
0015B2r 2               L39D5:
0015B2r 2  A8                   tay
0015B3r 2               .ifndef CONFIG_SMALL
0015B3r 2                       lda     ARG+4
0015B3r 2                       sbc     FAC+4
0015B3r 2                       sta     ARG+4
0015B3r 2               .endif
0015B3r 2  A5 66                lda     ARG+3
0015B5r 2  E5 5F                sbc     FAC+3
0015B7r 2  85 66                sta     ARG+3
0015B9r 2  A5 65                lda     ARG+2
0015BBr 2  E5 5E                sbc     FAC+2
0015BDr 2  85 65                sta     ARG+2
0015BFr 2  A5 64                lda     ARG+1
0015C1r 2  E5 5D                sbc     FAC+1
0015C3r 2  85 64                sta     ARG+1
0015C5r 2  98                   tya
0015C6r 2  4C rr rr             jmp     L39C7
0015C9r 2               L39F2:
0015C9r 2  A9 40                lda     #$40
0015CBr 2  D0 D6                bne     L39C4
0015CDr 2               L39F6:
0015CDr 2  0A                   asl     a
0015CEr 2  0A                   asl     a
0015CFr 2  0A                   asl     a
0015D0r 2  0A                   asl     a
0015D1r 2  0A                   asl     a
0015D2r 2  0A                   asl     a
0015D3r 2  85 69                sta     FACEXTENSION
0015D5r 2  28                   plp
0015D6r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0015D9r 2               L3A02:
0015D9r 2  A2 14                ldx     #ERR_ZERODIV
0015DBr 2  4C rr rr             jmp     ERROR
0015DEr 2               
0015DEr 2               ; ----------------------------------------------------------------------------
0015DEr 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0015DEr 2               ; ----------------------------------------------------------------------------
0015DEr 2               COPY_RESULT_INTO_FAC:
0015DEr 2  A5 25                lda     RESULT
0015E0r 2  85 5D                sta     FAC+1
0015E2r 2  A5 26                lda     RESULT+1
0015E4r 2  85 5E                sta     FAC+2
0015E6r 2  A5 27                lda     RESULT+2
0015E8r 2  85 5F                sta     FAC+3
0015EAr 2               .ifndef CONFIG_SMALL
0015EAr 2                       lda     RESULT+3
0015EAr 2                       sta     FAC+4
0015EAr 2               .endif
0015EAr 2  4C rr rr             jmp     NORMALIZE_FAC2
0015EDr 2               
0015EDr 2               ; ----------------------------------------------------------------------------
0015EDr 2               ; UNPACK (Y,A) INTO FAC
0015EDr 2               ; ----------------------------------------------------------------------------
0015EDr 2               LOAD_FAC_FROM_YA:
0015EDr 2  85 21                sta     INDEX
0015EFr 2  84 22                sty     INDEX+1
0015F1r 2  A0 03                ldy     #MANTISSA_BYTES
0015F3r 2               .ifndef CONFIG_SMALL
0015F3r 2                       lda     (INDEX),y
0015F3r 2                       sta     FAC+4
0015F3r 2                       dey
0015F3r 2               .endif
0015F3r 2  B1 21                lda     (INDEX),y
0015F5r 2  85 5F                sta     FAC+3
0015F7r 2  88                   dey
0015F8r 2  B1 21                lda     (INDEX),y
0015FAr 2  85 5E                sta     FAC+2
0015FCr 2  88                   dey
0015FDr 2  B1 21                lda     (INDEX),y
0015FFr 2  85 60                sta     FACSIGN
001601r 2  09 80                ora     #$80
001603r 2  85 5D                sta     FAC+1
001605r 2  88                   dey
001606r 2  B1 21                lda     (INDEX),y
001608r 2  85 5C                sta     FAC
00160Ar 2  84 69                sty     FACEXTENSION
00160Cr 2  60                   rts
00160Dr 2               
00160Dr 2               ; ----------------------------------------------------------------------------
00160Dr 2               ; ROUND FAC, STORE IN TEMP2
00160Dr 2               ; ----------------------------------------------------------------------------
00160Dr 2               STORE_FAC_IN_TEMP2_ROUNDED:
00160Dr 2  A2 58                ldx     #TEMP2
00160Fr 2  2C                   .byte   $2C
001610r 2               
001610r 2               ; ----------------------------------------------------------------------------
001610r 2               ; ROUND FAC, STORE IN TEMP1
001610r 2               ; ----------------------------------------------------------------------------
001610r 2               STORE_FAC_IN_TEMP1_ROUNDED:
001610r 2  A2 54                ldx     #TEMP1X
001612r 2  A0 00                ldy     #$00
001614r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
001616r 2               
001616r 2               ; ----------------------------------------------------------------------------
001616r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
001616r 2               ; ----------------------------------------------------------------------------
001616r 2               SETFOR:
001616r 2  A6 47                ldx     FORPNT
001618r 2  A4 48                ldy     FORPNT+1
00161Ar 2               
00161Ar 2               ; ----------------------------------------------------------------------------
00161Ar 2               ; ROUND FAC, AND STORE AT (Y,X)
00161Ar 2               ; ----------------------------------------------------------------------------
00161Ar 2               STORE_FAC_AT_YX_ROUNDED:
00161Ar 2  20 rr rr             jsr     ROUND_FAC
00161Dr 2  86 21                stx     INDEX
00161Fr 2  84 22                sty     INDEX+1
001621r 2  A0 03                ldy     #MANTISSA_BYTES
001623r 2               .ifndef CONFIG_SMALL
001623r 2                       lda     FAC+4
001623r 2                       sta     (INDEX),y
001623r 2                       dey
001623r 2               .endif
001623r 2  A5 5F                lda     FAC+3
001625r 2  91 21                sta     (INDEX),y
001627r 2  88                   dey
001628r 2  A5 5E                lda     FAC+2
00162Ar 2  91 21                sta     (INDEX),y
00162Cr 2  88                   dey
00162Dr 2  A5 60                lda     FACSIGN
00162Fr 2  09 7F                ora     #$7F
001631r 2  25 5D                and     FAC+1
001633r 2  91 21                sta     (INDEX),y
001635r 2  88                   dey
001636r 2  A5 5C                lda     FAC
001638r 2  91 21                sta     (INDEX),y
00163Ar 2  84 69                sty     FACEXTENSION
00163Cr 2  60                   rts
00163Dr 2               
00163Dr 2               ; ----------------------------------------------------------------------------
00163Dr 2               ; COPY ARG INTO FAC
00163Dr 2               ; ----------------------------------------------------------------------------
00163Dr 2               COPY_ARG_TO_FAC:
00163Dr 2  A5 67                lda     ARGSIGN
00163Fr 2               MFA:
00163Fr 2  85 60                sta     FACSIGN
001641r 2  A2 04                ldx     #BYTES_FP
001643r 2               L3A7A:
001643r 2  B5 62                lda     SHIFTSIGNEXT,x
001645r 2  95 5B                sta     EXPSGN,x
001647r 2  CA                   dex
001648r 2  D0 F9                bne     L3A7A
00164Ar 2  86 69                stx     FACEXTENSION
00164Cr 2  60                   rts
00164Dr 2               
00164Dr 2               ; ----------------------------------------------------------------------------
00164Dr 2               ; ROUND FAC AND COPY TO ARG
00164Dr 2               ; ----------------------------------------------------------------------------
00164Dr 2               COPY_FAC_TO_ARG_ROUNDED:
00164Dr 2  20 rr rr             jsr     ROUND_FAC
001650r 2               MAF:
001650r 2  A2 05                ldx     #BYTES_FP+1
001652r 2               L3A89:
001652r 2  B5 5B                lda     EXPSGN,x
001654r 2  95 62                sta     SHIFTSIGNEXT,x
001656r 2  CA                   dex
001657r 2  D0 F9                bne     L3A89
001659r 2  86 69                stx     FACEXTENSION
00165Br 2               RTS14:
00165Br 2  60                   rts
00165Cr 2               
00165Cr 2               ; ----------------------------------------------------------------------------
00165Cr 2               ; ROUND FAC USING EXTENSION BYTE
00165Cr 2               ; ----------------------------------------------------------------------------
00165Cr 2               ROUND_FAC:
00165Cr 2  A5 5C                lda     FAC
00165Er 2  F0 FB                beq     RTS14
001660r 2  06 69                asl     FACEXTENSION
001662r 2  90 F7                bcc     RTS14
001664r 2               
001664r 2               ; ----------------------------------------------------------------------------
001664r 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
001664r 2               ; ----------------------------------------------------------------------------
001664r 2               INCREMENT_MANTISSA:
001664r 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
001667r 2  D0 F2                bne     RTS14
001669r 2  4C rr rr             jmp     NORMALIZE_FAC6
00166Cr 2               
00166Cr 2               ; ----------------------------------------------------------------------------
00166Cr 2               ; TEST FAC FOR ZERO AND SIGN
00166Cr 2               ;
00166Cr 2               ; FAC > 0, RETURN +1
00166Cr 2               ; FAC = 0, RETURN  0
00166Cr 2               ; FAC < 0, RETURN -1
00166Cr 2               ; ----------------------------------------------------------------------------
00166Cr 2               SIGN:
00166Cr 2  A5 5C                lda     FAC
00166Er 2  F0 09                beq     RTS15
001670r 2               L3AA7:
001670r 2  A5 60                lda     FACSIGN
001672r 2               SIGN2:
001672r 2  2A                   rol     a
001673r 2  A9 FF                lda     #$FF
001675r 2  B0 02                bcs     RTS15
001677r 2  A9 01                lda     #$01
001679r 2               RTS15:
001679r 2  60                   rts
00167Ar 2               
00167Ar 2               ; ----------------------------------------------------------------------------
00167Ar 2               ; "SGN" FUNCTION
00167Ar 2               ; ----------------------------------------------------------------------------
00167Ar 2               SGN:
00167Ar 2  20 rr rr             jsr     SIGN
00167Dr 2               
00167Dr 2               ; ----------------------------------------------------------------------------
00167Dr 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00167Dr 2               ; ----------------------------------------------------------------------------
00167Dr 2               FLOAT:
00167Dr 2  85 5D                sta     FAC+1
00167Fr 2  A9 00                lda     #$00
001681r 2  85 5E                sta     FAC+2
001683r 2  A2 88                ldx     #$88
001685r 2               
001685r 2               ; ----------------------------------------------------------------------------
001685r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001685r 2               ; (X) = EXPONENT
001685r 2               ; ----------------------------------------------------------------------------
001685r 2               FLOAT1:
001685r 2  A5 5D                lda     FAC+1
001687r 2  49 FF                eor     #$FF
001689r 2  2A                   rol     a
00168Ar 2               
00168Ar 2               ; ----------------------------------------------------------------------------
00168Ar 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00168Ar 2               ; (X) = EXPONENT
00168Ar 2               ; C=0 TO MAKE VALUE NEGATIVE
00168Ar 2               ; C=1 TO MAKE VALUE POSITIVE
00168Ar 2               ; ----------------------------------------------------------------------------
00168Ar 2               FLOAT2:
00168Ar 2  A9 00                lda     #$00
00168Cr 2               .ifndef CONFIG_SMALL
00168Cr 2                       sta     FAC+4
00168Cr 2               .endif
00168Cr 2  85 5F                sta     FAC+3
00168Er 2               LDB21:
00168Er 2  86 5C                stx     FAC
001690r 2  85 69                sta     FACEXTENSION
001692r 2  85 60                sta     FACSIGN
001694r 2  4C rr rr             jmp     NORMALIZE_FAC1
001697r 2               
001697r 2               ; ----------------------------------------------------------------------------
001697r 2               ; "ABS" FUNCTION
001697r 2               ; ----------------------------------------------------------------------------
001697r 2               ABS:
001697r 2  46 60                lsr     FACSIGN
001699r 2  60                   rts
00169Ar 2               
00169Ar 2               ; ----------------------------------------------------------------------------
00169Ar 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
00169Ar 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00169Ar 2               ; ----------------------------------------------------------------------------
00169Ar 2               FCOMP:
00169Ar 2  85 23                sta     DEST
00169Cr 2               
00169Cr 2               ; ----------------------------------------------------------------------------
00169Cr 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
00169Cr 2               ; "DEST" ALREADY SET UP
00169Cr 2               ; ----------------------------------------------------------------------------
00169Cr 2               FCOMP2:
00169Cr 2  84 24                sty     DEST+1
00169Er 2  A0 00                ldy     #$00
0016A0r 2  B1 23                lda     (DEST),y
0016A2r 2  C8                   iny
0016A3r 2  AA                   tax
0016A4r 2  F0 C6                beq     SIGN
0016A6r 2  B1 23                lda     (DEST),y
0016A8r 2  45 60                eor     FACSIGN
0016AAr 2  30 C4                bmi     L3AA7
0016ACr 2  E4 5C                cpx     FAC
0016AEr 2  D0 1A                bne     L3B0A
0016B0r 2  B1 23                lda     (DEST),y
0016B2r 2  09 80                ora     #$80
0016B4r 2  C5 5D                cmp     FAC+1
0016B6r 2  D0 12                bne     L3B0A
0016B8r 2  C8                   iny
0016B9r 2  B1 23                lda     (DEST),y
0016BBr 2  C5 5E                cmp     FAC+2
0016BDr 2  D0 0B                bne     L3B0A
0016BFr 2  C8                   iny
0016C0r 2               .ifndef CONFIG_SMALL
0016C0r 2                       lda     (DEST),y
0016C0r 2                       cmp     FAC+3
0016C0r 2                       bne     L3B0A
0016C0r 2                       iny
0016C0r 2               .endif
0016C0r 2  A9 7F                lda     #$7F
0016C2r 2  C5 69                cmp     FACEXTENSION
0016C4r 2  B1 23                lda     (DEST),y
0016C6r 2  E5 5F                sbc     FAC_LAST
0016C8r 2  F0 28                beq     L3B32
0016CAr 2               L3B0A:
0016CAr 2  A5 60                lda     FACSIGN
0016CCr 2  90 02                bcc     L3B10
0016CEr 2  49 FF                eor     #$FF
0016D0r 2               L3B10:
0016D0r 2  4C rr rr             jmp     SIGN2
0016D3r 2               
0016D3r 2               ; ----------------------------------------------------------------------------
0016D3r 2               ; QUICK INTEGER FUNCTION
0016D3r 2               ;
0016D3r 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0016D3r 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0016D3r 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0016D3r 2               ;
0016D3r 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0016D3r 2               ; ----------------------------------------------------------------------------
0016D3r 2               QINT:
0016D3r 2  A5 5C                lda     FAC
0016D5r 2  F0 4A                beq     QINT3
0016D7r 2  38                   sec
0016D8r 2  E9 98                sbc     #120+8*BYTES_FP
0016DAr 2  24 60                bit     FACSIGN
0016DCr 2  10 09                bpl     L3B27
0016DEr 2  AA                   tax
0016DFr 2  A9 FF                lda     #$FF
0016E1r 2  85 62                sta     SHIFTSIGNEXT
0016E3r 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0016E6r 2  8A                   txa
0016E7r 2               L3B27:
0016E7r 2  A2 5C                ldx     #FAC
0016E9r 2  C9 F9                cmp     #$F9
0016EBr 2  10 06                bpl     QINT2
0016EDr 2  20 rr rr             jsr     SHIFT_RIGHT
0016F0r 2  84 62                sty     SHIFTSIGNEXT
0016F2r 2               L3B32:
0016F2r 2  60                   rts
0016F3r 2               QINT2:
0016F3r 2  A8                   tay
0016F4r 2  A5 60                lda     FACSIGN
0016F6r 2  29 80                and     #$80
0016F8r 2  46 5D                lsr     FAC+1
0016FAr 2  05 5D                ora     FAC+1
0016FCr 2  85 5D                sta     FAC+1
0016FEr 2  20 rr rr             jsr     SHIFT_RIGHT4
001701r 2  84 62                sty     SHIFTSIGNEXT
001703r 2  60                   rts
001704r 2               
001704r 2               ; ----------------------------------------------------------------------------
001704r 2               ; "INT" FUNCTION
001704r 2               ;
001704r 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
001704r 2               ; AND THEN REFLOATS THE INTEGER.
001704r 2               ; ----------------------------------------------------------------------------
001704r 2               INT:
001704r 2  A5 5C                lda     FAC
001706r 2  C9 98                cmp     #120+8*BYTES_FP
001708r 2  B0 1E                bcs     RTS17
00170Ar 2  20 rr rr             jsr     QINT
00170Dr 2  84 69                sty     FACEXTENSION
00170Fr 2  A5 60                lda     FACSIGN
001711r 2  84 60                sty     FACSIGN
001713r 2  49 80                eor     #$80
001715r 2  2A                   rol     a
001716r 2  A9 98                lda     #120+8*BYTES_FP
001718r 2  85 5C                sta     FAC
00171Ar 2  A5 5F                lda     FAC_LAST
00171Cr 2  85 06                sta     CHARAC
00171Er 2  4C rr rr             jmp     NORMALIZE_FAC1
001721r 2               QINT3:
001721r 2  85 5D                sta     FAC+1
001723r 2  85 5E                sta     FAC+2
001725r 2  85 5F                sta     FAC+3
001727r 2               .ifndef CONFIG_SMALL
001727r 2                       sta     FAC+4
001727r 2               .endif
001727r 2  A8                   tay
001728r 2               RTS17:
001728r 2  60                   rts
001729r 2               
001729r 2               ; ----------------------------------------------------------------------------
001729r 2               ; CONVERT STRING TO FP VALUE IN FAC
001729r 2               ;
001729r 2               ; STRING POINTED TO BY TXTPTR
001729r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
001729r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
001729r 2               ; ----------------------------------------------------------------------------
001729r 2               FIN:
001729r 2  A0 00                ldy     #$00
00172Br 2  A2 09                ldx     #SERLEN-TMPEXP
00172Dr 2               L3B6F:
00172Dr 2  94 58                sty     TMPEXP,x
00172Fr 2  CA                   dex
001730r 2  10 FB                bpl     L3B6F
001732r 2  90 0F                bcc     FIN2
001734r 2               .ifdef SYM1
001734r 2                       cmp     #$26
001734r 2                       bne     LDABB
001734r 2                       jmp     LCDFE
001734r 2               LDABB:
001734r 2               .endif
001734r 2  C9 2D                cmp     #$2D
001736r 2  D0 04                bne     L3B7E
001738r 2  86 61                stx     SERLEN
00173Ar 2  F0 04                beq     FIN1
00173Cr 2               L3B7E:
00173Cr 2  C9 2B                cmp     #$2B
00173Er 2  D0 05                bne     FIN3
001740r 2               FIN1:
001740r 2  20 6C 00             jsr     CHRGET
001743r 2               FIN2:
001743r 2  90 5B                bcc     FIN9
001745r 2               FIN3:
001745r 2  C9 2E                cmp     #$2E
001747r 2  F0 2E                beq     FIN10
001749r 2  C9 45                cmp     #$45
00174Br 2  D0 30                bne     FIN7
00174Dr 2  20 6C 00             jsr     CHRGET
001750r 2  90 17                bcc     FIN5
001752r 2  C9 A5                cmp     #TOKEN_MINUS
001754r 2  F0 0E                beq     L3BA6
001756r 2  C9 2D                cmp     #$2D
001758r 2  F0 0A                beq     L3BA6
00175Ar 2  C9 A4                cmp     #TOKEN_PLUS
00175Cr 2  F0 08                beq     FIN4
00175Er 2  C9 2B                cmp     #$2B
001760r 2  F0 04                beq     FIN4
001762r 2  D0 07                bne     FIN6
001764r 2               L3BA6:
001764r 2               .ifndef CONFIG_ROR_WORKAROUND
001764r 2  66 5B                ror     EXPSGN
001766r 2               .else
001766r 2                       lda     #$00
001766r 2                       bcc     L3BAC
001766r 2                       lda     #$80
001766r 2               L3BAC:
001766r 2                       lsr     EXPSGN
001766r 2                       ora     EXPSGN
001766r 2                       sta     EXPSGN
001766r 2               .endif
001766r 2               FIN4:
001766r 2  20 6C 00             jsr     CHRGET
001769r 2               FIN5:
001769r 2  90 5C                bcc     GETEXP
00176Br 2               FIN6:
00176Br 2  24 5B                bit     EXPSGN
00176Dr 2  10 0E                bpl     FIN7
00176Fr 2  A9 00                lda     #$00
001771r 2  38                   sec
001772r 2  E5 59                sbc     EXPON
001774r 2  4C rr rr             jmp     FIN8
001777r 2               
001777r 2               ; ----------------------------------------------------------------------------
001777r 2               ; FOUND A DECIMAL POINT
001777r 2               ; ----------------------------------------------------------------------------
001777r 2               FIN10:
001777r 2               .ifndef CONFIG_ROR_WORKAROUND
001777r 2  66 5A                ror     LOWTR
001779r 2               .else
001779r 2                       lda     #$00
001779r 2                       bcc     L3BC9
001779r 2                       lda     #$80
001779r 2               L3BC9:
001779r 2                       lsr     LOWTR
001779r 2                       ora     LOWTR
001779r 2                       sta     LOWTR
001779r 2               .endif
001779r 2  24 5A                bit     LOWTR
00177Br 2  50 C3                bvc     FIN1
00177Dr 2               
00177Dr 2               ; ----------------------------------------------------------------------------
00177Dr 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
00177Dr 2               ; ----------------------------------------------------------------------------
00177Dr 2               FIN7:
00177Dr 2  A5 59                lda     EXPON
00177Fr 2               FIN8:
00177Fr 2  38                   sec
001780r 2  E5 58                sbc     INDX
001782r 2  85 59                sta     EXPON
001784r 2  F0 12                beq     L3BEE
001786r 2  10 09                bpl     L3BE7
001788r 2               L3BDE:
001788r 2  20 rr rr             jsr     DIV10
00178Br 2  E6 59                inc     EXPON
00178Dr 2  D0 F9                bne     L3BDE
00178Fr 2  F0 07                beq     L3BEE
001791r 2               L3BE7:
001791r 2  20 rr rr             jsr     MUL10
001794r 2  C6 59                dec     EXPON
001796r 2  D0 F9                bne     L3BE7
001798r 2               L3BEE:
001798r 2  A5 61                lda     SERLEN
00179Ar 2  30 01                bmi     L3BF3
00179Cr 2  60                   rts
00179Dr 2               L3BF3:
00179Dr 2  4C rr rr             jmp     NEGOP
0017A0r 2               
0017A0r 2               ; ----------------------------------------------------------------------------
0017A0r 2               ; ACCUMULATE A DIGIT INTO FAC
0017A0r 2               ; ----------------------------------------------------------------------------
0017A0r 2               FIN9:
0017A0r 2  48                   pha
0017A1r 2  24 5A                bit     LOWTR
0017A3r 2  10 02                bpl     L3BFD
0017A5r 2  E6 58                inc     INDX
0017A7r 2               L3BFD:
0017A7r 2  20 rr rr             jsr     MUL10
0017AAr 2  68                   pla
0017ABr 2  38                   sec
0017ACr 2  E9 30                sbc     #$30
0017AEr 2  20 rr rr             jsr     ADDACC
0017B1r 2  4C rr rr             jmp     FIN1
0017B4r 2               
0017B4r 2               ; ----------------------------------------------------------------------------
0017B4r 2               ; ADD (A) TO FAC
0017B4r 2               ; ----------------------------------------------------------------------------
0017B4r 2               ADDACC:
0017B4r 2  48                   pha
0017B5r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0017B8r 2  68                   pla
0017B9r 2  20 rr rr             jsr     FLOAT
0017BCr 2  A5 67                lda     ARGSIGN
0017BEr 2  45 60                eor     FACSIGN
0017C0r 2  85 68                sta     SGNCPR
0017C2r 2  A6 5C                ldx     FAC
0017C4r 2  4C rr rr             jmp     FADDT
0017C7r 2               
0017C7r 2               ; ----------------------------------------------------------------------------
0017C7r 2               ; ACCUMULATE DIGIT OF EXPONENT
0017C7r 2               ; ----------------------------------------------------------------------------
0017C7r 2               GETEXP:
0017C7r 2  A5 59                lda     EXPON
0017C9r 2  C9 0A                cmp     #MAX_EXPON
0017CBr 2  90 09                bcc     L3C2C
0017CDr 2               .ifdef CONFIG_10A
0017CDr 2  A9 64                lda     #$64
0017CFr 2               .endif
0017CFr 2  24 5B                bit     EXPSGN
0017D1r 2               .ifdef CONFIG_10A
0017D1r 2  30 11                bmi     L3C3A
0017D3r 2               .else
0017D3r 2                       bmi     LDC70
0017D3r 2               .endif
0017D3r 2  4C rr rr             jmp     OVERFLOW
0017D6r 2               LDC70:
0017D6r 2               .ifndef CONFIG_10A
0017D6r 2                       lda     #$0B
0017D6r 2               .endif
0017D6r 2               L3C2C:
0017D6r 2  0A                   asl     a
0017D7r 2  0A                   asl     a
0017D8r 2  18                   clc
0017D9r 2  65 59                adc     EXPON
0017DBr 2  0A                   asl     a
0017DCr 2  18                   clc
0017DDr 2  A0 00                ldy     #$00
0017DFr 2  71 73                adc     (TXTPTR),y
0017E1r 2  38                   sec
0017E2r 2  E9 30                sbc     #$30
0017E4r 2               L3C3A:
0017E4r 2  85 59                sta     EXPON
0017E6r 2  4C rr rr             jmp     FIN4
0017E9r 2               
0017E9r 2               ; ----------------------------------------------------------------------------
0017E9r 2               .ifdef CONFIG_SMALL
0017E9r 2               ; these values are /1000 of what the labels say
0017E9r 2               CON_99999999_9:
0017E9r 2  91 43 4F F8          .byte   $91,$43,$4F,$F8
0017EDr 2               CON_999999999:
0017EDr 2  94 74 23 F7  		.byte   $94,$74,$23,$F7
0017F1r 2               CON_BILLION:
0017F1r 2  94 74 24 00          .byte   $94,$74,$24,$00
0017F5r 2               .else
0017F5r 2               CON_99999999_9:
0017F5r 2                       .byte   $9B,$3E,$BC,$1F,$FD
0017F5r 2               CON_999999999:
0017F5r 2               .ifndef CONFIG_10A
0017F5r 2                       .byte   $9E,$6E,$6B,$27,$FE
0017F5r 2               .else
0017F5r 2                       .byte   $9E,$6E,$6B,$27,$FD
0017F5r 2               .endif
0017F5r 2               CON_BILLION:
0017F5r 2                       .byte   $9E,$6E,$6B,$28,$00
0017F5r 2               .endif
0017F5r 2               
0017F5r 2               ; ----------------------------------------------------------------------------
0017F5r 2               ; PRINT "IN <LINE #>"
0017F5r 2               ; ----------------------------------------------------------------------------
0017F5r 2               INPRT:
0017F5r 2               .ifdef KBD
0017F5r 2  20 rr rr             jsr     LFE0B
0017F8r 2  20 69 6E             .byte	" in"
0017FBr 2  00                   .byte	0
0017FCr 2               .else
0017FCr 2                       lda     #<QT_IN
0017FCr 2                       ldy     #>QT_IN
0017FCr 2                       jsr     GOSTROUT2
0017FCr 2               .endif
0017FCr 2  A5 38                lda     CURLIN+1
0017FEr 2  A6 37                ldx     CURLIN
001800r 2               
001800r 2               ; ----------------------------------------------------------------------------
001800r 2               ; PRINT A,X AS DECIMAL INTEGER
001800r 2               ; ----------------------------------------------------------------------------
001800r 2               LINPRT:
001800r 2  85 5D                sta     FAC+1
001802r 2  86 5E                stx     FAC+2
001804r 2  A2 90                ldx     #$90
001806r 2  38                   sec
001807r 2  20 rr rr             jsr     FLOAT2
00180Ar 2  20 rr rr             jsr     FOUT
00180Dr 2               GOSTROUT2:
00180Dr 2  4C rr rr             jmp     STROUT
001810r 2               
001810r 2               ; ----------------------------------------------------------------------------
001810r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
001810r 2               ; RETURN WITH (Y,A) POINTING AT STRING
001810r 2               ; ----------------------------------------------------------------------------
001810r 2               FOUT:
001810r 2  A0 01                ldy     #$01
001812r 2               
001812r 2               ; ----------------------------------------------------------------------------
001812r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
001812r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
001812r 2               ; (THIS IS USED AS A FLAG)
001812r 2               ; ----------------------------------------------------------------------------
001812r 2               FOUT1:
001812r 2  A9 20                lda     #$20
001814r 2  24 60                bit     FACSIGN
001816r 2  10 02                bpl     L3C73
001818r 2  A9 2D                lda     #$2D
00181Ar 2               L3C73:
00181Ar 2  99 FF 00             sta     STACK2-1,y
00181Dr 2  85 60                sta     FACSIGN
00181Fr 2  84 6A                sty     STRNG2
001821r 2  C8                   iny
001822r 2  A9 30                lda     #$30
001824r 2  A6 5C                ldx     FAC
001826r 2  D0 03                bne     L3C84
001828r 2  4C rr rr             jmp     FOUT4
00182Br 2               L3C84:
00182Br 2  A9 00                lda     #$00
00182Dr 2  E0 80                cpx     #$80
00182Fr 2  F0 02                beq     L3C8C
001831r 2  B0 09                bcs     L3C95
001833r 2               L3C8C:
001833r 2  A9 rr                lda     #<CON_BILLION
001835r 2  A0 rr                ldy     #>CON_BILLION
001837r 2  20 rr rr             jsr     FMULT
00183Ar 2               .ifdef CONFIG_SMALL
00183Ar 2  A9 FA                lda     #-6 ; exponent adjustment
00183Cr 2               .else
00183Cr 2                       lda     #-9
00183Cr 2               .endif
00183Cr 2               L3C95:
00183Cr 2  85 58                sta     INDX
00183Er 2               ; ----------------------------------------------------------------------------
00183Er 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
00183Er 2               ; ----------------------------------------------------------------------------
00183Er 2               L3C97:
00183Er 2  A9 rr                lda     #<CON_999999999
001840r 2  A0 rr                ldy     #>CON_999999999
001842r 2  20 rr rr             jsr     FCOMP
001845r 2  F0 1E                beq     L3CBE
001847r 2  10 12                bpl     L3CB4
001849r 2               L3CA2:
001849r 2  A9 rr                lda     #<CON_99999999_9
00184Br 2  A0 rr                ldy     #>CON_99999999_9
00184Dr 2  20 rr rr             jsr     FCOMP
001850r 2  F0 02                beq     L3CAD
001852r 2  10 0E                bpl     L3CBB
001854r 2               L3CAD:
001854r 2  20 rr rr             jsr     MUL10
001857r 2  C6 58                dec     INDX
001859r 2  D0 EE                bne     L3CA2
00185Br 2               L3CB4:
00185Br 2  20 rr rr             jsr     DIV10
00185Er 2  E6 58                inc     INDX
001860r 2  D0 DC                bne     L3C97
001862r 2               L3CBB:
001862r 2  20 rr rr             jsr     FADDH
001865r 2               L3CBE:
001865r 2  20 rr rr             jsr     QINT
001868r 2               ; ----------------------------------------------------------------------------
001868r 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001868r 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001868r 2               ;
001868r 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001868r 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001868r 2               ; ----------------------------------------------------------------------------
001868r 2  A2 01                ldx     #$01
00186Ar 2  A5 58                lda     INDX
00186Cr 2  18                   clc
00186Dr 2  69 07                adc     #3*BYTES_FP-5
00186Fr 2  30 09                bmi     L3CD3
001871r 2  C9 08                cmp     #3*BYTES_FP-4
001873r 2  B0 06                bcs     L3CD4
001875r 2  69 FF                adc     #$FF
001877r 2  AA                   tax
001878r 2  A9 02                lda     #$02
00187Ar 2               L3CD3:
00187Ar 2  38                   sec
00187Br 2               L3CD4:
00187Br 2  E9 02                sbc     #$02
00187Dr 2  85 59                sta     EXPON
00187Fr 2  86 58                stx     INDX
001881r 2  8A                   txa
001882r 2  F0 02                beq     L3CDF
001884r 2  10 13                bpl     L3CF2
001886r 2               L3CDF:
001886r 2  A4 6A                ldy     STRNG2
001888r 2  A9 2E                lda     #$2E
00188Ar 2  C8                   iny
00188Br 2  99 FF 00             sta     STACK2-1,y
00188Er 2  8A                   txa
00188Fr 2  F0 06                beq     L3CF0
001891r 2  A9 30                lda     #$30
001893r 2  C8                   iny
001894r 2  99 FF 00             sta     STACK2-1,y
001897r 2               L3CF0:
001897r 2  84 6A                sty     STRNG2
001899r 2               ; ----------------------------------------------------------------------------
001899r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001899r 2               ; ----------------------------------------------------------------------------
001899r 2               L3CF2:
001899r 2  A0 00                ldy     #$00
00189Br 2               LDD3A:
00189Br 2  A2 80                ldx     #$80
00189Dr 2               L3CF6:
00189Dr 2  A5 5F                lda     FAC_LAST
00189Fr 2  18                   clc
0018A0r 2               .ifndef CONFIG_SMALL
0018A0r 2                       adc     DECTBL+3,y
0018A0r 2                       sta     FAC+4
0018A0r 2                       lda     FAC+3
0018A0r 2               .endif
0018A0r 2  79 rr rr             adc     DECTBL+2,y
0018A3r 2  85 5F                sta     FAC+3
0018A5r 2  A5 5E                lda     FAC+2
0018A7r 2  79 rr rr             adc     DECTBL+1,y
0018AAr 2  85 5E                sta     FAC+2
0018ACr 2  A5 5D                lda     FAC+1
0018AEr 2  79 rr rr             adc     DECTBL,y
0018B1r 2  85 5D                sta     FAC+1
0018B3r 2  E8                   inx
0018B4r 2  B0 04                bcs     L3D1A
0018B6r 2  10 E5                bpl     L3CF6
0018B8r 2  30 02                bmi     L3D1C
0018BAr 2               L3D1A:
0018BAr 2  30 E1                bmi     L3CF6
0018BCr 2               L3D1C:
0018BCr 2  8A                   txa
0018BDr 2  90 04                bcc     L3D23
0018BFr 2  49 FF                eor     #$FF
0018C1r 2  69 0A                adc     #$0A
0018C3r 2               L3D23:
0018C3r 2  69 2F                adc     #$2F
0018C5r 2  C8                   iny
0018C6r 2  C8                   iny
0018C7r 2  C8                   iny
0018C8r 2               .ifndef CONFIG_SMALL
0018C8r 2                       iny
0018C8r 2               .endif
0018C8r 2  84 45                sty     VARPNT
0018CAr 2  A4 6A                ldy     STRNG2
0018CCr 2  C8                   iny
0018CDr 2  AA                   tax
0018CEr 2  29 7F                and     #$7F
0018D0r 2  99 FF 00             sta     STACK2-1,y
0018D3r 2  C6 58                dec     INDX
0018D5r 2  D0 06                bne     L3D3E
0018D7r 2  A9 2E                lda     #$2E
0018D9r 2  C8                   iny
0018DAr 2  99 FF 00             sta     STACK2-1,y
0018DDr 2               L3D3E:
0018DDr 2  84 6A                sty     STRNG2
0018DFr 2  A4 45                ldy     VARPNT
0018E1r 2  8A                   txa
0018E2r 2  49 FF                eor     #$FF
0018E4r 2  29 80                and     #$80
0018E6r 2  AA                   tax
0018E7r 2  C0 12                cpy     #DECTBL_END-DECTBL
0018E9r 2               .ifdef CONFIG_CBM_ALL
0018E9r 2                       beq     LDD96
0018E9r 2                       cpy     #$3C ; XXX
0018E9r 2               .endif
0018E9r 2  D0 B2                bne     L3CF6
0018EBr 2               ; ----------------------------------------------------------------------------
0018EBr 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0018EBr 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0018EBr 2               ; DECIMAL POINT.
0018EBr 2               ; ----------------------------------------------------------------------------
0018EBr 2               LDD96:
0018EBr 2  A4 6A                ldy     STRNG2
0018EDr 2               L3D4E:
0018EDr 2  B9 FF 00             lda     STACK2-1,y
0018F0r 2  88                   dey
0018F1r 2  C9 30                cmp     #$30
0018F3r 2  F0 F8                beq     L3D4E
0018F5r 2  C9 2E                cmp     #$2E
0018F7r 2  F0 01                beq     L3D5B
0018F9r 2  C8                   iny
0018FAr 2               L3D5B:
0018FAr 2  A9 2B                lda     #$2B
0018FCr 2  A6 59                ldx     EXPON
0018FEr 2  F0 2E                beq     L3D8F
001900r 2  10 08                bpl     L3D6B
001902r 2  A9 00                lda     #$00
001904r 2  38                   sec
001905r 2  E5 59                sbc     EXPON
001907r 2  AA                   tax
001908r 2  A9 2D                lda     #$2D
00190Ar 2               L3D6B:
00190Ar 2  99 01 01             sta     STACK2+1,y
00190Dr 2  A9 45                lda     #$45
00190Fr 2  99 00 01             sta     STACK2,y
001912r 2  8A                   txa
001913r 2  A2 2F                ldx     #$2F
001915r 2  38                   sec
001916r 2               L3D77:
001916r 2  E8                   inx
001917r 2  E9 0A                sbc     #$0A
001919r 2  B0 FB                bcs     L3D77
00191Br 2  69 3A                adc     #$3A
00191Dr 2  99 03 01             sta     STACK2+3,y
001920r 2  8A                   txa
001921r 2  99 02 01             sta     STACK2+2,y
001924r 2  A9 00                lda     #$00
001926r 2  99 04 01             sta     STACK2+4,y
001929r 2  F0 08                beq     L3D94
00192Br 2               FOUT4:
00192Br 2  99 FF 00             sta     STACK2-1,y
00192Er 2               L3D8F:
00192Er 2  A9 00                lda     #$00
001930r 2  99 00 01             sta     STACK2,y
001933r 2               L3D94:
001933r 2  A9 00                lda     #<STACK2
001935r 2  A0 01                ldy     #>STACK2
001937r 2  60                   rts
001938r 2               
001938r 2               ; ----------------------------------------------------------------------------
001938r 2               CON_HALF:
001938r 2               .ifdef CONFIG_SMALL
001938r 2  80 00 00 00          .byte   $80,$00,$00,$00
00193Cr 2               .else
00193Cr 2                       .byte   $80,$00,$00,$00,$00
00193Cr 2               .endif
00193Cr 2               
00193Cr 2               ; ----------------------------------------------------------------------------
00193Cr 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
00193Cr 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
00193Cr 2               ; ----------------------------------------------------------------------------
00193Cr 2               DECTBL:
00193Cr 2               .ifdef CONFIG_SMALL
00193Cr 2  FE 79 60             .byte   $FE,$79,$60 ; -100000
00193Fr 2  00 27 10     		.byte	$00,$27,$10 ; 10000
001942r 2  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
001945r 2  00 00 64     		.byte	$00,$00,$64 ; 100
001948r 2  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
00194Br 2  00 00 01     		.byte	$00,$00,$01 ; 1
00194Er 2               .else
00194Er 2               		.byte	$FA,$0A,$1F,$00	; -100000000
00194Er 2               		.byte	$00,$98,$96,$80	; 10000000
00194Er 2               		.byte	$FF,$F0,$BD,$C0	; -1000000
00194Er 2               		.byte	$00,$01,$86,$A0	; 100000
00194Er 2               		.byte	$FF,$FF,$D8,$F0	; -10000
00194Er 2               		.byte   $00,$00,$03,$E8	; 1000
00194Er 2               		.byte	$FF,$FF,$FF,$9C	; -100
00194Er 2               		.byte   $00,$00,$00,$0A	; 10
00194Er 2               		.byte	$FF,$FF,$FF,$FF	; -1
00194Er 2               .endif
00194Er 2               DECTBL_END:
00194Er 2               .ifdef CONFIG_CBM_ALL
00194Er 2               		.byte	$FF,$DF,$0A,$80 ; TI$
00194Er 2               		.byte	$00,$03,$4B,$C0
00194Er 2               		.byte	$FF,$FF,$73,$60
00194Er 2               		.byte	$00,$00,$0E,$10
00194Er 2               		.byte	$FF,$FF,$FD,$A8
00194Er 2               		.byte	$00,$00,$00,$3C
00194Er 2               .endif
00194Er 2               .ifdef CONFIG_2
00194Er 2               C_ZERO = CON_HALF + 2
00194Er 2               .endif
00194Er 2               
00194Er 2               ; ----------------------------------------------------------------------------
00194Er 2               ; "SQR" FUNCTION
00194Er 2               ; ----------------------------------------------------------------------------
00194Er 2               SQR:
00194Er 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001951r 2  A9 rr                lda     #<CON_HALF
001953r 2  A0 rr                ldy     #>CON_HALF
001955r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001958r 2               
001958r 2               ; ----------------------------------------------------------------------------
001958r 2               ; EXPONENTIATION OPERATION
001958r 2               ;
001958r 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001958r 2               ; ----------------------------------------------------------------------------
001958r 2               FPWRT:
001958r 2  F0 63                beq     EXP
00195Ar 2  A5 63                lda     ARG
00195Cr 2  D0 03                bne     L3DD5
00195Er 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001961r 2               L3DD5:
001961r 2  A2 4C                ldx     #TEMP3
001963r 2  A0 00                ldy     #$00
001965r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001968r 2  A5 67                lda     ARGSIGN
00196Ar 2  10 0F                bpl     L3DEF
00196Cr 2  20 rr rr             jsr     INT
00196Fr 2  A9 4C                lda     #TEMP3
001971r 2  A0 00                ldy     #$00
001973r 2  20 rr rr             jsr     FCOMP
001976r 2  D0 03                bne     L3DEF
001978r 2  98                   tya
001979r 2  A4 06                ldy     CHARAC
00197Br 2               L3DEF:
00197Br 2  20 rr rr             jsr     MFA
00197Er 2  98                   tya
00197Fr 2  48                   pha
001980r 2  20 rr rr             jsr     LOG
001983r 2  A9 4C                lda     #TEMP3
001985r 2  A0 00                ldy     #$00
001987r 2  20 rr rr             jsr     FMULT
00198Ar 2  20 rr rr             jsr     EXP
00198Dr 2  68                   pla
00198Er 2  4A                   lsr     a
00198Fr 2  90 0A                bcc     L3E0F
001991r 2               
001991r 2               ; ----------------------------------------------------------------------------
001991r 2               ; NEGATE VALUE IN FAC
001991r 2               ; ----------------------------------------------------------------------------
001991r 2               NEGOP:
001991r 2  A5 5C                lda     FAC
001993r 2  F0 06                beq     L3E0F
001995r 2  A5 60                lda     FACSIGN
001997r 2  49 FF                eor     #$FF
001999r 2  85 60                sta     FACSIGN
00199Br 2               L3E0F:
00199Br 2  60                   rts
00199Cr 2               
00199Cr 2               ; ----------------------------------------------------------------------------
00199Cr 2               .ifdef CONFIG_SMALL
00199Cr 2               CON_LOG_E:
00199Cr 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B
0019A0r 2               POLY_EXP:
0019A0r 2  06           		.byte	$06
0019A1r 2  74 63 90 8C  		.byte	$74,$63,$90,$8C
0019A5r 2  77 23 0C AB  		.byte	$77,$23,$0C,$AB
0019A9r 2  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
0019ADr 2  7C 63 42 80  		.byte	$7C,$63,$42,$80
0019B1r 2  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
0019B5r 2  80 31 72 15  		.byte	$80,$31,$72,$15
0019B9r 2  81 00 00 00  		.byte	$81,$00,$00,$00
0019BDr 2               .else
0019BDr 2               CON_LOG_E:
0019BDr 2                       .byte   $81,$38,$AA,$3B,$29
0019BDr 2               POLY_EXP:
0019BDr 2                       .byte   $07
0019BDr 2               		.byte	$71,$34,$58,$3E,$56
0019BDr 2               		.byte	$74,$16,$7E,$B3,$1B
0019BDr 2               		.byte	$77,$2F,$EE,$E3,$85
0019BDr 2                       .byte   $7A,$1D,$84,$1C,$2A
0019BDr 2               		.byte	$7C,$63,$59,$58,$0A
0019BDr 2               		.byte	$7E,$75,$FD,$E7,$C6
0019BDr 2               		.byte	$80,$31,$72,$18,$10
0019BDr 2               		.byte	$81,$00,$00,$00,$00
0019BDr 2               .endif
0019BDr 2               
0019BDr 2               ; ----------------------------------------------------------------------------
0019BDr 2               ; "EXP" FUNCTION
0019BDr 2               ;
0019BDr 2               ; FAC = E ^ FAC
0019BDr 2               ; ----------------------------------------------------------------------------
0019BDr 2               EXP:
0019BDr 2  A9 rr                lda     #<CON_LOG_E
0019BFr 2  A0 rr                ldy     #>CON_LOG_E
0019C1r 2  20 rr rr             jsr     FMULT
0019C4r 2  A5 69                lda     FACEXTENSION
0019C6r 2  69 50                adc     #$50
0019C8r 2  90 03                bcc     L3E4E
0019CAr 2  20 rr rr             jsr     INCREMENT_MANTISSA
0019CDr 2               L3E4E:
0019CDr 2  85 53                sta     ARGEXTENSION
0019CFr 2  20 rr rr             jsr     MAF
0019D2r 2  A5 5C                lda     FAC
0019D4r 2  C9 88                cmp     #$88
0019D6r 2  90 03                bcc     L3E5C
0019D8r 2               L3E59:
0019D8r 2  20 rr rr             jsr     OUTOFRNG
0019DBr 2               L3E5C:
0019DBr 2  20 rr rr             jsr     INT
0019DEr 2  A5 06                lda     CHARAC
0019E0r 2  18                   clc
0019E1r 2  69 81                adc     #$81
0019E3r 2  F0 F3                beq     L3E59
0019E5r 2  38                   sec
0019E6r 2  E9 01                sbc     #$01
0019E8r 2  48                   pha
0019E9r 2  A2 04                ldx     #BYTES_FP
0019EBr 2               L3E6C:
0019EBr 2  B5 63                lda     ARG,x
0019EDr 2  B4 5C                ldy     FAC,x
0019EFr 2  95 5C                sta     FAC,x
0019F1r 2  94 63                sty     ARG,x
0019F3r 2  CA                   dex
0019F4r 2  10 F5                bpl     L3E6C
0019F6r 2  A5 53                lda     ARGEXTENSION
0019F8r 2  85 69                sta     FACEXTENSION
0019FAr 2  20 rr rr             jsr     FSUBT
0019FDr 2  20 rr rr             jsr     NEGOP
001A00r 2  A9 rr                lda     #<POLY_EXP
001A02r 2  A0 rr                ldy     #>POLY_EXP
001A04r 2  20 rr rr             jsr     POLYNOMIAL
001A07r 2  A9 00                lda     #$00
001A09r 2  85 68                sta     SGNCPR
001A0Br 2  68                   pla
001A0Cr 2  20 rr rr             jsr     ADD_EXPONENTS1
001A0Fr 2  60                   rts
001A10r 2               
001A10r 2               ; ----------------------------------------------------------------------------
001A10r 2               ; ODD POLYNOMIAL SUBROUTINE
001A10r 2               ;
001A10r 2               ; F(X) = X * P(X^2)
001A10r 2               ;
001A10r 2               ; WHERE:  X IS VALUE IN FAC
001A10r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001A10r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001A10r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001A10r 2               ;
001A10r 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001A10r 2               ; ----------------------------------------------------------------------------
001A10r 2               POLYNOMIAL_ODD:
001A10r 2  85 6A                sta     STRNG2
001A12r 2  84 6B                sty     STRNG2+1
001A14r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001A17r 2  A9 54                lda     #TEMP1X
001A19r 2  20 rr rr             jsr     FMULT
001A1Cr 2  20 rr rr             jsr     SERMAIN
001A1Fr 2  A9 54                lda     #TEMP1X
001A21r 2  A0 00                ldy     #$00
001A23r 2  4C rr rr             jmp     FMULT
001A26r 2               
001A26r 2               ; ----------------------------------------------------------------------------
001A26r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001A26r 2               ;
001A26r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001A26r 2               ;
001A26r 2               ; WHERE:  X IS VALUE IN FAC
001A26r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001A26r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001A26r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001A26r 2               ; ----------------------------------------------------------------------------
001A26r 2               POLYNOMIAL:
001A26r 2  85 6A                sta     STRNG2
001A28r 2  84 6B                sty     STRNG2+1
001A2Ar 2               SERMAIN:
001A2Ar 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001A2Dr 2  B1 6A                lda     (STRNG2),y
001A2Fr 2  85 61                sta     SERLEN
001A31r 2  A4 6A                ldy     STRNG2
001A33r 2  C8                   iny
001A34r 2  98                   tya
001A35r 2  D0 02                bne     L3EBA
001A37r 2  E6 6B                inc     STRNG2+1
001A39r 2               L3EBA:
001A39r 2  85 6A                sta     STRNG2
001A3Br 2  A4 6B                ldy     STRNG2+1
001A3Dr 2               L3EBE:
001A3Dr 2  20 rr rr             jsr     FMULT
001A40r 2  A5 6A                lda     STRNG2
001A42r 2  A4 6B                ldy     STRNG2+1
001A44r 2  18                   clc
001A45r 2  69 04                adc     #BYTES_FP
001A47r 2  90 01                bcc     L3ECB
001A49r 2  C8                   iny
001A4Ar 2               L3ECB:
001A4Ar 2  85 6A                sta     STRNG2
001A4Cr 2  84 6B                sty     STRNG2+1
001A4Er 2  20 rr rr             jsr     FADD
001A51r 2  A9 58                lda     #TEMP2
001A53r 2  A0 00                ldy     #$00
001A55r 2  C6 61                dec     SERLEN
001A57r 2  D0 E4                bne     L3EBE
001A59r 2               RTS19:
001A59r 2  60                   rts
001A5Ar 2               
001A5Ar 1               .include "chrget.s"
001A5Ar 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 73                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 74                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2  20 rr rr             jsr     LF430
00000Cr 2               .endif
00000Cr 2  C9 3A                cmp     #$3A
00000Er 2  B0 0A                bcs     L4058
000010r 2               GENERIC_CHRGOT2:
000010r 2  C9 20                cmp     #$20
000012r 2  F0 EC                beq     GENERIC_CHRGET
000014r 2  38                   sec
000015r 2  E9 30                sbc     #$30
000017r 2  38                   sec
000018r 2  E9 D0                sbc     #$D0
00001Ar 2               L4058:
00001Ar 2  60                   rts
00001Br 2               
00001Br 1               .include "rnd.s"
00001Br 2               .segment "CODE"
001A5Ar 2               
001A5Ar 2               ; ----------------------------------------------------------------------------
001A5Ar 2               ; "RND" FUNCTION
001A5Ar 2               ; ----------------------------------------------------------------------------
001A5Ar 2               
001A5Ar 2               .ifdef KBD
001A5Ar 2               RND:
001A5Ar 2  A2 10                ldx     #$10
001A5Cr 2  20 rr rr             jsr     SIGN
001A5Fr 2  F0 32                beq     LFC26
001A61r 2  30 1A                bmi     LFC10
001A63r 2  A5 87                lda     RNDSEED
001A65r 2  A4 88                ldy     RNDSEED+1
001A67r 2               LFBFA:
001A67r 2  85 5E                sta     FAC+2
001A69r 2  84 5D                sty     FAC+1
001A6Br 2               LFBFE:
001A6Br 2  0A                   asl     a
001A6Cr 2  0A                   asl     a
001A6Dr 2  45 5E                eor     FAC+2
001A6Fr 2  0A                   asl     a
001A70r 2  45 5D                eor     FAC+1
001A72r 2  0A                   asl     a
001A73r 2  0A                   asl     a
001A74r 2  0A                   asl     a
001A75r 2  0A                   asl     a
001A76r 2  45 5D                eor     FAC+1
001A78r 2  0A                   asl     a
001A79r 2  26 5E                rol     FAC+2
001A7Br 2  26 5D                rol     FAC+1
001A7Dr 2               LFC10:
001A7Dr 2  A5 5E                lda     FAC+2
001A7Fr 2  CA                   dex
001A80r 2  D0 E9                bne     LFBFE
001A82r 2  85 87                sta     RNDSEED
001A84r 2  85 5F                sta     FAC+3
001A86r 2  A5 5D                lda     FAC+1
001A88r 2  85 88                sta     RNDSEED+1
001A8Ar 2  A9 80                lda     #$80
001A8Cr 2  85 5C                sta     FAC
001A8Er 2  86 60                stx     FACSIGN
001A90r 2  4C rr rr             jmp     NORMALIZE_FAC2
001A93r 2               LFC26:
001A93r 2  AC CA 03             ldy     $03CA
001A96r 2  AD C7 03             lda     $03C7
001A99r 2  09 01                ora     #$01
001A9Br 2               GOMOVMF:
001A9Br 2  D0 CA                bne     LFBFA
001A9Dr 2  F0                   .byte   $F0
001A9Er 2               .else
001A9Er 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001A9Er 2               ; (non CONFIG_SMALL)
001A9Er 2               CONRND1:
001A9Er 2                       .byte   $98,$35,$44,$7A
001A9Er 2               CONRND2:
001A9Er 2                       .byte   $68,$28,$B1,$46
001A9Er 2               RND:
001A9Er 2                       jsr     SIGN
001A9Er 2               .ifdef CONFIG_CBM_ALL
001A9Er 2                       bmi     L3F01
001A9Er 2                       bne     LDF63
001A9Er 2                       lda     ENTROPY
001A9Er 2                       sta     FAC+1
001A9Er 2                       lda     ENTROPY+4
001A9Er 2                       sta     FAC+2
001A9Er 2                       lda     ENTROPY+1
001A9Er 2                       sta     FAC+3
001A9Er 2                       lda     ENTROPY+5
001A9Er 2                       sta     FAC+4
001A9Er 2                       jmp     LDF88
001A9Er 2               LDF63:
001A9Er 2               .else
001A9Er 2                       tax
001A9Er 2                       bmi     L3F01
001A9Er 2               .endif
001A9Er 2                       lda     #<RNDSEED
001A9Er 2                       ldy     #>RNDSEED
001A9Er 2                       jsr     LOAD_FAC_FROM_YA
001A9Er 2               .ifndef CONFIG_CBM_ALL
001A9Er 2                       txa
001A9Er 2                       beq     RTS19
001A9Er 2               .endif
001A9Er 2                       lda     #<CONRND1
001A9Er 2                       ldy     #>CONRND1
001A9Er 2                       jsr     FMULT
001A9Er 2                       lda     #<CONRND2
001A9Er 2                       ldy     #>CONRND2
001A9Er 2                       jsr     FADD
001A9Er 2               L3F01:
001A9Er 2                       ldx     FAC_LAST
001A9Er 2                       lda     FAC+1
001A9Er 2                       sta     FAC_LAST
001A9Er 2                       stx     FAC+1
001A9Er 2               .ifdef CONFIG_CBM_ALL
001A9Er 2                       ldx     FAC+2
001A9Er 2                       lda     FAC+3
001A9Er 2                       sta     FAC+2
001A9Er 2                       stx     FAC+3
001A9Er 2               LDF88:
001A9Er 2               .endif
001A9Er 2                       lda     #$00
001A9Er 2                       sta     FACSIGN
001A9Er 2                       lda     FAC
001A9Er 2                       sta     FACEXTENSION
001A9Er 2                       lda     #$80
001A9Er 2                       sta     FAC
001A9Er 2                       jsr     NORMALIZE_FAC2
001A9Er 2                       ldx     #<RNDSEED
001A9Er 2                       ldy     #>RNDSEED
001A9Er 2               GOMOVMF:
001A9Er 2                       jmp     STORE_FAC_AT_YX_ROUNDED
001A9Er 2               .endif
001A9Er 2               
001A9Er 2               .segment "CHRGET"
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
00001Br 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
00001Br 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
00001Br 2               ; (on all non-CONFIG_SMALL)
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GENERIC_RNDSEED:
00001Br 2               .ifndef KBD
00001Br 2               ; random number seed
00001Br 2                 .ifdef CONFIG_SMALL
00001Br 2                       .byte   $80,$4F,$C7,$52
00001Br 2                 .else
00001Br 2                   .ifdef CONFIG_11
00001Br 2                       .byte   $80,$4F,$C7,$52,$58
00001Br 2                   .else
00001Br 2                       .byte   $80,$4F,$C7,$52,$59
00001Br 2                   .endif
00001Br 2                 .endif
00001Br 2               .endif
00001Br 2               GENERIC_CHRGET_END:
00001Br 2               
00001Br 1               .include "trig.s"
00001Br 2               .segment "CODE"
001A9Er 2               
001A9Er 2               .ifndef SYM1
001A9Er 2               SIN_COS_TAN_ATN:
001A9Er 2               ; ----------------------------------------------------------------------------
001A9Er 2               ; "COS" FUNCTION
001A9Er 2               ; ----------------------------------------------------------------------------
001A9Er 2               COS:
001A9Er 2  A9 rr                lda     #<CON_PI_HALF
001AA0r 2  A0 rr                ldy     #>CON_PI_HALF
001AA2r 2  20 rr rr             jsr     FADD
001AA5r 2               
001AA5r 2               ; ----------------------------------------------------------------------------
001AA5r 2               ; "SIN" FUNCTION
001AA5r 2               ; ----------------------------------------------------------------------------
001AA5r 2               SIN:
001AA5r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001AA8r 2  A9 rr                lda     #<CON_PI_DOUB
001AAAr 2  A0 rr                ldy     #>CON_PI_DOUB
001AACr 2  A6 67                ldx     ARGSIGN
001AAEr 2  20 rr rr             jsr     DIV
001AB1r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001AB4r 2  20 rr rr             jsr     INT
001AB7r 2  A9 00                lda     #$00
001AB9r 2  85 68                sta     STRNG1
001ABBr 2  20 rr rr             jsr     FSUBT
001ABEr 2               ; ----------------------------------------------------------------------------
001ABEr 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001ABEr 2               ;
001ABEr 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001ABEr 2               ;
001ABEr 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001ABEr 2               ; ----------------------------------------------------------------------------
001ABEr 2  A9 rr                lda     #<QUARTER
001AC0r 2  A0 rr                ldy     #>QUARTER
001AC2r 2  20 rr rr             jsr     FSUB
001AC5r 2  A5 60                lda     FACSIGN
001AC7r 2  48                   pha
001AC8r 2  10 0D                bpl     SIN1
001ACAr 2  20 rr rr             jsr     FADDH
001ACDr 2  A5 60                lda     FACSIGN
001ACFr 2  30 09                bmi     L3F5B
001AD1r 2  A5 0E                lda     CPRMASK
001AD3r 2  49 FF                eor     #$FF
001AD5r 2  85 0E                sta     CPRMASK
001AD7r 2               ; ----------------------------------------------------------------------------
001AD7r 2               ; IF FALL THRU, RANGE IS 0...1/2
001AD7r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001AD7r 2               ; ----------------------------------------------------------------------------
001AD7r 2               SIN1:
001AD7r 2  20 rr rr             jsr     NEGOP
001ADAr 2               ; ----------------------------------------------------------------------------
001ADAr 2               ; IF FALL THRU, RANGE IS -1/2...0
001ADAr 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001ADAr 2               ; ----------------------------------------------------------------------------
001ADAr 2               L3F5B:
001ADAr 2  A9 rr                lda     #<QUARTER
001ADCr 2  A0 rr                ldy     #>QUARTER
001ADEr 2  20 rr rr             jsr     FADD
001AE1r 2  68                   pla
001AE2r 2  10 03                bpl     L3F68
001AE4r 2  20 rr rr             jsr     NEGOP
001AE7r 2               L3F68:
001AE7r 2  A9 rr                lda     #<POLY_SIN
001AE9r 2  A0 rr                ldy     #>POLY_SIN
001AEBr 2  4C rr rr             jmp     POLYNOMIAL_ODD
001AEEr 2               
001AEEr 2               ; ----------------------------------------------------------------------------
001AEEr 2               ; "TAN" FUNCTION
001AEEr 2               ;
001AEEr 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001AEEr 2               ; ----------------------------------------------------------------------------
001AEEr 2               TAN:
001AEEr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001AF1r 2  A9 00                lda     #$00
001AF3r 2  85 0E                sta     CPRMASK
001AF5r 2  20 rr rr             jsr     SIN
001AF8r 2  A2 4C                ldx     #TEMP3
001AFAr 2  A0 00                ldy     #$00
001AFCr 2  20 rr rr             jsr     GOMOVMF
001AFFr 2  A9 54                lda     #TEMP1+(5-BYTES_FP)
001B01r 2  A0 00                ldy     #$00
001B03r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001B06r 2  A9 00                lda     #$00
001B08r 2  85 60                sta     FACSIGN
001B0Ar 2  A5 0E                lda     CPRMASK
001B0Cr 2  20 rr rr             jsr     TAN1
001B0Fr 2  A9 4C                lda     #TEMP3
001B11r 2  A0 00                ldy     #$00
001B13r 2  4C rr rr             jmp     FDIV
001B16r 2               TAN1:
001B16r 2  48                   pha
001B17r 2  4C rr rr             jmp     SIN1
001B1Ar 2               
001B1Ar 2               ; ----------------------------------------------------------------------------
001B1Ar 2               .ifdef CONFIG_SMALL
001B1Ar 2               CON_PI_HALF:
001B1Ar 2  81 49 0F DB          .byte   $81,$49,$0F,$DB
001B1Er 2               CON_PI_DOUB:
001B1Er 2  83 49 0F DB          .byte   $83,$49,$0F,$DB
001B22r 2               QUARTER:
001B22r 2  7F 00 00 00          .byte   $7F,$00,$00,$00
001B26r 2               POLY_SIN:
001B26r 2  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001B2Ar 2  FB 87 99 26  
001B2Er 2  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001B32r 2  58 86 A5 5D  
001B36r 2  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
001B3Ar 2  DB           
001B3Br 2               .else
001B3Br 2               CON_PI_HALF:
001B3Br 2                       .byte   $81,$49,$0F,$DA,$A2
001B3Br 2               CON_PI_DOUB:
001B3Br 2                       .byte   $83,$49,$0F,$DA,$A2
001B3Br 2               QUARTER:
001B3Br 2                       .byte   $7F,$00,$00,$00,$00
001B3Br 2               POLY_SIN:
001B3Br 2                       .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001B3Br 2                       .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001B3Br 2                       .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001B3Br 2                       .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001B3Br 2                 .ifndef CONFIG_11
001B3Br 2               ; no easter egg text before BASIC 1.1
001B3Br 2                 .elseif !.def(CONFIG_2A)
001B3Br 2               ; ASCII encoded easter egg
001B3Br 2               MICROSOFT:
001B3Br 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001B3Br 2                       .byte   $CE,$CA
001B3Br 2                 .else
001B3Br 2               ; PET encoded easter egg text since CBM2
001B3Br 2               MICROSOFT:
001B3Br 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001B3Br 2                       .byte   $89,$CD
001B3Br 2                 .endif
001B3Br 2               .endif
001B3Br 2               
001B3Br 2               .ifndef AIM65
001B3Br 2               ; ----------------------------------------------------------------------------
001B3Br 2               ; "ATN" FUNCTION
001B3Br 2               ; ----------------------------------------------------------------------------
001B3Br 2               ATN:
001B3Br 2  A5 60                lda     FACSIGN
001B3Dr 2  48                   pha
001B3Er 2  10 03                bpl     L3FDB
001B40r 2  20 rr rr             jsr     NEGOP
001B43r 2               L3FDB:
001B43r 2  A5 5C                lda     FAC
001B45r 2  48                   pha
001B46r 2  C9 81                cmp     #$81
001B48r 2  90 07                bcc     L3FE9
001B4Ar 2  A9 rr                lda     #<CON_ONE
001B4Cr 2  A0 rr                ldy     #>CON_ONE
001B4Er 2  20 rr rr             jsr     FDIV
001B51r 2               ; ----------------------------------------------------------------------------
001B51r 2               ; 0 <= X <= 1
001B51r 2               ; 0 <= ATN(X) <= PI/8
001B51r 2               ; ----------------------------------------------------------------------------
001B51r 2               L3FE9:
001B51r 2  A9 rr                lda     #<POLY_ATN
001B53r 2  A0 rr                ldy     #>POLY_ATN
001B55r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001B58r 2  68                   pla
001B59r 2  C9 81                cmp     #$81
001B5Br 2  90 07                bcc     L3FFC
001B5Dr 2  A9 rr                lda     #<CON_PI_HALF
001B5Fr 2  A0 rr                ldy     #>CON_PI_HALF
001B61r 2  20 rr rr             jsr     FSUB
001B64r 2               L3FFC:
001B64r 2  68                   pla
001B65r 2  10 03                bpl     L4002
001B67r 2  4C rr rr             jmp     NEGOP
001B6Ar 2               L4002:
001B6Ar 2  60                   rts
001B6Br 2               
001B6Br 2               ; ----------------------------------------------------------------------------
001B6Br 2               POLY_ATN:
001B6Br 2               .ifdef CONFIG_SMALL
001B6Br 2  08                   .byte   $08
001B6Cr 2  78 3A C5 37  		.byte	$78,$3A,$C5,$37
001B70r 2  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
001B74r 2  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
001B78r 2  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
001B7Cr 2  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
001B80r 2  7E 91 72 00  		.byte	$7E,$91,$72,$00
001B84r 2  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
001B88r 2  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
001B8Cr 2  81 00 00 00  		.byte	$81,$00,$00,$00
001B90r 2               .else
001B90r 2                       .byte   $0B
001B90r 2               		.byte	$76,$B3,$83,$BD,$D3
001B90r 2               		.byte	$79,$1E,$F4,$A6,$F5
001B90r 2               		.byte	$7B,$83,$FC,$B0,$10
001B90r 2                       .byte   $7C,$0C,$1F,$67,$CA
001B90r 2               		.byte	$7C,$DE,$53,$CB,$C1
001B90r 2               		.byte	$7D,$14,$64,$70,$4C
001B90r 2               		.byte	$7D,$B7,$EA,$51,$7A
001B90r 2               		.byte	$7D,$63,$30,$88,$7E
001B90r 2               		.byte	$7E,$92,$44,$99,$3A
001B90r 2               		.byte	$7E,$4C,$CC,$91,$C7
001B90r 2               		.byte	$7F,$AA,$AA,$AA,$13
001B90r 2                       .byte   $81,$00,$00,$00,$00
001B90r 2               .endif
001B90r 2               
001B90r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001B90r 2               		.byte	$00 ; XXX
001B90r 2               .endif
001B90r 2               .endif
001B90r 2               .endif
001B90r 2               
001B90r 1               .include "init.s"
001B90r 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2  08                   php
000001r 2  4C rr rr             jmp     FNDLIN
000004r 2               .endif
000004r 2               
000004r 2               ; ----------------------------------------------------------------------------
000004r 2               PR_WRITTEN_BY:
000004r 2               .ifndef KBD
000004r 2                 .ifndef CONFIG_CBM_ALL
000004r 2                   .ifndef AIM65
000004r 2                     .ifndef SYM1
000004r 2                       lda     #<QT_WRITTEN_BY
000004r 2                       ldy     #>QT_WRITTEN_BY
000004r 2                       jsr     STROUT
000004r 2                     .endif
000004r 2                   .endif
000004r 2                 .endif
000004r 2               .endif
000004r 2               COLD_START:
000004r 2               .ifdef SYM1
000004r 2                       jsr     ACCESS
000004r 2               .endif
000004r 2               .ifdef KBD
000004r 2  A9 rr                lda     #<LFD81
000006r 2  8D A0 03             sta     $03A0
000009r 2  A9 rr                lda     #>LFD81
00000Br 2  8D A1 03             sta     $03A1
00000Er 2  A9 20                lda     #$20
000010r 2  8D 80 04             sta     $0480
000013r 2  AD 52 03             lda     $0352
000016r 2  85 04                sta     $04
000018r 2  AD 53 03             lda     $0353
00001Br 2  85 05                sta     $05
00001Dr 2               .else
00001Dr 2                 .ifndef CBM2
00001Dr 2                       ldx     #$FF
00001Dr 2                       stx     CURLIN+1
00001Dr 2                 .endif
00001Dr 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
00001Dr 2                       ldx     #$FB
00001Dr 2                 .elseif .def(AIM65)
00001Dr 2                       ldx     #$FE
00001Dr 2                 .endif
00001Dr 2                       txs
00001Dr 2                 .ifndef CONFIG_CBM_ALL
00001Dr 2                       lda     #<COLD_START
00001Dr 2                       ldy     #>COLD_START
00001Dr 2                       sta     GORESTART+1
00001Dr 2                       sty     GORESTART+2
00001Dr 2                   .ifndef AIM65
00001Dr 2                       sta     GOSTROUT+1
00001Dr 2                       sty     GOSTROUT+2
00001Dr 2                       lda     #<AYINT
00001Dr 2                       ldy     #>AYINT
00001Dr 2                       sta     GOAYINT
00001Dr 2                       sty     GOAYINT+1
00001Dr 2                       lda     #<GIVAYF
00001Dr 2                       ldy     #>GIVAYF
00001Dr 2                       sta     GOGIVEAYF
00001Dr 2                       sty     GOGIVEAYF+1
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2                       lda     #$4C
00001Dr 2                 .ifdef CONFIG_CBM_ALL
00001Dr 2                       sta     JMPADRS
00001Dr 2                 .endif
00001Dr 2                       sta     GORESTART
00001Dr 2                 .ifdef AIM65
00001Dr 2                       sta     JMPADRS
00001Dr 2                       sta     ATN
00001Dr 2                       sta     GOSTROUT
00001Dr 2                 .else
00001Dr 2                 .ifndef CONFIG_CBM_ALL
00001Dr 2                       sta     GOSTROUT
00001Dr 2                       sta     JMPADRS
00001Dr 2                 .endif
00001Dr 2                 .ifdef SYM1
00001Dr 2                       sta     USR1
00001Dr 2                       sta     USR3
00001Dr 2                       sta     USR2
00001Dr 2                 .endif
00001Dr 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
00001Dr 2                       sta     USR
00001Dr 2                 .endif
00001Dr 2                 .endif
00001Dr 2               
00001Dr 2                 .ifndef CONFIG_RAM
00001Dr 2                   .ifdef APPLE
00001Dr 2                         lda     #<USR_FUNC
00001Dr 2                         ldy     #>USR_FUNC
00001Dr 2                   .else
00001Dr 2                         lda     #<IQERR
00001Dr 2                         ldy     #>IQERR
00001Dr 2                   .endif
00001Dr 2                   .ifdef AIM65
00001Dr 2                         sta     ATN+1
00001Dr 2                         sty     ATN+2
00001Dr 2                         sta     GOSTROUT+1
00001Dr 2                         sty     GOSTROUT+2
00001Dr 2                   .else
00001Dr 2                         sta     USR+1
00001Dr 2                         sty     USR+2
00001Dr 2                     .ifdef SYM1
00001Dr 2                         sta     USR1+1
00001Dr 2                         sty     USR1+2
00001Dr 2                         lda     #<DUMPT
00001Dr 2                         ldy     #>DUMPT
00001Dr 2                         sta     USR2+1
00001Dr 2                         sty     USR2+2
00001Dr 2                         lda     #<L8C78
00001Dr 2                         ldy     #>L8C78
00001Dr 2                         sta     USR3+1
00001Dr 2                         sty     USR3+2
00001Dr 2                     .endif
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2                 .ifndef CBM1
00001Dr 2                       lda     #WIDTH
00001Dr 2                       sta     Z17
00001Dr 2                       lda     #WIDTH2
00001Dr 2                       sta     Z18
00001Dr 2                 .endif
00001Dr 2                 .ifdef EATER
00001Dr 2                       jsr     LCDINIT
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               
00001Dr 2               ; All non-CONFIG_SMALL versions of BASIC have
00001Dr 2               ; the same bug here: While the number of bytes
00001Dr 2               ; to be copied is correct for CONFIG_SMALL,
00001Dr 2               ; it is one byte short on non-CONFIG_SMALL:
00001Dr 2               ; It seems the "ldx" value below has been
00001Dr 2               ; hardcoded. So on these configurations,
00001Dr 2               ; the last byte of GENERIC_RNDSEED, which
00001Dr 2               ; is 5 bytes instead of 4, does not get copied -
00001Dr 2               ; which is nothing major, because it is just
00001Dr 2               ; the least significant 8 bits of the mantissa
00001Dr 2               ; of the random number seed.
00001Dr 2               ; KBD added three bytes to CHRGET and removed
00001Dr 2               ; the random number seed, but only adjusted
00001Dr 2               ; the number of bytes by adding 3 - this
00001Dr 2               ; copies four bytes too many, which is no
00001Dr 2               ; problem.
00001Dr 2               .ifdef CONFIG_SMALL
00001Dr 2                 .ifdef KBD
00001Dr 2  A2 1F                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
00001Fr 2                 .else
00001Fr 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
00001Fr 2                 .endif
00001Fr 2               .else
00001Fr 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
00001Fr 2               .endif
00001Fr 2               L4098:
00001Fr 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000022r 2  95 6B                sta     CHRGET-1,x
000024r 2  CA                   dex
000025r 2  D0 F8                bne     L4098
000027r 2               .ifdef CONFIG_2
000027r 2  A9 03                lda     #$03
000029r 2  85 50                sta     DSCLEN
00002Br 2               .endif
00002Br 2               .ifndef KBD
00002Br 2                       txa
00002Br 2                       sta     SHIFTSIGNEXT
00002Br 2                 .ifdef CONFIG_CBM_ALL
00002Br 2                       sta     CURDVC
00002Br 2                 .endif
00002Br 2                       sta     LASTPT+1
00002Br 2                 .ifndef AIM65
00002Br 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
00002Br 2                       sta     Z15
00002Br 2                 .endif
00002Br 2                 .endif
00002Br 2                 .ifndef CONFIG_11
00002Br 2                       sta     POSX
00002Br 2                 .endif
00002Br 2                       pha
00002Br 2                       sta     Z14
00002Br 2                 .ifndef CBM2
00002Br 2                  .ifndef AIM65
00002Br 2                  .ifndef SYM1
00002Br 2                   .ifndef MICROTAN
00002Br 2                       lda     #$03
00002Br 2                       sta     DSCLEN
00002Br 2                   .endif
00002Br 2                  .endif
00002Br 2                  .endif
00002Br 2                   .ifndef CONFIG_11
00002Br 2                       lda     #$2C
00002Br 2                       sta     LINNUM+1
00002Br 2                   .endif
00002Br 2                       jsr     CRDO
00002Br 2                 .endif
00002Br 2                 .ifdef CBM2
00002Br 2                       inx
00002Br 2                       stx     INPUTBUFFER-3
00002Br 2                       stx     INPUTBUFFER-4
00002Br 2                 .endif
00002Br 2                 .ifdef APPLE
00002Br 2                       lda     #$01
00002Br 2                       sta     INPUTBUFFER-3
00002Br 2                       sta     INPUTBUFFER-4
00002Br 2                 .endif
00002Br 2                       ldx     #TEMPST
00002Br 2                       stx     TEMPPT
00002Br 2               .ifndef CONFIG_CBM_ALL
00002Br 2                       lda     #<QT_MEMORY_SIZE
00002Br 2                       ldy     #>QT_MEMORY_SIZE
00002Br 2                       jsr     STROUT
00002Br 2                 .ifdef APPLE
00002Br 2                       jsr     INLINX
00002Br 2                 .else
00002Br 2                       jsr     NXIN
00002Br 2                 .endif
00002Br 2                       stx     TXTPTR
00002Br 2                       sty     TXTPTR+1
00002Br 2                       jsr     CHRGET
00002Br 2                 .ifndef AIM65
00002Br 2                   .ifndef SYM1
00002Br 2                       cmp     #$41
00002Br 2                       beq     PR_WRITTEN_BY
00002Br 2                   .endif
00002Br 2                 .endif
00002Br 2                       tay
00002Br 2                       bne     L40EE
00002Br 2               .endif
00002Br 2               .ifndef CBM2
00002Br 2                       lda     #<RAMSTART2
00002Br 2               .endif
00002Br 2                       ldy     #>RAMSTART2
00002Br 2               .ifdef CONFIG_2
00002Br 2                       sta     TXTTAB
00002Br 2                       sty     TXTTAB+1
00002Br 2               .endif
00002Br 2                       sta     LINNUM
00002Br 2                       sty     LINNUM+1
00002Br 2               .ifdef CBM2
00002Br 2               		tay
00002Br 2               .else
00002Br 2                       ldy     #$00
00002Br 2               .endif
00002Br 2               L40D7:
00002Br 2                       inc     LINNUM
00002Br 2                       bne     L40DD
00002Br 2                       inc     LINNUM+1
00002Br 2               .ifdef CBM1
00002Br 2               ; CBM: hard RAM top limit is $8000
00002Br 2                       lda     LINNUM+1
00002Br 2                       cmp     #$80
00002Br 2                       beq     L40FA
00002Br 2               .endif
00002Br 2               .ifdef CBM2
00002Br 2               ; optimized version of the CBM1 code
00002Br 2                       bmi     L40FA
00002Br 2               .endif
00002Br 2               .if .def(AIM65)
00002Br 2               ; AIM65: hard RAM top limit is $A000
00002Br 2                       lda     LINNUM+1
00002Br 2                       cmp     #$A0
00002Br 2                       beq     L40FA
00002Br 2               .endif
00002Br 2               L40DD:
00002Br 2               .ifdef CONFIG_2
00002Br 2                       lda     #$55 ; 01010101 / 10101010
00002Br 2               .else
00002Br 2                       lda     #$92 ; 10010010 / 00100100
00002Br 2               .endif
00002Br 2                       sta     (LINNUM),y
00002Br 2                       cmp     (LINNUM),y
00002Br 2                       bne     L40FA
00002Br 2                       asl     a
00002Br 2                       sta     (LINNUM),y
00002Br 2                       cmp     (LINNUM),y
00002Br 2               .ifdef CONFIG_CBM_ALL
00002Br 2                       beq     L40D7
00002Br 2               .else
00002Br 2                 .ifndef CONFIG_11
00002Br 2                       beq     L40D7; old: faster
00002Br 2                       bne     L40FA
00002Br 2                 .else
00002Br 2                       bne     L40FA; new: slower
00002Br 2                       beq     L40D7
00002Br 2                 .endif
00002Br 2               L40EE:
00002Br 2                       jsr     CHRGOT
00002Br 2                       jsr     LINGET
00002Br 2                       tay
00002Br 2                       beq     L40FA
00002Br 2                       jmp     SYNERR
00002Br 2               .endif
00002Br 2               L40FA:
00002Br 2                       lda     LINNUM
00002Br 2                       ldy     LINNUM+1
00002Br 2                       sta     MEMSIZ
00002Br 2                       sty     MEMSIZ+1
00002Br 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
00002Br 2                       sta     FRETOP
00002Br 2                       sty     FRETOP+1
00002Br 2               .endif
00002Br 2               L4106:
00002Br 2               .ifndef CONFIG_CBM_ALL
00002Br 2                 .ifdef APPLE
00002Br 2                       lda     #$FF
00002Br 2                       jmp     L2829
00002Br 2                       .word	STROUT ; PATCH!
00002Br 2                       jsr     NXIN
00002Br 2                 .else
00002Br 2                       lda     #<QT_TERMINAL_WIDTH
00002Br 2                       ldy     #>QT_TERMINAL_WIDTH
00002Br 2                       jsr     STROUT
00002Br 2                       jsr     NXIN
00002Br 2                 .endif
00002Br 2                       stx     TXTPTR
00002Br 2                       sty     TXTPTR+1
00002Br 2                       jsr     CHRGET
00002Br 2                       tay
00002Br 2                       beq     L4136
00002Br 2                       jsr     LINGET
00002Br 2                       lda     LINNUM+1
00002Br 2                       bne     L4106
00002Br 2                       lda     LINNUM
00002Br 2                       cmp     #$10
00002Br 2                       bcc     L4106
00002Br 2               L2829:
00002Br 2                       sta     Z17
00002Br 2               L4129:
00002Br 2                 .ifdef AIM65
00002Br 2                       sbc     #$0A
00002Br 2                 .else
00002Br 2                       sbc     #$0E
00002Br 2                 .endif
00002Br 2                       bcs     L4129
00002Br 2                       eor     #$FF
00002Br 2                 .ifdef AIM65
00002Br 2                       sbc     #$08
00002Br 2                 .else
00002Br 2                       sbc     #$0C
00002Br 2                 .endif
00002Br 2                       clc
00002Br 2                       adc     Z17
00002Br 2                       sta     Z18
00002Br 2               .endif
00002Br 2               L4136:
00002Br 2               .ifdef CONFIG_RAM
00002Br 2                       lda     #<QT_WANT
00002Br 2                       ldy     #>QT_WANT
00002Br 2                       jsr     STROUT
00002Br 2                       jsr     NXIN
00002Br 2                       stx     TXTPTR
00002Br 2                       sty     TXTPTR+1
00002Br 2                       jsr     CHRGET
00002Br 2                       ldx     #<RAMSTART1
00002Br 2                       ldy     #>RAMSTART1
00002Br 2                       cmp     #'Y'
00002Br 2                       beq     L4183
00002Br 2                       cmp     #'A'
00002Br 2                       beq     L4157
00002Br 2                       cmp     #'N'
00002Br 2                       bne     L4136
00002Br 2               L4157:
00002Br 2                       ldx     #<IQERR
00002Br 2                       ldy     #>IQERR
00002Br 2                       stx     UNFNC_ATN
00002Br 2                       sty     UNFNC_ATN+1
00002Br 2                       ldx     #<ATN	; overwrite starting
00002Br 2                       ldy     #>ATN	; with ATN
00002Br 2                       cmp     #'A'
00002Br 2                       beq     L4183
00002Br 2                       ldx     #<IQERR
00002Br 2                       ldy     #>IQERR
00002Br 2                       stx     UNFNC_COS
00002Br 2                       sty     UNFNC_COS+1
00002Br 2                       stx     UNFNC_TAN
00002Br 2                       sty     UNFNC_TAN+1
00002Br 2                       stx     UNFNC_SIN
00002Br 2                       sty     UNFNC_SIN+1
00002Br 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
00002Br 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
00002Br 2               L4183:
00002Br 2               .else
00002Br 2                       ldx     #<RAMSTART2
00002Br 2                       ldy     #>RAMSTART2
00002Br 2               .endif
00002Br 2                       stx     TXTTAB
00002Br 2                       sty     TXTTAB+1
00002Br 2                       ldy     #$00
00002Br 2                       tya
00002Br 2                       sta     (TXTTAB),y
00002Br 2                       inc     TXTTAB
00002Br 2               .ifndef CBM2
00002Br 2                       bne     L4192
00002Br 2                       inc     TXTTAB+1
00002Br 2               L4192:
00002Br 2               .endif
00002Br 2               .if CONFIG_SCRTCH_ORDER = 1
00002Br 2                       jsr     SCRTCH
00002Br 2               .endif
00002Br 2                       lda     TXTTAB
00002Br 2                       ldy     TXTTAB+1
00002Br 2                       jsr     REASON
00002Br 2               .ifdef CBM2
00002Br 2                       lda     #<QT_BASIC
00002Br 2                       ldy     #>QT_BASIC
00002Br 2                       jsr     STROUT
00002Br 2               .else
00002Br 2                       jsr     CRDO
00002Br 2               .endif
00002Br 2                       lda     MEMSIZ
00002Br 2                       sec
00002Br 2                       sbc     TXTTAB
00002Br 2                       tax
00002Br 2                       lda     MEMSIZ+1
00002Br 2                       sbc     TXTTAB+1
00002Br 2                       jsr     LINPRT
00002Br 2                       lda     #<QT_BYTES_FREE
00002Br 2                       ldy     #>QT_BYTES_FREE
00002Br 2                       jsr     STROUT
00002Br 2               .if CONFIG_SCRTCH_ORDER = 2
00002Br 2                       jsr     SCRTCH
00002Br 2               .endif
00002Br 2               .ifdef CONFIG_CBM_ALL
00002Br 2                       jmp     RESTART
00002Br 2               .elseif .def(AIM65)
00002Br 2                       lda     #<CRDO
00002Br 2                       ldy     #>CRDO
00002Br 2                       sta     GORESTART+1
00002Br 2                       sty     GORESTART+2
00002Br 2                       jmp     RESTART
00002Br 2               .else
00002Br 2                       lda     #<STROUT
00002Br 2                       ldy     #>STROUT
00002Br 2                       sta     GOSTROUT+1
00002Br 2                       sty     GOSTROUT+2
00002Br 2                 .if CONFIG_SCRTCH_ORDER = 3
00002Br 2                        jsr     SCRTCH
00002Br 2                 .endif
00002Br 2                       lda     #<RESTART
00002Br 2                       ldy     #>RESTART
00002Br 2                       sta     GORESTART+1
00002Br 2                       sty     GORESTART+2
00002Br 2                       jmp     (GORESTART+1)
00002Br 2               .endif
00002Br 2               
00002Br 2                 .if .def(CONFIG_RAM) || .def(OSI)
00002Br 2               ; OSI is compiled for ROM, but includes
00002Br 2               ; this unused string
00002Br 2               QT_WANT:
00002Br 2                       .byte   "WANT SIN-COS-TAN-ATN"
00002Br 2                       .byte   0
00002Br 2                 .endif
00002Br 2               QT_WRITTEN_BY:
00002Br 2                 .ifndef CONFIG_CBM_ALL
00002Br 2                 .if !(.def(AIM65) || .def(SYM1))
00002Br 2                   .ifdef APPLE
00002Br 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
00002Br 2               		.byte	CR,0
00002Br 2                   .else
00002Br 2                       .byte   CR,LF,$0C ; FORM FEED
00002Br 2                     .ifndef CONFIG_11
00002Br 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
00002Br 2                     .else
00002Br 2                       .byte   "WRITTEN BY WEILAND & GATES"
00002Br 2                     .endif
00002Br 2                       .byte   CR,LF,0
00002Br 2                   .endif
00002Br 2                  .endif
00002Br 2               QT_MEMORY_SIZE:
00002Br 2                       .byte   "MEMORY SIZE"
00002Br 2                       .byte   0
00002Br 2               QT_TERMINAL_WIDTH:
00002Br 2                   .if !(.def(AIM65) || .def(SYM1))
00002Br 2                       .byte   "TERMINAL "
00002Br 2                   .endif
00002Br 2                       .byte   "WIDTH"
00002Br 2                       .byte   0
00002Br 2                 .endif
00002Br 2               QT_BYTES_FREE:
00002Br 2                       .byte   " BYTES FREE"
00002Br 2                 .ifdef CBM1
00002Br 2                 .elseif .def(CBM2)
00002Br 2                       .byte   CR,0
00002Br 2                 .elseif .def(APPLE)
00002Br 2                       .byte   0
00002Br 2                 .else
00002Br 2                       .byte   CR,LF,CR,LF
00002Br 2                 .endif
00002Br 2               QT_BASIC:
00002Br 2                 .ifdef OSI
00002Br 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00002Br 2                 .endif
00002Br 2                 .ifdef KIM
00002Br 2                       .byte   "MOS TECH 6502 BASIC V1.1"
00002Br 2                 .endif
00002Br 2                 .ifdef MICROTAN
00002Br 2                       .byte   "MICROTAN BASIC"
00002Br 2                 .endif
00002Br 2                 .ifdef AIM65
00002Br 2                       .byte   "  AIM 65 BASIC V1.1"
00002Br 2                 .endif
00002Br 2                 .ifdef SYM1
00002Br 2                       .byte   "BASIC V1.1"
00002Br 2                 .endif
00002Br 2                 .ifdef CBM1
00002Br 2                       .byte   $13 ; HOME
00002Br 2                       .byte   "*** COMMODORE BASIC ***"
00002Br 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
00002Br 2                 .endif
00002Br 2                 .ifdef CBM2
00002Br 2                       .byte   "### COMMODORE BASIC ###"
00002Br 2                       .byte   CR,CR,0
00002Br 2                 .endif
00002Br 2                 .ifdef APPLE
00002Br 2                       .byte   LF,CR,LF
00002Br 2               		.byte	"APPLE BASIC V1.1"
00002Br 2                 .endif
00002Br 2                 .ifndef CONFIG_CBM_ALL
00002Br 2                       .byte   CR,LF
00002Br 2                   .ifdef MICROTAN
00002Br 2                       .byte   "(C) 1980 MICROSOFT"
00002Br 2                   .elseif .def(AIM65)
00002Br 2                       .byte   0
00002Br 2                       .byte   "(C) 1978 MICROSOFT"
00002Br 2                   .elseif .def(SYM1)
00002Br 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
00002Br 2                   .else
00002Br 2                       .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00002Br 2                   .endif
00002Br 2                       .byte   CR,LF
00002Br 2                     .ifndef AIM65
00002Br 2                       .byte   0
00002Br 2                     .endif
00002Br 2                 .endif
00002Br 2               .endif
00002Br 2               
00002Br 1               .include "extra.s"
00002Br 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 3               .segment "EXTRA"
000000r 3  86 62                stx     SHIFTSIGNEXT
000002r 3  8E 00 08             stx     $0800
000005r 3  E8                   inx
000006r 3  8E FC 06             stx     Z17
000009r 3  8E FD 06             stx     Z18
00000Cr 3  86 29                stx     TXTTAB
00000Er 3  A9 08                lda     #$08
000010r 3  85 2A                sta     TXTTAB+1
000012r 3  20 rr rr             jsr     SCRTCH
000015r 3  8D FF 01             sta     STACK+255
000018r 3               LFD81:
000018r 3  20 42 DE             jsr     PRIMM
00001Br 3  1B 06 01 0C          .byte   $1B,$06,$01,$0C
00001Fr 3  49 4E 54 45  		.byte	"INTELLIVISION BASIC"
000023r 3  4C 4C 49 56  
000027r 3  49 53 49 4F  
000032r 3  0D 0A 0A             .byte	$0D,$0A,$0A
000035r 3  43 6F 70 79  		.byte	"Copyright Microsoft, Mattel  1980"
000039r 3  72 69 67 68  
00003Dr 3  74 20 4D 69  
000056r 3  0D 0A 00             .byte	$0D,$0A,$00
000059r 3  8D 35 04             sta     $0435
00005Cr 3  85 8F                sta     $8F
00005Er 3  A0 0F                ldy     #$0F
000060r 3  A9 FF                lda     #$FF
000062r 3  91 04                sta     ($04),y
000064r 3  20 8C DE             jsr     LDE8C
000067r 3  0C                   .byte   $0C	; NOP $xxxx
000068r 3  4C rr rr             jmp     RESTART
00006Br 3               OUTQUESSP:
00006Br 3  20 rr rr             jsr     OUTQUES
00006Er 3  4C rr rr             jmp     OUTSP
000071r 3               INLIN:
000071r 3  A0 FF                ldy     #$FF
000073r 3               LFDDC:
000073r 3  C8                   iny
000074r 3               LFDDD:
000074r 3  20 rr rr             jsr     GETLN
000077r 3  C9 03                cmp     #$03	; CTRL+C
000079r 3  F0 13                beq     LFDF7
00007Br 3  C9 20                cmp     #$20
00007Dr 3  B0 04                bcs     LFDEC	; no control char
00007Fr 3  E9 09                sbc     #$09
000081r 3  D0 F1                bne     LFDDD
000083r 3               LFDEC:
000083r 3  99 00 07             sta     INPUTBUFFER,y
000086r 3  AA                   tax
000087r 3  D0 EA                bne     LFDDC
000089r 3  20 rr rr             jsr     CRDO2
00008Cr 3  A0 06                ldy     #$06
00008Er 3               LFDF7:
00008Er 3  AA                   tax
00008Fr 3  18                   clc
000090r 3  60                   rts
000091r 3               LFDFA:
000091r 3  24 8F                bit     $8F
000093r 3  30 03                bmi     LFE01
000095r 3  20 48 DE             jsr     LDE48
000098r 3               LFE01:
000098r 3  24 8F                bit     $8F
00009Ar 3  50 0B                bvc     LFE10
00009Cr 3  4C 53 DE             jmp     LDE53
00009Fr 3               LFE08:
00009Fr 3  20 rr rr             jsr     LFDFA
0000A2r 3               LFE0B:
0000A2r 3  20 24 DE             jsr     LDE24
0000A5r 3  D0 F8                bne     LFE08
0000A7r 3               LFE10:
0000A7r 3  60                   rts
0000A8r 3               VSAV:
0000A8r 3  20 rr rr             jsr     GARBAG
0000ABr 3  A5 31                lda     FRETOP
0000ADr 3  85 00                sta     $00
0000AFr 3  A5 32                lda     FRETOP+1
0000B1r 3  85                   .byte   $85
0000B2r 3               LFE1B:
0000B2r 3  01 A5                ora     ($A5,x)
0000B4r 3  2F                   .byte   $2F
0000B5r 3  85 02                sta     $02
0000B7r 3  A5 30                lda     STREND+1
0000B9r 3  85 03                sta     $03
0000BBr 3  A0 00                ldy     #$00
0000BDr 3               LFE26:
0000BDr 3  B1 00                lda     ($00),y
0000BFr 3  91 02                sta     ($02),y
0000C1r 3  E6 02                inc     $02
0000C3r 3  D0 02                bne     LFE30
0000C5r 3  E6 03                inc     $03
0000C7r 3               LFE30:
0000C7r 3  E6 00                inc     $00
0000C9r 3  D0 F2                bne     LFE26
0000CBr 3  E6 01                inc     $01
0000CDr 3  24 01                bit     $01
0000CFr 3  50 EC                bvc     LFE26
0000D1r 3  A6 2B                ldx     VARTAB
0000D3r 3  A4 2C                ldy     VARTAB+1
0000D5r 3  A9 01                lda     #$01
0000D7r 3  D0 0E                bne     LFE50
0000D9r 3               PSAV:
0000D9r 3  A5 2B                lda     VARTAB
0000DBr 3  85 02                sta     $02
0000DDr 3  A5 2C                lda     VARTAB+1
0000DFr 3  85 03                sta     $03
0000E1r 3  A2 01                ldx     #$01
0000E3r 3  A0 08                ldy     #$08
0000E5r 3  A9 02                lda     #$02
0000E7r 3               LFE50:
0000E7r 3  8D 13 05             sta     $0513
0000EAr 3  8E 03 05             stx     $0503
0000EDr 3  86 00                stx     $00
0000EFr 3  8C 04 05             sty     $0504
0000F2r 3  84 01                sty     $01
0000F4r 3  A0 0D                ldy     #$0D
0000F6r 3  A9 00                lda     #$00
0000F8r 3               LFE61:
0000F8r 3  99 04 05             sta     $0504,y
0000FBr 3  88                   dey
0000FCr 3  D0 FA                bne     LFE61
0000FEr 3  8C 00 05             sty     $0500
000101r 3  A9 40                lda     #$40
000103r 3  8D 05 05             sta     $0505
000106r 3  A5 02                lda     $02
000108r 3  38                   sec
000109r 3  E5 00                sbc     $00
00010Br 3  85 00                sta     $00
00010Dr 3  A5 03                lda     $03
00010Fr 3  E5 01                sbc     $01
000111r 3  85 01                sta     $01
000113r 3  4A                   lsr     a
000114r 3  4A                   lsr     a
000115r 3  4A                   lsr     a
000116r 3  85 03                sta     $03
000118r 3  20 rr rr             jsr     LE870
00011Br 3  85 02                sta     $02
00011Dr 3  20 72 00             jsr     CHRGOT
000120r 3  F0 1B                beq     LFEA6
000122r 3  C9 2C                cmp     #$2C
000124r 3  F0 03                beq     L40FA
000126r 3  4C rr rr             jmp     SYNERR
000129r 3               L40FA:
000129r 3  20 6C 00             jsr     CHRGET
00012Cr 3  20 rr rr             jsr     LE870
00012Fr 3  38                   sec
000130r 3  E5 02                sbc     $02
000132r 3  C5 03                cmp     $03
000134r 3  10 20                bpl     LFEBF
000136r 3  A9 27                lda     #$27
000138r 3  85 93                sta     JMPADRS
00013Ar 3  4C rr rr             jmp     LFFBD
00013Dr 3               LFEA6:
00013Dr 3  A5 02                lda     $02
00013Fr 3  18                   clc
000140r 3  65 03                adc     $03
000142r 3  20 rr rr             jsr     LE874
000145r 3  48                   pha
000146r 3  20 rr rr             jsr     LFE0B
000149r 3  20 74 68             jsr     L6874
00014Cr 3  72                   .byte   $72
00014Dr 3  75 00                adc     $00,x
00014Fr 3  68                   pla
000150r 3  AA                   tax
000151r 3  A9 00                lda     #$00
000153r 3  20 rr rr             jsr     LINPRT
000156r 3               LFEBF:
000156r 3  A2 07                ldx     #$07
000158r 3               LBF83:
000158r 3  CA                   dex
000159r 3  B5 2B                lda     VARTAB,x
00015Br 3  38                   sec
00015Cr 3  F5 29                sbc     TXTTAB,x
00015Er 3  9D 1B 05             sta     $051B,x
000161r 3  B5 2C                lda     VARTAB+1,x
000163r 3  F5 2A                sbc     TXTTAB+1,x
000165r 3  9D 1C 05             sta     $051C,x
000168r 3  CA                   dex
000169r 3  10 ED                bpl     LBF83
00016Br 3  8A                   txa
00016Cr 3  E5 31                sbc     FRETOP
00016Er 3  8D 21 05             sta     $0521
000171r 3  A9 3F                lda     #>CONST_MEMSIZ
000173r 3  E5 32                sbc     FRETOP+1
000175r 3  8D 22 05             sta     $0522
000178r 3  A5 31                lda     FRETOP
00017Ar 3  8D 23 05             sta     $0523
00017Dr 3  A5 32                lda     FRETOP+1
00017Fr 3  8D 24 05             sta     $0524
000182r 3  A6 02                ldx     $02
000184r 3  20 rr rr             jsr     LFFDD
000187r 3  20 rr rr             jsr     LFFD1
00018Ar 3  A5 01                lda     $01
00018Cr 3  A2 05                ldx     #$05
00018Er 3               LFEF7:
00018Er 3  8E 11 05             stx     $0511
000191r 3  A0 E4                ldy     #$E4
000193r 3  38                   sec
000194r 3  E9 08                sbc     #$08
000196r 3  85 01                sta     $01
000198r 3  10 12                bpl     LFF15
00019Ar 3  69 08                adc     #$08
00019Cr 3  06 00                asl     $00
00019Er 3  2A                   rol     a
00019Fr 3  06 00                asl     $00
0001A1r 3  2A                   rol     a
0001A2r 3  06 00                asl     $00
0001A4r 3  2A                   rol     a
0001A5r 3  69 01                adc     #$01
0001A7r 3  8D 05 05             sta     $0505
0001AAr 3  A0 00                ldy     #$00
0001ACr 3               LFF15:
0001ACr 3  8C 12 05             sty     $0512
0001AFr 3  20 rr rr             jsr     LE4C0
0001B2r 3  A2 00                ldx     #$00
0001B4r 3  A5 01                lda     $01
0001B6r 3  10 D6                bpl     LFEF7
0001B8r 3               LFF21:
0001B8r 3  60                   rts
0001B9r 3               VLOD:
0001B9r 3  20 rr rr             jsr     LFFD1
0001BCr 3  86 93                stx     JMPADRS
0001BEr 3  A5 2B                lda     VARTAB
0001C0r 3  A4 2C                ldy     VARTAB+1
0001C2r 3  A2 01                ldx     #$01
0001C4r 3  20 rr rr             jsr     LFF64
0001C7r 3  A2 00                ldx     #$00
0001C9r 3  A0 02                ldy     #$02
0001CBr 3               LFF34:
0001CBr 3  20 rr rr             jsr     LE39A
0001CEr 3  C8                   iny
0001CFr 3  C8                   iny
0001D0r 3  E8                   inx
0001D1r 3  E8                   inx
0001D2r 3  E0 05                cpx     #$05
0001D4r 3  30 F5                bmi     LFF34
0001D6r 3  A5 2F                lda     STREND
0001D8r 3  85 5A                sta     LOWTR
0001DAr 3  A5 30                lda     STREND+1
0001DCr 3  85 5B                sta     LOWTR+1
0001DEr 3  A5 31                lda     FRETOP
0001E0r 3  85 56                sta     HIGHTR
0001E2r 3  A5 32                lda     FRETOP+1
0001E4r 3  85 57                sta     HIGHTR+1
0001E6r 3  A9 FF                lda     #<CONST_MEMSIZ
0001E8r 3  85 54                sta     HIGHDS
0001EAr 3  A9 3F                lda     #>CONST_MEMSIZ
0001ECr 3  85 55                sta     HIGHDS+1
0001EEr 3  AD 23 05             lda     $0523
0001F1r 3  85 31                sta     FRETOP
0001F3r 3  AD 24 05             lda     $0524
0001F6r 3  85 32                sta     FRETOP+1
0001F8r 3  4C rr rr             jmp     BLTU2
0001FBr 3               LFF64:
0001FBr 3  85 9A                sta     $9A
0001FDr 3  84 9B                sty     $9B
0001FFr 3  86 00                stx     $00
000201r 3  20 rr rr             jsr     LE870
000204r 3  20 rr rr             jsr     LFFDD
000207r 3  A5 93                lda     JMPADRS
000209r 3  F0 0B                beq     LFF7F
00020Br 3  A9 01                lda     #$01
00020Dr 3  85 9A                sta     $9A
00020Fr 3  A9 08                lda     #$08
000211r 3  85 9B                sta     $9B
000213r 3  20 rr rr             jsr     STXTPT
000216r 3               LFF7F:
000216r 3  A5 9A                lda     $9A
000218r 3  8D 03 05             sta     $0503
00021Br 3  A5 9B                lda     $9B
00021Dr 3  8D 04 05             sta     $0504
000220r 3  A9 ED                lda     #$ED
000222r 3  8D 12 05             sta     $0512
000225r 3  A9 05                lda     #$05
000227r 3  85 01                sta     $01
000229r 3               LFF92:
000229r 3  AE 12 05             ldx     $0512
00022Cr 3  F0 8A                beq     LFF21
00022Er 3  A0 04                ldy     #$04
000230r 3  20 rr rr             jsr     LE4C4
000233r 3  A5 01                lda     $01
000235r 3  CD 11 05             cmp     $0511
000238r 3  D0 0F                bne     LFFB2
00023Ar 3  A9 00                lda     #$00
00023Cr 3  85 01                sta     $01
00023Er 3  A5 00                lda     $00
000240r 3  CD 13 05             cmp     $0513
000243r 3  F0 E4                beq     LFF92
000245r 3  A9 18                lda     #$18
000247r 3  D0 06                bne     LFFB8
000249r 3               LFFB2:
000249r 3  A9 27                lda     #$27
00024Br 3  D0 02                bne     LFFB8
00024Dr 3               LFFB6:
00024Dr 3  A9 3C                lda     #$3C
00024Fr 3               LFFB8:
00024Fr 3  85 93                sta     JMPADRS
000251r 3  20 rr rr             jsr     CLEARC
000254r 3               LFFBD:
000254r 3  20 rr rr             jsr     VARTAB_MINUS_2_TO_AY
000257r 3  85 9A                sta     $9A
000259r 3  84 9B                sty     $9B
00025Br 3  A9 00                lda     #$00
00025Dr 3  A8                   tay
00025Er 3  91 9A                sta     ($9A),y
000260r 3  C8                   iny
000261r 3  91 9A                sta     ($9A),y
000263r 3  A6 93                ldx     JMPADRS
000265r 3  4C rr rr             jmp     ERROR
000268r 3               LFFD1:
000268r 3  A2 00                ldx     #$00
00026Ar 3               LFFD3:
00026Ar 3  A9 02                lda     #$02
00026Cr 3  2C                   .byte   $2C
00026Dr 3               LFFD6:
00026Dr 3  A9 03                lda     #$03
00026Fr 3  20 8C DE             jsr     LDE8C
000272r 3  06 60                asl     FACSIGN
000274r 3               LFFDD:
000274r 3  20 72 00             jsr     CHRGOT
000277r 3  F0 03                beq     LFFE5
000279r 3  4C rr rr             jmp     SYNERR
00027Cr 3               LFFE5:
00027Cr 3  A9 0D                lda     #$0D
00027Er 3  A0 00                ldy     #$00
000280r 3  20 8C DE             jsr     LDE8C
000283r 3  06                   .byte   $06
000284r 3               LFFED:
000284r 3  AD 4C 03             lda     $034C
000287r 3  30 FB                bmi     LFFED
000289r 3  A0 01                ldy     #$01
00028Br 3  B1 04                lda     ($04),y
00028Dr 3  D0 BE                bne     LFFB6
00028Fr 3  60                   rts
000290r 3  FF                   .byte   $FF
000291r 3               ; NMI
000291r 3  00 C0                .addr   LC000
000293r 3               ; RESET
000293r 3  00 C0                .addr   LC000
000295r 3               ; IRQ
000295r 3  09 C0                .addr   LC009
000297r 3               
000297r 2               .endif
000297r 2               
000297r 2               .ifdef APPLE
000297r 2               .include "apple_extra.s"
000297r 2               .endif
000297r 2               
000297r 2               .ifdef MICROTAN
000297r 2               .include "microtan_extra.s"
000297r 2               .endif
000297r 2               
000297r 2               .ifdef AIM65
000297r 2               .include "aim65_extra.s"
000297r 2               .endif
000297r 2               
000297r 2               .ifdef SYM1
000297r 2                       .byte   0,0,0
000297r 2               .endif
000297r 2               
000297r 2               .ifdef EATER
000297r 2               .include "bios.s"
000297r 2               .endif
000297r 2               
000297r 1               .include "lcd.s"
000297r 2               .segment "CODE"
001B90r 2               .ifdef EATER
001B90r 2               PORTB = $6000
001B90r 2               DDRB = $6002
001B90r 2               E  = %01000000
001B90r 2               RW = %00100000
001B90r 2               RS = %00010000
001B90r 2               
001B90r 2               lcd_wait:
001B90r 2                 pha
001B90r 2                 lda #%11110000  ; LCD data is input
001B90r 2                 sta DDRB
001B90r 2               lcdbusy:
001B90r 2                 lda #RW
001B90r 2                 sta PORTB
001B90r 2                 lda #(RW | E)
001B90r 2                 sta PORTB
001B90r 2                 lda PORTB       ; Read high nibble
001B90r 2                 pha             ; and put on stack since it has the busy flag
001B90r 2                 lda #RW
001B90r 2                 sta PORTB
001B90r 2                 lda #(RW | E)
001B90r 2                 sta PORTB
001B90r 2                 lda PORTB       ; Read low nibble
001B90r 2                 pla             ; Get high nibble off stack
001B90r 2                 and #%00001000
001B90r 2                 bne lcdbusy
001B90r 2               
001B90r 2                 lda #RW
001B90r 2                 sta PORTB
001B90r 2                 lda #%11111111  ; LCD data is output
001B90r 2                 sta DDRB
001B90r 2                 pla
001B90r 2                 rts
001B90r 2               
001B90r 2               LCDINIT:
001B90r 2                 lda #$ff ; Set all pins on port B to output
001B90r 2                 sta DDRB
001B90r 2               
001B90r 2                 lda #%00000011 ; Set 8-bit mode
001B90r 2                 sta PORTB
001B90r 2                 ora #E
001B90r 2                 sta PORTB
001B90r 2                 and #%00001111
001B90r 2                 sta PORTB
001B90r 2               
001B90r 2                 lda #%00000011 ; Set 8-bit mode
001B90r 2                 sta PORTB
001B90r 2                 ora #E
001B90r 2                 sta PORTB
001B90r 2                 and #%00001111
001B90r 2                 sta PORTB
001B90r 2               
001B90r 2                 lda #%00000011 ; Set 8-bit mode
001B90r 2                 sta PORTB
001B90r 2                 ora #E
001B90r 2                 sta PORTB
001B90r 2                 and #%00001111
001B90r 2                 sta PORTB
001B90r 2               
001B90r 2                 ; Okay, now we're really in 8-bit mode.
001B90r 2                 ; Command to get to 4-bit mode ought to work now
001B90r 2                 lda #%00000010 ; Set 4-bit mode
001B90r 2                 sta PORTB
001B90r 2                 ora #E
001B90r 2                 sta PORTB
001B90r 2                 and #%00001111
001B90r 2                 sta PORTB
001B90r 2               
001B90r 2                 lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
001B90r 2                 jsr lcd_instruction
001B90r 2                 lda #%00001110 ; Display on; cursor on; blink off
001B90r 2                 jsr lcd_instruction
001B90r 2                 lda #%00000110 ; Increment and shift cursor; don't shift display
001B90r 2                 jsr lcd_instruction
001B90r 2                 lda #%00000001 ; Clear display
001B90r 2                 jsr lcd_instruction
001B90r 2                 rts
001B90r 2               
001B90r 2               
001B90r 2               LCDCMD:
001B90r 2                 jsr GETBYT
001B90r 2                 txa
001B90r 2               lcd_instruction:
001B90r 2                 jsr lcd_wait
001B90r 2                 pha
001B90r 2                 lsr
001B90r 2                 lsr
001B90r 2                 lsr
001B90r 2                 lsr            ; Send high 4 bits
001B90r 2                 sta PORTB
001B90r 2                 ora #E         ; Set E bit to send instruction
001B90r 2                 sta PORTB
001B90r 2                 eor #E         ; Clear E bit
001B90r 2                 sta PORTB
001B90r 2                 pla
001B90r 2                 and #%00001111 ; Send low 4 bits
001B90r 2                 sta PORTB
001B90r 2                 ora #E         ; Set E bit to send instruction
001B90r 2                 sta PORTB
001B90r 2                 eor #E         ; Clear E bit
001B90r 2                 sta PORTB
001B90r 2                 rts
001B90r 2               
001B90r 2               LCDPRINT:
001B90r 2                 jsr GETBYT
001B90r 2                 txa
001B90r 2                 jsr lcd_wait
001B90r 2                 pha
001B90r 2                 lsr
001B90r 2                 lsr
001B90r 2                 lsr
001B90r 2                 lsr             ; Send high 4 bits
001B90r 2                 ora #RS         ; Set RS
001B90r 2                 sta PORTB
001B90r 2                 ora #E          ; Set E bit to send instruction
001B90r 2                 sta PORTB
001B90r 2                 eor #E          ; Clear E bit
001B90r 2                 sta PORTB
001B90r 2                 pla
001B90r 2                 and #%00001111  ; Send low 4 bits
001B90r 2                 ora #RS         ; Set RS
001B90r 2                 sta PORTB
001B90r 2                 ora #E          ; Set E bit to send instruction
001B90r 2                 sta PORTB
001B90r 2                 eor #E          ; Clear E bit
001B90r 2                 sta PORTB
001B90r 2                 rts
001B90r 2               
001B90r 2               .endif
001B90r 2               
001B90r 1               
