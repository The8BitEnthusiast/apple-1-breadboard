ca65 V2.19 - Git 3dfe03300
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 3               ; configuration
000000r 3               CONFIG_2C := 1
000000r 3               
000000r 3               CONFIG_NULL := 1
000000r 3               CONFIG_MONCOUT_DESTROYS_Y := 1
000000r 3               CONFIG_PEEK_SAVE_LINNUM := 1
000000r 3               CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_ROR_WORKAROUND := 1
000000r 3               CONFIG_SAFE_NAMENOTFOUND := 1
000000r 3               CONFIG_SCRTCH_ORDER := 1
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $17
000000r 3               ZP_START2 = $2F
000000r 3               ZP_START3 = $24
000000r 3               ZP_START4 = $85
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR				:= $0021
000000r 3               TXPSV           := $00BA
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $FE
000000r 3               SPACE_FOR_GOSUB := $3E
000000r 3               NULL_MAX		:= $F0
000000r 3               WIDTH			:= 80
000000r 3               WIDTH2			:= 56
000000r 3               ; memory layout
000000r 3               RAMSTART2 := $0400
000000r 3               
000000r 3               ; monitor functions
000000r 3               MONRDKEY        := $E210
000000r 3               MONRDKEY2       := $E213
000000r 3               MONCOUT         := $E216
000000r 3               LF000 := $F000
000000r 3               LF003 := $F003
000000r 3               LF006 := $F006
000000r 3               LF009 := $F009
000000r 3               LF00C := $F00C
000000r 3               LF00F := $F00F
000000r 3               LF018 := $F018
000000r 3               LF01B := $F01B
000000r 3               LF01E := $F01E
000000r 3               LF021 := $F021
000000r 3               LFDFA := $FDFA
000000r 3               LFE73 := $FE73
000000r 3               LFE75 := $FE75
000000r 3               
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(eater)
000000r 2               EATER := 1
000000r 2               .include "defines_eater.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000017  2               
000017  2               GORESTART:
000017  2  xx xx xx     	.res 3
00001A  2               GOSTROUT:
00001A  2  xx xx xx     	.res 3
00001D  2               GOAYINT:
00001D  2  xx xx        	.res 2
00001F  2               GOGIVEAYF:
00001F  2  xx xx        	.res 2
000021  2               
000021  2               .org ZP_START2
00002F  2               Z15:
00002F  2  xx           	.res 1
000030  2               .ifndef POSX; allow override
000030  2               POSX:
000030  2               .endif
000030  2  xx           	.res 1
000031  2               .ifndef Z17; allow override
000031  2               Z17:
000031  2               .endif
000031  2  xx           	.res 1
000032  2               .ifndef Z18; allow override
000032  2               Z18:
000032  2               .endif
000032  2  xx           	.res 1
000033  2               LINNUM:
000033  2               .ifndef TXPSV; allow override
000033  2               TXPSV:
000033  2               .endif
000033  2  xx xx        	.res 2
000035  2               .ifndef INPUTBUFFER; allow override
000035  2               INPUTBUFFER:
000035  2               .endif
000035  2               
000035  2               .org ZP_START3
000024  2               
000024  2               CHARAC:
000024  2  xx           	.res 1
000025  2               ENDCHR:
000025  2  xx           	.res 1
000026  2               EOLPNTR:
000026  2  xx           	.res 1
000027  2               DIMFLG:
000027  2  xx           	.res 1
000028  2               VALTYP:
000028  2               .ifdef CONFIG_SMALL
000028  2               	.res 1
000028  2               .else
000028  2  xx xx        	.res 2
00002A  2               .endif
00002A  2               DATAFLG:
00002A  2  xx           	.res 1
00002B  2               SUBFLG:
00002B  2  xx           	.res 1
00002C  2               INPUTFLG:
00002C  2  xx           	.res 1
00002D  2               CPRMASK:
00002D  2  xx           	.res 1
00002E  2               Z14:
00002E  2  xx           	.res 1
00002F  2               
00002F  2               .org ZP_START4
000085  2               
000085  2               TEMPPT:
000085  2  xx           	.res 1
000086  2               LASTPT:
000086  2  xx xx        	.res 2
000088  2               TEMPST:
000088  2  xx xx xx xx  	.res 9
00008C  2  xx xx xx xx  
000090  2  xx           
000091  2               INDEX:
000091  2  xx xx        	.res 2
000093  2               DEST:
000093  2  xx xx        	.res 2
000095  2               RESULT:
000095  2  xx xx xx xx  	.res BYTES_FP
000099  2  xx           
00009A  2               RESULT_LAST = RESULT + BYTES_FP-1
00009A  2               TXTTAB:
00009A  2  xx xx        	.res 2
00009C  2               VARTAB:
00009C  2  xx xx        	.res 2
00009E  2               ARYTAB:
00009E  2  xx xx        	.res 2
0000A0  2               STREND:
0000A0  2  xx xx        	.res 2
0000A2  2               FRETOP:
0000A2  2  xx xx        	.res 2
0000A4  2               FRESPC:
0000A4  2  xx xx        	.res 2
0000A6  2               MEMSIZ:
0000A6  2  xx xx        	.res 2
0000A8  2               CURLIN:
0000A8  2  xx xx        	.res 2
0000AA  2               OLDLIN:
0000AA  2  xx xx        	.res 2
0000AC  2               OLDTEXT:
0000AC  2  xx xx        	.res 2
0000AE  2               Z8C:
0000AE  2  xx xx        	.res 2
0000B0  2               DATPTR:
0000B0  2  xx xx        	.res 2
0000B2  2               INPTR:
0000B2  2  xx xx        	.res 2
0000B4  2               VARNAM:
0000B4  2  xx xx        	.res 2
0000B6  2               VARPNT:
0000B6  2  xx xx        	.res 2
0000B8  2               FORPNT:
0000B8  2  xx xx        	.res 2
0000BA  2               LASTOP:
0000BA  2  xx xx        	.res 2
0000BC  2               CPRTYP:
0000BC  2  xx           	.res 1
0000BD  2               FNCNAM:
0000BD  2               TEMP3:
0000BD  2  xx xx        	.res 2
0000BF  2               DSCPTR:
0000BF  2               .ifdef CONFIG_SMALL
0000BF  2               		.res 2
0000BF  2               .else
0000BF  2  xx xx xx     		.res 3
0000C2  2               .endif
0000C2  2               DSCLEN:
0000C2  2  xx xx        	.res 2
0000C4  2               .ifndef JMPADRS ; allow override
0000C4  2               JMPADRS			:= DSCLEN + 1
0000C4  2               .endif
0000C4  2               Z52:
0000C4  2  xx           	.res 1
0000C5  2               ARGEXTENSION:
0000C5  2               .ifndef CONFIG_SMALL
0000C5  2  xx           	.res 1
0000C6  2               .endif
0000C6  2               TEMP1:
0000C6  2  xx           	.res 1
0000C7  2               HIGHDS:
0000C7  2  xx xx        	.res 2
0000C9  2               HIGHTR:
0000C9  2  xx xx        	.res 2
0000CB  2               .ifndef CONFIG_SMALL
0000CB  2               TEMP2:
0000CB  2  xx           	.res 1
0000CC  2               .endif
0000CC  2               INDX:
0000CC  2               TMPEXP:
0000CC  2               .ifdef CONFIG_SMALL
0000CC  2               TEMP2:
0000CC  2               .endif
0000CC  2  xx           	.res 1
0000CD  2               EXPON:
0000CD  2  xx           	.res 1
0000CE  2               LOWTR:
0000CE  2               .ifndef LOWTRX ; allow override
0000CE  2               LOWTRX:
0000CE  2               .endif
0000CE  2  xx           	.res 1
0000CF  2               EXPSGN:
0000CF  2  xx           	.res 1
0000D0  2               FAC:
0000D0  2  xx xx xx xx  	.res BYTES_FP
0000D4  2  xx           
0000D5  2               FAC_LAST = FAC + BYTES_FP-1
0000D5  2               FACSIGN:
0000D5  2  xx           	.res 1
0000D6  2               SERLEN:
0000D6  2  xx           	.res 1
0000D7  2               SHIFTSIGNEXT:
0000D7  2  xx           	.res 1
0000D8  2               ARG:
0000D8  2  xx xx xx xx  	.res BYTES_FP
0000DC  2  xx           
0000DD  2               ARG_LAST = ARG + BYTES_FP-1
0000DD  2               ARGSIGN:
0000DD  2  xx           	.res 1
0000DE  2               STRNG1:
0000DE  2  xx xx        	.res 2
0000E0  2               SGNCPR = STRNG1
0000E0  2               FACEXTENSION = STRNG1+1
0000E0  2               STRNG2:
0000E0  2  xx xx        	.res 2
0000E2  2               .ifdef AIM65
0000E2  2               ATN:
0000E2  2               	.res 3
0000E2  2               ZBE:
0000E2  2               	.res 1
0000E2  2               .endif
0000E2  2               .ifdef SYM1
0000E2  2               USR1:
0000E2  2               	.res 3
0000E2  2               USR2:
0000E2  2               	.res 3
0000E2  2               USR3:
0000E2  2               	.res 3
0000E2  2               .endif
0000E2  2               CHRGET:
0000E2  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000E2  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000E2  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000E2  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000E2  2               
0000E2  2               
0000E2  2               
0000E2  1               
0000E2  1               .include "header.s"
0000E2  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2                       jmp     COLD_START
000000r 2                       jmp     RESTART
000000r 2                       .word   AYINT,GIVAYF
000000r 2               .endif
000000r 2               .ifdef SYM1
000000r 2                       jmp     PR_WRITTEN_BY
000000r 2               .endif
000000r 2               .ifdef EATER
000000r 2                       jmp COLD_START
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               .else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2  rr rr 4E 55  		keyword_rts "NULL", NULL
000015r 2  4C CC xx     
000012r 2               .endif
000012r 2               .ifdef KBD
000012r 2               		keyword_rts "PLOD", PLOD
000012r 2               		keyword_rts "PSAV", PSAV
000012r 2               		keyword_rts "VLOD", VLOD
000012r 2               		keyword_rts "VSAV", VSAV
000012r 2               .endif
000012r 2               .ifndef CONFIG_NO_POKE
000012r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000016r 2  49 D4 xx     
000013r 2               .endif
000013r 2               .ifndef KBD
000013r 2  rr rr 4C 4F  		keyword_rts "LOAD", LOAD
000017r 2  41 C4 xx     
000014r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
000018r 2  56 C5 xx     
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2               		keyword_rts "VERIFY", VERIFY
000015r 2               .endif
000015r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000019r 2  C6 xx        
000016r 2               .ifdef KBD
000016r 2               		keyword_rts "SLOD", SLOD
000016r 2               .endif
000016r 2               .ifndef CONFIG_NO_POKE
000016r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Ar 2  4B C5 xx     
000017r 2               .endif
000017r 2               .ifdef CONFIG_FILE
000017r 2               		keyword_rts "PRINT#", PRINTH
000017r 2               .endif
000017r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Br 2  49 4E D4 xx  
000018r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Cr 2  4E D4 xx     
000019r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Dr 2  53 D4 xx     
00001Ar 2               .ifdef CONFIG_CBM_ALL
00001Ar 2               		keyword_rts "CLR", CLEAR
00001Ar 2               .else
00001Ar 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Er 2  45 41 D2 xx  
00001Br 2               .endif
00001Br 2               .ifdef CONFIG_FILE
00001Br 2               		keyword_rts "CMD", CMD
00001Br 2               		keyword_rts "SYS", SYS
00001Br 2               		keyword_rts "OPEN", OPEN
00001Br 2               		keyword_rts "CLOSE", CLOSE
00001Br 2               .endif
00001Br 2               .ifndef CONFIG_SMALL
00001Br 2  rr rr 47 45  		keyword_rts "GET", GET
00001Fr 2  D4 xx        
00001Cr 2               .endif
00001Cr 2               .ifdef KBD
00001Cr 2               		keyword_rts "PRT", PRT
00001Cr 2               .endif
00001Cr 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000020r 2  D7 xx        
00001Dr 2               .ifdef EATER
00001Dr 2               		keyword_rts "LCDCMD", LCDCMD
00001Dr 2               		keyword_rts "LCDPRINT", LCDPRINT
00001Dr 2               .endif
00001Dr 2               
00001Dr 2               		count_tokens
00001Dr 2               
00001Dr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000021r 2  xx           
00001Er 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Fr 2  46 CE xx     		keyword	"FN", TOKEN_FN
000020r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000024r 2  xx           
000021r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000025r 2  xx           
000022r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000023r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000027r 2  xx           
000024r 2  AB xx        		keyword	"+", TOKEN_PLUS
000025r 2  AD xx        		keyword	"-", TOKEN_MINUS
000026r 2  AA xx        		keyword	"*"
000027r 2  AF xx        		keyword	"/"
000028r 2               .ifdef KBD
000028r 2               		keyword	"#"
000028r 2               .else
000028r 2  DE xx        		keyword	"^"
000029r 2               .endif
000029r 2  41 4E C4 xx  		keyword	"AND"
00002Ar 2  4F D2 xx     		keyword	"OR"
00002Br 2  BE xx        		keyword	">", TOKEN_GREATER
00002Cr 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Dr 2  BC xx        		keyword	"<"
00002Er 2               
00002Er 2                       .segment "VECTORS"
00003Ar 2               UNFNC:
00003Ar 2               
00003Ar 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Er 2  CE xx        
00002Fr 2  rr rr 49 4E  		keyword_addr "INT", INT
000033r 2  D4 xx        
000030r 2  rr rr 41 42  		keyword_addr "ABS", ABS
000034r 2  D3 xx        
000031r 2               .ifdef KBD
000031r 2               		keyword_addr "VER", VER
000031r 2               .endif
000031r 2               .ifndef CONFIG_NO_POKE
000031r 2                 .ifdef CONFIG_RAM
000031r 2               		keyword_addr "USR", IQERR
000031r 2                 .else
000031r 2  21 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
000035r 2  D2 xx        
000032r 2                 .endif
000032r 2               .endif
000032r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000036r 2  C5 xx        
000033r 2  rr rr 50 4F  		keyword_addr "POS", POS
000037r 2  D3 xx        
000034r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000038r 2  D2 xx        
000035r 2  rr rr 52 4E  		keyword_addr "RND", RND
000039r 2  C4 xx        
000036r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
00003Ar 2  C7 xx        
000037r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Br 2  D0 xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_COS:
00004Er 2  rr rr 43 4F  		keyword_addr "COS", COS
000052r 2  D3 xx        
000039r 2               .segment "VECTORS"
000050r 2               UNFNC_SIN:
000050r 2  rr rr 53 49  		keyword_addr "SIN", SIN
000054r 2  CE xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_TAN:
000052r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000056r 2  CE xx        
00003Br 2               .segment "VECTORS"
000054r 2               UNFNC_ATN:
000054r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000058r 2  CE xx        
00003Cr 2               .ifdef KBD
00003Cr 2               		keyword_addr "GETC", GETC
00003Cr 2               .endif
00003Cr 2               .ifndef CONFIG_NO_POKE
00003Cr 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
000040r 2  45 CB xx     
00003Dr 2               .endif
00003Dr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000041r 2  CE xx        
00003Er 2  rr rr 53 54  		keyword_addr "STR$", STR
000042r 2  52 A4 xx     
00003Fr 2  rr rr 56 41  		keyword_addr "VAL", VAL
000043r 2  CC xx        
000040r 2  rr rr 41 53  		keyword_addr "ASC", ASC
000044r 2  C3 xx        
000041r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000045r 2  52 A4 xx     
000042r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000046r 2  46 54 A4 xx  
000043r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000047r 2  47 48 54 A4  
00004Br 2  xx           
000044r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000048r 2  44 A4 xx     
000045r 2               .ifdef CONFIG_2
000045r 2  47 CF xx     		keyword	"GO", TOKEN_GO
000046r 2               .endif
000046r 2                       .segment "KEYWORDS"
0000E4r 2  00           		.byte   0
0000E5r 2               
0000E5r 2                       .segment "VECTORS"
000068r 2               MATHTBL:
000068r 2  79                   .byte   $79
000069r 2  rr rr                .word   FADDT-1
00006Br 2  79                   .byte   $79
00006Cr 2  rr rr                .word   FSUBT-1
00006Er 2  7B                   .byte   $7B
00006Fr 2  rr rr                .word   FMULTT-1
000071r 2  7B                   .byte   $7B
000072r 2  rr rr                .word   FDIVT-1
000074r 2  7F                   .byte   $7F
000075r 2  rr rr                .word   FPWRT-1
000077r 2  50                   .byte   $50
000078r 2  rr rr                .word   TAND-1
00007Ar 2  46                   .byte   $46
00007Br 2  rr rr                .word   OR-1
00007Dr 2  7D                   .byte   $7D
00007Er 2  rr rr                .word   NEGOP-1
000080r 2  5A                   .byte   $5A
000081r 2  rr rr                .word   EQUOP-1
000083r 2  64                   .byte   $64
000084r 2  rr rr                .word   RELOPS-1
000086r 2               
000086r 1               .include "error.s"
000086r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2               define_error ERR_NOFOR, "NF"
000000r 2               define_error ERR_SYNTAX, "SN"
000000r 2               define_error ERR_NOGOSUB, "RG"
000000r 2               define_error ERR_NODATA, "OD"
000000r 2               define_error ERR_ILLQTY, "FC"
000000r 2               define_error ERR_OVERFLOW, "OV"
000000r 2               define_error ERR_MEMFULL, "OM"
000000r 2               define_error ERR_UNDEFSTAT, "US"
000000r 2               define_error ERR_BADSUBS, "BS"
000000r 2               define_error ERR_REDIMD, "DD"
000000r 2               define_error ERR_ZERODIV, "/0"
000000r 2               define_error ERR_ILLDIR, "ID"
000000r 2               define_error ERR_BADTYPE, "TM"
000000r 2               define_error ERR_STRLONG, "LS"
000000r 2               define_error ERR_FRMCPX, "ST"
000000r 2               define_error ERR_CANTCONT, "CN"
000000r 2               define_error ERR_UNDEFFN, "UF"
000000r 2               .else
000000r 2  4E 45 58 54  define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000004r 2  20 57 49 54  
000008r 2  48 4F 55 54  
000010r 2  53 59 4E 54  define_error ERR_SYNTAX, "SYNTAX"
000014r 2  41 D8        
000016r 2  52 45 54 55  define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
00001Ar 2  52 4E 20 57  
00001Er 2  49 54 48 4F  
00002Ar 2  4F 55 54 20  define_error ERR_NODATA, "OUT OF DATA"
00002Er 2  4F 46 20 44  
000032r 2  41 54 C1     
000035r 2  49 4C 4C 45  define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000039r 2  47 41 4C 20  
00003Dr 2  51 55 41 4E  
000045r 2               .ifdef CBM1
000045r 2               	.byte 0,0,0,0,0
000045r 2               .endif
000045r 2  4F 56 45 52  define_error ERR_OVERFLOW, "OVERFLOW"
000049r 2  46 4C 4F D7  
00004Dr 2  4F 55 54 20  define_error ERR_MEMFULL, "OUT OF MEMORY"
000051r 2  4F 46 20 4D  
000055r 2  45 4D 4F 52  
00005Ar 2  55 4E 44 45  define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
00005Er 2  46 27 44 20  
000062r 2  53 54 41 54  
00006Br 2  42 41 44 20  define_error ERR_BADSUBS, "BAD SUBSCRIPT"
00006Fr 2  53 55 42 53  
000073r 2  43 52 49 50  
000078r 2  52 45 44 49  define_error ERR_REDIMD, "REDIM'D ARRAY"
00007Cr 2  4D 27 44 20  
000080r 2  41 52 52 41  
000085r 2  44 49 56 49  define_error ERR_ZERODIV, "DIVISION BY ZERO"
000089r 2  53 49 4F 4E  
00008Dr 2  20 42 59 20  
000095r 2  49 4C 4C 45  define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000099r 2  47 41 4C 20  
00009Dr 2  44 49 52 45  
0000A3r 2  54 59 50 45  define_error ERR_BADTYPE, "TYPE MISMATCH"
0000A7r 2  20 4D 49 53  
0000ABr 2  4D 41 54 43  
0000B0r 2  53 54 52 49  define_error ERR_STRLONG, "STRING TOO LONG"
0000B4r 2  4E 47 20 54  
0000B8r 2  4F 4F 20 4C  
0000BFr 2               .ifdef CONFIG_FILE
0000BFr 2                 .ifdef CBM1
0000BFr 2               define_error ERR_BADDATA, "BAD DATA"
0000BFr 2                 .else
0000BFr 2               define_error ERR_BADDATA, "FILE DATA"
0000BFr 2                 .endif
0000BFr 2               .endif
0000BFr 2  46 4F 52 4D  define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
0000C3r 2  55 4C 41 20  
0000C7r 2  54 4F 4F 20  
0000D2r 2  43 41 4E 27  define_error ERR_CANTCONT, "CAN'T CONTINUE"
0000D6r 2  54 20 43 4F  
0000DAr 2  4E 54 49 4E  
0000E0r 2  55 4E 44 45  define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
0000E4r 2  46 27 44 20  
0000E8r 2  46 55 4E 43  
0000F0r 2               .endif
0000F0r 2               
0000F0r 1               .include "message.s"
0000F0r 2               ; global messages: "error", "in", "ready", "break"
0000F0r 2               
0000F0r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
000010r 2  0D 0A        
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2                .endif
000013r 2               .endif
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN) || .def(AIM65)
000013r 2  0D 0A 20 42  		.byte CR,LF," BREAK"
000017r 2  52 45 41 4B  
00001Br 2  00                   .byte   0
00001Cr 2               .else
00001Cr 2               		.byte CR,LF,"BREAK"
00001Cr 2                       .byte   0
00001Cr 2               .endif
00001Cr 2               
00001Cr 1               .include "memory.s"
00001Cr 2               ; generic stack and memory management code
00001Cr 2               ; this code is identical across all versions of
00001Cr 2               ; BASIC
00001Cr 2               
00001Cr 2               .segment "CODE"
00001Cr 2               
00001Cr 2               ; ----------------------------------------------------------------------------
00001Cr 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Cr 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Cr 2               ;
00001Cr 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Cr 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Cr 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Cr 2               ;
00001Cr 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Cr 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Cr 2               ;
00001Cr 2               ;	.EQ. IF FOUND
00001Cr 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Cr 2               ; ----------------------------------------------------------------------------
00001Cr 2               GTFORPNT:
00001Cr 2  BA                   tsx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2  E8                   inx
000021r 2               L2279:
000021r 2  BD 01 01             lda     STACK+1,x
000024r 2  C9 81                cmp     #$81
000026r 2  D0 21                bne     L22A1
000028r 2  A5 B9                lda     FORPNT+1
00002Ar 2  D0 0A                bne     L228E
00002Cr 2  BD 02 01             lda     STACK+2,x
00002Fr 2  85 B8                sta     FORPNT
000031r 2  BD 03 01             lda     STACK+3,x
000034r 2  85 B9                sta     FORPNT+1
000036r 2               L228E:
000036r 2  DD 03 01             cmp     STACK+3,x
000039r 2  D0 07                bne     L229A
00003Br 2  A5 B8                lda     FORPNT
00003Dr 2  DD 02 01             cmp     STACK+2,x
000040r 2  F0 07                beq     L22A1
000042r 2               L229A:
000042r 2  8A                   txa
000043r 2  18                   clc
000044r 2  69 12                adc     #BYTES_PER_FRAME
000046r 2  AA                   tax
000047r 2  D0 D8                bne     L2279
000049r 2               L22A1:
000049r 2  60                   rts
00004Ar 2               
00004Ar 2               ; ----------------------------------------------------------------------------
00004Ar 2               ; MOVE BLOCK OF MEMORY UP
00004Ar 2               ;
00004Ar 2               ; ON ENTRY:
00004Ar 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00004Ar 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00004Ar 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00004Ar 2               ; ----------------------------------------------------------------------------
00004Ar 2               BLTU:
00004Ar 2  20 rr rr             jsr     REASON
00004Dr 2  85 A0                sta     STREND
00004Fr 2  84 A1                sty     STREND+1
000051r 2               BLTU2:
000051r 2  38                   sec
000052r 2  A5 C9                lda     HIGHTR
000054r 2  E5 CE                sbc     LOWTR
000056r 2  85 91                sta     INDEX
000058r 2  A8                   tay
000059r 2  A5 CA                lda     HIGHTR+1
00005Br 2  E5 CF                sbc     LOWTR+1
00005Dr 2  AA                   tax
00005Er 2  E8                   inx
00005Fr 2  98                   tya
000060r 2  F0 23                beq     L22DD
000062r 2  A5 C9                lda     HIGHTR
000064r 2  38                   sec
000065r 2  E5 91                sbc     INDEX
000067r 2  85 C9                sta     HIGHTR
000069r 2  B0 03                bcs     L22C6
00006Br 2  C6 CA                dec     HIGHTR+1
00006Dr 2  38                   sec
00006Er 2               L22C6:
00006Er 2  A5 C7                lda     HIGHDS
000070r 2  E5 91                sbc     INDEX
000072r 2  85 C7                sta     HIGHDS
000074r 2  B0 08                bcs     L22D6
000076r 2  C6 C8                dec     HIGHDS+1
000078r 2  90 04                bcc     L22D6
00007Ar 2               L22D2:
00007Ar 2  B1 C9                lda     (HIGHTR),y
00007Cr 2  91 C7                sta     (HIGHDS),y
00007Er 2               L22D6:
00007Er 2  88                   dey
00007Fr 2  D0 F9                bne     L22D2
000081r 2  B1 C9                lda     (HIGHTR),y
000083r 2  91 C7                sta     (HIGHDS),y
000085r 2               L22DD:
000085r 2  C6 CA                dec     HIGHTR+1
000087r 2  C6 C8                dec     HIGHDS+1
000089r 2  CA                   dex
00008Ar 2  D0 F2                bne     L22D6
00008Cr 2  60                   rts
00008Dr 2               
00008Dr 2               ; ----------------------------------------------------------------------------
00008Dr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Dr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Dr 2               ; ----------------------------------------------------------------------------
00008Dr 2               CHKMEM:
00008Dr 2  0A                   asl     a
00008Er 2  69 3E                adc     #SPACE_FOR_GOSUB
000090r 2  B0 35                bcs     MEMERR
000092r 2  85 91                sta     INDEX
000094r 2  BA                   tsx
000095r 2  E4 91                cpx     INDEX
000097r 2  90 2E                bcc     MEMERR
000099r 2  60                   rts
00009Ar 2               
00009Ar 2               ; ----------------------------------------------------------------------------
00009Ar 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00009Ar 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00009Ar 2               ; ----------------------------------------------------------------------------
00009Ar 2               REASON:
00009Ar 2  C4 A3                cpy     FRETOP+1
00009Cr 2  90 28                bcc     L231E
00009Er 2  D0 04                bne     L22FC
0000A0r 2  C5 A2                cmp     FRETOP
0000A2r 2  90 22                bcc     L231E
0000A4r 2               L22FC:
0000A4r 2  48                   pha
0000A5r 2  A2 09                ldx     #FAC-TEMP1-1
0000A7r 2  98                   tya
0000A8r 2               L2300:
0000A8r 2  48                   pha
0000A9r 2  B5 C6                lda     TEMP1,x
0000ABr 2  CA                   dex
0000ACr 2  10 FA                bpl     L2300
0000AEr 2  20 rr rr             jsr     GARBAG
0000B1r 2  A2 F7                ldx     #TEMP1-FAC+1
0000B3r 2               L230B:
0000B3r 2  68                   pla
0000B4r 2  95 D0                sta     FAC,x
0000B6r 2  E8                   inx
0000B7r 2  30 FA                bmi     L230B
0000B9r 2  68                   pla
0000BAr 2  A8                   tay
0000BBr 2  68                   pla
0000BCr 2  C4 A3                cpy     FRETOP+1
0000BEr 2  90 06                bcc     L231E
0000C0r 2  D0 05                bne     MEMERR
0000C2r 2  C5 A2                cmp     FRETOP
0000C4r 2  B0 01                bcs     MEMERR
0000C6r 2               L231E:
0000C6r 2  60                   rts
0000C7r 2               
0000C7r 1               .include "program.s"
0000C7r 2               ; error
0000C7r 2               ; line input, line editing
0000C7r 2               ; tokenize
0000C7r 2               ; detokenize
0000C7r 2               ; BASIC program memory management
0000C7r 2               
0000C7r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C7r 2               
0000C7r 2               .segment "CODE"
0000C7r 2               
0000C7r 2               MEMERR:
0000C7r 2  A2 4D                ldx     #ERR_MEMFULL
0000C9r 2               
0000C9r 2               ; ----------------------------------------------------------------------------
0000C9r 2               ; HANDLE AN ERROR
0000C9r 2               ;
0000C9r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C9r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C9r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C9r 2               ; ----------------------------------------------------------------------------
0000C9r 2               ERROR:
0000C9r 2  46 2E                lsr     Z14
0000CBr 2               .ifdef CONFIG_FILE
0000CBr 2                       lda     CURDVC    ; output
0000CBr 2                       beq     LC366     ; is screen
0000CBr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CBr 2                       lda     #$00
0000CBr 2                       sta     CURDVC
0000CBr 2               LC366:
0000CBr 2               .endif
0000CBr 2  20 rr rr             jsr     CRDO
0000CEr 2  20 rr rr             jsr     OUTQUES
0000D1r 2               L2329:
0000D1r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D4r 2               .ifndef CONFIG_SMALL_ERROR
0000D4r 2  48                   pha
0000D5r 2  29 7F                and     #$7F
0000D7r 2               .endif
0000D7r 2  20 rr rr             jsr     OUTDO
0000DAr 2               .ifdef CONFIG_SMALL_ERROR
0000DAr 2                       lda     ERROR_MESSAGES+1,x
0000DAr 2                 .ifdef KBD
0000DAr 2                       and     #$7F
0000DAr 2                 .endif
0000DAr 2                       jsr     OUTDO
0000DAr 2               .else
0000DAr 2  E8                   inx
0000DBr 2  68                   pla
0000DCr 2  10 F3                bpl     L2329
0000DEr 2               .endif
0000DEr 2  20 rr rr             jsr     STKINI
0000E1r 2  A9 rr                lda     #<QT_ERROR
0000E3r 2  A0 rr                ldy     #>QT_ERROR
0000E5r 2               
0000E5r 2               ; ----------------------------------------------------------------------------
0000E5r 2               ; PRINT STRING AT (Y,A)
0000E5r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E5r 2               ; FALL INTO WARM RESTART
0000E5r 2               ; ----------------------------------------------------------------------------
0000E5r 2               PRINT_ERROR_LINNUM:
0000E5r 2  20 rr rr             jsr     STROUT
0000E8r 2  A4 A9                ldy     CURLIN+1
0000EAr 2  C8                   iny
0000EBr 2  F0 03                beq     RESTART
0000EDr 2  20 rr rr             jsr     INPRT
0000F0r 2               
0000F0r 2               ; ----------------------------------------------------------------------------
0000F0r 2               ; WARM RESTART ENTRY
0000F0r 2               ; ----------------------------------------------------------------------------
0000F0r 2               RESTART:
0000F0r 2               .ifdef KBD
0000F0r 2                       jsr     CRDO
0000F0r 2                       nop
0000F0r 2               L2351X:
0000F0r 2                       jsr     OKPRT
0000F0r 2               L2351:
0000F0r 2                       jsr     INLIN
0000F0r 2               LE28E:
0000F0r 2                       bpl     RESTART
0000F0r 2               .else
0000F0r 2  46 2E                lsr     Z14
0000F2r 2                .ifndef AIM65
0000F2r 2  A9 rr                lda     #<QT_OK
0000F4r 2  A0 rr                ldy     #>QT_OK
0000F6r 2                 .ifdef CONFIG_CBM_ALL
0000F6r 2                       jsr     STROUT
0000F6r 2                 .else
0000F6r 2  20 1A 00             jsr     GOSTROUT
0000F9r 2                 .endif
0000F9r 2                .else
0000F9r 2                       jsr     GORESTART
0000F9r 2                .endif
0000F9r 2               L2351:
0000F9r 2  20 rr rr             jsr     INLIN
0000FCr 2               .endif
0000FCr 2  86 E9                stx     TXTPTR
0000FEr 2  84 EA                sty     TXTPTR+1
000100r 2  20 E2 00             jsr     CHRGET
000103r 2               .ifdef CONFIG_11
000103r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000103r 2               ; and ':' - a line starting with ':' in
000103r 2               ; direct mode gets ignored
000103r 2  AA                   tax
000104r 2               .endif
000104r 2               .ifdef KBD
000104r 2                       beq     L2351X
000104r 2               .else
000104r 2  F0 F3                beq     L2351
000106r 2               .endif
000106r 2  A2 FF                ldx     #$FF
000108r 2  86 A9                stx     CURLIN+1
00010Ar 2  90 06                bcc     NUMBERED_LINE
00010Cr 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Fr 2  4C rr rr             jmp     NEWSTT2
000112r 2               
000112r 2               ; ----------------------------------------------------------------------------
000112r 2               ; HANDLE NUMBERED LINE
000112r 2               ; ----------------------------------------------------------------------------
000112r 2               NUMBERED_LINE:
000112r 2  20 rr rr             jsr     LINGET
000115r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000118r 2  84 26                sty     EOLPNTR
00011Ar 2               .ifdef KBD
00011Ar 2                       jsr     FNDLIN2
00011Ar 2                       lda     JMPADRS+1
00011Ar 2                       sta     LOWTR
00011Ar 2                       sta     Z96
00011Ar 2                       lda     JMPADRS+2
00011Ar 2                       sta     LOWTR+1
00011Ar 2                       sta     Z96+1
00011Ar 2                       lda     LINNUM
00011Ar 2                       sta     L06FE
00011Ar 2                       lda     LINNUM+1
00011Ar 2                       sta     L06FE+1
00011Ar 2                       inc     LINNUM
00011Ar 2                       bne     LE2D2
00011Ar 2                       inc     LINNUM+1
00011Ar 2                       bne     LE2D2
00011Ar 2                       jmp     SYNERR
00011Ar 2               LE2D2:
00011Ar 2                       jsr     LF457
00011Ar 2                       ldx     #Z96
00011Ar 2                       jsr     CMPJMPADRS
00011Ar 2                       bcs     LE2FD
00011Ar 2               LE2DC:
00011Ar 2                       ldx     #$00
00011Ar 2                       lda     (JMPADRS+1,x)
00011Ar 2                       sta     (Z96,x)
00011Ar 2                       inc     JMPADRS+1
00011Ar 2                       bne     LE2E8
00011Ar 2                       inc     JMPADRS+2
00011Ar 2               LE2E8:
00011Ar 2                       inc     Z96
00011Ar 2                       bne     LE2EE
00011Ar 2                       inc     Z96+1
00011Ar 2               LE2EE:
00011Ar 2                       ldx     #VARTAB
00011Ar 2                       jsr     CMPJMPADRS
00011Ar 2                       bne     LE2DC
00011Ar 2                       lda     Z96
00011Ar 2                       sta     VARTAB
00011Ar 2                       lda     Z96+1
00011Ar 2                       sta     VARTAB+1
00011Ar 2               LE2FD:
00011Ar 2                       jsr     SETPTRS
00011Ar 2                       jsr     LE33D
00011Ar 2                       lda     INPUTBUFFER
00011Ar 2               LE306:
00011Ar 2                       beq     LE28E
00011Ar 2                       cmp     #$A5
00011Ar 2                       beq     LE306
00011Ar 2                       clc
00011Ar 2               .else
00011Ar 2  20 rr rr             jsr     FNDLIN
00011Dr 2  90 44                bcc     PUT_NEW_LINE
00011Fr 2  A0 01                ldy     #$01
000121r 2  B1 CE                lda     (LOWTR),y
000123r 2  85 92                sta     INDEX+1
000125r 2  A5 9C                lda     VARTAB
000127r 2  85 91                sta     INDEX
000129r 2  A5 CF                lda     LOWTR+1
00012Br 2  85 94                sta     DEST+1
00012Dr 2  A5 CE                lda     LOWTR
00012Fr 2  88                   dey
000130r 2  F1 CE                sbc     (LOWTR),y
000132r 2  18                   clc
000133r 2  65 9C                adc     VARTAB
000135r 2  85 9C                sta     VARTAB
000137r 2  85 93                sta     DEST
000139r 2  A5 9D                lda     VARTAB+1
00013Br 2  69 FF                adc     #$FF
00013Dr 2  85 9D                sta     VARTAB+1
00013Fr 2  E5 CF                sbc     LOWTR+1
000141r 2  AA                   tax
000142r 2  38                   sec
000143r 2  A5 CE                lda     LOWTR
000145r 2  E5 9C                sbc     VARTAB
000147r 2  A8                   tay
000148r 2  B0 03                bcs     L23A5
00014Ar 2  E8                   inx
00014Br 2  C6 94                dec     DEST+1
00014Dr 2               L23A5:
00014Dr 2  18                   clc
00014Er 2  65 91                adc     INDEX
000150r 2  90 03                bcc     L23AD
000152r 2  C6 92                dec     INDEX+1
000154r 2  18                   clc
000155r 2               L23AD:
000155r 2  B1 91                lda     (INDEX),y
000157r 2  91 93                sta     (DEST),y
000159r 2  C8                   iny
00015Ar 2  D0 F9                bne     L23AD
00015Cr 2  E6 92                inc     INDEX+1
00015Er 2  E6 94                inc     DEST+1
000160r 2  CA                   dex
000161r 2  D0 F2                bne     L23AD
000163r 2               .endif
000163r 2               ; ----------------------------------------------------------------------------
000163r 2               PUT_NEW_LINE:
000163r 2               .ifndef KBD
000163r 2                 .ifdef CONFIG_2
000163r 2  20 rr rr             jsr     SETPTRS
000166r 2  20 rr rr             jsr     LE33D
000169r 2  A5 35                lda     INPUTBUFFER
00016Br 2  F0 8C                beq     L2351
00016Dr 2  18                   clc
00016Er 2                 .else
00016Er 2                       lda     INPUTBUFFER
00016Er 2                       beq     FIX_LINKS
00016Er 2                       lda     MEMSIZ
00016Er 2                       ldy     MEMSIZ+1
00016Er 2                       sta     FRETOP
00016Er 2                       sty     FRETOP+1
00016Er 2                 .endif
00016Er 2               .endif
00016Er 2  A5 9C                lda     VARTAB
000170r 2  85 C9                sta     HIGHTR
000172r 2  65 26                adc     EOLPNTR
000174r 2  85 C7                sta     HIGHDS
000176r 2  A4 9D                ldy     VARTAB+1
000178r 2  84 CA                sty     HIGHTR+1
00017Ar 2  90 01                bcc     L23D6
00017Cr 2  C8                   iny
00017Dr 2               L23D6:
00017Dr 2  84 C8                sty     HIGHDS+1
00017Fr 2  20 rr rr             jsr     BLTU
000182r 2               .ifdef CONFIG_INPUTBUFFER_0200
000182r 2                       lda     LINNUM
000182r 2                       ldy     LINNUM+1
000182r 2                       sta     INPUTBUFFER-2
000182r 2                       sty     INPUTBUFFER-1
000182r 2               .endif
000182r 2  A5 A0                lda     STREND
000184r 2  A4 A1                ldy     STREND+1
000186r 2  85 9C                sta     VARTAB
000188r 2  84 9D                sty     VARTAB+1
00018Ar 2  A4 26                ldy     EOLPNTR
00018Cr 2  88                   dey
00018Dr 2               ; ---COPY LINE INTO PROGRAM-------
00018Dr 2               L23E6:
00018Dr 2  B9 31 00             lda     INPUTBUFFER-4,y
000190r 2  91 CE                sta     (LOWTR),y
000192r 2  88                   dey
000193r 2  10 F8                bpl     L23E6
000195r 2               
000195r 2               ; ----------------------------------------------------------------------------
000195r 2               ; CLEAR ALL VARIABLES
000195r 2               ; RE-ESTABLISH ALL FORWARD LINKS
000195r 2               ; ----------------------------------------------------------------------------
000195r 2               FIX_LINKS:
000195r 2  20 rr rr             jsr     SETPTRS
000198r 2               .ifdef CONFIG_2
000198r 2  20 rr rr             jsr     LE33D
00019Br 2  4C rr rr             jmp     L2351
00019Er 2               LE33D:
00019Er 2               .endif
00019Er 2  A5 9A                lda     TXTTAB
0001A0r 2  A4 9B                ldy     TXTTAB+1
0001A2r 2  85 91                sta     INDEX
0001A4r 2  84 92                sty     INDEX+1
0001A6r 2  18                   clc
0001A7r 2               L23FA:
0001A7r 2  A0 01                ldy     #$01
0001A9r 2  B1 91                lda     (INDEX),y
0001ABr 2               .ifdef CONFIG_2
0001ABr 2  F0 1D                beq     RET3
0001ADr 2               .else
0001ADr 2                       jeq     L2351
0001ADr 2               .endif
0001ADr 2  A0 04                ldy     #$04
0001AFr 2               L2405:
0001AFr 2  C8                   iny
0001B0r 2  B1 91                lda     (INDEX),y
0001B2r 2  D0 FB                bne     L2405
0001B4r 2  C8                   iny
0001B5r 2  98                   tya
0001B6r 2  65 91                adc     INDEX
0001B8r 2  AA                   tax
0001B9r 2  A0 00                ldy     #$00
0001BBr 2  91 91                sta     (INDEX),y
0001BDr 2  A5 92                lda     INDEX+1
0001BFr 2  69 00                adc     #$00
0001C1r 2  C8                   iny
0001C2r 2  91 91                sta     (INDEX),y
0001C4r 2  86 91                stx     INDEX
0001C6r 2  85 92                sta     INDEX+1
0001C8r 2  90 DD                bcc     L23FA	; always
0001CAr 2               
0001CAr 2               ; ----------------------------------------------------------------------------
0001CAr 2               .ifdef KBD
0001CAr 2               .include "kbd_loadsave.s"
0001CAr 2               .endif
0001CAr 2               
0001CAr 2               .ifdef CONFIG_2
0001CAr 2               ; !!! kbd_loadsave.s requires an RTS here!
0001CAr 2               RET3:
0001CAr 2  60           		rts
0001CBr 2               .endif
0001CBr 2               
0001CBr 2               .include "inline.s"
0001CBr 3               .segment "CODE"
0001CBr 3               
0001CBr 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001CBr 3               L2420:
0001CBr 3                 .ifdef OSI
0001CBr 3                       jsr     OUTDO
0001CBr 3                 .endif
0001CBr 3  CA                   dex
0001CCr 3                 .ifdef AIM65
0001CCr 3                       bmi     L2423
0001CCr 3                       jsr     PSLS
0001CCr 3                       jmp     INLIN2
0001CCr 3               LB35F:
0001CCr 3                       jsr     OUTDO
0001CCr 3                 .else
0001CCr 3  10 05                bpl     INLIN2
0001CEr 3                 .endif
0001CEr 3               L2423:
0001CEr 3                 .ifdef OSI
0001CEr 3                       jsr     OUTDO
0001CEr 3                 .endif
0001CEr 3  20 rr rr             jsr     CRDO
0001D1r 3               .endif
0001D1r 3               
0001D1r 3               ; ----------------------------------------------------------------------------
0001D1r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001D1r 3               ; ----------------------------------------------------------------------------
0001D1r 3               .ifndef KBD
0001D1r 3               INLIN:
0001D1r 3                 .ifdef APPLE
0001D1r 3                       ldx     #$DD
0001D1r 3               INLIN1:
0001D1r 3                       stx     $33
0001D1r 3                       jsr     L2900
0001D1r 3                       cpx     #$EF
0001D1r 3                       bcs     L0C32
0001D1r 3                       ldx     #$EF
0001D1r 3               L0C32:
0001D1r 3                       lda     #$00
0001D1r 3                       sta     INPUTBUFFER,x
0001D1r 3                       ldx     #<INPUTBUFFER-1
0001D1r 3                       ldy     #>INPUTBUFFER-1
0001D1r 3                       rts
0001D1r 3                 .endif
0001D1r 3               
0001D1r 3                 .ifndef APPLE
0001D1r 3  A2 00                ldx     #$00
0001D3r 3               INLIN2:
0001D3r 3  20 rr rr             jsr     GETLN
0001D6r 3                   .ifdef AIM65
0001D6r 3                       cmp     #$1A
0001D6r 3                       bne     INLINAIM
0001D6r 3                       jsr     DU13
0001D6r 3                       jmp     INLIN
0001D6r 3               INLINAIM:
0001D6r 3                   .endif
0001D6r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001D6r 3  C9 07                cmp     #$07
0001D8r 3  F0 14                beq     L2443
0001DAr 3                   .endif
0001DAr 3  C9 0D                cmp     #$0D
0001DCr 3  F0 20                beq     L2453
0001DEr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001DEr 3  C9 20                cmp     #$20
0001E0r 3                     .ifdef AIM65
0001E0r 3                       bcc     L244E
0001E0r 3                     .else
0001E0r 3  90 F1                bcc     INLIN2
0001E2r 3                     .endif
0001E2r 3                     .ifdef MICROTAN
0001E2r 3  C9 80                cmp     #$80
0001E4r 3                     .else
0001E4r 3                       .ifdef AIM65
0001E4r 3                       cmp     #$7F
0001E4r 3                       beq     L2420
0001E4r 3                       .endif
0001E4r 3                       cmp     #$7D
0001E4r 3                     .endif
0001E4r 3  B0 ED                bcs     INLIN2
0001E6r 3  C9 40                cmp     #$40 ; @
0001E8r 3                     .ifdef AIM65
0001E8r 3                       beq     LB35F
0001E8r 3                     .else
0001E8r 3  F0 E4                beq     L2423
0001EAr 3                     .ifdef MICROTAN
0001EAr 3  C9 7F                cmp     #$7F ; DEL
0001ECr 3                     .else
0001ECr 3                       cmp     #$5F ; _
0001ECr 3                     .endif
0001ECr 3  F0 DD                beq     L2420
0001EEr 3                     .endif
0001EEr 3               L2443:
0001EEr 3                     .ifdef MICROTAN
0001EEr 3  E0 4F                cpx     #$4F
0001F0r 3                     .else
0001F0r 3                       cpx     #$47
0001F0r 3                     .endif
0001F0r 3  B0 05                bcs     L244C
0001F2r 3                   .endif
0001F2r 3  95 35                sta     INPUTBUFFER,x
0001F4r 3  E8                   inx
0001F5r 3                   .if .def(OSI) || .def(AIM65)
0001F5r 3                       .byte   $2C
0001F5r 3                   .else
0001F5r 3  D0 DC                bne     INLIN2
0001F7r 3                   .endif
0001F7r 3               L244C:
0001F7r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001F7r 3  A9 07                lda     #$07 ; BEL
0001F9r 3               L244E:
0001F9r 3  20 rr rr             jsr     OUTDO
0001FCr 3  D0 D5                bne     INLIN2
0001FEr 3                   .endif
0001FEr 3               L2453:
0001FEr 3  4C rr rr             jmp     L29B9
000201r 3                 .endif
000201r 3               .endif
000201r 3               
000201r 3               .ifndef KBD
000201r 3                 .ifndef APPLE
000201r 3               GETLN:
000201r 3                   .ifdef CONFIG_FILE
000201r 3                       jsr     CHRIN
000201r 3                       ldy     CURDVC
000201r 3                       bne     L2465
000201r 3                   .else
000201r 3  20 10 E2             jsr     MONRDKEY
000204r 3                   .endif
000204r 3                   .ifdef OSI
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       nop
000204r 3                       and     #$7F
000204r 3                   .endif
000204r 3                 .endif
000204r 3                 .ifdef APPLE
000204r 3               RDKEY:
000204r 3                       jsr     LFD0C
000204r 3                       and     #$7F
000204r 3                 .endif
000204r 3                   .ifdef SYM1
000204r 3                       cmp     #$14
000204r 3                   .else
000204r 3  C9 0F                cmp     #$0F
000206r 3                   .endif
000206r 3  D0 08                bne     L2465
000208r 3  48                   pha
000209r 3  A5 2E                lda     Z14
00020Br 3  49 FF                eor     #$FF
00020Dr 3  85 2E                sta     Z14
00020Fr 3  68                   pla
000210r 3               L2465:
000210r 3  60                   rts
000211r 3               .endif
000211r 3               
000211r 2               
000211r 2               ; ----------------------------------------------------------------------------
000211r 2               ; TOKENIZE THE INPUT LINE
000211r 2               ; ----------------------------------------------------------------------------
000211r 2               PARSE_INPUT_LINE:
000211r 2  A6 E9                ldx     TXTPTR
000213r 2  A0 04                ldy     #$04
000215r 2  84 2A                sty     DATAFLG
000217r 2               L246C:
000217r 2  BD 00 00             lda     INPUTBUFFERX,x
00021Ar 2               .ifdef CONFIG_CBM_ALL
00021Ar 2                       bpl     LC49E
00021Ar 2                       cmp     #$FF
00021Ar 2                       beq     L24AC
00021Ar 2                       inx
00021Ar 2                       bne     L246C
00021Ar 2               LC49E:
00021Ar 2               .endif
00021Ar 2  C9 20                cmp     #$20
00021Cr 2  F0 37                beq     L24AC
00021Er 2  85 25                sta     ENDCHR
000220r 2  C9 22                cmp     #$22
000222r 2  F0 56                beq     L24D0
000224r 2  24 2A                bit     DATAFLG
000226r 2  70 2D                bvs     L24AC
000228r 2  C9 3F                cmp     #$3F
00022Ar 2  D0 04                bne     L2484
00022Cr 2  A9 97                lda     #TOKEN_PRINT
00022Er 2  D0 25                bne     L24AC
000230r 2               L2484:
000230r 2  C9 30                cmp     #$30
000232r 2  90 04                bcc     L248C
000234r 2  C9 3C                cmp     #$3C
000236r 2  90 1D                bcc     L24AC
000238r 2               ; ----------------------------------------------------------------------------
000238r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000238r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000238r 2               ; ----------------------------------------------------------------------------
000238r 2               L248C:
000238r 2  84 E0                sty     STRNG2
00023Ar 2  A0 00                ldy     #$00
00023Cr 2  84 26                sty     EOLPNTR
00023Er 2  88                   dey
00023Fr 2  86 E9                stx     TXTPTR
000241r 2  CA                   dex
000242r 2               L2496:
000242r 2  C8                   iny
000243r 2               L2497:
000243r 2  E8                   inx
000244r 2               L2498:
000244r 2               .ifdef KBD
000244r 2                       jsr     GET_UPPER
000244r 2               .else
000244r 2  BD 00 00             lda     INPUTBUFFERX,x
000247r 2                 .ifndef CONFIG_2
000247r 2                       cmp     #$20
000247r 2                       beq     L2497
000247r 2                 .endif
000247r 2               .endif
000247r 2  38                   sec
000248r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
00024Br 2  F0 F5                beq     L2496
00024Dr 2  C9 80                cmp     #$80
00024Fr 2  D0 30                bne     L24D7
000251r 2  05 26                ora     EOLPNTR
000253r 2               ; ----------------------------------------------------------------------------
000253r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000253r 2               ; ----------------------------------------------------------------------------
000253r 2               L24AA:
000253r 2  A4 E0                ldy     STRNG2
000255r 2               L24AC:
000255r 2  E8                   inx
000256r 2  C8                   iny
000257r 2  99 30 00             sta     INPUTBUFFER-5,y
00025Ar 2  B9 30 00             lda     INPUTBUFFER-5,y
00025Dr 2  F0 36                beq     L24EA
00025Fr 2  38                   sec
000260r 2  E9 3A                sbc     #$3A
000262r 2  F0 04                beq     L24BF
000264r 2  C9 49                cmp     #$49
000266r 2  D0 02                bne     L24C1
000268r 2               L24BF:
000268r 2  85 2A                sta     DATAFLG
00026Ar 2               L24C1:
00026Ar 2  38                   sec
00026Br 2  E9 54                sbc     #TOKEN_REM-':'
00026Dr 2  D0 A8                bne     L246C
00026Fr 2  85 25                sta     ENDCHR
000271r 2               ; ----------------------------------------------------------------------------
000271r 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000271r 2               ; BY COPYING CHARS UP TO ENDCHR.
000271r 2               ; ----------------------------------------------------------------------------
000271r 2               L24C8:
000271r 2  BD 00 00             lda     INPUTBUFFERX,x
000274r 2  F0 DF                beq     L24AC
000276r 2  C5 25                cmp     ENDCHR
000278r 2  F0 DB                beq     L24AC
00027Ar 2               L24D0:
00027Ar 2  C8                   iny
00027Br 2  99 30 00             sta     INPUTBUFFER-5,y
00027Er 2  E8                   inx
00027Fr 2  D0 F0                bne     L24C8
000281r 2               ; ----------------------------------------------------------------------------
000281r 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
000281r 2               ; ----------------------------------------------------------------------------
000281r 2               L24D7:
000281r 2  A6 E9                ldx     TXTPTR
000283r 2  E6 26                inc     EOLPNTR
000285r 2               L24DB:
000285r 2  C8                   iny
000286r 2  B9 rr rr             lda     MATHTBL+28+1,y
000289r 2  10 FA                bpl     L24DB
00028Br 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00028Er 2  D0 B4                bne     L2498
000290r 2  BD 00 00             lda     INPUTBUFFERX,x
000293r 2  10 BE                bpl     L24AA
000295r 2               ; ---END OF LINE------------------
000295r 2               L24EA:
000295r 2  99 32 00             sta     INPUTBUFFER-3,y
000298r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000298r 2                       dec     TXTPTR+1
000298r 2               .endif
000298r 2  A9 34                lda     #<INPUTBUFFER-1
00029Ar 2  85 E9                sta     TXTPTR
00029Cr 2  60                   rts
00029Dr 2               
00029Dr 2               ; ----------------------------------------------------------------------------
00029Dr 2               ; SEARCH FOR LINE
00029Dr 2               ;
00029Dr 2               ; (LINNUM) = LINE # TO FIND
00029Dr 2               ; IF NOT FOUND:  CARRY = 0
00029Dr 2               ;	LOWTR POINTS AT NEXT LINE
00029Dr 2               ; IF FOUND:      CARRY = 1
00029Dr 2               ;	LOWTR POINTS AT LINE
00029Dr 2               ; ----------------------------------------------------------------------------
00029Dr 2               FNDLIN:
00029Dr 2               .ifdef KBD
00029Dr 2                       jsr     CHRGET
00029Dr 2                       jmp     LE444
00029Dr 2               LE440:
00029Dr 2                       php
00029Dr 2                       jsr     LINGET
00029Dr 2               LE444:
00029Dr 2                       jsr     LF457
00029Dr 2                       ldx     #$FF
00029Dr 2                       plp
00029Dr 2                       beq     LE464
00029Dr 2                       jsr     CHRGOT
00029Dr 2                       beq     L2520
00029Dr 2                       cmp     #$A5
00029Dr 2                       bne     L2520
00029Dr 2                       jsr     CHRGET
00029Dr 2                       beq     LE464
00029Dr 2                       bcs     LE461
00029Dr 2                       jsr     LINGET
00029Dr 2                       beq     L2520
00029Dr 2               LE461:
00029Dr 2                       jmp     SYNERR
00029Dr 2               LE464:
00029Dr 2                       stx     LINNUM
00029Dr 2                       stx     LINNUM+1
00029Dr 2               .else
00029Dr 2  A5 9A                lda     TXTTAB
00029Fr 2  A6 9B                ldx     TXTTAB+1
0002A1r 2               FL1:
0002A1r 2  A0 01                ldy     #$01
0002A3r 2  85 CE                sta     LOWTR
0002A5r 2  86 CF                stx     LOWTR+1
0002A7r 2  B1 CE                lda     (LOWTR),y
0002A9r 2  F0 1F                beq     L251F
0002ABr 2  C8                   iny
0002ACr 2  C8                   iny
0002ADr 2  A5 34                lda     LINNUM+1
0002AFr 2  D1 CE                cmp     (LOWTR),y
0002B1r 2  90 18                bcc     L2520
0002B3r 2  F0 03                beq     L250D
0002B5r 2  88                   dey
0002B6r 2  D0 09                bne     L2516
0002B8r 2               L250D:
0002B8r 2  A5 33                lda     LINNUM
0002BAr 2  88                   dey
0002BBr 2  D1 CE                cmp     (LOWTR),y
0002BDr 2  90 0C                bcc     L2520
0002BFr 2  F0 0A                beq     L2520
0002C1r 2               L2516:
0002C1r 2  88                   dey
0002C2r 2  B1 CE                lda     (LOWTR),y
0002C4r 2  AA                   tax
0002C5r 2  88                   dey
0002C6r 2  B1 CE                lda     (LOWTR),y
0002C8r 2  B0 D7                bcs     FL1
0002CAr 2               L251F:
0002CAr 2  18                   clc
0002CBr 2               .endif
0002CBr 2               L2520:
0002CBr 2  60                   rts
0002CCr 2               
0002CCr 2               ; ----------------------------------------------------------------------------
0002CCr 2               ; "NEW" STATEMENT
0002CCr 2               ; ----------------------------------------------------------------------------
0002CCr 2               NEW:
0002CCr 2  D0 FD                bne     L2520
0002CEr 2               SCRTCH:
0002CEr 2  A9 00                lda     #$00
0002D0r 2  A8                   tay
0002D1r 2  91 9A                sta     (TXTTAB),y
0002D3r 2  C8                   iny
0002D4r 2  91 9A                sta     (TXTTAB),y
0002D6r 2  A5 9A                lda     TXTTAB
0002D8r 2               .ifdef CONFIG_2
0002D8r 2  18           		clc
0002D9r 2               .endif
0002D9r 2  69 02                adc     #$02
0002DBr 2  85 9C                sta     VARTAB
0002DDr 2  A5 9B                lda     TXTTAB+1
0002DFr 2  69 00                adc     #$00
0002E1r 2  85 9D                sta     VARTAB+1
0002E3r 2               ; ----------------------------------------------------------------------------
0002E3r 2               SETPTRS:
0002E3r 2  20 rr rr             jsr     STXTPT
0002E6r 2               .ifdef CONFIG_11A
0002E6r 2  A9 00                lda     #$00
0002E8r 2               
0002E8r 2               ; ----------------------------------------------------------------------------
0002E8r 2               ; "CLEAR" STATEMENT
0002E8r 2               ; ----------------------------------------------------------------------------
0002E8r 2               CLEAR:
0002E8r 2  D0 2A                bne     L256A
0002EAr 2               .endif
0002EAr 2               CLEARC:
0002EAr 2               .ifdef KBD
0002EAr 2                       lda     #<CONST_MEMSIZ
0002EAr 2                       ldy     #>CONST_MEMSIZ
0002EAr 2               .else
0002EAr 2  A5 A6                lda     MEMSIZ
0002ECr 2  A4 A7                ldy     MEMSIZ+1
0002EEr 2               .endif
0002EEr 2  85 A2                sta     FRETOP
0002F0r 2  84 A3                sty     FRETOP+1
0002F2r 2               .ifdef CONFIG_CBM_ALL
0002F2r 2                       jsr     CLALL
0002F2r 2               .endif
0002F2r 2  A5 9C                lda     VARTAB
0002F4r 2  A4 9D                ldy     VARTAB+1
0002F6r 2  85 9E                sta     ARYTAB
0002F8r 2  84 9F                sty     ARYTAB+1
0002FAr 2  85 A0                sta     STREND
0002FCr 2  84 A1                sty     STREND+1
0002FEr 2  20 rr rr             jsr     RESTORE
000301r 2               ; ----------------------------------------------------------------------------
000301r 2               STKINI:
000301r 2  A2 88                ldx     #TEMPST
000303r 2  86 85                stx     TEMPPT
000305r 2  68                   pla
000306r 2               .ifdef CONFIG_2
000306r 2  A8           		tay
000307r 2               .else
000307r 2                       sta     STACK+STACK_TOP+1
000307r 2               .endif
000307r 2  68                   pla
000308r 2               .ifndef CONFIG_2
000308r 2                       sta     STACK+STACK_TOP+2
000308r 2               .endif
000308r 2  A2 FE                ldx     #STACK_TOP
00030Ar 2  9A                   txs
00030Br 2               .ifdef CONFIG_2
00030Br 2  48                   pha
00030Cr 2  98                   tya
00030Dr 2  48                   pha
00030Er 2               .endif
00030Er 2  A9 00                lda     #$00
000310r 2  85 AD                sta     OLDTEXT+1
000312r 2  85 2B                sta     SUBFLG
000314r 2               L256A:
000314r 2  60                   rts
000315r 2               
000315r 2               ; ----------------------------------------------------------------------------
000315r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000315r 2               ; ----------------------------------------------------------------------------
000315r 2               STXTPT:
000315r 2  18                   clc
000316r 2  A5 9A                lda     TXTTAB
000318r 2  69 FF                adc     #$FF
00031Ar 2  85 E9                sta     TXTPTR
00031Cr 2  A5 9B                lda     TXTTAB+1
00031Er 2  69 FF                adc     #$FF
000320r 2  85 EA                sta     TXTPTR+1
000322r 2  60                   rts
000323r 2               
000323r 2               ; ----------------------------------------------------------------------------
000323r 2               .ifdef KBD
000323r 2               LE4C0:
000323r 2                       ldy     #<LE444
000323r 2                       ldx     #>LE444
000323r 2               LE4C4:
000323r 2                       jsr     LFFD6
000323r 2                       jsr     LFFED
000323r 2                       lda     $0504
000323r 2                       clc
000323r 2                       adc     #$08
000323r 2                       sta     $0504
000323r 2                       rts
000323r 2               
000323r 2               CMPJMPADRS:
000323r 2                       lda     1,x
000323r 2                       cmp     JMPADRS+2
000323r 2                       bne     LE4DE
000323r 2                       lda     0,x
000323r 2                       cmp     JMPADRS+1
000323r 2               LE4DE:
000323r 2                       rts
000323r 2               .endif
000323r 2               
000323r 2               ; ----------------------------------------------------------------------------
000323r 2               ; "LIST" STATEMENT
000323r 2               ; ----------------------------------------------------------------------------
000323r 2               LIST:
000323r 2               .ifdef KBD
000323r 2                       jsr     LE440
000323r 2                       bne     LE4DE
000323r 2                       pla
000323r 2                       pla
000323r 2               L25A6:
000323r 2                       jsr     CRDO
000323r 2               .else
000323r 2                   .ifdef AIM65
000323r 2                       pha
000323r 2                       lda     #$00
000323r 2               LB4BF:
000323r 2                       sta     INPUTFLG
000323r 2                       pla
000323r 2                   .endif
000323r 2                 .ifdef MICROTAN
000323r 2  08                   php
000324r 2  4C rr rr             jmp     LE21C ; patch
000327r 2               LC57E:
000327r 2                  .elseif .def(AIM65) || .def(SYM1)
000327r 2                       php
000327r 2                       jsr     LINGET
000327r 2               LC57E:
000327r 2                 .else
000327r 2                       bcc     L2581
000327r 2                       beq     L2581
000327r 2                       cmp     #TOKEN_MINUS
000327r 2                       bne     L256A
000327r 2               L2581:
000327r 2                       jsr     LINGET
000327r 2                 .endif
000327r 2  20 rr rr             jsr     FNDLIN
00032Ar 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00032Ar 2  28                   plp
00032Br 2  F0 14                beq     L2598
00032Dr 2                 .endif
00032Dr 2  20 E8 00             jsr     CHRGOT
000330r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000330r 2  F0 15                beq     L25A6
000332r 2                 .else
000332r 2                       beq     L2598
000332r 2                 .endif
000332r 2  C9 A5                cmp     #TOKEN_MINUS
000334r 2  D0 95                bne     L2520
000336r 2  20 E2 00             jsr     CHRGET
000339r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000339r 2  F0 06                beq     L2598
00033Br 2  20 rr rr             jsr     LINGET
00033Er 2  F0 07                beq     L25A6
000340r 2  60                   rts
000341r 2                 .else
000341r 2                       jsr     LINGET
000341r 2                       bne     L2520
000341r 2                 .endif
000341r 2               L2598:
000341r 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
000341r 2                       pla
000341r 2                       pla
000341r 2                       lda     LINNUM
000341r 2                       ora     LINNUM+1
000341r 2                       bne     L25A6
000341r 2                 .endif
000341r 2  A9 FF                lda     #$FF
000343r 2  85 33                sta     LINNUM
000345r 2  85 34                sta     LINNUM+1
000347r 2               L25A6:
000347r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000347r 2  68                   pla
000348r 2  68                   pla
000349r 2                 .endif
000349r 2               L25A6X:
000349r 2               .endif
000349r 2  A0 01                ldy     #$01
00034Br 2               .ifdef CONFIG_DATAFLG
00034Br 2                       sty     DATAFLG
00034Br 2               .endif
00034Br 2  B1 CE                lda     (LOWTRX),y
00034Dr 2  F0 39                beq     L25E5
00034Fr 2               .ifdef MICROTAN
00034Fr 2  4C rr rr             jmp     LE21F
000352r 2               LC5A9:
000352r 2               .else
000352r 2                       jsr     ISCNTC
000352r 2               .endif
000352r 2               .ifndef KBD
000352r 2  20 rr rr             jsr     CRDO
000355r 2               .endif
000355r 2  C8                   iny
000356r 2  B1 CE                lda     (LOWTRX),y
000358r 2  AA                   tax
000359r 2  C8                   iny
00035Ar 2  B1 CE                lda     (LOWTRX),y
00035Cr 2  C5 34                cmp     LINNUM+1
00035Er 2  D0 04                bne     L25C1
000360r 2  E4 33                cpx     LINNUM
000362r 2  F0 02                beq     L25C3
000364r 2               L25C1:
000364r 2  B0 22                bcs     L25E5
000366r 2               ; ---LIST ONE LINE----------------
000366r 2               L25C3:
000366r 2  84 B8                sty     FORPNT
000368r 2  20 rr rr             jsr     LINPRT
00036Br 2  A9 20                lda     #$20
00036Dr 2               L25CA:
00036Dr 2  A4 B8                ldy     FORPNT
00036Fr 2  29 7F                and     #$7F
000371r 2               L25CE:
000371r 2  20 rr rr             jsr     OUTDO
000374r 2               .ifdef CONFIG_DATAFLG
000374r 2                       cmp     #$22
000374r 2                       bne     LA519
000374r 2                       lda     DATAFLG
000374r 2                       eor     #$FF
000374r 2                       sta     DATAFLG
000374r 2               LA519:
000374r 2               .endif
000374r 2  C8                   iny
000375r 2               .ifdef CONFIG_11
000375r 2  F0 11                beq     L25E5
000377r 2               .endif
000377r 2  B1 CE                lda     (LOWTRX),y
000379r 2  D0 10                bne     L25E8
00037Br 2  A8                   tay
00037Cr 2  B1 CE                lda     (LOWTRX),y
00037Er 2  AA                   tax
00037Fr 2  C8                   iny
000380r 2  B1 CE                lda     (LOWTRX),y
000382r 2  86 CE                stx     LOWTRX
000384r 2  85 CF                sta     LOWTRX+1
000386r 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000386r 2  D0 C1                bne     L25A6X
000388r 2               .else
000388r 2                       bne     L25A6
000388r 2               .endif
000388r 2               L25E5:
000388r 2               .ifdef AIM65
000388r 2                       lda     INPUTFLG
000388r 2                       beq     L25E5a
000388r 2                       jsr     CRDO
000388r 2                       jsr     CRDO
000388r 2                       lda     #$1a
000388r 2                       jsr     OUTDO
000388r 2                       jsr     $e50a
000388r 2               L25E5a:
000388r 2               .endif
000388r 2  4C rr rr             jmp     RESTART
00038Br 2               L25E8:
00038Br 2  10 E4                bpl     L25CE
00038Dr 2               .ifdef CONFIG_DATAFLG
00038Dr 2                       cmp     #$FF
00038Dr 2                       beq     L25CE
00038Dr 2                       bit     DATAFLG
00038Dr 2                       bmi     L25CE
00038Dr 2               .endif
00038Dr 2  38                   sec
00038Er 2  E9 7F                sbc     #$7F
000390r 2  AA                   tax
000391r 2  84 B8                sty     FORPNT
000393r 2  A0 FF                ldy     #$FF
000395r 2               L25F2:
000395r 2  CA                   dex
000396r 2  F0 08                beq     L25FD
000398r 2               L25F5:
000398r 2  C8                   iny
000399r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00039Cr 2  10 FA                bpl     L25F5
00039Er 2  30 F5                bmi     L25F2
0003A0r 2               L25FD:
0003A0r 2  C8                   iny
0003A1r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003A4r 2  30 C7                bmi     L25CA
0003A6r 2  20 rr rr             jsr     OUTDO
0003A9r 2  D0 F5                bne     L25FD	; always
0003ABr 2               
0003ABr 2               
0003ABr 1               .include "flow1.s"
0003ABr 2               .segment "CODE"
0003ABr 2               
0003ABr 2               ; ----------------------------------------------------------------------------
0003ABr 2               ; "FOR" STATEMENT
0003ABr 2               ;
0003ABr 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003ABr 2               ; 2 -- TXTPTR
0003ABr 2               ; 2 -- LINE NUMBER
0003ABr 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003ABr 2               ; 1 -- STEP SIGN
0003ABr 2               ; 5 -- STEP VALUE
0003ABr 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003ABr 2               ; 1 -- FOR TOKEN ($81)
0003ABr 2               ; ----------------------------------------------------------------------------
0003ABr 2               FOR:
0003ABr 2  A9 80                lda     #$80
0003ADr 2  85 2B                sta     SUBFLG
0003AFr 2  20 rr rr             jsr     LET
0003B2r 2  20 rr rr             jsr     GTFORPNT
0003B5r 2  D0 05                bne     L2619
0003B7r 2  8A                   txa
0003B8r 2  69 0F                adc     #FOR_STACK1
0003BAr 2  AA                   tax
0003BBr 2  9A                   txs
0003BCr 2               L2619:
0003BCr 2  68                   pla
0003BDr 2  68                   pla
0003BEr 2  A9 09                lda     #FOR_STACK2
0003C0r 2  20 rr rr             jsr     CHKMEM
0003C3r 2  20 rr rr             jsr     DATAN
0003C6r 2  18                   clc
0003C7r 2  98                   tya
0003C8r 2  65 E9                adc     TXTPTR
0003CAr 2  48                   pha
0003CBr 2  A5 EA                lda     TXTPTR+1
0003CDr 2  69 00                adc     #$00
0003CFr 2  48                   pha
0003D0r 2  A5 A9                lda     CURLIN+1
0003D2r 2  48                   pha
0003D3r 2  A5 A8                lda     CURLIN
0003D5r 2  48                   pha
0003D6r 2  A9 9E                lda     #TOKEN_TO
0003D8r 2  20 rr rr             jsr     SYNCHR
0003DBr 2  20 rr rr             jsr     CHKNUM
0003DEr 2  20 rr rr             jsr     FRMNUM
0003E1r 2  A5 D5                lda     FACSIGN
0003E3r 2  09 7F                ora     #$7F
0003E5r 2  25 D1                and     FAC+1
0003E7r 2  85 D1                sta     FAC+1
0003E9r 2  A9 rr                lda     #<STEP
0003EBr 2  A0 rr                ldy     #>STEP
0003EDr 2  85 91                sta     INDEX
0003EFr 2  84 92                sty     INDEX+1
0003F1r 2  4C rr rr             jmp     FRM_STACK3
0003F4r 2               
0003F4r 2               ; ----------------------------------------------------------------------------
0003F4r 2               ; "STEP" PHRASE OF "FOR" STATEMENT
0003F4r 2               ; ----------------------------------------------------------------------------
0003F4r 2               STEP:
0003F4r 2  A9 rr                lda     #<CON_ONE
0003F6r 2  A0 rr                ldy     #>CON_ONE
0003F8r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0003FBr 2  20 E8 00             jsr     CHRGOT
0003FEr 2  C9 A3                cmp     #TOKEN_STEP
000400r 2  D0 06                bne     L2665
000402r 2  20 E2 00             jsr     CHRGET
000405r 2  20 rr rr             jsr     FRMNUM
000408r 2               L2665:
000408r 2  20 rr rr             jsr     SIGN
00040Br 2  20 rr rr             jsr     FRM_STACK2
00040Er 2  A5 B9                lda     FORPNT+1
000410r 2  48                   pha
000411r 2  A5 B8                lda     FORPNT
000413r 2  48                   pha
000414r 2  A9 81                lda     #$81
000416r 2  48                   pha
000417r 2               
000417r 2               ; ----------------------------------------------------------------------------
000417r 2               ; PERFORM NEXT STATEMENT
000417r 2               ; ----------------------------------------------------------------------------
000417r 2               NEWSTT:
000417r 2  20 rr rr             jsr     ISCNTC
00041Ar 2  A5 E9                lda     TXTPTR
00041Cr 2  A4 EA                ldy     TXTPTR+1
00041Er 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
00041Er 2                       cpy     #>INPUTBUFFER
00041Er 2                 .ifdef CBM2
00041Er 2                       nop
00041Er 2                 .endif
00041Er 2                       beq     LC6D4
00041Er 2               .else
00041Er 2               ; BUG on AppleSoft I,
00041Er 2               ; fixed differently on AppleSoft II (ldx/inx)
00041Er 2  F0 06                beq     L2683
000420r 2               .endif
000420r 2  85 AC                sta     OLDTEXT
000422r 2  84 AD                sty     OLDTEXT+1
000424r 2               LC6D4:
000424r 2  A0 00                ldy     #$00
000426r 2               L2683:
000426r 2  B1 E9                lda     (TXTPTR),y
000428r 2               .ifndef CONFIG_11
000428r 2                       beq     LA5DC	; old: 1 cycle more on generic case
000428r 2                       cmp     #$3A
000428r 2                       beq     NEWSTT2
000428r 2               SYNERR1:
000428r 2                       jmp     SYNERR
000428r 2               LA5DC:
000428r 2               .else
000428r 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
00042Ar 2               .endif
00042Ar 2  A0 02                ldy     #$02
00042Cr 2  B1 E9                lda     (TXTPTR),y
00042Er 2  18                   clc
00042Fr 2               .ifdef CONFIG_2
00042Fr 2  D0 03 4C rr          jeq     L2701
000433r 2  rr           
000434r 2               .else
000434r 2                       beq     L2701
000434r 2               .endif
000434r 2  C8                   iny
000435r 2  B1 E9                lda     (TXTPTR),y
000437r 2  85 A8                sta     CURLIN
000439r 2  C8                   iny
00043Ar 2  B1 E9                lda     (TXTPTR),y
00043Cr 2  85 A9                sta     CURLIN+1
00043Er 2  98                   tya
00043Fr 2  65 E9                adc     TXTPTR
000441r 2  85 E9                sta     TXTPTR
000443r 2  90 02                bcc     NEWSTT2
000445r 2  E6 EA                inc     TXTPTR+1
000447r 2               NEWSTT2:
000447r 2  20 E2 00             jsr     CHRGET
00044Ar 2  20 rr rr             jsr     EXECUTE_STATEMENT
00044Dr 2  4C rr rr             jmp     NEWSTT
000450r 2               
000450r 2               ; ----------------------------------------------------------------------------
000450r 2               ; EXECUTE A STATEMENT
000450r 2               ;
000450r 2               ; (A) IS FIRST CHAR OF STATEMENT
000450r 2               ; CARRY IS SET
000450r 2               ; ----------------------------------------------------------------------------
000450r 2               EXECUTE_STATEMENT:
000450r 2               .ifndef CONFIG_11A
000450r 2                       beq     RET1
000450r 2               .else
000450r 2  F0 3C                beq     RET2
000452r 2               .endif
000452r 2               .ifndef CONFIG_11
000452r 2                       sec
000452r 2               .endif
000452r 2               EXECUTE_STATEMENT1:
000452r 2  E9 80                sbc     #$80
000454r 2               .ifndef CONFIG_11
000454r 2                       jcc     LET	; old: 1 cycle more on instr.
000454r 2               .else
000454r 2  90 11                bcc     LET1; new: 1 cycle more on assignment
000456r 2               .endif
000456r 2  C9 1D                cmp     #NUM_TOKENS
000458r 2               .ifdef CONFIG_2
000458r 2  B0 17                bcs     LC721
00045Ar 2               .else
00045Ar 2                       bcs     SYNERR1
00045Ar 2               .endif
00045Ar 2  0A                   asl     a
00045Br 2  A8                   tay
00045Cr 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
00045Fr 2  48                   pha
000460r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000463r 2  48                   pha
000464r 2  4C E2 00             jmp     CHRGET
000467r 2               
000467r 2               .ifdef CONFIG_11
000467r 2               LET1:
000467r 2  4C rr rr             jmp     LET
00046Ar 2               
00046Ar 2               COLON:
00046Ar 2  C9 3A                cmp     #$3A
00046Cr 2  F0 D9                beq     NEWSTT2
00046Er 2               SYNERR1:
00046Er 2  4C rr rr             jmp     SYNERR
000471r 2               .endif
000471r 2               
000471r 2               .ifdef CONFIG_2; GO TO
000471r 2               LC721:
000471r 2  C9 45                cmp     #TOKEN_GO-$80
000473r 2  D0 F9                bne     SYNERR1
000475r 2  20 E2 00             jsr     CHRGET
000478r 2  A9 9E                lda     #TOKEN_TO
00047Ar 2  20 rr rr             jsr     SYNCHR
00047Dr 2  4C rr rr             jmp     GOTO
000480r 2               .endif
000480r 2               
000480r 2               ; ----------------------------------------------------------------------------
000480r 2               ; "RESTORE" STATEMENT
000480r 2               ; ----------------------------------------------------------------------------
000480r 2               RESTORE:
000480r 2  38                   sec
000481r 2  A5 9A                lda     TXTTAB
000483r 2  E9 01                sbc     #$01
000485r 2  A4 9B                ldy     TXTTAB+1
000487r 2  B0 01                bcs     SETDA
000489r 2  88                   dey
00048Ar 2               SETDA:
00048Ar 2  85 B0                sta     DATPTR
00048Cr 2  84 B1                sty     DATPTR+1
00048Er 2               RET2:
00048Er 2  60                   rts
00048Fr 2               
00048Fr 2               .include "iscntc.s"
00048Fr 3               .segment "CODE"
00048Fr 3               ; ----------------------------------------------------------------------------
00048Fr 3               ; SEE IF CONTROL-C TYPED
00048Fr 3               ; ----------------------------------------------------------------------------
00048Fr 3               .ifndef CONFIG_CBM_ALL
00048Fr 3               .include "cbm_iscntc.s"
00048Fr 4               ; nothing - ISCNTC is a KERNAL function
00048Fr 4               
00048Fr 3               .endif
00048Fr 3               .ifdef KBD
00048Fr 3               .include "kbd_iscntc.s"
00048Fr 3               .endif
00048Fr 3               .ifdef OSI
00048Fr 3               .include "osi_iscntc.s"
00048Fr 3               .endif
00048Fr 3               .ifdef APPLE
00048Fr 3               .include "apple_iscntc.s"
00048Fr 3               .endif
00048Fr 3               .ifdef KIM
00048Fr 3               .include "kim_iscntc.s"
00048Fr 3               .endif
00048Fr 3               .ifdef MICROTAN
00048Fr 3               .include "microtan_iscntc.s"
00048Fr 4               .segment "CODE"
00048Fr 4               ISCNTC:
00048Fr 4  A5 01                lda     $01
000491r 4  C9 03                cmp     #$03
000493r 4  F0 03                beq     LC6EF
000495r 4  A9 01                lda     #$01
000497r 4  60                   rts
000498r 4               LC6EF:
000498r 4  EA                   nop
000499r 4  EA                   nop
00049Ar 4  C9 03                cmp     #$03
00049Cr 4               ;!!! runs into "STOP"
00049Cr 4               
00049Cr 3               .endif
00049Cr 3               .ifdef AIM65
00049Cr 3               .include "aim65_iscntc.s"
00049Cr 3               .endif
00049Cr 3               .ifdef SYM1
00049Cr 3               .include "sym1_iscntc.s"
00049Cr 3               .endif
00049Cr 3               .ifdef EATER
00049Cr 3               .include "eater_iscntc.s"
00049Cr 3               .endif
00049Cr 3               ;!!! runs into "STOP"
00049Cr 3               
00049Cr 2               ;!!! runs into "STOP"
00049Cr 2               ; ----------------------------------------------------------------------------
00049Cr 2               ; "STOP" STATEMENT
00049Cr 2               ; ----------------------------------------------------------------------------
00049Cr 2               STOP:
00049Cr 2  B0 01                bcs     END2
00049Er 2               
00049Er 2               ; ----------------------------------------------------------------------------
00049Er 2               ; "END" STATEMENT
00049Er 2               ; ----------------------------------------------------------------------------
00049Er 2               END:
00049Er 2  18                   clc
00049Fr 2               END2:
00049Fr 2  D0 3D                bne     RET1
0004A1r 2  A5 E9                lda     TXTPTR
0004A3r 2  A4 EA                ldy     TXTPTR+1
0004A5r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004A5r 2               ; BUG on AppleSoft I
0004A5r 2               ; fix exists on AppleSoft II
0004A5r 2               ; TXTPTR+1 will always be > 0
0004A5r 2                       ldx     CURLIN+1
0004A5r 2                       inx
0004A5r 2               .endif
0004A5r 2  F0 0C                beq     END4
0004A7r 2  85 AC                sta     OLDTEXT
0004A9r 2  84 AD                sty     OLDTEXT+1
0004ABr 2               CONTROL_C_TYPED:
0004ABr 2  A5 A8                lda     CURLIN
0004ADr 2  A4 A9                ldy     CURLIN+1
0004AFr 2  85 AA                sta     OLDLIN
0004B1r 2  84 AB                sty     OLDLIN+1
0004B3r 2               END4:
0004B3r 2  68                   pla
0004B4r 2  68                   pla
0004B5r 2               L2701:
0004B5r 2  A9 rr                lda     #<QT_BREAK
0004B7r 2  A0 rr                ldy     #>QT_BREAK
0004B9r 2               .ifndef KBD
0004B9r 2  A2 00                ldx     #$00
0004BBr 2  86 2E                stx     Z14
0004BDr 2               .endif
0004BDr 2  90 03                bcc     L270E
0004BFr 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004C2r 2               L270E:
0004C2r 2  4C rr rr             jmp     RESTART
0004C5r 2               .ifdef KBD
0004C5r 2               LE664:
0004C5r 2                       tay
0004C5r 2                       jmp     SNGFLT
0004C5r 2               .endif
0004C5r 2               
0004C5r 2               ; ----------------------------------------------------------------------------
0004C5r 2               ; "CONT" COMMAND
0004C5r 2               ; ----------------------------------------------------------------------------
0004C5r 2               CONT:
0004C5r 2  D0 17                bne     RET1
0004C7r 2  A2 D2                ldx     #ERR_CANTCONT
0004C9r 2  A4 AD                ldy     OLDTEXT+1
0004CBr 2  D0 03                bne     L271C
0004CDr 2  4C rr rr             jmp     ERROR
0004D0r 2               L271C:
0004D0r 2  A5 AC                lda     OLDTEXT
0004D2r 2  85 E9                sta     TXTPTR
0004D4r 2  84 EA                sty     TXTPTR+1
0004D6r 2  A5 AA                lda     OLDLIN
0004D8r 2  A4 AB                ldy     OLDLIN+1
0004DAr 2  85 A8                sta     CURLIN
0004DCr 2  84 A9                sty     CURLIN+1
0004DEr 2               RET1:
0004DEr 2  60                   rts
0004DFr 2               
0004DFr 2               .ifdef KBD
0004DFr 2               PRT:
0004DFr 2                       jsr     GETBYT
0004DFr 2                       txa
0004DFr 2               ; not ROR bug safe
0004DFr 2                       ror     a
0004DFr 2                       ror     a
0004DFr 2                       ror     a
0004DFr 2                       sta     $8F
0004DFr 2                       rts
0004DFr 2               
0004DFr 2               LE68C:
0004DFr 2                       ldy     #$12
0004DFr 2               LE68E:
0004DFr 2                       lda     LEA30,y
0004DFr 2                       sta     $03A2,y
0004DFr 2                       dey
0004DFr 2                       bpl     LE68E
0004DFr 2                       rts
0004DFr 2               .endif
0004DFr 2               
0004DFr 2               .ifndef AIM65
0004DFr 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004DFr 2               ; CBM1 has the keyword removed,
0004DFr 2               ; but the code is still here
0004DFr 2               NULL:
0004DFr 2  20 rr rr             jsr     GETBYT
0004E2r 2  D0 FA                bne     RET1
0004E4r 2  E8                   inx
0004E5r 2  E0 F0                cpx     #NULL_MAX
0004E7r 2  B0 04                bcs     L2739
0004E9r 2  CA                   dex
0004EAr 2  86 2F                stx     Z15
0004ECr 2               L2738:
0004ECr 2  60                   rts
0004EDr 2               L2739:
0004EDr 2  4C rr rr             jmp     IQERR
0004F0r 2               .endif
0004F0r 2               .ifndef CONFIG_11A
0004F0r 2               CLEAR:
0004F0r 2                       bne     RET1
0004F0r 2                       jmp     CLEARC
0004F0r 2               .endif
0004F0r 2               .endif
0004F0r 2               
0004F0r 1               .include "loadsave.s"
0004F0r 2               .segment "CODE"
0004F0r 2               
0004F0r 2               .ifdef APPLE
0004F0r 2               .include "apple_loadsave.s"
0004F0r 2               .endif
0004F0r 2               .ifdef KIM
0004F0r 2               .include "kim_loadsave.s"
0004F0r 2               .endif
0004F0r 2               .ifdef MICROTAN
0004F0r 2               .include "microtan_loadsave.s"
0004F0r 3               .segment "CODE"
0004F0r 3               
0004F0r 3               SAVE:
0004F0r 3  A0 00                ldy     #$00
0004F2r 3  F0 02                beq     LC74D
0004F4r 3               LC74B:
0004F4r 3  A0 01                ldy     #$01
0004F6r 3               LC74D:
0004F6r 3  A2 4C                ldx     #$4C
0004F8r 3               LC74F:
0004F8r 3  B5 13                lda     $13,x
0004FAr 3  48                   pha
0004FBr 3  CA                   dex
0004FCr 3  10 FA                bpl     LC74F
0004FEr 3  A2 03                ldx     #$03
000500r 3               LC757:
000500r 3  B5 9A                lda     TXTTAB,x
000502r 3  95 1C                sta     GOSTROUT+2,x
000504r 3  CA                   dex
000505r 3  10 F9                bpl     LC757
000507r 3  4C rr rr             jmp     LE219
00050Ar 3  EA                   nop
00050Br 3  EA                   nop
00050Cr 3  EA                   nop
00050Dr 3               LC764:
00050Dr 3  98                   tya
00050Er 3  48                   pha
00050Fr 3  A4 03                ldy     $03
000511r 3  A9 FF                lda     #$FF
000513r 3  91 0A                sta     ($0A),y
000515r 3  68                   pla
000516r 3  A8                   tay
000517r 3  20 FA FD             jsr     LFDFA
00051Ar 3  A5 01                lda     $01
00051Cr 3  20 rr rr             jsr     LC7A5
00051Fr 3  60                   rts
000520r 3  44 45 44             .byte   "DED"
000523r 3  0D 0A                .byte   $0D,$0A
000525r 3  4F 4B                .byte   "OK"
000527r 3  0D 0A 00             .byte   $0D,$0A,$00
00052Ar 3  53 41 56 45          .byte   "SAVED"
00052Er 3  44           
00052Fr 3  0D 0A 00             .byte   $0D,$0A,$00
000532r 3               LOAD:
000532r 3  20 rr rr             jsr     LC74B
000535r 3  A2 FF                ldx     #$FF
000537r 3  BA                   tsx
000538r 3  A9 4F                lda     #$4F
00053Ar 3  20 75 FE             jsr     LFE75
00053Dr 3  A9 4B                lda     #$4B
00053Fr 3  20 75 FE             jsr     LFE75
000542r 3  20 73 FE             jsr     LFE73
000545r 3  A5 9C                lda     VARTAB
000547r 3  AA                   tax
000548r 3  A4 9D                ldy     VARTAB+1
00054Ar 3  4C rr rr             jmp     FIX_LINKS
00054Dr 3  EA                   nop
00054Er 3               LC7A5:
00054Er 3  48                   pha
00054Fr 3  C9 0A                cmp     #$0A
000551r 3  F0 03                beq     LC7AD
000553r 3  20 75 FE             jsr     LFE75
000556r 3               LC7AD:
000556r 3  98                   tya
000557r 3  48                   pha
000558r 3  A4 03                ldy     $03
00055Ar 3  A9 20                lda     #$20
00055Cr 3  91 0A                sta     ($0A),y
00055Er 3  68                   pla
00055Fr 3  A8                   tay
000560r 3  68                   pla
000561r 3  60                   rts
000562r 3  EE 17 8A             inc     $8A17
000565r 3  86 9C                stx     VARTAB
000567r 3  84 9D                sty     VARTAB+1
000569r 3  4C rr rr             jmp     FIX_LINKS
00056Cr 3               
00056Cr 2               .endif
00056Cr 2               .ifdef AIM65
00056Cr 2               .include "aim65_loadsave.s"
00056Cr 2               .endif
00056Cr 2               .ifdef SYM1
00056Cr 2               .include "sym1_loadsave.s"
00056Cr 2               .endif
00056Cr 2               
00056Cr 1               .include "flow2.s"
00056Cr 2               .segment "CODE"
00056Cr 2               ; ----------------------------------------------------------------------------
00056Cr 2               ; "RUN" COMMAND
00056Cr 2               ; ----------------------------------------------------------------------------
00056Cr 2               RUN:
00056Cr 2  D0 03                bne     L27CF
00056Er 2  4C rr rr             jmp     SETPTRS
000571r 2               L27CF:
000571r 2  20 rr rr             jsr     CLEARC
000574r 2  4C rr rr             jmp     L27E9
000577r 2               
000577r 2               ; ----------------------------------------------------------------------------
000577r 2               ; "GOSUB" STATEMENT
000577r 2               ;
000577r 2               ; LEAVES 7 BYTES ON STACK:
000577r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
000577r 2               ; 2 -- TXTPTR
000577r 2               ; 2 -- LINE #
000577r 2               ; 1 -- GOSUB TOKEN
000577r 2               ; ----------------------------------------------------------------------------
000577r 2               GOSUB:
000577r 2  A9 03                lda     #$03
000579r 2  20 rr rr             jsr     CHKMEM
00057Cr 2  A5 EA                lda     TXTPTR+1
00057Er 2  48                   pha
00057Fr 2  A5 E9                lda     TXTPTR
000581r 2  48                   pha
000582r 2  A5 A9                lda     CURLIN+1
000584r 2  48                   pha
000585r 2  A5 A8                lda     CURLIN
000587r 2  48                   pha
000588r 2  A9 8C                lda     #TOKEN_GOSUB
00058Ar 2  48                   pha
00058Br 2               L27E9:
00058Br 2  20 E8 00             jsr     CHRGOT
00058Er 2  20 rr rr             jsr     GOTO
000591r 2  4C rr rr             jmp     NEWSTT
000594r 2               
000594r 2               ; ----------------------------------------------------------------------------
000594r 2               ; "GOTO" STATEMENT
000594r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000594r 2               ; ----------------------------------------------------------------------------
000594r 2               GOTO:
000594r 2  20 rr rr             jsr     LINGET
000597r 2  20 rr rr             jsr     REMN
00059Ar 2  A5 A9                lda     CURLIN+1
00059Cr 2  C5 34                cmp     LINNUM+1
00059Er 2  B0 0B                bcs     L2809
0005A0r 2  98                   tya
0005A1r 2  38                   sec
0005A2r 2  65 E9                adc     TXTPTR
0005A4r 2  A6 EA                ldx     TXTPTR+1
0005A6r 2  90 07                bcc     L280D
0005A8r 2  E8                   inx
0005A9r 2  B0 04                bcs     L280D
0005ABr 2               L2809:
0005ABr 2  A5 9A                lda     TXTTAB
0005ADr 2  A6 9B                ldx     TXTTAB+1
0005AFr 2               L280D:
0005AFr 2               .ifdef KBD
0005AFr 2                       jsr     LF457
0005AFr 2                       bne     UNDERR
0005AFr 2               .else
0005AFr 2  20 rr rr             jsr     FL1
0005B2r 2  90 1E                bcc     UNDERR
0005B4r 2               .endif
0005B4r 2  A5 CE                lda     LOWTRX
0005B6r 2  E9 01                sbc     #$01
0005B8r 2  85 E9                sta     TXTPTR
0005BAr 2  A5 CF                lda     LOWTRX+1
0005BCr 2  E9 00                sbc     #$00
0005BEr 2  85 EA                sta     TXTPTR+1
0005C0r 2               L281E:
0005C0r 2  60                   rts
0005C1r 2               
0005C1r 2               ; ----------------------------------------------------------------------------
0005C1r 2               ; "POP" AND "RETURN" STATEMENTS
0005C1r 2               ; ----------------------------------------------------------------------------
0005C1r 2               POP:
0005C1r 2  D0 FD                bne     L281E
0005C3r 2  A9 FF                lda     #$FF
0005C5r 2               .ifdef CONFIG_2A
0005C5r 2  85 B9                sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
0005C7r 2               .else
0005C7r 2                       sta     FORPNT
0005C7r 2               .endif
0005C7r 2  20 rr rr             jsr     GTFORPNT
0005CAr 2  9A                   txs
0005CBr 2  C9 8C                cmp     #TOKEN_GOSUB
0005CDr 2  F0 0B                beq     RETURN
0005CFr 2  A2 16                ldx     #ERR_NOGOSUB
0005D1r 2  2C                   .byte   $2C
0005D2r 2               UNDERR:
0005D2r 2  A2 5A                ldx     #ERR_UNDEFSTAT
0005D4r 2  4C rr rr             jmp     ERROR
0005D7r 2               ; ----------------------------------------------------------------------------
0005D7r 2               SYNERR2:
0005D7r 2  4C rr rr             jmp     SYNERR
0005DAr 2               ; ----------------------------------------------------------------------------
0005DAr 2               RETURN:
0005DAr 2  68                   pla
0005DBr 2  68                   pla
0005DCr 2  85 A8                sta     CURLIN
0005DEr 2  68                   pla
0005DFr 2  85 A9                sta     CURLIN+1
0005E1r 2  68                   pla
0005E2r 2  85 E9                sta     TXTPTR
0005E4r 2  68                   pla
0005E5r 2  85 EA                sta     TXTPTR+1
0005E7r 2               
0005E7r 2               ; ----------------------------------------------------------------------------
0005E7r 2               ; "DATA" STATEMENT
0005E7r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
0005E7r 2               ; ----------------------------------------------------------------------------
0005E7r 2               DATA:
0005E7r 2  20 rr rr             jsr     DATAN
0005EAr 2               
0005EAr 2               ; ----------------------------------------------------------------------------
0005EAr 2               ; ADD (Y) TO TXTPTR
0005EAr 2               ; ----------------------------------------------------------------------------
0005EAr 2               ADDON:
0005EAr 2  98                   tya
0005EBr 2  18                   clc
0005ECr 2  65 E9                adc     TXTPTR
0005EEr 2  85 E9                sta     TXTPTR
0005F0r 2  90 02                bcc     L2852
0005F2r 2  E6 EA                inc     TXTPTR+1
0005F4r 2               L2852:
0005F4r 2  60                   rts
0005F5r 2               
0005F5r 2               ; ----------------------------------------------------------------------------
0005F5r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
0005F5r 2               ; ----------------------------------------------------------------------------
0005F5r 2               DATAN:
0005F5r 2  A2 3A                ldx     #$3A
0005F7r 2  2C                   .byte   $2C
0005F8r 2               REMN:
0005F8r 2  A2 00                ldx     #$00
0005FAr 2  86 24                stx     CHARAC
0005FCr 2  A0 00                ldy     #$00
0005FEr 2  84 25                sty     ENDCHR
000600r 2               L285E:
000600r 2  A5 25                lda     ENDCHR
000602r 2  A6 24                ldx     CHARAC
000604r 2  85 24                sta     CHARAC
000606r 2  86 25                stx     ENDCHR
000608r 2               L2866:
000608r 2  B1 E9                lda     (TXTPTR),y
00060Ar 2  F0 E8                beq     L2852
00060Cr 2  C5 25                cmp     ENDCHR
00060Er 2  F0 E4                beq     L2852
000610r 2  C8                   iny
000611r 2  C9 22                cmp     #$22
000613r 2               .ifndef CONFIG_11
000613r 2                       beq     L285E; old: swap & cont is faster
000613r 2                       bne     L2866
000613r 2               .else
000613r 2  D0 F3                bne     L2866; new: cont is faster
000615r 2  F0 E9                beq     L285E
000617r 2               .endif
000617r 2               
000617r 2               ; ----------------------------------------------------------------------------
000617r 2               ; "IF" STATEMENT
000617r 2               ; ----------------------------------------------------------------------------
000617r 2               IF:
000617r 2  20 rr rr             jsr     FRMEVL
00061Ar 2  20 E8 00             jsr     CHRGOT
00061Dr 2  C9 88                cmp     #TOKEN_GOTO
00061Fr 2  F0 05                beq     L2884
000621r 2  A9 A1                lda     #TOKEN_THEN
000623r 2  20 rr rr             jsr     SYNCHR
000626r 2               L2884:
000626r 2  A5 D0                lda     FAC
000628r 2  D0 05                bne     L288D
00062Ar 2               
00062Ar 2               ; ----------------------------------------------------------------------------
00062Ar 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
00062Ar 2               ; ----------------------------------------------------------------------------
00062Ar 2               REM:
00062Ar 2  20 rr rr             jsr     REMN
00062Dr 2  F0 BB                beq     ADDON
00062Fr 2               L288D:
00062Fr 2  20 E8 00             jsr     CHRGOT
000632r 2  B0 03                bcs     L2895
000634r 2  4C rr rr             jmp     GOTO
000637r 2               L2895:
000637r 2  4C rr rr             jmp     EXECUTE_STATEMENT
00063Ar 2               
00063Ar 2               ; ----------------------------------------------------------------------------
00063Ar 2               ; "ON" STATEMENT
00063Ar 2               ;
00063Ar 2               ; ON <EXP> GOTO <LIST>
00063Ar 2               ; ON <EXP> GOSUB <LIST>
00063Ar 2               ; ----------------------------------------------------------------------------
00063Ar 2               ON:
00063Ar 2  20 rr rr             jsr     GETBYT
00063Dr 2  48                   pha
00063Er 2  C9 8C                cmp     #TOKEN_GOSUB
000640r 2  F0 04                beq     L28A4
000642r 2               L28A0:
000642r 2  C9 88                cmp     #TOKEN_GOTO
000644r 2  D0 91                bne     SYNERR2
000646r 2               L28A4:
000646r 2  C6 D4                dec     FAC_LAST
000648r 2  D0 04                bne     L28AC
00064Ar 2  68                   pla
00064Br 2  4C rr rr             jmp     EXECUTE_STATEMENT1
00064Er 2               L28AC:
00064Er 2  20 E2 00             jsr     CHRGET
000651r 2  20 rr rr             jsr     LINGET
000654r 2  C9 2C                cmp     #$2C
000656r 2  F0 EE                beq     L28A4
000658r 2  68                   pla
000659r 2               L28B7:
000659r 2  60                   rts
00065Ar 2               
00065Ar 1               .include "misc1.s"
00065Ar 2               .segment "CODE"
00065Ar 2               
00065Ar 2               ; ----------------------------------------------------------------------------
00065Ar 2               ; CONVERT LINE NUMBER
00065Ar 2               ; ----------------------------------------------------------------------------
00065Ar 2               LINGET:
00065Ar 2  A2 00                ldx     #$00
00065Cr 2  86 33                stx     LINNUM
00065Er 2  86 34                stx     LINNUM+1
000660r 2               L28BE:
000660r 2  B0 F7                bcs     L28B7
000662r 2  E9 2F                sbc     #$2F
000664r 2  85 24                sta     CHARAC
000666r 2  A5 34                lda     LINNUM+1
000668r 2  85 91                sta     INDEX
00066Ar 2  C9 19                cmp     #$19
00066Cr 2  B0 D4                bcs     L28A0
00066Er 2               ; <<<<<DANGEROUS CODE>>>>>
00066Er 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
00066Er 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
00066Er 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
00066Er 2               ; FOR OTHER CALLS TO LINGET.
00066Er 2               ;
00066Er 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
00066Er 2               ; THEN TYPE "GO TO 437761".
00066Er 2               ;
00066Er 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
00066Er 2               ; THE PROBLEM.  ($AB00 - $ABFF)
00066Er 2               ; <<<<<DANGEROUS CODE>>>>>
00066Er 2  A5 33                lda     LINNUM
000670r 2  0A                   asl     a
000671r 2  26 91                rol     INDEX
000673r 2  0A                   asl     a
000674r 2  26 91                rol     INDEX
000676r 2  65 33                adc     LINNUM
000678r 2  85 33                sta     LINNUM
00067Ar 2  A5 91                lda     INDEX
00067Cr 2  65 34                adc     LINNUM+1
00067Er 2  85 34                sta     LINNUM+1
000680r 2  06 33                asl     LINNUM
000682r 2  26 34                rol     LINNUM+1
000684r 2  A5 33                lda     LINNUM
000686r 2  65 24                adc     CHARAC
000688r 2  85 33                sta     LINNUM
00068Ar 2  90 02                bcc     L28EC
00068Cr 2  E6 34                inc     LINNUM+1
00068Er 2               L28EC:
00068Er 2  20 E2 00             jsr     CHRGET
000691r 2  4C rr rr             jmp     L28BE
000694r 2               
000694r 2               ; ----------------------------------------------------------------------------
000694r 2               ; "LET" STATEMENT
000694r 2               ;
000694r 2               ; LET <VAR> = <EXP>
000694r 2               ; <VAR> = <EXP>
000694r 2               ; ----------------------------------------------------------------------------
000694r 2               LET:
000694r 2  20 rr rr             jsr     PTRGET
000697r 2  85 B8                sta     FORPNT
000699r 2  84 B9                sty     FORPNT+1
00069Br 2  A9 AC                lda     #TOKEN_EQUAL
00069Dr 2  20 rr rr             jsr     SYNCHR
0006A0r 2               .ifndef CONFIG_SMALL
0006A0r 2  A5 29                lda     VALTYP+1
0006A2r 2  48                   pha
0006A3r 2               .endif
0006A3r 2  A5 28                lda     VALTYP
0006A5r 2  48                   pha
0006A6r 2  20 rr rr             jsr     FRMEVL
0006A9r 2  68                   pla
0006AAr 2  2A                   rol     a
0006ABr 2  20 rr rr             jsr     CHKVAL
0006AEr 2  D0 18                bne     LETSTRING
0006B0r 2               .ifndef CONFIG_SMALL
0006B0r 2  68                   pla
0006B1r 2               LET2:
0006B1r 2  10 12                bpl     L2923
0006B3r 2  20 rr rr             jsr     ROUND_FAC
0006B6r 2  20 rr rr             jsr     AYINT
0006B9r 2  A0 00                ldy     #$00
0006BBr 2  A5 D3                lda     FAC+3
0006BDr 2  91 B8                sta     (FORPNT),y
0006BFr 2  C8                   iny
0006C0r 2  A5 D4                lda     FAC+4
0006C2r 2  91 B8                sta     (FORPNT),y
0006C4r 2  60                   rts
0006C5r 2               L2923:
0006C5r 2               .endif
0006C5r 2               
0006C5r 2               ; ----------------------------------------------------------------------------
0006C5r 2               ; REAL VARIABLE = EXPRESSION
0006C5r 2               ; ----------------------------------------------------------------------------
0006C5r 2  4C rr rr             jmp     SETFOR
0006C8r 2               LETSTRING:
0006C8r 2               .ifndef CONFIG_SMALL
0006C8r 2  68                   pla
0006C9r 2               .endif
0006C9r 2               
0006C9r 2               ; ----------------------------------------------------------------------------
0006C9r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
0006C9r 2               ; ----------------------------------------------------------------------------
0006C9r 2               PUTSTR:
0006C9r 2               .ifdef CONFIG_CBM_ALL
0006C9r 2                       ldy     FORPNT+1
0006C9r 2                 .ifdef CBM1
0006C9r 2                       cpy     #$D0	; TI$
0006C9r 2                 .else
0006C9r 2                       cpy     #$DE
0006C9r 2                 .endif
0006C9r 2                       bne     LC92B
0006C9r 2                       jsr     FREFAC
0006C9r 2                       cmp     #$06
0006C9r 2                 .ifdef CBM2
0006C9r 2                       bne     IQERR1
0006C9r 2                 .else
0006C9r 2                       jne     IQERR
0006C9r 2                 .endif
0006C9r 2                       ldy     #$00
0006C9r 2                       sty     FAC
0006C9r 2                       sty     FACSIGN
0006C9r 2               LC8E8:
0006C9r 2                       sty     STRNG2
0006C9r 2                       jsr     LC91C
0006C9r 2                       jsr     MUL10
0006C9r 2                       inc     STRNG2
0006C9r 2                       ldy     STRNG2
0006C9r 2                       jsr     LC91C
0006C9r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
0006C9r 2                       tax
0006C9r 2                       beq     LC902
0006C9r 2                       inx
0006C9r 2                       txa
0006C9r 2                       jsr     LD9BF
0006C9r 2               LC902:
0006C9r 2                       ldy     STRNG2
0006C9r 2                       iny
0006C9r 2                       cpy     #$06
0006C9r 2                       bne     LC8E8
0006C9r 2                       jsr     MUL10
0006C9r 2                       jsr     QINT
0006C9r 2                       ldx     #$02
0006C9r 2                       sei
0006C9r 2               LC912:
0006C9r 2                       lda     FAC+2,x
0006C9r 2                       sta     TISTR,x
0006C9r 2                       dex
0006C9r 2                       bpl     LC912
0006C9r 2                       cli
0006C9r 2                       rts
0006C9r 2               LC91C:
0006C9r 2                       lda     (INDEX),y
0006C9r 2                       jsr     CHRGOT2
0006C9r 2                       bcc     LC926
0006C9r 2               IQERR1:
0006C9r 2                       jmp     IQERR
0006C9r 2               LC926:
0006C9r 2                       sbc     #$2F
0006C9r 2                       jmp     ADDACC
0006C9r 2               LC92B:
0006C9r 2               .endif
0006C9r 2  A0 02                ldy     #$02
0006CBr 2  B1 D3                lda     (FAC_LAST-1),y
0006CDr 2  C5 A3                cmp     FRETOP+1
0006CFr 2  90 17                bcc     L2946
0006D1r 2  D0 07                bne     L2938
0006D3r 2  88                   dey
0006D4r 2  B1 D3                lda     (FAC_LAST-1),y
0006D6r 2  C5 A2                cmp     FRETOP
0006D8r 2  90 0E                bcc     L2946
0006DAr 2               L2938:
0006DAr 2  A4 D4                ldy     FAC_LAST
0006DCr 2  C4 9D                cpy     VARTAB+1
0006DEr 2  90 08                bcc     L2946
0006E0r 2  D0 0D                bne     L294D
0006E2r 2  A5 D3                lda     FAC_LAST-1
0006E4r 2  C5 9C                cmp     VARTAB
0006E6r 2  B0 07                bcs     L294D
0006E8r 2               L2946:
0006E8r 2  A5 D3                lda     FAC_LAST-1
0006EAr 2  A4 D4                ldy     FAC_LAST
0006ECr 2  4C rr rr             jmp     L2963
0006EFr 2               L294D:
0006EFr 2  A0 00                ldy     #$00
0006F1r 2  B1 D3                lda     (FAC_LAST-1),y
0006F3r 2  20 rr rr             jsr     STRINI
0006F6r 2  A5 BF                lda     DSCPTR
0006F8r 2  A4 C0                ldy     DSCPTR+1
0006FAr 2  85 DE                sta     STRNG1
0006FCr 2  84 DF                sty     STRNG1+1
0006FEr 2  20 rr rr             jsr     MOVINS
000701r 2  A9 D0                lda     #FAC
000703r 2  A0 00                ldy     #$00
000705r 2               L2963:
000705r 2  85 BF                sta     DSCPTR
000707r 2  84 C0                sty     DSCPTR+1
000709r 2  20 rr rr             jsr     FRETMS
00070Cr 2  A0 00                ldy     #$00
00070Er 2  B1 BF                lda     (DSCPTR),y
000710r 2  91 B8                sta     (FORPNT),y
000712r 2  C8                   iny
000713r 2  B1 BF                lda     (DSCPTR),y
000715r 2  91 B8                sta     (FORPNT),y
000717r 2  C8                   iny
000718r 2  B1 BF                lda     (DSCPTR),y
00071Ar 2  91 B8                sta     (FORPNT),y
00071Cr 2               RET5:
00071Cr 2  60                   rts
00071Dr 2               .ifdef AIM65
00071Dr 2               LB89D:
00071Dr 2                       cmp     #$21
00071Dr 2                       bne     RET5
00071Dr 2                       lda     #$80
00071Dr 2                       sta     PRIFLG
00071Dr 2                       jmp     CHRGET
00071Dr 2               .endif
00071Dr 2               
00071Dr 2               .ifdef CONFIG_FILE
00071Dr 2               PRINTH:
00071Dr 2                       jsr     CMD
00071Dr 2                       jmp     LCAD6
00071Dr 2               CMD:
00071Dr 2                       jsr     GETBYT
00071Dr 2                       beq     LC98F
00071Dr 2                       lda     #$2C
00071Dr 2                       jsr     SYNCHR
00071Dr 2               LC98F:
00071Dr 2                       php
00071Dr 2                       jsr     CHKOUT
00071Dr 2                       stx     CURDVC
00071Dr 2                       plp
00071Dr 2                       jmp     PRINT
00071Dr 2               .endif
00071Dr 2               
00071Dr 2               
00071Dr 1               .include "print.s"
00071Dr 2               .segment "CODE"
00071Dr 2               
00071Dr 2               .ifdef AIM65
00071Dr 2               PRINT:
00071Dr 2                       lda     PRIFLG
00071Dr 2                       sta     ZBE
00071Dr 2                       jsr     L297E
00071Dr 2               LB8B1:
00071Dr 2                       lda     ZBE
00071Dr 2                       sta     PRIFLG
00071Dr 2                       rts
00071Dr 2               .endif
00071Dr 2               
00071Dr 2               PRSTRING:
00071Dr 2  20 rr rr             jsr     STRPRT
000720r 2               L297E:
000720r 2  20 E8 00             jsr     CHRGOT
000723r 2               
000723r 2               ; ----------------------------------------------------------------------------
000723r 2               ; "PRINT" STATEMENT
000723r 2               ; ----------------------------------------------------------------------------
000723r 2               .ifndef AIM65
000723r 2               PRINT:
000723r 2               .endif
000723r 2  F0 3E                beq     CRDO
000725r 2               PRINT2:
000725r 2  F0 5A                beq     L29DD
000727r 2               .ifdef AIM65
000727r 2                       jsr     LB89D
000727r 2                       beq     L29DD
000727r 2               .endif
000727r 2  C9 9D                cmp     #TOKEN_TAB
000729r 2  F0 6E                beq     L29F5
00072Br 2  C9 A0                cmp     #TOKEN_SPC
00072Dr 2               .ifdef CONFIG_2
00072Dr 2  18                   clc	; also AppleSoft II
00072Er 2               .endif
00072Er 2  F0 69                beq     L29F5
000730r 2  C9 2C                cmp     #','
000732r 2               ; Pre-KIM had no CLC. KIM added the CLC
000732r 2               ; here. Post-KIM moved the CLC up...
000732r 2               ; (makes no sense on KIM, liveness = 0)
000732r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
000732r 2                       clc
000732r 2               .endif
000732r 2  F0 4E                beq     L29DE
000734r 2  C9 3B                cmp     #$3B
000736r 2  F0 76                beq     L2A0D
000738r 2  20 rr rr             jsr     FRMEVL
00073Br 2  24 28                bit     VALTYP
00073Dr 2  30 DE                bmi     PRSTRING
00073Fr 2  20 rr rr             jsr     FOUT
000742r 2  20 rr rr             jsr     STRLIT
000745r 2               .ifndef CONFIG_NO_CR
000745r 2  A0 00                ldy     #$00
000747r 2  B1 D3                lda     (FAC_LAST-1),y
000749r 2  18                   clc
00074Ar 2  65 30                adc     POSX
00074Cr 2                 .ifdef KBD
00074Cr 2                       cmp     #$28
00074Cr 2                 .else
00074Cr 2  C5 31                cmp     Z17
00074Er 2                 .endif
00074Er 2  90 03                bcc     L29B1
000750r 2  20 rr rr             jsr     CRDO
000753r 2               L29B1:
000753r 2               .endif
000753r 2  20 rr rr             jsr     STRPRT
000756r 2               .ifdef KBD
000756r 2                       jmp     L297E
000756r 2               .else
000756r 2  20 rr rr             jsr     OUTSP
000759r 2  D0 C5                bne     L297E ; branch always
00075Br 2               .endif
00075Br 2               
00075Br 2               .ifdef KBD
00075Br 2               ; PATCHES
00075Br 2               LE86C:
00075Br 2                       pla
00075Br 2                       jmp     CONTROL_C_TYPED
00075Br 2               LE870:
00075Br 2                       jsr     GETBYT
00075Br 2                       txa
00075Br 2               LE874:
00075Br 2                       beq     LE878
00075Br 2                       bpl     LE8F2
00075Br 2               LE878:
00075Br 2                       jmp     IQERR
00075Br 2               ; PATCHES
00075Br 2               .endif
00075Br 2               
00075Br 2               
00075Br 2               
00075Br 2               .ifndef KBD
00075Br 2               L29B9:
00075Br 2                 .ifdef CBM2
00075Br 2                       lda     #$00
00075Br 2                       sta     INPUTBUFFER,x
00075Br 2                       ldx     #<(INPUTBUFFER-1)
00075Br 2                       ldy     #>(INPUTBUFFER-1)
00075Br 2                 .else
00075Br 2                   .ifndef APPLE
00075Br 2  A0 00                ldy     #$00
00075Dr 2  94 35                sty     INPUTBUFFER,x
00075Fr 2  A2 34                ldx     #LINNUM+1
000761r 2                   .endif
000761r 2                   .if .def(MICROTAN) || .def(SYM1)
000761r 2  D0 07                bne     CRDO2
000763r 2               	.endif
000763r 2                 .endif
000763r 2                 .ifdef CONFIG_FILE
000763r 2                       lda     CURDVC
000763r 2                       bne     L29DD
000763r 2                 .endif
000763r 2               .endif
000763r 2               
000763r 2               
000763r 2               CRDO:
000763r 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
000763r 2                       lda     CURDVC
000763r 2                       bne     LC9D8
000763r 2                       sta     POSX
000763r 2               LC9D8:
000763r 2               .endif
000763r 2  A9 0D                lda     #CRLF_1
000765r 2               .ifndef CONFIG_CBM_ALL
000765r 2  85 30                sta     POSX
000767r 2               .endif
000767r 2  20 rr rr             jsr     OUTDO
00076Ar 2               CRDO2:
00076Ar 2  A9 0A                lda     #CRLF_2
00076Cr 2  20 rr rr             jsr     OUTDO
00076Fr 2               
00076Fr 2               PRINTNULLS:
00076Fr 2               .if .def(KBD) || .def(AIM65)
00076Fr 2                       lda     #$00
00076Fr 2                       sta     POSX
00076Fr 2                       eor     #$FF
00076Fr 2               .else
00076Fr 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
00076Fr 2                   .ifdef CONFIG_FILE
00076Fr 2                   ; Although there is no statement for it,
00076Fr 2                   ; CBM1 had NULL support and ignores
00076Fr 2                   ; it when not targeting the screen,
00076Fr 2                   ; CBM2 dropped it completely.
00076Fr 2                       lda     CURDVC
00076Fr 2                       bne     L29DD
00076Fr 2                   .endif
00076Fr 2  8A                   txa
000770r 2  48                   pha
000771r 2  A6 2F                ldx     Z15
000773r 2  F0 08                beq     L29D9
000775r 2                     .ifdef SYM1
000775r 2                       lda     #$FF
000775r 2                     .else
000775r 2  A9 00                lda     #$00
000777r 2                     .endif
000777r 2               L29D3:
000777r 2  20 rr rr             jsr     OUTDO
00077Ar 2  CA                   dex
00077Br 2  D0 FA                bne     L29D3
00077Dr 2               L29D9:
00077Dr 2  86 30                stx     POSX
00077Fr 2  68                   pla
000780r 2  AA                   tax
000781r 2                 .else
000781r 2                   .ifndef CONFIG_2
000781r 2                       lda     #$00
000781r 2                       sta     POSX
000781r 2                   .endif
000781r 2                       eor     #$FF
000781r 2                 .endif
000781r 2               .endif
000781r 2               L29DD:
000781r 2  60                   rts
000782r 2               L29DE:
000782r 2  A5 30                lda     POSX
000784r 2               .ifndef CONFIG_NO_CR
000784r 2                 .ifdef KBD
000784r 2                       cmp     #$1A
000784r 2                 .else
000784r 2  C5 32                cmp     Z18
000786r 2                 .endif
000786r 2  90 06                bcc     L29EA
000788r 2  20 rr rr             jsr     CRDO
00078Br 2  4C rr rr             jmp     L2A0D
00078Er 2               L29EA:
00078Er 2               .endif
00078Er 2  38                   sec
00078Fr 2               L29EB:
00078Fr 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
00078Fr 2                       sbc     #$0A
00078Fr 2               .else
00078Fr 2                 .ifdef KBD
00078Fr 2                       sbc     #$0D
00078Fr 2                 .else
00078Fr 2  E9 0E                sbc     #$0E
000791r 2                 .endif
000791r 2               .endif
000791r 2  B0 FC                bcs     L29EB
000793r 2  49 FF                eor     #$FF
000795r 2  69 01                adc     #$01
000797r 2  D0 10                bne     L2A08
000799r 2               L29F5:
000799r 2               .ifdef CONFIG_11A
000799r 2  08                   php
00079Ar 2               .else
00079Ar 2                       pha
00079Ar 2               .endif
00079Ar 2  20 rr rr             jsr     GTBYTC
00079Dr 2  C9 29                cmp     #')'
00079Fr 2               .ifdef CONFIG_11A
00079Fr 2                 .ifdef CONFIG_2
00079Fr 2  D0 6B                bne     SYNERR4
0007A1r 2                 .else
0007A1r 2                       jne     SYNERR
0007A1r 2                 .endif
0007A1r 2  28                   plp
0007A2r 2  90 06                bcc     L2A09
0007A4r 2               .else
0007A4r 2                 .ifdef CONFIG_11
0007A4r 2                       jne     SYNERR
0007A4r 2                 .else
0007A4r 2                       bne     SYNERR4
0007A4r 2                 .endif
0007A4r 2                       pla
0007A4r 2                       cmp     #TOKEN_TAB
0007A4r 2                 .ifdef CONFIG_11
0007A4r 2                       bne     L2A09
0007A4r 2                 .else
0007A4r 2                       bne     L2A0A
0007A4r 2                 .endif
0007A4r 2               .endif
0007A4r 2  8A                   txa
0007A5r 2  E5 30                sbc     POSX
0007A7r 2  90 05                bcc     L2A0D
0007A9r 2               .ifndef CONFIG_11
0007A9r 2                       beq     L2A0D
0007A9r 2               .endif
0007A9r 2               L2A08:
0007A9r 2  AA                   tax
0007AAr 2               .ifdef CONFIG_11
0007AAr 2               L2A09:
0007AAr 2  E8                   inx
0007ABr 2               .endif
0007ABr 2               L2A0A:
0007ABr 2               .ifndef CONFIG_11
0007ABr 2                       jsr     OUTSP
0007ABr 2               .endif
0007ABr 2  CA                   dex
0007ACr 2               .ifndef CONFIG_11
0007ACr 2                       bne     L2A0A
0007ACr 2               .else
0007ACr 2  D0 06                bne     L2A13
0007AEr 2               .endif
0007AEr 2               L2A0D:
0007AEr 2  20 E2 00             jsr     CHRGET
0007B1r 2  4C rr rr             jmp     PRINT2
0007B4r 2               .ifdef CONFIG_11
0007B4r 2               L2A13:
0007B4r 2  20 rr rr             jsr     OUTSP
0007B7r 2  D0 F2                bne     L2A0A
0007B9r 2               .endif
0007B9r 2               
0007B9r 2               ; ----------------------------------------------------------------------------
0007B9r 2               ; PRINT STRING AT (Y,A)
0007B9r 2               ; ----------------------------------------------------------------------------
0007B9r 2               STROUT:
0007B9r 2  20 rr rr             jsr     STRLIT
0007BCr 2               
0007BCr 2               ; ----------------------------------------------------------------------------
0007BCr 2               ; PRINT STRING AT (FACMO,FACLO)
0007BCr 2               ; ----------------------------------------------------------------------------
0007BCr 2               STRPRT:
0007BCr 2  20 rr rr             jsr     FREFAC
0007BFr 2  AA                   tax
0007C0r 2  A0 00                ldy     #$00
0007C2r 2  E8                   inx
0007C3r 2               L2A22:
0007C3r 2  CA                   dex
0007C4r 2  F0 BB                beq     L29DD
0007C6r 2  B1 91                lda     (INDEX),y
0007C8r 2  20 rr rr             jsr     OUTDO
0007CBr 2  C8                   iny
0007CCr 2  C9 0D                cmp     #$0D
0007CEr 2  D0 F3                bne     L2A22
0007D0r 2  20 rr rr             jsr     PRINTNULLS
0007D3r 2  4C rr rr             jmp     L2A22
0007D6r 2               ; ----------------------------------------------------------------------------
0007D6r 2               OUTSP:
0007D6r 2               .ifdef CONFIG_FILE
0007D6r 2                 .ifndef CBM1
0007D6r 2               ; on non-screen devices, print SPACE
0007D6r 2               ; instead of CRSR RIGHT
0007D6r 2                       lda     CURDVC
0007D6r 2                       beq     LCA40
0007D6r 2                       lda     #$20
0007D6r 2                       .byte   $2C
0007D6r 2               LCA40:
0007D6r 2                 .endif
0007D6r 2                       lda     #$1D ; CRSR RIGHT
0007D6r 2               .else
0007D6r 2  A9 20                lda     #$20
0007D8r 2               .endif
0007D8r 2  2C                   .byte   $2C
0007D9r 2               OUTQUES:
0007D9r 2  A9 3F                lda     #$3F
0007DBr 2               
0007DBr 2               ; ----------------------------------------------------------------------------
0007DBr 2               ; PRINT CHAR FROM (A)
0007DBr 2               ; ----------------------------------------------------------------------------
0007DBr 2               OUTDO:
0007DBr 2               .ifndef KBD
0007DBr 2  24 2E                bit     Z14
0007DDr 2  30 18                bmi     L2A56
0007DFr 2               .endif
0007DFr 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007DFr 2               ; Commodore forgot to remove this in CBM1
0007DFr 2  48                   pha
0007E0r 2               .endif
0007E0r 2               .ifdef CBM1
0007E0r 2                       cmp     #$1D ; CRSR RIGHT
0007E0r 2                       beq     LCA6A
0007E0r 2                       cmp     #$9D ; CRSR LEFT
0007E0r 2                       beq     LCA5A
0007E0r 2                       cmp     #$14 ; DEL
0007E0r 2                       bne     LCA64
0007E0r 2               LCA5A:
0007E0r 2                       lda     POSX
0007E0r 2                       beq     L2A4E
0007E0r 2                       lda     CURDVC
0007E0r 2                       bne     L2A4E
0007E0r 2                       dec     POSX
0007E0r 2               LCA64:
0007E0r 2                       and     #$7F
0007E0r 2               .endif
0007E0r 2               .ifndef CBM2
0007E0r 2  C9 20                cmp     #$20
0007E2r 2  90 0B                bcc     L2A4E
0007E4r 2               .endif
0007E4r 2               LCA6A:
0007E4r 2               .ifdef CONFIG_CBM1_PATCHES
0007E4r 2                       lda     CURDVC
0007E4r 2                       jsr     PATCH6
0007E4r 2                       nop
0007E4r 2               .endif
0007E4r 2               .ifdef CONFIG_PRINT_CR
0007E4r 2  A5 30                lda     POSX
0007E6r 2  C5 31                cmp     Z17
0007E8r 2  D0 03                bne     L2A4C
0007EAr 2                 .ifdef AIM65
0007EAr 2                       lda #$00
0007EAr 2                       sta POSX
0007EAr 2                 .elseif .def(APPLE)
0007EAr 2                       nop ; PATCH!
0007EAr 2                       nop ; don't print CR
0007EAr 2                       nop
0007EAr 2                 .else
0007EAr 2  20 rr rr             jsr     CRDO
0007EDr 2                 .endif
0007EDr 2               L2A4C:
0007EDr 2               .endif
0007EDr 2               .ifndef CONFIG_CBM_ALL
0007EDr 2  E6 30                inc     POSX
0007EFr 2               .endif
0007EFr 2               L2A4E:
0007EFr 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007EFr 2               ; Commodore forgot to remove this in CBM1
0007EFr 2  68                   pla
0007F0r 2               .endif
0007F0r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007F0r 2  84 27                sty     DIMFLG
0007F2r 2               .endif
0007F2r 2               .ifdef CONFIG_IO_MSB
0007F2r 2                       ora     #$80
0007F2r 2               .endif
0007F2r 2  20 16 E2             jsr     MONCOUT
0007F5r 2               .ifdef CONFIG_IO_MSB
0007F5r 2                       and     #$7F
0007F5r 2               .endif
0007F5r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007F5r 2  A4 27                ldy     DIMFLG
0007F7r 2               .endif
0007F7r 2               .ifdef OSI
0007F7r 2                       nop
0007F7r 2                       nop
0007F7r 2                       nop
0007F7r 2                       nop
0007F7r 2               .endif
0007F7r 2               L2A56:
0007F7r 2  29 FF                and     #$FF
0007F9r 2               LE8F2:
0007F9r 2  60                   rts
0007FAr 2               
0007FAr 2               ; ----------------------------------------------------------------------------
0007FAr 2               ; ???
0007FAr 2               ; ----------------------------------------------------------------------------
0007FAr 2               .ifdef KBD
0007FAr 2               LE8F3:
0007FAr 2                       pha
0007FAr 2                       lda     $047F
0007FAr 2                       clc
0007FAr 2                       beq     LE900
0007FAr 2                       lda     #$00
0007FAr 2                       sta     $047F
0007FAr 2                       sec
0007FAr 2               LE900:
0007FAr 2                       pla
0007FAr 2                       rts
0007FAr 2               .endif
0007FAr 2               
0007FAr 1               .include "input.s"
0007FAr 2               .segment "CODE"
0007FAr 2               
0007FAr 2               ; ----------------------------------------------------------------------------
0007FAr 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
0007FAr 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
0007FAr 2               ; BETWEEN INPUT, READ, AND GET
0007FAr 2               ; ----------------------------------------------------------------------------
0007FAr 2               INPUTERR:
0007FAr 2  A5 2C                lda     INPUTFLG
0007FCr 2  F0 11                beq     RESPERR	; INPUT
0007FEr 2               .ifndef SYM1
0007FEr 2               .ifndef CONFIG_SMALL
0007FEr 2               .ifdef CONFIG_10A
0007FEr 2               ; without this, it treats GET errors
0007FEr 2               ; like READ errors
0007FEr 2  30 04                bmi     L2A63	; READ
000800r 2  A0 FF                ldy     #$FF	; GET
000802r 2  D0 04                bne     L2A67
000804r 2               L2A63:
000804r 2               .endif
000804r 2               .endif
000804r 2               .endif
000804r 2               .ifdef CONFIG_CBM1_PATCHES
000804r 2                       jsr     PATCH5
000804r 2               		nop
000804r 2               .else
000804r 2  A5 AE                lda     Z8C
000806r 2  A4 AF                ldy     Z8C+1
000808r 2               .endif
000808r 2               L2A67:
000808r 2  85 A8                sta     CURLIN
00080Ar 2  84 A9                sty     CURLIN+1
00080Cr 2               SYNERR4:
00080Cr 2  4C rr rr             jmp     SYNERR
00080Fr 2               RESPERR:
00080Fr 2               .ifdef CONFIG_FILE
00080Fr 2                       lda     CURDVC
00080Fr 2                       beq     LCA8F
00080Fr 2                       ldx     #ERR_BADDATA
00080Fr 2                       jmp     ERROR
00080Fr 2               LCA8F:
00080Fr 2               .endif
00080Fr 2  A9 rr                lda     #<ERRREENTRY
000811r 2  A0 rr                ldy     #>ERRREENTRY
000813r 2  20 rr rr             jsr     STROUT
000816r 2  A5 AC                lda     OLDTEXT
000818r 2  A4 AD                ldy     OLDTEXT+1
00081Ar 2  85 E9                sta     TXTPTR
00081Cr 2  84 EA                sty     TXTPTR+1
00081Er 2               RTS20:
00081Er 2  60                   rts
00081Fr 2               
00081Fr 2               ; ----------------------------------------------------------------------------
00081Fr 2               ; "GET" STATEMENT
00081Fr 2               ; ----------------------------------------------------------------------------
00081Fr 2               .ifndef CONFIG_SMALL
00081Fr 2               .ifndef SYM1
00081Fr 2               GET:
00081Fr 2  20 rr rr             jsr     ERRDIR
000822r 2               ; CBM: if GET#, then switch input
000822r 2               .ifdef CONFIG_FILE
000822r 2                       cmp     #'#'
000822r 2                       bne     LCAB6
000822r 2                       jsr     CHRGET
000822r 2                       jsr     GETBYT
000822r 2                       lda     #','
000822r 2                       jsr     SYNCHR
000822r 2                       jsr     CHKIN
000822r 2                       stx     CURDVC
000822r 2               LCAB6:
000822r 2               .endif
000822r 2  A2 36                ldx     #<(INPUTBUFFER+1)
000824r 2  A0 00                ldy     #>(INPUTBUFFER+1)
000826r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000826r 2                       lda     #$00
000826r 2                       sta     INPUTBUFFER+1
000826r 2               .else
000826r 2  84 36                sty     INPUTBUFFER+1
000828r 2               .endif
000828r 2  A9 40                lda     #$40
00082Ar 2  20 rr rr             jsr     PROCESS_INPUT_LIST
00082Dr 2               ; CBM: if GET#, then switch input back
00082Dr 2               .ifdef CONFIG_FILE
00082Dr 2                       ldx     CURDVC
00082Dr 2                       bne     LCAD8
00082Dr 2               .endif
00082Dr 2  60                   rts
00082Er 2               .endif
00082Er 2               .endif
00082Er 2               
00082Er 2               ; ----------------------------------------------------------------------------
00082Er 2               ; "INPUT#" STATEMENT
00082Er 2               ; ----------------------------------------------------------------------------
00082Er 2               .ifdef CONFIG_FILE
00082Er 2               INPUTH:
00082Er 2                       jsr     GETBYT
00082Er 2                       lda     #$2C
00082Er 2                       jsr     SYNCHR
00082Er 2                       jsr     CHKIN
00082Er 2                       stx     CURDVC
00082Er 2                       jsr     L2A9E
00082Er 2               LCAD6:
00082Er 2                       lda     CURDVC
00082Er 2               LCAD8:
00082Er 2                       jsr     CLRCH
00082Er 2                       ldx     #$00
00082Er 2                       stx     CURDVC
00082Er 2                       rts
00082Er 2               LCAE0:
00082Er 2               .endif
00082Er 2               
00082Er 2               .ifdef SYM1
00082Er 2               LC9B0:
00082Er 2                       jsr     OUTQUES	; '?'
00082Er 2                       jsr     OUTSP
00082Er 2                       jmp     L2A9E
00082Er 2               .endif
00082Er 2               ; ----------------------------------------------------------------------------
00082Er 2               ; "INPUT" STATEMENT
00082Er 2               ; ----------------------------------------------------------------------------
00082Er 2               INPUT:
00082Er 2               .ifndef KBD
00082Er 2  46 2E                lsr     Z14
000830r 2               .endif
000830r 2               .ifdef AIM65
000830r 2                       lda     PRIFLG
000830r 2                       sta     ZBE
000830r 2                       jsr     LCFFA
000830r 2               .endif
000830r 2  C9 22                cmp     #$22
000832r 2               .ifdef SYM1
000832r 2                       bne     LC9B0
000832r 2               .else
000832r 2  D0 0B                bne     L2A9E
000834r 2               .endif
000834r 2  20 rr rr             jsr     STRTXT
000837r 2  A9 3B                lda     #$3B
000839r 2  20 rr rr             jsr     SYNCHR
00083Cr 2  20 rr rr             jsr     STRPRT
00083Fr 2               L2A9E:
00083Fr 2  20 rr rr             jsr     ERRDIR
000842r 2  A9 2C                lda     #$2C
000844r 2  85 34                sta     INPUTBUFFER-1
000846r 2               LCAF8:
000846r 2               .ifdef APPLE
000846r 2                       jsr     INLINX
000846r 2               .elseif .def(SYM1)
000846r 2                       jsr     INLIN
000846r 2               .else
000846r 2  20 rr rr             jsr     NXIN
000849r 2               .endif
000849r 2               .ifdef KBD
000849r 2                       bmi     L2ABE
000849r 2               .else
000849r 2                 .ifdef CONFIG_FILE
000849r 2                       lda     CURDVC
000849r 2                       beq     LCB0C
000849r 2                       lda     Z96
000849r 2                       and     #$02
000849r 2                       beq     LCB0C
000849r 2                       jsr     LCAD6
000849r 2                       jmp     DATA
000849r 2               LCB0C:
000849r 2                 .endif
000849r 2  A5 35                lda     INPUTBUFFER
00084Br 2  D0 12                bne     L2ABE
00084Dr 2                 .ifdef CONFIG_FILE
00084Dr 2                       lda     CURDVC
00084Dr 2                       bne     LCAF8
00084Dr 2                 .endif
00084Dr 2                 .ifdef CONFIG_CBM1_PATCHES
00084Dr 2                       jmp     PATCH1
00084Dr 2                 .else
00084Dr 2  18                   clc
00084Er 2  4C rr rr             jmp     CONTROL_C_TYPED
000851r 2                 .endif
000851r 2               .endif
000851r 2               
000851r 2               NXIN:
000851r 2               .ifdef KBD
000851r 2                       jsr     INLIN
000851r 2                       bmi     RTS20
000851r 2                       pla
000851r 2                       jmp     LE86C
000851r 2               .else
000851r 2                 .ifdef CONFIG_FILE
000851r 2                       lda     CURDVC
000851r 2                       bne     LCB21
000851r 2                 .endif
000851r 2  20 rr rr             jsr     OUTQUES	; '?'
000854r 2  20 rr rr             jsr     OUTSP
000857r 2               LCB21:
000857r 2  4C rr rr             jmp     INLIN
00085Ar 2               .endif
00085Ar 2               
00085Ar 2               ; ----------------------------------------------------------------------------
00085Ar 2               ; "GETC" STATEMENT
00085Ar 2               ; ----------------------------------------------------------------------------
00085Ar 2               .ifdef KBD
00085Ar 2               GETC:
00085Ar 2                       jsr     CONINT
00085Ar 2                       jsr     LF43D
00085Ar 2                       jmp     LE664
00085Ar 2               .endif
00085Ar 2               
00085Ar 2               ; ----------------------------------------------------------------------------
00085Ar 2               ; "READ" STATEMENT
00085Ar 2               ; ----------------------------------------------------------------------------
00085Ar 2               READ:
00085Ar 2  A6 B0                ldx     DATPTR
00085Cr 2  A4 B1                ldy     DATPTR+1
00085Er 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
00085Er 2               ; AppleSoft II, too
00085Er 2                       lda     #$98	; READ
00085Er 2                       .byte   $2C
00085Er 2               L2ABE:
00085Er 2                       lda     #$00	; INPUT
00085Er 2               .else
00085Er 2  A9                   .byte   $A9	; LDA #$98
00085Fr 2               L2ABE:
00085Fr 2  98                   tya
000860r 2               .endif
000860r 2               
000860r 2               ; ----------------------------------------------------------------------------
000860r 2               ; PROCESS INPUT LIST
000860r 2               ;
000860r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
000860r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
000860r 2               ; 				$40 FOR GET
000860r 2               ;				$98 FOR READ
000860r 2               ; ----------------------------------------------------------------------------
000860r 2               PROCESS_INPUT_LIST:
000860r 2  85 2C                sta     INPUTFLG
000862r 2  86 B2                stx     INPTR
000864r 2  84 B3                sty     INPTR+1
000866r 2               PROCESS_INPUT_ITEM:
000866r 2  20 rr rr             jsr     PTRGET
000869r 2  85 B8                sta     FORPNT
00086Br 2  84 B9                sty     FORPNT+1
00086Dr 2  A5 E9                lda     TXTPTR
00086Fr 2  A4 EA                ldy     TXTPTR+1
000871r 2  85 BA                sta     TXPSV
000873r 2  84 BB                sty     TXPSV+1
000875r 2  A6 B2                ldx     INPTR
000877r 2  A4 B3                ldy     INPTR+1
000879r 2  86 E9                stx     TXTPTR
00087Br 2  84 EA                sty     TXTPTR+1
00087Dr 2  20 E8 00             jsr     CHRGOT
000880r 2  D0 1B                bne     INSTART
000882r 2  24 2C                bit     INPUTFLG
000884r 2               .ifndef CONFIG_SMALL ; GET
000884r 2                .ifndef SYM1
000884r 2  50 0B                bvc     L2AF0
000886r 2                 .ifdef MICROTAN
000886r 2  20 13 E2             jsr     MONRDKEY2
000889r 2                 .elseif .def(AIM65)
000889r 2                       jsr     MONRDKEY2
000889r 2                 .else
000889r 2                       jsr     MONRDKEY
000889r 2                 .endif
000889r 2                 .ifdef CONFIG_IO_MSB
000889r 2                       and     #$7F
000889r 2                 .endif
000889r 2  85 35                sta     INPUTBUFFER
00088Br 2               ; BUG: The beq/bne L2AF8 below is supposed
00088Br 2               ; to be always taken. For this to happen,
00088Br 2               ; the last load must be a 0 for beq
00088Br 2               ; and != 0 for bne. The original Microsoft
00088Br 2               ; code had ldx/ldy/bne here, which was only
00088Br 2               ; correct for a non-ZP INPUTBUFFER. Commodore
00088Br 2               ; fixed it in CBMBASIC V1 by swapping the
00088Br 2               ; ldx and the ldy. It was broken on KIM,
00088Br 2               ; but okay on APPLE and CBM2, because
00088Br 2               ; these used a non-ZP INPUTBUFFER.
00088Br 2               ; Microsoft fixed this somewhere after KIM
00088Br 2               ; and before MICROTAN, by using beq instead
00088Br 2               ; of bne in the ZP case.
00088Br 2                 .ifdef CBM1
00088Br 2                       ldy     #>(INPUTBUFFER-1)
00088Br 2                       ldx     #<(INPUTBUFFER-1)
00088Br 2                 .else
00088Br 2  A2 34                ldx     #<(INPUTBUFFER-1)
00088Dr 2  A0 00                ldy     #>(INPUTBUFFER-1)
00088Fr 2                 .endif
00088Fr 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
00088Fr 2  F0 08                beq     L2AF8	; always
000891r 2                 .else
000891r 2                       bne     L2AF8	; always
000891r 2                 .endif
000891r 2               L2AF0:
000891r 2                .endif
000891r 2               .endif
000891r 2  30 71                bmi     FINDATA
000893r 2               .ifdef CONFIG_FILE
000893r 2                       lda     CURDVC
000893r 2                       bne     LCB64
000893r 2               .endif
000893r 2               .ifdef KBD
000893r 2                       jsr     OUTQUESSP
000893r 2               .else
000893r 2  20 rr rr             jsr     OUTQUES
000896r 2               .endif
000896r 2               LCB64:
000896r 2  20 rr rr             jsr     NXIN
000899r 2               L2AF8:
000899r 2  86 E9                stx     TXTPTR
00089Br 2  84 EA                sty     TXTPTR+1
00089Dr 2               
00089Dr 2               ; ----------------------------------------------------------------------------
00089Dr 2               INSTART:
00089Dr 2  20 E2 00             jsr     CHRGET
0008A0r 2  24 28                bit     VALTYP
0008A2r 2  10 31                bpl     L2B34
0008A4r 2               .ifndef CONFIG_SMALL ; GET
0008A4r 2                .ifndef SYM1
0008A4r 2  24 2C                bit     INPUTFLG
0008A6r 2  50 09                bvc     L2B10
0008A8r 2                 .ifdef CONFIG_CBM1_PATCHES
0008A8r 2                       lda     #$00
0008A8r 2                       jsr     PATCH4
0008A8r 2                       nop
0008A8r 2                 .else
0008A8r 2  E8                   inx
0008A9r 2  86 E9                stx     TXTPTR
0008ABr 2  A9 00                lda     #$00
0008ADr 2  85 24                sta     CHARAC
0008AFr 2  F0 0C                beq     L2B1C
0008B1r 2                 .endif
0008B1r 2               L2B10:
0008B1r 2                .endif
0008B1r 2               .endif
0008B1r 2  85 24                sta     CHARAC
0008B3r 2  C9 22                cmp     #$22
0008B5r 2  F0 07                beq     L2B1D
0008B7r 2  A9 3A                lda     #$3A
0008B9r 2  85 24                sta     CHARAC
0008BBr 2  A9 2C                lda     #$2C
0008BDr 2               L2B1C:
0008BDr 2  18                   clc
0008BEr 2               L2B1D:
0008BEr 2  85 25                sta     ENDCHR
0008C0r 2  A5 E9                lda     TXTPTR
0008C2r 2  A4 EA                ldy     TXTPTR+1
0008C4r 2  69 00                adc     #$00
0008C6r 2  90 01                bcc     L2B28
0008C8r 2  C8                   iny
0008C9r 2               L2B28:
0008C9r 2  20 rr rr             jsr     STRLT2
0008CCr 2  20 rr rr             jsr     POINT
0008CFr 2               .ifdef CONFIG_SMALL
0008CFr 2                       jsr     LETSTRING
0008CFr 2               .else
0008CFr 2  20 rr rr             jsr     PUTSTR
0008D2r 2               .endif
0008D2r 2  4C rr rr             jmp     INPUT_MORE
0008D5r 2               ; ----------------------------------------------------------------------------
0008D5r 2               L2B34:
0008D5r 2  20 rr rr             jsr     FIN
0008D8r 2               .ifdef CONFIG_SMALL
0008D8r 2                       jsr     SETFOR
0008D8r 2               .else
0008D8r 2  A5 29                lda     VALTYP+1
0008DAr 2  20 rr rr             jsr     LET2
0008DDr 2               .endif
0008DDr 2               ; ----------------------------------------------------------------------------
0008DDr 2               INPUT_MORE:
0008DDr 2  20 E8 00             jsr     CHRGOT
0008E0r 2  F0 07                beq     L2B48
0008E2r 2  C9 2C                cmp     #$2C
0008E4r 2  F0 03                beq     L2B48
0008E6r 2  4C rr rr             jmp     INPUTERR
0008E9r 2               L2B48:
0008E9r 2  A5 E9                lda     TXTPTR
0008EBr 2  A4 EA                ldy     TXTPTR+1
0008EDr 2  85 B2                sta     INPTR
0008EFr 2  84 B3                sty     INPTR+1
0008F1r 2  A5 BA                lda     TXPSV
0008F3r 2  A4 BB                ldy     TXPSV+1
0008F5r 2  85 E9                sta     TXTPTR
0008F7r 2  84 EA                sty     TXTPTR+1
0008F9r 2  20 E8 00             jsr     CHRGOT
0008FCr 2  F0 2C                beq     INPDONE
0008FEr 2  20 rr rr             jsr     CHKCOM
000901r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
000904r 2               ; ----------------------------------------------------------------------------
000904r 2               FINDATA:
000904r 2  20 rr rr             jsr     DATAN
000907r 2  C8                   iny
000908r 2  AA                   tax
000909r 2  D0 12                bne     L2B7C
00090Br 2  A2 2A                ldx     #ERR_NODATA
00090Dr 2  C8                   iny
00090Er 2  B1 E9                lda     (TXTPTR),y
000910r 2  F0 69                beq     GERR
000912r 2  C8                   iny
000913r 2  B1 E9                lda     (TXTPTR),y
000915r 2  85 AE                sta     Z8C
000917r 2  C8                   iny
000918r 2  B1 E9                lda     (TXTPTR),y
00091Ar 2  C8                   iny
00091Br 2  85 AF                sta     Z8C+1
00091Dr 2               L2B7C:
00091Dr 2  B1 E9                lda     (TXTPTR),y
00091Fr 2  AA                   tax
000920r 2  20 rr rr             jsr     ADDON
000923r 2  E0 83                cpx     #$83
000925r 2  D0 DD                bne     FINDATA
000927r 2  4C rr rr             jmp     INSTART
00092Ar 2               ; ---NO MORE INPUT REQUESTED------
00092Ar 2               INPDONE:
00092Ar 2  A5 B2                lda     INPTR
00092Cr 2  A4 B3                ldy     INPTR+1
00092Er 2  A6 2C                ldx     INPUTFLG
000930r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000930r 2                       beq     L2B94 ; INPUT
000930r 2               .else
000930r 2  10 03                bpl     L2B94; INPUT or GET
000932r 2               .endif
000932r 2  4C rr rr             jmp     SETDA
000935r 2               L2B94:
000935r 2  A0 00                ldy     #$00
000937r 2               .ifdef AIM65
000937r 2                       jsr     LB8B1
000937r 2               .endif
000937r 2  B1 B2                lda     (INPTR),y
000939r 2  F0 07                beq     L2BA1
00093Br 2               .ifdef CONFIG_FILE
00093Br 2                       lda     CURDVC
00093Br 2                       bne     L2BA1
00093Br 2               .endif
00093Br 2  A9 rr                lda     #<ERREXTRA
00093Dr 2  A0 rr                ldy     #>ERREXTRA
00093Fr 2  4C rr rr             jmp     STROUT
000942r 2               L2BA1:
000942r 2  60                   rts
000943r 2               
000943r 2               ; ----------------------------------------------------------------------------
000943r 2               ERREXTRA:
000943r 2               .ifdef KBD
000943r 2                       .byte   "?Extra"
000943r 2               .else
000943r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
000947r 2  52 41 20 49  
00094Br 2  47 4E 4F 52  
000951r 2               .endif
000951r 2  0D 0A 00             .byte   $0D,$0A,$00
000954r 2               ERRREENTRY:
000954r 2               .ifdef KBD
000954r 2                       .byte   "What?"
000954r 2               .else
000954r 2  3F 52 45 44          .byte   "?REDO FROM START"
000958r 2  4F 20 46 52  
00095Cr 2  4F 4D 20 53  
000964r 2               .endif
000964r 2  0D 0A 00             .byte   $0D,$0A,$00
000967r 2               .ifdef KBD
000967r 2               LEA30:
000967r 2                       .byte   "B"
000967r 2                       .byte   $FD
000967r 2                       .byte   "GsBASIC"
000967r 2                       .byte   $00,$1B,$0D,$13
000967r 2                       .byte   " BASIC"
000967r 2               .endif
000967r 2               
000967r 1               .include "eval.s"
000967r 2               .segment "CODE"
000967r 2               
000967r 2               ; ----------------------------------------------------------------------------
000967r 2               ; "NEXT" STATEMENT
000967r 2               ; ----------------------------------------------------------------------------
000967r 2               NEXT:
000967r 2  D0 04                bne     NEXT1
000969r 2  A0 00                ldy     #$00
00096Br 2  F0 03                beq     NEXT2
00096Dr 2               NEXT1:
00096Dr 2  20 rr rr             jsr     PTRGET
000970r 2               NEXT2:
000970r 2  85 B8                sta     FORPNT
000972r 2  84 B9                sty     FORPNT+1
000974r 2  20 rr rr             jsr     GTFORPNT
000977r 2  F0 04                beq     NEXT3
000979r 2  A2 00                ldx     #$00
00097Br 2               GERR:
00097Br 2  F0 66                beq     JERROR
00097Dr 2               NEXT3:
00097Dr 2  9A                   txs
00097Er 2               .ifndef CONFIG_2
00097Er 2                       inx
00097Er 2                       inx
00097Er 2                       inx
00097Er 2                       inx
00097Er 2               .endif
00097Er 2  8A                   txa
00097Fr 2               .ifdef CONFIG_2
00097Fr 2  18                   clc
000980r 2  69 04                adc     #$04
000982r 2  48                   pha
000983r 2  69 06                adc     #BYTES_FP+1
000985r 2  85 93                sta     DEST
000987r 2  68                   pla
000988r 2               .else
000988r 2                       inx
000988r 2                       inx
000988r 2                       inx
000988r 2                       inx
000988r 2                       inx
000988r 2               .ifndef CONFIG_SMALL
000988r 2                       inx
000988r 2               .endif
000988r 2                       stx     DEST
000988r 2               .endif
000988r 2  A0 01                ldy     #>STACK
00098Ar 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00098Dr 2  BA                   tsx
00098Er 2  BD 09 01             lda     STACK+BYTES_FP+4,x
000991r 2  85 D5                sta     FACSIGN
000993r 2  A5 B8                lda     FORPNT
000995r 2  A4 B9                ldy     FORPNT+1
000997r 2  20 rr rr             jsr     FADD
00099Ar 2  20 rr rr             jsr     SETFOR
00099Dr 2  A0 01                ldy     #>STACK
00099Fr 2  20 rr rr             jsr     FCOMP2
0009A2r 2  BA                   tsx
0009A3r 2  38                   sec
0009A4r 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
0009A7r 2  F0 17                beq     L2C22
0009A9r 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
0009ACr 2  85 A8                sta     CURLIN
0009AEr 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
0009B1r 2  85 A9                sta     CURLIN+1
0009B3r 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
0009B6r 2  85 E9                sta     TXTPTR
0009B8r 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
0009BBr 2  85 EA                sta     TXTPTR+1
0009BDr 2               L2C1F:
0009BDr 2  4C rr rr             jmp     NEWSTT
0009C0r 2               L2C22:
0009C0r 2  8A                   txa
0009C1r 2  69 11                adc     #2*BYTES_FP+7
0009C3r 2  AA                   tax
0009C4r 2  9A                   txs
0009C5r 2  20 E8 00             jsr     CHRGOT
0009C8r 2  C9 2C                cmp     #$2C
0009CAr 2  D0 F1                bne     L2C1F
0009CCr 2  20 E2 00             jsr     CHRGET
0009CFr 2  20 rr rr             jsr     NEXT1
0009D2r 2               
0009D2r 2               ; ----------------------------------------------------------------------------
0009D2r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
0009D2r 2               ; ----------------------------------------------------------------------------
0009D2r 2               FRMNUM:
0009D2r 2  20 rr rr             jsr     FRMEVL
0009D5r 2               
0009D5r 2               ; ----------------------------------------------------------------------------
0009D5r 2               ; MAKE SURE (FAC) IS NUMERIC
0009D5r 2               ; ----------------------------------------------------------------------------
0009D5r 2               CHKNUM:
0009D5r 2  18                   clc
0009D6r 2  24                   .byte   $24
0009D7r 2               
0009D7r 2               ; ----------------------------------------------------------------------------
0009D7r 2               ; MAKE SURE (FAC) IS STRING
0009D7r 2               ; ----------------------------------------------------------------------------
0009D7r 2               CHKSTR:
0009D7r 2  38                   sec
0009D8r 2               
0009D8r 2               ; ----------------------------------------------------------------------------
0009D8r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
0009D8r 2               ; IF C=0, TYPE MUST BE NUMERIC
0009D8r 2               ; IF C=1, TYPE MUST BE STRING
0009D8r 2               ; ----------------------------------------------------------------------------
0009D8r 2               CHKVAL:
0009D8r 2  24 28                bit     VALTYP
0009DAr 2  30 03                bmi     L2C41
0009DCr 2  B0 03                bcs     L2C43
0009DEr 2               L2C40:
0009DEr 2  60                   rts
0009DFr 2               L2C41:
0009DFr 2  B0 FD                bcs     L2C40
0009E1r 2               L2C43:
0009E1r 2  A2 A3                ldx     #ERR_BADTYPE
0009E3r 2               JERROR:
0009E3r 2  4C rr rr             jmp     ERROR
0009E6r 2               
0009E6r 2               ; ----------------------------------------------------------------------------
0009E6r 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
0009E6r 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
0009E6r 2               ; EXPRESSIONS.
0009E6r 2               ; ----------------------------------------------------------------------------
0009E6r 2               FRMEVL:
0009E6r 2  A6 E9                ldx     TXTPTR
0009E8r 2  D0 02                bne     L2C4E
0009EAr 2  C6 EA                dec     TXTPTR+1
0009ECr 2               L2C4E:
0009ECr 2  C6 E9                dec     TXTPTR
0009EEr 2  A2 00                ldx     #$00
0009F0r 2  24                   .byte   $24
0009F1r 2               FRMEVL1:
0009F1r 2  48                   pha
0009F2r 2  8A                   txa
0009F3r 2  48                   pha
0009F4r 2  A9 01                lda     #$01
0009F6r 2  20 rr rr             jsr     CHKMEM
0009F9r 2  20 rr rr             jsr     FRM_ELEMENT
0009FCr 2  A9 00                lda     #$00
0009FEr 2  85 BC                sta     CPRTYP
000A00r 2               FRMEVL2:
000A00r 2  20 E8 00             jsr     CHRGOT
000A03r 2               L2C65:
000A03r 2  38                   sec
000A04r 2  E9 AB                sbc     #TOKEN_GREATER
000A06r 2  90 17                bcc     L2C81
000A08r 2  C9 03                cmp     #$03
000A0Ar 2  B0 13                bcs     L2C81
000A0Cr 2  C9 01                cmp     #$01
000A0Er 2  2A                   rol     a
000A0Fr 2  49 01                eor     #$01
000A11r 2  45 BC                eor     CPRTYP
000A13r 2  C5 BC                cmp     CPRTYP
000A15r 2  90 61                bcc     SNTXERR
000A17r 2  85 BC                sta     CPRTYP
000A19r 2  20 E2 00             jsr     CHRGET
000A1Cr 2  4C rr rr             jmp     L2C65
000A1Fr 2               L2C81:
000A1Fr 2  A6 BC                ldx     CPRTYP
000A21r 2  D0 2C                bne     FRM_RELATIONAL
000A23r 2  B0 7F                bcs     L2D02
000A25r 2  69 07                adc     #$07
000A27r 2  90 7B                bcc     L2D02
000A29r 2  65 28                adc     VALTYP
000A2Br 2  D0 03                bne     L2C92
000A2Dr 2  4C rr rr             jmp     CAT
000A30r 2               L2C92:
000A30r 2  69 FF                adc     #$FF
000A32r 2  85 91                sta     INDEX
000A34r 2  0A                   asl     a
000A35r 2  65 91                adc     INDEX
000A37r 2  A8                   tay
000A38r 2               FRM_PRECEDENCE_TEST:
000A38r 2  68                   pla
000A39r 2  D9 rr rr             cmp     MATHTBL,y
000A3Cr 2  B0 6B                bcs     FRM_PERFORM1
000A3Er 2  20 rr rr             jsr     CHKNUM
000A41r 2               L2CA3:
000A41r 2  48                   pha
000A42r 2               L2CA4:
000A42r 2  20 rr rr             jsr     FRM_RECURSE
000A45r 2  68                   pla
000A46r 2  A4 BA                ldy     LASTOP
000A48r 2  10 17                bpl     PREFNC
000A4Ar 2  AA                   tax
000A4Br 2  F0 5A                beq     GOEX
000A4Dr 2  D0 63                bne     FRM_PERFORM2
000A4Fr 2               
000A4Fr 2               ; ----------------------------------------------------------------------------
000A4Fr 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000A4Fr 2               ; ----------------------------------------------------------------------------
000A4Fr 2               FRM_RELATIONAL:
000A4Fr 2  46 28                lsr     VALTYP
000A51r 2  8A                   txa
000A52r 2  2A                   rol     a
000A53r 2  A6 E9                ldx     TXTPTR
000A55r 2  D0 02                bne     L2CBB
000A57r 2  C6 EA                dec     TXTPTR+1
000A59r 2               L2CBB:
000A59r 2  C6 E9                dec     TXTPTR
000A5Br 2  A0 1B                ldy     #$1B
000A5Dr 2  85 BC                sta     CPRTYP
000A5Fr 2  D0 D7                bne     FRM_PRECEDENCE_TEST
000A61r 2               PREFNC:
000A61r 2  D9 rr rr             cmp     MATHTBL,y
000A64r 2  B0 4C                bcs     FRM_PERFORM2
000A66r 2  90 D9                bcc     L2CA3
000A68r 2               
000A68r 2               ; ----------------------------------------------------------------------------
000A68r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000A68r 2               ; ANOTHER ONE
000A68r 2               ; ----------------------------------------------------------------------------
000A68r 2               FRM_RECURSE:
000A68r 2  B9 rr rr             lda     MATHTBL+2,y
000A6Br 2  48                   pha
000A6Cr 2  B9 rr rr             lda     MATHTBL+1,y
000A6Fr 2  48                   pha
000A70r 2  20 rr rr             jsr     FRM_STACK1
000A73r 2  A5 BC                lda     CPRTYP
000A75r 2  4C rr rr             jmp     FRMEVL1
000A78r 2               SNTXERR:
000A78r 2  4C rr rr             jmp     SYNERR
000A7Br 2               
000A7Br 2               ; ----------------------------------------------------------------------------
000A7Br 2               ; STACK (FAC)
000A7Br 2               ; THREE ENTRY POINTS:
000A7Br 2               ; 	1, FROM FRMEVL
000A7Br 2               ;	2, FROM "STEP"
000A7Br 2               ;	3, FROM "FOR"
000A7Br 2               ; ----------------------------------------------------------------------------
000A7Br 2               FRM_STACK1:
000A7Br 2  A5 D5                lda     FACSIGN
000A7Dr 2  BE rr rr             ldx     MATHTBL,y
000A80r 2               
000A80r 2               ; ----------------------------------------------------------------------------
000A80r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000A80r 2               ; ----------------------------------------------------------------------------
000A80r 2               FRM_STACK2:
000A80r 2  A8                   tay
000A81r 2  68                   pla
000A82r 2  85 91                sta     INDEX
000A84r 2               .ifndef CONFIG_2B
000A84r 2                       inc     INDEX ; bug: assumes not on page boundary
000A84r 2               ; bug exists on AppleSoft II
000A84r 2               .endif
000A84r 2  68                   pla
000A85r 2  85 92                sta     INDEX+1
000A87r 2               .ifdef CONFIG_2B
000A87r 2  E6 91                inc     INDEX
000A89r 2  D0 02                bne     LEB69
000A8Br 2  E6 92                inc     INDEX+1
000A8Dr 2               LEB69:
000A8Dr 2               .endif
000A8Dr 2  98                   tya
000A8Er 2  48                   pha
000A8Fr 2               
000A8Fr 2               ; ----------------------------------------------------------------------------
000A8Fr 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000A8Fr 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000A8Fr 2               ; ----------------------------------------------------------------------------
000A8Fr 2               FRM_STACK3:
000A8Fr 2  20 rr rr             jsr     ROUND_FAC
000A92r 2               .ifndef CONFIG_SMALL
000A92r 2  A5 D4                lda     FAC+4
000A94r 2  48                   pha
000A95r 2               .endif
000A95r 2  A5 D3                lda     FAC+3
000A97r 2  48                   pha
000A98r 2  A5 D2                lda     FAC+2
000A9Ar 2  48                   pha
000A9Br 2  A5 D1                lda     FAC+1
000A9Dr 2  48                   pha
000A9Er 2  A5 D0                lda     FAC
000AA0r 2  48                   pha
000AA1r 2  6C 91 00             jmp     (INDEX)
000AA4r 2               L2D02:
000AA4r 2  A0 FF                ldy     #$FF
000AA6r 2  68                   pla
000AA7r 2               GOEX:
000AA7r 2  F0 23                beq     EXIT
000AA9r 2               
000AA9r 2               ; ----------------------------------------------------------------------------
000AA9r 2               ; PERFORM STACKED OPERATION
000AA9r 2               ;
000AA9r 2               ; (A) = PRECEDENCE BYTE
000AA9r 2               ; STACK:  1 -- CPRMASK
000AA9r 2               ;	5 -- (ARG)
000AA9r 2               ;	2 -- ADDR OF PERFORMER
000AA9r 2               ; ----------------------------------------------------------------------------
000AA9r 2               FRM_PERFORM1:
000AA9r 2  C9 64                cmp     #$64
000AABr 2  F0 03                beq     L2D0E
000AADr 2  20 rr rr             jsr     CHKNUM
000AB0r 2               L2D0E:
000AB0r 2  84 BA                sty     LASTOP
000AB2r 2               FRM_PERFORM2:
000AB2r 2  68                   pla
000AB3r 2  4A                   lsr     a
000AB4r 2  85 2D                sta     CPRMASK
000AB6r 2  68                   pla
000AB7r 2  85 D8                sta     ARG
000AB9r 2  68                   pla
000ABAr 2  85 D9                sta     ARG+1
000ABCr 2  68                   pla
000ABDr 2  85 DA                sta     ARG+2
000ABFr 2  68                   pla
000AC0r 2  85 DB                sta     ARG+3
000AC2r 2  68                   pla
000AC3r 2               .ifndef CONFIG_SMALL
000AC3r 2  85 DC                sta     ARG+4
000AC5r 2  68                   pla
000AC6r 2               .endif
000AC6r 2  85 DD                sta     ARGSIGN
000AC8r 2  45 D5                eor     FACSIGN
000ACAr 2  85 DE                sta     SGNCPR
000ACCr 2               EXIT:
000ACCr 2  A5 D0                lda     FAC
000ACEr 2  60                   rts
000ACFr 2               
000ACFr 2               ; ----------------------------------------------------------------------------
000ACFr 2               ; GET ELEMENT IN EXPRESSION
000ACFr 2               ;
000ACFr 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000ACFr 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000ACFr 2               ; ----------------------------------------------------------------------------
000ACFr 2               FRM_ELEMENT:
000ACFr 2  A9 00                lda     #$00
000AD1r 2  85 28                sta     VALTYP
000AD3r 2               L2D31:
000AD3r 2  20 E2 00             jsr     CHRGET
000AD6r 2  B0 03                bcs     L2D39
000AD8r 2               L2D36:
000AD8r 2  4C rr rr             jmp     FIN
000ADBr 2               L2D39:
000ADBr 2  20 rr rr             jsr     ISLETC
000ADEr 2  B0 67                bcs     FRM_VARIABLE
000AE0r 2               .ifdef CONFIG_CBM_ALL
000AE0r 2                       cmp     #$FF
000AE0r 2                       bne     LCDC1
000AE0r 2                       lda     #<CON_PI
000AE0r 2                       ldy     #>CON_PI
000AE0r 2                       jsr     LOAD_FAC_FROM_YA
000AE0r 2                       jmp     CHRGET
000AE0r 2               CON_PI:
000AE0r 2                       .byte   $82,$49,$0f,$DA,$A1
000AE0r 2               LCDC1:
000AE0r 2               .endif
000AE0r 2  C9 2E                cmp     #$2E
000AE2r 2  F0 F4                beq     L2D36
000AE4r 2  C9 A5                cmp     #TOKEN_MINUS
000AE6r 2  F0 58                beq     MIN
000AE8r 2  C9 A4                cmp     #TOKEN_PLUS
000AEAr 2  F0 E7                beq     L2D31
000AECr 2  C9 22                cmp     #$22
000AEEr 2  D0 0F                bne     NOT_
000AF0r 2               
000AF0r 2               ; ----------------------------------------------------------------------------
000AF0r 2               ; STRING CONSTANT ELEMENT
000AF0r 2               ;
000AF0r 2               ; SET Y,A = (TXTPTR)+CARRY
000AF0r 2               ; ----------------------------------------------------------------------------
000AF0r 2               STRTXT:
000AF0r 2  A5 E9                lda     TXTPTR
000AF2r 2  A4 EA                ldy     TXTPTR+1
000AF4r 2  69 00                adc     #$00
000AF6r 2  90 01                bcc     L2D57
000AF8r 2  C8                   iny
000AF9r 2               L2D57:
000AF9r 2  20 rr rr             jsr     STRLIT
000AFCr 2  4C rr rr             jmp     POINT
000AFFr 2               
000AFFr 2               ; ----------------------------------------------------------------------------
000AFFr 2               ; "NOT" FUNCTION
000AFFr 2               ; IF FAC=0, RETURN FAC=1
000AFFr 2               ; IF FAC<>0, RETURN FAC=0
000AFFr 2               ; ----------------------------------------------------------------------------
000AFFr 2               NOT_:
000AFFr 2  C9 A2                cmp     #TOKEN_NOT
000B01r 2  D0 13                bne     L2D74
000B03r 2  A0 18                ldy     #$18
000B05r 2  D0 3B                bne     EQUL
000B07r 2               
000B07r 2               ; ----------------------------------------------------------------------------
000B07r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000B07r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000B07r 2               ; ----------------------------------------------------------------------------
000B07r 2               EQUOP:
000B07r 2  20 rr rr             jsr     AYINT
000B0Ar 2  A5 D4                lda     FAC_LAST
000B0Cr 2  49 FF                eor     #$FF
000B0Er 2  A8                   tay
000B0Fr 2  A5 D3                lda     FAC_LAST-1
000B11r 2  49 FF                eor     #$FF
000B13r 2  4C rr rr             jmp     GIVAYF
000B16r 2               L2D74:
000B16r 2               .ifdef SYM1
000B16r 2                       cmp     #TOKEN_USR
000B16r 2                       bne     LCC8A
000B16r 2                       jmp     LCDBD
000B16r 2               LCC8A:
000B16r 2                       cmp     #$26
000B16r 2                       bne     LCC91
000B16r 2                       jmp     LCDFE
000B16r 2               LCC91:
000B16r 2               .endif
000B16r 2  C9 9F                cmp     #TOKEN_FN
000B18r 2  D0 03                bne     L2D7B
000B1Ar 2  4C rr rr             jmp     L31F3
000B1Dr 2               L2D7B:
000B1Dr 2  C9 AE                cmp     #TOKEN_SGN
000B1Fr 2  90 03                bcc     PARCHK
000B21r 2  4C rr rr             jmp     UNARY
000B24r 2               
000B24r 2               ; ----------------------------------------------------------------------------
000B24r 2               ; EVALUATE "(EXPRESSION)"
000B24r 2               ; ----------------------------------------------------------------------------
000B24r 2               PARCHK:
000B24r 2  20 rr rr             jsr     CHKOPN
000B27r 2  20 rr rr             jsr     FRMEVL
000B2Ar 2               CHKCLS:
000B2Ar 2  A9 29                lda     #$29
000B2Cr 2  2C                   .byte   $2C
000B2Dr 2               CHKOPN:
000B2Dr 2  A9 28                lda     #$28
000B2Fr 2  2C                   .byte   $2C
000B30r 2               CHKCOM:
000B30r 2  A9 2C                lda     #$2C
000B32r 2               
000B32r 2               ; ----------------------------------------------------------------------------
000B32r 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000B32r 2               ; ----------------------------------------------------------------------------
000B32r 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000B32r 2  A0 00                ldy     #$00
000B34r 2  D1 E9                cmp     (TXTPTR),y
000B36r 2  D0 03                bne     SYNERR
000B38r 2  4C E2 00             jmp     CHRGET
000B3Br 2               ; ----------------------------------------------------------------------------
000B3Br 2               SYNERR:
000B3Br 2  A2 10                ldx     #ERR_SYNTAX
000B3Dr 2  4C rr rr             jmp     ERROR
000B40r 2               ; ----------------------------------------------------------------------------
000B40r 2               MIN:
000B40r 2  A0 15                ldy     #$15
000B42r 2               EQUL:
000B42r 2  68                   pla
000B43r 2  68                   pla
000B44r 2  4C rr rr             jmp     L2CA4
000B47r 2               ; ----------------------------------------------------------------------------
000B47r 2               FRM_VARIABLE:
000B47r 2  20 rr rr             jsr     PTRGET
000B4Ar 2               FRM_VARIABLE_CALL	= *-1
000B4Ar 2  85 D3                sta     FAC_LAST-1
000B4Cr 2  84 D4                sty     FAC_LAST
000B4Er 2               .ifdef CONFIG_CBM_ALL
000B4Er 2                       lda     VARNAM
000B4Er 2                       ldy     VARNAM+1
000B4Er 2               .endif
000B4Er 2  A6 28                ldx     VALTYP
000B50r 2  F0 05                beq     L2DB1
000B52r 2               .ifdef CONFIG_CBM_ALL
000B52r 2                 .ifdef CONFIG_CBM1_PATCHES
000B52r 2                       jmp     PATCH2
000B52r 2                       clc
000B52r 2               LCE3B:
000B52r 2                 .else
000B52r 2                       ldx     #$00
000B52r 2                       stx     STRNG1+1
000B52r 2                       bit     FAC+4
000B52r 2                       bpl     LCE53
000B52r 2                       cmp     #$54	; T
000B52r 2                       bne     LCE53
000B52r 2                 .endif
000B52r 2                       cpy     #$C9	; I$
000B52r 2                       bne     LCE53
000B52r 2                       jsr     LCE76
000B52r 2                       sty     EXPON
000B52r 2                       dey
000B52r 2                       sty     STRNG2
000B52r 2                       ldy     #$06
000B52r 2                       sty     INDX
000B52r 2                       ldy     #$24
000B52r 2                       jsr     LDD3A
000B52r 2                       jmp     LD353
000B52r 2               LCE53:
000B52r 2               .endif
000B52r 2               .ifdef CONFIG_2
000B52r 2                 .ifndef CBM2
000B52r 2               ; bugfix?
000B52r 2               ; fixed on AppleSoft II, not on any CBM
000B52r 2  A2 00                ldx     #$00
000B54r 2  86 DF                stx     STRNG1+1
000B56r 2                 .endif
000B56r 2               .endif
000B56r 2  60                   rts
000B57r 2               L2DB1:
000B57r 2               .ifndef CONFIG_SMALL
000B57r 2  A6 29                ldx     VALTYP+1
000B59r 2  10 0D                bpl     L2DC2
000B5Br 2  A0 00                ldy     #$00
000B5Dr 2  B1 D3                lda     (FAC+3),y
000B5Fr 2  AA                   tax
000B60r 2  C8                   iny
000B61r 2  B1 D3                lda     (FAC+3),y
000B63r 2  A8                   tay
000B64r 2  8A                   txa
000B65r 2  4C rr rr             jmp     GIVAYF
000B68r 2               L2DC2:
000B68r 2               .endif
000B68r 2               .ifdef CONFIG_CBM1_PATCHES
000B68r 2                       jmp     PATCH3
000B68r 2                       .byte   $19
000B68r 2               .endif
000B68r 2               .ifdef CBM2
000B68r 2                       bit     FAC+4
000B68r 2                       bpl     LCE90
000B68r 2                       cmp     #$54
000B68r 2                       bne     LCE82
000B68r 2               .endif
000B68r 2               .ifndef CONFIG_CBM_ALL
000B68r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000B6Br 2               .endif
000B6Br 2               .ifdef CONFIG_CBM_ALL
000B6Br 2               LCE69:
000B6Br 2                       cpy     #$49
000B6Br 2               .ifdef CBM1
000B6Br 2                       bne     LCE82
000B6Br 2               .else
000B6Br 2                       bne     LCE90
000B6Br 2               .endif
000B6Br 2                       jsr     LCE76
000B6Br 2                       tya
000B6Br 2                       ldx     #$A0
000B6Br 2                       jmp     LDB21
000B6Br 2               LCE76:
000B6Br 2               .ifdef CBM1
000B6Br 2                       lda     #$FE
000B6Br 2                       ldy     #$01
000B6Br 2               .else
000B6Br 2                       lda     #$8B
000B6Br 2                       ldy     #$00
000B6Br 2               .endif
000B6Br 2                       sei
000B6Br 2                       jsr     LOAD_FAC_FROM_YA
000B6Br 2                       cli
000B6Br 2                       sty     FAC+1
000B6Br 2                       rts
000B6Br 2               LCE82:
000B6Br 2                       cmp     #$53
000B6Br 2                       bne     LCE90
000B6Br 2                       cpy     #$54
000B6Br 2                       bne     LCE90
000B6Br 2                       lda     Z96
000B6Br 2                       jmp     FLOAT
000B6Br 2               LCE90:
000B6Br 2                       lda     FAC+3
000B6Br 2                       ldy     FAC+4
000B6Br 2                       jmp     LOAD_FAC_FROM_YA
000B6Br 2               .endif
000B6Br 2               
000B6Br 2               ; ----------------------------------------------------------------------------
000B6Br 2               UNARY:
000B6Br 2  0A                   asl     a
000B6Cr 2  48                   pha
000B6Dr 2  AA                   tax
000B6Er 2  20 E2 00             jsr     CHRGET
000B71r 2  E0 83                cpx     #<(TOKEN_LEFTSTR*2-1)
000B73r 2  90 20                bcc     L2DEF
000B75r 2  20 rr rr             jsr     CHKOPN
000B78r 2  20 rr rr             jsr     FRMEVL
000B7Br 2  20 rr rr             jsr     CHKCOM
000B7Er 2  20 rr rr             jsr     CHKSTR
000B81r 2  68                   pla
000B82r 2  AA                   tax
000B83r 2  A5 D4                lda     FAC_LAST
000B85r 2  48                   pha
000B86r 2  A5 D3                lda     FAC_LAST-1
000B88r 2  48                   pha
000B89r 2  8A                   txa
000B8Ar 2  48                   pha
000B8Br 2  20 rr rr             jsr     GETBYT
000B8Er 2  68                   pla
000B8Fr 2  A8                   tay
000B90r 2  8A                   txa
000B91r 2  48                   pha
000B92r 2  4C rr rr             jmp     L2DF4
000B95r 2               L2DEF:
000B95r 2  20 rr rr             jsr     PARCHK
000B98r 2  68                   pla
000B99r 2  A8                   tay
000B9Ar 2               L2DF4:
000B9Ar 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000B9Dr 2  85 C4                sta     JMPADRS+1
000B9Fr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000BA2r 2  85 C5                sta     JMPADRS+2
000BA4r 2               .ifdef KBD
000BA4r 2                       jsr     LF47D
000BA4r 2               .else
000BA4r 2  20 C3 00             jsr     JMPADRS
000BA7r 2               .endif
000BA7r 2  4C rr rr             jmp     CHKNUM
000BAAr 2               
000BAAr 2               ; ----------------------------------------------------------------------------
000BAAr 2               OR:
000BAAr 2  A0 FF                ldy     #$FF
000BACr 2  2C                   .byte   $2C
000BADr 2               ; ----------------------------------------------------------------------------
000BADr 2               TAND:
000BADr 2  A0 00                ldy     #$00
000BAFr 2  84 26                sty     EOLPNTR
000BB1r 2  20 rr rr             jsr     AYINT
000BB4r 2  A5 D3                lda     FAC_LAST-1
000BB6r 2  45 26                eor     EOLPNTR
000BB8r 2  85 24                sta     CHARAC
000BBAr 2  A5 D4                lda     FAC_LAST
000BBCr 2  45 26                eor     EOLPNTR
000BBEr 2  85 25                sta     ENDCHR
000BC0r 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000BC3r 2  20 rr rr             jsr     AYINT
000BC6r 2  A5 D4                lda     FAC_LAST
000BC8r 2  45 26                eor     EOLPNTR
000BCAr 2  25 25                and     ENDCHR
000BCCr 2  45 26                eor     EOLPNTR
000BCEr 2  A8                   tay
000BCFr 2  A5 D3                lda     FAC_LAST-1
000BD1r 2  45 26                eor     EOLPNTR
000BD3r 2  25 24                and     CHARAC
000BD5r 2  45 26                eor     EOLPNTR
000BD7r 2  4C rr rr             jmp     GIVAYF
000BDAr 2               
000BDAr 2               ; ----------------------------------------------------------------------------
000BDAr 2               ; PERFORM RELATIONAL OPERATIONS
000BDAr 2               ; ----------------------------------------------------------------------------
000BDAr 2               RELOPS:
000BDAr 2  20 rr rr             jsr     CHKVAL
000BDDr 2  B0 13                bcs     STRCMP
000BDFr 2  A5 DD                lda     ARGSIGN
000BE1r 2  09 7F                ora     #$7F
000BE3r 2  25 D9                and     ARG+1
000BE5r 2  85 D9                sta     ARG+1
000BE7r 2  A9 D8                lda     #<ARG
000BE9r 2  A0 00                ldy     #$00
000BEBr 2  20 rr rr             jsr     FCOMP
000BEEr 2  AA                   tax
000BEFr 2  4C rr rr             jmp     NUMCMP
000BF2r 2               
000BF2r 2               ; ----------------------------------------------------------------------------
000BF2r 2               ; STRING COMPARISON
000BF2r 2               ; ----------------------------------------------------------------------------
000BF2r 2               STRCMP:
000BF2r 2  A9 00                lda     #$00
000BF4r 2  85 28                sta     VALTYP
000BF6r 2  C6 BC                dec     CPRTYP
000BF8r 2  20 rr rr             jsr     FREFAC
000BFBr 2  85 D0                sta     FAC
000BFDr 2  86 D1                stx     FAC+1
000BFFr 2  84 D2                sty     FAC+2
000C01r 2  A5 DB                lda     ARG_LAST-1
000C03r 2  A4 DC                ldy     ARG_LAST
000C05r 2  20 rr rr             jsr     FRETMP
000C08r 2  86 DB                stx     ARG_LAST-1
000C0Ar 2  84 DC                sty     ARG_LAST
000C0Cr 2  AA                   tax
000C0Dr 2  38                   sec
000C0Er 2  E5 D0                sbc     FAC
000C10r 2  F0 08                beq     L2E74
000C12r 2  A9 01                lda     #$01
000C14r 2  90 04                bcc     L2E74
000C16r 2  A6 D0                ldx     FAC
000C18r 2  A9 FF                lda     #$FF
000C1Ar 2               L2E74:
000C1Ar 2  85 D5                sta     FACSIGN
000C1Cr 2  A0 FF                ldy     #$FF
000C1Er 2  E8                   inx
000C1Fr 2               STRCMP1:
000C1Fr 2  C8                   iny
000C20r 2  CA                   dex
000C21r 2  D0 07                bne     L2E84
000C23r 2  A6 D5                ldx     FACSIGN
000C25r 2               NUMCMP:
000C25r 2  30 0F                bmi     CMPDONE
000C27r 2  18                   clc
000C28r 2  90 0C                bcc     CMPDONE
000C2Ar 2               L2E84:
000C2Ar 2  B1 DB                lda     (ARG_LAST-1),y
000C2Cr 2  D1 D1                cmp     (FAC+1),y
000C2Er 2  F0 EF                beq     STRCMP1
000C30r 2  A2 FF                ldx     #$FF
000C32r 2  B0 02                bcs     CMPDONE
000C34r 2  A2 01                ldx     #$01
000C36r 2               CMPDONE:
000C36r 2  E8                   inx
000C37r 2  8A                   txa
000C38r 2  2A                   rol     a
000C39r 2  25 2D                and     CPRMASK
000C3Br 2  F0 02                beq     L2E99
000C3Dr 2  A9 FF                lda     #$FF
000C3Fr 2               L2E99:
000C3Fr 2  4C rr rr             jmp     FLOAT
000C42r 2               
000C42r 2               .ifdef SYM1
000C42r 2               LCDBD:
000C42r 2                       jsr     CHRGET
000C42r 2                       jsr     CHKOPN
000C42r 2                       jsr     FRMEVL
000C42r 2                       jsr     CHRGOT
000C42r 2                       cmp     #$29
000C42r 2                       beq     LCDF1
000C42r 2                       jsr     AYINT
000C42r 2                       lda     FAC+4
000C42r 2                       ldy     FAC+3
000C42r 2                       sta     USR+1
000C42r 2                       sty     USR+2
000C42r 2               LCDD8:
000C42r 2                       jsr     CHKCOM
000C42r 2                       jsr     FRMEVL
000C42r 2                       jsr     CHRGOT
000C42r 2                       cmp     #$29
000C42r 2                       beq     LCDF1
000C42r 2                       jsr     AYINT
000C42r 2                       lda     FAC+3
000C42r 2                       pha
000C42r 2                       lda     FAC+4
000C42r 2                       pha
000C42r 2                       jmp     LCDD8
000C42r 2               
000C42r 2               LCDF1:
000C42r 2                       jsr     CHRGET
000C42r 2                       jsr     AYINT
000C42r 2                       lda     FAC+3
000C42r 2                       ldy     FAC+4
000C42r 2                       jmp     USR
000C42r 2               
000C42r 2               LCDFE:
000C42r 2                       lda     ZD4
000C42r 2                       pha
000C42r 2                       lda     ZD3
000C42r 2                       pha
000C42r 2                       jsr     CHRGET
000C42r 2                       cmp     #$22
000C42r 2                       bne     LCE49
000C42r 2                       jsr     CHRGET
000C42r 2                       jsr     LCE2B
000C42r 2                       tax
000C42r 2                       jsr     CHRGOT
000C42r 2                       jsr     LCE2B
000C42r 2                       pha
000C42r 2                       jsr     CHRGOT
000C42r 2                       cmp     #$22
000C42r 2                       bne     LCE48
000C42r 2                       jsr     CHRGET
000C42r 2                       pla
000C42r 2                       tay
000C42r 2                       pla
000C42r 2                       pla
000C42r 2                       txa
000C42r 2                       jmp     GIVAYF
000C42r 2               
000C42r 2               LCE2B:
000C42r 2                       jsr     ASCNIB
000C42r 2                       bcs     LCE47
000C42r 2                       pha
000C42r 2                       jsr     CHRGET
000C42r 2                       jsr     ASCNIB
000C42r 2                       sta     FAC+4
000C42r 2                       bcs     LCE46
000C42r 2                       jsr     CHRGET
000C42r 2                       pla
000C42r 2                       asl     a
000C42r 2                       asl     a
000C42r 2                       asl     a
000C42r 2                       asl     a
000C42r 2                       ora     FAC+4
000C42r 2                       rts
000C42r 2               
000C42r 2               LCE46:
000C42r 2                       pla
000C42r 2               LCE47:
000C42r 2                       pla
000C42r 2               LCE48:
000C42r 2                       pla
000C42r 2               LCE49:
000C42r 2                       pla
000C42r 2                       sta     ZD3
000C42r 2                       pla
000C42r 2                       sta     ZD4
000C42r 2                       jmp     ZERO_FAC
000C42r 2               .endif
000C42r 2               
000C42r 1               .include "var.s"
000C42r 2               .segment "CODE"
000C42r 2               
000C42r 2               ; ----------------------------------------------------------------------------
000C42r 2               ; "DIM" STATEMENT
000C42r 2               ; ----------------------------------------------------------------------------
000C42r 2               NXDIM:
000C42r 2  20 rr rr             jsr     CHKCOM
000C45r 2               DIM:
000C45r 2  AA                   tax
000C46r 2  20 rr rr             jsr     PTRGET2
000C49r 2  20 E8 00             jsr     CHRGOT
000C4Cr 2  D0 F4                bne     NXDIM
000C4Er 2  60                   rts
000C4Fr 2               
000C4Fr 2               ; ----------------------------------------------------------------------------
000C4Fr 2               ; PTRGET -- GENERAL VARIABLE SCAN
000C4Fr 2               ;
000C4Fr 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000C4Fr 2               ; VARTAB AND ARYTAB FOR THE NAME.
000C4Fr 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000C4Fr 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000C4Fr 2               ;
000C4Fr 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000C4Fr 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000C4Fr 2               ;		ELSE = 0
000C4Fr 2               ;
000C4Fr 2               ;	SUBFLG -- = $00
000C4Fr 2               ;		= $40 IF CALLED FROM "GETARYPT"
000C4Fr 2               ; ----------------------------------------------------------------------------
000C4Fr 2               PTRGET:
000C4Fr 2  A2 00                ldx     #$00
000C51r 2  20 E8 00             jsr     CHRGOT
000C54r 2               PTRGET2:
000C54r 2  86 27                stx     DIMFLG
000C56r 2               PTRGET3:
000C56r 2  85 B4                sta     VARNAM
000C58r 2  20 E8 00             jsr     CHRGOT
000C5Br 2  20 rr rr             jsr     ISLETC
000C5Er 2  B0 03                bcs     NAMOK
000C60r 2               SYNERR3:
000C60r 2  4C rr rr             jmp     SYNERR
000C63r 2               NAMOK:
000C63r 2  A2 00                ldx     #$00
000C65r 2  86 28                stx     VALTYP
000C67r 2               .ifndef CONFIG_SMALL
000C67r 2  86 29                stx     VALTYP+1
000C69r 2               .endif
000C69r 2  20 E2 00             jsr     CHRGET
000C6Cr 2  90 05                bcc     L2ECD
000C6Er 2  20 rr rr             jsr     ISLETC
000C71r 2  90 0B                bcc     L2ED8
000C73r 2               L2ECD:
000C73r 2  AA                   tax
000C74r 2               L2ECE:
000C74r 2  20 E2 00             jsr     CHRGET
000C77r 2  90 FB                bcc     L2ECE
000C79r 2  20 rr rr             jsr     ISLETC
000C7Cr 2  B0 F6                bcs     L2ECE
000C7Er 2               L2ED8:
000C7Er 2  C9 24                cmp     #$24
000C80r 2               .ifdef CONFIG_SMALL
000C80r 2                       bne     L2EF9
000C80r 2               .else
000C80r 2  D0 06                bne     L2EE2
000C82r 2               .endif
000C82r 2  A9 FF                lda     #$FF
000C84r 2  85 28                sta     VALTYP
000C86r 2               .ifndef CONFIG_SMALL
000C86r 2  D0 10                bne     L2EF2
000C88r 2               L2EE2:
000C88r 2  C9 25                cmp     #$25
000C8Ar 2  D0 13                bne     L2EF9
000C8Cr 2  A5 2B                lda     SUBFLG
000C8Er 2  D0 D0                bne     SYNERR3
000C90r 2  A9 80                lda     #$80
000C92r 2  85 29                sta     VALTYP+1
000C94r 2  05 B4                ora     VARNAM
000C96r 2  85 B4                sta     VARNAM
000C98r 2               L2EF2:
000C98r 2               .endif
000C98r 2  8A                   txa
000C99r 2  09 80                ora     #$80
000C9Br 2  AA                   tax
000C9Cr 2  20 E2 00             jsr     CHRGET
000C9Fr 2               L2EF9:
000C9Fr 2  86 B5                stx     VARNAM+1
000CA1r 2  38                   sec
000CA2r 2  05 2B                ora     SUBFLG
000CA4r 2  E9 28                sbc     #$28
000CA6r 2  D0 03                bne     L2F05
000CA8r 2  4C rr rr             jmp     ARRAY
000CABr 2               L2F05:
000CABr 2  A9 00                lda     #$00
000CADr 2  85 2B                sta     SUBFLG
000CAFr 2  A5 9C                lda     VARTAB
000CB1r 2  A6 9D                ldx     VARTAB+1
000CB3r 2  A0 00                ldy     #$00
000CB5r 2               L2F0F:
000CB5r 2  86 CF                stx     LOWTR+1
000CB7r 2               L2F11:
000CB7r 2  85 CE                sta     LOWTR
000CB9r 2  E4 9F                cpx     ARYTAB+1
000CBBr 2  D0 04                bne     L2F1B
000CBDr 2  C5 9E                cmp     ARYTAB
000CBFr 2  F0 22                beq     NAMENOTFOUND
000CC1r 2               L2F1B:
000CC1r 2  A5 B4                lda     VARNAM
000CC3r 2  D1 CE                cmp     (LOWTR),y
000CC5r 2  D0 08                bne     L2F29
000CC7r 2  A5 B5                lda     VARNAM+1
000CC9r 2  C8                   iny
000CCAr 2  D1 CE                cmp     (LOWTR),y
000CCCr 2  F0 6A                beq     SET_VARPNT_AND_YA
000CCEr 2  88                   dey
000CCFr 2               L2F29:
000CCFr 2  18                   clc
000CD0r 2  A5 CE                lda     LOWTR
000CD2r 2  69 07                adc     #BYTES_PER_VARIABLE
000CD4r 2  90 E1                bcc     L2F11
000CD6r 2  E8                   inx
000CD7r 2  D0 DC                bne     L2F0F
000CD9r 2               
000CD9r 2               ; ----------------------------------------------------------------------------
000CD9r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000CD9r 2               ;
000CD9r 2               ; RETURN CARRY = 1 IF A-Z
000CD9r 2               ;	= 0 IF NOT
000CD9r 2               ; ----------------------------------------------------------------------------
000CD9r 2               ISLETC:
000CD9r 2  C9 41                cmp     #$41
000CDBr 2  90 05                bcc     L2F3C
000CDDr 2  E9 5B                sbc     #$5B
000CDFr 2  38                   sec
000CE0r 2  E9 A5                sbc     #$A5
000CE2r 2               L2F3C:
000CE2r 2  60                   rts
000CE3r 2               
000CE3r 2               ; ----------------------------------------------------------------------------
000CE3r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000CE3r 2               ; ----------------------------------------------------------------------------
000CE3r 2               NAMENOTFOUND:
000CE3r 2  68                   pla
000CE4r 2  48                   pha
000CE5r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000CE7r 2  D0 0D                bne     MAKENEWVARIABLE
000CE9r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000CE9r 2  BA                   tsx
000CEAr 2  BD 02 01             lda     STACK+2,x
000CEDr 2  C9 rr                cmp     #>FRM_VARIABLE_CALL
000CEFr 2  D0 05                bne     MAKENEWVARIABLE
000CF1r 2               .endif
000CF1r 2               LD015:
000CF1r 2  A9 rr                lda     #<C_ZERO
000CF3r 2  A0 rr                ldy     #>C_ZERO
000CF5r 2  60                   rts
000CF6r 2               
000CF6r 2               ; ----------------------------------------------------------------------------
000CF6r 2               .ifndef CONFIG_2
000CF6r 2               C_ZERO:
000CF6r 2                       .byte   $00,$00
000CF6r 2               .endif
000CF6r 2               
000CF6r 2               ; ----------------------------------------------------------------------------
000CF6r 2               ; MAKE A NEW SIMPLE VARIABLE
000CF6r 2               ;
000CF6r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000CF6r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000CF6r 2               ; ----------------------------------------------------------------------------
000CF6r 2               MAKENEWVARIABLE:
000CF6r 2               .ifdef CONFIG_CBM_ALL
000CF6r 2                       lda     VARNAM
000CF6r 2                       ldy     VARNAM+1
000CF6r 2                       cmp     #$54
000CF6r 2                       bne     LD02F
000CF6r 2                       cpy     #$C9
000CF6r 2                       beq     LD015
000CF6r 2                       cpy     #$49
000CF6r 2                       bne     LD02F
000CF6r 2               LD02C:
000CF6r 2                       jmp     SYNERR
000CF6r 2               LD02F:
000CF6r 2                       cmp     #$53
000CF6r 2                       bne     LD037
000CF6r 2                       cpy     #$54
000CF6r 2                       beq     LD02C
000CF6r 2               LD037:
000CF6r 2               .endif
000CF6r 2  A5 9E                lda     ARYTAB
000CF8r 2  A4 9F                ldy     ARYTAB+1
000CFAr 2  85 CE                sta     LOWTR
000CFCr 2  84 CF                sty     LOWTR+1
000CFEr 2  A5 A0                lda     STREND
000D00r 2  A4 A1                ldy     STREND+1
000D02r 2  85 C9                sta     HIGHTR
000D04r 2  84 CA                sty     HIGHTR+1
000D06r 2  18                   clc
000D07r 2  69 07                adc     #BYTES_PER_VARIABLE
000D09r 2  90 01                bcc     L2F68
000D0Br 2  C8                   iny
000D0Cr 2               L2F68:
000D0Cr 2  85 C7                sta     HIGHDS
000D0Er 2  84 C8                sty     HIGHDS+1
000D10r 2  20 rr rr             jsr     BLTU
000D13r 2  A5 C7                lda     HIGHDS
000D15r 2  A4 C8                ldy     HIGHDS+1
000D17r 2  C8                   iny
000D18r 2  85 9E                sta     ARYTAB
000D1Ar 2  84 9F                sty     ARYTAB+1
000D1Cr 2  A0 00                ldy     #$00
000D1Er 2  A5 B4                lda     VARNAM
000D20r 2  91 CE                sta     (LOWTR),y
000D22r 2  C8                   iny
000D23r 2  A5 B5                lda     VARNAM+1
000D25r 2  91 CE                sta     (LOWTR),y
000D27r 2  A9 00                lda     #$00
000D29r 2  C8                   iny
000D2Ar 2  91 CE                sta     (LOWTR),y
000D2Cr 2  C8                   iny
000D2Dr 2  91 CE                sta     (LOWTR),y
000D2Fr 2  C8                   iny
000D30r 2  91 CE                sta     (LOWTR),y
000D32r 2  C8                   iny
000D33r 2  91 CE                sta     (LOWTR),y
000D35r 2               .ifndef CONFIG_SMALL
000D35r 2  C8                   iny
000D36r 2  91 CE                sta     (LOWTR),y
000D38r 2               .endif
000D38r 2               
000D38r 2               ; ----------------------------------------------------------------------------
000D38r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000D38r 2               ; ----------------------------------------------------------------------------
000D38r 2               SET_VARPNT_AND_YA:
000D38r 2  A5 CE                lda     LOWTR
000D3Ar 2  18                   clc
000D3Br 2  69 02                adc     #$02
000D3Dr 2  A4 CF                ldy     LOWTR+1
000D3Fr 2  90 01                bcc     L2F9E
000D41r 2  C8                   iny
000D42r 2               L2F9E:
000D42r 2  85 B6                sta     VARPNT
000D44r 2  84 B7                sty     VARPNT+1
000D46r 2  60                   rts
000D47r 2               
000D47r 1               .include "array.s"
000D47r 2               .segment "CODE"
000D47r 2               
000D47r 2               ; ----------------------------------------------------------------------------
000D47r 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000D47r 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000D47r 2               ; ----------------------------------------------------------------------------
000D47r 2               GETARY:
000D47r 2  A5 26                lda     EOLPNTR
000D49r 2  0A                   asl     a
000D4Ar 2  69 05                adc     #$05
000D4Cr 2  65 CE                adc     LOWTR
000D4Er 2  A4 CF                ldy     LOWTR+1
000D50r 2  90 01                bcc     L2FAF
000D52r 2  C8                   iny
000D53r 2               L2FAF:
000D53r 2  85 C7                sta     HIGHDS
000D55r 2  84 C8                sty     HIGHDS+1
000D57r 2  60                   rts
000D58r 2               
000D58r 2               ; ----------------------------------------------------------------------------
000D58r 2               NEG32768:
000D58r 2  90 80 00 00          .byte   $90,$80,$00,$00
000D5Cr 2               
000D5Cr 2               .ifdef CONFIG_2C
000D5Cr 2  00           		.byte	$00; bugfix: short number
000D5Dr 2               .endif
000D5Dr 2               
000D5Dr 2               ; ----------------------------------------------------------------------------
000D5Dr 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000D5Dr 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000D5Dr 2               ; IN FAC+3,4
000D5Dr 2               ; ----------------------------------------------------------------------------
000D5Dr 2               MAKINT:
000D5Dr 2  20 E2 00             jsr     CHRGET
000D60r 2               .ifdef CONFIG_2
000D60r 2  20 rr rr             jsr     FRMEVL
000D63r 2               .else
000D63r 2                       jsr     FRMNUM
000D63r 2               .endif
000D63r 2               
000D63r 2               ; ----------------------------------------------------------------------------
000D63r 2               ; CONVERT FAC TO INTEGER
000D63r 2               ; MUST BE POSITIVE AND LESS THAN 32768
000D63r 2               ; ----------------------------------------------------------------------------
000D63r 2               MKINT:
000D63r 2               .ifdef CONFIG_2
000D63r 2  20 rr rr             jsr     CHKNUM
000D66r 2               .endif
000D66r 2  A5 D5                lda     FACSIGN
000D68r 2  30 0D                bmi     MI1
000D6Ar 2               
000D6Ar 2               ; ----------------------------------------------------------------------------
000D6Ar 2               ; CONVERT FAC TO INTEGER
000D6Ar 2               ; MUST BE -32767 <= FAC <= 32767
000D6Ar 2               ; ----------------------------------------------------------------------------
000D6Ar 2               AYINT:
000D6Ar 2  A5 D0                lda     FAC
000D6Cr 2  C9 90                cmp     #$90
000D6Er 2  90 09                bcc     MI2
000D70r 2  A9 rr                lda     #<NEG32768
000D72r 2  A0 rr                ldy     #>NEG32768
000D74r 2  20 rr rr             jsr     FCOMP
000D77r 2               MI1:
000D77r 2  D0 7A                bne     IQERR
000D79r 2               MI2:
000D79r 2  4C rr rr             jmp     QINT
000D7Cr 2               
000D7Cr 2               ; ----------------------------------------------------------------------------
000D7Cr 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000D7Cr 2               ; ----------------------------------------------------------------------------
000D7Cr 2               ARRAY:
000D7Cr 2  A5 27                lda     DIMFLG
000D7Er 2               .ifndef CONFIG_SMALL
000D7Er 2  05 29                ora     VALTYP+1
000D80r 2               .endif
000D80r 2  48                   pha
000D81r 2  A5 28                lda     VALTYP
000D83r 2  48                   pha
000D84r 2  A0 00                ldy     #$00
000D86r 2               L2FDE:
000D86r 2  98                   tya
000D87r 2  48                   pha
000D88r 2  A5 B5                lda     VARNAM+1
000D8Ar 2  48                   pha
000D8Br 2  A5 B4                lda     VARNAM
000D8Dr 2  48                   pha
000D8Er 2  20 rr rr             jsr     MAKINT
000D91r 2  68                   pla
000D92r 2  85 B4                sta     VARNAM
000D94r 2  68                   pla
000D95r 2  85 B5                sta     VARNAM+1
000D97r 2  68                   pla
000D98r 2  A8                   tay
000D99r 2  BA                   tsx
000D9Ar 2  BD 02 01             lda     STACK+2,x
000D9Dr 2  48                   pha
000D9Er 2  BD 01 01             lda     STACK+1,x
000DA1r 2  48                   pha
000DA2r 2  A5 D3                lda     FAC_LAST-1
000DA4r 2  9D 02 01             sta     STACK+2,x
000DA7r 2  A5 D4                lda     FAC_LAST
000DA9r 2  9D 01 01             sta     STACK+1,x
000DACr 2  C8                   iny
000DADr 2  20 E8 00             jsr     CHRGOT
000DB0r 2  C9 2C                cmp     #$2C
000DB2r 2  F0 D2                beq     L2FDE
000DB4r 2  84 26                sty     EOLPNTR
000DB6r 2  20 rr rr             jsr     CHKCLS
000DB9r 2  68                   pla
000DBAr 2  85 28                sta     VALTYP
000DBCr 2  68                   pla
000DBDr 2               .ifndef CONFIG_SMALL
000DBDr 2  85 29                sta     VALTYP+1
000DBFr 2  29 7F                and     #$7F
000DC1r 2               .endif
000DC1r 2  85 27                sta     DIMFLG
000DC3r 2               ; ----------------------------------------------------------------------------
000DC3r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000DC3r 2               ; ----------------------------------------------------------------------------
000DC3r 2  A6 9E                ldx     ARYTAB
000DC5r 2  A5 9F                lda     ARYTAB+1
000DC7r 2               L301F:
000DC7r 2  86 CE                stx     LOWTR
000DC9r 2  85 CF                sta     LOWTR+1
000DCBr 2  C5 A1                cmp     STREND+1
000DCDr 2  D0 04                bne     L302B
000DCFr 2  E4 A0                cpx     STREND
000DD1r 2  F0 39                beq     MAKE_NEW_ARRAY
000DD3r 2               L302B:
000DD3r 2  A0 00                ldy     #$00
000DD5r 2  B1 CE                lda     (LOWTR),y
000DD7r 2  C8                   iny
000DD8r 2  C5 B4                cmp     VARNAM
000DDAr 2  D0 06                bne     L303A
000DDCr 2  A5 B5                lda     VARNAM+1
000DDEr 2  D1 CE                cmp     (LOWTR),y
000DE0r 2  F0 16                beq     USE_OLD_ARRAY
000DE2r 2               L303A:
000DE2r 2  C8                   iny
000DE3r 2  B1 CE                lda     (LOWTR),y
000DE5r 2  18                   clc
000DE6r 2  65 CE                adc     LOWTR
000DE8r 2  AA                   tax
000DE9r 2  C8                   iny
000DEAr 2  B1 CE                lda     (LOWTR),y
000DECr 2  65 CF                adc     LOWTR+1
000DEEr 2  90 D7                bcc     L301F
000DF0r 2               
000DF0r 2               ; ----------------------------------------------------------------------------
000DF0r 2               ; ERROR:  BAD SUBSCRIPTS
000DF0r 2               ; ----------------------------------------------------------------------------
000DF0r 2               SUBERR:
000DF0r 2  A2 6B                ldx     #ERR_BADSUBS
000DF2r 2  2C                   .byte   $2C
000DF3r 2               
000DF3r 2               ; ----------------------------------------------------------------------------
000DF3r 2               ; ERROR:  ILLEGAL QUANTITY
000DF3r 2               ; ----------------------------------------------------------------------------
000DF3r 2               IQERR:
000DF3r 2  A2 35                ldx     #ERR_ILLQTY
000DF5r 2               JER:
000DF5r 2  4C rr rr             jmp     ERROR
000DF8r 2               
000DF8r 2               ; ----------------------------------------------------------------------------
000DF8r 2               ; FOUND THE ARRAY
000DF8r 2               ; ----------------------------------------------------------------------------
000DF8r 2               USE_OLD_ARRAY:
000DF8r 2  A2 78                ldx     #ERR_REDIMD
000DFAr 2  A5 27                lda     DIMFLG
000DFCr 2  D0 F7                bne     JER
000DFEr 2  20 rr rr             jsr     GETARY
000E01r 2  A5 26                lda     EOLPNTR
000E03r 2  A0 04                ldy     #$04
000E05r 2  D1 CE                cmp     (LOWTR),y
000E07r 2  D0 E7                bne     SUBERR
000E09r 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000E0Cr 2               
000E0Cr 2               ; ----------------------------------------------------------------------------
000E0Cr 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000E0Cr 2               ; ----------------------------------------------------------------------------
000E0Cr 2               MAKE_NEW_ARRAY:
000E0Cr 2  20 rr rr             jsr     GETARY
000E0Fr 2  20 rr rr             jsr     REASON
000E12r 2  A9 00                lda     #$00
000E14r 2  A8                   tay
000E15r 2  85 E1                sta     STRNG2+1
000E17r 2  A2 05                ldx     #BYTES_PER_ELEMENT
000E19r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000E19r 2                       stx     STRNG2
000E19r 2               .endif
000E19r 2  A5 B4                lda     VARNAM
000E1Br 2  91 CE                sta     (LOWTR),y
000E1Dr 2               .ifndef CONFIG_SMALL
000E1Dr 2  10 01                bpl     L3078
000E1Fr 2  CA                   dex
000E20r 2               L3078:
000E20r 2               .endif
000E20r 2  C8                   iny
000E21r 2  A5 B5                lda     VARNAM+1
000E23r 2  91 CE                sta     (LOWTR),y
000E25r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000E25r 2  10 02                bpl     L3081
000E27r 2  CA                   dex
000E28r 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000E28r 2  CA                   dex
000E29r 2                 .endif
000E29r 2               L3081:
000E29r 2  86 E0                stx     STRNG2
000E2Br 2               .endif
000E2Br 2  A5 26                lda     EOLPNTR
000E2Dr 2  C8                   iny
000E2Er 2  C8                   iny
000E2Fr 2  C8                   iny
000E30r 2  91 CE                sta     (LOWTR),y
000E32r 2               L308A:
000E32r 2  A2 0B                ldx     #$0B
000E34r 2  A9 00                lda     #$00
000E36r 2  24 27                bit     DIMFLG
000E38r 2  50 08                bvc     L309A
000E3Ar 2  68                   pla
000E3Br 2  18                   clc
000E3Cr 2  69 01                adc     #$01
000E3Er 2  AA                   tax
000E3Fr 2  68                   pla
000E40r 2  69 00                adc     #$00
000E42r 2               L309A:
000E42r 2  C8                   iny
000E43r 2  91 CE                sta     (LOWTR),y
000E45r 2  C8                   iny
000E46r 2  8A                   txa
000E47r 2  91 CE                sta     (LOWTR),y
000E49r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000E4Cr 2  86 E0                stx     STRNG2
000E4Er 2  85 E1                sta     STRNG2+1
000E50r 2  A4 91                ldy     INDEX
000E52r 2  C6 26                dec     EOLPNTR
000E54r 2  D0 DC                bne     L308A
000E56r 2  65 C8                adc     HIGHDS+1
000E58r 2  B0 5D                bcs     GME
000E5Ar 2  85 C8                sta     HIGHDS+1
000E5Cr 2  A8                   tay
000E5Dr 2  8A                   txa
000E5Er 2  65 C7                adc     HIGHDS
000E60r 2  90 03                bcc     L30BD
000E62r 2  C8                   iny
000E63r 2  F0 52                beq     GME
000E65r 2               L30BD:
000E65r 2  20 rr rr             jsr     REASON
000E68r 2  85 A0                sta     STREND
000E6Ar 2  84 A1                sty     STREND+1
000E6Cr 2  A9 00                lda     #$00
000E6Er 2  E6 E1                inc     STRNG2+1
000E70r 2  A4 E0                ldy     STRNG2
000E72r 2  F0 05                beq     L30D1
000E74r 2               L30CC:
000E74r 2  88                   dey
000E75r 2  91 C7                sta     (HIGHDS),y
000E77r 2  D0 FB                bne     L30CC
000E79r 2               L30D1:
000E79r 2  C6 C8                dec     HIGHDS+1
000E7Br 2  C6 E1                dec     STRNG2+1
000E7Dr 2  D0 F5                bne     L30CC
000E7Fr 2  E6 C8                inc     HIGHDS+1
000E81r 2  38                   sec
000E82r 2  A5 A0                lda     STREND
000E84r 2  E5 CE                sbc     LOWTR
000E86r 2  A0 02                ldy     #$02
000E88r 2  91 CE                sta     (LOWTR),y
000E8Ar 2  A5 A1                lda     STREND+1
000E8Cr 2  C8                   iny
000E8Dr 2  E5 CF                sbc     LOWTR+1
000E8Fr 2  91 CE                sta     (LOWTR),y
000E91r 2  A5 27                lda     DIMFLG
000E93r 2  D0 62                bne     RTS9
000E95r 2  C8                   iny
000E96r 2               
000E96r 2               ; ----------------------------------------------------------------------------
000E96r 2               ; FIND SPECIFIED ARRAY ELEMENT
000E96r 2               ;
000E96r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000E96r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000E96r 2               ; ----------------------------------------------------------------------------
000E96r 2               FIND_ARRAY_ELEMENT:
000E96r 2  B1 CE                lda     (LOWTR),y
000E98r 2  85 26                sta     EOLPNTR
000E9Ar 2  A9 00                lda     #$00
000E9Cr 2  85 E0                sta     STRNG2
000E9Er 2               L30F6:
000E9Er 2  85 E1                sta     STRNG2+1
000EA0r 2  C8                   iny
000EA1r 2  68                   pla
000EA2r 2  AA                   tax
000EA3r 2  85 D3                sta     FAC_LAST-1
000EA5r 2  68                   pla
000EA6r 2  85 D4                sta     FAC_LAST
000EA8r 2  D1 CE                cmp     (LOWTR),y
000EAAr 2  90 0E                bcc     FAE2
000EACr 2  D0 06                bne     GSE
000EAEr 2  C8                   iny
000EAFr 2  8A                   txa
000EB0r 2  D1 CE                cmp     (LOWTR),y
000EB2r 2  90 07                bcc     FAE3
000EB4r 2               ; ----------------------------------------------------------------------------
000EB4r 2               GSE:
000EB4r 2  4C rr rr             jmp     SUBERR
000EB7r 2               GME:
000EB7r 2  4C rr rr             jmp     MEMERR
000EBAr 2               ; ----------------------------------------------------------------------------
000EBAr 2               FAE2:
000EBAr 2  C8                   iny
000EBBr 2               FAE3:
000EBBr 2  A5 E1                lda     STRNG2+1
000EBDr 2  05 E0                ora     STRNG2
000EBFr 2  18                   clc
000EC0r 2  F0 0A                beq     L3124
000EC2r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000EC5r 2  8A                   txa
000EC6r 2  65 D3                adc     FAC_LAST-1
000EC8r 2  AA                   tax
000EC9r 2  98                   tya
000ECAr 2  A4 91                ldy     INDEX
000ECCr 2               L3124:
000ECCr 2  65 D4                adc     FAC_LAST
000ECEr 2  86 E0                stx     STRNG2
000ED0r 2  C6 26                dec     EOLPNTR
000ED2r 2  D0 CA                bne     L30F6
000ED4r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000ED4r 2                       asl     STRNG2
000ED4r 2                       rol     a
000ED4r 2                       bcs     GSE
000ED4r 2                       asl     STRNG2
000ED4r 2                       rol     a
000ED4r 2                       bcs     GSE
000ED4r 2                       tay
000ED4r 2                       lda     STRNG2
000ED4r 2               .else
000ED4r 2                 .ifdef CONFIG_11A
000ED4r 2  85 E1                sta     STRNG2+1
000ED6r 2                 .endif
000ED6r 2  A2 05                ldx     #BYTES_FP
000ED8r 2                 .ifdef CONFIG_SMALL
000ED8r 2                       lda     VARNAM+1
000ED8r 2                 .else
000ED8r 2  A5 B4                lda     VARNAM
000EDAr 2                 .endif
000EDAr 2  10 01                bpl     L3135
000EDCr 2  CA                   dex
000EDDr 2               L3135:
000EDDr 2                 .ifdef CONFIG_SMALL
000EDDr 2                       stx     RESULT+1
000EDDr 2                 .else
000EDDr 2  A5 B5                lda     VARNAM+1
000EDFr 2  10 02                bpl     L313B
000EE1r 2  CA                   dex
000EE2r 2  CA                   dex
000EE3r 2               L313B:
000EE3r 2  86 97                stx     RESULT+2
000EE5r 2                 .endif
000EE5r 2  A9 00                lda     #$00
000EE7r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000EEAr 2  8A                   txa
000EEBr 2               .endif
000EEBr 2  65 C7                adc     HIGHDS
000EEDr 2  85 B6                sta     VARPNT
000EEFr 2  98                   tya
000EF0r 2  65 C8                adc     HIGHDS+1
000EF2r 2  85 B7                sta     VARPNT+1
000EF4r 2  A8                   tay
000EF5r 2  A5 B6                lda     VARPNT
000EF7r 2               RTS9:
000EF7r 2  60                   rts
000EF8r 2               
000EF8r 2               ; ----------------------------------------------------------------------------
000EF8r 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000EF8r 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000EF8r 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000EF8r 2               ; ----------------------------------------------------------------------------
000EF8r 2               MULTIPLY_SUBSCRIPT:
000EF8r 2  84 91                sty     INDEX
000EFAr 2  B1 CE                lda     (LOWTR),y
000EFCr 2  85 97                sta     RESULT_LAST-2
000EFEr 2  88                   dey
000EFFr 2  B1 CE                lda     (LOWTR),y
000F01r 2               MULTIPLY_SUBS1:
000F01r 2  85 98                sta     RESULT_LAST-1
000F03r 2  A9 10                lda     #$10
000F05r 2  85 CC                sta     INDX
000F07r 2  A2 00                ldx     #$00
000F09r 2  A0 00                ldy     #$00
000F0Br 2               L3163:
000F0Br 2  8A                   txa
000F0Cr 2  0A                   asl     a
000F0Dr 2  AA                   tax
000F0Er 2  98                   tya
000F0Fr 2  2A                   rol     a
000F10r 2  A8                   tay
000F11r 2  B0 A4                bcs     GME
000F13r 2  06 E0                asl     STRNG2
000F15r 2  26 E1                rol     STRNG2+1
000F17r 2  90 0B                bcc     L317C
000F19r 2  18                   clc
000F1Ar 2  8A                   txa
000F1Br 2  65 97                adc     RESULT_LAST-2
000F1Dr 2  AA                   tax
000F1Er 2  98                   tya
000F1Fr 2  65 98                adc     RESULT_LAST-1
000F21r 2  A8                   tay
000F22r 2  B0 93                bcs     GME
000F24r 2               L317C:
000F24r 2  C6 CC                dec     INDX
000F26r 2  D0 E3                bne     L3163
000F28r 2  60                   rts
000F29r 2               
000F29r 2               
000F29r 1               .include "misc2.s"
000F29r 2               .segment "CODE"
000F29r 2               
000F29r 2               ; ----------------------------------------------------------------------------
000F29r 2               ; "FRE" FUNCTION
000F29r 2               ;
000F29r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000F29r 2               ; ----------------------------------------------------------------------------
000F29r 2               FRE:
000F29r 2  A5 28                lda     VALTYP
000F2Br 2  F0 03                beq     L3188
000F2Dr 2  20 rr rr             jsr     FREFAC
000F30r 2               L3188:
000F30r 2  20 rr rr             jsr     GARBAG
000F33r 2  38                   sec
000F34r 2  A5 A2                lda     FRETOP
000F36r 2  E5 A0                sbc     STREND
000F38r 2  A8                   tay
000F39r 2  A5 A3                lda     FRETOP+1
000F3Br 2  E5 A1                sbc     STREND+1
000F3Dr 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000F3Dr 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000F3Dr 2               
000F3Dr 2               ; ----------------------------------------------------------------------------
000F3Dr 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000F3Dr 2               ; ----------------------------------------------------------------------------
000F3Dr 2               GIVAYF:
000F3Dr 2  A2 00                ldx     #$00
000F3Fr 2  86 28                stx     VALTYP
000F41r 2  85 D1                sta     FAC+1
000F43r 2  84 D2                sty     FAC+2
000F45r 2  A2 90                ldx     #$90
000F47r 2  4C rr rr             jmp     FLOAT1
000F4Ar 2               POS:
000F4Ar 2  A4 30                ldy     POSX
000F4Cr 2               
000F4Cr 2               ; ----------------------------------------------------------------------------
000F4Cr 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000F4Cr 2               ; ----------------------------------------------------------------------------
000F4Cr 2               SNGFLT:
000F4Cr 2  A9 00                lda     #$00
000F4Er 2  F0 ED                beq     GIVAYF
000F50r 2               
000F50r 2               ; ----------------------------------------------------------------------------
000F50r 2               ; CHECK FOR DIRECT OR RUNNING MODE
000F50r 2               ; GIVING ERROR IF DIRECT MODE
000F50r 2               ; ----------------------------------------------------------------------------
000F50r 2               ERRDIR:
000F50r 2  A6 A9                ldx     CURLIN+1
000F52r 2  E8                   inx
000F53r 2  D0 A2                bne     RTS9
000F55r 2  A2 95                ldx     #ERR_ILLDIR
000F57r 2               .ifdef CONFIG_2
000F57r 2  2C                   .byte   $2C
000F58r 2               LD288:
000F58r 2  A2 E0                ldx     #ERR_UNDEFFN
000F5Ar 2               .endif
000F5Ar 2               L31AF:
000F5Ar 2  4C rr rr             jmp     ERROR
000F5Dr 2               DEF:
000F5Dr 2  20 rr rr             jsr     FNC
000F60r 2  20 rr rr             jsr     ERRDIR
000F63r 2  20 rr rr             jsr     CHKOPN
000F66r 2  A9 80                lda     #$80
000F68r 2  85 2B                sta     SUBFLG
000F6Ar 2  20 rr rr             jsr     PTRGET
000F6Dr 2  20 rr rr             jsr     CHKNUM
000F70r 2  20 rr rr             jsr     CHKCLS
000F73r 2  A9 AC                lda     #TOKEN_EQUAL
000F75r 2  20 rr rr             jsr     SYNCHR
000F78r 2               .ifndef CONFIG_SMALL
000F78r 2  48                   pha
000F79r 2               .endif
000F79r 2  A5 B7                lda     VARPNT+1
000F7Br 2  48                   pha
000F7Cr 2  A5 B6                lda     VARPNT
000F7Er 2  48                   pha
000F7Fr 2  A5 EA                lda     TXTPTR+1
000F81r 2  48                   pha
000F82r 2  A5 E9                lda     TXTPTR
000F84r 2  48                   pha
000F85r 2  20 rr rr             jsr     DATA
000F88r 2  4C rr rr             jmp     L3250
000F8Br 2               FNC:
000F8Br 2  A9 9F                lda     #TOKEN_FN
000F8Dr 2  20 rr rr             jsr     SYNCHR
000F90r 2  09 80                ora     #$80
000F92r 2  85 2B                sta     SUBFLG
000F94r 2  20 rr rr             jsr     PTRGET3
000F97r 2  85 BD                sta     FNCNAM
000F99r 2  84 BE                sty     FNCNAM+1
000F9Br 2  4C rr rr             jmp     CHKNUM
000F9Er 2               L31F3:
000F9Er 2  20 rr rr             jsr     FNC
000FA1r 2  A5 BE                lda     FNCNAM+1
000FA3r 2  48                   pha
000FA4r 2  A5 BD                lda     FNCNAM
000FA6r 2  48                   pha
000FA7r 2  20 rr rr             jsr     PARCHK
000FAAr 2  20 rr rr             jsr     CHKNUM
000FADr 2  68                   pla
000FAEr 2  85 BD                sta     FNCNAM
000FB0r 2  68                   pla
000FB1r 2  85 BE                sta     FNCNAM+1
000FB3r 2  A0 02                ldy     #$02
000FB5r 2               .ifndef CONFIG_2
000FB5r 2                       ldx     #ERR_UNDEFFN
000FB5r 2               .endif
000FB5r 2  B1 BD                lda     (FNCNAM),y
000FB7r 2               .ifndef CONFIG_2
000FB7r 2                       beq     L31AF
000FB7r 2               .endif
000FB7r 2  85 B6                sta     VARPNT
000FB9r 2  AA                   tax
000FBAr 2  C8                   iny
000FBBr 2  B1 BD                lda     (FNCNAM),y
000FBDr 2               .ifdef CONFIG_2
000FBDr 2  F0 99                beq     LD288
000FBFr 2               .endif
000FBFr 2  85 B7                sta     VARPNT+1
000FC1r 2               .ifndef CONFIG_SMALL
000FC1r 2  C8                   iny
000FC2r 2               .endif
000FC2r 2               L3219:
000FC2r 2  B1 B6                lda     (VARPNT),y
000FC4r 2  48                   pha
000FC5r 2  88                   dey
000FC6r 2  10 FA                bpl     L3219
000FC8r 2  A4 B7                ldy     VARPNT+1
000FCAr 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000FCDr 2  A5 EA                lda     TXTPTR+1
000FCFr 2  48                   pha
000FD0r 2  A5 E9                lda     TXTPTR
000FD2r 2  48                   pha
000FD3r 2  B1 BD                lda     (FNCNAM),y
000FD5r 2  85 E9                sta     TXTPTR
000FD7r 2  C8                   iny
000FD8r 2  B1 BD                lda     (FNCNAM),y
000FDAr 2  85 EA                sta     TXTPTR+1
000FDCr 2  A5 B7                lda     VARPNT+1
000FDEr 2  48                   pha
000FDFr 2  A5 B6                lda     VARPNT
000FE1r 2  48                   pha
000FE2r 2  20 rr rr             jsr     FRMNUM
000FE5r 2  68                   pla
000FE6r 2  85 BD                sta     FNCNAM
000FE8r 2  68                   pla
000FE9r 2  85 BE                sta     FNCNAM+1
000FEBr 2  20 E8 00             jsr     CHRGOT
000FEEr 2  F0 03                beq     L324A
000FF0r 2  4C rr rr             jmp     SYNERR
000FF3r 2               L324A:
000FF3r 2  68                   pla
000FF4r 2  85 E9                sta     TXTPTR
000FF6r 2  68                   pla
000FF7r 2  85 EA                sta     TXTPTR+1
000FF9r 2               L3250:
000FF9r 2  A0 00                ldy     #$00
000FFBr 2  68                   pla
000FFCr 2  91 BD                sta     (FNCNAM),y
000FFEr 2  68                   pla
000FFFr 2  C8                   iny
001000r 2  91 BD                sta     (FNCNAM),y
001002r 2  68                   pla
001003r 2  C8                   iny
001004r 2  91 BD                sta     (FNCNAM),y
001006r 2  68                   pla
001007r 2  C8                   iny
001008r 2  91 BD                sta     (FNCNAM),y
00100Ar 2               .ifndef CONFIG_SMALL
00100Ar 2  68                   pla
00100Br 2  C8                   iny
00100Cr 2  91 BD                sta     (FNCNAM),y
00100Er 2               .endif
00100Er 2  60                   rts
00100Fr 2               
00100Fr 1               .include "string.s"
00100Fr 2               .segment "CODE"
00100Fr 2               ; ----------------------------------------------------------------------------
00100Fr 2               ; "STR$" FUNCTION
00100Fr 2               ; ----------------------------------------------------------------------------
00100Fr 2               STR:
00100Fr 2  20 rr rr             jsr     CHKNUM
001012r 2  A0 00                ldy     #$00
001014r 2  20 rr rr             jsr     FOUT1
001017r 2  68                   pla
001018r 2  68                   pla
001019r 2               LD353:
001019r 2  A9 FF                lda     #<(STACK2-1)
00101Br 2  A0 00                ldy     #>(STACK2-1)
00101Dr 2               .if STACK2 > $0100
00101Dr 2                       bne     STRLIT
00101Dr 2               .else
00101Dr 2  F0 12                beq     STRLIT
00101Fr 2               .endif
00101Fr 2               
00101Fr 2               ; ----------------------------------------------------------------------------
00101Fr 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00101Fr 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
00101Fr 2               ; ----------------------------------------------------------------------------
00101Fr 2               STRINI:
00101Fr 2  A6 D3                ldx     FAC_LAST-1
001021r 2  A4 D4                ldy     FAC_LAST
001023r 2  86 BF                stx     DSCPTR
001025r 2  84 C0                sty     DSCPTR+1
001027r 2               
001027r 2               ; ----------------------------------------------------------------------------
001027r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
001027r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
001027r 2               ; ----------------------------------------------------------------------------
001027r 2               STRSPA:
001027r 2  20 rr rr             jsr     GETSPA
00102Ar 2  86 D1                stx     FAC+1
00102Cr 2  84 D2                sty     FAC+2
00102Er 2  85 D0                sta     FAC
001030r 2  60                   rts
001031r 2               
001031r 2               ; ----------------------------------------------------------------------------
001031r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
001031r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
001031r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
001031r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
001031r 2               ; ----------------------------------------------------------------------------
001031r 2               STRLIT:
001031r 2  A2 22                ldx     #$22
001033r 2  86 24                stx     CHARAC
001035r 2  86 25                stx     ENDCHR
001037r 2               
001037r 2               ; ----------------------------------------------------------------------------
001037r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
001037r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
001037r 2               ;
001037r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
001037r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
001037r 2               ; ----------------------------------------------------------------------------
001037r 2               STRLT2:
001037r 2  85 DE                sta     STRNG1
001039r 2  84 DF                sty     STRNG1+1
00103Br 2  85 D1                sta     FAC+1
00103Dr 2  84 D2                sty     FAC+2
00103Fr 2  A0 FF                ldy     #$FF
001041r 2               L3298:
001041r 2  C8                   iny
001042r 2  B1 DE                lda     (STRNG1),y
001044r 2  F0 0C                beq     L32A9
001046r 2  C5 24                cmp     CHARAC
001048r 2  F0 04                beq     L32A5
00104Ar 2  C5 25                cmp     ENDCHR
00104Cr 2  D0 F3                bne     L3298
00104Er 2               L32A5:
00104Er 2  C9 22                cmp     #$22
001050r 2  F0 01                beq     L32AA
001052r 2               L32A9:
001052r 2  18                   clc
001053r 2               L32AA:
001053r 2  84 D0                sty     FAC
001055r 2  98                   tya
001056r 2  65 DE                adc     STRNG1
001058r 2  85 E0                sta     STRNG2
00105Ar 2  A6 DF                ldx     STRNG1+1
00105Cr 2  90 01                bcc     L32B6
00105Er 2  E8                   inx
00105Fr 2               L32B6:
00105Fr 2  86 E1                stx     STRNG2+1
001061r 2  A5 DF                lda     STRNG1+1
001063r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
001063r 2                       beq     LD399
001063r 2                       cmp     #>INPUTBUFFER
001063r 2               .elseif .def(AIM65)
001063r 2                       beq     LD399
001063r 2                       cmp     #$01
001063r 2               .endif
001063r 2  D0 0B                bne     PUTNEW
001065r 2               LD399:
001065r 2  98                   tya
001066r 2  20 rr rr             jsr     STRINI
001069r 2  A6 DE                ldx     STRNG1
00106Br 2  A4 DF                ldy     STRNG1+1
00106Dr 2  20 rr rr             jsr     MOVSTR
001070r 2               
001070r 2               ; ----------------------------------------------------------------------------
001070r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
001070r 2               ;
001070r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
001070r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
001070r 2               ; ----------------------------------------------------------------------------
001070r 2               PUTNEW:
001070r 2  A6 85                ldx     TEMPPT
001072r 2  E0 91                cpx     #TEMPST+9
001074r 2  D0 05                bne     PUTEMP
001076r 2  A2 BF                ldx     #ERR_FRMCPX
001078r 2               JERR:
001078r 2  4C rr rr             jmp     ERROR
00107Br 2               PUTEMP:
00107Br 2  A5 D0                lda     FAC
00107Dr 2  95 00                sta     0,x
00107Fr 2  A5 D1                lda     FAC+1
001081r 2  95 01                sta     1,x
001083r 2  A5 D2                lda     FAC+2
001085r 2  95 02                sta     2,x
001087r 2  A0 00                ldy     #$00
001089r 2  86 D3                stx     FAC_LAST-1
00108Br 2  84 D4                sty     FAC_LAST
00108Dr 2               .ifdef CONFIG_2
00108Dr 2  84 DF                sty     FACEXTENSION
00108Fr 2               .endif
00108Fr 2  88                   dey
001090r 2  84 28                sty     VALTYP
001092r 2  86 86                stx     LASTPT
001094r 2  E8                   inx
001095r 2  E8                   inx
001096r 2  E8                   inx
001097r 2  86 85                stx     TEMPPT
001099r 2  60                   rts
00109Ar 2               
00109Ar 2               ; ----------------------------------------------------------------------------
00109Ar 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00109Ar 2               ; (A)=# BYTES SPACE TO MAKE
00109Ar 2               ;
00109Ar 2               ; RETURN WITH (A) SAME,
00109Ar 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00109Ar 2               ; ----------------------------------------------------------------------------
00109Ar 2               GETSPA:
00109Ar 2  46 2A                lsr     DATAFLG
00109Cr 2               L32F1:
00109Cr 2  48                   pha
00109Dr 2  49 FF                eor     #$FF
00109Fr 2  38                   sec
0010A0r 2  65 A2                adc     FRETOP
0010A2r 2  A4 A3                ldy     FRETOP+1
0010A4r 2  B0 01                bcs     L32FC
0010A6r 2  88                   dey
0010A7r 2               L32FC:
0010A7r 2  C4 A1                cpy     STREND+1
0010A9r 2  90 11                bcc     L3311
0010ABr 2  D0 04                bne     L3306
0010ADr 2  C5 A0                cmp     STREND
0010AFr 2  90 0B                bcc     L3311
0010B1r 2               L3306:
0010B1r 2  85 A2                sta     FRETOP
0010B3r 2  84 A3                sty     FRETOP+1
0010B5r 2  85 A4                sta     FRESPC
0010B7r 2  84 A5                sty     FRESPC+1
0010B9r 2  AA                   tax
0010BAr 2  68                   pla
0010BBr 2  60                   rts
0010BCr 2               L3311:
0010BCr 2  A2 4D                ldx     #ERR_MEMFULL
0010BEr 2  A5 2A                lda     DATAFLG
0010C0r 2  30 B6                bmi     JERR
0010C2r 2  20 rr rr             jsr     GARBAG
0010C5r 2  A9 80                lda     #$80
0010C7r 2  85 2A                sta     DATAFLG
0010C9r 2  68                   pla
0010CAr 2  D0 D0                bne     L32F1
0010CCr 2               
0010CCr 2               ; ----------------------------------------------------------------------------
0010CCr 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
0010CCr 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
0010CCr 2               ; BELOW STRING AREA DOWN TO STREND.
0010CCr 2               ; ----------------------------------------------------------------------------
0010CCr 2               GARBAG:
0010CCr 2               
0010CCr 2               .ifdef CONST_MEMSIZ
0010CCr 2                       ldx     #<CONST_MEMSIZ
0010CCr 2                       lda     #>CONST_MEMSIZ
0010CCr 2               .else
0010CCr 2  A6 A6                ldx     MEMSIZ
0010CEr 2  A5 A7                lda     MEMSIZ+1
0010D0r 2               .endif
0010D0r 2               FINDHIGHESTSTRING:
0010D0r 2  86 A2                stx     FRETOP
0010D2r 2  85 A3                sta     FRETOP+1
0010D4r 2  A0 00                ldy     #$00
0010D6r 2  84 BE                sty     FNCNAM+1
0010D8r 2               .ifdef CONFIG_2
0010D8r 2  84 BD                sty     FNCNAM	; GC bugfix!
0010DAr 2               .endif
0010DAr 2  A5 A0                lda     STREND
0010DCr 2  A6 A1                ldx     STREND+1
0010DEr 2  85 CE                sta     LOWTR
0010E0r 2  86 CF                stx     LOWTR+1
0010E2r 2  A9 88                lda     #TEMPST
0010E4r 2  A2 00                ldx     #$00
0010E6r 2  85 91                sta     INDEX
0010E8r 2  86 92                stx     INDEX+1
0010EAr 2               L333D:
0010EAr 2  C5 85                cmp     TEMPPT
0010ECr 2  F0 05                beq     L3346
0010EEr 2  20 rr rr             jsr     CHECK_VARIABLE
0010F1r 2  F0 F7                beq     L333D
0010F3r 2               L3346:
0010F3r 2  A9 07                lda     #BYTES_PER_VARIABLE
0010F5r 2  85 C2                sta     DSCLEN
0010F7r 2  A5 9C                lda     VARTAB
0010F9r 2  A6 9D                ldx     VARTAB+1
0010FBr 2  85 91                sta     INDEX
0010FDr 2  86 92                stx     INDEX+1
0010FFr 2               L3352:
0010FFr 2  E4 9F                cpx     ARYTAB+1
001101r 2  D0 04                bne     L335A
001103r 2  C5 9E                cmp     ARYTAB
001105r 2  F0 05                beq     L335F
001107r 2               L335A:
001107r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
00110Ar 2  F0 F3                beq     L3352
00110Cr 2               L335F:
00110Cr 2  85 C7                sta     HIGHDS
00110Er 2  86 C8                stx     HIGHDS+1
001110r 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
001112r 2  85 C2                sta     DSCLEN
001114r 2               L3367:
001114r 2  A5 C7                lda     HIGHDS
001116r 2  A6 C8                ldx     HIGHDS+1
001118r 2               L336B:
001118r 2  E4 A1                cpx     STREND+1
00111Ar 2  D0 07                bne     L3376
00111Cr 2  C5 A0                cmp     STREND
00111Er 2  D0 03                bne     L3376
001120r 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
001123r 2               L3376:
001123r 2  85 91                sta     INDEX
001125r 2  86 92                stx     INDEX+1
001127r 2               .ifdef CONFIG_SMALL
001127r 2                       ldy     #$01
001127r 2               .else
001127r 2  A0 00                ldy     #$00
001129r 2  B1 91                lda     (INDEX),y
00112Br 2  AA                   tax
00112Cr 2  C8                   iny
00112Dr 2               .endif
00112Dr 2  B1 91                lda     (INDEX),y
00112Fr 2  08                   php
001130r 2  C8                   iny
001131r 2  B1 91                lda     (INDEX),y
001133r 2  65 C7                adc     HIGHDS
001135r 2  85 C7                sta     HIGHDS
001137r 2  C8                   iny
001138r 2  B1 91                lda     (INDEX),y
00113Ar 2  65 C8                adc     HIGHDS+1
00113Cr 2  85 C8                sta     HIGHDS+1
00113Er 2  28                   plp
00113Fr 2  10 D3                bpl     L3367
001141r 2               .ifndef CONFIG_SMALL
001141r 2  8A                   txa
001142r 2  30 D0                bmi     L3367
001144r 2               .endif
001144r 2  C8                   iny
001145r 2  B1 91                lda     (INDEX),y
001147r 2               .ifdef CONFIG_CBM1_PATCHES
001147r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
001147r 2               .else
001147r 2                 .ifdef CONFIG_11
001147r 2  A0 00                ldy     #$00	; GC bugfix
001149r 2                 .endif
001149r 2  0A                   asl     a
00114Ar 2  69 05                adc     #$05
00114Cr 2               .endif
00114Cr 2  65 91                adc     INDEX
00114Er 2  85 91                sta     INDEX
001150r 2  90 02                bcc     L33A7
001152r 2  E6 92                inc     INDEX+1
001154r 2               L33A7:
001154r 2  A6 92                ldx     INDEX+1
001156r 2               L33A9:
001156r 2  E4 C8                cpx     HIGHDS+1
001158r 2  D0 04                bne     L33B1
00115Ar 2  C5 C7                cmp     HIGHDS
00115Cr 2  F0 BA                beq     L336B
00115Er 2               L33B1:
00115Er 2  20 rr rr             jsr     CHECK_VARIABLE
001161r 2  F0 F3                beq     L33A9
001163r 2               
001163r 2               ; ----------------------------------------------------------------------------
001163r 2               ; PROCESS A SIMPLE VARIABLE
001163r 2               ; ----------------------------------------------------------------------------
001163r 2               CHECK_SIMPLE_VARIABLE:
001163r 2               .ifndef CONFIG_SMALL
001163r 2  B1 91                lda     (INDEX),y
001165r 2  30 35                bmi     CHECK_BUMP
001167r 2               .endif
001167r 2  C8                   iny
001168r 2  B1 91                lda     (INDEX),y
00116Ar 2  10 30                bpl     CHECK_BUMP
00116Cr 2  C8                   iny
00116Dr 2               
00116Dr 2               ; ----------------------------------------------------------------------------
00116Dr 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00116Dr 2               ; ----------------------------------------------------------------------------
00116Dr 2               CHECK_VARIABLE:
00116Dr 2  B1 91                lda     (INDEX),y
00116Fr 2  F0 2B                beq     CHECK_BUMP
001171r 2  C8                   iny
001172r 2  B1 91                lda     (INDEX),y
001174r 2  AA                   tax
001175r 2  C8                   iny
001176r 2  B1 91                lda     (INDEX),y
001178r 2  C5 A3                cmp     FRETOP+1
00117Ar 2  90 06                bcc     L33D5
00117Cr 2  D0 1E                bne     CHECK_BUMP
00117Er 2  E4 A2                cpx     FRETOP
001180r 2  B0 1A                bcs     CHECK_BUMP
001182r 2               L33D5:
001182r 2  C5 CF                cmp     LOWTR+1
001184r 2  90 16                bcc     CHECK_BUMP
001186r 2  D0 04                bne     L33DF
001188r 2  E4 CE                cpx     LOWTR
00118Ar 2  90 10                bcc     CHECK_BUMP
00118Cr 2               L33DF:
00118Cr 2  86 CE                stx     LOWTR
00118Er 2  85 CF                sta     LOWTR+1
001190r 2  A5 91                lda     INDEX
001192r 2  A6 92                ldx     INDEX+1
001194r 2  85 BD                sta     FNCNAM
001196r 2  86 BE                stx     FNCNAM+1
001198r 2  A5 C2                lda     DSCLEN
00119Ar 2  85 C4                sta     Z52
00119Cr 2               
00119Cr 2               ; ----------------------------------------------------------------------------
00119Cr 2               ; ADD (DSCLEN) TO PNTR IN INDEX
00119Cr 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00119Cr 2               ; ----------------------------------------------------------------------------
00119Cr 2               CHECK_BUMP:
00119Cr 2  A5 C2                lda     DSCLEN
00119Er 2  18                   clc
00119Fr 2  65 91                adc     INDEX
0011A1r 2  85 91                sta     INDEX
0011A3r 2  90 02                bcc     L33FA
0011A5r 2  E6 92                inc     INDEX+1
0011A7r 2               L33FA:
0011A7r 2  A6 92                ldx     INDEX+1
0011A9r 2  A0 00                ldy     #$00
0011ABr 2  60                   rts
0011ACr 2               
0011ACr 2               ; ----------------------------------------------------------------------------
0011ACr 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
0011ACr 2               ; TO TOP AND GO BACK FOR ANOTHER
0011ACr 2               ; ----------------------------------------------------------------------------
0011ACr 2               MOVE_HIGHEST_STRING_TO_TOP:
0011ACr 2               .ifdef CONFIG_2
0011ACr 2  A5 BE                lda     FNCNAM+1	; GC bugfix
0011AEr 2  05 BD                ora     FNCNAM
0011B0r 2               .else
0011B0r 2                       ldx     FNCNAM+1
0011B0r 2               .endif
0011B0r 2  F0 F5                beq     L33FA
0011B2r 2  A5 C4                lda     Z52
0011B4r 2               .ifndef CONFIG_10A
0011B4r 2                       sbc     #$03
0011B4r 2               .else
0011B4r 2  29 04                and     #$04
0011B6r 2               .endif
0011B6r 2  4A                   lsr     a
0011B7r 2  A8                   tay
0011B8r 2  85 C4                sta     Z52
0011BAr 2  B1 BD                lda     (FNCNAM),y
0011BCr 2  65 CE                adc     LOWTR
0011BEr 2  85 C9                sta     HIGHTR
0011C0r 2  A5 CF                lda     LOWTR+1
0011C2r 2  69 00                adc     #$00
0011C4r 2  85 CA                sta     HIGHTR+1
0011C6r 2  A5 A2                lda     FRETOP
0011C8r 2  A6 A3                ldx     FRETOP+1
0011CAr 2  85 C7                sta     HIGHDS
0011CCr 2  86 C8                stx     HIGHDS+1
0011CEr 2  20 rr rr             jsr     BLTU2
0011D1r 2  A4 C4                ldy     Z52
0011D3r 2  C8                   iny
0011D4r 2  A5 C7                lda     HIGHDS
0011D6r 2  91 BD                sta     (FNCNAM),y
0011D8r 2  AA                   tax
0011D9r 2  E6 C8                inc     HIGHDS+1
0011DBr 2  A5 C8                lda     HIGHDS+1
0011DDr 2  C8                   iny
0011DEr 2  91 BD                sta     (FNCNAM),y
0011E0r 2  4C rr rr             jmp     FINDHIGHESTSTRING
0011E3r 2               
0011E3r 2               ; ----------------------------------------------------------------------------
0011E3r 2               ; CONCATENATE TWO STRINGS
0011E3r 2               ; ----------------------------------------------------------------------------
0011E3r 2               CAT:
0011E3r 2  A5 D4                lda     FAC_LAST
0011E5r 2  48                   pha
0011E6r 2  A5 D3                lda     FAC_LAST-1
0011E8r 2  48                   pha
0011E9r 2  20 rr rr             jsr     FRM_ELEMENT
0011ECr 2  20 rr rr             jsr     CHKSTR
0011EFr 2  68                   pla
0011F0r 2  85 DE                sta     STRNG1
0011F2r 2  68                   pla
0011F3r 2  85 DF                sta     STRNG1+1
0011F5r 2  A0 00                ldy     #$00
0011F7r 2  B1 DE                lda     (STRNG1),y
0011F9r 2  18                   clc
0011FAr 2  71 D3                adc     (FAC_LAST-1),y
0011FCr 2  90 05                bcc     L3454
0011FEr 2  A2 B0                ldx     #ERR_STRLONG
001200r 2  4C rr rr             jmp     ERROR
001203r 2               L3454:
001203r 2  20 rr rr             jsr     STRINI
001206r 2  20 rr rr             jsr     MOVINS
001209r 2  A5 BF                lda     DSCPTR
00120Br 2  A4 C0                ldy     DSCPTR+1
00120Dr 2  20 rr rr             jsr     FRETMP
001210r 2  20 rr rr             jsr     MOVSTR1
001213r 2  A5 DE                lda     STRNG1
001215r 2  A4 DF                ldy     STRNG1+1
001217r 2  20 rr rr             jsr     FRETMP
00121Ar 2  20 rr rr             jsr     PUTNEW
00121Dr 2  4C rr rr             jmp     FRMEVL2
001220r 2               
001220r 2               ; ----------------------------------------------------------------------------
001220r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
001220r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
001220r 2               ; ----------------------------------------------------------------------------
001220r 2               MOVINS:
001220r 2  A0 00                ldy     #$00
001222r 2  B1 DE                lda     (STRNG1),y
001224r 2  48                   pha
001225r 2  C8                   iny
001226r 2  B1 DE                lda     (STRNG1),y
001228r 2  AA                   tax
001229r 2  C8                   iny
00122Ar 2  B1 DE                lda     (STRNG1),y
00122Cr 2  A8                   tay
00122Dr 2  68                   pla
00122Er 2               
00122Er 2               ; ----------------------------------------------------------------------------
00122Er 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00122Er 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00122Er 2               ; ----------------------------------------------------------------------------
00122Er 2               MOVSTR:
00122Er 2  86 91                stx     INDEX
001230r 2  84 92                sty     INDEX+1
001232r 2               MOVSTR1:
001232r 2  A8                   tay
001233r 2  F0 0A                beq     L3490
001235r 2  48                   pha
001236r 2               L3487:
001236r 2  88                   dey
001237r 2  B1 91                lda     (INDEX),y
001239r 2  91 A4                sta     (FRESPC),y
00123Br 2  98                   tya
00123Cr 2  D0 F8                bne     L3487
00123Er 2  68                   pla
00123Fr 2               L3490:
00123Fr 2  18                   clc
001240r 2  65 A4                adc     FRESPC
001242r 2  85 A4                sta     FRESPC
001244r 2  90 02                bcc     L3499
001246r 2  E6 A5                inc     FRESPC+1
001248r 2               L3499:
001248r 2  60                   rts
001249r 2               
001249r 2               ; ----------------------------------------------------------------------------
001249r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
001249r 2               ; ----------------------------------------------------------------------------
001249r 2               FRESTR:
001249r 2  20 rr rr             jsr     CHKSTR
00124Cr 2               
00124Cr 2               ; ----------------------------------------------------------------------------
00124Cr 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00124Cr 2               ; A TEMPORARY STRING, RELEASE IT.
00124Cr 2               ; ----------------------------------------------------------------------------
00124Cr 2               FREFAC:
00124Cr 2  A5 D3                lda     FAC_LAST-1
00124Er 2  A4 D4                ldy     FAC_LAST
001250r 2               
001250r 2               ; ----------------------------------------------------------------------------
001250r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
001250r 2               ; A TEMPORARY STRING, RELEASE IT.
001250r 2               ; ----------------------------------------------------------------------------
001250r 2               FRETMP:
001250r 2  85 91                sta     INDEX
001252r 2  84 92                sty     INDEX+1
001254r 2  20 rr rr             jsr     FRETMS
001257r 2  08                   php
001258r 2  A0 00                ldy     #$00
00125Ar 2  B1 91                lda     (INDEX),y
00125Cr 2  48                   pha
00125Dr 2  C8                   iny
00125Er 2  B1 91                lda     (INDEX),y
001260r 2  AA                   tax
001261r 2  C8                   iny
001262r 2  B1 91                lda     (INDEX),y
001264r 2  A8                   tay
001265r 2  68                   pla
001266r 2  28                   plp
001267r 2  D0 13                bne     L34CD
001269r 2  C4 A3                cpy     FRETOP+1
00126Br 2  D0 0F                bne     L34CD
00126Dr 2  E4 A2                cpx     FRETOP
00126Fr 2  D0 0B                bne     L34CD
001271r 2  48                   pha
001272r 2  18                   clc
001273r 2  65 A2                adc     FRETOP
001275r 2  85 A2                sta     FRETOP
001277r 2  90 02                bcc     L34CC
001279r 2  E6 A3                inc     FRETOP+1
00127Br 2               L34CC:
00127Br 2  68                   pla
00127Cr 2               L34CD:
00127Cr 2  86 91                stx     INDEX
00127Er 2  84 92                sty     INDEX+1
001280r 2  60                   rts
001281r 2               
001281r 2               ; ----------------------------------------------------------------------------
001281r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001281r 2               ; ----------------------------------------------------------------------------
001281r 2               FRETMS:
001281r 2               .ifdef KBD
001281r 2                       cpy     #$00
001281r 2               .else
001281r 2  C4 87                cpy     LASTPT+1
001283r 2               .endif
001283r 2  D0 0C                bne     L34E2
001285r 2  C5 86                cmp     LASTPT
001287r 2  D0 08                bne     L34E2
001289r 2  85 85                sta     TEMPPT
00128Br 2  E9 03                sbc     #$03
00128Dr 2  85 86                sta     LASTPT
00128Fr 2  A0 00                ldy     #$00
001291r 2               L34E2:
001291r 2  60                   rts
001292r 2               
001292r 2               ; ----------------------------------------------------------------------------
001292r 2               ; "CHR$" FUNCTION
001292r 2               ; ----------------------------------------------------------------------------
001292r 2               CHRSTR:
001292r 2  20 rr rr             jsr     CONINT
001295r 2  8A                   txa
001296r 2  48                   pha
001297r 2  A9 01                lda     #$01
001299r 2  20 rr rr             jsr     STRSPA
00129Cr 2  68                   pla
00129Dr 2  A0 00                ldy     #$00
00129Fr 2  91 D1                sta     (FAC+1),y
0012A1r 2  68                   pla
0012A2r 2  68                   pla
0012A3r 2  4C rr rr             jmp     PUTNEW
0012A6r 2               
0012A6r 2               ; ----------------------------------------------------------------------------
0012A6r 2               ; "LEFT$" FUNCTION
0012A6r 2               ; ----------------------------------------------------------------------------
0012A6r 2               LEFTSTR:
0012A6r 2  20 rr rr             jsr     SUBSTRING_SETUP
0012A9r 2  D1 BF                cmp     (DSCPTR),y
0012ABr 2  98                   tya
0012ACr 2               SUBSTRING1:
0012ACr 2  90 04                bcc     L3503
0012AEr 2  B1 BF                lda     (DSCPTR),y
0012B0r 2  AA                   tax
0012B1r 2  98                   tya
0012B2r 2               L3503:
0012B2r 2  48                   pha
0012B3r 2               SUBSTRING2:
0012B3r 2  8A                   txa
0012B4r 2               SUBSTRING3:
0012B4r 2  48                   pha
0012B5r 2  20 rr rr             jsr     STRSPA
0012B8r 2  A5 BF                lda     DSCPTR
0012BAr 2  A4 C0                ldy     DSCPTR+1
0012BCr 2  20 rr rr             jsr     FRETMP
0012BFr 2  68                   pla
0012C0r 2  A8                   tay
0012C1r 2  68                   pla
0012C2r 2  18                   clc
0012C3r 2  65 91                adc     INDEX
0012C5r 2  85 91                sta     INDEX
0012C7r 2  90 02                bcc     L351C
0012C9r 2  E6 92                inc     INDEX+1
0012CBr 2               L351C:
0012CBr 2  98                   tya
0012CCr 2  20 rr rr             jsr     MOVSTR1
0012CFr 2  4C rr rr             jmp     PUTNEW
0012D2r 2               
0012D2r 2               ; ----------------------------------------------------------------------------
0012D2r 2               ; "RIGHT$" FUNCTION
0012D2r 2               ; ----------------------------------------------------------------------------
0012D2r 2               RIGHTSTR:
0012D2r 2  20 rr rr             jsr     SUBSTRING_SETUP
0012D5r 2  18                   clc
0012D6r 2  F1 BF                sbc     (DSCPTR),y
0012D8r 2  49 FF                eor     #$FF
0012DAr 2  4C rr rr             jmp     SUBSTRING1
0012DDr 2               
0012DDr 2               ; ----------------------------------------------------------------------------
0012DDr 2               ; "MID$" FUNCTION
0012DDr 2               ; ----------------------------------------------------------------------------
0012DDr 2               MIDSTR:
0012DDr 2  A9 FF                lda     #$FF
0012DFr 2  85 D4                sta     FAC_LAST
0012E1r 2  20 E8 00             jsr     CHRGOT
0012E4r 2  C9 29                cmp     #$29
0012E6r 2  F0 06                beq     L353F
0012E8r 2  20 rr rr             jsr     CHKCOM
0012EBr 2  20 rr rr             jsr     GETBYT
0012EEr 2               L353F:
0012EEr 2  20 rr rr             jsr     SUBSTRING_SETUP
0012F1r 2               .ifdef CONFIG_2
0012F1r 2  F0 4B                beq     GOIQ
0012F3r 2               .endif
0012F3r 2  CA                   dex
0012F4r 2  8A                   txa
0012F5r 2  48                   pha
0012F6r 2  18                   clc
0012F7r 2  A2 00                ldx     #$00
0012F9r 2  F1 BF                sbc     (DSCPTR),y
0012FBr 2  B0 B6                bcs     SUBSTRING2
0012FDr 2  49 FF                eor     #$FF
0012FFr 2  C5 D4                cmp     FAC_LAST
001301r 2  90 B1                bcc     SUBSTRING3
001303r 2  A5 D4                lda     FAC_LAST
001305r 2  B0 AD                bcs     SUBSTRING3
001307r 2               
001307r 2               ; ----------------------------------------------------------------------------
001307r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
001307r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
001307r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
001307r 2               ; ----------------------------------------------------------------------------
001307r 2               SUBSTRING_SETUP:
001307r 2  20 rr rr             jsr     CHKCLS
00130Ar 2  68                   pla
00130Br 2               .ifndef CONFIG_11
00130Br 2                       sta     JMPADRS+1
00130Br 2                       pla
00130Br 2                       sta     JMPADRS+2
00130Br 2               .else
00130Br 2  A8                   tay
00130Cr 2  68                   pla
00130Dr 2  85 C4                sta     Z52
00130Fr 2               .endif
00130Fr 2  68                   pla
001310r 2  68                   pla
001311r 2  68                   pla
001312r 2  AA                   tax
001313r 2  68                   pla
001314r 2  85 BF                sta     DSCPTR
001316r 2  68                   pla
001317r 2  85 C0                sta     DSCPTR+1
001319r 2               .ifdef CONFIG_11
001319r 2  A5 C4                lda     Z52
00131Br 2  48                   pha
00131Cr 2  98                   tya
00131Dr 2  48                   pha
00131Er 2               .endif
00131Er 2  A0 00                ldy     #$00
001320r 2  8A                   txa
001321r 2               .ifndef CONFIG_2
001321r 2                       beq     GOIQ
001321r 2               .endif
001321r 2               .ifndef CONFIG_11
001321r 2                       inc     JMPADRS+1
001321r 2                       jmp     (JMPADRS+1)
001321r 2               .else
001321r 2  60                   rts
001322r 2               .endif
001322r 2               
001322r 2               ; ----------------------------------------------------------------------------
001322r 2               ; "LEN" FUNCTION
001322r 2               ; ----------------------------------------------------------------------------
001322r 2               LEN:
001322r 2  20 rr rr             jsr     GETSTR
001325r 2               SNGFLT1:
001325r 2  4C rr rr             jmp     SNGFLT
001328r 2               
001328r 2               ; ----------------------------------------------------------------------------
001328r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
001328r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
001328r 2               ; ----------------------------------------------------------------------------
001328r 2               GETSTR:
001328r 2  20 rr rr             jsr     FRESTR
00132Br 2  A2 00                ldx     #$00
00132Dr 2  86 28                stx     VALTYP
00132Fr 2  A8                   tay
001330r 2  60                   rts
001331r 2               
001331r 2               ; ----------------------------------------------------------------------------
001331r 2               ; "ASC" FUNCTION
001331r 2               ; ----------------------------------------------------------------------------
001331r 2               ASC:
001331r 2  20 rr rr             jsr     GETSTR
001334r 2  F0 08                beq     GOIQ
001336r 2  A0 00                ldy     #$00
001338r 2  B1 91                lda     (INDEX),y
00133Ar 2  A8                   tay
00133Br 2               .ifndef CONFIG_11A
00133Br 2                       jmp     SNGFLT1
00133Br 2               .else
00133Br 2  4C rr rr             jmp     SNGFLT
00133Er 2               .endif
00133Er 2               ; ----------------------------------------------------------------------------
00133Er 2               GOIQ:
00133Er 2  4C rr rr             jmp     IQERR
001341r 2               
001341r 2               ; ----------------------------------------------------------------------------
001341r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
001341r 2               ; TO SINGLE BYTE IN X-REG
001341r 2               ; ----------------------------------------------------------------------------
001341r 2               GTBYTC:
001341r 2  20 E2 00             jsr     CHRGET
001344r 2               
001344r 2               ; ----------------------------------------------------------------------------
001344r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
001344r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
001344r 2               ; ----------------------------------------------------------------------------
001344r 2               GETBYT:
001344r 2  20 rr rr             jsr     FRMNUM
001347r 2               
001347r 2               ; ----------------------------------------------------------------------------
001347r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
001347r 2               ; ----------------------------------------------------------------------------
001347r 2               CONINT:
001347r 2  20 rr rr             jsr     MKINT
00134Ar 2  A6 D3                ldx     FAC_LAST-1
00134Cr 2  D0 F0                bne     GOIQ
00134Er 2  A6 D4                ldx     FAC_LAST
001350r 2  4C E8 00             jmp     CHRGOT
001353r 2               
001353r 2               ; ----------------------------------------------------------------------------
001353r 2               ; "VAL" FUNCTION
001353r 2               ; ----------------------------------------------------------------------------
001353r 2               VAL:
001353r 2  20 rr rr             jsr     GETSTR
001356r 2  D0 03                bne     L35AC
001358r 2  4C rr rr             jmp     ZERO_FAC
00135Br 2               L35AC:
00135Br 2  A6 E9                ldx     TXTPTR
00135Dr 2  A4 EA                ldy     TXTPTR+1
00135Fr 2  86 E0                stx     STRNG2
001361r 2  84 E1                sty     STRNG2+1
001363r 2  A6 91                ldx     INDEX
001365r 2  86 E9                stx     TXTPTR
001367r 2  18                   clc
001368r 2  65 91                adc     INDEX
00136Ar 2  85 93                sta     DEST
00136Cr 2  A6 92                ldx     INDEX+1
00136Er 2  86 EA                stx     TXTPTR+1
001370r 2  90 01                bcc     L35C4
001372r 2  E8                   inx
001373r 2               L35C4:
001373r 2  86 94                stx     DEST+1
001375r 2  A0 00                ldy     #$00
001377r 2  B1 93                lda     (DEST),y
001379r 2  48                   pha
00137Ar 2  A9 00                lda     #$00
00137Cr 2  91 93                sta     (DEST),y
00137Er 2  20 E8 00             jsr     CHRGOT
001381r 2  20 rr rr             jsr     FIN
001384r 2  68                   pla
001385r 2  A0 00                ldy     #$00
001387r 2  91 93                sta     (DEST),y
001389r 2               
001389r 2               ; ----------------------------------------------------------------------------
001389r 2               ; COPY STRNG2 INTO TXTPTR
001389r 2               ; ----------------------------------------------------------------------------
001389r 2               POINT:
001389r 2  A6 E0                ldx     STRNG2
00138Br 2  A4 E1                ldy     STRNG2+1
00138Dr 2  86 E9                stx     TXTPTR
00138Fr 2  84 EA                sty     TXTPTR+1
001391r 2  60                   rts
001392r 2               
001392r 2               
001392r 1               .include "misc3.s"
001392r 2               ; KBD specific patches
001392r 2               
001392r 2               .segment "CODE"
001392r 2               
001392r 2               .ifdef KBD
001392r 2               VARTAB_MINUS_2_TO_AY:
001392r 2                       lda     VARTAB
001392r 2                       sec
001392r 2                       sbc     #$02
001392r 2                       ldy     VARTAB+1
001392r 2                       bcs     LF42C
001392r 2                       dey
001392r 2               LF42C:
001392r 2                       rts
001392r 2               
001392r 2               ; ----------------------------------------------------------------------------
001392r 2               GET_UPPER:
001392r 2                       lda     INPUTBUFFERX,x
001392r 2               LF430:
001392r 2                       cmp     #'a'
001392r 2                       bcc     LF43A
001392r 2                       cmp     #'z'+1
001392r 2                       bcs     LF43A
001392r 2               LF438:
001392r 2                       sbc     #$1F
001392r 2               LF43A:
001392r 2                       rts
001392r 2               
001392r 2               ; ----------------------------------------------------------------------------
001392r 2               GETLN:
001392r 2                       ldx     #$5D
001392r 2               LF43D:
001392r 2                       txa
001392r 2                       and     #$7F
001392r 2                       cmp     $0340
001392r 2                       beq     LF44D
001392r 2                       sta     $0340
001392r 2                       lda     #$03
001392r 2                       jsr     LDE48
001392r 2               LF44D:
001392r 2                       jsr     LDE7F
001392r 2                       bne     RTS4
001392r 2                       cpx     #$80
001392r 2                       bcc     LF44D
001392r 2               RTS4:
001392r 2                       rts
001392r 2               
001392r 2               ; ----------------------------------------------------------------------------
001392r 2               LF457:
001392r 2                       lda     TXTTAB
001392r 2                       ldx     TXTTAB+1
001392r 2               LF45B:
001392r 2                       sta     JMPADRS+1
001392r 2                       stx     JMPADRS+2
001392r 2                       ldy     #$01
001392r 2                       lda     (JMPADRS+1),y
001392r 2                       beq     LF438
001392r 2                       iny
001392r 2                       iny
001392r 2                       lda     (JMPADRS+1),y
001392r 2                       dey
001392r 2                       cmp     LINNUM+1
001392r 2                       bne     LF472
001392r 2                       lda     (JMPADRS+1),y
001392r 2                       cmp     LINNUM
001392r 2               LF472:
001392r 2                       bcs     LF43A
001392r 2                       dey
001392r 2                       lda     (JMPADRS+1),y
001392r 2                       tax
001392r 2                       dey
001392r 2                       lda     (JMPADRS+1),y
001392r 2                       bcc     LF45B
001392r 2               LF47D:
001392r 2                       jmp     (JMPADRS+1)
001392r 2               .endif
001392r 2               
001392r 1               .include "poke.s"
001392r 2               .segment "CODE"
001392r 2               
001392r 2               .ifndef CONFIG_NO_POKE
001392r 2               ; ----------------------------------------------------------------------------
001392r 2               ; EVALUATE "EXP1,EXP2"
001392r 2               ;
001392r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
001392r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
001392r 2               ; ----------------------------------------------------------------------------
001392r 2               GTNUM:
001392r 2  20 rr rr             jsr     FRMNUM
001395r 2  20 rr rr             jsr     GETADR
001398r 2               
001398r 2               ; ----------------------------------------------------------------------------
001398r 2               ; EVALUATE ",EXPRESSION"
001398r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001398r 2               ; ----------------------------------------------------------------------------
001398r 2               COMBYTE:
001398r 2  20 rr rr             jsr     CHKCOM
00139Br 2  4C rr rr             jmp     GETBYT
00139Er 2               
00139Er 2               ; ----------------------------------------------------------------------------
00139Er 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00139Er 2               ; ----------------------------------------------------------------------------
00139Er 2               GETADR:
00139Er 2  A5 D5                lda     FACSIGN
0013A0r 2                 .ifdef APPLE
0013A0r 2                       nop ; PATCH
0013A0r 2                       nop
0013A0r 2                 .else
0013A0r 2  30 9C                bmi     GOIQ
0013A2r 2                 .endif
0013A2r 2  A5 D0                lda     FAC
0013A4r 2  C9 91                cmp     #$91
0013A6r 2  B0 96                bcs     GOIQ
0013A8r 2  20 rr rr             jsr     QINT
0013ABr 2  A5 D3                lda     FAC_LAST-1
0013ADr 2  A4 D4                ldy     FAC_LAST
0013AFr 2  84 33                sty     LINNUM
0013B1r 2  85 34                sta     LINNUM+1
0013B3r 2  60                   rts
0013B4r 2               
0013B4r 2               ; ----------------------------------------------------------------------------
0013B4r 2               ; "PEEK" FUNCTION
0013B4r 2               ; ----------------------------------------------------------------------------
0013B4r 2               PEEK:
0013B4r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0013B4r 2  A5 34                lda     LINNUM+1
0013B6r 2  48                   pha
0013B7r 2  A5 33                lda     LINNUM
0013B9r 2  48                   pha
0013BAr 2               .endif
0013BAr 2  20 rr rr             jsr     GETADR
0013BDr 2  A0 00                ldy     #$00
0013BFr 2               .ifdef CBM1
0013BFr 2               ; disallow PEEK between $C000 and $DFFF
0013BFr 2                       cmp     #$C0
0013BFr 2                       bcc     LD6F3
0013BFr 2                       cmp     #$E1
0013BFr 2                       bcc     LD6F6
0013BFr 2               LD6F3:
0013BFr 2               .endif
0013BFr 2               .ifdef CBM2
0013BFr 2               		nop ; patch that disables the compares above
0013BFr 2               		nop
0013BFr 2               		nop
0013BFr 2               		nop
0013BFr 2               		nop
0013BFr 2               		nop
0013BFr 2               		nop
0013BFr 2               		nop
0013BFr 2               .endif
0013BFr 2  B1 33                lda     (LINNUM),y
0013C1r 2  A8                   tay
0013C2r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0013C2r 2  68                   pla
0013C3r 2  85 33                sta     LINNUM
0013C5r 2  68                   pla
0013C6r 2  85 34                sta     LINNUM+1
0013C8r 2               .endif
0013C8r 2               LD6F6:
0013C8r 2  4C rr rr             jmp     SNGFLT
0013CBr 2               
0013CBr 2               ; ----------------------------------------------------------------------------
0013CBr 2               ; "POKE" STATEMENT
0013CBr 2               ; ----------------------------------------------------------------------------
0013CBr 2               POKE:
0013CBr 2  20 rr rr             jsr     GTNUM
0013CEr 2  8A                   txa
0013CFr 2  A0 00                ldy     #$00
0013D1r 2  91 33                sta     (LINNUM),y
0013D3r 2  60                   rts
0013D4r 2               
0013D4r 2               ; ----------------------------------------------------------------------------
0013D4r 2               ; "WAIT" STATEMENT
0013D4r 2               ; ----------------------------------------------------------------------------
0013D4r 2               WAIT:
0013D4r 2  20 rr rr             jsr     GTNUM
0013D7r 2  86 B8                stx     FORPNT
0013D9r 2  A2 00                ldx     #$00
0013DBr 2  20 E8 00             jsr     CHRGOT
0013DEr 2               .ifdef CONFIG_EASTER_EGG
0013DEr 2                       beq     EASTER_EGG
0013DEr 2               .else
0013DEr 2  F0 03                beq     L3628
0013E0r 2               .endif
0013E0r 2  20 rr rr             jsr     COMBYTE
0013E3r 2               L3628:
0013E3r 2  86 B9                stx     FORPNT+1
0013E5r 2  A0 00                ldy     #$00
0013E7r 2               L362C:
0013E7r 2  B1 33                lda     (LINNUM),y
0013E9r 2  45 B9                eor     FORPNT+1
0013EBr 2  25 B8                and     FORPNT
0013EDr 2  F0 F8                beq     L362C
0013EFr 2               RTS3:
0013EFr 2  60                   rts
0013F0r 2               .endif
0013F0r 2               
0013F0r 1               .include "float.s"
0013F0r 2               .segment "CODE"
0013F0r 2               
0013F0r 2               TEMP1X = TEMP1+(5-BYTES_FP)
0013F0r 2               
0013F0r 2               ; ----------------------------------------------------------------------------
0013F0r 2               ; ADD 0.5 TO FAC
0013F0r 2               ; ----------------------------------------------------------------------------
0013F0r 2               FADDH:
0013F0r 2  A9 rr                lda     #<CON_HALF
0013F2r 2  A0 rr                ldy     #>CON_HALF
0013F4r 2  4C rr rr             jmp     FADD
0013F7r 2               
0013F7r 2               ; ----------------------------------------------------------------------------
0013F7r 2               ; FAC = (Y,A) - FAC
0013F7r 2               ; ----------------------------------------------------------------------------
0013F7r 2               FSUB:
0013F7r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0013FAr 2               
0013FAr 2               ; ----------------------------------------------------------------------------
0013FAr 2               ; FAC = ARG - FAC
0013FAr 2               ; ----------------------------------------------------------------------------
0013FAr 2               FSUBT:
0013FAr 2  A5 D5                lda     FACSIGN
0013FCr 2  49 FF                eor     #$FF
0013FEr 2  85 D5                sta     FACSIGN
001400r 2  45 DD                eor     ARGSIGN
001402r 2  85 DE                sta     SGNCPR
001404r 2  A5 D0                lda     FAC
001406r 2  4C rr rr             jmp     FADDT
001409r 2               
001409r 2               ; ----------------------------------------------------------------------------
001409r 2               ; Commodore BASIC V2 Easter Egg
001409r 2               ; ----------------------------------------------------------------------------
001409r 2               .ifdef CONFIG_EASTER_EGG
001409r 2               EASTER_EGG:
001409r 2                       lda     LINNUM
001409r 2                       cmp     #<6502
001409r 2                       bne     L3628
001409r 2                       lda     LINNUM+1
001409r 2                       sbc     #>6502
001409r 2                       bne     L3628
001409r 2                       sta     LINNUM
001409r 2                       tay
001409r 2                       lda     #$80
001409r 2                       sta     LINNUM+1
001409r 2               LD758:
001409r 2                       ldx     #$0A
001409r 2               LD75A:
001409r 2                       lda     MICROSOFT-1,x
001409r 2                       and     #$3F
001409r 2                       sta     (LINNUM),y
001409r 2                       iny
001409r 2                       bne     LD766
001409r 2                       inc     LINNUM+1
001409r 2               LD766:
001409r 2                       dex
001409r 2                       bne     LD75A
001409r 2                       dec     FORPNT
001409r 2                       bne     LD758
001409r 2                       rts
001409r 2               .endif
001409r 2               
001409r 2               ; ----------------------------------------------------------------------------
001409r 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
001409r 2               ; ----------------------------------------------------------------------------
001409r 2               FADD1:
001409r 2  20 rr rr             jsr     SHIFT_RIGHT
00140Cr 2  90 3C                bcc     FADD3
00140Er 2               
00140Er 2               ; ----------------------------------------------------------------------------
00140Er 2               ; FAC = (Y,A) + FAC
00140Er 2               ; ----------------------------------------------------------------------------
00140Er 2               FADD:
00140Er 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001411r 2               
001411r 2               ; ----------------------------------------------------------------------------
001411r 2               ; FAC = ARG + FAC
001411r 2               ; ----------------------------------------------------------------------------
001411r 2               FADDT:
001411r 2  D0 03                bne     L365B
001413r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
001416r 2               L365B:
001416r 2  A6 DF                ldx     FACEXTENSION
001418r 2  86 C5                stx     ARGEXTENSION
00141Ar 2  A2 D8                ldx     #ARG
00141Cr 2  A5 D8                lda     ARG
00141Er 2               FADD2:
00141Er 2  A8                   tay
00141Fr 2               .ifdef KBD
00141Fr 2                       beq     RTS4
00141Fr 2               .else
00141Fr 2  F0 CE                beq     RTS3
001421r 2               .endif
001421r 2  38                   sec
001422r 2  E5 D0                sbc     FAC
001424r 2  F0 24                beq     FADD3
001426r 2  90 12                bcc     L367F
001428r 2  84 D0                sty     FAC
00142Ar 2  A4 DD                ldy     ARGSIGN
00142Cr 2  84 D5                sty     FACSIGN
00142Er 2  49 FF                eor     #$FF
001430r 2  69 00                adc     #$00
001432r 2  A0 00                ldy     #$00
001434r 2  84 C5                sty     ARGEXTENSION
001436r 2  A2 D0                ldx     #FAC
001438r 2  D0 04                bne     L3683
00143Ar 2               L367F:
00143Ar 2  A0 00                ldy     #$00
00143Cr 2  84 DF                sty     FACEXTENSION
00143Er 2               L3683:
00143Er 2  C9 F9                cmp     #$F9
001440r 2  30 C7                bmi     FADD1
001442r 2  A8                   tay
001443r 2  A5 DF                lda     FACEXTENSION
001445r 2  56 01                lsr     1,x
001447r 2  20 rr rr             jsr     SHIFT_RIGHT4
00144Ar 2               FADD3:
00144Ar 2  24 DE                bit     SGNCPR
00144Cr 2  10 57                bpl     FADD4
00144Er 2  A0 D0                ldy     #FAC
001450r 2  E0 D8                cpx     #ARG
001452r 2  F0 02                beq     L369B
001454r 2  A0 D8                ldy     #ARG
001456r 2               L369B:
001456r 2  38                   sec
001457r 2  49 FF                eor     #$FF
001459r 2  65 C5                adc     ARGEXTENSION
00145Br 2  85 DF                sta     FACEXTENSION
00145Dr 2               .ifndef CONFIG_SMALL
00145Dr 2  B9 04 00             lda     4,y
001460r 2  F5 04                sbc     4,x
001462r 2  85 D4                sta     FAC+4
001464r 2               .endif
001464r 2  B9 03 00             lda     3,y
001467r 2  F5 03                sbc     3,x
001469r 2  85 D3                sta     FAC+3
00146Br 2  B9 02 00             lda     2,y
00146Er 2  F5 02                sbc     2,x
001470r 2  85 D2                sta     FAC+2
001472r 2  B9 01 00             lda     1,y
001475r 2  F5 01                sbc     1,x
001477r 2  85 D1                sta     FAC+1
001479r 2               
001479r 2               ; ----------------------------------------------------------------------------
001479r 2               ; NORMALIZE VALUE IN FAC
001479r 2               ; ----------------------------------------------------------------------------
001479r 2               NORMALIZE_FAC1:
001479r 2  B0 03                bcs     NORMALIZE_FAC2
00147Br 2  20 rr rr             jsr     COMPLEMENT_FAC
00147Er 2               NORMALIZE_FAC2:
00147Er 2  A0 00                ldy     #$00
001480r 2  98                   tya
001481r 2  18                   clc
001482r 2               L36C7:
001482r 2  A6 D1                ldx     FAC+1
001484r 2  D0 4A                bne     NORMALIZE_FAC4
001486r 2  A6 D2                ldx     FAC+2
001488r 2  86 D1                stx     FAC+1
00148Ar 2  A6 D3                ldx     FAC+3
00148Cr 2  86 D2                stx     FAC+2
00148Er 2               .ifdef CONFIG_SMALL
00148Er 2                       ldx     FACEXTENSION
00148Er 2                       stx     FAC+3
00148Er 2               .else
00148Er 2  A6 D4                ldx     FAC+4
001490r 2  86 D3                stx     FAC+3
001492r 2  A6 DF                ldx     FACEXTENSION
001494r 2  86 D4                stx     FAC+4
001496r 2               .endif
001496r 2  84 DF                sty     FACEXTENSION
001498r 2  69 08                adc     #$08
00149Ar 2               .ifdef CONFIG_2B
00149Ar 2               ; bugfix?
00149Ar 2               ; fix does not exist on AppleSoft 2
00149Ar 2  C9 28                cmp     #(MANTISSA_BYTES+1)*8
00149Cr 2               .else
00149Cr 2                       cmp     #MANTISSA_BYTES*8
00149Cr 2               .endif
00149Cr 2  D0 E4                bne     L36C7
00149Er 2               
00149Er 2               ; ----------------------------------------------------------------------------
00149Er 2               ; SET FAC = 0
00149Er 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00149Er 2               ; ----------------------------------------------------------------------------
00149Er 2               ZERO_FAC:
00149Er 2  A9 00                lda     #$00
0014A0r 2               STA_IN_FAC_SIGN_AND_EXP:
0014A0r 2  85 D0                sta     FAC
0014A2r 2               STA_IN_FAC_SIGN:
0014A2r 2  85 D5                sta     FACSIGN
0014A4r 2  60                   rts
0014A5r 2               
0014A5r 2               ; ----------------------------------------------------------------------------
0014A5r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
0014A5r 2               ; ----------------------------------------------------------------------------
0014A5r 2               FADD4:
0014A5r 2  65 C5                adc     ARGEXTENSION
0014A7r 2  85 DF                sta     FACEXTENSION
0014A9r 2               .ifndef CONFIG_SMALL
0014A9r 2  A5 D4                lda     FAC+4
0014ABr 2  65 DC                adc     ARG+4
0014ADr 2  85 D4                sta     FAC+4
0014AFr 2               .endif
0014AFr 2  A5 D3                lda     FAC+3
0014B1r 2  65 DB                adc     ARG+3
0014B3r 2  85 D3                sta     FAC+3
0014B5r 2  A5 D2                lda     FAC+2
0014B7r 2  65 DA                adc     ARG+2
0014B9r 2  85 D2                sta     FAC+2
0014BBr 2  A5 D1                lda     FAC+1
0014BDr 2  65 D9                adc     ARG+1
0014BFr 2  85 D1                sta     FAC+1
0014C1r 2  4C rr rr             jmp     NORMALIZE_FAC5
0014C4r 2               
0014C4r 2               ; ----------------------------------------------------------------------------
0014C4r 2               ; FINISH NORMALIZING FAC
0014C4r 2               ; ----------------------------------------------------------------------------
0014C4r 2               NORMALIZE_FAC3:
0014C4r 2  69 01                adc     #$01
0014C6r 2  06 DF                asl     FACEXTENSION
0014C8r 2               .ifndef CONFIG_SMALL
0014C8r 2  26 D4                rol     FAC+4
0014CAr 2               .endif
0014CAr 2  26 D3                rol     FAC+3
0014CCr 2  26 D2                rol     FAC+2
0014CEr 2  26 D1                rol     FAC+1
0014D0r 2               NORMALIZE_FAC4:
0014D0r 2  10 F2                bpl     NORMALIZE_FAC3
0014D2r 2  38                   sec
0014D3r 2  E5 D0                sbc     FAC
0014D5r 2  B0 C7                bcs     ZERO_FAC
0014D7r 2  49 FF                eor     #$FF
0014D9r 2  69 01                adc     #$01
0014DBr 2  85 D0                sta     FAC
0014DDr 2               NORMALIZE_FAC5:
0014DDr 2  90 40                bcc     L3764
0014DFr 2               NORMALIZE_FAC6:
0014DFr 2  E6 D0                inc     FAC
0014E1r 2  F0 74                beq     OVERFLOW
0014E3r 2               .ifndef CONFIG_ROR_WORKAROUND
0014E3r 2                       ror     FAC+1
0014E3r 2                       ror     FAC+2
0014E3r 2                       ror     FAC+3
0014E3r 2                 .ifndef CONFIG_SMALL
0014E3r 2                       ror     FAC+4
0014E3r 2                 .endif
0014E3r 2                       ror     FACEXTENSION
0014E3r 2               .else
0014E3r 2  A9 00                lda     #$00
0014E5r 2  90 02                bcc     L372E
0014E7r 2  A9 80                lda     #$80
0014E9r 2               L372E:
0014E9r 2  46 D1                lsr     FAC+1
0014EBr 2  05 D1                ora     FAC+1
0014EDr 2  85 D1                sta     FAC+1
0014EFr 2  A9 00                lda     #$00
0014F1r 2  90 02                bcc     L373A
0014F3r 2  A9 80                lda     #$80
0014F5r 2               L373A:
0014F5r 2  46 D2                lsr     FAC+2
0014F7r 2  05 D2                ora     FAC+2
0014F9r 2  85 D2                sta     FAC+2
0014FBr 2  A9 00                lda     #$00
0014FDr 2  90 02                bcc     L3746
0014FFr 2  A9 80                lda     #$80
001501r 2               L3746:
001501r 2  46 D3                lsr     FAC+3
001503r 2  05 D3                ora     FAC+3
001505r 2  85 D3                sta     FAC+3
001507r 2  A9 00                lda     #$00
001509r 2  90 02                bcc     L3752
00150Br 2  A9 80                lda     #$80
00150Dr 2               L3752:
00150Dr 2  46 D4                lsr     FAC+4
00150Fr 2  05 D4                ora     FAC+4
001511r 2  85 D4                sta     FAC+4
001513r 2  A9 00                lda     #$00
001515r 2  90 02                bcc     L375E
001517r 2  A9 80                lda     #$80
001519r 2               L375E:
001519r 2  46 DF                lsr     FACEXTENSION
00151Br 2  05 DF                ora     FACEXTENSION
00151Dr 2  85 DF                sta     FACEXTENSION
00151Fr 2               .endif
00151Fr 2               L3764:
00151Fr 2  60                   rts
001520r 2               
001520r 2               ; ----------------------------------------------------------------------------
001520r 2               ; 2'S COMPLEMENT OF FAC
001520r 2               ; ----------------------------------------------------------------------------
001520r 2               COMPLEMENT_FAC:
001520r 2  A5 D5                lda     FACSIGN
001522r 2  49 FF                eor     #$FF
001524r 2  85 D5                sta     FACSIGN
001526r 2               
001526r 2               ; ----------------------------------------------------------------------------
001526r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
001526r 2               ; ----------------------------------------------------------------------------
001526r 2               COMPLEMENT_FAC_MANTISSA:
001526r 2  A5 D1                lda     FAC+1
001528r 2  49 FF                eor     #$FF
00152Ar 2  85 D1                sta     FAC+1
00152Cr 2  A5 D2                lda     FAC+2
00152Er 2  49 FF                eor     #$FF
001530r 2  85 D2                sta     FAC+2
001532r 2  A5 D3                lda     FAC+3
001534r 2  49 FF                eor     #$FF
001536r 2  85 D3                sta     FAC+3
001538r 2               .ifndef CONFIG_SMALL
001538r 2  A5 D4                lda     FAC+4
00153Ar 2  49 FF                eor     #$FF
00153Cr 2  85 D4                sta     FAC+4
00153Er 2               .endif
00153Er 2  A5 DF                lda     FACEXTENSION
001540r 2  49 FF                eor     #$FF
001542r 2  85 DF                sta     FACEXTENSION
001544r 2  E6 DF                inc     FACEXTENSION
001546r 2  D0 0E                bne     RTS12
001548r 2               
001548r 2               ; ----------------------------------------------------------------------------
001548r 2               ; INCREMENT FAC MANTISSA
001548r 2               ; ----------------------------------------------------------------------------
001548r 2               INCREMENT_FAC_MANTISSA:
001548r 2               .ifndef CONFIG_SMALL
001548r 2  E6 D4                inc     FAC+4
00154Ar 2  D0 0A                bne     RTS12
00154Cr 2               .endif
00154Cr 2  E6 D3                inc     FAC+3
00154Er 2  D0 06                bne     RTS12
001550r 2  E6 D2                inc     FAC+2
001552r 2  D0 02                bne     RTS12
001554r 2  E6 D1                inc     FAC+1
001556r 2               RTS12:
001556r 2  60                   rts
001557r 2               OVERFLOW:
001557r 2  A2 45                ldx     #ERR_OVERFLOW
001559r 2  4C rr rr             jmp     ERROR
00155Cr 2               
00155Cr 2               ; ----------------------------------------------------------------------------
00155Cr 2               ; SHIFT 1,X THRU 5,X RIGHT
00155Cr 2               ; (A) = NEGATIVE OF SHIFT COUNT
00155Cr 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
00155Cr 2               ;
00155Cr 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
00155Cr 2               ; ----------------------------------------------------------------------------
00155Cr 2               SHIFT_RIGHT1:
00155Cr 2  A2 94                ldx     #RESULT-1
00155Er 2               SHIFT_RIGHT2:
00155Er 2               .ifdef CONFIG_SMALL
00155Er 2                       ldy     3,x
00155Er 2               .else
00155Er 2  B4 04                ldy     4,x
001560r 2               .endif
001560r 2  84 DF                sty     FACEXTENSION
001562r 2               .ifndef CONFIG_SMALL
001562r 2  B4 03                ldy     3,x
001564r 2  94 04                sty     4,x
001566r 2               .endif
001566r 2  B4 02                ldy     2,x
001568r 2  94 03                sty     3,x
00156Ar 2  B4 01                ldy     1,x
00156Cr 2  94 02                sty     2,x
00156Er 2  A4 D7                ldy     SHIFTSIGNEXT
001570r 2  94 01                sty     1,x
001572r 2               
001572r 2               ; ----------------------------------------------------------------------------
001572r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
001572r 2               ; ----------------------------------------------------------------------------
001572r 2               SHIFT_RIGHT:
001572r 2  69 08                adc     #$08
001574r 2  30 E8                bmi     SHIFT_RIGHT2
001576r 2  F0 E6                beq     SHIFT_RIGHT2
001578r 2  E9 08                sbc     #$08
00157Ar 2  A8                   tay
00157Br 2  A5 DF                lda     FACEXTENSION
00157Dr 2  B0 3C                bcs     SHIFT_RIGHT5
00157Fr 2               .ifndef CONFIG_ROR_WORKAROUND
00157Fr 2               LB588:
00157Fr 2                       asl     1,x
00157Fr 2                       bcc     LB58E
00157Fr 2                       inc     1,x
00157Fr 2               LB58E:
00157Fr 2                       ror     1,x
00157Fr 2                       ror     1,x
00157Fr 2               
00157Fr 2               ; ----------------------------------------------------------------------------
00157Fr 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
00157Fr 2               ; ----------------------------------------------------------------------------
00157Fr 2               SHIFT_RIGHT4:
00157Fr 2                       ror     2,x
00157Fr 2                       ror     3,x
00157Fr 2                 .ifndef CONFIG_SMALL
00157Fr 2                       ror     4,x
00157Fr 2                 .endif
00157Fr 2                       ror     a
00157Fr 2                       iny
00157Fr 2                       bne     LB588
00157Fr 2               .else
00157Fr 2               L37C4:
00157Fr 2  48                   pha
001580r 2  B5 01                lda     1,x
001582r 2  29 80                and     #$80
001584r 2  56 01                lsr     1,x
001586r 2  15 01                ora     1,x
001588r 2  95 01                sta     1,x
00158Ar 2  24                   .byte   $24
00158Br 2               SHIFT_RIGHT4:
00158Br 2  48                   pha
00158Cr 2  A9 00                lda     #$00
00158Er 2  90 02                bcc     L37D7
001590r 2  A9 80                lda     #$80
001592r 2               L37D7:
001592r 2  56 02                lsr     2,x
001594r 2  15 02                ora     2,x
001596r 2  95 02                sta     2,x
001598r 2  A9 00                lda     #$00
00159Ar 2  90 02                bcc     L37E3
00159Cr 2  A9 80                lda     #$80
00159Er 2               L37E3:
00159Er 2  56 03                lsr     3,x
0015A0r 2  15 03                ora     3,x
0015A2r 2  95 03                sta     3,x
0015A4r 2  A9 00                lda     #$00
0015A6r 2  90 02                bcc     L37EF
0015A8r 2  A9 80                lda     #$80
0015AAr 2               L37EF:
0015AAr 2  56 04                lsr     4,x
0015ACr 2  15 04                ora     4,x
0015AEr 2  95 04                sta     4,x
0015B0r 2  68                   pla
0015B1r 2  08                   php
0015B2r 2  4A                   lsr     a
0015B3r 2  28                   plp
0015B4r 2  90 02                bcc     L37FD
0015B6r 2  09 80                ora     #$80
0015B8r 2               L37FD:
0015B8r 2  C8                   iny
0015B9r 2  D0 C4                bne     L37C4
0015BBr 2               .endif
0015BBr 2               SHIFT_RIGHT5:
0015BBr 2  18                   clc
0015BCr 2  60                   rts
0015BDr 2               
0015BDr 2               ; ----------------------------------------------------------------------------
0015BDr 2               .ifdef CONFIG_SMALL
0015BDr 2               CON_ONE:
0015BDr 2                       .byte   $81,$00,$00,$00
0015BDr 2               POLY_LOG:
0015BDr 2               		.byte	$02
0015BDr 2               		.byte   $80,$19,$56,$62
0015BDr 2               		.byte   $80,$76,$22,$F3
0015BDr 2               		.byte   $82,$38,$AA,$40
0015BDr 2               CON_SQR_HALF:
0015BDr 2               		.byte   $80,$35,$04,$F3
0015BDr 2               CON_SQR_TWO:
0015BDr 2               		.byte   $81,$35,$04,$F3
0015BDr 2               CON_NEG_HALF:
0015BDr 2               		.byte   $80,$80,$00,$00
0015BDr 2               CON_LOG_TWO:
0015BDr 2               		.byte   $80,$31,$72,$18
0015BDr 2               .else
0015BDr 2               CON_ONE:
0015BDr 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
0015C1r 2  00           
0015C2r 2               POLY_LOG:
0015C2r 2  03                   .byte   $03
0015C3r 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
0015C7r 2  79           
0015C8r 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
0015CCr 2  64           
0015CDr 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
0015D1r 2  16           
0015D2r 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
0015D6r 2  20           
0015D7r 2               CON_SQR_HALF:
0015D7r 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
0015DBr 2  34           
0015DCr 2               CON_SQR_TWO:
0015DCr 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
0015E0r 2  34           
0015E1r 2               CON_NEG_HALF:
0015E1r 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
0015E5r 2  00           
0015E6r 2               CON_LOG_TWO:
0015E6r 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
0015EAr 2  F8           
0015EBr 2               .endif
0015EBr 2               
0015EBr 2               ; ----------------------------------------------------------------------------
0015EBr 2               ; "LOG" FUNCTION
0015EBr 2               ; ----------------------------------------------------------------------------
0015EBr 2               LOG:
0015EBr 2  20 rr rr             jsr     SIGN
0015EEr 2  F0 02                beq     GIQ
0015F0r 2  10 03                bpl     LOG2
0015F2r 2               GIQ:
0015F2r 2  4C rr rr             jmp     IQERR
0015F5r 2               LOG2:
0015F5r 2  A5 D0                lda     FAC
0015F7r 2  E9 7F                sbc     #$7F
0015F9r 2  48                   pha
0015FAr 2  A9 80                lda     #$80
0015FCr 2  85 D0                sta     FAC
0015FEr 2  A9 rr                lda     #<CON_SQR_HALF
001600r 2  A0 rr                ldy     #>CON_SQR_HALF
001602r 2  20 rr rr             jsr     FADD
001605r 2  A9 rr                lda     #<CON_SQR_TWO
001607r 2  A0 rr                ldy     #>CON_SQR_TWO
001609r 2  20 rr rr             jsr     FDIV
00160Cr 2  A9 rr                lda     #<CON_ONE
00160Er 2  A0 rr                ldy     #>CON_ONE
001610r 2  20 rr rr             jsr     FSUB
001613r 2  A9 rr                lda     #<POLY_LOG
001615r 2  A0 rr                ldy     #>POLY_LOG
001617r 2  20 rr rr             jsr     POLYNOMIAL_ODD
00161Ar 2  A9 rr                lda     #<CON_NEG_HALF
00161Cr 2  A0 rr                ldy     #>CON_NEG_HALF
00161Er 2  20 rr rr             jsr     FADD
001621r 2  68                   pla
001622r 2  20 rr rr             jsr     ADDACC
001625r 2  A9 rr                lda     #<CON_LOG_TWO
001627r 2  A0 rr                ldy     #>CON_LOG_TWO
001629r 2               
001629r 2               ; ----------------------------------------------------------------------------
001629r 2               ; FAC = (Y,A) * FAC
001629r 2               ; ----------------------------------------------------------------------------
001629r 2               FMULT:
001629r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00162Cr 2               
00162Cr 2               ; ----------------------------------------------------------------------------
00162Cr 2               ; FAC = ARG * FAC
00162Cr 2               ; ----------------------------------------------------------------------------
00162Cr 2               FMULTT:
00162Cr 2               .ifndef CONFIG_11
00162Cr 2                       beq     L3903
00162Cr 2               .else
00162Cr 2  D0 03 4C rr          jeq     L3903
001630r 2  rr           
001631r 2               .endif
001631r 2  20 rr rr             jsr     ADD_EXPONENTS
001634r 2  A9 00                lda     #$00
001636r 2  85 95                sta     RESULT
001638r 2  85 96                sta     RESULT+1
00163Ar 2  85 97                sta     RESULT+2
00163Cr 2               .ifndef CONFIG_SMALL
00163Cr 2  85 98                sta     RESULT+3
00163Er 2               .endif
00163Er 2  A5 DF                lda     FACEXTENSION
001640r 2  20 rr rr             jsr     MULTIPLY1
001643r 2               .ifndef CONFIG_SMALL
001643r 2  A5 D4                lda     FAC+4
001645r 2  20 rr rr             jsr     MULTIPLY1
001648r 2               .endif
001648r 2  A5 D3                lda     FAC+3
00164Ar 2  20 rr rr             jsr     MULTIPLY1
00164Dr 2  A5 D2                lda     FAC+2
00164Fr 2  20 rr rr             jsr     MULTIPLY1
001652r 2  A5 D1                lda     FAC+1
001654r 2  20 rr rr             jsr     MULTIPLY2
001657r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
00165Ar 2               
00165Ar 2               ; ----------------------------------------------------------------------------
00165Ar 2               ; MULTIPLY ARG BY (A) INTO RESULT
00165Ar 2               ; ----------------------------------------------------------------------------
00165Ar 2               MULTIPLY1:
00165Ar 2  D0 03                bne     MULTIPLY2
00165Cr 2  4C rr rr             jmp     SHIFT_RIGHT1
00165Fr 2               MULTIPLY2:
00165Fr 2  4A                   lsr     a
001660r 2  09 80                ora     #$80
001662r 2               L38A7:
001662r 2  A8                   tay
001663r 2  90 19                bcc     L38C3
001665r 2  18                   clc
001666r 2               .ifndef CONFIG_SMALL
001666r 2  A5 98                lda     RESULT+3
001668r 2  65 DC                adc     ARG+4
00166Ar 2  85 98                sta     RESULT+3
00166Cr 2               .endif
00166Cr 2  A5 97                lda     RESULT+2
00166Er 2  65 DB                adc     ARG+3
001670r 2  85 97                sta     RESULT+2
001672r 2  A5 96                lda     RESULT+1
001674r 2  65 DA                adc     ARG+2
001676r 2  85 96                sta     RESULT+1
001678r 2  A5 95                lda     RESULT
00167Ar 2  65 D9                adc     ARG+1
00167Cr 2  85 95                sta     RESULT
00167Er 2               L38C3:
00167Er 2               .ifndef CONFIG_ROR_WORKAROUND
00167Er 2                       ror     RESULT
00167Er 2                       ror     RESULT+1
00167Er 2               .ifdef APPLE_BAD_BYTE
00167Er 2               ; this seems to be a bad byte in the dump
00167Er 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
00167Er 2               .else
00167Er 2                       ror     RESULT+2
00167Er 2               .endif
00167Er 2               .ifndef CONFIG_SMALL
00167Er 2                       ror     RESULT+3
00167Er 2               .endif
00167Er 2                       ror     FACEXTENSION
00167Er 2               .else
00167Er 2  A9 00                lda     #$00
001680r 2  90 02                bcc     L38C9
001682r 2  A9 80                lda     #$80
001684r 2               L38C9:
001684r 2  46 95                lsr     RESULT
001686r 2  05 95                ora     RESULT
001688r 2  85 95                sta     RESULT
00168Ar 2  A9 00                lda     #$00
00168Cr 2  90 02                bcc     L38D5
00168Er 2  A9 80                lda     #$80
001690r 2               L38D5:
001690r 2  46 96                lsr     RESULT+1
001692r 2  05 96                ora     RESULT+1
001694r 2  85 96                sta     RESULT+1
001696r 2  A9 00                lda     #$00
001698r 2  90 02                bcc     L38E1
00169Ar 2  A9 80                lda     #$80
00169Cr 2               L38E1:
00169Cr 2  46 97                lsr     RESULT+2
00169Er 2  05 97                ora     RESULT+2
0016A0r 2  85 97                sta     RESULT+2
0016A2r 2  A9 00                lda     #$00
0016A4r 2  90 02                bcc     L38ED
0016A6r 2  A9 80                lda     #$80
0016A8r 2               L38ED:
0016A8r 2  46 98                lsr     RESULT+3
0016AAr 2  05 98                ora     RESULT+3
0016ACr 2  85 98                sta     RESULT+3
0016AEr 2  A9 00                lda     #$00
0016B0r 2  90 02                bcc     L38F9
0016B2r 2  A9 80                lda     #$80
0016B4r 2               L38F9:
0016B4r 2  46 DF                lsr     FACEXTENSION
0016B6r 2  05 DF                ora     FACEXTENSION
0016B8r 2  85 DF                sta     FACEXTENSION
0016BAr 2               .endif
0016BAr 2  98                   tya
0016BBr 2  4A                   lsr     a
0016BCr 2  D0 A4                bne     L38A7
0016BEr 2               L3903:
0016BEr 2  60                   rts
0016BFr 2               
0016BFr 2               ; ----------------------------------------------------------------------------
0016BFr 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0016BFr 2               ; ----------------------------------------------------------------------------
0016BFr 2               LOAD_ARG_FROM_YA:
0016BFr 2  85 91                sta     INDEX
0016C1r 2  84 92                sty     INDEX+1
0016C3r 2  A0 04                ldy     #BYTES_FP-1
0016C5r 2               .ifndef CONFIG_SMALL
0016C5r 2  B1 91                lda     (INDEX),y
0016C7r 2  85 DC                sta     ARG+4
0016C9r 2  88                   dey
0016CAr 2               .endif
0016CAr 2  B1 91                lda     (INDEX),y
0016CCr 2  85 DB                sta     ARG+3
0016CEr 2  88                   dey
0016CFr 2  B1 91                lda     (INDEX),y
0016D1r 2  85 DA                sta     ARG+2
0016D3r 2  88                   dey
0016D4r 2  B1 91                lda     (INDEX),y
0016D6r 2  85 DD                sta     ARGSIGN
0016D8r 2  45 D5                eor     FACSIGN
0016DAr 2  85 DE                sta     SGNCPR
0016DCr 2  A5 DD                lda     ARGSIGN
0016DEr 2  09 80                ora     #$80
0016E0r 2  85 D9                sta     ARG+1
0016E2r 2  88                   dey
0016E3r 2  B1 91                lda     (INDEX),y
0016E5r 2  85 D8                sta     ARG
0016E7r 2  A5 D0                lda     FAC
0016E9r 2  60                   rts
0016EAr 2               
0016EAr 2               ; ----------------------------------------------------------------------------
0016EAr 2               ; ADD EXPONENTS OF ARG AND FAC
0016EAr 2               ; (CALLED BY FMULT AND FDIV)
0016EAr 2               ;
0016EAr 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0016EAr 2               ; ----------------------------------------------------------------------------
0016EAr 2               ADD_EXPONENTS:
0016EAr 2  A5 D8                lda     ARG
0016ECr 2               ADD_EXPONENTS1:
0016ECr 2  F0 1F                beq     ZERO
0016EEr 2  18                   clc
0016EFr 2  65 D0                adc     FAC
0016F1r 2  90 04                bcc     L393C
0016F3r 2  30 1D                bmi     JOV
0016F5r 2  18                   clc
0016F6r 2  2C                   .byte   $2C
0016F7r 2               L393C:
0016F7r 2  10 14                bpl     ZERO
0016F9r 2  69 80                adc     #$80
0016FBr 2  85 D0                sta     FAC
0016FDr 2  D0 03                bne     L3947
0016FFr 2  4C rr rr             jmp     STA_IN_FAC_SIGN
001702r 2               L3947:
001702r 2  A5 DE                lda     SGNCPR
001704r 2  85 D5                sta     FACSIGN
001706r 2  60                   rts
001707r 2               
001707r 2               ; ----------------------------------------------------------------------------
001707r 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
001707r 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
001707r 2               ; CALLED FROM "EXP" FUNCTION
001707r 2               ; ----------------------------------------------------------------------------
001707r 2               OUTOFRNG:
001707r 2  A5 D5                lda     FACSIGN
001709r 2  49 FF                eor     #$FF
00170Br 2  30 05                bmi     JOV
00170Dr 2               
00170Dr 2               ; ----------------------------------------------------------------------------
00170Dr 2               ; POP RETURN ADDRESS AND SET FAC=0
00170Dr 2               ; ----------------------------------------------------------------------------
00170Dr 2               ZERO:
00170Dr 2  68                   pla
00170Er 2  68                   pla
00170Fr 2  4C rr rr             jmp     ZERO_FAC
001712r 2               JOV:
001712r 2  4C rr rr             jmp     OVERFLOW
001715r 2               
001715r 2               ; ----------------------------------------------------------------------------
001715r 2               ; MULTIPLY FAC BY 10
001715r 2               ; ----------------------------------------------------------------------------
001715r 2               MUL10:
001715r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001718r 2  AA                   tax
001719r 2  F0 10                beq     L3970
00171Br 2  18                   clc
00171Cr 2  69 02                adc     #$02
00171Er 2  B0 F2                bcs     JOV
001720r 2               LD9BF:
001720r 2  A2 00                ldx     #$00
001722r 2  86 DE                stx     SGNCPR
001724r 2  20 rr rr             jsr     FADD2
001727r 2  E6 D0                inc     FAC
001729r 2  F0 E7                beq     JOV
00172Br 2               L3970:
00172Br 2  60                   rts
00172Cr 2               
00172Cr 2               ; ----------------------------------------------------------------------------
00172Cr 2               CONTEN:
00172Cr 2               .ifdef CONFIG_SMALL
00172Cr 2                       .byte   $84,$20,$00,$00
00172Cr 2               .else
00172Cr 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
001730r 2  00           
001731r 2               .endif
001731r 2               
001731r 2               ; ----------------------------------------------------------------------------
001731r 2               ; DIVIDE FAC BY 10
001731r 2               ; ----------------------------------------------------------------------------
001731r 2               DIV10:
001731r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001734r 2  A9 rr                lda     #<CONTEN
001736r 2  A0 rr                ldy     #>CONTEN
001738r 2  A2 00                ldx     #$00
00173Ar 2               
00173Ar 2               ; ----------------------------------------------------------------------------
00173Ar 2               ; FAC = ARG / (Y,A)
00173Ar 2               ; ----------------------------------------------------------------------------
00173Ar 2               DIV:
00173Ar 2  86 DE                stx     SGNCPR
00173Cr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00173Fr 2  4C rr rr             jmp     FDIVT
001742r 2               
001742r 2               ; ----------------------------------------------------------------------------
001742r 2               ; FAC = (Y,A) / FAC
001742r 2               ; ----------------------------------------------------------------------------
001742r 2               FDIV:
001742r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001745r 2               
001745r 2               ; ----------------------------------------------------------------------------
001745r 2               ; FAC = ARG / FAC
001745r 2               ; ----------------------------------------------------------------------------
001745r 2               FDIVT:
001745r 2  F0 76                beq     L3A02
001747r 2  20 rr rr             jsr     ROUND_FAC
00174Ar 2  A9 00                lda     #$00
00174Cr 2  38                   sec
00174Dr 2  E5 D0                sbc     FAC
00174Fr 2  85 D0                sta     FAC
001751r 2  20 rr rr             jsr     ADD_EXPONENTS
001754r 2  E6 D0                inc     FAC
001756r 2  F0 BA                beq     JOV
001758r 2  A2 FC                ldx     #-MANTISSA_BYTES
00175Ar 2  A9 01                lda     #$01
00175Cr 2               L39A1:
00175Cr 2  A4 D9                ldy     ARG+1
00175Er 2  C4 D1                cpy     FAC+1
001760r 2  D0 10                bne     L39B7
001762r 2  A4 DA                ldy     ARG+2
001764r 2  C4 D2                cpy     FAC+2
001766r 2  D0 0A                bne     L39B7
001768r 2  A4 DB                ldy     ARG+3
00176Ar 2  C4 D3                cpy     FAC+3
00176Cr 2               .ifndef CONFIG_SMALL
00176Cr 2  D0 04                bne     L39B7
00176Er 2  A4 DC                ldy     ARG+4
001770r 2  C4 D4                cpy     FAC+4
001772r 2               .endif
001772r 2               L39B7:
001772r 2  08                   php
001773r 2  2A                   rol     a
001774r 2  90 09                bcc     L39C4
001776r 2  E8                   inx
001777r 2  95 98                sta     RESULT_LAST-1,x
001779r 2  F0 32                beq     L39F2
00177Br 2  10 34                bpl     L39F6
00177Dr 2  A9 01                lda     #$01
00177Fr 2               L39C4:
00177Fr 2  28                   plp
001780r 2  B0 0E                bcs     L39D5
001782r 2               L39C7:
001782r 2  06 DC                asl     ARG_LAST
001784r 2               .ifndef CONFIG_SMALL
001784r 2  26 DB                rol     ARG+3
001786r 2               .endif
001786r 2  26 DA                rol     ARG+2
001788r 2  26 D9                rol     ARG+1
00178Ar 2  B0 E6                bcs     L39B7
00178Cr 2  30 CE                bmi     L39A1
00178Er 2  10 E2                bpl     L39B7
001790r 2               L39D5:
001790r 2  A8                   tay
001791r 2               .ifndef CONFIG_SMALL
001791r 2  A5 DC                lda     ARG+4
001793r 2  E5 D4                sbc     FAC+4
001795r 2  85 DC                sta     ARG+4
001797r 2               .endif
001797r 2  A5 DB                lda     ARG+3
001799r 2  E5 D3                sbc     FAC+3
00179Br 2  85 DB                sta     ARG+3
00179Dr 2  A5 DA                lda     ARG+2
00179Fr 2  E5 D2                sbc     FAC+2
0017A1r 2  85 DA                sta     ARG+2
0017A3r 2  A5 D9                lda     ARG+1
0017A5r 2  E5 D1                sbc     FAC+1
0017A7r 2  85 D9                sta     ARG+1
0017A9r 2  98                   tya
0017AAr 2  4C rr rr             jmp     L39C7
0017ADr 2               L39F2:
0017ADr 2  A9 40                lda     #$40
0017AFr 2  D0 CE                bne     L39C4
0017B1r 2               L39F6:
0017B1r 2  0A                   asl     a
0017B2r 2  0A                   asl     a
0017B3r 2  0A                   asl     a
0017B4r 2  0A                   asl     a
0017B5r 2  0A                   asl     a
0017B6r 2  0A                   asl     a
0017B7r 2  85 DF                sta     FACEXTENSION
0017B9r 2  28                   plp
0017BAr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0017BDr 2               L3A02:
0017BDr 2  A2 85                ldx     #ERR_ZERODIV
0017BFr 2  4C rr rr             jmp     ERROR
0017C2r 2               
0017C2r 2               ; ----------------------------------------------------------------------------
0017C2r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0017C2r 2               ; ----------------------------------------------------------------------------
0017C2r 2               COPY_RESULT_INTO_FAC:
0017C2r 2  A5 95                lda     RESULT
0017C4r 2  85 D1                sta     FAC+1
0017C6r 2  A5 96                lda     RESULT+1
0017C8r 2  85 D2                sta     FAC+2
0017CAr 2  A5 97                lda     RESULT+2
0017CCr 2  85 D3                sta     FAC+3
0017CEr 2               .ifndef CONFIG_SMALL
0017CEr 2  A5 98                lda     RESULT+3
0017D0r 2  85 D4                sta     FAC+4
0017D2r 2               .endif
0017D2r 2  4C rr rr             jmp     NORMALIZE_FAC2
0017D5r 2               
0017D5r 2               ; ----------------------------------------------------------------------------
0017D5r 2               ; UNPACK (Y,A) INTO FAC
0017D5r 2               ; ----------------------------------------------------------------------------
0017D5r 2               LOAD_FAC_FROM_YA:
0017D5r 2  85 91                sta     INDEX
0017D7r 2  84 92                sty     INDEX+1
0017D9r 2  A0 04                ldy     #MANTISSA_BYTES
0017DBr 2               .ifndef CONFIG_SMALL
0017DBr 2  B1 91                lda     (INDEX),y
0017DDr 2  85 D4                sta     FAC+4
0017DFr 2  88                   dey
0017E0r 2               .endif
0017E0r 2  B1 91                lda     (INDEX),y
0017E2r 2  85 D3                sta     FAC+3
0017E4r 2  88                   dey
0017E5r 2  B1 91                lda     (INDEX),y
0017E7r 2  85 D2                sta     FAC+2
0017E9r 2  88                   dey
0017EAr 2  B1 91                lda     (INDEX),y
0017ECr 2  85 D5                sta     FACSIGN
0017EEr 2  09 80                ora     #$80
0017F0r 2  85 D1                sta     FAC+1
0017F2r 2  88                   dey
0017F3r 2  B1 91                lda     (INDEX),y
0017F5r 2  85 D0                sta     FAC
0017F7r 2  84 DF                sty     FACEXTENSION
0017F9r 2  60                   rts
0017FAr 2               
0017FAr 2               ; ----------------------------------------------------------------------------
0017FAr 2               ; ROUND FAC, STORE IN TEMP2
0017FAr 2               ; ----------------------------------------------------------------------------
0017FAr 2               STORE_FAC_IN_TEMP2_ROUNDED:
0017FAr 2  A2 CB                ldx     #TEMP2
0017FCr 2  2C                   .byte   $2C
0017FDr 2               
0017FDr 2               ; ----------------------------------------------------------------------------
0017FDr 2               ; ROUND FAC, STORE IN TEMP1
0017FDr 2               ; ----------------------------------------------------------------------------
0017FDr 2               STORE_FAC_IN_TEMP1_ROUNDED:
0017FDr 2  A2 C6                ldx     #TEMP1X
0017FFr 2  A0 00                ldy     #$00
001801r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
001803r 2               
001803r 2               ; ----------------------------------------------------------------------------
001803r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
001803r 2               ; ----------------------------------------------------------------------------
001803r 2               SETFOR:
001803r 2  A6 B8                ldx     FORPNT
001805r 2  A4 B9                ldy     FORPNT+1
001807r 2               
001807r 2               ; ----------------------------------------------------------------------------
001807r 2               ; ROUND FAC, AND STORE AT (Y,X)
001807r 2               ; ----------------------------------------------------------------------------
001807r 2               STORE_FAC_AT_YX_ROUNDED:
001807r 2  20 rr rr             jsr     ROUND_FAC
00180Ar 2  86 91                stx     INDEX
00180Cr 2  84 92                sty     INDEX+1
00180Er 2  A0 04                ldy     #MANTISSA_BYTES
001810r 2               .ifndef CONFIG_SMALL
001810r 2  A5 D4                lda     FAC+4
001812r 2  91 91                sta     (INDEX),y
001814r 2  88                   dey
001815r 2               .endif
001815r 2  A5 D3                lda     FAC+3
001817r 2  91 91                sta     (INDEX),y
001819r 2  88                   dey
00181Ar 2  A5 D2                lda     FAC+2
00181Cr 2  91 91                sta     (INDEX),y
00181Er 2  88                   dey
00181Fr 2  A5 D5                lda     FACSIGN
001821r 2  09 7F                ora     #$7F
001823r 2  25 D1                and     FAC+1
001825r 2  91 91                sta     (INDEX),y
001827r 2  88                   dey
001828r 2  A5 D0                lda     FAC
00182Ar 2  91 91                sta     (INDEX),y
00182Cr 2  84 DF                sty     FACEXTENSION
00182Er 2  60                   rts
00182Fr 2               
00182Fr 2               ; ----------------------------------------------------------------------------
00182Fr 2               ; COPY ARG INTO FAC
00182Fr 2               ; ----------------------------------------------------------------------------
00182Fr 2               COPY_ARG_TO_FAC:
00182Fr 2  A5 DD                lda     ARGSIGN
001831r 2               MFA:
001831r 2  85 D5                sta     FACSIGN
001833r 2  A2 05                ldx     #BYTES_FP
001835r 2               L3A7A:
001835r 2  B5 D7                lda     SHIFTSIGNEXT,x
001837r 2  95 CF                sta     EXPSGN,x
001839r 2  CA                   dex
00183Ar 2  D0 F9                bne     L3A7A
00183Cr 2  86 DF                stx     FACEXTENSION
00183Er 2  60                   rts
00183Fr 2               
00183Fr 2               ; ----------------------------------------------------------------------------
00183Fr 2               ; ROUND FAC AND COPY TO ARG
00183Fr 2               ; ----------------------------------------------------------------------------
00183Fr 2               COPY_FAC_TO_ARG_ROUNDED:
00183Fr 2  20 rr rr             jsr     ROUND_FAC
001842r 2               MAF:
001842r 2  A2 06                ldx     #BYTES_FP+1
001844r 2               L3A89:
001844r 2  B5 CF                lda     EXPSGN,x
001846r 2  95 D7                sta     SHIFTSIGNEXT,x
001848r 2  CA                   dex
001849r 2  D0 F9                bne     L3A89
00184Br 2  86 DF                stx     FACEXTENSION
00184Dr 2               RTS14:
00184Dr 2  60                   rts
00184Er 2               
00184Er 2               ; ----------------------------------------------------------------------------
00184Er 2               ; ROUND FAC USING EXTENSION BYTE
00184Er 2               ; ----------------------------------------------------------------------------
00184Er 2               ROUND_FAC:
00184Er 2  A5 D0                lda     FAC
001850r 2  F0 FB                beq     RTS14
001852r 2  06 DF                asl     FACEXTENSION
001854r 2  90 F7                bcc     RTS14
001856r 2               
001856r 2               ; ----------------------------------------------------------------------------
001856r 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
001856r 2               ; ----------------------------------------------------------------------------
001856r 2               INCREMENT_MANTISSA:
001856r 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
001859r 2  D0 F2                bne     RTS14
00185Br 2  4C rr rr             jmp     NORMALIZE_FAC6
00185Er 2               
00185Er 2               ; ----------------------------------------------------------------------------
00185Er 2               ; TEST FAC FOR ZERO AND SIGN
00185Er 2               ;
00185Er 2               ; FAC > 0, RETURN +1
00185Er 2               ; FAC = 0, RETURN  0
00185Er 2               ; FAC < 0, RETURN -1
00185Er 2               ; ----------------------------------------------------------------------------
00185Er 2               SIGN:
00185Er 2  A5 D0                lda     FAC
001860r 2  F0 09                beq     RTS15
001862r 2               L3AA7:
001862r 2  A5 D5                lda     FACSIGN
001864r 2               SIGN2:
001864r 2  2A                   rol     a
001865r 2  A9 FF                lda     #$FF
001867r 2  B0 02                bcs     RTS15
001869r 2  A9 01                lda     #$01
00186Br 2               RTS15:
00186Br 2  60                   rts
00186Cr 2               
00186Cr 2               ; ----------------------------------------------------------------------------
00186Cr 2               ; "SGN" FUNCTION
00186Cr 2               ; ----------------------------------------------------------------------------
00186Cr 2               SGN:
00186Cr 2  20 rr rr             jsr     SIGN
00186Fr 2               
00186Fr 2               ; ----------------------------------------------------------------------------
00186Fr 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
00186Fr 2               ; ----------------------------------------------------------------------------
00186Fr 2               FLOAT:
00186Fr 2  85 D1                sta     FAC+1
001871r 2  A9 00                lda     #$00
001873r 2  85 D2                sta     FAC+2
001875r 2  A2 88                ldx     #$88
001877r 2               
001877r 2               ; ----------------------------------------------------------------------------
001877r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001877r 2               ; (X) = EXPONENT
001877r 2               ; ----------------------------------------------------------------------------
001877r 2               FLOAT1:
001877r 2  A5 D1                lda     FAC+1
001879r 2  49 FF                eor     #$FF
00187Br 2  2A                   rol     a
00187Cr 2               
00187Cr 2               ; ----------------------------------------------------------------------------
00187Cr 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00187Cr 2               ; (X) = EXPONENT
00187Cr 2               ; C=0 TO MAKE VALUE NEGATIVE
00187Cr 2               ; C=1 TO MAKE VALUE POSITIVE
00187Cr 2               ; ----------------------------------------------------------------------------
00187Cr 2               FLOAT2:
00187Cr 2  A9 00                lda     #$00
00187Er 2               .ifndef CONFIG_SMALL
00187Er 2  85 D4                sta     FAC+4
001880r 2               .endif
001880r 2  85 D3                sta     FAC+3
001882r 2               LDB21:
001882r 2  86 D0                stx     FAC
001884r 2  85 DF                sta     FACEXTENSION
001886r 2  85 D5                sta     FACSIGN
001888r 2  4C rr rr             jmp     NORMALIZE_FAC1
00188Br 2               
00188Br 2               ; ----------------------------------------------------------------------------
00188Br 2               ; "ABS" FUNCTION
00188Br 2               ; ----------------------------------------------------------------------------
00188Br 2               ABS:
00188Br 2  46 D5                lsr     FACSIGN
00188Dr 2  60                   rts
00188Er 2               
00188Er 2               ; ----------------------------------------------------------------------------
00188Er 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
00188Er 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
00188Er 2               ; ----------------------------------------------------------------------------
00188Er 2               FCOMP:
00188Er 2  85 93                sta     DEST
001890r 2               
001890r 2               ; ----------------------------------------------------------------------------
001890r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001890r 2               ; "DEST" ALREADY SET UP
001890r 2               ; ----------------------------------------------------------------------------
001890r 2               FCOMP2:
001890r 2  84 94                sty     DEST+1
001892r 2  A0 00                ldy     #$00
001894r 2  B1 93                lda     (DEST),y
001896r 2  C8                   iny
001897r 2  AA                   tax
001898r 2  F0 C4                beq     SIGN
00189Ar 2  B1 93                lda     (DEST),y
00189Cr 2  45 D5                eor     FACSIGN
00189Er 2  30 C2                bmi     L3AA7
0018A0r 2  E4 D0                cpx     FAC
0018A2r 2  D0 21                bne     L3B0A
0018A4r 2  B1 93                lda     (DEST),y
0018A6r 2  09 80                ora     #$80
0018A8r 2  C5 D1                cmp     FAC+1
0018AAr 2  D0 19                bne     L3B0A
0018ACr 2  C8                   iny
0018ADr 2  B1 93                lda     (DEST),y
0018AFr 2  C5 D2                cmp     FAC+2
0018B1r 2  D0 12                bne     L3B0A
0018B3r 2  C8                   iny
0018B4r 2               .ifndef CONFIG_SMALL
0018B4r 2  B1 93                lda     (DEST),y
0018B6r 2  C5 D3                cmp     FAC+3
0018B8r 2  D0 0B                bne     L3B0A
0018BAr 2  C8                   iny
0018BBr 2               .endif
0018BBr 2  A9 7F                lda     #$7F
0018BDr 2  C5 DF                cmp     FACEXTENSION
0018BFr 2  B1 93                lda     (DEST),y
0018C1r 2  E5 D4                sbc     FAC_LAST
0018C3r 2  F0 28                beq     L3B32
0018C5r 2               L3B0A:
0018C5r 2  A5 D5                lda     FACSIGN
0018C7r 2  90 02                bcc     L3B10
0018C9r 2  49 FF                eor     #$FF
0018CBr 2               L3B10:
0018CBr 2  4C rr rr             jmp     SIGN2
0018CEr 2               
0018CEr 2               ; ----------------------------------------------------------------------------
0018CEr 2               ; QUICK INTEGER FUNCTION
0018CEr 2               ;
0018CEr 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0018CEr 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0018CEr 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0018CEr 2               ;
0018CEr 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0018CEr 2               ; ----------------------------------------------------------------------------
0018CEr 2               QINT:
0018CEr 2  A5 D0                lda     FAC
0018D0r 2  F0 4A                beq     QINT3
0018D2r 2  38                   sec
0018D3r 2  E9 A0                sbc     #120+8*BYTES_FP
0018D5r 2  24 D5                bit     FACSIGN
0018D7r 2  10 09                bpl     L3B27
0018D9r 2  AA                   tax
0018DAr 2  A9 FF                lda     #$FF
0018DCr 2  85 D7                sta     SHIFTSIGNEXT
0018DEr 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0018E1r 2  8A                   txa
0018E2r 2               L3B27:
0018E2r 2  A2 D0                ldx     #FAC
0018E4r 2  C9 F9                cmp     #$F9
0018E6r 2  10 06                bpl     QINT2
0018E8r 2  20 rr rr             jsr     SHIFT_RIGHT
0018EBr 2  84 D7                sty     SHIFTSIGNEXT
0018EDr 2               L3B32:
0018EDr 2  60                   rts
0018EEr 2               QINT2:
0018EEr 2  A8                   tay
0018EFr 2  A5 D5                lda     FACSIGN
0018F1r 2  29 80                and     #$80
0018F3r 2  46 D1                lsr     FAC+1
0018F5r 2  05 D1                ora     FAC+1
0018F7r 2  85 D1                sta     FAC+1
0018F9r 2  20 rr rr             jsr     SHIFT_RIGHT4
0018FCr 2  84 D7                sty     SHIFTSIGNEXT
0018FEr 2  60                   rts
0018FFr 2               
0018FFr 2               ; ----------------------------------------------------------------------------
0018FFr 2               ; "INT" FUNCTION
0018FFr 2               ;
0018FFr 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0018FFr 2               ; AND THEN REFLOATS THE INTEGER.
0018FFr 2               ; ----------------------------------------------------------------------------
0018FFr 2               INT:
0018FFr 2  A5 D0                lda     FAC
001901r 2  C9 A0                cmp     #120+8*BYTES_FP
001903r 2  B0 20                bcs     RTS17
001905r 2  20 rr rr             jsr     QINT
001908r 2  84 DF                sty     FACEXTENSION
00190Ar 2  A5 D5                lda     FACSIGN
00190Cr 2  84 D5                sty     FACSIGN
00190Er 2  49 80                eor     #$80
001910r 2  2A                   rol     a
001911r 2  A9 A0                lda     #120+8*BYTES_FP
001913r 2  85 D0                sta     FAC
001915r 2  A5 D4                lda     FAC_LAST
001917r 2  85 24                sta     CHARAC
001919r 2  4C rr rr             jmp     NORMALIZE_FAC1
00191Cr 2               QINT3:
00191Cr 2  85 D1                sta     FAC+1
00191Er 2  85 D2                sta     FAC+2
001920r 2  85 D3                sta     FAC+3
001922r 2               .ifndef CONFIG_SMALL
001922r 2  85 D4                sta     FAC+4
001924r 2               .endif
001924r 2  A8                   tay
001925r 2               RTS17:
001925r 2  60                   rts
001926r 2               
001926r 2               ; ----------------------------------------------------------------------------
001926r 2               ; CONVERT STRING TO FP VALUE IN FAC
001926r 2               ;
001926r 2               ; STRING POINTED TO BY TXTPTR
001926r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
001926r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
001926r 2               ; ----------------------------------------------------------------------------
001926r 2               FIN:
001926r 2  A0 00                ldy     #$00
001928r 2  A2 0A                ldx     #SERLEN-TMPEXP
00192Ar 2               L3B6F:
00192Ar 2  94 CC                sty     TMPEXP,x
00192Cr 2  CA                   dex
00192Dr 2  10 FB                bpl     L3B6F
00192Fr 2  90 0F                bcc     FIN2
001931r 2               .ifdef SYM1
001931r 2                       cmp     #$26
001931r 2                       bne     LDABB
001931r 2                       jmp     LCDFE
001931r 2               LDABB:
001931r 2               .endif
001931r 2  C9 2D                cmp     #$2D
001933r 2  D0 04                bne     L3B7E
001935r 2  86 D6                stx     SERLEN
001937r 2  F0 04                beq     FIN1
001939r 2               L3B7E:
001939r 2  C9 2B                cmp     #$2B
00193Br 2  D0 05                bne     FIN3
00193Dr 2               FIN1:
00193Dr 2  20 E2 00             jsr     CHRGET
001940r 2               FIN2:
001940r 2  90 6F                bcc     FIN9
001942r 2               FIN3:
001942r 2  C9 2E                cmp     #$2E
001944r 2  F0 38                beq     FIN10
001946r 2  C9 45                cmp     #$45
001948r 2  D0 44                bne     FIN7
00194Ar 2  20 E2 00             jsr     CHRGET
00194Dr 2  90 21                bcc     FIN5
00194Fr 2  C9 A5                cmp     #TOKEN_MINUS
001951r 2  F0 0E                beq     L3BA6
001953r 2  C9 2D                cmp     #$2D
001955r 2  F0 0A                beq     L3BA6
001957r 2  C9 A4                cmp     #TOKEN_PLUS
001959r 2  F0 12                beq     FIN4
00195Br 2  C9 2B                cmp     #$2B
00195Dr 2  F0 0E                beq     FIN4
00195Fr 2  D0 11                bne     FIN6
001961r 2               L3BA6:
001961r 2               .ifndef CONFIG_ROR_WORKAROUND
001961r 2                       ror     EXPSGN
001961r 2               .else
001961r 2  A9 00                lda     #$00
001963r 2  90 02                bcc     L3BAC
001965r 2  A9 80                lda     #$80
001967r 2               L3BAC:
001967r 2  46 CF                lsr     EXPSGN
001969r 2  05 CF                ora     EXPSGN
00196Br 2  85 CF                sta     EXPSGN
00196Dr 2               .endif
00196Dr 2               FIN4:
00196Dr 2  20 E2 00             jsr     CHRGET
001970r 2               FIN5:
001970r 2  90 66                bcc     GETEXP
001972r 2               FIN6:
001972r 2  24 CF                bit     EXPSGN
001974r 2  10 18                bpl     FIN7
001976r 2  A9 00                lda     #$00
001978r 2  38                   sec
001979r 2  E5 CD                sbc     EXPON
00197Br 2  4C rr rr             jmp     FIN8
00197Er 2               
00197Er 2               ; ----------------------------------------------------------------------------
00197Er 2               ; FOUND A DECIMAL POINT
00197Er 2               ; ----------------------------------------------------------------------------
00197Er 2               FIN10:
00197Er 2               .ifndef CONFIG_ROR_WORKAROUND
00197Er 2                       ror     LOWTR
00197Er 2               .else
00197Er 2  A9 00                lda     #$00
001980r 2  90 02                bcc     L3BC9
001982r 2  A9 80                lda     #$80
001984r 2               L3BC9:
001984r 2  46 CE                lsr     LOWTR
001986r 2  05 CE                ora     LOWTR
001988r 2  85 CE                sta     LOWTR
00198Ar 2               .endif
00198Ar 2  24 CE                bit     LOWTR
00198Cr 2  50 AF                bvc     FIN1
00198Er 2               
00198Er 2               ; ----------------------------------------------------------------------------
00198Er 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
00198Er 2               ; ----------------------------------------------------------------------------
00198Er 2               FIN7:
00198Er 2  A5 CD                lda     EXPON
001990r 2               FIN8:
001990r 2  38                   sec
001991r 2  E5 CC                sbc     INDX
001993r 2  85 CD                sta     EXPON
001995r 2  F0 12                beq     L3BEE
001997r 2  10 09                bpl     L3BE7
001999r 2               L3BDE:
001999r 2  20 rr rr             jsr     DIV10
00199Cr 2  E6 CD                inc     EXPON
00199Er 2  D0 F9                bne     L3BDE
0019A0r 2  F0 07                beq     L3BEE
0019A2r 2               L3BE7:
0019A2r 2  20 rr rr             jsr     MUL10
0019A5r 2  C6 CD                dec     EXPON
0019A7r 2  D0 F9                bne     L3BE7
0019A9r 2               L3BEE:
0019A9r 2  A5 D6                lda     SERLEN
0019ABr 2  30 01                bmi     L3BF3
0019ADr 2  60                   rts
0019AEr 2               L3BF3:
0019AEr 2  4C rr rr             jmp     NEGOP
0019B1r 2               
0019B1r 2               ; ----------------------------------------------------------------------------
0019B1r 2               ; ACCUMULATE A DIGIT INTO FAC
0019B1r 2               ; ----------------------------------------------------------------------------
0019B1r 2               FIN9:
0019B1r 2  48                   pha
0019B2r 2  24 CE                bit     LOWTR
0019B4r 2  10 02                bpl     L3BFD
0019B6r 2  E6 CC                inc     INDX
0019B8r 2               L3BFD:
0019B8r 2  20 rr rr             jsr     MUL10
0019BBr 2  68                   pla
0019BCr 2  38                   sec
0019BDr 2  E9 30                sbc     #$30
0019BFr 2  20 rr rr             jsr     ADDACC
0019C2r 2  4C rr rr             jmp     FIN1
0019C5r 2               
0019C5r 2               ; ----------------------------------------------------------------------------
0019C5r 2               ; ADD (A) TO FAC
0019C5r 2               ; ----------------------------------------------------------------------------
0019C5r 2               ADDACC:
0019C5r 2  48                   pha
0019C6r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0019C9r 2  68                   pla
0019CAr 2  20 rr rr             jsr     FLOAT
0019CDr 2  A5 DD                lda     ARGSIGN
0019CFr 2  45 D5                eor     FACSIGN
0019D1r 2  85 DE                sta     SGNCPR
0019D3r 2  A6 D0                ldx     FAC
0019D5r 2  4C rr rr             jmp     FADDT
0019D8r 2               
0019D8r 2               ; ----------------------------------------------------------------------------
0019D8r 2               ; ACCUMULATE DIGIT OF EXPONENT
0019D8r 2               ; ----------------------------------------------------------------------------
0019D8r 2               GETEXP:
0019D8r 2  A5 CD                lda     EXPON
0019DAr 2  C9 0A                cmp     #MAX_EXPON
0019DCr 2  90 09                bcc     L3C2C
0019DEr 2               .ifdef CONFIG_10A
0019DEr 2  A9 64                lda     #$64
0019E0r 2               .endif
0019E0r 2  24 CF                bit     EXPSGN
0019E2r 2               .ifdef CONFIG_10A
0019E2r 2  30 11                bmi     L3C3A
0019E4r 2               .else
0019E4r 2                       bmi     LDC70
0019E4r 2               .endif
0019E4r 2  4C rr rr             jmp     OVERFLOW
0019E7r 2               LDC70:
0019E7r 2               .ifndef CONFIG_10A
0019E7r 2                       lda     #$0B
0019E7r 2               .endif
0019E7r 2               L3C2C:
0019E7r 2  0A                   asl     a
0019E8r 2  0A                   asl     a
0019E9r 2  18                   clc
0019EAr 2  65 CD                adc     EXPON
0019ECr 2  0A                   asl     a
0019EDr 2  18                   clc
0019EEr 2  A0 00                ldy     #$00
0019F0r 2  71 E9                adc     (TXTPTR),y
0019F2r 2  38                   sec
0019F3r 2  E9 30                sbc     #$30
0019F5r 2               L3C3A:
0019F5r 2  85 CD                sta     EXPON
0019F7r 2  4C rr rr             jmp     FIN4
0019FAr 2               
0019FAr 2               ; ----------------------------------------------------------------------------
0019FAr 2               .ifdef CONFIG_SMALL
0019FAr 2               ; these values are /1000 of what the labels say
0019FAr 2               CON_99999999_9:
0019FAr 2                       .byte   $91,$43,$4F,$F8
0019FAr 2               CON_999999999:
0019FAr 2               		.byte   $94,$74,$23,$F7
0019FAr 2               CON_BILLION:
0019FAr 2                       .byte   $94,$74,$24,$00
0019FAr 2               .else
0019FAr 2               CON_99999999_9:
0019FAr 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
0019FEr 2  FD           
0019FFr 2               CON_999999999:
0019FFr 2               .ifndef CONFIG_10A
0019FFr 2                       .byte   $9E,$6E,$6B,$27,$FE
0019FFr 2               .else
0019FFr 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FD
001A03r 2  FD           
001A04r 2               .endif
001A04r 2               CON_BILLION:
001A04r 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
001A08r 2  00           
001A09r 2               .endif
001A09r 2               
001A09r 2               ; ----------------------------------------------------------------------------
001A09r 2               ; PRINT "IN <LINE #>"
001A09r 2               ; ----------------------------------------------------------------------------
001A09r 2               INPRT:
001A09r 2               .ifdef KBD
001A09r 2                       jsr     LFE0B
001A09r 2                       .byte	" in"
001A09r 2                       .byte	0
001A09r 2               .else
001A09r 2  A9 rr                lda     #<QT_IN
001A0Br 2  A0 rr                ldy     #>QT_IN
001A0Dr 2  20 rr rr             jsr     GOSTROUT2
001A10r 2               .endif
001A10r 2  A5 A9                lda     CURLIN+1
001A12r 2  A6 A8                ldx     CURLIN
001A14r 2               
001A14r 2               ; ----------------------------------------------------------------------------
001A14r 2               ; PRINT A,X AS DECIMAL INTEGER
001A14r 2               ; ----------------------------------------------------------------------------
001A14r 2               LINPRT:
001A14r 2  85 D1                sta     FAC+1
001A16r 2  86 D2                stx     FAC+2
001A18r 2  A2 90                ldx     #$90
001A1Ar 2  38                   sec
001A1Br 2  20 rr rr             jsr     FLOAT2
001A1Er 2  20 rr rr             jsr     FOUT
001A21r 2               GOSTROUT2:
001A21r 2  4C rr rr             jmp     STROUT
001A24r 2               
001A24r 2               ; ----------------------------------------------------------------------------
001A24r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
001A24r 2               ; RETURN WITH (Y,A) POINTING AT STRING
001A24r 2               ; ----------------------------------------------------------------------------
001A24r 2               FOUT:
001A24r 2  A0 01                ldy     #$01
001A26r 2               
001A26r 2               ; ----------------------------------------------------------------------------
001A26r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
001A26r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
001A26r 2               ; (THIS IS USED AS A FLAG)
001A26r 2               ; ----------------------------------------------------------------------------
001A26r 2               FOUT1:
001A26r 2  A9 20                lda     #$20
001A28r 2  24 D5                bit     FACSIGN
001A2Ar 2  10 02                bpl     L3C73
001A2Cr 2  A9 2D                lda     #$2D
001A2Er 2               L3C73:
001A2Er 2  99 FF 00             sta     STACK2-1,y
001A31r 2  85 D5                sta     FACSIGN
001A33r 2  84 E0                sty     STRNG2
001A35r 2  C8                   iny
001A36r 2  A9 30                lda     #$30
001A38r 2  A6 D0                ldx     FAC
001A3Ar 2  D0 03                bne     L3C84
001A3Cr 2  4C rr rr             jmp     FOUT4
001A3Fr 2               L3C84:
001A3Fr 2  A9 00                lda     #$00
001A41r 2  E0 80                cpx     #$80
001A43r 2  F0 02                beq     L3C8C
001A45r 2  B0 09                bcs     L3C95
001A47r 2               L3C8C:
001A47r 2  A9 rr                lda     #<CON_BILLION
001A49r 2  A0 rr                ldy     #>CON_BILLION
001A4Br 2  20 rr rr             jsr     FMULT
001A4Er 2               .ifdef CONFIG_SMALL
001A4Er 2                       lda     #-6 ; exponent adjustment
001A4Er 2               .else
001A4Er 2  A9 F7                lda     #-9
001A50r 2               .endif
001A50r 2               L3C95:
001A50r 2  85 CC                sta     INDX
001A52r 2               ; ----------------------------------------------------------------------------
001A52r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
001A52r 2               ; ----------------------------------------------------------------------------
001A52r 2               L3C97:
001A52r 2  A9 rr                lda     #<CON_999999999
001A54r 2  A0 rr                ldy     #>CON_999999999
001A56r 2  20 rr rr             jsr     FCOMP
001A59r 2  F0 1E                beq     L3CBE
001A5Br 2  10 12                bpl     L3CB4
001A5Dr 2               L3CA2:
001A5Dr 2  A9 rr                lda     #<CON_99999999_9
001A5Fr 2  A0 rr                ldy     #>CON_99999999_9
001A61r 2  20 rr rr             jsr     FCOMP
001A64r 2  F0 02                beq     L3CAD
001A66r 2  10 0E                bpl     L3CBB
001A68r 2               L3CAD:
001A68r 2  20 rr rr             jsr     MUL10
001A6Br 2  C6 CC                dec     INDX
001A6Dr 2  D0 EE                bne     L3CA2
001A6Fr 2               L3CB4:
001A6Fr 2  20 rr rr             jsr     DIV10
001A72r 2  E6 CC                inc     INDX
001A74r 2  D0 DC                bne     L3C97
001A76r 2               L3CBB:
001A76r 2  20 rr rr             jsr     FADDH
001A79r 2               L3CBE:
001A79r 2  20 rr rr             jsr     QINT
001A7Cr 2               ; ----------------------------------------------------------------------------
001A7Cr 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001A7Cr 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001A7Cr 2               ;
001A7Cr 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001A7Cr 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001A7Cr 2               ; ----------------------------------------------------------------------------
001A7Cr 2  A2 01                ldx     #$01
001A7Er 2  A5 CC                lda     INDX
001A80r 2  18                   clc
001A81r 2  69 0A                adc     #3*BYTES_FP-5
001A83r 2  30 09                bmi     L3CD3
001A85r 2  C9 0B                cmp     #3*BYTES_FP-4
001A87r 2  B0 06                bcs     L3CD4
001A89r 2  69 FF                adc     #$FF
001A8Br 2  AA                   tax
001A8Cr 2  A9 02                lda     #$02
001A8Er 2               L3CD3:
001A8Er 2  38                   sec
001A8Fr 2               L3CD4:
001A8Fr 2  E9 02                sbc     #$02
001A91r 2  85 CD                sta     EXPON
001A93r 2  86 CC                stx     INDX
001A95r 2  8A                   txa
001A96r 2  F0 02                beq     L3CDF
001A98r 2  10 13                bpl     L3CF2
001A9Ar 2               L3CDF:
001A9Ar 2  A4 E0                ldy     STRNG2
001A9Cr 2  A9 2E                lda     #$2E
001A9Er 2  C8                   iny
001A9Fr 2  99 FF 00             sta     STACK2-1,y
001AA2r 2  8A                   txa
001AA3r 2  F0 06                beq     L3CF0
001AA5r 2  A9 30                lda     #$30
001AA7r 2  C8                   iny
001AA8r 2  99 FF 00             sta     STACK2-1,y
001AABr 2               L3CF0:
001AABr 2  84 E0                sty     STRNG2
001AADr 2               ; ----------------------------------------------------------------------------
001AADr 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001AADr 2               ; ----------------------------------------------------------------------------
001AADr 2               L3CF2:
001AADr 2  A0 00                ldy     #$00
001AAFr 2               LDD3A:
001AAFr 2  A2 80                ldx     #$80
001AB1r 2               L3CF6:
001AB1r 2  A5 D4                lda     FAC_LAST
001AB3r 2  18                   clc
001AB4r 2               .ifndef CONFIG_SMALL
001AB4r 2  79 rr rr             adc     DECTBL+3,y
001AB7r 2  85 D4                sta     FAC+4
001AB9r 2  A5 D3                lda     FAC+3
001ABBr 2               .endif
001ABBr 2  79 rr rr             adc     DECTBL+2,y
001ABEr 2  85 D3                sta     FAC+3
001AC0r 2  A5 D2                lda     FAC+2
001AC2r 2  79 rr rr             adc     DECTBL+1,y
001AC5r 2  85 D2                sta     FAC+2
001AC7r 2  A5 D1                lda     FAC+1
001AC9r 2  79 rr rr             adc     DECTBL,y
001ACCr 2  85 D1                sta     FAC+1
001ACEr 2  E8                   inx
001ACFr 2  B0 04                bcs     L3D1A
001AD1r 2  10 DE                bpl     L3CF6
001AD3r 2  30 02                bmi     L3D1C
001AD5r 2               L3D1A:
001AD5r 2  30 DA                bmi     L3CF6
001AD7r 2               L3D1C:
001AD7r 2  8A                   txa
001AD8r 2  90 04                bcc     L3D23
001ADAr 2  49 FF                eor     #$FF
001ADCr 2  69 0A                adc     #$0A
001ADEr 2               L3D23:
001ADEr 2  69 2F                adc     #$2F
001AE0r 2  C8                   iny
001AE1r 2  C8                   iny
001AE2r 2  C8                   iny
001AE3r 2               .ifndef CONFIG_SMALL
001AE3r 2  C8                   iny
001AE4r 2               .endif
001AE4r 2  84 B6                sty     VARPNT
001AE6r 2  A4 E0                ldy     STRNG2
001AE8r 2  C8                   iny
001AE9r 2  AA                   tax
001AEAr 2  29 7F                and     #$7F
001AECr 2  99 FF 00             sta     STACK2-1,y
001AEFr 2  C6 CC                dec     INDX
001AF1r 2  D0 06                bne     L3D3E
001AF3r 2  A9 2E                lda     #$2E
001AF5r 2  C8                   iny
001AF6r 2  99 FF 00             sta     STACK2-1,y
001AF9r 2               L3D3E:
001AF9r 2  84 E0                sty     STRNG2
001AFBr 2  A4 B6                ldy     VARPNT
001AFDr 2  8A                   txa
001AFEr 2  49 FF                eor     #$FF
001B00r 2  29 80                and     #$80
001B02r 2  AA                   tax
001B03r 2  C0 24                cpy     #DECTBL_END-DECTBL
001B05r 2               .ifdef CONFIG_CBM_ALL
001B05r 2                       beq     LDD96
001B05r 2                       cpy     #$3C ; XXX
001B05r 2               .endif
001B05r 2  D0 AA                bne     L3CF6
001B07r 2               ; ----------------------------------------------------------------------------
001B07r 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
001B07r 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
001B07r 2               ; DECIMAL POINT.
001B07r 2               ; ----------------------------------------------------------------------------
001B07r 2               LDD96:
001B07r 2  A4 E0                ldy     STRNG2
001B09r 2               L3D4E:
001B09r 2  B9 FF 00             lda     STACK2-1,y
001B0Cr 2  88                   dey
001B0Dr 2  C9 30                cmp     #$30
001B0Fr 2  F0 F8                beq     L3D4E
001B11r 2  C9 2E                cmp     #$2E
001B13r 2  F0 01                beq     L3D5B
001B15r 2  C8                   iny
001B16r 2               L3D5B:
001B16r 2  A9 2B                lda     #$2B
001B18r 2  A6 CD                ldx     EXPON
001B1Ar 2  F0 2E                beq     L3D8F
001B1Cr 2  10 08                bpl     L3D6B
001B1Er 2  A9 00                lda     #$00
001B20r 2  38                   sec
001B21r 2  E5 CD                sbc     EXPON
001B23r 2  AA                   tax
001B24r 2  A9 2D                lda     #$2D
001B26r 2               L3D6B:
001B26r 2  99 01 01             sta     STACK2+1,y
001B29r 2  A9 45                lda     #$45
001B2Br 2  99 00 01             sta     STACK2,y
001B2Er 2  8A                   txa
001B2Fr 2  A2 2F                ldx     #$2F
001B31r 2  38                   sec
001B32r 2               L3D77:
001B32r 2  E8                   inx
001B33r 2  E9 0A                sbc     #$0A
001B35r 2  B0 FB                bcs     L3D77
001B37r 2  69 3A                adc     #$3A
001B39r 2  99 03 01             sta     STACK2+3,y
001B3Cr 2  8A                   txa
001B3Dr 2  99 02 01             sta     STACK2+2,y
001B40r 2  A9 00                lda     #$00
001B42r 2  99 04 01             sta     STACK2+4,y
001B45r 2  F0 08                beq     L3D94
001B47r 2               FOUT4:
001B47r 2  99 FF 00             sta     STACK2-1,y
001B4Ar 2               L3D8F:
001B4Ar 2  A9 00                lda     #$00
001B4Cr 2  99 00 01             sta     STACK2,y
001B4Fr 2               L3D94:
001B4Fr 2  A9 00                lda     #<STACK2
001B51r 2  A0 01                ldy     #>STACK2
001B53r 2  60                   rts
001B54r 2               
001B54r 2               ; ----------------------------------------------------------------------------
001B54r 2               CON_HALF:
001B54r 2               .ifdef CONFIG_SMALL
001B54r 2                       .byte   $80,$00,$00,$00
001B54r 2               .else
001B54r 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
001B58r 2  00           
001B59r 2               .endif
001B59r 2               
001B59r 2               ; ----------------------------------------------------------------------------
001B59r 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001B59r 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001B59r 2               ; ----------------------------------------------------------------------------
001B59r 2               DECTBL:
001B59r 2               .ifdef CONFIG_SMALL
001B59r 2                       .byte   $FE,$79,$60 ; -100000
001B59r 2               		.byte	$00,$27,$10 ; 10000
001B59r 2               		.byte	$FF,$FC,$18 ; -1000
001B59r 2               		.byte	$00,$00,$64 ; 100
001B59r 2               		.byte	$FF,$FF,$F6 ; -10
001B59r 2               		.byte	$00,$00,$01 ; 1
001B59r 2               .else
001B59r 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
001B5Dr 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
001B61r 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001B65r 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001B69r 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001B6Dr 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001B71r 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001B75r 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001B79r 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001B7Dr 2               .endif
001B7Dr 2               DECTBL_END:
001B7Dr 2               .ifdef CONFIG_CBM_ALL
001B7Dr 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001B7Dr 2               		.byte	$00,$03,$4B,$C0
001B7Dr 2               		.byte	$FF,$FF,$73,$60
001B7Dr 2               		.byte	$00,$00,$0E,$10
001B7Dr 2               		.byte	$FF,$FF,$FD,$A8
001B7Dr 2               		.byte	$00,$00,$00,$3C
001B7Dr 2               .endif
001B7Dr 2               .ifdef CONFIG_2
001B7Dr 2               C_ZERO = CON_HALF + 2
001B7Dr 2               .endif
001B7Dr 2               
001B7Dr 2               ; ----------------------------------------------------------------------------
001B7Dr 2               ; "SQR" FUNCTION
001B7Dr 2               ; ----------------------------------------------------------------------------
001B7Dr 2               SQR:
001B7Dr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001B80r 2  A9 rr                lda     #<CON_HALF
001B82r 2  A0 rr                ldy     #>CON_HALF
001B84r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001B87r 2               
001B87r 2               ; ----------------------------------------------------------------------------
001B87r 2               ; EXPONENTIATION OPERATION
001B87r 2               ;
001B87r 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001B87r 2               ; ----------------------------------------------------------------------------
001B87r 2               FPWRT:
001B87r 2  F0 70                beq     EXP
001B89r 2  A5 D8                lda     ARG
001B8Br 2  D0 03                bne     L3DD5
001B8Dr 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001B90r 2               L3DD5:
001B90r 2  A2 BD                ldx     #TEMP3
001B92r 2  A0 00                ldy     #$00
001B94r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001B97r 2  A5 DD                lda     ARGSIGN
001B99r 2  10 0F                bpl     L3DEF
001B9Br 2  20 rr rr             jsr     INT
001B9Er 2  A9 BD                lda     #TEMP3
001BA0r 2  A0 00                ldy     #$00
001BA2r 2  20 rr rr             jsr     FCOMP
001BA5r 2  D0 03                bne     L3DEF
001BA7r 2  98                   tya
001BA8r 2  A4 24                ldy     CHARAC
001BAAr 2               L3DEF:
001BAAr 2  20 rr rr             jsr     MFA
001BADr 2  98                   tya
001BAEr 2  48                   pha
001BAFr 2  20 rr rr             jsr     LOG
001BB2r 2  A9 BD                lda     #TEMP3
001BB4r 2  A0 00                ldy     #$00
001BB6r 2  20 rr rr             jsr     FMULT
001BB9r 2  20 rr rr             jsr     EXP
001BBCr 2  68                   pla
001BBDr 2  4A                   lsr     a
001BBEr 2  90 0A                bcc     L3E0F
001BC0r 2               
001BC0r 2               ; ----------------------------------------------------------------------------
001BC0r 2               ; NEGATE VALUE IN FAC
001BC0r 2               ; ----------------------------------------------------------------------------
001BC0r 2               NEGOP:
001BC0r 2  A5 D0                lda     FAC
001BC2r 2  F0 06                beq     L3E0F
001BC4r 2  A5 D5                lda     FACSIGN
001BC6r 2  49 FF                eor     #$FF
001BC8r 2  85 D5                sta     FACSIGN
001BCAr 2               L3E0F:
001BCAr 2  60                   rts
001BCBr 2               
001BCBr 2               ; ----------------------------------------------------------------------------
001BCBr 2               .ifdef CONFIG_SMALL
001BCBr 2               CON_LOG_E:
001BCBr 2                       .byte   $81,$38,$AA,$3B
001BCBr 2               POLY_EXP:
001BCBr 2               		.byte	$06
001BCBr 2               		.byte	$74,$63,$90,$8C
001BCBr 2               		.byte	$77,$23,$0C,$AB
001BCBr 2               		.byte	$7A,$1E,$94,$00
001BCBr 2               		.byte	$7C,$63,$42,$80
001BCBr 2               		.byte	$7E,$75,$FE,$D0
001BCBr 2               		.byte	$80,$31,$72,$15
001BCBr 2               		.byte	$81,$00,$00,$00
001BCBr 2               .else
001BCBr 2               CON_LOG_E:
001BCBr 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001BCFr 2  29           
001BD0r 2               POLY_EXP:
001BD0r 2  07                   .byte   $07
001BD1r 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001BD5r 2  56           
001BD6r 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001BDAr 2  1B           
001BDBr 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001BDFr 2  85           
001BE0r 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001BE4r 2  2A           
001BE5r 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001BE9r 2  0A           
001BEAr 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001BEEr 2  C6           
001BEFr 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001BF3r 2  10           
001BF4r 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001BF8r 2  00           
001BF9r 2               .endif
001BF9r 2               
001BF9r 2               ; ----------------------------------------------------------------------------
001BF9r 2               ; "EXP" FUNCTION
001BF9r 2               ;
001BF9r 2               ; FAC = E ^ FAC
001BF9r 2               ; ----------------------------------------------------------------------------
001BF9r 2               EXP:
001BF9r 2  A9 rr                lda     #<CON_LOG_E
001BFBr 2  A0 rr                ldy     #>CON_LOG_E
001BFDr 2  20 rr rr             jsr     FMULT
001C00r 2  A5 DF                lda     FACEXTENSION
001C02r 2  69 50                adc     #$50
001C04r 2  90 03                bcc     L3E4E
001C06r 2  20 rr rr             jsr     INCREMENT_MANTISSA
001C09r 2               L3E4E:
001C09r 2  85 C5                sta     ARGEXTENSION
001C0Br 2  20 rr rr             jsr     MAF
001C0Er 2  A5 D0                lda     FAC
001C10r 2  C9 88                cmp     #$88
001C12r 2  90 03                bcc     L3E5C
001C14r 2               L3E59:
001C14r 2  20 rr rr             jsr     OUTOFRNG
001C17r 2               L3E5C:
001C17r 2  20 rr rr             jsr     INT
001C1Ar 2  A5 24                lda     CHARAC
001C1Cr 2  18                   clc
001C1Dr 2  69 81                adc     #$81
001C1Fr 2  F0 F3                beq     L3E59
001C21r 2  38                   sec
001C22r 2  E9 01                sbc     #$01
001C24r 2  48                   pha
001C25r 2  A2 05                ldx     #BYTES_FP
001C27r 2               L3E6C:
001C27r 2  B5 D8                lda     ARG,x
001C29r 2  B4 D0                ldy     FAC,x
001C2Br 2  95 D0                sta     FAC,x
001C2Dr 2  94 D8                sty     ARG,x
001C2Fr 2  CA                   dex
001C30r 2  10 F5                bpl     L3E6C
001C32r 2  A5 C5                lda     ARGEXTENSION
001C34r 2  85 DF                sta     FACEXTENSION
001C36r 2  20 rr rr             jsr     FSUBT
001C39r 2  20 rr rr             jsr     NEGOP
001C3Cr 2  A9 rr                lda     #<POLY_EXP
001C3Er 2  A0 rr                ldy     #>POLY_EXP
001C40r 2  20 rr rr             jsr     POLYNOMIAL
001C43r 2  A9 00                lda     #$00
001C45r 2  85 DE                sta     SGNCPR
001C47r 2  68                   pla
001C48r 2  20 rr rr             jsr     ADD_EXPONENTS1
001C4Br 2  60                   rts
001C4Cr 2               
001C4Cr 2               ; ----------------------------------------------------------------------------
001C4Cr 2               ; ODD POLYNOMIAL SUBROUTINE
001C4Cr 2               ;
001C4Cr 2               ; F(X) = X * P(X^2)
001C4Cr 2               ;
001C4Cr 2               ; WHERE:  X IS VALUE IN FAC
001C4Cr 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001C4Cr 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001C4Cr 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001C4Cr 2               ;
001C4Cr 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001C4Cr 2               ; ----------------------------------------------------------------------------
001C4Cr 2               POLYNOMIAL_ODD:
001C4Cr 2  85 E0                sta     STRNG2
001C4Er 2  84 E1                sty     STRNG2+1
001C50r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001C53r 2  A9 C6                lda     #TEMP1X
001C55r 2  20 rr rr             jsr     FMULT
001C58r 2  20 rr rr             jsr     SERMAIN
001C5Br 2  A9 C6                lda     #TEMP1X
001C5Dr 2  A0 00                ldy     #$00
001C5Fr 2  4C rr rr             jmp     FMULT
001C62r 2               
001C62r 2               ; ----------------------------------------------------------------------------
001C62r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001C62r 2               ;
001C62r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001C62r 2               ;
001C62r 2               ; WHERE:  X IS VALUE IN FAC
001C62r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001C62r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001C62r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001C62r 2               ; ----------------------------------------------------------------------------
001C62r 2               POLYNOMIAL:
001C62r 2  85 E0                sta     STRNG2
001C64r 2  84 E1                sty     STRNG2+1
001C66r 2               SERMAIN:
001C66r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001C69r 2  B1 E0                lda     (STRNG2),y
001C6Br 2  85 D6                sta     SERLEN
001C6Dr 2  A4 E0                ldy     STRNG2
001C6Fr 2  C8                   iny
001C70r 2  98                   tya
001C71r 2  D0 02                bne     L3EBA
001C73r 2  E6 E1                inc     STRNG2+1
001C75r 2               L3EBA:
001C75r 2  85 E0                sta     STRNG2
001C77r 2  A4 E1                ldy     STRNG2+1
001C79r 2               L3EBE:
001C79r 2  20 rr rr             jsr     FMULT
001C7Cr 2  A5 E0                lda     STRNG2
001C7Er 2  A4 E1                ldy     STRNG2+1
001C80r 2  18                   clc
001C81r 2  69 05                adc     #BYTES_FP
001C83r 2  90 01                bcc     L3ECB
001C85r 2  C8                   iny
001C86r 2               L3ECB:
001C86r 2  85 E0                sta     STRNG2
001C88r 2  84 E1                sty     STRNG2+1
001C8Ar 2  20 rr rr             jsr     FADD
001C8Dr 2  A9 CB                lda     #TEMP2
001C8Fr 2  A0 00                ldy     #$00
001C91r 2  C6 D6                dec     SERLEN
001C93r 2  D0 E4                bne     L3EBE
001C95r 2               RTS19:
001C95r 2  60                   rts
001C96r 2               
001C96r 1               .include "chrget.s"
001C96r 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 E9                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 EA                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001C96r 2               
001C96r 2               ; ----------------------------------------------------------------------------
001C96r 2               ; "RND" FUNCTION
001C96r 2               ; ----------------------------------------------------------------------------
001C96r 2               
001C96r 2               .ifdef KBD
001C96r 2               RND:
001C96r 2                       ldx     #$10
001C96r 2                       jsr     SIGN
001C96r 2                       beq     LFC26
001C96r 2                       bmi     LFC10
001C96r 2                       lda     RNDSEED
001C96r 2                       ldy     RNDSEED+1
001C96r 2               LFBFA:
001C96r 2                       sta     FAC+2
001C96r 2                       sty     FAC+1
001C96r 2               LFBFE:
001C96r 2                       asl     a
001C96r 2                       asl     a
001C96r 2                       eor     FAC+2
001C96r 2                       asl     a
001C96r 2                       eor     FAC+1
001C96r 2                       asl     a
001C96r 2                       asl     a
001C96r 2                       asl     a
001C96r 2                       asl     a
001C96r 2                       eor     FAC+1
001C96r 2                       asl     a
001C96r 2                       rol     FAC+2
001C96r 2                       rol     FAC+1
001C96r 2               LFC10:
001C96r 2                       lda     FAC+2
001C96r 2                       dex
001C96r 2                       bne     LFBFE
001C96r 2                       sta     RNDSEED
001C96r 2                       sta     FAC+3
001C96r 2                       lda     FAC+1
001C96r 2                       sta     RNDSEED+1
001C96r 2                       lda     #$80
001C96r 2                       sta     FAC
001C96r 2                       stx     FACSIGN
001C96r 2                       jmp     NORMALIZE_FAC2
001C96r 2               LFC26:
001C96r 2                       ldy     $03CA
001C96r 2                       lda     $03C7
001C96r 2                       ora     #$01
001C96r 2               GOMOVMF:
001C96r 2                       bne     LFBFA
001C96r 2                       .byte   $F0
001C96r 2               .else
001C96r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001C96r 2               ; (non CONFIG_SMALL)
001C96r 2               CONRND1:
001C96r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001C9Ar 2               CONRND2:
001C9Ar 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001C9Er 2               RND:
001C9Er 2  20 rr rr             jsr     SIGN
001CA1r 2               .ifdef CONFIG_CBM_ALL
001CA1r 2                       bmi     L3F01
001CA1r 2                       bne     LDF63
001CA1r 2                       lda     ENTROPY
001CA1r 2                       sta     FAC+1
001CA1r 2                       lda     ENTROPY+4
001CA1r 2                       sta     FAC+2
001CA1r 2                       lda     ENTROPY+1
001CA1r 2                       sta     FAC+3
001CA1r 2                       lda     ENTROPY+5
001CA1r 2                       sta     FAC+4
001CA1r 2                       jmp     LDF88
001CA1r 2               LDF63:
001CA1r 2               .else
001CA1r 2  AA                   tax
001CA2r 2  30 18                bmi     L3F01
001CA4r 2               .endif
001CA4r 2  A9 FA                lda     #<RNDSEED
001CA6r 2  A0 00                ldy     #>RNDSEED
001CA8r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001CABr 2               .ifndef CONFIG_CBM_ALL
001CABr 2  8A                   txa
001CACr 2  F0 E7                beq     RTS19
001CAEr 2               .endif
001CAEr 2  A9 rr                lda     #<CONRND1
001CB0r 2  A0 rr                ldy     #>CONRND1
001CB2r 2  20 rr rr             jsr     FMULT
001CB5r 2  A9 rr                lda     #<CONRND2
001CB7r 2  A0 rr                ldy     #>CONRND2
001CB9r 2  20 rr rr             jsr     FADD
001CBCr 2               L3F01:
001CBCr 2  A6 D4                ldx     FAC_LAST
001CBEr 2  A5 D1                lda     FAC+1
001CC0r 2  85 D4                sta     FAC_LAST
001CC2r 2  86 D1                stx     FAC+1
001CC4r 2               .ifdef CONFIG_CBM_ALL
001CC4r 2                       ldx     FAC+2
001CC4r 2                       lda     FAC+3
001CC4r 2                       sta     FAC+2
001CC4r 2                       stx     FAC+3
001CC4r 2               LDF88:
001CC4r 2               .endif
001CC4r 2  A9 00                lda     #$00
001CC6r 2  85 D5                sta     FACSIGN
001CC8r 2  A5 D0                lda     FAC
001CCAr 2  85 DF                sta     FACEXTENSION
001CCCr 2  A9 80                lda     #$80
001CCEr 2  85 D0                sta     FAC
001CD0r 2  20 rr rr             jsr     NORMALIZE_FAC2
001CD3r 2  A2 FA                ldx     #<RNDSEED
001CD5r 2  A0 00                ldy     #>RNDSEED
001CD7r 2               GOMOVMF:
001CD7r 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001CDAr 2               .endif
001CDAr 2               
001CDAr 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$58
00001Cr 2  58           
00001Dr 2                   .else
00001Dr 2                       .byte   $80,$4F,$C7,$52,$59
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001CDAr 2               
001CDAr 2               .ifndef SYM1
001CDAr 2               SIN_COS_TAN_ATN:
001CDAr 2               ; ----------------------------------------------------------------------------
001CDAr 2               ; "COS" FUNCTION
001CDAr 2               ; ----------------------------------------------------------------------------
001CDAr 2               COS:
001CDAr 2  A9 rr                lda     #<CON_PI_HALF
001CDCr 2  A0 rr                ldy     #>CON_PI_HALF
001CDEr 2  20 rr rr             jsr     FADD
001CE1r 2               
001CE1r 2               ; ----------------------------------------------------------------------------
001CE1r 2               ; "SIN" FUNCTION
001CE1r 2               ; ----------------------------------------------------------------------------
001CE1r 2               SIN:
001CE1r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001CE4r 2  A9 rr                lda     #<CON_PI_DOUB
001CE6r 2  A0 rr                ldy     #>CON_PI_DOUB
001CE8r 2  A6 DD                ldx     ARGSIGN
001CEAr 2  20 rr rr             jsr     DIV
001CEDr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001CF0r 2  20 rr rr             jsr     INT
001CF3r 2  A9 00                lda     #$00
001CF5r 2  85 DE                sta     STRNG1
001CF7r 2  20 rr rr             jsr     FSUBT
001CFAr 2               ; ----------------------------------------------------------------------------
001CFAr 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001CFAr 2               ;
001CFAr 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001CFAr 2               ;
001CFAr 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001CFAr 2               ; ----------------------------------------------------------------------------
001CFAr 2  A9 rr                lda     #<QUARTER
001CFCr 2  A0 rr                ldy     #>QUARTER
001CFEr 2  20 rr rr             jsr     FSUB
001D01r 2  A5 D5                lda     FACSIGN
001D03r 2  48                   pha
001D04r 2  10 0D                bpl     SIN1
001D06r 2  20 rr rr             jsr     FADDH
001D09r 2  A5 D5                lda     FACSIGN
001D0Br 2  30 09                bmi     L3F5B
001D0Dr 2  A5 2D                lda     CPRMASK
001D0Fr 2  49 FF                eor     #$FF
001D11r 2  85 2D                sta     CPRMASK
001D13r 2               ; ----------------------------------------------------------------------------
001D13r 2               ; IF FALL THRU, RANGE IS 0...1/2
001D13r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001D13r 2               ; ----------------------------------------------------------------------------
001D13r 2               SIN1:
001D13r 2  20 rr rr             jsr     NEGOP
001D16r 2               ; ----------------------------------------------------------------------------
001D16r 2               ; IF FALL THRU, RANGE IS -1/2...0
001D16r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001D16r 2               ; ----------------------------------------------------------------------------
001D16r 2               L3F5B:
001D16r 2  A9 rr                lda     #<QUARTER
001D18r 2  A0 rr                ldy     #>QUARTER
001D1Ar 2  20 rr rr             jsr     FADD
001D1Dr 2  68                   pla
001D1Er 2  10 03                bpl     L3F68
001D20r 2  20 rr rr             jsr     NEGOP
001D23r 2               L3F68:
001D23r 2  A9 rr                lda     #<POLY_SIN
001D25r 2  A0 rr                ldy     #>POLY_SIN
001D27r 2  4C rr rr             jmp     POLYNOMIAL_ODD
001D2Ar 2               
001D2Ar 2               ; ----------------------------------------------------------------------------
001D2Ar 2               ; "TAN" FUNCTION
001D2Ar 2               ;
001D2Ar 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001D2Ar 2               ; ----------------------------------------------------------------------------
001D2Ar 2               TAN:
001D2Ar 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001D2Dr 2  A9 00                lda     #$00
001D2Fr 2  85 2D                sta     CPRMASK
001D31r 2  20 rr rr             jsr     SIN
001D34r 2  A2 BD                ldx     #TEMP3
001D36r 2  A0 00                ldy     #$00
001D38r 2  20 rr rr             jsr     GOMOVMF
001D3Br 2  A9 C6                lda     #TEMP1+(5-BYTES_FP)
001D3Dr 2  A0 00                ldy     #$00
001D3Fr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001D42r 2  A9 00                lda     #$00
001D44r 2  85 D5                sta     FACSIGN
001D46r 2  A5 2D                lda     CPRMASK
001D48r 2  20 rr rr             jsr     TAN1
001D4Br 2  A9 BD                lda     #TEMP3
001D4Dr 2  A0 00                ldy     #$00
001D4Fr 2  4C rr rr             jmp     FDIV
001D52r 2               TAN1:
001D52r 2  48                   pha
001D53r 2  4C rr rr             jmp     SIN1
001D56r 2               
001D56r 2               ; ----------------------------------------------------------------------------
001D56r 2               .ifdef CONFIG_SMALL
001D56r 2               CON_PI_HALF:
001D56r 2                       .byte   $81,$49,$0F,$DB
001D56r 2               CON_PI_DOUB:
001D56r 2                       .byte   $83,$49,$0F,$DB
001D56r 2               QUARTER:
001D56r 2                       .byte   $7F,$00,$00,$00
001D56r 2               POLY_SIN:
001D56r 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001D56r 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001D56r 2                       .byte   $E1,$83,$49,$0F,$DB
001D56r 2               .else
001D56r 2               CON_PI_HALF:
001D56r 2  81 49 0F DA          .byte   $81,$49,$0F,$DA,$A2
001D5Ar 2  A2           
001D5Br 2               CON_PI_DOUB:
001D5Br 2  83 49 0F DA          .byte   $83,$49,$0F,$DA,$A2
001D5Fr 2  A2           
001D60r 2               QUARTER:
001D60r 2  7F 00 00 00          .byte   $7F,$00,$00,$00,$00
001D64r 2  00           
001D65r 2               POLY_SIN:
001D65r 2  05 84 E6 1A          .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001D69r 2  2D 1B 86 28  
001D6Dr 2  07 FB F8 87          .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001D71r 2  99 68 89 01  
001D75r 2  87 23 35 DF          .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001D79r 2  E1 86 A5 5D  
001D7Dr 2  E7 28 83 49          .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001D81r 2  0F DA A2     
001D84r 2                 .ifndef CONFIG_11
001D84r 2               ; no easter egg text before BASIC 1.1
001D84r 2                 .elseif !.def(CONFIG_2A)
001D84r 2               ; ASCII encoded easter egg
001D84r 2               MICROSOFT:
001D84r 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001D84r 2                       .byte   $CE,$CA
001D84r 2                 .else
001D84r 2               ; PET encoded easter egg text since CBM2
001D84r 2               MICROSOFT:
001D84r 2  A1 54 46 8F          .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001D88r 2  13 8F 52 43  
001D8Cr 2  89 CD                .byte   $89,$CD
001D8Er 2                 .endif
001D8Er 2               .endif
001D8Er 2               
001D8Er 2               .ifndef AIM65
001D8Er 2               ; ----------------------------------------------------------------------------
001D8Er 2               ; "ATN" FUNCTION
001D8Er 2               ; ----------------------------------------------------------------------------
001D8Er 2               ATN:
001D8Er 2  A5 D5                lda     FACSIGN
001D90r 2  48                   pha
001D91r 2  10 03                bpl     L3FDB
001D93r 2  20 rr rr             jsr     NEGOP
001D96r 2               L3FDB:
001D96r 2  A5 D0                lda     FAC
001D98r 2  48                   pha
001D99r 2  C9 81                cmp     #$81
001D9Br 2  90 07                bcc     L3FE9
001D9Dr 2  A9 rr                lda     #<CON_ONE
001D9Fr 2  A0 rr                ldy     #>CON_ONE
001DA1r 2  20 rr rr             jsr     FDIV
001DA4r 2               ; ----------------------------------------------------------------------------
001DA4r 2               ; 0 <= X <= 1
001DA4r 2               ; 0 <= ATN(X) <= PI/8
001DA4r 2               ; ----------------------------------------------------------------------------
001DA4r 2               L3FE9:
001DA4r 2  A9 rr                lda     #<POLY_ATN
001DA6r 2  A0 rr                ldy     #>POLY_ATN
001DA8r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001DABr 2  68                   pla
001DACr 2  C9 81                cmp     #$81
001DAEr 2  90 07                bcc     L3FFC
001DB0r 2  A9 rr                lda     #<CON_PI_HALF
001DB2r 2  A0 rr                ldy     #>CON_PI_HALF
001DB4r 2  20 rr rr             jsr     FSUB
001DB7r 2               L3FFC:
001DB7r 2  68                   pla
001DB8r 2  10 03                bpl     L4002
001DBAr 2  4C rr rr             jmp     NEGOP
001DBDr 2               L4002:
001DBDr 2  60                   rts
001DBEr 2               
001DBEr 2               ; ----------------------------------------------------------------------------
001DBEr 2               POLY_ATN:
001DBEr 2               .ifdef CONFIG_SMALL
001DBEr 2                       .byte   $08
001DBEr 2               		.byte	$78,$3A,$C5,$37
001DBEr 2               		.byte	$7B,$83,$A2,$5C
001DBEr 2               		.byte	$7C,$2E,$DD,$4D
001DBEr 2               		.byte	$7D,$99,$B0,$1E
001DBEr 2               		.byte	$7D,$59,$ED,$24
001DBEr 2               		.byte	$7E,$91,$72,$00
001DBEr 2               		.byte	$7E,$4C,$B9,$73
001DBEr 2               		.byte	$7F,$AA,$AA,$53
001DBEr 2               		.byte	$81,$00,$00,$00
001DBEr 2               .else
001DBEr 2  0B                   .byte   $0B
001DBFr 2  76 B3 83 BD  		.byte	$76,$B3,$83,$BD,$D3
001DC3r 2  D3           
001DC4r 2  79 1E F4 A6  		.byte	$79,$1E,$F4,$A6,$F5
001DC8r 2  F5           
001DC9r 2  7B 83 FC B0  		.byte	$7B,$83,$FC,$B0,$10
001DCDr 2  10           
001DCEr 2  7C 0C 1F 67          .byte   $7C,$0C,$1F,$67,$CA
001DD2r 2  CA           
001DD3r 2  7C DE 53 CB  		.byte	$7C,$DE,$53,$CB,$C1
001DD7r 2  C1           
001DD8r 2  7D 14 64 70  		.byte	$7D,$14,$64,$70,$4C
001DDCr 2  4C           
001DDDr 2  7D B7 EA 51  		.byte	$7D,$B7,$EA,$51,$7A
001DE1r 2  7A           
001DE2r 2  7D 63 30 88  		.byte	$7D,$63,$30,$88,$7E
001DE6r 2  7E           
001DE7r 2  7E 92 44 99  		.byte	$7E,$92,$44,$99,$3A
001DEBr 2  3A           
001DECr 2  7E 4C CC 91  		.byte	$7E,$4C,$CC,$91,$C7
001DF0r 2  C7           
001DF1r 2  7F AA AA AA  		.byte	$7F,$AA,$AA,$AA,$13
001DF5r 2  13           
001DF6r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001DFAr 2  00           
001DFBr 2               .endif
001DFBr 2               
001DFBr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001DFBr 2               		.byte	$00 ; XXX
001DFBr 2               .endif
001DFBr 2               .endif
001DFBr 2               .endif
001DFBr 2               
001DFBr 1               .include "init.s"
001DFBr 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2                   .ifndef AIM65
000000r 2                     .ifndef SYM1
000000r 2  A9 rr                lda     #<QT_WRITTEN_BY
000002r 2  A0 rr                ldy     #>QT_WRITTEN_BY
000004r 2  20 rr rr             jsr     STROUT
000007r 2                     .endif
000007r 2                   .endif
000007r 2                 .endif
000007r 2               .endif
000007r 2               COLD_START:
000007r 2               .ifdef SYM1
000007r 2                       jsr     ACCESS
000007r 2               .endif
000007r 2               .ifdef KBD
000007r 2                       lda     #<LFD81
000007r 2                       sta     $03A0
000007r 2                       lda     #>LFD81
000007r 2                       sta     $03A1
000007r 2                       lda     #$20
000007r 2                       sta     $0480
000007r 2                       lda     $0352
000007r 2                       sta     $04
000007r 2                       lda     $0353
000007r 2                       sta     $05
000007r 2               .else
000007r 2                 .ifndef CBM2
000007r 2  A2 FF                ldx     #$FF
000009r 2  86 A9                stx     CURLIN+1
00000Br 2                 .endif
00000Br 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
00000Br 2                       ldx     #$FB
00000Br 2                 .elseif .def(AIM65)
00000Br 2                       ldx     #$FE
00000Br 2                 .endif
00000Br 2  9A                   txs
00000Cr 2                 .ifndef CONFIG_CBM_ALL
00000Cr 2  A9 rr                lda     #<COLD_START
00000Er 2  A0 rr                ldy     #>COLD_START
000010r 2  85 18                sta     GORESTART+1
000012r 2  84 19                sty     GORESTART+2
000014r 2                   .ifndef AIM65
000014r 2  85 1B                sta     GOSTROUT+1
000016r 2  84 1C                sty     GOSTROUT+2
000018r 2  A9 rr                lda     #<AYINT
00001Ar 2  A0 rr                ldy     #>AYINT
00001Cr 2  85 1D                sta     GOAYINT
00001Er 2  84 1E                sty     GOAYINT+1
000020r 2  A9 rr                lda     #<GIVAYF
000022r 2  A0 rr                ldy     #>GIVAYF
000024r 2  85 1F                sta     GOGIVEAYF
000026r 2  84 20                sty     GOGIVEAYF+1
000028r 2                   .endif
000028r 2                 .endif
000028r 2  A9 4C                lda     #$4C
00002Ar 2                 .ifdef CONFIG_CBM_ALL
00002Ar 2                       sta     JMPADRS
00002Ar 2                 .endif
00002Ar 2  85 17                sta     GORESTART
00002Cr 2                 .ifdef AIM65
00002Cr 2                       sta     JMPADRS
00002Cr 2                       sta     ATN
00002Cr 2                       sta     GOSTROUT
00002Cr 2                 .else
00002Cr 2                 .ifndef CONFIG_CBM_ALL
00002Cr 2  85 1A                sta     GOSTROUT
00002Er 2  85 C3                sta     JMPADRS
000030r 2                 .endif
000030r 2                 .ifdef SYM1
000030r 2                       sta     USR1
000030r 2                       sta     USR3
000030r 2                       sta     USR2
000030r 2                 .endif
000030r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000030r 2  85 21                sta     USR
000032r 2                 .endif
000032r 2                 .endif
000032r 2               
000032r 2                 .ifndef CONFIG_RAM
000032r 2                   .ifdef APPLE
000032r 2                         lda     #<USR_FUNC
000032r 2                         ldy     #>USR_FUNC
000032r 2                   .else
000032r 2  A9 rr                  lda     #<IQERR
000034r 2  A0 rr                  ldy     #>IQERR
000036r 2                   .endif
000036r 2                   .ifdef AIM65
000036r 2                         sta     ATN+1
000036r 2                         sty     ATN+2
000036r 2                         sta     GOSTROUT+1
000036r 2                         sty     GOSTROUT+2
000036r 2                   .else
000036r 2  85 22                  sta     USR+1
000038r 2  84 23                  sty     USR+2
00003Ar 2                     .ifdef SYM1
00003Ar 2                         sta     USR1+1
00003Ar 2                         sty     USR1+2
00003Ar 2                         lda     #<DUMPT
00003Ar 2                         ldy     #>DUMPT
00003Ar 2                         sta     USR2+1
00003Ar 2                         sty     USR2+2
00003Ar 2                         lda     #<L8C78
00003Ar 2                         ldy     #>L8C78
00003Ar 2                         sta     USR3+1
00003Ar 2                         sty     USR3+2
00003Ar 2                     .endif
00003Ar 2                   .endif
00003Ar 2                 .endif
00003Ar 2                 .ifndef CBM1
00003Ar 2  A9 50                lda     #WIDTH
00003Cr 2  85 31                sta     Z17
00003Er 2  A9 38                lda     #WIDTH2
000040r 2  85 32                sta     Z18
000042r 2                 .endif
000042r 2                 .ifdef EATER
000042r 2                       jsr     LCDINIT
000042r 2                 .endif
000042r 2               .endif
000042r 2               
000042r 2               ; All non-CONFIG_SMALL versions of BASIC have
000042r 2               ; the same bug here: While the number of bytes
000042r 2               ; to be copied is correct for CONFIG_SMALL,
000042r 2               ; it is one byte short on non-CONFIG_SMALL:
000042r 2               ; It seems the "ldx" value below has been
000042r 2               ; hardcoded. So on these configurations,
000042r 2               ; the last byte of GENERIC_RNDSEED, which
000042r 2               ; is 5 bytes instead of 4, does not get copied -
000042r 2               ; which is nothing major, because it is just
000042r 2               ; the least significant 8 bits of the mantissa
000042r 2               ; of the random number seed.
000042r 2               ; KBD added three bytes to CHRGET and removed
000042r 2               ; the random number seed, but only adjusted
000042r 2               ; the number of bytes by adding 3 - this
000042r 2               ; copies four bytes too many, which is no
000042r 2               ; problem.
000042r 2               .ifdef CONFIG_SMALL
000042r 2                 .ifdef KBD
000042r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000042r 2                 .else
000042r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000042r 2                 .endif
000042r 2               .else
000042r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
000044r 2               .endif
000044r 2               L4098:
000044r 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000047r 2  95 E1                sta     CHRGET-1,x
000049r 2  CA                   dex
00004Ar 2  D0 F8                bne     L4098
00004Cr 2               .ifdef CONFIG_2
00004Cr 2  A9 03                lda     #$03
00004Er 2  85 C2                sta     DSCLEN
000050r 2               .endif
000050r 2               .ifndef KBD
000050r 2  8A                   txa
000051r 2  85 D7                sta     SHIFTSIGNEXT
000053r 2                 .ifdef CONFIG_CBM_ALL
000053r 2                       sta     CURDVC
000053r 2                 .endif
000053r 2  85 87                sta     LASTPT+1
000055r 2                 .ifndef AIM65
000055r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000055r 2  85 2F                sta     Z15
000057r 2                 .endif
000057r 2                 .endif
000057r 2                 .ifndef CONFIG_11
000057r 2                       sta     POSX
000057r 2                 .endif
000057r 2  48                   pha
000058r 2  85 2E                sta     Z14
00005Ar 2                 .ifndef CBM2
00005Ar 2                  .ifndef AIM65
00005Ar 2                  .ifndef SYM1
00005Ar 2                   .ifndef MICROTAN
00005Ar 2                       lda     #$03
00005Ar 2                       sta     DSCLEN
00005Ar 2                   .endif
00005Ar 2                  .endif
00005Ar 2                  .endif
00005Ar 2                   .ifndef CONFIG_11
00005Ar 2                       lda     #$2C
00005Ar 2                       sta     LINNUM+1
00005Ar 2                   .endif
00005Ar 2  20 rr rr             jsr     CRDO
00005Dr 2                 .endif
00005Dr 2                 .ifdef CBM2
00005Dr 2                       inx
00005Dr 2                       stx     INPUTBUFFER-3
00005Dr 2                       stx     INPUTBUFFER-4
00005Dr 2                 .endif
00005Dr 2                 .ifdef APPLE
00005Dr 2                       lda     #$01
00005Dr 2                       sta     INPUTBUFFER-3
00005Dr 2                       sta     INPUTBUFFER-4
00005Dr 2                 .endif
00005Dr 2  A2 88                ldx     #TEMPST
00005Fr 2  86 85                stx     TEMPPT
000061r 2               .ifndef CONFIG_CBM_ALL
000061r 2  A9 rr                lda     #<QT_MEMORY_SIZE
000063r 2  A0 rr                ldy     #>QT_MEMORY_SIZE
000065r 2  20 rr rr             jsr     STROUT
000068r 2                 .ifdef APPLE
000068r 2                       jsr     INLINX
000068r 2                 .else
000068r 2  20 rr rr             jsr     NXIN
00006Br 2                 .endif
00006Br 2  86 E9                stx     TXTPTR
00006Dr 2  84 EA                sty     TXTPTR+1
00006Fr 2  20 E2 00             jsr     CHRGET
000072r 2                 .ifndef AIM65
000072r 2                   .ifndef SYM1
000072r 2  C9 41                cmp     #$41
000074r 2  F0 8A                beq     PR_WRITTEN_BY
000076r 2                   .endif
000076r 2                 .endif
000076r 2  A8                   tay
000077r 2  D0 25                bne     L40EE
000079r 2               .endif
000079r 2               .ifndef CBM2
000079r 2  A9 00                lda     #<RAMSTART2
00007Br 2               .endif
00007Br 2  A0 04                ldy     #>RAMSTART2
00007Dr 2               .ifdef CONFIG_2
00007Dr 2  85 9A                sta     TXTTAB
00007Fr 2  84 9B                sty     TXTTAB+1
000081r 2               .endif
000081r 2  85 33                sta     LINNUM
000083r 2  84 34                sty     LINNUM+1
000085r 2               .ifdef CBM2
000085r 2               		tay
000085r 2               .else
000085r 2  A0 00                ldy     #$00
000087r 2               .endif
000087r 2               L40D7:
000087r 2  E6 33                inc     LINNUM
000089r 2  D0 02                bne     L40DD
00008Br 2  E6 34                inc     LINNUM+1
00008Dr 2               .ifdef CBM1
00008Dr 2               ; CBM: hard RAM top limit is $8000
00008Dr 2                       lda     LINNUM+1
00008Dr 2                       cmp     #$80
00008Dr 2                       beq     L40FA
00008Dr 2               .endif
00008Dr 2               .ifdef CBM2
00008Dr 2               ; optimized version of the CBM1 code
00008Dr 2                       bmi     L40FA
00008Dr 2               .endif
00008Dr 2               .if .def(AIM65)
00008Dr 2               ; AIM65: hard RAM top limit is $A000
00008Dr 2                       lda     LINNUM+1
00008Dr 2                       cmp     #$A0
00008Dr 2                       beq     L40FA
00008Dr 2               .endif
00008Dr 2               L40DD:
00008Dr 2               .ifdef CONFIG_2
00008Dr 2  A9 55                lda     #$55 ; 01010101 / 10101010
00008Fr 2               .else
00008Fr 2                       lda     #$92 ; 10010010 / 00100100
00008Fr 2               .endif
00008Fr 2  91 33                sta     (LINNUM),y
000091r 2  D1 33                cmp     (LINNUM),y
000093r 2  D0 15                bne     L40FA
000095r 2  0A                   asl     a
000096r 2  91 33                sta     (LINNUM),y
000098r 2  D1 33                cmp     (LINNUM),y
00009Ar 2               .ifdef CONFIG_CBM_ALL
00009Ar 2                       beq     L40D7
00009Ar 2               .else
00009Ar 2                 .ifndef CONFIG_11
00009Ar 2                       beq     L40D7; old: faster
00009Ar 2                       bne     L40FA
00009Ar 2                 .else
00009Ar 2  D0 0E                bne     L40FA; new: slower
00009Cr 2  F0 E9                beq     L40D7
00009Er 2                 .endif
00009Er 2               L40EE:
00009Er 2  20 E8 00             jsr     CHRGOT
0000A1r 2  20 rr rr             jsr     LINGET
0000A4r 2  A8                   tay
0000A5r 2  F0 03                beq     L40FA
0000A7r 2  4C rr rr             jmp     SYNERR
0000AAr 2               .endif
0000AAr 2               L40FA:
0000AAr 2  A5 33                lda     LINNUM
0000ACr 2  A4 34                ldy     LINNUM+1
0000AEr 2  85 A6                sta     MEMSIZ
0000B0r 2  84 A7                sty     MEMSIZ+1
0000B2r 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
0000B2r 2                       sta     FRETOP
0000B2r 2                       sty     FRETOP+1
0000B2r 2               .endif
0000B2r 2               L4106:
0000B2r 2               .ifndef CONFIG_CBM_ALL
0000B2r 2                 .ifdef APPLE
0000B2r 2                       lda     #$FF
0000B2r 2                       jmp     L2829
0000B2r 2                       .word	STROUT ; PATCH!
0000B2r 2                       jsr     NXIN
0000B2r 2                 .else
0000B2r 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
0000B4r 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
0000B6r 2  20 rr rr             jsr     STROUT
0000B9r 2  20 rr rr             jsr     NXIN
0000BCr 2                 .endif
0000BCr 2  86 E9                stx     TXTPTR
0000BEr 2  84 EA                sty     TXTPTR+1
0000C0r 2  20 E2 00             jsr     CHRGET
0000C3r 2  A8                   tay
0000C4r 2  F0 1C                beq     L4136
0000C6r 2  20 rr rr             jsr     LINGET
0000C9r 2  A5 34                lda     LINNUM+1
0000CBr 2  D0 E5                bne     L4106
0000CDr 2  A5 33                lda     LINNUM
0000CFr 2  C9 10                cmp     #$10
0000D1r 2  90 DF                bcc     L4106
0000D3r 2               L2829:
0000D3r 2  85 31                sta     Z17
0000D5r 2               L4129:
0000D5r 2                 .ifdef AIM65
0000D5r 2                       sbc     #$0A
0000D5r 2                 .else
0000D5r 2  E9 0E                sbc     #$0E
0000D7r 2                 .endif
0000D7r 2  B0 FC                bcs     L4129
0000D9r 2  49 FF                eor     #$FF
0000DBr 2                 .ifdef AIM65
0000DBr 2                       sbc     #$08
0000DBr 2                 .else
0000DBr 2  E9 0C                sbc     #$0C
0000DDr 2                 .endif
0000DDr 2  18                   clc
0000DEr 2  65 31                adc     Z17
0000E0r 2  85 32                sta     Z18
0000E2r 2               .endif
0000E2r 2               L4136:
0000E2r 2               .ifdef CONFIG_RAM
0000E2r 2                       lda     #<QT_WANT
0000E2r 2                       ldy     #>QT_WANT
0000E2r 2                       jsr     STROUT
0000E2r 2                       jsr     NXIN
0000E2r 2                       stx     TXTPTR
0000E2r 2                       sty     TXTPTR+1
0000E2r 2                       jsr     CHRGET
0000E2r 2                       ldx     #<RAMSTART1
0000E2r 2                       ldy     #>RAMSTART1
0000E2r 2                       cmp     #'Y'
0000E2r 2                       beq     L4183
0000E2r 2                       cmp     #'A'
0000E2r 2                       beq     L4157
0000E2r 2                       cmp     #'N'
0000E2r 2                       bne     L4136
0000E2r 2               L4157:
0000E2r 2                       ldx     #<IQERR
0000E2r 2                       ldy     #>IQERR
0000E2r 2                       stx     UNFNC_ATN
0000E2r 2                       sty     UNFNC_ATN+1
0000E2r 2                       ldx     #<ATN	; overwrite starting
0000E2r 2                       ldy     #>ATN	; with ATN
0000E2r 2                       cmp     #'A'
0000E2r 2                       beq     L4183
0000E2r 2                       ldx     #<IQERR
0000E2r 2                       ldy     #>IQERR
0000E2r 2                       stx     UNFNC_COS
0000E2r 2                       sty     UNFNC_COS+1
0000E2r 2                       stx     UNFNC_TAN
0000E2r 2                       sty     UNFNC_TAN+1
0000E2r 2                       stx     UNFNC_SIN
0000E2r 2                       sty     UNFNC_SIN+1
0000E2r 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000E2r 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000E2r 2               L4183:
0000E2r 2               .else
0000E2r 2  A2 00                ldx     #<RAMSTART2
0000E4r 2  A0 04                ldy     #>RAMSTART2
0000E6r 2               .endif
0000E6r 2  86 9A                stx     TXTTAB
0000E8r 2  84 9B                sty     TXTTAB+1
0000EAr 2  A0 00                ldy     #$00
0000ECr 2  98                   tya
0000EDr 2  91 9A                sta     (TXTTAB),y
0000EFr 2  E6 9A                inc     TXTTAB
0000F1r 2               .ifndef CBM2
0000F1r 2  D0 02                bne     L4192
0000F3r 2  E6 9B                inc     TXTTAB+1
0000F5r 2               L4192:
0000F5r 2               .endif
0000F5r 2               .if CONFIG_SCRTCH_ORDER = 1
0000F5r 2  20 rr rr             jsr     SCRTCH
0000F8r 2               .endif
0000F8r 2  A5 9A                lda     TXTTAB
0000FAr 2  A4 9B                ldy     TXTTAB+1
0000FCr 2  20 rr rr             jsr     REASON
0000FFr 2               .ifdef CBM2
0000FFr 2                       lda     #<QT_BASIC
0000FFr 2                       ldy     #>QT_BASIC
0000FFr 2                       jsr     STROUT
0000FFr 2               .else
0000FFr 2  20 rr rr             jsr     CRDO
000102r 2               .endif
000102r 2  A5 A6                lda     MEMSIZ
000104r 2  38                   sec
000105r 2  E5 9A                sbc     TXTTAB
000107r 2  AA                   tax
000108r 2  A5 A7                lda     MEMSIZ+1
00010Ar 2  E5 9B                sbc     TXTTAB+1
00010Cr 2  20 rr rr             jsr     LINPRT
00010Fr 2  A9 rr                lda     #<QT_BYTES_FREE
000111r 2  A0 rr                ldy     #>QT_BYTES_FREE
000113r 2  20 rr rr             jsr     STROUT
000116r 2               .if CONFIG_SCRTCH_ORDER = 2
000116r 2                       jsr     SCRTCH
000116r 2               .endif
000116r 2               .ifdef CONFIG_CBM_ALL
000116r 2                       jmp     RESTART
000116r 2               .elseif .def(AIM65)
000116r 2                       lda     #<CRDO
000116r 2                       ldy     #>CRDO
000116r 2                       sta     GORESTART+1
000116r 2                       sty     GORESTART+2
000116r 2                       jmp     RESTART
000116r 2               .else
000116r 2  A9 rr                lda     #<STROUT
000118r 2  A0 rr                ldy     #>STROUT
00011Ar 2  85 1B                sta     GOSTROUT+1
00011Cr 2  84 1C                sty     GOSTROUT+2
00011Er 2                 .if CONFIG_SCRTCH_ORDER = 3
00011Er 2                        jsr     SCRTCH
00011Er 2                 .endif
00011Er 2  A9 rr                lda     #<RESTART
000120r 2  A0 rr                ldy     #>RESTART
000122r 2  85 18                sta     GORESTART+1
000124r 2  84 19                sty     GORESTART+2
000126r 2  6C 18 00             jmp     (GORESTART+1)
000129r 2               .endif
000129r 2               
000129r 2                 .if .def(CONFIG_RAM) || .def(OSI)
000129r 2               ; OSI is compiled for ROM, but includes
000129r 2               ; this unused string
000129r 2               QT_WANT:
000129r 2                       .byte   "WANT SIN-COS-TAN-ATN"
000129r 2                       .byte   0
000129r 2                 .endif
000129r 2               QT_WRITTEN_BY:
000129r 2                 .ifndef CONFIG_CBM_ALL
000129r 2                 .if !(.def(AIM65) || .def(SYM1))
000129r 2                   .ifdef APPLE
000129r 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
000129r 2               		.byte	CR,0
000129r 2                   .else
000129r 2  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
00012Cr 2                     .ifndef CONFIG_11
00012Cr 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
00012Cr 2                     .else
00012Cr 2  57 52 49 54          .byte   "WRITTEN BY WEILAND & GATES"
000130r 2  54 45 4E 20  
000134r 2  42 59 20 57  
000146r 2                     .endif
000146r 2  0D 0A 00             .byte   CR,LF,0
000149r 2                   .endif
000149r 2                  .endif
000149r 2               QT_MEMORY_SIZE:
000149r 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
00014Dr 2  52 59 20 53  
000151r 2  49 5A 45     
000154r 2  00                   .byte   0
000155r 2               QT_TERMINAL_WIDTH:
000155r 2                   .if !(.def(AIM65) || .def(SYM1))
000155r 2  54 45 52 4D          .byte   "TERMINAL "
000159r 2  49 4E 41 4C  
00015Dr 2  20           
00015Er 2                   .endif
00015Er 2  57 49 44 54          .byte   "WIDTH"
000162r 2  48           
000163r 2  00                   .byte   0
000164r 2                 .endif
000164r 2               QT_BYTES_FREE:
000164r 2  20 42 59 54          .byte   " BYTES FREE"
000168r 2  45 53 20 46  
00016Cr 2  52 45 45     
00016Fr 2                 .ifdef CBM1
00016Fr 2                 .elseif .def(CBM2)
00016Fr 2                       .byte   CR,0
00016Fr 2                 .elseif .def(APPLE)
00016Fr 2                       .byte   0
00016Fr 2                 .else
00016Fr 2  0D 0A 0D 0A          .byte   CR,LF,CR,LF
000173r 2                 .endif
000173r 2               QT_BASIC:
000173r 2                 .ifdef OSI
000173r 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
000173r 2                 .endif
000173r 2                 .ifdef KIM
000173r 2                       .byte   "MOS TECH 6502 BASIC V1.1"
000173r 2                 .endif
000173r 2                 .ifdef MICROTAN
000173r 2  4D 49 43 52          .byte   "MICROTAN BASIC"
000177r 2  4F 54 41 4E  
00017Br 2  20 42 41 53  
000181r 2                 .endif
000181r 2                 .ifdef AIM65
000181r 2                       .byte   "  AIM 65 BASIC V1.1"
000181r 2                 .endif
000181r 2                 .ifdef SYM1
000181r 2                       .byte   "BASIC V1.1"
000181r 2                 .endif
000181r 2                 .ifdef CBM1
000181r 2                       .byte   $13 ; HOME
000181r 2                       .byte   "*** COMMODORE BASIC ***"
000181r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
000181r 2                 .endif
000181r 2                 .ifdef CBM2
000181r 2                       .byte   "### COMMODORE BASIC ###"
000181r 2                       .byte   CR,CR,0
000181r 2                 .endif
000181r 2                 .ifdef APPLE
000181r 2                       .byte   LF,CR,LF
000181r 2               		.byte	"APPLE BASIC V1.1"
000181r 2                 .endif
000181r 2                 .ifndef CONFIG_CBM_ALL
000181r 2  0D 0A                .byte   CR,LF
000183r 2                   .ifdef MICROTAN
000183r 2  28 43 29 20          .byte   "(C) 1980 MICROSOFT"
000187r 2  31 39 38 30  
00018Br 2  20 4D 49 43  
000195r 2                   .elseif .def(AIM65)
000195r 2                       .byte   0
000195r 2                       .byte   "(C) 1978 MICROSOFT"
000195r 2                   .elseif .def(SYM1)
000195r 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
000195r 2                   .else
000195r 2                       .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
000195r 2                   .endif
000195r 2  0D 0A                .byte   CR,LF
000197r 2                     .ifndef AIM65
000197r 2  00                   .byte   0
000198r 2                     .endif
000198r 2                 .endif
000198r 2               .endif
000198r 2               
000198r 1               .include "extra.s"
000198r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef MICROTAN
000000r 2               .include "microtan_extra.s"
000000r 3  00 00 00 00  		.byte 0,0,0,0,0,0,0,0,0
000004r 3  00 00 00 00  
000008r 3  00           
000009r 3               LE210:
000009r 3  4C rr rr             jmp     LE34A
00000Cr 3               LE213:
00000Cr 3  4C rr rr             jmp     LE34A
00000Fr 3               LE216:
00000Fr 3  4C rr rr             jmp     LE33C
000012r 3               LE219:
000012r 3  4C rr rr             jmp     LE252
000015r 3               LE21C:
000015r 3  4C rr rr             jmp     LE6AD
000018r 3               LE21F:
000018r 3  4C rr rr             jmp     LE6B9
00001Br 3               LE222:
00001Br 3  68                   pla
00001Cr 3  A8                   tay
00001Dr 3  85 5E                sta     $5E
00001Fr 3  68                   pla
000020r 3  85 5F                sta     $5F
000022r 3  48                   pha
000023r 3  98                   tya
000024r 3  48                   pha
000025r 3  A0 03                ldy     #$03
000027r 3               LE22E:
000027r 3  B1 5E                lda     ($5E),y
000029r 3  F0 06                beq     LE238
00002Br 3  20 75 FE             jsr     LFE75
00002Er 3  C8                   iny
00002Fr 3  D0 F6                bne     LE22E
000031r 3               LE238:
000031r 3  20 FA FD             jsr     LFDFA
000034r 3  A5 01                lda     $01
000036r 3  C9 03                cmp     #$03
000038r 3  F0 0B                beq     LE24C
00003Ar 3  C9 0D                cmp     #$0D
00003Cr 3  F0 06                beq     LE24B
00003Er 3  20 75 FE             jsr     LFE75
000041r 3  4C rr rr             jmp     LE238
000044r 3               LE24B:
000044r 3  60                   rts
000045r 3               LE24C:
000045r 3  68                   pla
000046r 3  68                   pla
000047r 3  68                   pla
000048r 3  4C rr rr             jmp     LE2D6
00004Br 3               LE252:
00004Br 3  98                   tya
00004Cr 3  48                   pha
00004Dr 3  20 rr rr             jsr     LE222
000050r 3  B0 07                bcs     LE260
000052r 3  46 41 53 54          .byte   "FAST?"
000056r 3  3F           
000057r 3  0D 00                .byte   $0D,$00
000059r 3               LE260:
000059r 3  A0 00                ldy     #$00
00005Br 3  84 50                sty     $50
00005Dr 3  84 31                sty     $31
00005Fr 3  AD E0 03             lda     $03E0
000062r 3  C9 59                cmp     #$59
000064r 3  F0 02                beq     LE26F
000066r 3  E6 50                inc     $50
000068r 3               LE26F:
000068r 3  68                   pla
000069r 3  48                   pha
00006Ar 3  F0 19                beq     LE28C
00006Cr 3  20 rr rr             jsr     LE222
00006Fr 3  B0 08                bcs     LE280
000071r 3  0D 45 58             ora     $5845
000074r 3  41 4D 3F             .byte   "AM?"
000077r 3  0D 00                .byte   $0D,$00
000079r 3               LE280:
000079r 3  AD E0 03             lda     $03E0
00007Cr 3  C9 59                cmp     #$59
00007Er 3  F0 05                beq     LE28C
000080r 3  68                   pla
000081r 3  18                   clc
000082r 3  69 01                adc     #$01
000084r 3  48                   pha
000085r 3               LE28C:
000085r 3  20 rr rr             jsr     LE222
000088r 3  B0 0C                bcs     LE29D
00008Ar 3  0D 46 49             ora     $4946
00008Dr 3  4C 45 4E 41          .byte   "LENAME?"
000091r 3  4D 45 3F     
000094r 3  0D 00                .byte   $0D,$00
000096r 3               LE29D:
000096r 3  A0 FF                ldy     #$FF
000098r 3  20 06 F0             jsr     LF006
00009Br 3  B0 E8                bcs     LE28C
00009Dr 3  C9 FF                cmp     #$FF
00009Fr 3  D0 E4                bne     LE28C
0000A1r 3  A9 00                lda     #$00
0000A3r 3  A9 42                lda     #$42
0000A5r 3  20 03 F0             jsr     LF003
0000A8r 3  20 00 F0             jsr     LF000
0000ABr 3  68                   pla
0000ACr 3  D0 0E                bne     LE2C3
0000AEr 3  A0 20                ldy     #$20
0000B0r 3  20 09 F0             jsr     LF009
0000B3r 3  20 0C F0             jsr     LF00C
0000B6r 3  20 1E F0             jsr     LF01E
0000B9r 3  4C rr rr             jmp     LE2D6
0000BCr 3               LE2C3:
0000BCr 3  48                   pha
0000BDr 3  20 1B F0             jsr     LF01B
0000C0r 3  68                   pla
0000C1r 3  18                   clc
0000C2r 3  E9 00                sbc     #$00
0000C4r 3  20 21 F0             jsr     LF021
0000C7r 3  A5 1E                lda     $1E
0000C9r 3  85 9C                sta     $9C
0000CBr 3  A5 1F                lda     $1F
0000CDr 3  85 9D                sta     $9D
0000CFr 3               LE2D6:
0000CFr 3  20 73 FE             jsr     LFE73
0000D2r 3  58                   cli
0000D3r 3  A9 00                lda     #$00
0000D5r 3  8D CB BF             sta     $BFCB
0000D8r 3  8D C2 BF             sta     $BFC2
0000DBr 3  A2 00                ldx     #$00
0000DDr 3               LE2E4:
0000DDr 3  68                   pla
0000DEr 3  95 13                sta     $13,x
0000E0r 3  E8                   inx
0000E1r 3  E0 4D                cpx     #$4D
0000E3r 3  D0 F8                bne     LE2E4
0000E5r 3  60                   rts
0000E6r 3  A9 0F                lda     #$0F
0000E8r 3  85 0C                sta     $0C
0000EAr 3  A9 00                lda     #$00
0000ECr 3  8D C2 BF             sta     $BFC2
0000EFr 3  85 15                sta     $15
0000F1r 3  85 16                sta     $16
0000F3r 3  4C rr rr             jmp     COLD_START
0000F6r 3               LE2FD:
0000F6r 3  48                   pha
0000F7r 3  8A                   txa
0000F8r 3  48                   pha
0000F9r 3  A9 02                lda     #$02
0000FBr 3  85 14                sta     $14
0000FDr 3  A9 00                lda     #$00
0000FFr 3               LE306:
0000FFr 3  CA                   dex
000100r 3  30 09                bmi     LE312
000102r 3  18                   clc
000103r 3  69 20                adc     #$20
000105r 3  90 F8                bcc     LE306
000107r 3  E6 14                inc     $14
000109r 3  D0 F4                bne     LE306
00010Br 3               LE312:
00010Br 3  85 13                sta     $13
00010Dr 3  68                   pla
00010Er 3  AA                   tax
00010Fr 3  68                   pla
000110r 3  60                   rts
000111r 3               LE318:
000111r 3  20 rr rr             jsr     LE2FD
000114r 3  91 13                sta     ($13),y
000116r 3  60                   rts
000117r 3               LE31E:
000117r 3  48                   pha
000118r 3  8A                   txa
000119r 3  48                   pha
00011Ar 3  A2 00                ldx     #$00
00011Cr 3               LE323:
00011Cr 3  BD 20 02             lda     $0220,x
00011Fr 3  9D 00 02             sta     $0200,x
000122r 3  E8                   inx
000123r 3  E0 A0                cpx     #$A0
000125r 3  D0 F5                bne     LE323
000127r 3  A9 20                lda     #$20
000129r 3  A2 1F                ldx     #$1F
00012Br 3               LE332:
00012Br 3  9D 80 02             sta     $0280,x
00012Er 3  CA                   dex
00012Fr 3  10 FA                bpl     LE332
000131r 3  68                   pla
000132r 3  AA                   tax
000133r 3               LE33A:
000133r 3  68                   pla
000134r 3  60                   rts
000135r 3               LE33C:
000135r 3  48                   pha
000136r 3  A5 16                lda     $16
000138r 3  F0 05                beq     LE346
00013Ar 3  10 F7                bpl     LE33A
00013Cr 3  4C rr rr             jmp     LE714
00013Fr 3               LE346:
00013Fr 3  68                   pla
000140r 3  4C rr rr             jmp     LC7A5
000143r 3               LE34A:
000143r 3  A5 16                lda     $16
000145r 3  F0 09                beq     LE357
000147r 3  30 03                bmi     LE353
000149r 3  4C rr rr             jmp     LE778
00014Cr 3               LE353:
00014Cr 3  A9 00                lda     #$00
00014Er 3  85 16                sta     $16
000150r 3               LE357:
000150r 3  A5 15                lda     $15
000152r 3  F0 03                beq     LE35E
000154r 3  4C rr rr             jmp     LE660
000157r 3               LE35E:
000157r 3  20 rr rr             jsr     LC764
00015Ar 3  C9 05                cmp     #$05
00015Cr 3  F0 01                beq     LE366
00015Er 3  60                   rts
00015Fr 3               LE366:
00015Fr 3  86 0E                stx     $0E
000161r 3  A9 00                lda     #$00
000163r 3  85 33                sta     $33
000165r 3  85 34                sta     $34
000167r 3  A2 FF                ldx     #$FF
000169r 3               LE370:
000169r 3  E8                   inx
00016Ar 3  E4 0E                cpx     $0E
00016Cr 3  F0 53                beq     LE3C8
00016Er 3  A5 34                lda     $34
000170r 3  C9 19                cmp     #$19
000172r 3  B0 2C                bcs     LE3A7
000174r 3  48                   pha
000175r 3  A5 33                lda     $33
000177r 3  0A                   asl     a
000178r 3  26 34                rol     $34
00017Ar 3  0A                   asl     a
00017Br 3  26 34                rol     $34
00017Dr 3  65 33                adc     $33
00017Fr 3  85 33                sta     $33
000181r 3  68                   pla
000182r 3  65 34                adc     $34
000184r 3  85 34                sta     $34
000186r 3  06 33                asl     $33
000188r 3  26 34                rol     $34
00018Ar 3  B5 35                lda     $35,x
00018Cr 3  38                   sec
00018Dr 3  E9 30                sbc     #$30
00018Fr 3  30 0F                bmi     LE3A7
000191r 3  C9 3A                cmp     #$3A
000193r 3  B0 0B                bcs     LE3A7
000195r 3  18                   clc
000196r 3  65 33                adc     $33
000198r 3  85 33                sta     $33
00019Ar 3  90 CD                bcc     LE370
00019Cr 3  E6 34                inc     $34
00019Er 3  D0 C9                bne     LE370
0001A0r 3               LE3A7:
0001A0r 3  A2 00                ldx     #$00
0001A2r 3               LE3A9:
0001A2r 3  BD rr rr             lda     LE3B4,x
0001A5r 3  F0 15                beq     LE3C3
0001A7r 3  20 75 FE             jsr     LFE75
0001AAr 3  E8                   inx
0001ABr 3  D0 F5                bne     LE3A9
0001ADr 3               LE3B4:
0001ADr 3  0D 4E 4F             ora     $4F4E
0001B0r 3  20 53 55 43          .byte   " SUCH LINE"
0001B4r 3  48 20 4C 49  
0001B8r 3  4E 45        
0001BAr 3               
0001BAr 3  0D 00                .byte   $0D,$00
0001BCr 3               LE3C3:
0001BCr 3  A2 00                ldx     #$00
0001BEr 3  A9 0D                lda     #$0D
0001C0r 3  60                   rts
0001C1r 3               LE3C8:
0001C1r 3  A2 09                ldx     #$09
0001C3r 3               LE3CA:
0001C3r 3  A9 04                lda     #$04
0001C5r 3  95 45                sta     $45,x
0001C7r 3  CA                   dex
0001C8r 3  A9 01                lda     #$01
0001CAr 3  95 45                sta     $45,x
0001CCr 3  CA                   dex
0001CDr 3  10 F4                bpl     LE3CA
0001CFr 3  85 CE                sta     $CE
0001D1r 3  A9 04                lda     #$04
0001D3r 3  85 CF                sta     $CF
0001D5r 3  86 7D                stx     $7D
0001D7r 3  86 7B                stx     $7B
0001D9r 3               LE3E0:
0001D9r 3  A0 03                ldy     #$03
0001DBr 3  B1 CE                lda     ($CE),y
0001DDr 3  48                   pha
0001DEr 3  88                   dey
0001DFr 3  B1 CE                lda     ($CE),y
0001E1r 3  48                   pha
0001E2r 3  88                   dey
0001E3r 3  B1 CE                lda     ($CE),y
0001E5r 3  AA                   tax
0001E6r 3  88                   dey
0001E7r 3  B1 CE                lda     ($CE),y
0001E9r 3  85 CE                sta     $CE
0001EBr 3  86 CF                stx     $CF
0001EDr 3  85 4F                sta     $4F
0001EFr 3  86 50                stx     $50
0001F1r 3  68                   pla
0001F2r 3  AA                   tax
0001F3r 3  68                   pla
0001F4r 3  C5 34                cmp     $34
0001F6r 3  D0 04                bne     LE403
0001F8r 3  E4 33                cpx     $33
0001FAr 3  F0 16                beq     LE419
0001FCr 3               LE403:
0001FCr 3  86 7A                stx     $7A
0001FEr 3  85 7B                sta     $7B
000200r 3  A2 00                ldx     #$00
000202r 3               LE409:
000202r 3  B5 47                lda     $47,x
000204r 3  95 45                sta     $45,x
000206r 3  E8                   inx
000207r 3  E0 0A                cpx     #$0A
000209r 3  D0 F7                bne     LE409
00020Br 3  C8                   iny
00020Cr 3  B1 CE                lda     ($CE),y
00020Er 3  F0 90                beq     LE3A7
000210r 3  D0 C7                bne     LE3E0
000212r 3               LE419:
000212r 3  C8                   iny
000213r 3  B1 CE                lda     ($CE),y
000215r 3  F0 0A                beq     LE428
000217r 3  C8                   iny
000218r 3  B1 CE                lda     ($CE),y
00021Ar 3  85 7C                sta     $7C
00021Cr 3  C8                   iny
00021Dr 3  B1 CE                lda     ($CE),y
00021Fr 3  85 7D                sta     $7D
000221r 3               LE428:
000221r 3  A2 03                ldx     #$03
000223r 3               LE42A:
000223r 3  B5 7A                lda     $7A,x
000225r 3  48                   pha
000226r 3  CA                   dex
000227r 3  10 FA                bpl     LE42A
000229r 3  A9 20                lda     #$20
00022Br 3  A2 0F                ldx     #$0F
00022Dr 3               LE434:
00022Dr 3  A0 1F                ldy     #$1F
00022Fr 3               LE436:
00022Fr 3  20 rr rr             jsr     LE318
000232r 3  88                   dey
000233r 3  10 FA                bpl     LE436
000235r 3  CA                   dex
000236r 3  10 F5                bpl     LE434
000238r 3  A2 05                ldx     #$05
00023Ar 3               LE441:
00023Ar 3  A0 1F                ldy     #$1F
00023Cr 3  A9 2D                lda     #$2D
00023Er 3               LE445:
00023Er 3  20 rr rr             jsr     LE318
000241r 3  88                   dey
000242r 3  10 FA                bpl     LE445
000244r 3  E0 09                cpx     #$09
000246r 3  F0 04                beq     LE453
000248r 3  A2 09                ldx     #$09
00024Ar 3  D0 EE                bne     LE441
00024Cr 3               LE453:
00024Cr 3  A5 45                lda     $45
00024Er 3  85 CE                sta     $CE
000250r 3  A5 46                lda     $46
000252r 3  85 CF                sta     $CF
000254r 3               LE45B:
000254r 3  8A                   txa
000255r 3  48                   pha
000256r 3  A9 00                lda     #$00
000258r 3  85 07                sta     $07
00025Ar 3  A0 02                ldy     #$02
00025Cr 3  B1 CE                lda     ($CE),y
00025Er 3  AA                   tax
00025Fr 3  C8                   iny
000260r 3  B1 CE                lda     ($CE),y
000262r 3  C5 34                cmp     $34
000264r 3  F0 06                beq     LE473
000266r 3  90 0A                bcc     LE479
000268r 3               LE46F:
000268r 3  C6 07                dec     $07
00026Ar 3  30 08                bmi     LE47B
00026Cr 3               LE473:
00026Cr 3  E4 33                cpx     $33
00026Er 3  F0 04                beq     LE47B
000270r 3  B0 F6                bcs     LE46F
000272r 3               LE479:
000272r 3  E6 07                inc     $07
000274r 3               LE47B:
000274r 3  84 08                sty     $08
000276r 3  86 D2                stx     $D2
000278r 3  85 D1                sta     $D1
00027Ar 3  A2 90                ldx     #$90
00027Cr 3  38                   sec
00027Dr 3  20 rr rr             jsr     FLOAT2
000280r 3  20 rr rr             jsr     FOUT
000283r 3  A2 00                ldx     #$00
000285r 3               LE48C:
000285r 3  BD 00 01             lda     $0100,x
000288r 3  F0 05                beq     LE496
00028Ar 3  95 35                sta     $35,x
00028Cr 3  E8                   inx
00028Dr 3  D0 F6                bne     LE48C
00028Fr 3               LE496:
00028Fr 3  A9 20                lda     #$20
000291r 3               LE498:
000291r 3  A4 08                ldy     $08
000293r 3  29 7F                and     #$7F
000295r 3               LE49C:
000295r 3  95 35                sta     $35,x
000297r 3  F0 30                beq     LE4D0
000299r 3  E8                   inx
00029Ar 3  E0 4F                cpx     #$4F
00029Cr 3  90 04                bcc     LE4A9
00029Er 3  A9 00                lda     #$00
0002A0r 3  F0 F3                beq     LE49C
0002A2r 3               LE4A9:
0002A2r 3  C8                   iny
0002A3r 3  B1 CE                lda     ($CE),y
0002A5r 3  10 EE                bpl     LE49C
0002A7r 3  38                   sec
0002A8r 3  E9 7F                sbc     #$7F
0002AAr 3  86 09                stx     $09
0002ACr 3  AA                   tax
0002ADr 3  84 08                sty     $08
0002AFr 3  A0 FF                ldy     #$FF
0002B1r 3               LE4B8:
0002B1r 3  CA                   dex
0002B2r 3  F0 08                beq     LE4C3
0002B4r 3               LE4BB:
0002B4r 3  C8                   iny
0002B5r 3  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0002B8r 3  10 FA                bpl     LE4BB
0002BAr 3  30 F5                bmi     LE4B8
0002BCr 3               LE4C3:
0002BCr 3  A6 09                ldx     $09
0002BEr 3               LE4C5:
0002BEr 3  C8                   iny
0002BFr 3  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0002C2r 3  30 CD                bmi     LE498
0002C4r 3  95 35                sta     $35,x
0002C6r 3  E8                   inx
0002C7r 3  D0 F5                bne     LE4C5
0002C9r 3               LE4D0:
0002C9r 3  A2 00                ldx     #$00
0002CBr 3  86 08                stx     $08
0002CDr 3  68                   pla
0002CEr 3  AA                   tax
0002CFr 3  A0 00                ldy     #$00
0002D1r 3  A5 07                lda     $07
0002D3r 3  D0 04                bne     LE4E0
0002D5r 3  A2 06                ldx     #$06
0002D7r 3  D0 0E                bne     LE4EE
0002D9r 3               LE4E0:
0002D9r 3  10 07                bpl     LE4E9
0002DBr 3               LE4E2:
0002DBr 3  E8                   inx
0002DCr 3  E0 0E                cpx     #$0E
0002DEr 3  F0 42                beq     LE529
0002E0r 3  D0 05                bne     LE4EE
0002E2r 3               LE4E9:
0002E2r 3  20 rr rr             jsr     LE31E
0002E5r 3  A2 04                ldx     #$04
0002E7r 3               LE4EE:
0002E7r 3  86 09                stx     $09
0002E9r 3               LE4F0:
0002E9r 3  A6 08                ldx     $08
0002EBr 3  B5 35                lda     $35,x
0002EDr 3  F0 17                beq     LE50D
0002EFr 3  E8                   inx
0002F0r 3  86 08                stx     $08
0002F2r 3  A6 09                ldx     $09
0002F4r 3  20 rr rr             jsr     LE318
0002F7r 3  C8                   iny
0002F8r 3  C0 20                cpy     #$20
0002FAr 3  D0 ED                bne     LE4F0
0002FCr 3  A0 00                ldy     #$00
0002FEr 3  A5 07                lda     $07
000300r 3  F0 D9                beq     LE4E2
000302r 3  10 DE                bpl     LE4E9
000304r 3  30 D5                bmi     LE4E2
000306r 3               LE50D:
000306r 3  A0 00                ldy     #$00
000308r 3  B1 CE                lda     ($CE),y
00030Ar 3  48                   pha
00030Br 3  C8                   iny
00030Cr 3  B1 CE                lda     ($CE),y
00030Er 3  85 CF                sta     $CF
000310r 3  68                   pla
000311r 3  85 CE                sta     $CE
000313r 3  B1 CE                lda     ($CE),y
000315r 3  F0 0B                beq     LE529
000317r 3  A6 09                ldx     $09
000319r 3  A5 07                lda     $07
00031Br 3  D0 02                bne     LE526
00031Dr 3  A2 09                ldx     #$09
00031Fr 3               LE526:
00031Fr 3  4C rr rr             jmp     LE45B
000322r 3               LE529:
000322r 3  A2 00                ldx     #$00
000324r 3               LE52B:
000324r 3  BD C1 02             lda     $02C1,x
000327r 3  C9 20                cmp     #$20
000329r 3  F0 08                beq     LE53A
00032Br 3  9D E1 03             sta     $03E1,x
00032Er 3  E8                   inx
00032Fr 3  86 0E                stx     $0E
000331r 3  D0 F1                bne     LE52B
000333r 3               LE53A:
000333r 3  A2 00                ldx     #$00
000335r 3               LE53C:
000335r 3  68                   pla
000336r 3  95 7A                sta     $7A,x
000338r 3  E8                   inx
000339r 3  E0 04                cpx     #$04
00033Br 3  D0 F8                bne     LE53C
00033Dr 3  A2 06                ldx     #$06
00033Fr 3  A0 00                ldy     #$00
000341r 3  84 01                sty     $01
000343r 3               LE54A:
000343r 3  20 rr rr             jsr     LE2FD
000346r 3  B1 13                lda     ($13),y
000348r 3  85 82                sta     $82
00034Ar 3  A9 FF                lda     #$FF
00034Cr 3  91 13                sta     ($13),y
00034Er 3               LE555:
00034Er 3  A9 40                lda     #$40
000350r 3  85 80                sta     $80
000352r 3  85 81                sta     $81
000354r 3               LE55B:
000354r 3  A5 01                lda     $01
000356r 3  D0 15                bne     LE574
000358r 3  C6 80                dec     $80
00035Ar 3  D0 F8                bne     LE55B
00035Cr 3  C6 81                dec     $81
00035Er 3  D0 F4                bne     LE55B
000360r 3  B1 13                lda     ($13),y
000362r 3  48                   pha
000363r 3  A5 82                lda     $82
000365r 3  91 13                sta     ($13),y
000367r 3  68                   pla
000368r 3  85 82                sta     $82
00036Ar 3  4C rr rr             jmp     LE555
00036Dr 3               LE574:
00036Dr 3  A5 82                lda     $82
00036Fr 3  30 02                bmi     LE57A
000371r 3  91 13                sta     ($13),y
000373r 3               LE57A:
000373r 3  A5 01                lda     $01
000375r 3  C9 18                cmp     #$18
000377r 3  D0 04                bne     LE584
000379r 3  88                   dey
00037Ar 3  10 01                bpl     LE584
00037Cr 3  C8                   iny
00037Dr 3               LE584:
00037Dr 3  C9 06                cmp     #$06
00037Fr 3  D0 05                bne     LE58D
000381r 3  C0 1F                cpy     #$1F
000383r 3  F0 01                beq     LE58D
000385r 3  C8                   iny
000386r 3               LE58D:
000386r 3  C9 02                cmp     #$02
000388r 3  D0 05                bne     LE596
00038Ar 3  E0 06                cpx     #$06
00038Cr 3  F0 01                beq     LE596
00038Er 3  CA                   dex
00038Fr 3               LE596:
00038Fr 3  C9 04                cmp     #$04
000391r 3  D0 05                bne     LE59F
000393r 3  E0 08                cpx     #$08
000395r 3  F0 01                beq     LE59F
000397r 3  E8                   inx
000398r 3               LE59F:
000398r 3  C9 7F                cmp     #$7F
00039Ar 3  D0 13                bne     LE5B6
00039Cr 3  C0 00                cpy     #$00
00039Er 3  D0 04                bne     LE5AB
0003A0r 3  E0 06                cpx     #$06
0003A2r 3  F0 0B                beq     LE5B6
0003A4r 3               LE5AB:
0003A4r 3  88                   dey
0003A5r 3  10 0C                bpl     LE5BA
0003A7r 3  A0 1F                ldy     #$1F
0003A9r 3  CA                   dex
0003AAr 3  20 rr rr             jsr     LE2FD
0003ADr 3  D0 04                bne     LE5BA
0003AFr 3               LE5B6:
0003AFr 3  C9 05                cmp     #$05
0003B1r 3  D0 1B                bne     LE5D5
0003B3r 3               LE5BA:
0003B3r 3  48                   pha
0003B4r 3  98                   tya
0003B5r 3  48                   pha
0003B6r 3               LE5BD:
0003B6r 3  98                   tya
0003B7r 3  18                   clc
0003B8r 3  65 13                adc     $13
0003BAr 3  C9 1F                cmp     #$1F
0003BCr 3  F0 09                beq     LE5CE
0003BEr 3  C8                   iny
0003BFr 3  B1 13                lda     ($13),y
0003C1r 3  88                   dey
0003C2r 3  91 13                sta     ($13),y
0003C4r 3  C8                   iny
0003C5r 3  D0 EF                bne     LE5BD
0003C7r 3               LE5CE:
0003C7r 3  A9 20                lda     #$20
0003C9r 3  91 13                sta     ($13),y
0003CBr 3  68                   pla
0003CCr 3  A8                   tay
0003CDr 3  68                   pla
0003CEr 3               LE5D5:
0003CEr 3  C9 1B                cmp     #$1B
0003D0r 3  F0 68                beq     LE641
0003D2r 3  C9 0D                cmp     #$0D
0003D4r 3  F0 7A                beq     LE657
0003D6r 3  C9 0A                cmp     #$0A
0003D8r 3  F0 50                beq     LE631
0003DAr 3  C9 03                cmp     #$03
0003DCr 3  F0 60                beq     LE645
0003DEr 3  C9 0B                cmp     #$0B
0003E0r 3  F0 3E                beq     LE627
0003E2r 3  C9 09                cmp     #$09
0003E4r 3  F0 50                beq     LE63D
0003E6r 3  C9 20                cmp     #$20
0003E8r 3  90 2F                bcc     LE620
0003EAr 3  C9 7E                cmp     #$7E
0003ECr 3  B0 2B                bcs     LE620
0003EEr 3  48                   pha
0003EFr 3  98                   tya
0003F0r 3  48                   pha
0003F1r 3  B1 13                lda     ($13),y
0003F3r 3               LE5FA:
0003F3r 3  85 80                sta     $80
0003F5r 3  98                   tya
0003F6r 3  18                   clc
0003F7r 3  65 13                adc     $13
0003F9r 3  C9 1F                cmp     #$1F
0003FBr 3  F0 0B                beq     LE60F
0003FDr 3  C8                   iny
0003FEr 3  B1 13                lda     ($13),y
000400r 3  48                   pha
000401r 3  A5 80                lda     $80
000403r 3  91 13                sta     ($13),y
000405r 3  68                   pla
000406r 3  D0 EB                bne     LE5FA
000408r 3               LE60F:
000408r 3  68                   pla
000409r 3  A8                   tay
00040Ar 3  68                   pla
00040Br 3  91 13                sta     ($13),y
00040Dr 3  C0 1F                cpy     #$1F
00040Fr 3  D0 07                bne     LE61F
000411r 3  E0 08                cpx     #$08
000413r 3  F0 04                beq     LE620
000415r 3  E8                   inx
000416r 3  A0 FF                ldy     #$FF
000418r 3               LE61F:
000418r 3  C8                   iny
000419r 3               LE620:
000419r 3  A9 00                lda     #$00
00041Br 3  85 01                sta     $01
00041Dr 3  4C rr rr             jmp     LE54A
000420r 3               LE627:
000420r 3  A2 5F                ldx     #$5F
000422r 3  A9 20                lda     #$20
000424r 3               LE62B:
000424r 3  9D C0 02             sta     $02C0,x
000427r 3  CA                   dex
000428r 3  10 FA                bpl     LE62B
00042Ar 3               LE631:
00042Ar 3  A2 02                ldx     #$02
00042Cr 3               LE633:
00042Cr 3  B5 7A                lda     $7A,x
00042Er 3  85 13                sta     $13
000430r 3  E8                   inx
000431r 3  B5 7A                lda     $7A,x
000433r 3  4C rr rr             jmp     LE659
000436r 3               LE63D:
000436r 3  A2 00                ldx     #$00
000438r 3  86 0E                stx     $0E
00043Ar 3               LE641:
00043Ar 3  A2 00                ldx     #$00
00043Cr 3  F0 EE                beq     LE633
00043Er 3               LE645:
00043Er 3  20 73 FE             jsr     LFE73
000441r 3  A2 00                ldx     #$00
000443r 3  A9 00                lda     #$00
000445r 3  85 16                sta     $16
000447r 3               LE64E:
000447r 3  85 15                sta     $15
000449r 3  A0 00                ldy     #$00
00044Br 3  84 03                sty     $03
00044Dr 3  A9 0D                lda     #$0D
00044Fr 3  60                   rts
000450r 3               LE657:
000450r 3  A9 FF                lda     #$FF
000452r 3               LE659:
000452r 3  85 14                sta     $14
000454r 3  A9 01                lda     #$01
000456r 3  48                   pha
000457r 3  D0 25                bne     LE685
000459r 3               LE660:
000459r 3  C9 03                cmp     #$03
00045Br 3  F0 3A                beq     LE69E
00045Dr 3  C9 02                cmp     #$02
00045Fr 3  F0 19                beq     LE681
000461r 3  AE C0 03             ldx     $03C0
000464r 3  E0 20                cpx     #$20
000466r 3  D0 D6                bne     LE645
000468r 3  A2 FF                ldx     #$FF
00046Ar 3               LE671:
00046Ar 3  E8                   inx
00046Br 3  E4 0E                cpx     $0E
00046Dr 3  D0 04                bne     LE67A
00046Fr 3  A9 02                lda     #$02
000471r 3  D0 D4                bne     LE64E
000473r 3               LE67A:
000473r 3  BD E1 03             lda     $03E1,x
000476r 3  95 35                sta     $35,x
000478r 3  D0 F0                bne     LE671
00047Ar 3               LE681:
00047Ar 3  AA                   tax
00047Br 3  E8                   inx
00047Cr 3  8A                   txa
00047Dr 3  48                   pha
00047Er 3               LE685:
00047Er 3  A2 4F                ldx     #$4F
000480r 3               LE687:
000480r 3  BD C0 02             lda     $02C0,x
000483r 3  95 35                sta     $35,x
000485r 3  CA                   dex
000486r 3  10 F8                bpl     LE687
000488r 3  A2 4F                ldx     #$4F
00048Ar 3               LE691:
00048Ar 3  BD BF 02             lda     $02BF,x
00048Dr 3  C9 20                cmp     #$20
00048Fr 3  D0 03                bne     LE69B
000491r 3  CA                   dex
000492r 3  D0 F6                bne     LE691
000494r 3               LE69B:
000494r 3  68                   pla
000495r 3  D0 B0                bne     LE64E
000497r 3               LE69E:
000497r 3  A6 14                ldx     $14
000499r 3  E0 FF                cpx     #$FF
00049Br 3  F0 A1                beq     LE645
00049Dr 3  86 34                stx     $34
00049Fr 3  A5 13                lda     $13
0004A1r 3  85 33                sta     $33
0004A3r 3  4C rr rr             jmp     LE3C8
0004A6r 3               LE6AD:
0004A6r 3  48                   pha
0004A7r 3  A9 05                lda     #$05
0004A9r 3  85 0E                sta     $0E
0004ABr 3  68                   pla
0004ACr 3  20 rr rr             jsr     LINGET
0004AFr 3  4C rr rr             jmp     LC57E
0004B2r 3               LE6B9:
0004B2r 3  A5 0E                lda     $0E
0004B4r 3  30 14                bmi     LE6D1
0004B6r 3  C6 0E                dec     $0E
0004B8r 3  D0 10                bne     LE6D1
0004BAr 3  20 FA FD             jsr     LFDFA
0004BDr 3  A9 82                lda     #$82
0004BFr 3  85 0E                sta     $0E
0004C1r 3  A5 01                lda     $01
0004C3r 3  C9 0A                cmp     #$0A
0004C5r 3  F0 03                beq     LE6D1
0004C7r 3  38                   sec
0004C8r 3  26 0E                rol     $0E
0004CAr 3               LE6D1:
0004CAr 3  20 rr rr             jsr     ISCNTC
0004CDr 3  4C rr rr             jmp     LC5A9
0004D0r 3               LE6D7:
0004D0r 3  A2 FF                ldx     #$FF
0004D2r 3               LE6D9:
0004D2r 3  20 rr rr             jsr     LE6E2
0004D5r 3  88                   dey
0004D6r 3  D0 FA                bne     LE6D9
0004D8r 3  CA                   dex
0004D9r 3  D0 F7                bne     LE6D9
0004DBr 3               LE6E2:
0004DBr 3  60                   rts
0004DCr 3               LE6E3:
0004DCr 3  A9 0C                lda     #$0C
0004DEr 3               LE6E5:
0004DEr 3  A2 FF                ldx     #$FF
0004E0r 3  A8                   tay
0004E1r 3  A5 01                lda     $01
0004E3r 3  C9 03                cmp     #$03
0004E5r 3  F0 F4                beq     LE6E2
0004E7r 3  98                   tya
0004E8r 3               LE6EF:
0004E8r 3  48                   pha
0004E9r 3  AD C0 BF             lda     $BFC0
0004ECr 3               LE6F3:
0004ECr 3  AD CD BF             lda     $BFCD
0004EFr 3  29 08                and     #$08
0004F1r 3  F0 F9                beq     LE6F3
0004F3r 3  AD C9 BF             lda     $BFC9
0004F6r 3  48                   pha
0004F7r 3  A9 FF                lda     #$FF
0004F9r 3  8D C9 BF             sta     $BFC9
0004FCr 3  68                   pla
0004FDr 3  C9 FC                cmp     #$FC
0004FFr 3  68                   pla
000500r 3  90 DC                bcc     LE6E5
000502r 3  CA                   dex
000503r 3  D0 E3                bne     LE6EF
000505r 3  88                   dey
000506r 3  D0 E0                bne     LE6EF
000508r 3  60                   rts
000509r 3               LE710:
000509r 3  A9 06                lda     #$06
00050Br 3  D0 D1                bne     LE6E5
00050Dr 3               LE714:
00050Dr 3  86 13                stx     $13
00050Fr 3  84 14                sty     $14
000511r 3  A5 16                lda     $16
000513r 3  C9 FD                cmp     #$FD
000515r 3  F0 2B                beq     LE749
000517r 3  A9 00                lda     #$00
000519r 3  8D CB BF             sta     $BFCB
00051Cr 3  A9 20                lda     #$20
00051Er 3  8D C0 BF             sta     $BFC0
000521r 3  A9 40                lda     #$40
000523r 3  8D C2 BF             sta     $BFC2
000526r 3  20 rr rr             jsr     LE6D7
000529r 3  20 00 F0             jsr     LF000
00052Cr 3  A5 16                lda     $16
00052Er 3  C9 FF                cmp     #$FF
000530r 3  D0 07                bne     LE740
000532r 3  A0 20                ldy     #$20
000534r 3  20 09 F0             jsr     LF009
000537r 3  C6 16                dec     $16
000539r 3               LE740:
000539r 3  A0 10                ldy     #$10
00053Br 3  A2 FF                ldx     #$FF
00053Dr 3  20 09 F0             jsr     LF009
000540r 3  C6 16                dec     $16
000542r 3               LE749:
000542r 3  68                   pla
000543r 3  78                   sei
000544r 3  48                   pha
000545r 3  C9 0A                cmp     #$0A
000547r 3  F0 21                beq     LE771
000549r 3  A6 0E                ldx     $0E
00054Br 3  86 50                stx     $50
00054Dr 3  20 0F F0             jsr     LF00F
000550r 3  58                   cli
000551r 3  A5 01                lda     $01
000553r 3  C9 03                cmp     #$03
000555r 3  F0 13                beq     LE771
000557r 3  68                   pla
000558r 3  48                   pha
000559r 3  C9 0D                cmp     #$0D
00055Br 3  D0 0D                bne     LE771
00055Dr 3  A9 00                lda     #$00
00055Fr 3  85 16                sta     $16
000561r 3  8D CB BF             sta     $BFCB
000564r 3  20 rr rr             jsr     LE6D7
000567r 3  8D C2 BF             sta     $BFC2
00056Ar 3               LE771:
00056Ar 3  A6 13                ldx     $13
00056Cr 3  A4 14                ldy     $14
00056Er 3  58                   cli
00056Fr 3  68                   pla
000570r 3  60                   rts
000571r 3               LE778:
000571r 3  A9 40                lda     #$40
000573r 3  8D C0 BF             sta     $BFC0
000576r 3  20 00 F0             jsr     LF000
000579r 3  58                   cli
00057Ar 3  A5 16                lda     $16
00057Cr 3  C9 01                cmp     #$01
00057Er 3  D0 03                bne     LE78A
000580r 3  20 rr rr             jsr     LE6E3
000583r 3               LE78A:
000583r 3  20 rr rr             jsr     LE710
000586r 3  A5 01                lda     $01
000588r 3  C9 03                cmp     #$03
00058Ar 3  F0 3B                beq     LE7CE
00058Cr 3               LE793:
00058Cr 3  A5 50                lda     $50
00058Er 3  48                   pha
00058Fr 3  A5 51                lda     $51
000591r 3  48                   pha
000592r 3  A5 0E                lda     $0E
000594r 3  85 50                sta     $50
000596r 3  78                   sei
000597r 3  20 18 F0             jsr     LF018
00059Ar 3  58                   cli
00059Br 3  A8                   tay
00059Cr 3  68                   pla
00059Dr 3  85 51                sta     $51
00059Fr 3  68                   pla
0005A0r 3  85 50                sta     $50
0005A2r 3  B0 12                bcs     LE7BD
0005A4r 3  A9 00                lda     #$00
0005A6r 3  85 16                sta     $16
0005A8r 3  A2 06                ldx     #$06
0005AAr 3               LE7B1:
0005AAr 3  BD rr rr             lda     LE7DC,x	; "PARITY"
0005ADr 3  20 75 FE             jsr     LFE75
0005B0r 3  CA                   dex
0005B1r 3  10 F7                bpl     LE7B1
0005B3r 3  E8                   inx
0005B4r 3  F0 11                beq     LE7CE
0005B6r 3               LE7BD:
0005B6r 3  A5 01                lda     $01
0005B8r 3  C9 03                cmp     #$03
0005BAr 3  F0 0B                beq     LE7CE
0005BCr 3  C0 0D                cpy     #$0D
0005BEr 3  F0 07                beq     LE7CE
0005C0r 3  94 35                sty     $35,x
0005C2r 3  E8                   inx
0005C3r 3  E0 4F                cpx     #$4F
0005C5r 3  D0 C5                bne     LE793
0005C7r 3               LE7CE:
0005C7r 3  A9 00                lda     #$00
0005C9r 3  8D CB BF             sta     $BFCB
0005CCr 3  8D C2 BF             sta     $BFC2
0005CFr 3  85 16                sta     $16
0005D1r 3  58                   cli
0005D2r 3  A9 0D                lda     #$0D
0005D4r 3  60                   rts
0005D5r 3               LE7DC:
0005D5r 3  59 54 49 52          .byte   "YTIRAP"
0005D9r 3  41 50        
0005DBr 3  0D FF FF FF          .byte   $0D,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0005DFr 3  FF FF FF FF  
0005E3r 3  FF FF FF FF          .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0005E7r 3  FF FF FF FF  
0005EBr 3  FF FF FF FF          .byte   $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
0005EFr 3  FF FF FF FF  
0005F3r 3  FF FF FF FF          .byte   $FF,$FF,$FF,$FF,$FF,$FF
0005F7r 3  FF FF        
0005F9r 3               
0005F9r 2               .endif
0005F9r 2               
0005F9r 2               .ifdef AIM65
0005F9r 2               .include "aim65_extra.s"
0005F9r 2               .endif
0005F9r 2               
0005F9r 2               .ifdef SYM1
0005F9r 2                       .byte   0,0,0
0005F9r 2               .endif
0005F9r 2               
0005F9r 2               .ifdef EATER
0005F9r 2               .include "bios.s"
0005F9r 2               .endif
0005F9r 2               
0005F9r 1               .include "lcd.s"
0005F9r 2               .segment "CODE"
001DFBr 2               .ifdef EATER
001DFBr 2               PORTB = $6000
001DFBr 2               DDRB = $6002
001DFBr 2               E  = %01000000
001DFBr 2               RW = %00100000
001DFBr 2               RS = %00010000
001DFBr 2               
001DFBr 2               lcd_wait:
001DFBr 2                 pha
001DFBr 2                 lda #%11110000  ; LCD data is input
001DFBr 2                 sta DDRB
001DFBr 2               lcdbusy:
001DFBr 2                 lda #RW
001DFBr 2                 sta PORTB
001DFBr 2                 lda #(RW | E)
001DFBr 2                 sta PORTB
001DFBr 2                 lda PORTB       ; Read high nibble
001DFBr 2                 pha             ; and put on stack since it has the busy flag
001DFBr 2                 lda #RW
001DFBr 2                 sta PORTB
001DFBr 2                 lda #(RW | E)
001DFBr 2                 sta PORTB
001DFBr 2                 lda PORTB       ; Read low nibble
001DFBr 2                 pla             ; Get high nibble off stack
001DFBr 2                 and #%00001000
001DFBr 2                 bne lcdbusy
001DFBr 2               
001DFBr 2                 lda #RW
001DFBr 2                 sta PORTB
001DFBr 2                 lda #%11111111  ; LCD data is output
001DFBr 2                 sta DDRB
001DFBr 2                 pla
001DFBr 2                 rts
001DFBr 2               
001DFBr 2               LCDINIT:
001DFBr 2                 lda #$ff ; Set all pins on port B to output
001DFBr 2                 sta DDRB
001DFBr 2               
001DFBr 2                 lda #%00000011 ; Set 8-bit mode
001DFBr 2                 sta PORTB
001DFBr 2                 ora #E
001DFBr 2                 sta PORTB
001DFBr 2                 and #%00001111
001DFBr 2                 sta PORTB
001DFBr 2               
001DFBr 2                 lda #%00000011 ; Set 8-bit mode
001DFBr 2                 sta PORTB
001DFBr 2                 ora #E
001DFBr 2                 sta PORTB
001DFBr 2                 and #%00001111
001DFBr 2                 sta PORTB
001DFBr 2               
001DFBr 2                 lda #%00000011 ; Set 8-bit mode
001DFBr 2                 sta PORTB
001DFBr 2                 ora #E
001DFBr 2                 sta PORTB
001DFBr 2                 and #%00001111
001DFBr 2                 sta PORTB
001DFBr 2               
001DFBr 2                 ; Okay, now we're really in 8-bit mode.
001DFBr 2                 ; Command to get to 4-bit mode ought to work now
001DFBr 2                 lda #%00000010 ; Set 4-bit mode
001DFBr 2                 sta PORTB
001DFBr 2                 ora #E
001DFBr 2                 sta PORTB
001DFBr 2                 and #%00001111
001DFBr 2                 sta PORTB
001DFBr 2               
001DFBr 2                 lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
001DFBr 2                 jsr lcd_instruction
001DFBr 2                 lda #%00001110 ; Display on; cursor on; blink off
001DFBr 2                 jsr lcd_instruction
001DFBr 2                 lda #%00000110 ; Increment and shift cursor; don't shift display
001DFBr 2                 jsr lcd_instruction
001DFBr 2                 lda #%00000001 ; Clear display
001DFBr 2                 jsr lcd_instruction
001DFBr 2                 rts
001DFBr 2               
001DFBr 2               
001DFBr 2               LCDCMD:
001DFBr 2                 jsr GETBYT
001DFBr 2                 txa
001DFBr 2               lcd_instruction:
001DFBr 2                 jsr lcd_wait
001DFBr 2                 pha
001DFBr 2                 lsr
001DFBr 2                 lsr
001DFBr 2                 lsr
001DFBr 2                 lsr            ; Send high 4 bits
001DFBr 2                 sta PORTB
001DFBr 2                 ora #E         ; Set E bit to send instruction
001DFBr 2                 sta PORTB
001DFBr 2                 eor #E         ; Clear E bit
001DFBr 2                 sta PORTB
001DFBr 2                 pla
001DFBr 2                 and #%00001111 ; Send low 4 bits
001DFBr 2                 sta PORTB
001DFBr 2                 ora #E         ; Set E bit to send instruction
001DFBr 2                 sta PORTB
001DFBr 2                 eor #E         ; Clear E bit
001DFBr 2                 sta PORTB
001DFBr 2                 rts
001DFBr 2               
001DFBr 2               LCDPRINT:
001DFBr 2                 jsr GETBYT
001DFBr 2                 txa
001DFBr 2                 jsr lcd_wait
001DFBr 2                 pha
001DFBr 2                 lsr
001DFBr 2                 lsr
001DFBr 2                 lsr
001DFBr 2                 lsr             ; Send high 4 bits
001DFBr 2                 ora #RS         ; Set RS
001DFBr 2                 sta PORTB
001DFBr 2                 ora #E          ; Set E bit to send instruction
001DFBr 2                 sta PORTB
001DFBr 2                 eor #E          ; Clear E bit
001DFBr 2                 sta PORTB
001DFBr 2                 pla
001DFBr 2                 and #%00001111  ; Send low 4 bits
001DFBr 2                 ora #RS         ; Set RS
001DFBr 2                 sta PORTB
001DFBr 2                 ora #E          ; Set E bit to send instruction
001DFBr 2                 sta PORTB
001DFBr 2                 eor #E          ; Clear E bit
001DFBr 2                 sta PORTB
001DFBr 2                 rts
001DFBr 2               
001DFBr 2               .endif
001DFBr 2               
001DFBr 1               
