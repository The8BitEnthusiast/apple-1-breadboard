ca65 V2.19 - Git 3dfe03300
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 3               ; configuration
000000r 3               CONFIG_2A := 1
000000r 3               
000000r 3               CONFIG_NULL := 1
000000r 3               CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_SAFE_NAMENOTFOUND := 1
000000r 3               CONFIG_SCRTCH_ORDER := 1
000000r 3               CONFIG_PEEK_SAVE_LINNUM := 1
000000r 3               CONFIG_SMALL_ERROR := 1
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $10
000000r 3               ZP_START3 = $06
000000r 3               ZP_START4 = $5E
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR             := $03
000000r 3               TXPSV			:= LASTOP
000000r 3               
000000r 3               NULL            := IQERR
000000r 3               
000000r 3               ; inputbuffer
000000r 3               INPUTBUFFER     := $0016
000000r 3               
000000r 3               ;extra stack
000000r 3               STACK2          := $0200
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $FD
000000r 3               SPACE_FOR_GOSUB := $44
000000r 3               NULL_MAX		:= $F2
000000r 3               CRLF_1 := CR
000000r 3               CRLF_2 := LF
000000r 3               WIDTH			:= 20
000000r 3               WIDTH2			:= 10
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2	:= $0211
000000r 3               
000000r 3               ; monitor functions
000000r 3               PRIFLG := $A411
000000r 3               INFLG  := $A412
000000r 3               OUTFLG := $A413
000000r 3               DRA2   := $A480
000000r 3               DRB2   := $A482
000000r 3               
000000r 3               DU13   := $E520
000000r 3               PSLS   := $E7DC
000000r 3               LOAD   := $E848
000000r 3               WHEREO := $E871
000000r 3               OUTPUT := $E97A
000000r 3               INALL  := $E993
000000r 3               OUTALL := $E9BC
000000r 3               CRCK   := $EA24
000000r 3               GETKEY := $EC40
000000r 3               GETKY  := $EC43
000000r 3               ROONEK := $ECEF
000000r 3               CUREAD := $FE83
000000r 3               
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(eater)
000000r 2               EATER := 1
000000r 2               .include "defines_eater.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
000010  2               Z15:
000010  2  xx           	.res 1
000011  2               .ifndef POSX; allow override
000011  2               POSX:
000011  2               .endif
000011  2  xx           	.res 1
000012  2               .ifndef Z17; allow override
000012  2               Z17:
000012  2               .endif
000012  2  xx           	.res 1
000013  2               .ifndef Z18; allow override
000013  2               Z18:
000013  2               .endif
000013  2  xx           	.res 1
000014  2               LINNUM:
000014  2               .ifndef TXPSV; allow override
000014  2               TXPSV:
000014  2               .endif
000014  2  xx xx        	.res 2
000016  2               .ifndef INPUTBUFFER; allow override
000016  2               INPUTBUFFER:
000016  2               .endif
000016  2               
000016  2               .org ZP_START3
000006  2               
000006  2               CHARAC:
000006  2  xx           	.res 1
000007  2               ENDCHR:
000007  2  xx           	.res 1
000008  2               EOLPNTR:
000008  2  xx           	.res 1
000009  2               DIMFLG:
000009  2  xx           	.res 1
00000A  2               VALTYP:
00000A  2               .ifdef CONFIG_SMALL
00000A  2               	.res 1
00000A  2               .else
00000A  2  xx xx        	.res 2
00000C  2               .endif
00000C  2               DATAFLG:
00000C  2  xx           	.res 1
00000D  2               SUBFLG:
00000D  2  xx           	.res 1
00000E  2               INPUTFLG:
00000E  2  xx           	.res 1
00000F  2               CPRMASK:
00000F  2  xx           	.res 1
000010  2               Z14:
000010  2  xx           	.res 1
000011  2               
000011  2               .org ZP_START4
00005E  2               
00005E  2               TEMPPT:
00005E  2  xx           	.res 1
00005F  2               LASTPT:
00005F  2  xx xx        	.res 2
000061  2               TEMPST:
000061  2  xx xx xx xx  	.res 9
000065  2  xx xx xx xx  
000069  2  xx           
00006A  2               INDEX:
00006A  2  xx xx        	.res 2
00006C  2               DEST:
00006C  2  xx xx        	.res 2
00006E  2               RESULT:
00006E  2  xx xx xx xx  	.res BYTES_FP
000072  2  xx           
000073  2               RESULT_LAST = RESULT + BYTES_FP-1
000073  2               TXTTAB:
000073  2  xx xx        	.res 2
000075  2               VARTAB:
000075  2  xx xx        	.res 2
000077  2               ARYTAB:
000077  2  xx xx        	.res 2
000079  2               STREND:
000079  2  xx xx        	.res 2
00007B  2               FRETOP:
00007B  2  xx xx        	.res 2
00007D  2               FRESPC:
00007D  2  xx xx        	.res 2
00007F  2               MEMSIZ:
00007F  2  xx xx        	.res 2
000081  2               CURLIN:
000081  2  xx xx        	.res 2
000083  2               OLDLIN:
000083  2  xx xx        	.res 2
000085  2               OLDTEXT:
000085  2  xx xx        	.res 2
000087  2               Z8C:
000087  2  xx xx        	.res 2
000089  2               DATPTR:
000089  2  xx xx        	.res 2
00008B  2               INPTR:
00008B  2  xx xx        	.res 2
00008D  2               VARNAM:
00008D  2  xx xx        	.res 2
00008F  2               VARPNT:
00008F  2  xx xx        	.res 2
000091  2               FORPNT:
000091  2  xx xx        	.res 2
000093  2               LASTOP:
000093  2  xx xx        	.res 2
000095  2               CPRTYP:
000095  2  xx           	.res 1
000096  2               FNCNAM:
000096  2               TEMP3:
000096  2  xx xx        	.res 2
000098  2               DSCPTR:
000098  2               .ifdef CONFIG_SMALL
000098  2               		.res 2
000098  2               .else
000098  2  xx xx xx     		.res 3
00009B  2               .endif
00009B  2               DSCLEN:
00009B  2  xx xx        	.res 2
00009D  2               .ifndef JMPADRS ; allow override
00009D  2               JMPADRS			:= DSCLEN + 1
00009D  2               .endif
00009D  2               Z52:
00009D  2  xx           	.res 1
00009E  2               ARGEXTENSION:
00009E  2               .ifndef CONFIG_SMALL
00009E  2  xx           	.res 1
00009F  2               .endif
00009F  2               TEMP1:
00009F  2  xx           	.res 1
0000A0  2               HIGHDS:
0000A0  2  xx xx        	.res 2
0000A2  2               HIGHTR:
0000A2  2  xx xx        	.res 2
0000A4  2               .ifndef CONFIG_SMALL
0000A4  2               TEMP2:
0000A4  2  xx           	.res 1
0000A5  2               .endif
0000A5  2               INDX:
0000A5  2               TMPEXP:
0000A5  2               .ifdef CONFIG_SMALL
0000A5  2               TEMP2:
0000A5  2               .endif
0000A5  2  xx           	.res 1
0000A6  2               EXPON:
0000A6  2  xx           	.res 1
0000A7  2               LOWTR:
0000A7  2               .ifndef LOWTRX ; allow override
0000A7  2               LOWTRX:
0000A7  2               .endif
0000A7  2  xx           	.res 1
0000A8  2               EXPSGN:
0000A8  2  xx           	.res 1
0000A9  2               FAC:
0000A9  2  xx xx xx xx  	.res BYTES_FP
0000AD  2  xx           
0000AE  2               FAC_LAST = FAC + BYTES_FP-1
0000AE  2               FACSIGN:
0000AE  2  xx           	.res 1
0000AF  2               SERLEN:
0000AF  2  xx           	.res 1
0000B0  2               SHIFTSIGNEXT:
0000B0  2  xx           	.res 1
0000B1  2               ARG:
0000B1  2  xx xx xx xx  	.res BYTES_FP
0000B5  2  xx           
0000B6  2               ARG_LAST = ARG + BYTES_FP-1
0000B6  2               ARGSIGN:
0000B6  2  xx           	.res 1
0000B7  2               STRNG1:
0000B7  2  xx xx        	.res 2
0000B9  2               SGNCPR = STRNG1
0000B9  2               FACEXTENSION = STRNG1+1
0000B9  2               STRNG2:
0000B9  2  xx xx        	.res 2
0000BB  2               .ifdef AIM65
0000BB  2               ATN:
0000BB  2  xx xx xx     	.res 3
0000BE  2               ZBE:
0000BE  2  xx           	.res 1
0000BF  2               .endif
0000BF  2               .ifdef SYM1
0000BF  2               USR1:
0000BF  2               	.res 3
0000BF  2               USR2:
0000BF  2               	.res 3
0000BF  2               USR3:
0000BF  2               	.res 3
0000BF  2               .endif
0000BF  2               CHRGET:
0000BF  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000BF  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000BF  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000BF  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000BF  2               
0000BF  2               
0000BF  2               
0000BF  1               
0000BF  1               .include "header.s"
0000BF  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2  4C rr rr             jmp     COLD_START
000003r 2  4C rr rr             jmp     RESTART
000006r 2  rr rr rr rr          .word   AYINT,GIVAYF
00000Ar 2               .endif
00000Ar 2               .ifdef SYM1
00000Ar 2                       jmp     PR_WRITTEN_BY
00000Ar 2               .endif
00000Ar 2               .ifdef EATER
00000Ar 2                       jmp COLD_START
00000Ar 2               .endif
00000Ar 2               
00000Ar 1               .include "token.s"
00000Ar 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               .else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2  rr rr 4E 55  		keyword_rts "NULL", NULL
000015r 2  4C CC xx     
000012r 2               .endif
000012r 2               .ifdef KBD
000012r 2               		keyword_rts "PLOD", PLOD
000012r 2               		keyword_rts "PSAV", PSAV
000012r 2               		keyword_rts "VLOD", VLOD
000012r 2               		keyword_rts "VSAV", VSAV
000012r 2               .endif
000012r 2               .ifndef CONFIG_NO_POKE
000012r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000016r 2  49 D4 xx     
000013r 2               .endif
000013r 2               .ifndef KBD
000013r 2  47 E8 4C 4F  		keyword_rts "LOAD", LOAD
000017r 2  41 C4 xx     
000014r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
000018r 2  56 C5 xx     
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2               		keyword_rts "VERIFY", VERIFY
000015r 2               .endif
000015r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000019r 2  C6 xx        
000016r 2               .ifdef KBD
000016r 2               		keyword_rts "SLOD", SLOD
000016r 2               .endif
000016r 2               .ifndef CONFIG_NO_POKE
000016r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Ar 2  4B C5 xx     
000017r 2               .endif
000017r 2               .ifdef CONFIG_FILE
000017r 2               		keyword_rts "PRINT#", PRINTH
000017r 2               .endif
000017r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Br 2  49 4E D4 xx  
000018r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Cr 2  4E D4 xx     
000019r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Dr 2  53 D4 xx     
00001Ar 2               .ifdef CONFIG_CBM_ALL
00001Ar 2               		keyword_rts "CLR", CLEAR
00001Ar 2               .else
00001Ar 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Er 2  45 41 D2 xx  
00001Br 2               .endif
00001Br 2               .ifdef CONFIG_FILE
00001Br 2               		keyword_rts "CMD", CMD
00001Br 2               		keyword_rts "SYS", SYS
00001Br 2               		keyword_rts "OPEN", OPEN
00001Br 2               		keyword_rts "CLOSE", CLOSE
00001Br 2               .endif
00001Br 2               .ifndef CONFIG_SMALL
00001Br 2  rr rr 47 45  		keyword_rts "GET", GET
00001Fr 2  D4 xx        
00001Cr 2               .endif
00001Cr 2               .ifdef KBD
00001Cr 2               		keyword_rts "PRT", PRT
00001Cr 2               .endif
00001Cr 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000020r 2  D7 xx        
00001Dr 2               .ifdef EATER
00001Dr 2               		keyword_rts "LCDCMD", LCDCMD
00001Dr 2               		keyword_rts "LCDPRINT", LCDPRINT
00001Dr 2               .endif
00001Dr 2               
00001Dr 2               		count_tokens
00001Dr 2               
00001Dr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000021r 2  xx           
00001Er 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Fr 2  46 CE xx     		keyword	"FN", TOKEN_FN
000020r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000024r 2  xx           
000021r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000025r 2  xx           
000022r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000023r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000027r 2  xx           
000024r 2  AB xx        		keyword	"+", TOKEN_PLUS
000025r 2  AD xx        		keyword	"-", TOKEN_MINUS
000026r 2  AA xx        		keyword	"*"
000027r 2  AF xx        		keyword	"/"
000028r 2               .ifdef KBD
000028r 2               		keyword	"#"
000028r 2               .else
000028r 2  DE xx        		keyword	"^"
000029r 2               .endif
000029r 2  41 4E C4 xx  		keyword	"AND"
00002Ar 2  4F D2 xx     		keyword	"OR"
00002Br 2  BE xx        		keyword	">", TOKEN_GREATER
00002Cr 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Dr 2  BC xx        		keyword	"<"
00002Er 2               
00002Er 2                       .segment "VECTORS"
00003Ar 2               UNFNC:
00003Ar 2               
00003Ar 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Er 2  CE xx        
00002Fr 2  rr rr 49 4E  		keyword_addr "INT", INT
000033r 2  D4 xx        
000030r 2  rr rr 41 42  		keyword_addr "ABS", ABS
000034r 2  D3 xx        
000031r 2               .ifdef KBD
000031r 2               		keyword_addr "VER", VER
000031r 2               .endif
000031r 2               .ifndef CONFIG_NO_POKE
000031r 2                 .ifdef CONFIG_RAM
000031r 2               		keyword_addr "USR", IQERR
000031r 2                 .else
000031r 2  03 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
000035r 2  D2 xx        
000032r 2                 .endif
000032r 2               .endif
000032r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000036r 2  C5 xx        
000033r 2  rr rr 50 4F  		keyword_addr "POS", POS
000037r 2  D3 xx        
000034r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000038r 2  D2 xx        
000035r 2  rr rr 52 4E  		keyword_addr "RND", RND
000039r 2  C4 xx        
000036r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
00003Ar 2  C7 xx        
000037r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Br 2  D0 xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_COS:
00004Er 2  rr rr 43 4F  		keyword_addr "COS", COS
000052r 2  D3 xx        
000039r 2               .segment "VECTORS"
000050r 2               UNFNC_SIN:
000050r 2  rr rr 53 49  		keyword_addr "SIN", SIN
000054r 2  CE xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_TAN:
000052r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000056r 2  CE xx        
00003Br 2               .segment "VECTORS"
000054r 2               UNFNC_ATN:
000054r 2  BB 00 41 54  		keyword_addr "ATN", ATN
000058r 2  CE xx        
00003Cr 2               .ifdef KBD
00003Cr 2               		keyword_addr "GETC", GETC
00003Cr 2               .endif
00003Cr 2               .ifndef CONFIG_NO_POKE
00003Cr 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
000040r 2  45 CB xx     
00003Dr 2               .endif
00003Dr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000041r 2  CE xx        
00003Er 2  rr rr 53 54  		keyword_addr "STR$", STR
000042r 2  52 A4 xx     
00003Fr 2  rr rr 56 41  		keyword_addr "VAL", VAL
000043r 2  CC xx        
000040r 2  rr rr 41 53  		keyword_addr "ASC", ASC
000044r 2  C3 xx        
000041r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000045r 2  52 A4 xx     
000042r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000046r 2  46 54 A4 xx  
000043r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000047r 2  47 48 54 A4  
00004Br 2  xx           
000044r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000048r 2  44 A4 xx     
000045r 2               .ifdef CONFIG_2
000045r 2  47 CF xx     		keyword	"GO", TOKEN_GO
000046r 2               .endif
000046r 2                       .segment "KEYWORDS"
0000E4r 2  00           		.byte   0
0000E5r 2               
0000E5r 2                       .segment "VECTORS"
000068r 2               MATHTBL:
000068r 2  79                   .byte   $79
000069r 2  rr rr                .word   FADDT-1
00006Br 2  79                   .byte   $79
00006Cr 2  rr rr                .word   FSUBT-1
00006Er 2  7B                   .byte   $7B
00006Fr 2  rr rr                .word   FMULTT-1
000071r 2  7B                   .byte   $7B
000072r 2  rr rr                .word   FDIVT-1
000074r 2  7F                   .byte   $7F
000075r 2  rr rr                .word   FPWRT-1
000077r 2  50                   .byte   $50
000078r 2  rr rr                .word   TAND-1
00007Ar 2  46                   .byte   $46
00007Br 2  rr rr                .word   OR-1
00007Dr 2  7D                   .byte   $7D
00007Er 2  rr rr                .word   NEGOP-1
000080r 2  5A                   .byte   $5A
000081r 2  rr rr                .word   EQUOP-1
000083r 2  64                   .byte   $64
000084r 2  rr rr                .word   RELOPS-1
000086r 2               
000086r 1               .include "error.s"
000086r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2  4E C6        define_error ERR_NOFOR, "NF"
000002r 2  53 CE        define_error ERR_SYNTAX, "SN"
000004r 2  52 C7        define_error ERR_NOGOSUB, "RG"
000006r 2  4F C4        define_error ERR_NODATA, "OD"
000008r 2  46 C3        define_error ERR_ILLQTY, "FC"
00000Ar 2  4F D6        define_error ERR_OVERFLOW, "OV"
00000Cr 2  4F CD        define_error ERR_MEMFULL, "OM"
00000Er 2  55 D3        define_error ERR_UNDEFSTAT, "US"
000010r 2  42 D3        define_error ERR_BADSUBS, "BS"
000012r 2  44 C4        define_error ERR_REDIMD, "DD"
000014r 2  2F B0        define_error ERR_ZERODIV, "/0"
000016r 2  49 C4        define_error ERR_ILLDIR, "ID"
000018r 2  54 CD        define_error ERR_BADTYPE, "TM"
00001Ar 2  4C D3        define_error ERR_STRLONG, "LS"
00001Cr 2  53 D4        define_error ERR_FRMCPX, "ST"
00001Er 2  43 CE        define_error ERR_CANTCONT, "CN"
000020r 2  55 C6        define_error ERR_UNDEFFN, "UF"
000022r 2               .else
000022r 2               define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000022r 2               define_error ERR_SYNTAX, "SYNTAX"
000022r 2               define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
000022r 2               define_error ERR_NODATA, "OUT OF DATA"
000022r 2               define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000022r 2               .ifdef CBM1
000022r 2               	.byte 0,0,0,0,0
000022r 2               .endif
000022r 2               define_error ERR_OVERFLOW, "OVERFLOW"
000022r 2               define_error ERR_MEMFULL, "OUT OF MEMORY"
000022r 2               define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
000022r 2               define_error ERR_BADSUBS, "BAD SUBSCRIPT"
000022r 2               define_error ERR_REDIMD, "REDIM'D ARRAY"
000022r 2               define_error ERR_ZERODIV, "DIVISION BY ZERO"
000022r 2               define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000022r 2               define_error ERR_BADTYPE, "TYPE MISMATCH"
000022r 2               define_error ERR_STRLONG, "STRING TOO LONG"
000022r 2               .ifdef CONFIG_FILE
000022r 2                 .ifdef CBM1
000022r 2               define_error ERR_BADDATA, "BAD DATA"
000022r 2                 .else
000022r 2               define_error ERR_BADDATA, "FILE DATA"
000022r 2                 .endif
000022r 2               .endif
000022r 2               define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
000022r 2               define_error ERR_CANTCONT, "CAN'T CONTINUE"
000022r 2               define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
000022r 2               .endif
000022r 2               
000022r 1               .include "message.s"
000022r 2               ; global messages: "error", "in", "ready", "break"
000022r 2               
000022r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2               		.byte   CR,LF,"OK",CR,LF
00000Cr 2                   .endif
00000Cr 2                 .endif
00000Cr 2               		.byte	0
00000Cr 2                .endif
00000Cr 2               .endif
00000Cr 2               QT_BREAK:
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	CR,LF," Brk"
00000Cr 2                       .byte   0
00000Cr 2                       .byte   $54,$D0 ; ???
00000Cr 2               .elseif .def(MICROTAN) || .def(AIM65)
00000Cr 2  0D 0A 20 42  		.byte CR,LF," BREAK"
000010r 2  52 45 41 4B  
000014r 2  00                   .byte   0
000015r 2               .else
000015r 2               		.byte CR,LF,"BREAK"
000015r 2                       .byte   0
000015r 2               .endif
000015r 2               
000015r 1               .include "memory.s"
000015r 2               ; generic stack and memory management code
000015r 2               ; this code is identical across all versions of
000015r 2               ; BASIC
000015r 2               
000015r 2               .segment "CODE"
000015r 2               
000015r 2               ; ----------------------------------------------------------------------------
000015r 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
000015r 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
000015r 2               ;
000015r 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
000015r 2               ; 	= $XXFF IF CALLED FROM "RETURN"
000015r 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
000015r 2               ;
000015r 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
000015r 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
000015r 2               ;
000015r 2               ;	.EQ. IF FOUND
000015r 2               ;	(X) = STACK PNTR OF FRAME FOUND
000015r 2               ; ----------------------------------------------------------------------------
000015r 2               GTFORPNT:
000015r 2  BA                   tsx
000016r 2  E8                   inx
000017r 2  E8                   inx
000018r 2  E8                   inx
000019r 2  E8                   inx
00001Ar 2               L2279:
00001Ar 2  BD 01 01             lda     STACK+1,x
00001Dr 2  C9 81                cmp     #$81
00001Fr 2  D0 21                bne     L22A1
000021r 2  A5 92                lda     FORPNT+1
000023r 2  D0 0A                bne     L228E
000025r 2  BD 02 01             lda     STACK+2,x
000028r 2  85 91                sta     FORPNT
00002Ar 2  BD 03 01             lda     STACK+3,x
00002Dr 2  85 92                sta     FORPNT+1
00002Fr 2               L228E:
00002Fr 2  DD 03 01             cmp     STACK+3,x
000032r 2  D0 07                bne     L229A
000034r 2  A5 91                lda     FORPNT
000036r 2  DD 02 01             cmp     STACK+2,x
000039r 2  F0 07                beq     L22A1
00003Br 2               L229A:
00003Br 2  8A                   txa
00003Cr 2  18                   clc
00003Dr 2  69 12                adc     #BYTES_PER_FRAME
00003Fr 2  AA                   tax
000040r 2  D0 D8                bne     L2279
000042r 2               L22A1:
000042r 2  60                   rts
000043r 2               
000043r 2               ; ----------------------------------------------------------------------------
000043r 2               ; MOVE BLOCK OF MEMORY UP
000043r 2               ;
000043r 2               ; ON ENTRY:
000043r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000043r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000043r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000043r 2               ; ----------------------------------------------------------------------------
000043r 2               BLTU:
000043r 2  20 rr rr             jsr     REASON
000046r 2  85 79                sta     STREND
000048r 2  84 7A                sty     STREND+1
00004Ar 2               BLTU2:
00004Ar 2  38                   sec
00004Br 2  A5 A2                lda     HIGHTR
00004Dr 2  E5 A7                sbc     LOWTR
00004Fr 2  85 6A                sta     INDEX
000051r 2  A8                   tay
000052r 2  A5 A3                lda     HIGHTR+1
000054r 2  E5 A8                sbc     LOWTR+1
000056r 2  AA                   tax
000057r 2  E8                   inx
000058r 2  98                   tya
000059r 2  F0 23                beq     L22DD
00005Br 2  A5 A2                lda     HIGHTR
00005Dr 2  38                   sec
00005Er 2  E5 6A                sbc     INDEX
000060r 2  85 A2                sta     HIGHTR
000062r 2  B0 03                bcs     L22C6
000064r 2  C6 A3                dec     HIGHTR+1
000066r 2  38                   sec
000067r 2               L22C6:
000067r 2  A5 A0                lda     HIGHDS
000069r 2  E5 6A                sbc     INDEX
00006Br 2  85 A0                sta     HIGHDS
00006Dr 2  B0 08                bcs     L22D6
00006Fr 2  C6 A1                dec     HIGHDS+1
000071r 2  90 04                bcc     L22D6
000073r 2               L22D2:
000073r 2  B1 A2                lda     (HIGHTR),y
000075r 2  91 A0                sta     (HIGHDS),y
000077r 2               L22D6:
000077r 2  88                   dey
000078r 2  D0 F9                bne     L22D2
00007Ar 2  B1 A2                lda     (HIGHTR),y
00007Cr 2  91 A0                sta     (HIGHDS),y
00007Er 2               L22DD:
00007Er 2  C6 A3                dec     HIGHTR+1
000080r 2  C6 A1                dec     HIGHDS+1
000082r 2  CA                   dex
000083r 2  D0 F2                bne     L22D6
000085r 2  60                   rts
000086r 2               
000086r 2               ; ----------------------------------------------------------------------------
000086r 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
000086r 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
000086r 2               ; ----------------------------------------------------------------------------
000086r 2               CHKMEM:
000086r 2  0A                   asl     a
000087r 2  69 44                adc     #SPACE_FOR_GOSUB
000089r 2  B0 35                bcs     MEMERR
00008Br 2  85 6A                sta     INDEX
00008Dr 2  BA                   tsx
00008Er 2  E4 6A                cpx     INDEX
000090r 2  90 2E                bcc     MEMERR
000092r 2  60                   rts
000093r 2               
000093r 2               ; ----------------------------------------------------------------------------
000093r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000093r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000093r 2               ; ----------------------------------------------------------------------------
000093r 2               REASON:
000093r 2  C4 7C                cpy     FRETOP+1
000095r 2  90 28                bcc     L231E
000097r 2  D0 04                bne     L22FC
000099r 2  C5 7B                cmp     FRETOP
00009Br 2  90 22                bcc     L231E
00009Dr 2               L22FC:
00009Dr 2  48                   pha
00009Er 2  A2 09                ldx     #FAC-TEMP1-1
0000A0r 2  98                   tya
0000A1r 2               L2300:
0000A1r 2  48                   pha
0000A2r 2  B5 9F                lda     TEMP1,x
0000A4r 2  CA                   dex
0000A5r 2  10 FA                bpl     L2300
0000A7r 2  20 rr rr             jsr     GARBAG
0000AAr 2  A2 F7                ldx     #TEMP1-FAC+1
0000ACr 2               L230B:
0000ACr 2  68                   pla
0000ADr 2  95 A9                sta     FAC,x
0000AFr 2  E8                   inx
0000B0r 2  30 FA                bmi     L230B
0000B2r 2  68                   pla
0000B3r 2  A8                   tay
0000B4r 2  68                   pla
0000B5r 2  C4 7C                cpy     FRETOP+1
0000B7r 2  90 06                bcc     L231E
0000B9r 2  D0 05                bne     MEMERR
0000BBr 2  C5 7B                cmp     FRETOP
0000BDr 2  B0 01                bcs     MEMERR
0000BFr 2               L231E:
0000BFr 2  60                   rts
0000C0r 2               
0000C0r 1               .include "program.s"
0000C0r 2               ; error
0000C0r 2               ; line input, line editing
0000C0r 2               ; tokenize
0000C0r 2               ; detokenize
0000C0r 2               ; BASIC program memory management
0000C0r 2               
0000C0r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C0r 2               
0000C0r 2               .segment "CODE"
0000C0r 2               
0000C0r 2               MEMERR:
0000C0r 2  A2 0C                ldx     #ERR_MEMFULL
0000C2r 2               
0000C2r 2               ; ----------------------------------------------------------------------------
0000C2r 2               ; HANDLE AN ERROR
0000C2r 2               ;
0000C2r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C2r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C2r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C2r 2               ; ----------------------------------------------------------------------------
0000C2r 2               ERROR:
0000C2r 2  46 10                lsr     Z14
0000C4r 2               .ifdef CONFIG_FILE
0000C4r 2                       lda     CURDVC    ; output
0000C4r 2                       beq     LC366     ; is screen
0000C4r 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000C4r 2                       lda     #$00
0000C4r 2                       sta     CURDVC
0000C4r 2               LC366:
0000C4r 2               .endif
0000C4r 2  20 rr rr             jsr     CRDO
0000C7r 2  20 rr rr             jsr     OUTQUES
0000CAr 2               L2329:
0000CAr 2  BD rr rr             lda     ERROR_MESSAGES,x
0000CDr 2               .ifndef CONFIG_SMALL_ERROR
0000CDr 2                       pha
0000CDr 2                       and     #$7F
0000CDr 2               .endif
0000CDr 2  20 rr rr             jsr     OUTDO
0000D0r 2               .ifdef CONFIG_SMALL_ERROR
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES+1,x
0000D3r 2                 .ifdef KBD
0000D3r 2                       and     #$7F
0000D3r 2                 .endif
0000D3r 2  20 rr rr             jsr     OUTDO
0000D6r 2               .else
0000D6r 2                       inx
0000D6r 2                       pla
0000D6r 2                       bpl     L2329
0000D6r 2               .endif
0000D6r 2  20 rr rr             jsr     STKINI
0000D9r 2  A9 rr                lda     #<QT_ERROR
0000DBr 2  A0 rr                ldy     #>QT_ERROR
0000DDr 2               
0000DDr 2               ; ----------------------------------------------------------------------------
0000DDr 2               ; PRINT STRING AT (Y,A)
0000DDr 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000DDr 2               ; FALL INTO WARM RESTART
0000DDr 2               ; ----------------------------------------------------------------------------
0000DDr 2               PRINT_ERROR_LINNUM:
0000DDr 2  20 rr rr             jsr     STROUT
0000E0r 2  A4 82                ldy     CURLIN+1
0000E2r 2  C8                   iny
0000E3r 2  F0 03                beq     RESTART
0000E5r 2  20 rr rr             jsr     INPRT
0000E8r 2               
0000E8r 2               ; ----------------------------------------------------------------------------
0000E8r 2               ; WARM RESTART ENTRY
0000E8r 2               ; ----------------------------------------------------------------------------
0000E8r 2               RESTART:
0000E8r 2               .ifdef KBD
0000E8r 2                       jsr     CRDO
0000E8r 2                       nop
0000E8r 2               L2351X:
0000E8r 2                       jsr     OKPRT
0000E8r 2               L2351:
0000E8r 2                       jsr     INLIN
0000E8r 2               LE28E:
0000E8r 2                       bpl     RESTART
0000E8r 2               .else
0000E8r 2  46 10                lsr     Z14
0000EAr 2                .ifndef AIM65
0000EAr 2                       lda     #<QT_OK
0000EAr 2                       ldy     #>QT_OK
0000EAr 2                 .ifdef CONFIG_CBM_ALL
0000EAr 2                       jsr     STROUT
0000EAr 2                 .else
0000EAr 2                       jsr     GOSTROUT
0000EAr 2                 .endif
0000EAr 2                .else
0000EAr 2  20 00 00             jsr     GORESTART
0000EDr 2                .endif
0000EDr 2               L2351:
0000EDr 2  20 rr rr             jsr     INLIN
0000F0r 2               .endif
0000F0r 2  86 C6                stx     TXTPTR
0000F2r 2  84 C7                sty     TXTPTR+1
0000F4r 2  20 BF 00             jsr     CHRGET
0000F7r 2               .ifdef CONFIG_11
0000F7r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
0000F7r 2               ; and ':' - a line starting with ':' in
0000F7r 2               ; direct mode gets ignored
0000F7r 2  AA                   tax
0000F8r 2               .endif
0000F8r 2               .ifdef KBD
0000F8r 2                       beq     L2351X
0000F8r 2               .else
0000F8r 2  F0 F3                beq     L2351
0000FAr 2               .endif
0000FAr 2  A2 FF                ldx     #$FF
0000FCr 2  86 82                stx     CURLIN+1
0000FEr 2  90 06                bcc     NUMBERED_LINE
000100r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000103r 2  4C rr rr             jmp     NEWSTT2
000106r 2               
000106r 2               ; ----------------------------------------------------------------------------
000106r 2               ; HANDLE NUMBERED LINE
000106r 2               ; ----------------------------------------------------------------------------
000106r 2               NUMBERED_LINE:
000106r 2  20 rr rr             jsr     LINGET
000109r 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Cr 2  84 08                sty     EOLPNTR
00010Er 2               .ifdef KBD
00010Er 2                       jsr     FNDLIN2
00010Er 2                       lda     JMPADRS+1
00010Er 2                       sta     LOWTR
00010Er 2                       sta     Z96
00010Er 2                       lda     JMPADRS+2
00010Er 2                       sta     LOWTR+1
00010Er 2                       sta     Z96+1
00010Er 2                       lda     LINNUM
00010Er 2                       sta     L06FE
00010Er 2                       lda     LINNUM+1
00010Er 2                       sta     L06FE+1
00010Er 2                       inc     LINNUM
00010Er 2                       bne     LE2D2
00010Er 2                       inc     LINNUM+1
00010Er 2                       bne     LE2D2
00010Er 2                       jmp     SYNERR
00010Er 2               LE2D2:
00010Er 2                       jsr     LF457
00010Er 2                       ldx     #Z96
00010Er 2                       jsr     CMPJMPADRS
00010Er 2                       bcs     LE2FD
00010Er 2               LE2DC:
00010Er 2                       ldx     #$00
00010Er 2                       lda     (JMPADRS+1,x)
00010Er 2                       sta     (Z96,x)
00010Er 2                       inc     JMPADRS+1
00010Er 2                       bne     LE2E8
00010Er 2                       inc     JMPADRS+2
00010Er 2               LE2E8:
00010Er 2                       inc     Z96
00010Er 2                       bne     LE2EE
00010Er 2                       inc     Z96+1
00010Er 2               LE2EE:
00010Er 2                       ldx     #VARTAB
00010Er 2                       jsr     CMPJMPADRS
00010Er 2                       bne     LE2DC
00010Er 2                       lda     Z96
00010Er 2                       sta     VARTAB
00010Er 2                       lda     Z96+1
00010Er 2                       sta     VARTAB+1
00010Er 2               LE2FD:
00010Er 2                       jsr     SETPTRS
00010Er 2                       jsr     LE33D
00010Er 2                       lda     INPUTBUFFER
00010Er 2               LE306:
00010Er 2                       beq     LE28E
00010Er 2                       cmp     #$A5
00010Er 2                       beq     LE306
00010Er 2                       clc
00010Er 2               .else
00010Er 2  20 rr rr             jsr     FNDLIN
000111r 2  90 44                bcc     PUT_NEW_LINE
000113r 2  A0 01                ldy     #$01
000115r 2  B1 A7                lda     (LOWTR),y
000117r 2  85 6B                sta     INDEX+1
000119r 2  A5 75                lda     VARTAB
00011Br 2  85 6A                sta     INDEX
00011Dr 2  A5 A8                lda     LOWTR+1
00011Fr 2  85 6D                sta     DEST+1
000121r 2  A5 A7                lda     LOWTR
000123r 2  88                   dey
000124r 2  F1 A7                sbc     (LOWTR),y
000126r 2  18                   clc
000127r 2  65 75                adc     VARTAB
000129r 2  85 75                sta     VARTAB
00012Br 2  85 6C                sta     DEST
00012Dr 2  A5 76                lda     VARTAB+1
00012Fr 2  69 FF                adc     #$FF
000131r 2  85 76                sta     VARTAB+1
000133r 2  E5 A8                sbc     LOWTR+1
000135r 2  AA                   tax
000136r 2  38                   sec
000137r 2  A5 A7                lda     LOWTR
000139r 2  E5 75                sbc     VARTAB
00013Br 2  A8                   tay
00013Cr 2  B0 03                bcs     L23A5
00013Er 2  E8                   inx
00013Fr 2  C6 6D                dec     DEST+1
000141r 2               L23A5:
000141r 2  18                   clc
000142r 2  65 6A                adc     INDEX
000144r 2  90 03                bcc     L23AD
000146r 2  C6 6B                dec     INDEX+1
000148r 2  18                   clc
000149r 2               L23AD:
000149r 2  B1 6A                lda     (INDEX),y
00014Br 2  91 6C                sta     (DEST),y
00014Dr 2  C8                   iny
00014Er 2  D0 F9                bne     L23AD
000150r 2  E6 6B                inc     INDEX+1
000152r 2  E6 6D                inc     DEST+1
000154r 2  CA                   dex
000155r 2  D0 F2                bne     L23AD
000157r 2               .endif
000157r 2               ; ----------------------------------------------------------------------------
000157r 2               PUT_NEW_LINE:
000157r 2               .ifndef KBD
000157r 2                 .ifdef CONFIG_2
000157r 2  20 rr rr             jsr     SETPTRS
00015Ar 2  20 rr rr             jsr     LE33D
00015Dr 2  A5 16                lda     INPUTBUFFER
00015Fr 2  F0 8C                beq     L2351
000161r 2  18                   clc
000162r 2                 .else
000162r 2                       lda     INPUTBUFFER
000162r 2                       beq     FIX_LINKS
000162r 2                       lda     MEMSIZ
000162r 2                       ldy     MEMSIZ+1
000162r 2                       sta     FRETOP
000162r 2                       sty     FRETOP+1
000162r 2                 .endif
000162r 2               .endif
000162r 2  A5 75                lda     VARTAB
000164r 2  85 A2                sta     HIGHTR
000166r 2  65 08                adc     EOLPNTR
000168r 2  85 A0                sta     HIGHDS
00016Ar 2  A4 76                ldy     VARTAB+1
00016Cr 2  84 A3                sty     HIGHTR+1
00016Er 2  90 01                bcc     L23D6
000170r 2  C8                   iny
000171r 2               L23D6:
000171r 2  84 A1                sty     HIGHDS+1
000173r 2  20 rr rr             jsr     BLTU
000176r 2               .ifdef CONFIG_INPUTBUFFER_0200
000176r 2                       lda     LINNUM
000176r 2                       ldy     LINNUM+1
000176r 2                       sta     INPUTBUFFER-2
000176r 2                       sty     INPUTBUFFER-1
000176r 2               .endif
000176r 2  A5 79                lda     STREND
000178r 2  A4 7A                ldy     STREND+1
00017Ar 2  85 75                sta     VARTAB
00017Cr 2  84 76                sty     VARTAB+1
00017Er 2  A4 08                ldy     EOLPNTR
000180r 2  88                   dey
000181r 2               ; ---COPY LINE INTO PROGRAM-------
000181r 2               L23E6:
000181r 2  B9 12 00             lda     INPUTBUFFER-4,y
000184r 2  91 A7                sta     (LOWTR),y
000186r 2  88                   dey
000187r 2  10 F8                bpl     L23E6
000189r 2               
000189r 2               ; ----------------------------------------------------------------------------
000189r 2               ; CLEAR ALL VARIABLES
000189r 2               ; RE-ESTABLISH ALL FORWARD LINKS
000189r 2               ; ----------------------------------------------------------------------------
000189r 2               FIX_LINKS:
000189r 2  20 rr rr             jsr     SETPTRS
00018Cr 2               .ifdef CONFIG_2
00018Cr 2  20 rr rr             jsr     LE33D
00018Fr 2  4C rr rr             jmp     L2351
000192r 2               LE33D:
000192r 2               .endif
000192r 2  A5 73                lda     TXTTAB
000194r 2  A4 74                ldy     TXTTAB+1
000196r 2  85 6A                sta     INDEX
000198r 2  84 6B                sty     INDEX+1
00019Ar 2  18                   clc
00019Br 2               L23FA:
00019Br 2  A0 01                ldy     #$01
00019Dr 2  B1 6A                lda     (INDEX),y
00019Fr 2               .ifdef CONFIG_2
00019Fr 2  F0 1D                beq     RET3
0001A1r 2               .else
0001A1r 2                       jeq     L2351
0001A1r 2               .endif
0001A1r 2  A0 04                ldy     #$04
0001A3r 2               L2405:
0001A3r 2  C8                   iny
0001A4r 2  B1 6A                lda     (INDEX),y
0001A6r 2  D0 FB                bne     L2405
0001A8r 2  C8                   iny
0001A9r 2  98                   tya
0001AAr 2  65 6A                adc     INDEX
0001ACr 2  AA                   tax
0001ADr 2  A0 00                ldy     #$00
0001AFr 2  91 6A                sta     (INDEX),y
0001B1r 2  A5 6B                lda     INDEX+1
0001B3r 2  69 00                adc     #$00
0001B5r 2  C8                   iny
0001B6r 2  91 6A                sta     (INDEX),y
0001B8r 2  86 6A                stx     INDEX
0001BAr 2  85 6B                sta     INDEX+1
0001BCr 2  90 DD                bcc     L23FA	; always
0001BEr 2               
0001BEr 2               ; ----------------------------------------------------------------------------
0001BEr 2               .ifdef KBD
0001BEr 2               .include "kbd_loadsave.s"
0001BEr 2               .endif
0001BEr 2               
0001BEr 2               .ifdef CONFIG_2
0001BEr 2               ; !!! kbd_loadsave.s requires an RTS here!
0001BEr 2               RET3:
0001BEr 2  60           		rts
0001BFr 2               .endif
0001BFr 2               
0001BFr 2               .include "inline.s"
0001BFr 3               .segment "CODE"
0001BFr 3               
0001BFr 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001BFr 3               L2420:
0001BFr 3                 .ifdef OSI
0001BFr 3                       jsr     OUTDO
0001BFr 3                 .endif
0001BFr 3  CA                   dex
0001C0r 3                 .ifdef AIM65
0001C0r 3  30 09                bmi     L2423
0001C2r 3  20 DC E7             jsr     PSLS
0001C5r 3  4C rr rr             jmp     INLIN2
0001C8r 3               LB35F:
0001C8r 3  20 rr rr             jsr     OUTDO
0001CBr 3                 .else
0001CBr 3                       bpl     INLIN2
0001CBr 3                 .endif
0001CBr 3               L2423:
0001CBr 3                 .ifdef OSI
0001CBr 3                       jsr     OUTDO
0001CBr 3                 .endif
0001CBr 3  20 rr rr             jsr     CRDO
0001CEr 3               .endif
0001CEr 3               
0001CEr 3               ; ----------------------------------------------------------------------------
0001CEr 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001CEr 3               ; ----------------------------------------------------------------------------
0001CEr 3               .ifndef KBD
0001CEr 3               INLIN:
0001CEr 3                 .ifdef APPLE
0001CEr 3                       ldx     #$DD
0001CEr 3               INLIN1:
0001CEr 3                       stx     $33
0001CEr 3                       jsr     L2900
0001CEr 3                       cpx     #$EF
0001CEr 3                       bcs     L0C32
0001CEr 3                       ldx     #$EF
0001CEr 3               L0C32:
0001CEr 3                       lda     #$00
0001CEr 3                       sta     INPUTBUFFER,x
0001CEr 3                       ldx     #<INPUTBUFFER-1
0001CEr 3                       ldy     #>INPUTBUFFER-1
0001CEr 3                       rts
0001CEr 3                 .endif
0001CEr 3               
0001CEr 3                 .ifndef APPLE
0001CEr 3  A2 00                ldx     #$00
0001D0r 3               INLIN2:
0001D0r 3  20 rr rr             jsr     GETLN
0001D3r 3                   .ifdef AIM65
0001D3r 3  C9 1A                cmp     #$1A
0001D5r 3  D0 06                bne     INLINAIM
0001D7r 3  20 20 E5             jsr     DU13
0001DAr 3  4C rr rr             jmp     INLIN
0001DDr 3               INLINAIM:
0001DDr 3                   .endif
0001DDr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001DDr 3  C9 07                cmp     #$07
0001DFr 3  F0 14                beq     L2443
0001E1r 3                   .endif
0001E1r 3  C9 0D                cmp     #$0D
0001E3r 3  F0 1F                beq     L2453
0001E5r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E5r 3  C9 20                cmp     #$20
0001E7r 3                     .ifdef AIM65
0001E7r 3  90 16                bcc     L244E
0001E9r 3                     .else
0001E9r 3                       bcc     INLIN2
0001E9r 3                     .endif
0001E9r 3                     .ifdef MICROTAN
0001E9r 3                       cmp     #$80
0001E9r 3                     .else
0001E9r 3                       .ifdef AIM65
0001E9r 3  C9 7F                cmp     #$7F
0001EBr 3  F0 D2                beq     L2420
0001EDr 3                       .endif
0001EDr 3  C9 7D                cmp     #$7D
0001EFr 3                     .endif
0001EFr 3  B0 DF                bcs     INLIN2
0001F1r 3  C9 40                cmp     #$40 ; @
0001F3r 3                     .ifdef AIM65
0001F3r 3  F0 D3                beq     LB35F
0001F5r 3                     .else
0001F5r 3                       beq     L2423
0001F5r 3                     .ifdef MICROTAN
0001F5r 3                       cmp     #$7F ; DEL
0001F5r 3                     .else
0001F5r 3                       cmp     #$5F ; _
0001F5r 3                     .endif
0001F5r 3                       beq     L2420
0001F5r 3                     .endif
0001F5r 3               L2443:
0001F5r 3                     .ifdef MICROTAN
0001F5r 3                       cpx     #$4F
0001F5r 3                     .else
0001F5r 3  E0 47                cpx     #$47
0001F7r 3                     .endif
0001F7r 3  B0 04                bcs     L244C
0001F9r 3                   .endif
0001F9r 3  95 16                sta     INPUTBUFFER,x
0001FBr 3  E8                   inx
0001FCr 3                   .if .def(OSI) || .def(AIM65)
0001FCr 3  2C                   .byte   $2C
0001FDr 3                   .else
0001FDr 3                       bne     INLIN2
0001FDr 3                   .endif
0001FDr 3               L244C:
0001FDr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001FDr 3  A9 07                lda     #$07 ; BEL
0001FFr 3               L244E:
0001FFr 3  20 rr rr             jsr     OUTDO
000202r 3  D0 CC                bne     INLIN2
000204r 3                   .endif
000204r 3               L2453:
000204r 3  4C rr rr             jmp     L29B9
000207r 3                 .endif
000207r 3               .endif
000207r 3               
000207r 3               .ifndef KBD
000207r 3                 .ifndef APPLE
000207r 3               GETLN:
000207r 3                   .ifdef CONFIG_FILE
000207r 3                       jsr     CHRIN
000207r 3                       ldy     CURDVC
000207r 3                       bne     L2465
000207r 3                   .else
000207r 3  20 rr rr             jsr     MONRDKEY
00020Ar 3                   .endif
00020Ar 3                   .ifdef OSI
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       nop
00020Ar 3                       and     #$7F
00020Ar 3                   .endif
00020Ar 3                 .endif
00020Ar 3                 .ifdef APPLE
00020Ar 3               RDKEY:
00020Ar 3                       jsr     LFD0C
00020Ar 3                       and     #$7F
00020Ar 3                 .endif
00020Ar 3                   .ifdef SYM1
00020Ar 3                       cmp     #$14
00020Ar 3                   .else
00020Ar 3  C9 0F                cmp     #$0F
00020Cr 3                   .endif
00020Cr 3  D0 08                bne     L2465
00020Er 3  48                   pha
00020Fr 3  A5 10                lda     Z14
000211r 3  49 FF                eor     #$FF
000213r 3  85 10                sta     Z14
000215r 3  68                   pla
000216r 3               L2465:
000216r 3  60                   rts
000217r 3               .endif
000217r 3               
000217r 2               
000217r 2               ; ----------------------------------------------------------------------------
000217r 2               ; TOKENIZE THE INPUT LINE
000217r 2               ; ----------------------------------------------------------------------------
000217r 2               PARSE_INPUT_LINE:
000217r 2  A6 C6                ldx     TXTPTR
000219r 2  A0 04                ldy     #$04
00021Br 2  84 0C                sty     DATAFLG
00021Dr 2               L246C:
00021Dr 2  B5 00                lda     INPUTBUFFERX,x
00021Fr 2               .ifdef CONFIG_CBM_ALL
00021Fr 2                       bpl     LC49E
00021Fr 2                       cmp     #$FF
00021Fr 2                       beq     L24AC
00021Fr 2                       inx
00021Fr 2                       bne     L246C
00021Fr 2               LC49E:
00021Fr 2               .endif
00021Fr 2  C9 20                cmp     #$20
000221r 2  F0 36                beq     L24AC
000223r 2  85 07                sta     ENDCHR
000225r 2  C9 22                cmp     #$22
000227r 2  F0 54                beq     L24D0
000229r 2  24 0C                bit     DATAFLG
00022Br 2  70 2C                bvs     L24AC
00022Dr 2  C9 3F                cmp     #$3F
00022Fr 2  D0 04                bne     L2484
000231r 2  A9 97                lda     #TOKEN_PRINT
000233r 2  D0 24                bne     L24AC
000235r 2               L2484:
000235r 2  C9 30                cmp     #$30
000237r 2  90 04                bcc     L248C
000239r 2  C9 3C                cmp     #$3C
00023Br 2  90 1C                bcc     L24AC
00023Dr 2               ; ----------------------------------------------------------------------------
00023Dr 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
00023Dr 2               ; WITH CURRENT CHAR FROM INPUT LINE
00023Dr 2               ; ----------------------------------------------------------------------------
00023Dr 2               L248C:
00023Dr 2  84 B9                sty     STRNG2
00023Fr 2  A0 00                ldy     #$00
000241r 2  84 08                sty     EOLPNTR
000243r 2  88                   dey
000244r 2  86 C6                stx     TXTPTR
000246r 2  CA                   dex
000247r 2               L2496:
000247r 2  C8                   iny
000248r 2               L2497:
000248r 2  E8                   inx
000249r 2               L2498:
000249r 2               .ifdef KBD
000249r 2                       jsr     GET_UPPER
000249r 2               .else
000249r 2  B5 00                lda     INPUTBUFFERX,x
00024Br 2                 .ifndef CONFIG_2
00024Br 2                       cmp     #$20
00024Br 2                       beq     L2497
00024Br 2                 .endif
00024Br 2               .endif
00024Br 2  38                   sec
00024Cr 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
00024Fr 2  F0 F6                beq     L2496
000251r 2  C9 80                cmp     #$80
000253r 2  D0 2F                bne     L24D7
000255r 2  05 08                ora     EOLPNTR
000257r 2               ; ----------------------------------------------------------------------------
000257r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000257r 2               ; ----------------------------------------------------------------------------
000257r 2               L24AA:
000257r 2  A4 B9                ldy     STRNG2
000259r 2               L24AC:
000259r 2  E8                   inx
00025Ar 2  C8                   iny
00025Br 2  99 11 00             sta     INPUTBUFFER-5,y
00025Er 2  B9 11 00             lda     INPUTBUFFER-5,y
000261r 2  F0 34                beq     L24EA
000263r 2  38                   sec
000264r 2  E9 3A                sbc     #$3A
000266r 2  F0 04                beq     L24BF
000268r 2  C9 49                cmp     #$49
00026Ar 2  D0 02                bne     L24C1
00026Cr 2               L24BF:
00026Cr 2  85 0C                sta     DATAFLG
00026Er 2               L24C1:
00026Er 2  38                   sec
00026Fr 2  E9 54                sbc     #TOKEN_REM-':'
000271r 2  D0 AA                bne     L246C
000273r 2  85 07                sta     ENDCHR
000275r 2               ; ----------------------------------------------------------------------------
000275r 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000275r 2               ; BY COPYING CHARS UP TO ENDCHR.
000275r 2               ; ----------------------------------------------------------------------------
000275r 2               L24C8:
000275r 2  B5 00                lda     INPUTBUFFERX,x
000277r 2  F0 E0                beq     L24AC
000279r 2  C5 07                cmp     ENDCHR
00027Br 2  F0 DC                beq     L24AC
00027Dr 2               L24D0:
00027Dr 2  C8                   iny
00027Er 2  99 11 00             sta     INPUTBUFFER-5,y
000281r 2  E8                   inx
000282r 2  D0 F1                bne     L24C8
000284r 2               ; ----------------------------------------------------------------------------
000284r 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
000284r 2               ; ----------------------------------------------------------------------------
000284r 2               L24D7:
000284r 2  A6 C6                ldx     TXTPTR
000286r 2  E6 08                inc     EOLPNTR
000288r 2               L24DB:
000288r 2  C8                   iny
000289r 2  B9 rr rr             lda     MATHTBL+28+1,y
00028Cr 2  10 FA                bpl     L24DB
00028Er 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000291r 2  D0 B6                bne     L2498
000293r 2  B5 00                lda     INPUTBUFFERX,x
000295r 2  10 C0                bpl     L24AA
000297r 2               ; ---END OF LINE------------------
000297r 2               L24EA:
000297r 2  99 13 00             sta     INPUTBUFFER-3,y
00029Ar 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00029Ar 2                       dec     TXTPTR+1
00029Ar 2               .endif
00029Ar 2  A9 15                lda     #<INPUTBUFFER-1
00029Cr 2  85 C6                sta     TXTPTR
00029Er 2  60                   rts
00029Fr 2               
00029Fr 2               ; ----------------------------------------------------------------------------
00029Fr 2               ; SEARCH FOR LINE
00029Fr 2               ;
00029Fr 2               ; (LINNUM) = LINE # TO FIND
00029Fr 2               ; IF NOT FOUND:  CARRY = 0
00029Fr 2               ;	LOWTR POINTS AT NEXT LINE
00029Fr 2               ; IF FOUND:      CARRY = 1
00029Fr 2               ;	LOWTR POINTS AT LINE
00029Fr 2               ; ----------------------------------------------------------------------------
00029Fr 2               FNDLIN:
00029Fr 2               .ifdef KBD
00029Fr 2                       jsr     CHRGET
00029Fr 2                       jmp     LE444
00029Fr 2               LE440:
00029Fr 2                       php
00029Fr 2                       jsr     LINGET
00029Fr 2               LE444:
00029Fr 2                       jsr     LF457
00029Fr 2                       ldx     #$FF
00029Fr 2                       plp
00029Fr 2                       beq     LE464
00029Fr 2                       jsr     CHRGOT
00029Fr 2                       beq     L2520
00029Fr 2                       cmp     #$A5
00029Fr 2                       bne     L2520
00029Fr 2                       jsr     CHRGET
00029Fr 2                       beq     LE464
00029Fr 2                       bcs     LE461
00029Fr 2                       jsr     LINGET
00029Fr 2                       beq     L2520
00029Fr 2               LE461:
00029Fr 2                       jmp     SYNERR
00029Fr 2               LE464:
00029Fr 2                       stx     LINNUM
00029Fr 2                       stx     LINNUM+1
00029Fr 2               .else
00029Fr 2  A5 73                lda     TXTTAB
0002A1r 2  A6 74                ldx     TXTTAB+1
0002A3r 2               FL1:
0002A3r 2  A0 01                ldy     #$01
0002A5r 2  85 A7                sta     LOWTR
0002A7r 2  86 A8                stx     LOWTR+1
0002A9r 2  B1 A7                lda     (LOWTR),y
0002ABr 2  F0 1F                beq     L251F
0002ADr 2  C8                   iny
0002AEr 2  C8                   iny
0002AFr 2  A5 15                lda     LINNUM+1
0002B1r 2  D1 A7                cmp     (LOWTR),y
0002B3r 2  90 18                bcc     L2520
0002B5r 2  F0 03                beq     L250D
0002B7r 2  88                   dey
0002B8r 2  D0 09                bne     L2516
0002BAr 2               L250D:
0002BAr 2  A5 14                lda     LINNUM
0002BCr 2  88                   dey
0002BDr 2  D1 A7                cmp     (LOWTR),y
0002BFr 2  90 0C                bcc     L2520
0002C1r 2  F0 0A                beq     L2520
0002C3r 2               L2516:
0002C3r 2  88                   dey
0002C4r 2  B1 A7                lda     (LOWTR),y
0002C6r 2  AA                   tax
0002C7r 2  88                   dey
0002C8r 2  B1 A7                lda     (LOWTR),y
0002CAr 2  B0 D7                bcs     FL1
0002CCr 2               L251F:
0002CCr 2  18                   clc
0002CDr 2               .endif
0002CDr 2               L2520:
0002CDr 2  60                   rts
0002CEr 2               
0002CEr 2               ; ----------------------------------------------------------------------------
0002CEr 2               ; "NEW" STATEMENT
0002CEr 2               ; ----------------------------------------------------------------------------
0002CEr 2               NEW:
0002CEr 2  D0 FD                bne     L2520
0002D0r 2               SCRTCH:
0002D0r 2  A9 00                lda     #$00
0002D2r 2  A8                   tay
0002D3r 2  91 73                sta     (TXTTAB),y
0002D5r 2  C8                   iny
0002D6r 2  91 73                sta     (TXTTAB),y
0002D8r 2  A5 73                lda     TXTTAB
0002DAr 2               .ifdef CONFIG_2
0002DAr 2  18           		clc
0002DBr 2               .endif
0002DBr 2  69 02                adc     #$02
0002DDr 2  85 75                sta     VARTAB
0002DFr 2  A5 74                lda     TXTTAB+1
0002E1r 2  69 00                adc     #$00
0002E3r 2  85 76                sta     VARTAB+1
0002E5r 2               ; ----------------------------------------------------------------------------
0002E5r 2               SETPTRS:
0002E5r 2  20 rr rr             jsr     STXTPT
0002E8r 2               .ifdef CONFIG_11A
0002E8r 2  A9 00                lda     #$00
0002EAr 2               
0002EAr 2               ; ----------------------------------------------------------------------------
0002EAr 2               ; "CLEAR" STATEMENT
0002EAr 2               ; ----------------------------------------------------------------------------
0002EAr 2               CLEAR:
0002EAr 2  D0 2A                bne     L256A
0002ECr 2               .endif
0002ECr 2               CLEARC:
0002ECr 2               .ifdef KBD
0002ECr 2                       lda     #<CONST_MEMSIZ
0002ECr 2                       ldy     #>CONST_MEMSIZ
0002ECr 2               .else
0002ECr 2  A5 7F                lda     MEMSIZ
0002EEr 2  A4 80                ldy     MEMSIZ+1
0002F0r 2               .endif
0002F0r 2  85 7B                sta     FRETOP
0002F2r 2  84 7C                sty     FRETOP+1
0002F4r 2               .ifdef CONFIG_CBM_ALL
0002F4r 2                       jsr     CLALL
0002F4r 2               .endif
0002F4r 2  A5 75                lda     VARTAB
0002F6r 2  A4 76                ldy     VARTAB+1
0002F8r 2  85 77                sta     ARYTAB
0002FAr 2  84 78                sty     ARYTAB+1
0002FCr 2  85 79                sta     STREND
0002FEr 2  84 7A                sty     STREND+1
000300r 2  20 rr rr             jsr     RESTORE
000303r 2               ; ----------------------------------------------------------------------------
000303r 2               STKINI:
000303r 2  A2 61                ldx     #TEMPST
000305r 2  86 5E                stx     TEMPPT
000307r 2  68                   pla
000308r 2               .ifdef CONFIG_2
000308r 2  A8           		tay
000309r 2               .else
000309r 2                       sta     STACK+STACK_TOP+1
000309r 2               .endif
000309r 2  68                   pla
00030Ar 2               .ifndef CONFIG_2
00030Ar 2                       sta     STACK+STACK_TOP+2
00030Ar 2               .endif
00030Ar 2  A2 FD                ldx     #STACK_TOP
00030Cr 2  9A                   txs
00030Dr 2               .ifdef CONFIG_2
00030Dr 2  48                   pha
00030Er 2  98                   tya
00030Fr 2  48                   pha
000310r 2               .endif
000310r 2  A9 00                lda     #$00
000312r 2  85 86                sta     OLDTEXT+1
000314r 2  85 0D                sta     SUBFLG
000316r 2               L256A:
000316r 2  60                   rts
000317r 2               
000317r 2               ; ----------------------------------------------------------------------------
000317r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000317r 2               ; ----------------------------------------------------------------------------
000317r 2               STXTPT:
000317r 2  18                   clc
000318r 2  A5 73                lda     TXTTAB
00031Ar 2  69 FF                adc     #$FF
00031Cr 2  85 C6                sta     TXTPTR
00031Er 2  A5 74                lda     TXTTAB+1
000320r 2  69 FF                adc     #$FF
000322r 2  85 C7                sta     TXTPTR+1
000324r 2  60                   rts
000325r 2               
000325r 2               ; ----------------------------------------------------------------------------
000325r 2               .ifdef KBD
000325r 2               LE4C0:
000325r 2                       ldy     #<LE444
000325r 2                       ldx     #>LE444
000325r 2               LE4C4:
000325r 2                       jsr     LFFD6
000325r 2                       jsr     LFFED
000325r 2                       lda     $0504
000325r 2                       clc
000325r 2                       adc     #$08
000325r 2                       sta     $0504
000325r 2                       rts
000325r 2               
000325r 2               CMPJMPADRS:
000325r 2                       lda     1,x
000325r 2                       cmp     JMPADRS+2
000325r 2                       bne     LE4DE
000325r 2                       lda     0,x
000325r 2                       cmp     JMPADRS+1
000325r 2               LE4DE:
000325r 2                       rts
000325r 2               .endif
000325r 2               
000325r 2               ; ----------------------------------------------------------------------------
000325r 2               ; "LIST" STATEMENT
000325r 2               ; ----------------------------------------------------------------------------
000325r 2               LIST:
000325r 2               .ifdef KBD
000325r 2                       jsr     LE440
000325r 2                       bne     LE4DE
000325r 2                       pla
000325r 2                       pla
000325r 2               L25A6:
000325r 2                       jsr     CRDO
000325r 2               .else
000325r 2                   .ifdef AIM65
000325r 2  48                   pha
000326r 2  A9 00                lda     #$00
000328r 2               LB4BF:
000328r 2  85 0E                sta     INPUTFLG
00032Ar 2  68                   pla
00032Br 2                   .endif
00032Br 2                 .ifdef MICROTAN
00032Br 2                       php
00032Br 2                       jmp     LE21C ; patch
00032Br 2               LC57E:
00032Br 2                  .elseif .def(AIM65) || .def(SYM1)
00032Br 2  08                   php
00032Cr 2  20 rr rr             jsr     LINGET
00032Fr 2               LC57E:
00032Fr 2                 .else
00032Fr 2                       bcc     L2581
00032Fr 2                       beq     L2581
00032Fr 2                       cmp     #TOKEN_MINUS
00032Fr 2                       bne     L256A
00032Fr 2               L2581:
00032Fr 2                       jsr     LINGET
00032Fr 2                 .endif
00032Fr 2  20 rr rr             jsr     FNDLIN
000332r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000332r 2  28                   plp
000333r 2  F0 14                beq     L2598
000335r 2                 .endif
000335r 2  20 C5 00             jsr     CHRGOT
000338r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000338r 2  F0 15                beq     L25A6
00033Ar 2                 .else
00033Ar 2                       beq     L2598
00033Ar 2                 .endif
00033Ar 2  C9 A5                cmp     #TOKEN_MINUS
00033Cr 2  D0 8F                bne     L2520
00033Er 2  20 BF 00             jsr     CHRGET
000341r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000341r 2  F0 06                beq     L2598
000343r 2  20 rr rr             jsr     LINGET
000346r 2  F0 07                beq     L25A6
000348r 2  60                   rts
000349r 2                 .else
000349r 2                       jsr     LINGET
000349r 2                       bne     L2520
000349r 2                 .endif
000349r 2               L2598:
000349r 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
000349r 2                       pla
000349r 2                       pla
000349r 2                       lda     LINNUM
000349r 2                       ora     LINNUM+1
000349r 2                       bne     L25A6
000349r 2                 .endif
000349r 2  A9 FF                lda     #$FF
00034Br 2  85 14                sta     LINNUM
00034Dr 2  85 15                sta     LINNUM+1
00034Fr 2               L25A6:
00034Fr 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00034Fr 2  68                   pla
000350r 2  68                   pla
000351r 2                 .endif
000351r 2               L25A6X:
000351r 2               .endif
000351r 2  A0 01                ldy     #$01
000353r 2               .ifdef CONFIG_DATAFLG
000353r 2                       sty     DATAFLG
000353r 2               .endif
000353r 2  B1 A7                lda     (LOWTRX),y
000355r 2  F0 39                beq     L25E5
000357r 2               .ifdef MICROTAN
000357r 2                       jmp     LE21F
000357r 2               LC5A9:
000357r 2               .else
000357r 2  20 rr rr             jsr     ISCNTC
00035Ar 2               .endif
00035Ar 2               .ifndef KBD
00035Ar 2  20 rr rr             jsr     CRDO
00035Dr 2               .endif
00035Dr 2  C8                   iny
00035Er 2  B1 A7                lda     (LOWTRX),y
000360r 2  AA                   tax
000361r 2  C8                   iny
000362r 2  B1 A7                lda     (LOWTRX),y
000364r 2  C5 15                cmp     LINNUM+1
000366r 2  D0 04                bne     L25C1
000368r 2  E4 14                cpx     LINNUM
00036Ar 2  F0 02                beq     L25C3
00036Cr 2               L25C1:
00036Cr 2  B0 22                bcs     L25E5
00036Er 2               ; ---LIST ONE LINE----------------
00036Er 2               L25C3:
00036Er 2  84 91                sty     FORPNT
000370r 2  20 rr rr             jsr     LINPRT
000373r 2  A9 20                lda     #$20
000375r 2               L25CA:
000375r 2  A4 91                ldy     FORPNT
000377r 2  29 7F                and     #$7F
000379r 2               L25CE:
000379r 2  20 rr rr             jsr     OUTDO
00037Cr 2               .ifdef CONFIG_DATAFLG
00037Cr 2                       cmp     #$22
00037Cr 2                       bne     LA519
00037Cr 2                       lda     DATAFLG
00037Cr 2                       eor     #$FF
00037Cr 2                       sta     DATAFLG
00037Cr 2               LA519:
00037Cr 2               .endif
00037Cr 2  C8                   iny
00037Dr 2               .ifdef CONFIG_11
00037Dr 2  F0 11                beq     L25E5
00037Fr 2               .endif
00037Fr 2  B1 A7                lda     (LOWTRX),y
000381r 2  D0 22                bne     L25E8
000383r 2  A8                   tay
000384r 2  B1 A7                lda     (LOWTRX),y
000386r 2  AA                   tax
000387r 2  C8                   iny
000388r 2  B1 A7                lda     (LOWTRX),y
00038Ar 2  86 A7                stx     LOWTRX
00038Cr 2  85 A8                sta     LOWTRX+1
00038Er 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00038Er 2  D0 C1                bne     L25A6X
000390r 2               .else
000390r 2                       bne     L25A6
000390r 2               .endif
000390r 2               L25E5:
000390r 2               .ifdef AIM65
000390r 2  A5 0E                lda     INPUTFLG
000392r 2  F0 0E                beq     L25E5a
000394r 2  20 rr rr             jsr     CRDO
000397r 2  20 rr rr             jsr     CRDO
00039Ar 2  A9 1A                lda     #$1a
00039Cr 2  20 rr rr             jsr     OUTDO
00039Fr 2  20 0A E5             jsr     $e50a
0003A2r 2               L25E5a:
0003A2r 2               .endif
0003A2r 2  4C rr rr             jmp     RESTART
0003A5r 2               L25E8:
0003A5r 2  10 D2                bpl     L25CE
0003A7r 2               .ifdef CONFIG_DATAFLG
0003A7r 2                       cmp     #$FF
0003A7r 2                       beq     L25CE
0003A7r 2                       bit     DATAFLG
0003A7r 2                       bmi     L25CE
0003A7r 2               .endif
0003A7r 2  38                   sec
0003A8r 2  E9 7F                sbc     #$7F
0003AAr 2  AA                   tax
0003ABr 2  84 91                sty     FORPNT
0003ADr 2  A0 FF                ldy     #$FF
0003AFr 2               L25F2:
0003AFr 2  CA                   dex
0003B0r 2  F0 08                beq     L25FD
0003B2r 2               L25F5:
0003B2r 2  C8                   iny
0003B3r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003B6r 2  10 FA                bpl     L25F5
0003B8r 2  30 F5                bmi     L25F2
0003BAr 2               L25FD:
0003BAr 2  C8                   iny
0003BBr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003BEr 2  30 B5                bmi     L25CA
0003C0r 2  20 rr rr             jsr     OUTDO
0003C3r 2  D0 F5                bne     L25FD	; always
0003C5r 2               
0003C5r 2               
0003C5r 1               .include "flow1.s"
0003C5r 2               .segment "CODE"
0003C5r 2               
0003C5r 2               ; ----------------------------------------------------------------------------
0003C5r 2               ; "FOR" STATEMENT
0003C5r 2               ;
0003C5r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003C5r 2               ; 2 -- TXTPTR
0003C5r 2               ; 2 -- LINE NUMBER
0003C5r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003C5r 2               ; 1 -- STEP SIGN
0003C5r 2               ; 5 -- STEP VALUE
0003C5r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003C5r 2               ; 1 -- FOR TOKEN ($81)
0003C5r 2               ; ----------------------------------------------------------------------------
0003C5r 2               FOR:
0003C5r 2  A9 80                lda     #$80
0003C7r 2  85 0D                sta     SUBFLG
0003C9r 2  20 rr rr             jsr     LET
0003CCr 2  20 rr rr             jsr     GTFORPNT
0003CFr 2  D0 05                bne     L2619
0003D1r 2  8A                   txa
0003D2r 2  69 0F                adc     #FOR_STACK1
0003D4r 2  AA                   tax
0003D5r 2  9A                   txs
0003D6r 2               L2619:
0003D6r 2  68                   pla
0003D7r 2  68                   pla
0003D8r 2  A9 09                lda     #FOR_STACK2
0003DAr 2  20 rr rr             jsr     CHKMEM
0003DDr 2  20 rr rr             jsr     DATAN
0003E0r 2  18                   clc
0003E1r 2  98                   tya
0003E2r 2  65 C6                adc     TXTPTR
0003E4r 2  48                   pha
0003E5r 2  A5 C7                lda     TXTPTR+1
0003E7r 2  69 00                adc     #$00
0003E9r 2  48                   pha
0003EAr 2  A5 82                lda     CURLIN+1
0003ECr 2  48                   pha
0003EDr 2  A5 81                lda     CURLIN
0003EFr 2  48                   pha
0003F0r 2  A9 9E                lda     #TOKEN_TO
0003F2r 2  20 rr rr             jsr     SYNCHR
0003F5r 2  20 rr rr             jsr     CHKNUM
0003F8r 2  20 rr rr             jsr     FRMNUM
0003FBr 2  A5 AE                lda     FACSIGN
0003FDr 2  09 7F                ora     #$7F
0003FFr 2  25 AA                and     FAC+1
000401r 2  85 AA                sta     FAC+1
000403r 2  A9 rr                lda     #<STEP
000405r 2  A0 rr                ldy     #>STEP
000407r 2  85 6A                sta     INDEX
000409r 2  84 6B                sty     INDEX+1
00040Br 2  4C rr rr             jmp     FRM_STACK3
00040Er 2               
00040Er 2               ; ----------------------------------------------------------------------------
00040Er 2               ; "STEP" PHRASE OF "FOR" STATEMENT
00040Er 2               ; ----------------------------------------------------------------------------
00040Er 2               STEP:
00040Er 2  A9 rr                lda     #<CON_ONE
000410r 2  A0 rr                ldy     #>CON_ONE
000412r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000415r 2  20 C5 00             jsr     CHRGOT
000418r 2  C9 A3                cmp     #TOKEN_STEP
00041Ar 2  D0 06                bne     L2665
00041Cr 2  20 BF 00             jsr     CHRGET
00041Fr 2  20 rr rr             jsr     FRMNUM
000422r 2               L2665:
000422r 2  20 rr rr             jsr     SIGN
000425r 2  20 rr rr             jsr     FRM_STACK2
000428r 2  A5 92                lda     FORPNT+1
00042Ar 2  48                   pha
00042Br 2  A5 91                lda     FORPNT
00042Dr 2  48                   pha
00042Er 2  A9 81                lda     #$81
000430r 2  48                   pha
000431r 2               
000431r 2               ; ----------------------------------------------------------------------------
000431r 2               ; PERFORM NEXT STATEMENT
000431r 2               ; ----------------------------------------------------------------------------
000431r 2               NEWSTT:
000431r 2  20 rr rr             jsr     ISCNTC
000434r 2  A5 C6                lda     TXTPTR
000436r 2  A4 C7                ldy     TXTPTR+1
000438r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000438r 2                       cpy     #>INPUTBUFFER
000438r 2                 .ifdef CBM2
000438r 2                       nop
000438r 2                 .endif
000438r 2                       beq     LC6D4
000438r 2               .else
000438r 2               ; BUG on AppleSoft I,
000438r 2               ; fixed differently on AppleSoft II (ldx/inx)
000438r 2  F0 06                beq     L2683
00043Ar 2               .endif
00043Ar 2  85 85                sta     OLDTEXT
00043Cr 2  84 86                sty     OLDTEXT+1
00043Er 2               LC6D4:
00043Er 2  A0 00                ldy     #$00
000440r 2               L2683:
000440r 2  B1 C6                lda     (TXTPTR),y
000442r 2               .ifndef CONFIG_11
000442r 2                       beq     LA5DC	; old: 1 cycle more on generic case
000442r 2                       cmp     #$3A
000442r 2                       beq     NEWSTT2
000442r 2               SYNERR1:
000442r 2                       jmp     SYNERR
000442r 2               LA5DC:
000442r 2               .else
000442r 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
000444r 2               .endif
000444r 2  A0 02                ldy     #$02
000446r 2  B1 C6                lda     (TXTPTR),y
000448r 2  18                   clc
000449r 2               .ifdef CONFIG_2
000449r 2  D0 03 4C rr          jeq     L2701
00044Dr 2  rr           
00044Er 2               .else
00044Er 2                       beq     L2701
00044Er 2               .endif
00044Er 2  C8                   iny
00044Fr 2  B1 C6                lda     (TXTPTR),y
000451r 2  85 81                sta     CURLIN
000453r 2  C8                   iny
000454r 2  B1 C6                lda     (TXTPTR),y
000456r 2  85 82                sta     CURLIN+1
000458r 2  98                   tya
000459r 2  65 C6                adc     TXTPTR
00045Br 2  85 C6                sta     TXTPTR
00045Dr 2  90 02                bcc     NEWSTT2
00045Fr 2  E6 C7                inc     TXTPTR+1
000461r 2               NEWSTT2:
000461r 2  20 BF 00             jsr     CHRGET
000464r 2  20 rr rr             jsr     EXECUTE_STATEMENT
000467r 2  4C rr rr             jmp     NEWSTT
00046Ar 2               
00046Ar 2               ; ----------------------------------------------------------------------------
00046Ar 2               ; EXECUTE A STATEMENT
00046Ar 2               ;
00046Ar 2               ; (A) IS FIRST CHAR OF STATEMENT
00046Ar 2               ; CARRY IS SET
00046Ar 2               ; ----------------------------------------------------------------------------
00046Ar 2               EXECUTE_STATEMENT:
00046Ar 2               .ifndef CONFIG_11A
00046Ar 2                       beq     RET1
00046Ar 2               .else
00046Ar 2  F0 3C                beq     RET2
00046Cr 2               .endif
00046Cr 2               .ifndef CONFIG_11
00046Cr 2                       sec
00046Cr 2               .endif
00046Cr 2               EXECUTE_STATEMENT1:
00046Cr 2  E9 80                sbc     #$80
00046Er 2               .ifndef CONFIG_11
00046Er 2                       jcc     LET	; old: 1 cycle more on instr.
00046Er 2               .else
00046Er 2  90 11                bcc     LET1; new: 1 cycle more on assignment
000470r 2               .endif
000470r 2  C9 1D                cmp     #NUM_TOKENS
000472r 2               .ifdef CONFIG_2
000472r 2  B0 17                bcs     LC721
000474r 2               .else
000474r 2                       bcs     SYNERR1
000474r 2               .endif
000474r 2  0A                   asl     a
000475r 2  A8                   tay
000476r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
000479r 2  48                   pha
00047Ar 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
00047Dr 2  48                   pha
00047Er 2  4C BF 00             jmp     CHRGET
000481r 2               
000481r 2               .ifdef CONFIG_11
000481r 2               LET1:
000481r 2  4C rr rr             jmp     LET
000484r 2               
000484r 2               COLON:
000484r 2  C9 3A                cmp     #$3A
000486r 2  F0 D9                beq     NEWSTT2
000488r 2               SYNERR1:
000488r 2  4C rr rr             jmp     SYNERR
00048Br 2               .endif
00048Br 2               
00048Br 2               .ifdef CONFIG_2; GO TO
00048Br 2               LC721:
00048Br 2  C9 45                cmp     #TOKEN_GO-$80
00048Dr 2  D0 F9                bne     SYNERR1
00048Fr 2  20 BF 00             jsr     CHRGET
000492r 2  A9 9E                lda     #TOKEN_TO
000494r 2  20 rr rr             jsr     SYNCHR
000497r 2  4C rr rr             jmp     GOTO
00049Ar 2               .endif
00049Ar 2               
00049Ar 2               ; ----------------------------------------------------------------------------
00049Ar 2               ; "RESTORE" STATEMENT
00049Ar 2               ; ----------------------------------------------------------------------------
00049Ar 2               RESTORE:
00049Ar 2  38                   sec
00049Br 2  A5 73                lda     TXTTAB
00049Dr 2  E9 01                sbc     #$01
00049Fr 2  A4 74                ldy     TXTTAB+1
0004A1r 2  B0 01                bcs     SETDA
0004A3r 2  88                   dey
0004A4r 2               SETDA:
0004A4r 2  85 89                sta     DATPTR
0004A6r 2  84 8A                sty     DATPTR+1
0004A8r 2               RET2:
0004A8r 2  60                   rts
0004A9r 2               
0004A9r 2               .include "iscntc.s"
0004A9r 3               .segment "CODE"
0004A9r 3               ; ----------------------------------------------------------------------------
0004A9r 3               ; SEE IF CONTROL-C TYPED
0004A9r 3               ; ----------------------------------------------------------------------------
0004A9r 3               .ifndef CONFIG_CBM_ALL
0004A9r 3               .include "cbm_iscntc.s"
0004A9r 4               ; nothing - ISCNTC is a KERNAL function
0004A9r 4               
0004A9r 3               .endif
0004A9r 3               .ifdef KBD
0004A9r 3               .include "kbd_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef OSI
0004A9r 3               .include "osi_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef APPLE
0004A9r 3               .include "apple_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef KIM
0004A9r 3               .include "kim_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef MICROTAN
0004A9r 3               .include "microtan_iscntc.s"
0004A9r 3               .endif
0004A9r 3               .ifdef AIM65
0004A9r 3               .include "aim65_iscntc.s"
0004A9r 4               .segment "CODE"
0004A9r 4               ISCNTC:
0004A9r 4  AD 80 A4             lda     DRA2
0004ACr 4  48                   pha
0004ADr 4  A9 7F                lda     #$7f
0004AFr 4  8D 80 A4             sta     DRA2
0004B2r 4  48                   pha
0004B3r 4  68                   pla
0004B4r 4  AD 82 A4             lda     DRB2
0004B7r 4  2A                   rol     a
0004B8r 4  68                   pla
0004B9r 4  8D 80 A4             sta     DRA2
0004BCr 4  B0 EA                bcs     RET2
0004BEr 4               
0004BEr 4  20 40 EC             jsr     GETKEY
0004C1r 4  A9 03                lda     #$03
0004C3r 4  C9 03                cmp     #$03
0004C5r 4               ;!!! runs into "STOP"
0004C5r 4               
0004C5r 3               .endif
0004C5r 3               .ifdef SYM1
0004C5r 3               .include "sym1_iscntc.s"
0004C5r 3               .endif
0004C5r 3               .ifdef EATER
0004C5r 3               .include "eater_iscntc.s"
0004C5r 3               .endif
0004C5r 3               ;!!! runs into "STOP"
0004C5r 3               
0004C5r 2               ;!!! runs into "STOP"
0004C5r 2               ; ----------------------------------------------------------------------------
0004C5r 2               ; "STOP" STATEMENT
0004C5r 2               ; ----------------------------------------------------------------------------
0004C5r 2               STOP:
0004C5r 2  B0 01                bcs     END2
0004C7r 2               
0004C7r 2               ; ----------------------------------------------------------------------------
0004C7r 2               ; "END" STATEMENT
0004C7r 2               ; ----------------------------------------------------------------------------
0004C7r 2               END:
0004C7r 2  18                   clc
0004C8r 2               END2:
0004C8r 2  D0 3D                bne     RET1
0004CAr 2  A5 C6                lda     TXTPTR
0004CCr 2  A4 C7                ldy     TXTPTR+1
0004CEr 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004CEr 2               ; BUG on AppleSoft I
0004CEr 2               ; fix exists on AppleSoft II
0004CEr 2               ; TXTPTR+1 will always be > 0
0004CEr 2                       ldx     CURLIN+1
0004CEr 2                       inx
0004CEr 2               .endif
0004CEr 2  F0 0C                beq     END4
0004D0r 2  85 85                sta     OLDTEXT
0004D2r 2  84 86                sty     OLDTEXT+1
0004D4r 2               CONTROL_C_TYPED:
0004D4r 2  A5 81                lda     CURLIN
0004D6r 2  A4 82                ldy     CURLIN+1
0004D8r 2  85 83                sta     OLDLIN
0004DAr 2  84 84                sty     OLDLIN+1
0004DCr 2               END4:
0004DCr 2  68                   pla
0004DDr 2  68                   pla
0004DEr 2               L2701:
0004DEr 2  A9 rr                lda     #<QT_BREAK
0004E0r 2  A0 rr                ldy     #>QT_BREAK
0004E2r 2               .ifndef KBD
0004E2r 2  A2 00                ldx     #$00
0004E4r 2  86 10                stx     Z14
0004E6r 2               .endif
0004E6r 2  90 03                bcc     L270E
0004E8r 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004EBr 2               L270E:
0004EBr 2  4C rr rr             jmp     RESTART
0004EEr 2               .ifdef KBD
0004EEr 2               LE664:
0004EEr 2                       tay
0004EEr 2                       jmp     SNGFLT
0004EEr 2               .endif
0004EEr 2               
0004EEr 2               ; ----------------------------------------------------------------------------
0004EEr 2               ; "CONT" COMMAND
0004EEr 2               ; ----------------------------------------------------------------------------
0004EEr 2               CONT:
0004EEr 2  D0 17                bne     RET1
0004F0r 2  A2 1E                ldx     #ERR_CANTCONT
0004F2r 2  A4 86                ldy     OLDTEXT+1
0004F4r 2  D0 03                bne     L271C
0004F6r 2  4C rr rr             jmp     ERROR
0004F9r 2               L271C:
0004F9r 2  A5 85                lda     OLDTEXT
0004FBr 2  85 C6                sta     TXTPTR
0004FDr 2  84 C7                sty     TXTPTR+1
0004FFr 2  A5 83                lda     OLDLIN
000501r 2  A4 84                ldy     OLDLIN+1
000503r 2  85 81                sta     CURLIN
000505r 2  84 82                sty     CURLIN+1
000507r 2               RET1:
000507r 2  60                   rts
000508r 2               
000508r 2               .ifdef KBD
000508r 2               PRT:
000508r 2                       jsr     GETBYT
000508r 2                       txa
000508r 2               ; not ROR bug safe
000508r 2                       ror     a
000508r 2                       ror     a
000508r 2                       ror     a
000508r 2                       sta     $8F
000508r 2                       rts
000508r 2               
000508r 2               LE68C:
000508r 2                       ldy     #$12
000508r 2               LE68E:
000508r 2                       lda     LEA30,y
000508r 2                       sta     $03A2,y
000508r 2                       dey
000508r 2                       bpl     LE68E
000508r 2                       rts
000508r 2               .endif
000508r 2               
000508r 2               .ifndef AIM65
000508r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
000508r 2               ; CBM1 has the keyword removed,
000508r 2               ; but the code is still here
000508r 2               NULL:
000508r 2                       jsr     GETBYT
000508r 2                       bne     RET1
000508r 2                       inx
000508r 2                       cpx     #NULL_MAX
000508r 2                       bcs     L2739
000508r 2                       dex
000508r 2                       stx     Z15
000508r 2               L2738:
000508r 2                       rts
000508r 2               L2739:
000508r 2                       jmp     IQERR
000508r 2               .endif
000508r 2               .ifndef CONFIG_11A
000508r 2               CLEAR:
000508r 2                       bne     RET1
000508r 2                       jmp     CLEARC
000508r 2               .endif
000508r 2               .endif
000508r 2               
000508r 1               .include "loadsave.s"
000508r 2               .segment "CODE"
000508r 2               
000508r 2               .ifdef APPLE
000508r 2               .include "apple_loadsave.s"
000508r 2               .endif
000508r 2               .ifdef KIM
000508r 2               .include "kim_loadsave.s"
000508r 2               .endif
000508r 2               .ifdef MICROTAN
000508r 2               .include "microtan_loadsave.s"
000508r 2               .endif
000508r 2               .ifdef AIM65
000508r 2               .include "aim65_loadsave.s"
000508r 3               .segment "CODE"
000508r 3               
000508r 3               SAVE:
000508r 3  48                   pha
000509r 3  20 71 E8             jsr     WHEREO
00050Cr 3  20 rr rr             jsr     OUTSP
00050Fr 3  A9 FF                lda     #$ff
000511r 3  4C rr rr             jmp     LB4BF
000514r 3               
000514r 3               MONRDKEY:
000514r 3  AD 12 A4             lda     INFLG
000517r 3  20 rr rr             jsr     COUT5
00051Ar 3  D0 03                bne     LOAD2
00051Cr 3  4C 93 E9             jmp     INALL
00051Fr 3               LOAD2:
00051Fr 3  4C 83 FE             jmp     CUREAD
000522r 3               
000522r 3               MONCOUT:
000522r 3  48                   pha
000523r 3  AD 13 A4             lda     OUTFLG
000526r 3  20 rr rr             jsr     COUT5
000529r 3  D0 04                bne     COUT3
00052Br 3  68                   pla
00052Cr 3  4C BC E9             jmp     OUTALL
00052Fr 3               
00052Fr 3               COUT3:
00052Fr 3  68                   pla
000530r 3  C9 0A                cmp     #LF
000532r 3  F0 17                beq     COUT6
000534r 3  C9 0D                cmp     #CR
000536r 3  F0 03                beq     COUT4
000538r 3  4C 7A E9             jmp     OUTPUT
00053Br 3               COUT4:
00053Br 3  20 24 EA             jsr     CRCK
00053Er 3  A9 0D                lda     #CR
000540r 3  60                   rts
000541r 3               
000541r 3               COUT5:
000541r 3  C9 54                cmp     #$54
000543r 3  F0 06                beq     COUT6
000545r 3  C9 55                cmp     #$55
000547r 3  F0 02                beq     COUT6
000549r 3  C9 4C                cmp     #$4C
00054Br 3               COUT6:
00054Br 3  60                   rts
00054Cr 3               
00054Cr 3               MONRDKEY2:
00054Cr 3  20 EF EC             jsr     ROONEK
00054Fr 3  98                   tya
000550r 3  F0 EF                beq     COUT5
000552r 3  4C 43 EC             jmp     GETKY
000555r 3               
000555r 2               .endif
000555r 2               .ifdef SYM1
000555r 2               .include "sym1_loadsave.s"
000555r 2               .endif
000555r 2               
000555r 1               .include "flow2.s"
000555r 2               .segment "CODE"
000555r 2               ; ----------------------------------------------------------------------------
000555r 2               ; "RUN" COMMAND
000555r 2               ; ----------------------------------------------------------------------------
000555r 2               RUN:
000555r 2  D0 03                bne     L27CF
000557r 2  4C rr rr             jmp     SETPTRS
00055Ar 2               L27CF:
00055Ar 2  20 rr rr             jsr     CLEARC
00055Dr 2  4C rr rr             jmp     L27E9
000560r 2               
000560r 2               ; ----------------------------------------------------------------------------
000560r 2               ; "GOSUB" STATEMENT
000560r 2               ;
000560r 2               ; LEAVES 7 BYTES ON STACK:
000560r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
000560r 2               ; 2 -- TXTPTR
000560r 2               ; 2 -- LINE #
000560r 2               ; 1 -- GOSUB TOKEN
000560r 2               ; ----------------------------------------------------------------------------
000560r 2               GOSUB:
000560r 2  A9 03                lda     #$03
000562r 2  20 rr rr             jsr     CHKMEM
000565r 2  A5 C7                lda     TXTPTR+1
000567r 2  48                   pha
000568r 2  A5 C6                lda     TXTPTR
00056Ar 2  48                   pha
00056Br 2  A5 82                lda     CURLIN+1
00056Dr 2  48                   pha
00056Er 2  A5 81                lda     CURLIN
000570r 2  48                   pha
000571r 2  A9 8C                lda     #TOKEN_GOSUB
000573r 2  48                   pha
000574r 2               L27E9:
000574r 2  20 C5 00             jsr     CHRGOT
000577r 2  20 rr rr             jsr     GOTO
00057Ar 2  4C rr rr             jmp     NEWSTT
00057Dr 2               
00057Dr 2               ; ----------------------------------------------------------------------------
00057Dr 2               ; "GOTO" STATEMENT
00057Dr 2               ; ALSO USED BY "RUN" AND "GOSUB"
00057Dr 2               ; ----------------------------------------------------------------------------
00057Dr 2               GOTO:
00057Dr 2  20 rr rr             jsr     LINGET
000580r 2  20 rr rr             jsr     REMN
000583r 2  A5 82                lda     CURLIN+1
000585r 2  C5 15                cmp     LINNUM+1
000587r 2  B0 0B                bcs     L2809
000589r 2  98                   tya
00058Ar 2  38                   sec
00058Br 2  65 C6                adc     TXTPTR
00058Dr 2  A6 C7                ldx     TXTPTR+1
00058Fr 2  90 07                bcc     L280D
000591r 2  E8                   inx
000592r 2  B0 04                bcs     L280D
000594r 2               L2809:
000594r 2  A5 73                lda     TXTTAB
000596r 2  A6 74                ldx     TXTTAB+1
000598r 2               L280D:
000598r 2               .ifdef KBD
000598r 2                       jsr     LF457
000598r 2                       bne     UNDERR
000598r 2               .else
000598r 2  20 rr rr             jsr     FL1
00059Br 2  90 1E                bcc     UNDERR
00059Dr 2               .endif
00059Dr 2  A5 A7                lda     LOWTRX
00059Fr 2  E9 01                sbc     #$01
0005A1r 2  85 C6                sta     TXTPTR
0005A3r 2  A5 A8                lda     LOWTRX+1
0005A5r 2  E9 00                sbc     #$00
0005A7r 2  85 C7                sta     TXTPTR+1
0005A9r 2               L281E:
0005A9r 2  60                   rts
0005AAr 2               
0005AAr 2               ; ----------------------------------------------------------------------------
0005AAr 2               ; "POP" AND "RETURN" STATEMENTS
0005AAr 2               ; ----------------------------------------------------------------------------
0005AAr 2               POP:
0005AAr 2  D0 FD                bne     L281E
0005ACr 2  A9 FF                lda     #$FF
0005AEr 2               .ifdef CONFIG_2A
0005AEr 2  85 92                sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
0005B0r 2               .else
0005B0r 2                       sta     FORPNT
0005B0r 2               .endif
0005B0r 2  20 rr rr             jsr     GTFORPNT
0005B3r 2  9A                   txs
0005B4r 2  C9 8C                cmp     #TOKEN_GOSUB
0005B6r 2  F0 0B                beq     RETURN
0005B8r 2  A2 04                ldx     #ERR_NOGOSUB
0005BAr 2  2C                   .byte   $2C
0005BBr 2               UNDERR:
0005BBr 2  A2 0E                ldx     #ERR_UNDEFSTAT
0005BDr 2  4C rr rr             jmp     ERROR
0005C0r 2               ; ----------------------------------------------------------------------------
0005C0r 2               SYNERR2:
0005C0r 2  4C rr rr             jmp     SYNERR
0005C3r 2               ; ----------------------------------------------------------------------------
0005C3r 2               RETURN:
0005C3r 2  68                   pla
0005C4r 2  68                   pla
0005C5r 2  85 81                sta     CURLIN
0005C7r 2  68                   pla
0005C8r 2  85 82                sta     CURLIN+1
0005CAr 2  68                   pla
0005CBr 2  85 C6                sta     TXTPTR
0005CDr 2  68                   pla
0005CEr 2  85 C7                sta     TXTPTR+1
0005D0r 2               
0005D0r 2               ; ----------------------------------------------------------------------------
0005D0r 2               ; "DATA" STATEMENT
0005D0r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
0005D0r 2               ; ----------------------------------------------------------------------------
0005D0r 2               DATA:
0005D0r 2  20 rr rr             jsr     DATAN
0005D3r 2               
0005D3r 2               ; ----------------------------------------------------------------------------
0005D3r 2               ; ADD (Y) TO TXTPTR
0005D3r 2               ; ----------------------------------------------------------------------------
0005D3r 2               ADDON:
0005D3r 2  98                   tya
0005D4r 2  18                   clc
0005D5r 2  65 C6                adc     TXTPTR
0005D7r 2  85 C6                sta     TXTPTR
0005D9r 2  90 02                bcc     L2852
0005DBr 2  E6 C7                inc     TXTPTR+1
0005DDr 2               L2852:
0005DDr 2  60                   rts
0005DEr 2               
0005DEr 2               ; ----------------------------------------------------------------------------
0005DEr 2               ; SCAN AHEAD TO NEXT ":" OR EOL
0005DEr 2               ; ----------------------------------------------------------------------------
0005DEr 2               DATAN:
0005DEr 2  A2 3A                ldx     #$3A
0005E0r 2  2C                   .byte   $2C
0005E1r 2               REMN:
0005E1r 2  A2 00                ldx     #$00
0005E3r 2  86 06                stx     CHARAC
0005E5r 2  A0 00                ldy     #$00
0005E7r 2  84 07                sty     ENDCHR
0005E9r 2               L285E:
0005E9r 2  A5 07                lda     ENDCHR
0005EBr 2  A6 06                ldx     CHARAC
0005EDr 2  85 06                sta     CHARAC
0005EFr 2  86 07                stx     ENDCHR
0005F1r 2               L2866:
0005F1r 2  B1 C6                lda     (TXTPTR),y
0005F3r 2  F0 E8                beq     L2852
0005F5r 2  C5 07                cmp     ENDCHR
0005F7r 2  F0 E4                beq     L2852
0005F9r 2  C8                   iny
0005FAr 2  C9 22                cmp     #$22
0005FCr 2               .ifndef CONFIG_11
0005FCr 2                       beq     L285E; old: swap & cont is faster
0005FCr 2                       bne     L2866
0005FCr 2               .else
0005FCr 2  D0 F3                bne     L2866; new: cont is faster
0005FEr 2  F0 E9                beq     L285E
000600r 2               .endif
000600r 2               
000600r 2               ; ----------------------------------------------------------------------------
000600r 2               ; "IF" STATEMENT
000600r 2               ; ----------------------------------------------------------------------------
000600r 2               IF:
000600r 2  20 rr rr             jsr     FRMEVL
000603r 2  20 C5 00             jsr     CHRGOT
000606r 2  C9 88                cmp     #TOKEN_GOTO
000608r 2  F0 05                beq     L2884
00060Ar 2  A9 A1                lda     #TOKEN_THEN
00060Cr 2  20 rr rr             jsr     SYNCHR
00060Fr 2               L2884:
00060Fr 2  A5 A9                lda     FAC
000611r 2  D0 05                bne     L288D
000613r 2               
000613r 2               ; ----------------------------------------------------------------------------
000613r 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
000613r 2               ; ----------------------------------------------------------------------------
000613r 2               REM:
000613r 2  20 rr rr             jsr     REMN
000616r 2  F0 BB                beq     ADDON
000618r 2               L288D:
000618r 2  20 C5 00             jsr     CHRGOT
00061Br 2  B0 03                bcs     L2895
00061Dr 2  4C rr rr             jmp     GOTO
000620r 2               L2895:
000620r 2  4C rr rr             jmp     EXECUTE_STATEMENT
000623r 2               
000623r 2               ; ----------------------------------------------------------------------------
000623r 2               ; "ON" STATEMENT
000623r 2               ;
000623r 2               ; ON <EXP> GOTO <LIST>
000623r 2               ; ON <EXP> GOSUB <LIST>
000623r 2               ; ----------------------------------------------------------------------------
000623r 2               ON:
000623r 2  20 rr rr             jsr     GETBYT
000626r 2  48                   pha
000627r 2  C9 8C                cmp     #TOKEN_GOSUB
000629r 2  F0 04                beq     L28A4
00062Br 2               L28A0:
00062Br 2  C9 88                cmp     #TOKEN_GOTO
00062Dr 2  D0 91                bne     SYNERR2
00062Fr 2               L28A4:
00062Fr 2  C6 AD                dec     FAC_LAST
000631r 2  D0 04                bne     L28AC
000633r 2  68                   pla
000634r 2  4C rr rr             jmp     EXECUTE_STATEMENT1
000637r 2               L28AC:
000637r 2  20 BF 00             jsr     CHRGET
00063Ar 2  20 rr rr             jsr     LINGET
00063Dr 2  C9 2C                cmp     #$2C
00063Fr 2  F0 EE                beq     L28A4
000641r 2  68                   pla
000642r 2               L28B7:
000642r 2  60                   rts
000643r 2               
000643r 1               .include "misc1.s"
000643r 2               .segment "CODE"
000643r 2               
000643r 2               ; ----------------------------------------------------------------------------
000643r 2               ; CONVERT LINE NUMBER
000643r 2               ; ----------------------------------------------------------------------------
000643r 2               LINGET:
000643r 2  A2 00                ldx     #$00
000645r 2  86 14                stx     LINNUM
000647r 2  86 15                stx     LINNUM+1
000649r 2               L28BE:
000649r 2  B0 F7                bcs     L28B7
00064Br 2  E9 2F                sbc     #$2F
00064Dr 2  85 06                sta     CHARAC
00064Fr 2  A5 15                lda     LINNUM+1
000651r 2  85 6A                sta     INDEX
000653r 2  C9 19                cmp     #$19
000655r 2  B0 D4                bcs     L28A0
000657r 2               ; <<<<<DANGEROUS CODE>>>>>
000657r 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
000657r 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
000657r 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
000657r 2               ; FOR OTHER CALLS TO LINGET.
000657r 2               ;
000657r 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
000657r 2               ; THEN TYPE "GO TO 437761".
000657r 2               ;
000657r 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
000657r 2               ; THE PROBLEM.  ($AB00 - $ABFF)
000657r 2               ; <<<<<DANGEROUS CODE>>>>>
000657r 2  A5 14                lda     LINNUM
000659r 2  0A                   asl     a
00065Ar 2  26 6A                rol     INDEX
00065Cr 2  0A                   asl     a
00065Dr 2  26 6A                rol     INDEX
00065Fr 2  65 14                adc     LINNUM
000661r 2  85 14                sta     LINNUM
000663r 2  A5 6A                lda     INDEX
000665r 2  65 15                adc     LINNUM+1
000667r 2  85 15                sta     LINNUM+1
000669r 2  06 14                asl     LINNUM
00066Br 2  26 15                rol     LINNUM+1
00066Dr 2  A5 14                lda     LINNUM
00066Fr 2  65 06                adc     CHARAC
000671r 2  85 14                sta     LINNUM
000673r 2  90 02                bcc     L28EC
000675r 2  E6 15                inc     LINNUM+1
000677r 2               L28EC:
000677r 2  20 BF 00             jsr     CHRGET
00067Ar 2  4C rr rr             jmp     L28BE
00067Dr 2               
00067Dr 2               ; ----------------------------------------------------------------------------
00067Dr 2               ; "LET" STATEMENT
00067Dr 2               ;
00067Dr 2               ; LET <VAR> = <EXP>
00067Dr 2               ; <VAR> = <EXP>
00067Dr 2               ; ----------------------------------------------------------------------------
00067Dr 2               LET:
00067Dr 2  20 rr rr             jsr     PTRGET
000680r 2  85 91                sta     FORPNT
000682r 2  84 92                sty     FORPNT+1
000684r 2  A9 AC                lda     #TOKEN_EQUAL
000686r 2  20 rr rr             jsr     SYNCHR
000689r 2               .ifndef CONFIG_SMALL
000689r 2  A5 0B                lda     VALTYP+1
00068Br 2  48                   pha
00068Cr 2               .endif
00068Cr 2  A5 0A                lda     VALTYP
00068Er 2  48                   pha
00068Fr 2  20 rr rr             jsr     FRMEVL
000692r 2  68                   pla
000693r 2  2A                   rol     a
000694r 2  20 rr rr             jsr     CHKVAL
000697r 2  D0 18                bne     LETSTRING
000699r 2               .ifndef CONFIG_SMALL
000699r 2  68                   pla
00069Ar 2               LET2:
00069Ar 2  10 12                bpl     L2923
00069Cr 2  20 rr rr             jsr     ROUND_FAC
00069Fr 2  20 rr rr             jsr     AYINT
0006A2r 2  A0 00                ldy     #$00
0006A4r 2  A5 AC                lda     FAC+3
0006A6r 2  91 91                sta     (FORPNT),y
0006A8r 2  C8                   iny
0006A9r 2  A5 AD                lda     FAC+4
0006ABr 2  91 91                sta     (FORPNT),y
0006ADr 2  60                   rts
0006AEr 2               L2923:
0006AEr 2               .endif
0006AEr 2               
0006AEr 2               ; ----------------------------------------------------------------------------
0006AEr 2               ; REAL VARIABLE = EXPRESSION
0006AEr 2               ; ----------------------------------------------------------------------------
0006AEr 2  4C rr rr             jmp     SETFOR
0006B1r 2               LETSTRING:
0006B1r 2               .ifndef CONFIG_SMALL
0006B1r 2  68                   pla
0006B2r 2               .endif
0006B2r 2               
0006B2r 2               ; ----------------------------------------------------------------------------
0006B2r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
0006B2r 2               ; ----------------------------------------------------------------------------
0006B2r 2               PUTSTR:
0006B2r 2               .ifdef CONFIG_CBM_ALL
0006B2r 2                       ldy     FORPNT+1
0006B2r 2                 .ifdef CBM1
0006B2r 2                       cpy     #$D0	; TI$
0006B2r 2                 .else
0006B2r 2                       cpy     #$DE
0006B2r 2                 .endif
0006B2r 2                       bne     LC92B
0006B2r 2                       jsr     FREFAC
0006B2r 2                       cmp     #$06
0006B2r 2                 .ifdef CBM2
0006B2r 2                       bne     IQERR1
0006B2r 2                 .else
0006B2r 2                       jne     IQERR
0006B2r 2                 .endif
0006B2r 2                       ldy     #$00
0006B2r 2                       sty     FAC
0006B2r 2                       sty     FACSIGN
0006B2r 2               LC8E8:
0006B2r 2                       sty     STRNG2
0006B2r 2                       jsr     LC91C
0006B2r 2                       jsr     MUL10
0006B2r 2                       inc     STRNG2
0006B2r 2                       ldy     STRNG2
0006B2r 2                       jsr     LC91C
0006B2r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
0006B2r 2                       tax
0006B2r 2                       beq     LC902
0006B2r 2                       inx
0006B2r 2                       txa
0006B2r 2                       jsr     LD9BF
0006B2r 2               LC902:
0006B2r 2                       ldy     STRNG2
0006B2r 2                       iny
0006B2r 2                       cpy     #$06
0006B2r 2                       bne     LC8E8
0006B2r 2                       jsr     MUL10
0006B2r 2                       jsr     QINT
0006B2r 2                       ldx     #$02
0006B2r 2                       sei
0006B2r 2               LC912:
0006B2r 2                       lda     FAC+2,x
0006B2r 2                       sta     TISTR,x
0006B2r 2                       dex
0006B2r 2                       bpl     LC912
0006B2r 2                       cli
0006B2r 2                       rts
0006B2r 2               LC91C:
0006B2r 2                       lda     (INDEX),y
0006B2r 2                       jsr     CHRGOT2
0006B2r 2                       bcc     LC926
0006B2r 2               IQERR1:
0006B2r 2                       jmp     IQERR
0006B2r 2               LC926:
0006B2r 2                       sbc     #$2F
0006B2r 2                       jmp     ADDACC
0006B2r 2               LC92B:
0006B2r 2               .endif
0006B2r 2  A0 02                ldy     #$02
0006B4r 2  B1 AC                lda     (FAC_LAST-1),y
0006B6r 2  C5 7C                cmp     FRETOP+1
0006B8r 2  90 17                bcc     L2946
0006BAr 2  D0 07                bne     L2938
0006BCr 2  88                   dey
0006BDr 2  B1 AC                lda     (FAC_LAST-1),y
0006BFr 2  C5 7B                cmp     FRETOP
0006C1r 2  90 0E                bcc     L2946
0006C3r 2               L2938:
0006C3r 2  A4 AD                ldy     FAC_LAST
0006C5r 2  C4 76                cpy     VARTAB+1
0006C7r 2  90 08                bcc     L2946
0006C9r 2  D0 0D                bne     L294D
0006CBr 2  A5 AC                lda     FAC_LAST-1
0006CDr 2  C5 75                cmp     VARTAB
0006CFr 2  B0 07                bcs     L294D
0006D1r 2               L2946:
0006D1r 2  A5 AC                lda     FAC_LAST-1
0006D3r 2  A4 AD                ldy     FAC_LAST
0006D5r 2  4C rr rr             jmp     L2963
0006D8r 2               L294D:
0006D8r 2  A0 00                ldy     #$00
0006DAr 2  B1 AC                lda     (FAC_LAST-1),y
0006DCr 2  20 rr rr             jsr     STRINI
0006DFr 2  A5 98                lda     DSCPTR
0006E1r 2  A4 99                ldy     DSCPTR+1
0006E3r 2  85 B7                sta     STRNG1
0006E5r 2  84 B8                sty     STRNG1+1
0006E7r 2  20 rr rr             jsr     MOVINS
0006EAr 2  A9 A9                lda     #FAC
0006ECr 2  A0 00                ldy     #$00
0006EEr 2               L2963:
0006EEr 2  85 98                sta     DSCPTR
0006F0r 2  84 99                sty     DSCPTR+1
0006F2r 2  20 rr rr             jsr     FRETMS
0006F5r 2  A0 00                ldy     #$00
0006F7r 2  B1 98                lda     (DSCPTR),y
0006F9r 2  91 91                sta     (FORPNT),y
0006FBr 2  C8                   iny
0006FCr 2  B1 98                lda     (DSCPTR),y
0006FEr 2  91 91                sta     (FORPNT),y
000700r 2  C8                   iny
000701r 2  B1 98                lda     (DSCPTR),y
000703r 2  91 91                sta     (FORPNT),y
000705r 2               RET5:
000705r 2  60                   rts
000706r 2               .ifdef AIM65
000706r 2               LB89D:
000706r 2  C9 21                cmp     #$21
000708r 2  D0 FB                bne     RET5
00070Ar 2  A9 80                lda     #$80
00070Cr 2  8D 11 A4             sta     PRIFLG
00070Fr 2  4C BF 00             jmp     CHRGET
000712r 2               .endif
000712r 2               
000712r 2               .ifdef CONFIG_FILE
000712r 2               PRINTH:
000712r 2                       jsr     CMD
000712r 2                       jmp     LCAD6
000712r 2               CMD:
000712r 2                       jsr     GETBYT
000712r 2                       beq     LC98F
000712r 2                       lda     #$2C
000712r 2                       jsr     SYNCHR
000712r 2               LC98F:
000712r 2                       php
000712r 2                       jsr     CHKOUT
000712r 2                       stx     CURDVC
000712r 2                       plp
000712r 2                       jmp     PRINT
000712r 2               .endif
000712r 2               
000712r 2               
000712r 1               .include "print.s"
000712r 2               .segment "CODE"
000712r 2               
000712r 2               .ifdef AIM65
000712r 2               PRINT:
000712r 2  AD 11 A4             lda     PRIFLG
000715r 2  85 BE                sta     ZBE
000717r 2  20 rr rr             jsr     L297E
00071Ar 2               LB8B1:
00071Ar 2  A5 BE                lda     ZBE
00071Cr 2  8D 11 A4             sta     PRIFLG
00071Fr 2  60                   rts
000720r 2               .endif
000720r 2               
000720r 2               PRSTRING:
000720r 2  20 rr rr             jsr     STRPRT
000723r 2               L297E:
000723r 2  20 C5 00             jsr     CHRGOT
000726r 2               
000726r 2               ; ----------------------------------------------------------------------------
000726r 2               ; "PRINT" STATEMENT
000726r 2               ; ----------------------------------------------------------------------------
000726r 2               .ifndef AIM65
000726r 2               PRINT:
000726r 2               .endif
000726r 2  F0 41                beq     CRDO
000728r 2               PRINT2:
000728r 2  F0 51                beq     L29DD
00072Ar 2               .ifdef AIM65
00072Ar 2  20 rr rr             jsr     LB89D
00072Dr 2  F0 4C                beq     L29DD
00072Fr 2               .endif
00072Fr 2  C9 9D                cmp     #TOKEN_TAB
000731r 2  F0 60                beq     L29F5
000733r 2  C9 A0                cmp     #TOKEN_SPC
000735r 2               .ifdef CONFIG_2
000735r 2  18                   clc	; also AppleSoft II
000736r 2               .endif
000736r 2  F0 5B                beq     L29F5
000738r 2  C9 2C                cmp     #','
00073Ar 2               ; Pre-KIM had no CLC. KIM added the CLC
00073Ar 2               ; here. Post-KIM moved the CLC up...
00073Ar 2               ; (makes no sense on KIM, liveness = 0)
00073Ar 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
00073Ar 2                       clc
00073Ar 2               .endif
00073Ar 2  F0 40                beq     L29DE
00073Cr 2  C9 3B                cmp     #$3B
00073Er 2  F0 68                beq     L2A0D
000740r 2  20 rr rr             jsr     FRMEVL
000743r 2  24 0A                bit     VALTYP
000745r 2  30 D9                bmi     PRSTRING
000747r 2  20 rr rr             jsr     FOUT
00074Ar 2  20 rr rr             jsr     STRLIT
00074Dr 2               .ifndef CONFIG_NO_CR
00074Dr 2  A0 00                ldy     #$00
00074Fr 2  B1 AC                lda     (FAC_LAST-1),y
000751r 2  18                   clc
000752r 2  65 11                adc     POSX
000754r 2                 .ifdef KBD
000754r 2                       cmp     #$28
000754r 2                 .else
000754r 2  C5 12                cmp     Z17
000756r 2                 .endif
000756r 2  90 03                bcc     L29B1
000758r 2  20 rr rr             jsr     CRDO
00075Br 2               L29B1:
00075Br 2               .endif
00075Br 2  20 rr rr             jsr     STRPRT
00075Er 2               .ifdef KBD
00075Er 2                       jmp     L297E
00075Er 2               .else
00075Er 2  20 rr rr             jsr     OUTSP
000761r 2  D0 C0                bne     L297E ; branch always
000763r 2               .endif
000763r 2               
000763r 2               .ifdef KBD
000763r 2               ; PATCHES
000763r 2               LE86C:
000763r 2                       pla
000763r 2                       jmp     CONTROL_C_TYPED
000763r 2               LE870:
000763r 2                       jsr     GETBYT
000763r 2                       txa
000763r 2               LE874:
000763r 2                       beq     LE878
000763r 2                       bpl     LE8F2
000763r 2               LE878:
000763r 2                       jmp     IQERR
000763r 2               ; PATCHES
000763r 2               .endif
000763r 2               
000763r 2               
000763r 2               
000763r 2               .ifndef KBD
000763r 2               L29B9:
000763r 2                 .ifdef CBM2
000763r 2                       lda     #$00
000763r 2                       sta     INPUTBUFFER,x
000763r 2                       ldx     #<(INPUTBUFFER-1)
000763r 2                       ldy     #>(INPUTBUFFER-1)
000763r 2                 .else
000763r 2                   .ifndef APPLE
000763r 2  A0 00                ldy     #$00
000765r 2  94 16                sty     INPUTBUFFER,x
000767r 2  A2 15                ldx     #LINNUM+1
000769r 2                   .endif
000769r 2                   .if .def(MICROTAN) || .def(SYM1)
000769r 2                       bne     CRDO2
000769r 2               	.endif
000769r 2                 .endif
000769r 2                 .ifdef CONFIG_FILE
000769r 2                       lda     CURDVC
000769r 2                       bne     L29DD
000769r 2                 .endif
000769r 2               .endif
000769r 2               
000769r 2               
000769r 2               CRDO:
000769r 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
000769r 2                       lda     CURDVC
000769r 2                       bne     LC9D8
000769r 2                       sta     POSX
000769r 2               LC9D8:
000769r 2               .endif
000769r 2  A9 0D                lda     #CRLF_1
00076Br 2               .ifndef CONFIG_CBM_ALL
00076Br 2  85 11                sta     POSX
00076Dr 2               .endif
00076Dr 2  20 rr rr             jsr     OUTDO
000770r 2               CRDO2:
000770r 2  A9 0A                lda     #CRLF_2
000772r 2  20 rr rr             jsr     OUTDO
000775r 2               
000775r 2               PRINTNULLS:
000775r 2               .if .def(KBD) || .def(AIM65)
000775r 2  A9 00                lda     #$00
000777r 2  85 11                sta     POSX
000779r 2  49 FF                eor     #$FF
00077Br 2               .else
00077Br 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
00077Br 2                   .ifdef CONFIG_FILE
00077Br 2                   ; Although there is no statement for it,
00077Br 2                   ; CBM1 had NULL support and ignores
00077Br 2                   ; it when not targeting the screen,
00077Br 2                   ; CBM2 dropped it completely.
00077Br 2                       lda     CURDVC
00077Br 2                       bne     L29DD
00077Br 2                   .endif
00077Br 2                       txa
00077Br 2                       pha
00077Br 2                       ldx     Z15
00077Br 2                       beq     L29D9
00077Br 2                     .ifdef SYM1
00077Br 2                       lda     #$FF
00077Br 2                     .else
00077Br 2                       lda     #$00
00077Br 2                     .endif
00077Br 2               L29D3:
00077Br 2                       jsr     OUTDO
00077Br 2                       dex
00077Br 2                       bne     L29D3
00077Br 2               L29D9:
00077Br 2                       stx     POSX
00077Br 2                       pla
00077Br 2                       tax
00077Br 2                 .else
00077Br 2                   .ifndef CONFIG_2
00077Br 2                       lda     #$00
00077Br 2                       sta     POSX
00077Br 2                   .endif
00077Br 2                       eor     #$FF
00077Br 2                 .endif
00077Br 2               .endif
00077Br 2               L29DD:
00077Br 2  60                   rts
00077Cr 2               L29DE:
00077Cr 2  A5 11                lda     POSX
00077Er 2               .ifndef CONFIG_NO_CR
00077Er 2                 .ifdef KBD
00077Er 2                       cmp     #$1A
00077Er 2                 .else
00077Er 2  C5 13                cmp     Z18
000780r 2                 .endif
000780r 2  90 06                bcc     L29EA
000782r 2  20 rr rr             jsr     CRDO
000785r 2  4C rr rr             jmp     L2A0D
000788r 2               L29EA:
000788r 2               .endif
000788r 2  38                   sec
000789r 2               L29EB:
000789r 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
000789r 2  E9 0A                sbc     #$0A
00078Br 2               .else
00078Br 2                 .ifdef KBD
00078Br 2                       sbc     #$0D
00078Br 2                 .else
00078Br 2                       sbc     #$0E
00078Br 2                 .endif
00078Br 2               .endif
00078Br 2  B0 FC                bcs     L29EB
00078Dr 2  49 FF                eor     #$FF
00078Fr 2  69 01                adc     #$01
000791r 2  D0 10                bne     L2A08
000793r 2               L29F5:
000793r 2               .ifdef CONFIG_11A
000793r 2  08                   php
000794r 2               .else
000794r 2                       pha
000794r 2               .endif
000794r 2  20 rr rr             jsr     GTBYTC
000797r 2  C9 29                cmp     #')'
000799r 2               .ifdef CONFIG_11A
000799r 2                 .ifdef CONFIG_2
000799r 2  D0 68                bne     SYNERR4
00079Br 2                 .else
00079Br 2                       jne     SYNERR
00079Br 2                 .endif
00079Br 2  28                   plp
00079Cr 2  90 06                bcc     L2A09
00079Er 2               .else
00079Er 2                 .ifdef CONFIG_11
00079Er 2                       jne     SYNERR
00079Er 2                 .else
00079Er 2                       bne     SYNERR4
00079Er 2                 .endif
00079Er 2                       pla
00079Er 2                       cmp     #TOKEN_TAB
00079Er 2                 .ifdef CONFIG_11
00079Er 2                       bne     L2A09
00079Er 2                 .else
00079Er 2                       bne     L2A0A
00079Er 2                 .endif
00079Er 2               .endif
00079Er 2  8A                   txa
00079Fr 2  E5 11                sbc     POSX
0007A1r 2  90 05                bcc     L2A0D
0007A3r 2               .ifndef CONFIG_11
0007A3r 2                       beq     L2A0D
0007A3r 2               .endif
0007A3r 2               L2A08:
0007A3r 2  AA                   tax
0007A4r 2               .ifdef CONFIG_11
0007A4r 2               L2A09:
0007A4r 2  E8                   inx
0007A5r 2               .endif
0007A5r 2               L2A0A:
0007A5r 2               .ifndef CONFIG_11
0007A5r 2                       jsr     OUTSP
0007A5r 2               .endif
0007A5r 2  CA                   dex
0007A6r 2               .ifndef CONFIG_11
0007A6r 2                       bne     L2A0A
0007A6r 2               .else
0007A6r 2  D0 06                bne     L2A13
0007A8r 2               .endif
0007A8r 2               L2A0D:
0007A8r 2  20 BF 00             jsr     CHRGET
0007ABr 2  4C rr rr             jmp     PRINT2
0007AEr 2               .ifdef CONFIG_11
0007AEr 2               L2A13:
0007AEr 2  20 rr rr             jsr     OUTSP
0007B1r 2  D0 F2                bne     L2A0A
0007B3r 2               .endif
0007B3r 2               
0007B3r 2               ; ----------------------------------------------------------------------------
0007B3r 2               ; PRINT STRING AT (Y,A)
0007B3r 2               ; ----------------------------------------------------------------------------
0007B3r 2               STROUT:
0007B3r 2  20 rr rr             jsr     STRLIT
0007B6r 2               
0007B6r 2               ; ----------------------------------------------------------------------------
0007B6r 2               ; PRINT STRING AT (FACMO,FACLO)
0007B6r 2               ; ----------------------------------------------------------------------------
0007B6r 2               STRPRT:
0007B6r 2  20 rr rr             jsr     FREFAC
0007B9r 2  AA                   tax
0007BAr 2  A0 00                ldy     #$00
0007BCr 2  E8                   inx
0007BDr 2               L2A22:
0007BDr 2  CA                   dex
0007BEr 2  F0 BB                beq     L29DD
0007C0r 2  B1 6A                lda     (INDEX),y
0007C2r 2  20 rr rr             jsr     OUTDO
0007C5r 2  C8                   iny
0007C6r 2  C9 0D                cmp     #$0D
0007C8r 2  D0 F3                bne     L2A22
0007CAr 2  20 rr rr             jsr     PRINTNULLS
0007CDr 2  4C rr rr             jmp     L2A22
0007D0r 2               ; ----------------------------------------------------------------------------
0007D0r 2               OUTSP:
0007D0r 2               .ifdef CONFIG_FILE
0007D0r 2                 .ifndef CBM1
0007D0r 2               ; on non-screen devices, print SPACE
0007D0r 2               ; instead of CRSR RIGHT
0007D0r 2                       lda     CURDVC
0007D0r 2                       beq     LCA40
0007D0r 2                       lda     #$20
0007D0r 2                       .byte   $2C
0007D0r 2               LCA40:
0007D0r 2                 .endif
0007D0r 2                       lda     #$1D ; CRSR RIGHT
0007D0r 2               .else
0007D0r 2  A9 20                lda     #$20
0007D2r 2               .endif
0007D2r 2  2C                   .byte   $2C
0007D3r 2               OUTQUES:
0007D3r 2  A9 3F                lda     #$3F
0007D5r 2               
0007D5r 2               ; ----------------------------------------------------------------------------
0007D5r 2               ; PRINT CHAR FROM (A)
0007D5r 2               ; ----------------------------------------------------------------------------
0007D5r 2               OUTDO:
0007D5r 2               .ifndef KBD
0007D5r 2  24 10                bit     Z14
0007D7r 2  30 15                bmi     L2A56
0007D9r 2               .endif
0007D9r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007D9r 2               ; Commodore forgot to remove this in CBM1
0007D9r 2  48                   pha
0007DAr 2               .endif
0007DAr 2               .ifdef CBM1
0007DAr 2                       cmp     #$1D ; CRSR RIGHT
0007DAr 2                       beq     LCA6A
0007DAr 2                       cmp     #$9D ; CRSR LEFT
0007DAr 2                       beq     LCA5A
0007DAr 2                       cmp     #$14 ; DEL
0007DAr 2                       bne     LCA64
0007DAr 2               LCA5A:
0007DAr 2                       lda     POSX
0007DAr 2                       beq     L2A4E
0007DAr 2                       lda     CURDVC
0007DAr 2                       bne     L2A4E
0007DAr 2                       dec     POSX
0007DAr 2               LCA64:
0007DAr 2                       and     #$7F
0007DAr 2               .endif
0007DAr 2               .ifndef CBM2
0007DAr 2  C9 20                cmp     #$20
0007DCr 2  90 0C                bcc     L2A4E
0007DEr 2               .endif
0007DEr 2               LCA6A:
0007DEr 2               .ifdef CONFIG_CBM1_PATCHES
0007DEr 2                       lda     CURDVC
0007DEr 2                       jsr     PATCH6
0007DEr 2                       nop
0007DEr 2               .endif
0007DEr 2               .ifdef CONFIG_PRINT_CR
0007DEr 2  A5 11                lda     POSX
0007E0r 2  C5 12                cmp     Z17
0007E2r 2  D0 04                bne     L2A4C
0007E4r 2                 .ifdef AIM65
0007E4r 2  A9 00                lda #$00
0007E6r 2  85 11                sta POSX
0007E8r 2                 .elseif .def(APPLE)
0007E8r 2                       nop ; PATCH!
0007E8r 2                       nop ; don't print CR
0007E8r 2                       nop
0007E8r 2                 .else
0007E8r 2                       jsr     CRDO
0007E8r 2                 .endif
0007E8r 2               L2A4C:
0007E8r 2               .endif
0007E8r 2               .ifndef CONFIG_CBM_ALL
0007E8r 2  E6 11                inc     POSX
0007EAr 2               .endif
0007EAr 2               L2A4E:
0007EAr 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007EAr 2               ; Commodore forgot to remove this in CBM1
0007EAr 2  68                   pla
0007EBr 2               .endif
0007EBr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007EBr 2                       sty     DIMFLG
0007EBr 2               .endif
0007EBr 2               .ifdef CONFIG_IO_MSB
0007EBr 2                       ora     #$80
0007EBr 2               .endif
0007EBr 2  20 rr rr             jsr     MONCOUT
0007EEr 2               .ifdef CONFIG_IO_MSB
0007EEr 2                       and     #$7F
0007EEr 2               .endif
0007EEr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007EEr 2                       ldy     DIMFLG
0007EEr 2               .endif
0007EEr 2               .ifdef OSI
0007EEr 2                       nop
0007EEr 2                       nop
0007EEr 2                       nop
0007EEr 2                       nop
0007EEr 2               .endif
0007EEr 2               L2A56:
0007EEr 2  29 FF                and     #$FF
0007F0r 2               LE8F2:
0007F0r 2  60                   rts
0007F1r 2               
0007F1r 2               ; ----------------------------------------------------------------------------
0007F1r 2               ; ???
0007F1r 2               ; ----------------------------------------------------------------------------
0007F1r 2               .ifdef KBD
0007F1r 2               LE8F3:
0007F1r 2                       pha
0007F1r 2                       lda     $047F
0007F1r 2                       clc
0007F1r 2                       beq     LE900
0007F1r 2                       lda     #$00
0007F1r 2                       sta     $047F
0007F1r 2                       sec
0007F1r 2               LE900:
0007F1r 2                       pla
0007F1r 2                       rts
0007F1r 2               .endif
0007F1r 2               
0007F1r 1               .include "input.s"
0007F1r 2               .segment "CODE"
0007F1r 2               
0007F1r 2               ; ----------------------------------------------------------------------------
0007F1r 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
0007F1r 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
0007F1r 2               ; BETWEEN INPUT, READ, AND GET
0007F1r 2               ; ----------------------------------------------------------------------------
0007F1r 2               INPUTERR:
0007F1r 2  A5 0E                lda     INPUTFLG
0007F3r 2  F0 11                beq     RESPERR	; INPUT
0007F5r 2               .ifndef SYM1
0007F5r 2               .ifndef CONFIG_SMALL
0007F5r 2               .ifdef CONFIG_10A
0007F5r 2               ; without this, it treats GET errors
0007F5r 2               ; like READ errors
0007F5r 2  30 04                bmi     L2A63	; READ
0007F7r 2  A0 FF                ldy     #$FF	; GET
0007F9r 2  D0 04                bne     L2A67
0007FBr 2               L2A63:
0007FBr 2               .endif
0007FBr 2               .endif
0007FBr 2               .endif
0007FBr 2               .ifdef CONFIG_CBM1_PATCHES
0007FBr 2                       jsr     PATCH5
0007FBr 2               		nop
0007FBr 2               .else
0007FBr 2  A5 87                lda     Z8C
0007FDr 2  A4 88                ldy     Z8C+1
0007FFr 2               .endif
0007FFr 2               L2A67:
0007FFr 2  85 81                sta     CURLIN
000801r 2  84 82                sty     CURLIN+1
000803r 2               SYNERR4:
000803r 2  4C rr rr             jmp     SYNERR
000806r 2               RESPERR:
000806r 2               .ifdef CONFIG_FILE
000806r 2                       lda     CURDVC
000806r 2                       beq     LCA8F
000806r 2                       ldx     #ERR_BADDATA
000806r 2                       jmp     ERROR
000806r 2               LCA8F:
000806r 2               .endif
000806r 2  A9 rr                lda     #<ERRREENTRY
000808r 2  A0 rr                ldy     #>ERRREENTRY
00080Ar 2  20 rr rr             jsr     STROUT
00080Dr 2  A5 85                lda     OLDTEXT
00080Fr 2  A4 86                ldy     OLDTEXT+1
000811r 2  85 C6                sta     TXTPTR
000813r 2  84 C7                sty     TXTPTR+1
000815r 2               RTS20:
000815r 2  60                   rts
000816r 2               
000816r 2               ; ----------------------------------------------------------------------------
000816r 2               ; "GET" STATEMENT
000816r 2               ; ----------------------------------------------------------------------------
000816r 2               .ifndef CONFIG_SMALL
000816r 2               .ifndef SYM1
000816r 2               GET:
000816r 2  20 rr rr             jsr     ERRDIR
000819r 2               ; CBM: if GET#, then switch input
000819r 2               .ifdef CONFIG_FILE
000819r 2                       cmp     #'#'
000819r 2                       bne     LCAB6
000819r 2                       jsr     CHRGET
000819r 2                       jsr     GETBYT
000819r 2                       lda     #','
000819r 2                       jsr     SYNCHR
000819r 2                       jsr     CHKIN
000819r 2                       stx     CURDVC
000819r 2               LCAB6:
000819r 2               .endif
000819r 2  A2 17                ldx     #<(INPUTBUFFER+1)
00081Br 2  A0 00                ldy     #>(INPUTBUFFER+1)
00081Dr 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00081Dr 2                       lda     #$00
00081Dr 2                       sta     INPUTBUFFER+1
00081Dr 2               .else
00081Dr 2  84 17                sty     INPUTBUFFER+1
00081Fr 2               .endif
00081Fr 2  A9 40                lda     #$40
000821r 2  20 rr rr             jsr     PROCESS_INPUT_LIST
000824r 2               ; CBM: if GET#, then switch input back
000824r 2               .ifdef CONFIG_FILE
000824r 2                       ldx     CURDVC
000824r 2                       bne     LCAD8
000824r 2               .endif
000824r 2  60                   rts
000825r 2               .endif
000825r 2               .endif
000825r 2               
000825r 2               ; ----------------------------------------------------------------------------
000825r 2               ; "INPUT#" STATEMENT
000825r 2               ; ----------------------------------------------------------------------------
000825r 2               .ifdef CONFIG_FILE
000825r 2               INPUTH:
000825r 2                       jsr     GETBYT
000825r 2                       lda     #$2C
000825r 2                       jsr     SYNCHR
000825r 2                       jsr     CHKIN
000825r 2                       stx     CURDVC
000825r 2                       jsr     L2A9E
000825r 2               LCAD6:
000825r 2                       lda     CURDVC
000825r 2               LCAD8:
000825r 2                       jsr     CLRCH
000825r 2                       ldx     #$00
000825r 2                       stx     CURDVC
000825r 2                       rts
000825r 2               LCAE0:
000825r 2               .endif
000825r 2               
000825r 2               .ifdef SYM1
000825r 2               LC9B0:
000825r 2                       jsr     OUTQUES	; '?'
000825r 2                       jsr     OUTSP
000825r 2                       jmp     L2A9E
000825r 2               .endif
000825r 2               ; ----------------------------------------------------------------------------
000825r 2               ; "INPUT" STATEMENT
000825r 2               ; ----------------------------------------------------------------------------
000825r 2               INPUT:
000825r 2               .ifndef KBD
000825r 2  46 10                lsr     Z14
000827r 2               .endif
000827r 2               .ifdef AIM65
000827r 2  AD 11 A4             lda     PRIFLG
00082Ar 2  85 BE                sta     ZBE
00082Cr 2  20 rr rr             jsr     LCFFA
00082Fr 2               .endif
00082Fr 2  C9 22                cmp     #$22
000831r 2               .ifdef SYM1
000831r 2                       bne     LC9B0
000831r 2               .else
000831r 2  D0 0B                bne     L2A9E
000833r 2               .endif
000833r 2  20 rr rr             jsr     STRTXT
000836r 2  A9 3B                lda     #$3B
000838r 2  20 rr rr             jsr     SYNCHR
00083Br 2  20 rr rr             jsr     STRPRT
00083Er 2               L2A9E:
00083Er 2  20 rr rr             jsr     ERRDIR
000841r 2  A9 2C                lda     #$2C
000843r 2  85 15                sta     INPUTBUFFER-1
000845r 2               LCAF8:
000845r 2               .ifdef APPLE
000845r 2                       jsr     INLINX
000845r 2               .elseif .def(SYM1)
000845r 2                       jsr     INLIN
000845r 2               .else
000845r 2  20 rr rr             jsr     NXIN
000848r 2               .endif
000848r 2               .ifdef KBD
000848r 2                       bmi     L2ABE
000848r 2               .else
000848r 2                 .ifdef CONFIG_FILE
000848r 2                       lda     CURDVC
000848r 2                       beq     LCB0C
000848r 2                       lda     Z96
000848r 2                       and     #$02
000848r 2                       beq     LCB0C
000848r 2                       jsr     LCAD6
000848r 2                       jmp     DATA
000848r 2               LCB0C:
000848r 2                 .endif
000848r 2  A5 16                lda     INPUTBUFFER
00084Ar 2  D0 12                bne     L2ABE
00084Cr 2                 .ifdef CONFIG_FILE
00084Cr 2                       lda     CURDVC
00084Cr 2                       bne     LCAF8
00084Cr 2                 .endif
00084Cr 2                 .ifdef CONFIG_CBM1_PATCHES
00084Cr 2                       jmp     PATCH1
00084Cr 2                 .else
00084Cr 2  18                   clc
00084Dr 2  4C rr rr             jmp     CONTROL_C_TYPED
000850r 2                 .endif
000850r 2               .endif
000850r 2               
000850r 2               NXIN:
000850r 2               .ifdef KBD
000850r 2                       jsr     INLIN
000850r 2                       bmi     RTS20
000850r 2                       pla
000850r 2                       jmp     LE86C
000850r 2               .else
000850r 2                 .ifdef CONFIG_FILE
000850r 2                       lda     CURDVC
000850r 2                       bne     LCB21
000850r 2                 .endif
000850r 2  20 rr rr             jsr     OUTQUES	; '?'
000853r 2  20 rr rr             jsr     OUTSP
000856r 2               LCB21:
000856r 2  4C rr rr             jmp     INLIN
000859r 2               .endif
000859r 2               
000859r 2               ; ----------------------------------------------------------------------------
000859r 2               ; "GETC" STATEMENT
000859r 2               ; ----------------------------------------------------------------------------
000859r 2               .ifdef KBD
000859r 2               GETC:
000859r 2                       jsr     CONINT
000859r 2                       jsr     LF43D
000859r 2                       jmp     LE664
000859r 2               .endif
000859r 2               
000859r 2               ; ----------------------------------------------------------------------------
000859r 2               ; "READ" STATEMENT
000859r 2               ; ----------------------------------------------------------------------------
000859r 2               READ:
000859r 2  A6 89                ldx     DATPTR
00085Br 2  A4 8A                ldy     DATPTR+1
00085Dr 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
00085Dr 2               ; AppleSoft II, too
00085Dr 2                       lda     #$98	; READ
00085Dr 2                       .byte   $2C
00085Dr 2               L2ABE:
00085Dr 2                       lda     #$00	; INPUT
00085Dr 2               .else
00085Dr 2  A9                   .byte   $A9	; LDA #$98
00085Er 2               L2ABE:
00085Er 2  98                   tya
00085Fr 2               .endif
00085Fr 2               
00085Fr 2               ; ----------------------------------------------------------------------------
00085Fr 2               ; PROCESS INPUT LIST
00085Fr 2               ;
00085Fr 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00085Fr 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00085Fr 2               ; 				$40 FOR GET
00085Fr 2               ;				$98 FOR READ
00085Fr 2               ; ----------------------------------------------------------------------------
00085Fr 2               PROCESS_INPUT_LIST:
00085Fr 2  85 0E                sta     INPUTFLG
000861r 2  86 8B                stx     INPTR
000863r 2  84 8C                sty     INPTR+1
000865r 2               PROCESS_INPUT_ITEM:
000865r 2  20 rr rr             jsr     PTRGET
000868r 2  85 91                sta     FORPNT
00086Ar 2  84 92                sty     FORPNT+1
00086Cr 2  A5 C6                lda     TXTPTR
00086Er 2  A4 C7                ldy     TXTPTR+1
000870r 2  85 93                sta     TXPSV
000872r 2  84 94                sty     TXPSV+1
000874r 2  A6 8B                ldx     INPTR
000876r 2  A4 8C                ldy     INPTR+1
000878r 2  86 C6                stx     TXTPTR
00087Ar 2  84 C7                sty     TXTPTR+1
00087Cr 2  20 C5 00             jsr     CHRGOT
00087Fr 2  D0 1B                bne     INSTART
000881r 2  24 0E                bit     INPUTFLG
000883r 2               .ifndef CONFIG_SMALL ; GET
000883r 2                .ifndef SYM1
000883r 2  50 0B                bvc     L2AF0
000885r 2                 .ifdef MICROTAN
000885r 2                       jsr     MONRDKEY2
000885r 2                 .elseif .def(AIM65)
000885r 2  20 rr rr             jsr     MONRDKEY2
000888r 2                 .else
000888r 2                       jsr     MONRDKEY
000888r 2                 .endif
000888r 2                 .ifdef CONFIG_IO_MSB
000888r 2                       and     #$7F
000888r 2                 .endif
000888r 2  85 16                sta     INPUTBUFFER
00088Ar 2               ; BUG: The beq/bne L2AF8 below is supposed
00088Ar 2               ; to be always taken. For this to happen,
00088Ar 2               ; the last load must be a 0 for beq
00088Ar 2               ; and != 0 for bne. The original Microsoft
00088Ar 2               ; code had ldx/ldy/bne here, which was only
00088Ar 2               ; correct for a non-ZP INPUTBUFFER. Commodore
00088Ar 2               ; fixed it in CBMBASIC V1 by swapping the
00088Ar 2               ; ldx and the ldy. It was broken on KIM,
00088Ar 2               ; but okay on APPLE and CBM2, because
00088Ar 2               ; these used a non-ZP INPUTBUFFER.
00088Ar 2               ; Microsoft fixed this somewhere after KIM
00088Ar 2               ; and before MICROTAN, by using beq instead
00088Ar 2               ; of bne in the ZP case.
00088Ar 2                 .ifdef CBM1
00088Ar 2                       ldy     #>(INPUTBUFFER-1)
00088Ar 2                       ldx     #<(INPUTBUFFER-1)
00088Ar 2                 .else
00088Ar 2  A2 15                ldx     #<(INPUTBUFFER-1)
00088Cr 2  A0 00                ldy     #>(INPUTBUFFER-1)
00088Er 2                 .endif
00088Er 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
00088Er 2  F0 08                beq     L2AF8	; always
000890r 2                 .else
000890r 2                       bne     L2AF8	; always
000890r 2                 .endif
000890r 2               L2AF0:
000890r 2                .endif
000890r 2               .endif
000890r 2  30 71                bmi     FINDATA
000892r 2               .ifdef CONFIG_FILE
000892r 2                       lda     CURDVC
000892r 2                       bne     LCB64
000892r 2               .endif
000892r 2               .ifdef KBD
000892r 2                       jsr     OUTQUESSP
000892r 2               .else
000892r 2  20 rr rr             jsr     OUTQUES
000895r 2               .endif
000895r 2               LCB64:
000895r 2  20 rr rr             jsr     NXIN
000898r 2               L2AF8:
000898r 2  86 C6                stx     TXTPTR
00089Ar 2  84 C7                sty     TXTPTR+1
00089Cr 2               
00089Cr 2               ; ----------------------------------------------------------------------------
00089Cr 2               INSTART:
00089Cr 2  20 BF 00             jsr     CHRGET
00089Fr 2  24 0A                bit     VALTYP
0008A1r 2  10 31                bpl     L2B34
0008A3r 2               .ifndef CONFIG_SMALL ; GET
0008A3r 2                .ifndef SYM1
0008A3r 2  24 0E                bit     INPUTFLG
0008A5r 2  50 09                bvc     L2B10
0008A7r 2                 .ifdef CONFIG_CBM1_PATCHES
0008A7r 2                       lda     #$00
0008A7r 2                       jsr     PATCH4
0008A7r 2                       nop
0008A7r 2                 .else
0008A7r 2  E8                   inx
0008A8r 2  86 C6                stx     TXTPTR
0008AAr 2  A9 00                lda     #$00
0008ACr 2  85 06                sta     CHARAC
0008AEr 2  F0 0C                beq     L2B1C
0008B0r 2                 .endif
0008B0r 2               L2B10:
0008B0r 2                .endif
0008B0r 2               .endif
0008B0r 2  85 06                sta     CHARAC
0008B2r 2  C9 22                cmp     #$22
0008B4r 2  F0 07                beq     L2B1D
0008B6r 2  A9 3A                lda     #$3A
0008B8r 2  85 06                sta     CHARAC
0008BAr 2  A9 2C                lda     #$2C
0008BCr 2               L2B1C:
0008BCr 2  18                   clc
0008BDr 2               L2B1D:
0008BDr 2  85 07                sta     ENDCHR
0008BFr 2  A5 C6                lda     TXTPTR
0008C1r 2  A4 C7                ldy     TXTPTR+1
0008C3r 2  69 00                adc     #$00
0008C5r 2  90 01                bcc     L2B28
0008C7r 2  C8                   iny
0008C8r 2               L2B28:
0008C8r 2  20 rr rr             jsr     STRLT2
0008CBr 2  20 rr rr             jsr     POINT
0008CEr 2               .ifdef CONFIG_SMALL
0008CEr 2                       jsr     LETSTRING
0008CEr 2               .else
0008CEr 2  20 rr rr             jsr     PUTSTR
0008D1r 2               .endif
0008D1r 2  4C rr rr             jmp     INPUT_MORE
0008D4r 2               ; ----------------------------------------------------------------------------
0008D4r 2               L2B34:
0008D4r 2  20 rr rr             jsr     FIN
0008D7r 2               .ifdef CONFIG_SMALL
0008D7r 2                       jsr     SETFOR
0008D7r 2               .else
0008D7r 2  A5 0B                lda     VALTYP+1
0008D9r 2  20 rr rr             jsr     LET2
0008DCr 2               .endif
0008DCr 2               ; ----------------------------------------------------------------------------
0008DCr 2               INPUT_MORE:
0008DCr 2  20 C5 00             jsr     CHRGOT
0008DFr 2  F0 07                beq     L2B48
0008E1r 2  C9 2C                cmp     #$2C
0008E3r 2  F0 03                beq     L2B48
0008E5r 2  4C rr rr             jmp     INPUTERR
0008E8r 2               L2B48:
0008E8r 2  A5 C6                lda     TXTPTR
0008EAr 2  A4 C7                ldy     TXTPTR+1
0008ECr 2  85 8B                sta     INPTR
0008EEr 2  84 8C                sty     INPTR+1
0008F0r 2  A5 93                lda     TXPSV
0008F2r 2  A4 94                ldy     TXPSV+1
0008F4r 2  85 C6                sta     TXTPTR
0008F6r 2  84 C7                sty     TXTPTR+1
0008F8r 2  20 C5 00             jsr     CHRGOT
0008FBr 2  F0 2C                beq     INPDONE
0008FDr 2  20 rr rr             jsr     CHKCOM
000900r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
000903r 2               ; ----------------------------------------------------------------------------
000903r 2               FINDATA:
000903r 2  20 rr rr             jsr     DATAN
000906r 2  C8                   iny
000907r 2  AA                   tax
000908r 2  D0 12                bne     L2B7C
00090Ar 2  A2 06                ldx     #ERR_NODATA
00090Cr 2  C8                   iny
00090Dr 2  B1 C6                lda     (TXTPTR),y
00090Fr 2  F0 6C                beq     GERR
000911r 2  C8                   iny
000912r 2  B1 C6                lda     (TXTPTR),y
000914r 2  85 87                sta     Z8C
000916r 2  C8                   iny
000917r 2  B1 C6                lda     (TXTPTR),y
000919r 2  C8                   iny
00091Ar 2  85 88                sta     Z8C+1
00091Cr 2               L2B7C:
00091Cr 2  B1 C6                lda     (TXTPTR),y
00091Er 2  AA                   tax
00091Fr 2  20 rr rr             jsr     ADDON
000922r 2  E0 83                cpx     #$83
000924r 2  D0 DD                bne     FINDATA
000926r 2  4C rr rr             jmp     INSTART
000929r 2               ; ---NO MORE INPUT REQUESTED------
000929r 2               INPDONE:
000929r 2  A5 8B                lda     INPTR
00092Br 2  A4 8C                ldy     INPTR+1
00092Dr 2  A6 0E                ldx     INPUTFLG
00092Fr 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
00092Fr 2                       beq     L2B94 ; INPUT
00092Fr 2               .else
00092Fr 2  10 03                bpl     L2B94; INPUT or GET
000931r 2               .endif
000931r 2  4C rr rr             jmp     SETDA
000934r 2               L2B94:
000934r 2  A0 00                ldy     #$00
000936r 2               .ifdef AIM65
000936r 2  20 rr rr             jsr     LB8B1
000939r 2               .endif
000939r 2  B1 8B                lda     (INPTR),y
00093Br 2  F0 07                beq     L2BA1
00093Dr 2               .ifdef CONFIG_FILE
00093Dr 2                       lda     CURDVC
00093Dr 2                       bne     L2BA1
00093Dr 2               .endif
00093Dr 2  A9 rr                lda     #<ERREXTRA
00093Fr 2  A0 rr                ldy     #>ERREXTRA
000941r 2  4C rr rr             jmp     STROUT
000944r 2               L2BA1:
000944r 2  60                   rts
000945r 2               
000945r 2               ; ----------------------------------------------------------------------------
000945r 2               ERREXTRA:
000945r 2               .ifdef KBD
000945r 2                       .byte   "?Extra"
000945r 2               .else
000945r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
000949r 2  52 41 20 49  
00094Dr 2  47 4E 4F 52  
000953r 2               .endif
000953r 2  0D 0A 00             .byte   $0D,$0A,$00
000956r 2               ERRREENTRY:
000956r 2               .ifdef KBD
000956r 2                       .byte   "What?"
000956r 2               .else
000956r 2  3F 52 45 44          .byte   "?REDO FROM START"
00095Ar 2  4F 20 46 52  
00095Er 2  4F 4D 20 53  
000966r 2               .endif
000966r 2  0D 0A 00             .byte   $0D,$0A,$00
000969r 2               .ifdef KBD
000969r 2               LEA30:
000969r 2                       .byte   "B"
000969r 2                       .byte   $FD
000969r 2                       .byte   "GsBASIC"
000969r 2                       .byte   $00,$1B,$0D,$13
000969r 2                       .byte   " BASIC"
000969r 2               .endif
000969r 2               
000969r 1               .include "eval.s"
000969r 2               .segment "CODE"
000969r 2               
000969r 2               ; ----------------------------------------------------------------------------
000969r 2               ; "NEXT" STATEMENT
000969r 2               ; ----------------------------------------------------------------------------
000969r 2               NEXT:
000969r 2  D0 04                bne     NEXT1
00096Br 2  A0 00                ldy     #$00
00096Dr 2  F0 03                beq     NEXT2
00096Fr 2               NEXT1:
00096Fr 2  20 rr rr             jsr     PTRGET
000972r 2               NEXT2:
000972r 2  85 91                sta     FORPNT
000974r 2  84 92                sty     FORPNT+1
000976r 2  20 rr rr             jsr     GTFORPNT
000979r 2  F0 04                beq     NEXT3
00097Br 2  A2 00                ldx     #$00
00097Dr 2               GERR:
00097Dr 2  F0 66                beq     JERROR
00097Fr 2               NEXT3:
00097Fr 2  9A                   txs
000980r 2               .ifndef CONFIG_2
000980r 2                       inx
000980r 2                       inx
000980r 2                       inx
000980r 2                       inx
000980r 2               .endif
000980r 2  8A                   txa
000981r 2               .ifdef CONFIG_2
000981r 2  18                   clc
000982r 2  69 04                adc     #$04
000984r 2  48                   pha
000985r 2  69 06                adc     #BYTES_FP+1
000987r 2  85 6C                sta     DEST
000989r 2  68                   pla
00098Ar 2               .else
00098Ar 2                       inx
00098Ar 2                       inx
00098Ar 2                       inx
00098Ar 2                       inx
00098Ar 2                       inx
00098Ar 2               .ifndef CONFIG_SMALL
00098Ar 2                       inx
00098Ar 2               .endif
00098Ar 2                       stx     DEST
00098Ar 2               .endif
00098Ar 2  A0 01                ldy     #>STACK
00098Cr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00098Fr 2  BA                   tsx
000990r 2  BD 09 01             lda     STACK+BYTES_FP+4,x
000993r 2  85 AE                sta     FACSIGN
000995r 2  A5 91                lda     FORPNT
000997r 2  A4 92                ldy     FORPNT+1
000999r 2  20 rr rr             jsr     FADD
00099Cr 2  20 rr rr             jsr     SETFOR
00099Fr 2  A0 01                ldy     #>STACK
0009A1r 2  20 rr rr             jsr     FCOMP2
0009A4r 2  BA                   tsx
0009A5r 2  38                   sec
0009A6r 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
0009A9r 2  F0 17                beq     L2C22
0009ABr 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
0009AEr 2  85 81                sta     CURLIN
0009B0r 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
0009B3r 2  85 82                sta     CURLIN+1
0009B5r 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
0009B8r 2  85 C6                sta     TXTPTR
0009BAr 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
0009BDr 2  85 C7                sta     TXTPTR+1
0009BFr 2               L2C1F:
0009BFr 2  4C rr rr             jmp     NEWSTT
0009C2r 2               L2C22:
0009C2r 2  8A                   txa
0009C3r 2  69 11                adc     #2*BYTES_FP+7
0009C5r 2  AA                   tax
0009C6r 2  9A                   txs
0009C7r 2  20 C5 00             jsr     CHRGOT
0009CAr 2  C9 2C                cmp     #$2C
0009CCr 2  D0 F1                bne     L2C1F
0009CEr 2  20 BF 00             jsr     CHRGET
0009D1r 2  20 rr rr             jsr     NEXT1
0009D4r 2               
0009D4r 2               ; ----------------------------------------------------------------------------
0009D4r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
0009D4r 2               ; ----------------------------------------------------------------------------
0009D4r 2               FRMNUM:
0009D4r 2  20 rr rr             jsr     FRMEVL
0009D7r 2               
0009D7r 2               ; ----------------------------------------------------------------------------
0009D7r 2               ; MAKE SURE (FAC) IS NUMERIC
0009D7r 2               ; ----------------------------------------------------------------------------
0009D7r 2               CHKNUM:
0009D7r 2  18                   clc
0009D8r 2  24                   .byte   $24
0009D9r 2               
0009D9r 2               ; ----------------------------------------------------------------------------
0009D9r 2               ; MAKE SURE (FAC) IS STRING
0009D9r 2               ; ----------------------------------------------------------------------------
0009D9r 2               CHKSTR:
0009D9r 2  38                   sec
0009DAr 2               
0009DAr 2               ; ----------------------------------------------------------------------------
0009DAr 2               ; MAKE SURE (FAC) IS CORRECT TYPE
0009DAr 2               ; IF C=0, TYPE MUST BE NUMERIC
0009DAr 2               ; IF C=1, TYPE MUST BE STRING
0009DAr 2               ; ----------------------------------------------------------------------------
0009DAr 2               CHKVAL:
0009DAr 2  24 0A                bit     VALTYP
0009DCr 2  30 03                bmi     L2C41
0009DEr 2  B0 03                bcs     L2C43
0009E0r 2               L2C40:
0009E0r 2  60                   rts
0009E1r 2               L2C41:
0009E1r 2  B0 FD                bcs     L2C40
0009E3r 2               L2C43:
0009E3r 2  A2 18                ldx     #ERR_BADTYPE
0009E5r 2               JERROR:
0009E5r 2  4C rr rr             jmp     ERROR
0009E8r 2               
0009E8r 2               ; ----------------------------------------------------------------------------
0009E8r 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
0009E8r 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
0009E8r 2               ; EXPRESSIONS.
0009E8r 2               ; ----------------------------------------------------------------------------
0009E8r 2               FRMEVL:
0009E8r 2  A6 C6                ldx     TXTPTR
0009EAr 2  D0 02                bne     L2C4E
0009ECr 2  C6 C7                dec     TXTPTR+1
0009EEr 2               L2C4E:
0009EEr 2  C6 C6                dec     TXTPTR
0009F0r 2  A2 00                ldx     #$00
0009F2r 2  24                   .byte   $24
0009F3r 2               FRMEVL1:
0009F3r 2  48                   pha
0009F4r 2  8A                   txa
0009F5r 2  48                   pha
0009F6r 2  A9 01                lda     #$01
0009F8r 2  20 rr rr             jsr     CHKMEM
0009FBr 2  20 rr rr             jsr     FRM_ELEMENT
0009FEr 2  A9 00                lda     #$00
000A00r 2  85 95                sta     CPRTYP
000A02r 2               FRMEVL2:
000A02r 2  20 C5 00             jsr     CHRGOT
000A05r 2               L2C65:
000A05r 2  38                   sec
000A06r 2  E9 AB                sbc     #TOKEN_GREATER
000A08r 2  90 17                bcc     L2C81
000A0Ar 2  C9 03                cmp     #$03
000A0Cr 2  B0 13                bcs     L2C81
000A0Er 2  C9 01                cmp     #$01
000A10r 2  2A                   rol     a
000A11r 2  49 01                eor     #$01
000A13r 2  45 95                eor     CPRTYP
000A15r 2  C5 95                cmp     CPRTYP
000A17r 2  90 61                bcc     SNTXERR
000A19r 2  85 95                sta     CPRTYP
000A1Br 2  20 BF 00             jsr     CHRGET
000A1Er 2  4C rr rr             jmp     L2C65
000A21r 2               L2C81:
000A21r 2  A6 95                ldx     CPRTYP
000A23r 2  D0 2C                bne     FRM_RELATIONAL
000A25r 2  B0 7B                bcs     L2D02
000A27r 2  69 07                adc     #$07
000A29r 2  90 77                bcc     L2D02
000A2Br 2  65 0A                adc     VALTYP
000A2Dr 2  D0 03                bne     L2C92
000A2Fr 2  4C rr rr             jmp     CAT
000A32r 2               L2C92:
000A32r 2  69 FF                adc     #$FF
000A34r 2  85 6A                sta     INDEX
000A36r 2  0A                   asl     a
000A37r 2  65 6A                adc     INDEX
000A39r 2  A8                   tay
000A3Ar 2               FRM_PRECEDENCE_TEST:
000A3Ar 2  68                   pla
000A3Br 2  D9 rr rr             cmp     MATHTBL,y
000A3Er 2  B0 67                bcs     FRM_PERFORM1
000A40r 2  20 rr rr             jsr     CHKNUM
000A43r 2               L2CA3:
000A43r 2  48                   pha
000A44r 2               L2CA4:
000A44r 2  20 rr rr             jsr     FRM_RECURSE
000A47r 2  68                   pla
000A48r 2  A4 93                ldy     LASTOP
000A4Ar 2  10 17                bpl     PREFNC
000A4Cr 2  AA                   tax
000A4Dr 2  F0 56                beq     GOEX
000A4Fr 2  D0 5F                bne     FRM_PERFORM2
000A51r 2               
000A51r 2               ; ----------------------------------------------------------------------------
000A51r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000A51r 2               ; ----------------------------------------------------------------------------
000A51r 2               FRM_RELATIONAL:
000A51r 2  46 0A                lsr     VALTYP
000A53r 2  8A                   txa
000A54r 2  2A                   rol     a
000A55r 2  A6 C6                ldx     TXTPTR
000A57r 2  D0 02                bne     L2CBB
000A59r 2  C6 C7                dec     TXTPTR+1
000A5Br 2               L2CBB:
000A5Br 2  C6 C6                dec     TXTPTR
000A5Dr 2  A0 1B                ldy     #$1B
000A5Fr 2  85 95                sta     CPRTYP
000A61r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
000A63r 2               PREFNC:
000A63r 2  D9 rr rr             cmp     MATHTBL,y
000A66r 2  B0 48                bcs     FRM_PERFORM2
000A68r 2  90 D9                bcc     L2CA3
000A6Ar 2               
000A6Ar 2               ; ----------------------------------------------------------------------------
000A6Ar 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000A6Ar 2               ; ANOTHER ONE
000A6Ar 2               ; ----------------------------------------------------------------------------
000A6Ar 2               FRM_RECURSE:
000A6Ar 2  B9 rr rr             lda     MATHTBL+2,y
000A6Dr 2  48                   pha
000A6Er 2  B9 rr rr             lda     MATHTBL+1,y
000A71r 2  48                   pha
000A72r 2  20 rr rr             jsr     FRM_STACK1
000A75r 2  A5 95                lda     CPRTYP
000A77r 2  4C rr rr             jmp     FRMEVL1
000A7Ar 2               SNTXERR:
000A7Ar 2  4C rr rr             jmp     SYNERR
000A7Dr 2               
000A7Dr 2               ; ----------------------------------------------------------------------------
000A7Dr 2               ; STACK (FAC)
000A7Dr 2               ; THREE ENTRY POINTS:
000A7Dr 2               ; 	1, FROM FRMEVL
000A7Dr 2               ;	2, FROM "STEP"
000A7Dr 2               ;	3, FROM "FOR"
000A7Dr 2               ; ----------------------------------------------------------------------------
000A7Dr 2               FRM_STACK1:
000A7Dr 2  A5 AE                lda     FACSIGN
000A7Fr 2  BE rr rr             ldx     MATHTBL,y
000A82r 2               
000A82r 2               ; ----------------------------------------------------------------------------
000A82r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000A82r 2               ; ----------------------------------------------------------------------------
000A82r 2               FRM_STACK2:
000A82r 2  A8                   tay
000A83r 2  68                   pla
000A84r 2  85 6A                sta     INDEX
000A86r 2               .ifndef CONFIG_2B
000A86r 2  E6 6A                inc     INDEX ; bug: assumes not on page boundary
000A88r 2               ; bug exists on AppleSoft II
000A88r 2               .endif
000A88r 2  68                   pla
000A89r 2  85 6B                sta     INDEX+1
000A8Br 2               .ifdef CONFIG_2B
000A8Br 2                       inc     INDEX
000A8Br 2                       bne     LEB69
000A8Br 2                       inc     INDEX+1
000A8Br 2               LEB69:
000A8Br 2               .endif
000A8Br 2  98                   tya
000A8Cr 2  48                   pha
000A8Dr 2               
000A8Dr 2               ; ----------------------------------------------------------------------------
000A8Dr 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000A8Dr 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000A8Dr 2               ; ----------------------------------------------------------------------------
000A8Dr 2               FRM_STACK3:
000A8Dr 2  20 rr rr             jsr     ROUND_FAC
000A90r 2               .ifndef CONFIG_SMALL
000A90r 2  A5 AD                lda     FAC+4
000A92r 2  48                   pha
000A93r 2               .endif
000A93r 2  A5 AC                lda     FAC+3
000A95r 2  48                   pha
000A96r 2  A5 AB                lda     FAC+2
000A98r 2  48                   pha
000A99r 2  A5 AA                lda     FAC+1
000A9Br 2  48                   pha
000A9Cr 2  A5 A9                lda     FAC
000A9Er 2  48                   pha
000A9Fr 2  6C 6A 00             jmp     (INDEX)
000AA2r 2               L2D02:
000AA2r 2  A0 FF                ldy     #$FF
000AA4r 2  68                   pla
000AA5r 2               GOEX:
000AA5r 2  F0 23                beq     EXIT
000AA7r 2               
000AA7r 2               ; ----------------------------------------------------------------------------
000AA7r 2               ; PERFORM STACKED OPERATION
000AA7r 2               ;
000AA7r 2               ; (A) = PRECEDENCE BYTE
000AA7r 2               ; STACK:  1 -- CPRMASK
000AA7r 2               ;	5 -- (ARG)
000AA7r 2               ;	2 -- ADDR OF PERFORMER
000AA7r 2               ; ----------------------------------------------------------------------------
000AA7r 2               FRM_PERFORM1:
000AA7r 2  C9 64                cmp     #$64
000AA9r 2  F0 03                beq     L2D0E
000AABr 2  20 rr rr             jsr     CHKNUM
000AAEr 2               L2D0E:
000AAEr 2  84 93                sty     LASTOP
000AB0r 2               FRM_PERFORM2:
000AB0r 2  68                   pla
000AB1r 2  4A                   lsr     a
000AB2r 2  85 0F                sta     CPRMASK
000AB4r 2  68                   pla
000AB5r 2  85 B1                sta     ARG
000AB7r 2  68                   pla
000AB8r 2  85 B2                sta     ARG+1
000ABAr 2  68                   pla
000ABBr 2  85 B3                sta     ARG+2
000ABDr 2  68                   pla
000ABEr 2  85 B4                sta     ARG+3
000AC0r 2  68                   pla
000AC1r 2               .ifndef CONFIG_SMALL
000AC1r 2  85 B5                sta     ARG+4
000AC3r 2  68                   pla
000AC4r 2               .endif
000AC4r 2  85 B6                sta     ARGSIGN
000AC6r 2  45 AE                eor     FACSIGN
000AC8r 2  85 B7                sta     SGNCPR
000ACAr 2               EXIT:
000ACAr 2  A5 A9                lda     FAC
000ACCr 2  60                   rts
000ACDr 2               
000ACDr 2               ; ----------------------------------------------------------------------------
000ACDr 2               ; GET ELEMENT IN EXPRESSION
000ACDr 2               ;
000ACDr 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000ACDr 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000ACDr 2               ; ----------------------------------------------------------------------------
000ACDr 2               FRM_ELEMENT:
000ACDr 2  A9 00                lda     #$00
000ACFr 2  85 0A                sta     VALTYP
000AD1r 2               L2D31:
000AD1r 2  20 BF 00             jsr     CHRGET
000AD4r 2  B0 03                bcs     L2D39
000AD6r 2               L2D36:
000AD6r 2  4C rr rr             jmp     FIN
000AD9r 2               L2D39:
000AD9r 2  20 rr rr             jsr     ISLETC
000ADCr 2  B0 67                bcs     FRM_VARIABLE
000ADEr 2               .ifdef CONFIG_CBM_ALL
000ADEr 2                       cmp     #$FF
000ADEr 2                       bne     LCDC1
000ADEr 2                       lda     #<CON_PI
000ADEr 2                       ldy     #>CON_PI
000ADEr 2                       jsr     LOAD_FAC_FROM_YA
000ADEr 2                       jmp     CHRGET
000ADEr 2               CON_PI:
000ADEr 2                       .byte   $82,$49,$0f,$DA,$A1
000ADEr 2               LCDC1:
000ADEr 2               .endif
000ADEr 2  C9 2E                cmp     #$2E
000AE0r 2  F0 F4                beq     L2D36
000AE2r 2  C9 A5                cmp     #TOKEN_MINUS
000AE4r 2  F0 58                beq     MIN
000AE6r 2  C9 A4                cmp     #TOKEN_PLUS
000AE8r 2  F0 E7                beq     L2D31
000AEAr 2  C9 22                cmp     #$22
000AECr 2  D0 0F                bne     NOT_
000AEEr 2               
000AEEr 2               ; ----------------------------------------------------------------------------
000AEEr 2               ; STRING CONSTANT ELEMENT
000AEEr 2               ;
000AEEr 2               ; SET Y,A = (TXTPTR)+CARRY
000AEEr 2               ; ----------------------------------------------------------------------------
000AEEr 2               STRTXT:
000AEEr 2  A5 C6                lda     TXTPTR
000AF0r 2  A4 C7                ldy     TXTPTR+1
000AF2r 2  69 00                adc     #$00
000AF4r 2  90 01                bcc     L2D57
000AF6r 2  C8                   iny
000AF7r 2               L2D57:
000AF7r 2  20 rr rr             jsr     STRLIT
000AFAr 2  4C rr rr             jmp     POINT
000AFDr 2               
000AFDr 2               ; ----------------------------------------------------------------------------
000AFDr 2               ; "NOT" FUNCTION
000AFDr 2               ; IF FAC=0, RETURN FAC=1
000AFDr 2               ; IF FAC<>0, RETURN FAC=0
000AFDr 2               ; ----------------------------------------------------------------------------
000AFDr 2               NOT_:
000AFDr 2  C9 A2                cmp     #TOKEN_NOT
000AFFr 2  D0 13                bne     L2D74
000B01r 2  A0 18                ldy     #$18
000B03r 2  D0 3B                bne     EQUL
000B05r 2               
000B05r 2               ; ----------------------------------------------------------------------------
000B05r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000B05r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000B05r 2               ; ----------------------------------------------------------------------------
000B05r 2               EQUOP:
000B05r 2  20 rr rr             jsr     AYINT
000B08r 2  A5 AD                lda     FAC_LAST
000B0Ar 2  49 FF                eor     #$FF
000B0Cr 2  A8                   tay
000B0Dr 2  A5 AC                lda     FAC_LAST-1
000B0Fr 2  49 FF                eor     #$FF
000B11r 2  4C rr rr             jmp     GIVAYF
000B14r 2               L2D74:
000B14r 2               .ifdef SYM1
000B14r 2                       cmp     #TOKEN_USR
000B14r 2                       bne     LCC8A
000B14r 2                       jmp     LCDBD
000B14r 2               LCC8A:
000B14r 2                       cmp     #$26
000B14r 2                       bne     LCC91
000B14r 2                       jmp     LCDFE
000B14r 2               LCC91:
000B14r 2               .endif
000B14r 2  C9 9F                cmp     #TOKEN_FN
000B16r 2  D0 03                bne     L2D7B
000B18r 2  4C rr rr             jmp     L31F3
000B1Br 2               L2D7B:
000B1Br 2  C9 AE                cmp     #TOKEN_SGN
000B1Dr 2  90 03                bcc     PARCHK
000B1Fr 2  4C rr rr             jmp     UNARY
000B22r 2               
000B22r 2               ; ----------------------------------------------------------------------------
000B22r 2               ; EVALUATE "(EXPRESSION)"
000B22r 2               ; ----------------------------------------------------------------------------
000B22r 2               PARCHK:
000B22r 2  20 rr rr             jsr     CHKOPN
000B25r 2  20 rr rr             jsr     FRMEVL
000B28r 2               CHKCLS:
000B28r 2  A9 29                lda     #$29
000B2Ar 2  2C                   .byte   $2C
000B2Br 2               CHKOPN:
000B2Br 2  A9 28                lda     #$28
000B2Dr 2  2C                   .byte   $2C
000B2Er 2               CHKCOM:
000B2Er 2  A9 2C                lda     #$2C
000B30r 2               
000B30r 2               ; ----------------------------------------------------------------------------
000B30r 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000B30r 2               ; ----------------------------------------------------------------------------
000B30r 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000B30r 2  A0 00                ldy     #$00
000B32r 2  D1 C6                cmp     (TXTPTR),y
000B34r 2  D0 03                bne     SYNERR
000B36r 2  4C BF 00             jmp     CHRGET
000B39r 2               ; ----------------------------------------------------------------------------
000B39r 2               SYNERR:
000B39r 2  A2 02                ldx     #ERR_SYNTAX
000B3Br 2  4C rr rr             jmp     ERROR
000B3Er 2               ; ----------------------------------------------------------------------------
000B3Er 2               MIN:
000B3Er 2  A0 15                ldy     #$15
000B40r 2               EQUL:
000B40r 2  68                   pla
000B41r 2  68                   pla
000B42r 2  4C rr rr             jmp     L2CA4
000B45r 2               ; ----------------------------------------------------------------------------
000B45r 2               FRM_VARIABLE:
000B45r 2  20 rr rr             jsr     PTRGET
000B48r 2               FRM_VARIABLE_CALL	= *-1
000B48r 2  85 AC                sta     FAC_LAST-1
000B4Ar 2  84 AD                sty     FAC_LAST
000B4Cr 2               .ifdef CONFIG_CBM_ALL
000B4Cr 2                       lda     VARNAM
000B4Cr 2                       ldy     VARNAM+1
000B4Cr 2               .endif
000B4Cr 2  A6 0A                ldx     VALTYP
000B4Er 2  F0 05                beq     L2DB1
000B50r 2               .ifdef CONFIG_CBM_ALL
000B50r 2                 .ifdef CONFIG_CBM1_PATCHES
000B50r 2                       jmp     PATCH2
000B50r 2                       clc
000B50r 2               LCE3B:
000B50r 2                 .else
000B50r 2                       ldx     #$00
000B50r 2                       stx     STRNG1+1
000B50r 2                       bit     FAC+4
000B50r 2                       bpl     LCE53
000B50r 2                       cmp     #$54	; T
000B50r 2                       bne     LCE53
000B50r 2                 .endif
000B50r 2                       cpy     #$C9	; I$
000B50r 2                       bne     LCE53
000B50r 2                       jsr     LCE76
000B50r 2                       sty     EXPON
000B50r 2                       dey
000B50r 2                       sty     STRNG2
000B50r 2                       ldy     #$06
000B50r 2                       sty     INDX
000B50r 2                       ldy     #$24
000B50r 2                       jsr     LDD3A
000B50r 2                       jmp     LD353
000B50r 2               LCE53:
000B50r 2               .endif
000B50r 2               .ifdef CONFIG_2
000B50r 2                 .ifndef CBM2
000B50r 2               ; bugfix?
000B50r 2               ; fixed on AppleSoft II, not on any CBM
000B50r 2  A2 00                ldx     #$00
000B52r 2  86 B8                stx     STRNG1+1
000B54r 2                 .endif
000B54r 2               .endif
000B54r 2  60                   rts
000B55r 2               L2DB1:
000B55r 2               .ifndef CONFIG_SMALL
000B55r 2  A6 0B                ldx     VALTYP+1
000B57r 2  10 0D                bpl     L2DC2
000B59r 2  A0 00                ldy     #$00
000B5Br 2  B1 AC                lda     (FAC+3),y
000B5Dr 2  AA                   tax
000B5Er 2  C8                   iny
000B5Fr 2  B1 AC                lda     (FAC+3),y
000B61r 2  A8                   tay
000B62r 2  8A                   txa
000B63r 2  4C rr rr             jmp     GIVAYF
000B66r 2               L2DC2:
000B66r 2               .endif
000B66r 2               .ifdef CONFIG_CBM1_PATCHES
000B66r 2                       jmp     PATCH3
000B66r 2                       .byte   $19
000B66r 2               .endif
000B66r 2               .ifdef CBM2
000B66r 2                       bit     FAC+4
000B66r 2                       bpl     LCE90
000B66r 2                       cmp     #$54
000B66r 2                       bne     LCE82
000B66r 2               .endif
000B66r 2               .ifndef CONFIG_CBM_ALL
000B66r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000B69r 2               .endif
000B69r 2               .ifdef CONFIG_CBM_ALL
000B69r 2               LCE69:
000B69r 2                       cpy     #$49
000B69r 2               .ifdef CBM1
000B69r 2                       bne     LCE82
000B69r 2               .else
000B69r 2                       bne     LCE90
000B69r 2               .endif
000B69r 2                       jsr     LCE76
000B69r 2                       tya
000B69r 2                       ldx     #$A0
000B69r 2                       jmp     LDB21
000B69r 2               LCE76:
000B69r 2               .ifdef CBM1
000B69r 2                       lda     #$FE
000B69r 2                       ldy     #$01
000B69r 2               .else
000B69r 2                       lda     #$8B
000B69r 2                       ldy     #$00
000B69r 2               .endif
000B69r 2                       sei
000B69r 2                       jsr     LOAD_FAC_FROM_YA
000B69r 2                       cli
000B69r 2                       sty     FAC+1
000B69r 2                       rts
000B69r 2               LCE82:
000B69r 2                       cmp     #$53
000B69r 2                       bne     LCE90
000B69r 2                       cpy     #$54
000B69r 2                       bne     LCE90
000B69r 2                       lda     Z96
000B69r 2                       jmp     FLOAT
000B69r 2               LCE90:
000B69r 2                       lda     FAC+3
000B69r 2                       ldy     FAC+4
000B69r 2                       jmp     LOAD_FAC_FROM_YA
000B69r 2               .endif
000B69r 2               
000B69r 2               ; ----------------------------------------------------------------------------
000B69r 2               UNARY:
000B69r 2  0A                   asl     a
000B6Ar 2  48                   pha
000B6Br 2  AA                   tax
000B6Cr 2  20 BF 00             jsr     CHRGET
000B6Fr 2  E0 83                cpx     #<(TOKEN_LEFTSTR*2-1)
000B71r 2  90 20                bcc     L2DEF
000B73r 2  20 rr rr             jsr     CHKOPN
000B76r 2  20 rr rr             jsr     FRMEVL
000B79r 2  20 rr rr             jsr     CHKCOM
000B7Cr 2  20 rr rr             jsr     CHKSTR
000B7Fr 2  68                   pla
000B80r 2  AA                   tax
000B81r 2  A5 AD                lda     FAC_LAST
000B83r 2  48                   pha
000B84r 2  A5 AC                lda     FAC_LAST-1
000B86r 2  48                   pha
000B87r 2  8A                   txa
000B88r 2  48                   pha
000B89r 2  20 rr rr             jsr     GETBYT
000B8Cr 2  68                   pla
000B8Dr 2  A8                   tay
000B8Er 2  8A                   txa
000B8Fr 2  48                   pha
000B90r 2  4C rr rr             jmp     L2DF4
000B93r 2               L2DEF:
000B93r 2  20 rr rr             jsr     PARCHK
000B96r 2  68                   pla
000B97r 2  A8                   tay
000B98r 2               L2DF4:
000B98r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000B9Br 2  85 9D                sta     JMPADRS+1
000B9Dr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000BA0r 2  85 9E                sta     JMPADRS+2
000BA2r 2               .ifdef KBD
000BA2r 2                       jsr     LF47D
000BA2r 2               .else
000BA2r 2  20 9C 00             jsr     JMPADRS
000BA5r 2               .endif
000BA5r 2  4C rr rr             jmp     CHKNUM
000BA8r 2               
000BA8r 2               ; ----------------------------------------------------------------------------
000BA8r 2               OR:
000BA8r 2  A0 FF                ldy     #$FF
000BAAr 2  2C                   .byte   $2C
000BABr 2               ; ----------------------------------------------------------------------------
000BABr 2               TAND:
000BABr 2  A0 00                ldy     #$00
000BADr 2  84 08                sty     EOLPNTR
000BAFr 2  20 rr rr             jsr     AYINT
000BB2r 2  A5 AC                lda     FAC_LAST-1
000BB4r 2  45 08                eor     EOLPNTR
000BB6r 2  85 06                sta     CHARAC
000BB8r 2  A5 AD                lda     FAC_LAST
000BBAr 2  45 08                eor     EOLPNTR
000BBCr 2  85 07                sta     ENDCHR
000BBEr 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000BC1r 2  20 rr rr             jsr     AYINT
000BC4r 2  A5 AD                lda     FAC_LAST
000BC6r 2  45 08                eor     EOLPNTR
000BC8r 2  25 07                and     ENDCHR
000BCAr 2  45 08                eor     EOLPNTR
000BCCr 2  A8                   tay
000BCDr 2  A5 AC                lda     FAC_LAST-1
000BCFr 2  45 08                eor     EOLPNTR
000BD1r 2  25 06                and     CHARAC
000BD3r 2  45 08                eor     EOLPNTR
000BD5r 2  4C rr rr             jmp     GIVAYF
000BD8r 2               
000BD8r 2               ; ----------------------------------------------------------------------------
000BD8r 2               ; PERFORM RELATIONAL OPERATIONS
000BD8r 2               ; ----------------------------------------------------------------------------
000BD8r 2               RELOPS:
000BD8r 2  20 rr rr             jsr     CHKVAL
000BDBr 2  B0 13                bcs     STRCMP
000BDDr 2  A5 B6                lda     ARGSIGN
000BDFr 2  09 7F                ora     #$7F
000BE1r 2  25 B2                and     ARG+1
000BE3r 2  85 B2                sta     ARG+1
000BE5r 2  A9 B1                lda     #<ARG
000BE7r 2  A0 00                ldy     #$00
000BE9r 2  20 rr rr             jsr     FCOMP
000BECr 2  AA                   tax
000BEDr 2  4C rr rr             jmp     NUMCMP
000BF0r 2               
000BF0r 2               ; ----------------------------------------------------------------------------
000BF0r 2               ; STRING COMPARISON
000BF0r 2               ; ----------------------------------------------------------------------------
000BF0r 2               STRCMP:
000BF0r 2  A9 00                lda     #$00
000BF2r 2  85 0A                sta     VALTYP
000BF4r 2  C6 95                dec     CPRTYP
000BF6r 2  20 rr rr             jsr     FREFAC
000BF9r 2  85 A9                sta     FAC
000BFBr 2  86 AA                stx     FAC+1
000BFDr 2  84 AB                sty     FAC+2
000BFFr 2  A5 B4                lda     ARG_LAST-1
000C01r 2  A4 B5                ldy     ARG_LAST
000C03r 2  20 rr rr             jsr     FRETMP
000C06r 2  86 B4                stx     ARG_LAST-1
000C08r 2  84 B5                sty     ARG_LAST
000C0Ar 2  AA                   tax
000C0Br 2  38                   sec
000C0Cr 2  E5 A9                sbc     FAC
000C0Er 2  F0 08                beq     L2E74
000C10r 2  A9 01                lda     #$01
000C12r 2  90 04                bcc     L2E74
000C14r 2  A6 A9                ldx     FAC
000C16r 2  A9 FF                lda     #$FF
000C18r 2               L2E74:
000C18r 2  85 AE                sta     FACSIGN
000C1Ar 2  A0 FF                ldy     #$FF
000C1Cr 2  E8                   inx
000C1Dr 2               STRCMP1:
000C1Dr 2  C8                   iny
000C1Er 2  CA                   dex
000C1Fr 2  D0 07                bne     L2E84
000C21r 2  A6 AE                ldx     FACSIGN
000C23r 2               NUMCMP:
000C23r 2  30 0F                bmi     CMPDONE
000C25r 2  18                   clc
000C26r 2  90 0C                bcc     CMPDONE
000C28r 2               L2E84:
000C28r 2  B1 B4                lda     (ARG_LAST-1),y
000C2Ar 2  D1 AA                cmp     (FAC+1),y
000C2Cr 2  F0 EF                beq     STRCMP1
000C2Er 2  A2 FF                ldx     #$FF
000C30r 2  B0 02                bcs     CMPDONE
000C32r 2  A2 01                ldx     #$01
000C34r 2               CMPDONE:
000C34r 2  E8                   inx
000C35r 2  8A                   txa
000C36r 2  2A                   rol     a
000C37r 2  25 0F                and     CPRMASK
000C39r 2  F0 02                beq     L2E99
000C3Br 2  A9 FF                lda     #$FF
000C3Dr 2               L2E99:
000C3Dr 2  4C rr rr             jmp     FLOAT
000C40r 2               
000C40r 2               .ifdef SYM1
000C40r 2               LCDBD:
000C40r 2                       jsr     CHRGET
000C40r 2                       jsr     CHKOPN
000C40r 2                       jsr     FRMEVL
000C40r 2                       jsr     CHRGOT
000C40r 2                       cmp     #$29
000C40r 2                       beq     LCDF1
000C40r 2                       jsr     AYINT
000C40r 2                       lda     FAC+4
000C40r 2                       ldy     FAC+3
000C40r 2                       sta     USR+1
000C40r 2                       sty     USR+2
000C40r 2               LCDD8:
000C40r 2                       jsr     CHKCOM
000C40r 2                       jsr     FRMEVL
000C40r 2                       jsr     CHRGOT
000C40r 2                       cmp     #$29
000C40r 2                       beq     LCDF1
000C40r 2                       jsr     AYINT
000C40r 2                       lda     FAC+3
000C40r 2                       pha
000C40r 2                       lda     FAC+4
000C40r 2                       pha
000C40r 2                       jmp     LCDD8
000C40r 2               
000C40r 2               LCDF1:
000C40r 2                       jsr     CHRGET
000C40r 2                       jsr     AYINT
000C40r 2                       lda     FAC+3
000C40r 2                       ldy     FAC+4
000C40r 2                       jmp     USR
000C40r 2               
000C40r 2               LCDFE:
000C40r 2                       lda     ZD4
000C40r 2                       pha
000C40r 2                       lda     ZD3
000C40r 2                       pha
000C40r 2                       jsr     CHRGET
000C40r 2                       cmp     #$22
000C40r 2                       bne     LCE49
000C40r 2                       jsr     CHRGET
000C40r 2                       jsr     LCE2B
000C40r 2                       tax
000C40r 2                       jsr     CHRGOT
000C40r 2                       jsr     LCE2B
000C40r 2                       pha
000C40r 2                       jsr     CHRGOT
000C40r 2                       cmp     #$22
000C40r 2                       bne     LCE48
000C40r 2                       jsr     CHRGET
000C40r 2                       pla
000C40r 2                       tay
000C40r 2                       pla
000C40r 2                       pla
000C40r 2                       txa
000C40r 2                       jmp     GIVAYF
000C40r 2               
000C40r 2               LCE2B:
000C40r 2                       jsr     ASCNIB
000C40r 2                       bcs     LCE47
000C40r 2                       pha
000C40r 2                       jsr     CHRGET
000C40r 2                       jsr     ASCNIB
000C40r 2                       sta     FAC+4
000C40r 2                       bcs     LCE46
000C40r 2                       jsr     CHRGET
000C40r 2                       pla
000C40r 2                       asl     a
000C40r 2                       asl     a
000C40r 2                       asl     a
000C40r 2                       asl     a
000C40r 2                       ora     FAC+4
000C40r 2                       rts
000C40r 2               
000C40r 2               LCE46:
000C40r 2                       pla
000C40r 2               LCE47:
000C40r 2                       pla
000C40r 2               LCE48:
000C40r 2                       pla
000C40r 2               LCE49:
000C40r 2                       pla
000C40r 2                       sta     ZD3
000C40r 2                       pla
000C40r 2                       sta     ZD4
000C40r 2                       jmp     ZERO_FAC
000C40r 2               .endif
000C40r 2               
000C40r 1               .include "var.s"
000C40r 2               .segment "CODE"
000C40r 2               
000C40r 2               ; ----------------------------------------------------------------------------
000C40r 2               ; "DIM" STATEMENT
000C40r 2               ; ----------------------------------------------------------------------------
000C40r 2               NXDIM:
000C40r 2  20 rr rr             jsr     CHKCOM
000C43r 2               DIM:
000C43r 2  AA                   tax
000C44r 2  20 rr rr             jsr     PTRGET2
000C47r 2  20 C5 00             jsr     CHRGOT
000C4Ar 2  D0 F4                bne     NXDIM
000C4Cr 2  60                   rts
000C4Dr 2               
000C4Dr 2               ; ----------------------------------------------------------------------------
000C4Dr 2               ; PTRGET -- GENERAL VARIABLE SCAN
000C4Dr 2               ;
000C4Dr 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000C4Dr 2               ; VARTAB AND ARYTAB FOR THE NAME.
000C4Dr 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000C4Dr 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000C4Dr 2               ;
000C4Dr 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000C4Dr 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000C4Dr 2               ;		ELSE = 0
000C4Dr 2               ;
000C4Dr 2               ;	SUBFLG -- = $00
000C4Dr 2               ;		= $40 IF CALLED FROM "GETARYPT"
000C4Dr 2               ; ----------------------------------------------------------------------------
000C4Dr 2               PTRGET:
000C4Dr 2  A2 00                ldx     #$00
000C4Fr 2  20 C5 00             jsr     CHRGOT
000C52r 2               PTRGET2:
000C52r 2  86 09                stx     DIMFLG
000C54r 2               PTRGET3:
000C54r 2  85 8D                sta     VARNAM
000C56r 2  20 C5 00             jsr     CHRGOT
000C59r 2  20 rr rr             jsr     ISLETC
000C5Cr 2  B0 03                bcs     NAMOK
000C5Er 2               SYNERR3:
000C5Er 2  4C rr rr             jmp     SYNERR
000C61r 2               NAMOK:
000C61r 2  A2 00                ldx     #$00
000C63r 2  86 0A                stx     VALTYP
000C65r 2               .ifndef CONFIG_SMALL
000C65r 2  86 0B                stx     VALTYP+1
000C67r 2               .endif
000C67r 2  20 BF 00             jsr     CHRGET
000C6Ar 2  90 05                bcc     L2ECD
000C6Cr 2  20 rr rr             jsr     ISLETC
000C6Fr 2  90 0B                bcc     L2ED8
000C71r 2               L2ECD:
000C71r 2  AA                   tax
000C72r 2               L2ECE:
000C72r 2  20 BF 00             jsr     CHRGET
000C75r 2  90 FB                bcc     L2ECE
000C77r 2  20 rr rr             jsr     ISLETC
000C7Ar 2  B0 F6                bcs     L2ECE
000C7Cr 2               L2ED8:
000C7Cr 2  C9 24                cmp     #$24
000C7Er 2               .ifdef CONFIG_SMALL
000C7Er 2                       bne     L2EF9
000C7Er 2               .else
000C7Er 2  D0 06                bne     L2EE2
000C80r 2               .endif
000C80r 2  A9 FF                lda     #$FF
000C82r 2  85 0A                sta     VALTYP
000C84r 2               .ifndef CONFIG_SMALL
000C84r 2  D0 10                bne     L2EF2
000C86r 2               L2EE2:
000C86r 2  C9 25                cmp     #$25
000C88r 2  D0 13                bne     L2EF9
000C8Ar 2  A5 0D                lda     SUBFLG
000C8Cr 2  D0 D0                bne     SYNERR3
000C8Er 2  A9 80                lda     #$80
000C90r 2  85 0B                sta     VALTYP+1
000C92r 2  05 8D                ora     VARNAM
000C94r 2  85 8D                sta     VARNAM
000C96r 2               L2EF2:
000C96r 2               .endif
000C96r 2  8A                   txa
000C97r 2  09 80                ora     #$80
000C99r 2  AA                   tax
000C9Ar 2  20 BF 00             jsr     CHRGET
000C9Dr 2               L2EF9:
000C9Dr 2  86 8E                stx     VARNAM+1
000C9Fr 2  38                   sec
000CA0r 2  05 0D                ora     SUBFLG
000CA2r 2  E9 28                sbc     #$28
000CA4r 2  D0 03                bne     L2F05
000CA6r 2  4C rr rr             jmp     ARRAY
000CA9r 2               L2F05:
000CA9r 2  A9 00                lda     #$00
000CABr 2  85 0D                sta     SUBFLG
000CADr 2  A5 75                lda     VARTAB
000CAFr 2  A6 76                ldx     VARTAB+1
000CB1r 2  A0 00                ldy     #$00
000CB3r 2               L2F0F:
000CB3r 2  86 A8                stx     LOWTR+1
000CB5r 2               L2F11:
000CB5r 2  85 A7                sta     LOWTR
000CB7r 2  E4 78                cpx     ARYTAB+1
000CB9r 2  D0 04                bne     L2F1B
000CBBr 2  C5 77                cmp     ARYTAB
000CBDr 2  F0 22                beq     NAMENOTFOUND
000CBFr 2               L2F1B:
000CBFr 2  A5 8D                lda     VARNAM
000CC1r 2  D1 A7                cmp     (LOWTR),y
000CC3r 2  D0 08                bne     L2F29
000CC5r 2  A5 8E                lda     VARNAM+1
000CC7r 2  C8                   iny
000CC8r 2  D1 A7                cmp     (LOWTR),y
000CCAr 2  F0 6A                beq     SET_VARPNT_AND_YA
000CCCr 2  88                   dey
000CCDr 2               L2F29:
000CCDr 2  18                   clc
000CCEr 2  A5 A7                lda     LOWTR
000CD0r 2  69 07                adc     #BYTES_PER_VARIABLE
000CD2r 2  90 E1                bcc     L2F11
000CD4r 2  E8                   inx
000CD5r 2  D0 DC                bne     L2F0F
000CD7r 2               
000CD7r 2               ; ----------------------------------------------------------------------------
000CD7r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000CD7r 2               ;
000CD7r 2               ; RETURN CARRY = 1 IF A-Z
000CD7r 2               ;	= 0 IF NOT
000CD7r 2               ; ----------------------------------------------------------------------------
000CD7r 2               ISLETC:
000CD7r 2  C9 41                cmp     #$41
000CD9r 2  90 05                bcc     L2F3C
000CDBr 2  E9 5B                sbc     #$5B
000CDDr 2  38                   sec
000CDEr 2  E9 A5                sbc     #$A5
000CE0r 2               L2F3C:
000CE0r 2  60                   rts
000CE1r 2               
000CE1r 2               ; ----------------------------------------------------------------------------
000CE1r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000CE1r 2               ; ----------------------------------------------------------------------------
000CE1r 2               NAMENOTFOUND:
000CE1r 2  68                   pla
000CE2r 2  48                   pha
000CE3r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000CE5r 2  D0 0D                bne     MAKENEWVARIABLE
000CE7r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000CE7r 2  BA                   tsx
000CE8r 2  BD 02 01             lda     STACK+2,x
000CEBr 2  C9 rr                cmp     #>FRM_VARIABLE_CALL
000CEDr 2  D0 05                bne     MAKENEWVARIABLE
000CEFr 2               .endif
000CEFr 2               LD015:
000CEFr 2  A9 rr                lda     #<C_ZERO
000CF1r 2  A0 rr                ldy     #>C_ZERO
000CF3r 2  60                   rts
000CF4r 2               
000CF4r 2               ; ----------------------------------------------------------------------------
000CF4r 2               .ifndef CONFIG_2
000CF4r 2               C_ZERO:
000CF4r 2                       .byte   $00,$00
000CF4r 2               .endif
000CF4r 2               
000CF4r 2               ; ----------------------------------------------------------------------------
000CF4r 2               ; MAKE A NEW SIMPLE VARIABLE
000CF4r 2               ;
000CF4r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000CF4r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000CF4r 2               ; ----------------------------------------------------------------------------
000CF4r 2               MAKENEWVARIABLE:
000CF4r 2               .ifdef CONFIG_CBM_ALL
000CF4r 2                       lda     VARNAM
000CF4r 2                       ldy     VARNAM+1
000CF4r 2                       cmp     #$54
000CF4r 2                       bne     LD02F
000CF4r 2                       cpy     #$C9
000CF4r 2                       beq     LD015
000CF4r 2                       cpy     #$49
000CF4r 2                       bne     LD02F
000CF4r 2               LD02C:
000CF4r 2                       jmp     SYNERR
000CF4r 2               LD02F:
000CF4r 2                       cmp     #$53
000CF4r 2                       bne     LD037
000CF4r 2                       cpy     #$54
000CF4r 2                       beq     LD02C
000CF4r 2               LD037:
000CF4r 2               .endif
000CF4r 2  A5 77                lda     ARYTAB
000CF6r 2  A4 78                ldy     ARYTAB+1
000CF8r 2  85 A7                sta     LOWTR
000CFAr 2  84 A8                sty     LOWTR+1
000CFCr 2  A5 79                lda     STREND
000CFEr 2  A4 7A                ldy     STREND+1
000D00r 2  85 A2                sta     HIGHTR
000D02r 2  84 A3                sty     HIGHTR+1
000D04r 2  18                   clc
000D05r 2  69 07                adc     #BYTES_PER_VARIABLE
000D07r 2  90 01                bcc     L2F68
000D09r 2  C8                   iny
000D0Ar 2               L2F68:
000D0Ar 2  85 A0                sta     HIGHDS
000D0Cr 2  84 A1                sty     HIGHDS+1
000D0Er 2  20 rr rr             jsr     BLTU
000D11r 2  A5 A0                lda     HIGHDS
000D13r 2  A4 A1                ldy     HIGHDS+1
000D15r 2  C8                   iny
000D16r 2  85 77                sta     ARYTAB
000D18r 2  84 78                sty     ARYTAB+1
000D1Ar 2  A0 00                ldy     #$00
000D1Cr 2  A5 8D                lda     VARNAM
000D1Er 2  91 A7                sta     (LOWTR),y
000D20r 2  C8                   iny
000D21r 2  A5 8E                lda     VARNAM+1
000D23r 2  91 A7                sta     (LOWTR),y
000D25r 2  A9 00                lda     #$00
000D27r 2  C8                   iny
000D28r 2  91 A7                sta     (LOWTR),y
000D2Ar 2  C8                   iny
000D2Br 2  91 A7                sta     (LOWTR),y
000D2Dr 2  C8                   iny
000D2Er 2  91 A7                sta     (LOWTR),y
000D30r 2  C8                   iny
000D31r 2  91 A7                sta     (LOWTR),y
000D33r 2               .ifndef CONFIG_SMALL
000D33r 2  C8                   iny
000D34r 2  91 A7                sta     (LOWTR),y
000D36r 2               .endif
000D36r 2               
000D36r 2               ; ----------------------------------------------------------------------------
000D36r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000D36r 2               ; ----------------------------------------------------------------------------
000D36r 2               SET_VARPNT_AND_YA:
000D36r 2  A5 A7                lda     LOWTR
000D38r 2  18                   clc
000D39r 2  69 02                adc     #$02
000D3Br 2  A4 A8                ldy     LOWTR+1
000D3Dr 2  90 01                bcc     L2F9E
000D3Fr 2  C8                   iny
000D40r 2               L2F9E:
000D40r 2  85 8F                sta     VARPNT
000D42r 2  84 90                sty     VARPNT+1
000D44r 2  60                   rts
000D45r 2               
000D45r 1               .include "array.s"
000D45r 2               .segment "CODE"
000D45r 2               
000D45r 2               ; ----------------------------------------------------------------------------
000D45r 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000D45r 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000D45r 2               ; ----------------------------------------------------------------------------
000D45r 2               GETARY:
000D45r 2  A5 08                lda     EOLPNTR
000D47r 2  0A                   asl     a
000D48r 2  69 05                adc     #$05
000D4Ar 2  65 A7                adc     LOWTR
000D4Cr 2  A4 A8                ldy     LOWTR+1
000D4Er 2  90 01                bcc     L2FAF
000D50r 2  C8                   iny
000D51r 2               L2FAF:
000D51r 2  85 A0                sta     HIGHDS
000D53r 2  84 A1                sty     HIGHDS+1
000D55r 2  60                   rts
000D56r 2               
000D56r 2               ; ----------------------------------------------------------------------------
000D56r 2               NEG32768:
000D56r 2  90 80 00 00          .byte   $90,$80,$00,$00
000D5Ar 2               
000D5Ar 2               .ifdef CONFIG_2C
000D5Ar 2               		.byte	$00; bugfix: short number
000D5Ar 2               .endif
000D5Ar 2               
000D5Ar 2               ; ----------------------------------------------------------------------------
000D5Ar 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000D5Ar 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000D5Ar 2               ; IN FAC+3,4
000D5Ar 2               ; ----------------------------------------------------------------------------
000D5Ar 2               MAKINT:
000D5Ar 2  20 BF 00             jsr     CHRGET
000D5Dr 2               .ifdef CONFIG_2
000D5Dr 2  20 rr rr             jsr     FRMEVL
000D60r 2               .else
000D60r 2                       jsr     FRMNUM
000D60r 2               .endif
000D60r 2               
000D60r 2               ; ----------------------------------------------------------------------------
000D60r 2               ; CONVERT FAC TO INTEGER
000D60r 2               ; MUST BE POSITIVE AND LESS THAN 32768
000D60r 2               ; ----------------------------------------------------------------------------
000D60r 2               MKINT:
000D60r 2               .ifdef CONFIG_2
000D60r 2  20 rr rr             jsr     CHKNUM
000D63r 2               .endif
000D63r 2  A5 AE                lda     FACSIGN
000D65r 2  30 0D                bmi     MI1
000D67r 2               
000D67r 2               ; ----------------------------------------------------------------------------
000D67r 2               ; CONVERT FAC TO INTEGER
000D67r 2               ; MUST BE -32767 <= FAC <= 32767
000D67r 2               ; ----------------------------------------------------------------------------
000D67r 2               AYINT:
000D67r 2  A5 A9                lda     FAC
000D69r 2  C9 90                cmp     #$90
000D6Br 2  90 09                bcc     MI2
000D6Dr 2  A9 rr                lda     #<NEG32768
000D6Fr 2  A0 rr                ldy     #>NEG32768
000D71r 2  20 rr rr             jsr     FCOMP
000D74r 2               MI1:
000D74r 2  D0 7A                bne     IQERR
000D76r 2               MI2:
000D76r 2  4C rr rr             jmp     QINT
000D79r 2               
000D79r 2               ; ----------------------------------------------------------------------------
000D79r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000D79r 2               ; ----------------------------------------------------------------------------
000D79r 2               ARRAY:
000D79r 2  A5 09                lda     DIMFLG
000D7Br 2               .ifndef CONFIG_SMALL
000D7Br 2  05 0B                ora     VALTYP+1
000D7Dr 2               .endif
000D7Dr 2  48                   pha
000D7Er 2  A5 0A                lda     VALTYP
000D80r 2  48                   pha
000D81r 2  A0 00                ldy     #$00
000D83r 2               L2FDE:
000D83r 2  98                   tya
000D84r 2  48                   pha
000D85r 2  A5 8E                lda     VARNAM+1
000D87r 2  48                   pha
000D88r 2  A5 8D                lda     VARNAM
000D8Ar 2  48                   pha
000D8Br 2  20 rr rr             jsr     MAKINT
000D8Er 2  68                   pla
000D8Fr 2  85 8D                sta     VARNAM
000D91r 2  68                   pla
000D92r 2  85 8E                sta     VARNAM+1
000D94r 2  68                   pla
000D95r 2  A8                   tay
000D96r 2  BA                   tsx
000D97r 2  BD 02 01             lda     STACK+2,x
000D9Ar 2  48                   pha
000D9Br 2  BD 01 01             lda     STACK+1,x
000D9Er 2  48                   pha
000D9Fr 2  A5 AC                lda     FAC_LAST-1
000DA1r 2  9D 02 01             sta     STACK+2,x
000DA4r 2  A5 AD                lda     FAC_LAST
000DA6r 2  9D 01 01             sta     STACK+1,x
000DA9r 2  C8                   iny
000DAAr 2  20 C5 00             jsr     CHRGOT
000DADr 2  C9 2C                cmp     #$2C
000DAFr 2  F0 D2                beq     L2FDE
000DB1r 2  84 08                sty     EOLPNTR
000DB3r 2  20 rr rr             jsr     CHKCLS
000DB6r 2  68                   pla
000DB7r 2  85 0A                sta     VALTYP
000DB9r 2  68                   pla
000DBAr 2               .ifndef CONFIG_SMALL
000DBAr 2  85 0B                sta     VALTYP+1
000DBCr 2  29 7F                and     #$7F
000DBEr 2               .endif
000DBEr 2  85 09                sta     DIMFLG
000DC0r 2               ; ----------------------------------------------------------------------------
000DC0r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000DC0r 2               ; ----------------------------------------------------------------------------
000DC0r 2  A6 77                ldx     ARYTAB
000DC2r 2  A5 78                lda     ARYTAB+1
000DC4r 2               L301F:
000DC4r 2  86 A7                stx     LOWTR
000DC6r 2  85 A8                sta     LOWTR+1
000DC8r 2  C5 7A                cmp     STREND+1
000DCAr 2  D0 04                bne     L302B
000DCCr 2  E4 79                cpx     STREND
000DCEr 2  F0 39                beq     MAKE_NEW_ARRAY
000DD0r 2               L302B:
000DD0r 2  A0 00                ldy     #$00
000DD2r 2  B1 A7                lda     (LOWTR),y
000DD4r 2  C8                   iny
000DD5r 2  C5 8D                cmp     VARNAM
000DD7r 2  D0 06                bne     L303A
000DD9r 2  A5 8E                lda     VARNAM+1
000DDBr 2  D1 A7                cmp     (LOWTR),y
000DDDr 2  F0 16                beq     USE_OLD_ARRAY
000DDFr 2               L303A:
000DDFr 2  C8                   iny
000DE0r 2  B1 A7                lda     (LOWTR),y
000DE2r 2  18                   clc
000DE3r 2  65 A7                adc     LOWTR
000DE5r 2  AA                   tax
000DE6r 2  C8                   iny
000DE7r 2  B1 A7                lda     (LOWTR),y
000DE9r 2  65 A8                adc     LOWTR+1
000DEBr 2  90 D7                bcc     L301F
000DEDr 2               
000DEDr 2               ; ----------------------------------------------------------------------------
000DEDr 2               ; ERROR:  BAD SUBSCRIPTS
000DEDr 2               ; ----------------------------------------------------------------------------
000DEDr 2               SUBERR:
000DEDr 2  A2 10                ldx     #ERR_BADSUBS
000DEFr 2  2C                   .byte   $2C
000DF0r 2               
000DF0r 2               ; ----------------------------------------------------------------------------
000DF0r 2               ; ERROR:  ILLEGAL QUANTITY
000DF0r 2               ; ----------------------------------------------------------------------------
000DF0r 2               IQERR:
000DF0r 2  A2 08                ldx     #ERR_ILLQTY
000DF2r 2               JER:
000DF2r 2  4C rr rr             jmp     ERROR
000DF5r 2               
000DF5r 2               ; ----------------------------------------------------------------------------
000DF5r 2               ; FOUND THE ARRAY
000DF5r 2               ; ----------------------------------------------------------------------------
000DF5r 2               USE_OLD_ARRAY:
000DF5r 2  A2 12                ldx     #ERR_REDIMD
000DF7r 2  A5 09                lda     DIMFLG
000DF9r 2  D0 F7                bne     JER
000DFBr 2  20 rr rr             jsr     GETARY
000DFEr 2  A5 08                lda     EOLPNTR
000E00r 2  A0 04                ldy     #$04
000E02r 2  D1 A7                cmp     (LOWTR),y
000E04r 2  D0 E7                bne     SUBERR
000E06r 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000E09r 2               
000E09r 2               ; ----------------------------------------------------------------------------
000E09r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000E09r 2               ; ----------------------------------------------------------------------------
000E09r 2               MAKE_NEW_ARRAY:
000E09r 2  20 rr rr             jsr     GETARY
000E0Cr 2  20 rr rr             jsr     REASON
000E0Fr 2  A9 00                lda     #$00
000E11r 2  A8                   tay
000E12r 2  85 BA                sta     STRNG2+1
000E14r 2  A2 05                ldx     #BYTES_PER_ELEMENT
000E16r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000E16r 2                       stx     STRNG2
000E16r 2               .endif
000E16r 2  A5 8D                lda     VARNAM
000E18r 2  91 A7                sta     (LOWTR),y
000E1Ar 2               .ifndef CONFIG_SMALL
000E1Ar 2  10 01                bpl     L3078
000E1Cr 2  CA                   dex
000E1Dr 2               L3078:
000E1Dr 2               .endif
000E1Dr 2  C8                   iny
000E1Er 2  A5 8E                lda     VARNAM+1
000E20r 2  91 A7                sta     (LOWTR),y
000E22r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000E22r 2  10 02                bpl     L3081
000E24r 2  CA                   dex
000E25r 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000E25r 2  CA                   dex
000E26r 2                 .endif
000E26r 2               L3081:
000E26r 2  86 B9                stx     STRNG2
000E28r 2               .endif
000E28r 2  A5 08                lda     EOLPNTR
000E2Ar 2  C8                   iny
000E2Br 2  C8                   iny
000E2Cr 2  C8                   iny
000E2Dr 2  91 A7                sta     (LOWTR),y
000E2Fr 2               L308A:
000E2Fr 2  A2 0B                ldx     #$0B
000E31r 2  A9 00                lda     #$00
000E33r 2  24 09                bit     DIMFLG
000E35r 2  50 08                bvc     L309A
000E37r 2  68                   pla
000E38r 2  18                   clc
000E39r 2  69 01                adc     #$01
000E3Br 2  AA                   tax
000E3Cr 2  68                   pla
000E3Dr 2  69 00                adc     #$00
000E3Fr 2               L309A:
000E3Fr 2  C8                   iny
000E40r 2  91 A7                sta     (LOWTR),y
000E42r 2  C8                   iny
000E43r 2  8A                   txa
000E44r 2  91 A7                sta     (LOWTR),y
000E46r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000E49r 2  86 B9                stx     STRNG2
000E4Br 2  85 BA                sta     STRNG2+1
000E4Dr 2  A4 6A                ldy     INDEX
000E4Fr 2  C6 08                dec     EOLPNTR
000E51r 2  D0 DC                bne     L308A
000E53r 2  65 A1                adc     HIGHDS+1
000E55r 2  B0 5D                bcs     GME
000E57r 2  85 A1                sta     HIGHDS+1
000E59r 2  A8                   tay
000E5Ar 2  8A                   txa
000E5Br 2  65 A0                adc     HIGHDS
000E5Dr 2  90 03                bcc     L30BD
000E5Fr 2  C8                   iny
000E60r 2  F0 52                beq     GME
000E62r 2               L30BD:
000E62r 2  20 rr rr             jsr     REASON
000E65r 2  85 79                sta     STREND
000E67r 2  84 7A                sty     STREND+1
000E69r 2  A9 00                lda     #$00
000E6Br 2  E6 BA                inc     STRNG2+1
000E6Dr 2  A4 B9                ldy     STRNG2
000E6Fr 2  F0 05                beq     L30D1
000E71r 2               L30CC:
000E71r 2  88                   dey
000E72r 2  91 A0                sta     (HIGHDS),y
000E74r 2  D0 FB                bne     L30CC
000E76r 2               L30D1:
000E76r 2  C6 A1                dec     HIGHDS+1
000E78r 2  C6 BA                dec     STRNG2+1
000E7Ar 2  D0 F5                bne     L30CC
000E7Cr 2  E6 A1                inc     HIGHDS+1
000E7Er 2  38                   sec
000E7Fr 2  A5 79                lda     STREND
000E81r 2  E5 A7                sbc     LOWTR
000E83r 2  A0 02                ldy     #$02
000E85r 2  91 A7                sta     (LOWTR),y
000E87r 2  A5 7A                lda     STREND+1
000E89r 2  C8                   iny
000E8Ar 2  E5 A8                sbc     LOWTR+1
000E8Cr 2  91 A7                sta     (LOWTR),y
000E8Er 2  A5 09                lda     DIMFLG
000E90r 2  D0 62                bne     RTS9
000E92r 2  C8                   iny
000E93r 2               
000E93r 2               ; ----------------------------------------------------------------------------
000E93r 2               ; FIND SPECIFIED ARRAY ELEMENT
000E93r 2               ;
000E93r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000E93r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000E93r 2               ; ----------------------------------------------------------------------------
000E93r 2               FIND_ARRAY_ELEMENT:
000E93r 2  B1 A7                lda     (LOWTR),y
000E95r 2  85 08                sta     EOLPNTR
000E97r 2  A9 00                lda     #$00
000E99r 2  85 B9                sta     STRNG2
000E9Br 2               L30F6:
000E9Br 2  85 BA                sta     STRNG2+1
000E9Dr 2  C8                   iny
000E9Er 2  68                   pla
000E9Fr 2  AA                   tax
000EA0r 2  85 AC                sta     FAC_LAST-1
000EA2r 2  68                   pla
000EA3r 2  85 AD                sta     FAC_LAST
000EA5r 2  D1 A7                cmp     (LOWTR),y
000EA7r 2  90 0E                bcc     FAE2
000EA9r 2  D0 06                bne     GSE
000EABr 2  C8                   iny
000EACr 2  8A                   txa
000EADr 2  D1 A7                cmp     (LOWTR),y
000EAFr 2  90 07                bcc     FAE3
000EB1r 2               ; ----------------------------------------------------------------------------
000EB1r 2               GSE:
000EB1r 2  4C rr rr             jmp     SUBERR
000EB4r 2               GME:
000EB4r 2  4C rr rr             jmp     MEMERR
000EB7r 2               ; ----------------------------------------------------------------------------
000EB7r 2               FAE2:
000EB7r 2  C8                   iny
000EB8r 2               FAE3:
000EB8r 2  A5 BA                lda     STRNG2+1
000EBAr 2  05 B9                ora     STRNG2
000EBCr 2  18                   clc
000EBDr 2  F0 0A                beq     L3124
000EBFr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000EC2r 2  8A                   txa
000EC3r 2  65 AC                adc     FAC_LAST-1
000EC5r 2  AA                   tax
000EC6r 2  98                   tya
000EC7r 2  A4 6A                ldy     INDEX
000EC9r 2               L3124:
000EC9r 2  65 AD                adc     FAC_LAST
000ECBr 2  86 B9                stx     STRNG2
000ECDr 2  C6 08                dec     EOLPNTR
000ECFr 2  D0 CA                bne     L30F6
000ED1r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000ED1r 2                       asl     STRNG2
000ED1r 2                       rol     a
000ED1r 2                       bcs     GSE
000ED1r 2                       asl     STRNG2
000ED1r 2                       rol     a
000ED1r 2                       bcs     GSE
000ED1r 2                       tay
000ED1r 2                       lda     STRNG2
000ED1r 2               .else
000ED1r 2                 .ifdef CONFIG_11A
000ED1r 2  85 BA                sta     STRNG2+1
000ED3r 2                 .endif
000ED3r 2  A2 05                ldx     #BYTES_FP
000ED5r 2                 .ifdef CONFIG_SMALL
000ED5r 2                       lda     VARNAM+1
000ED5r 2                 .else
000ED5r 2  A5 8D                lda     VARNAM
000ED7r 2                 .endif
000ED7r 2  10 01                bpl     L3135
000ED9r 2  CA                   dex
000EDAr 2               L3135:
000EDAr 2                 .ifdef CONFIG_SMALL
000EDAr 2                       stx     RESULT+1
000EDAr 2                 .else
000EDAr 2  A5 8E                lda     VARNAM+1
000EDCr 2  10 02                bpl     L313B
000EDEr 2  CA                   dex
000EDFr 2  CA                   dex
000EE0r 2               L313B:
000EE0r 2  86 70                stx     RESULT+2
000EE2r 2                 .endif
000EE2r 2  A9 00                lda     #$00
000EE4r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000EE7r 2  8A                   txa
000EE8r 2               .endif
000EE8r 2  65 A0                adc     HIGHDS
000EEAr 2  85 8F                sta     VARPNT
000EECr 2  98                   tya
000EEDr 2  65 A1                adc     HIGHDS+1
000EEFr 2  85 90                sta     VARPNT+1
000EF1r 2  A8                   tay
000EF2r 2  A5 8F                lda     VARPNT
000EF4r 2               RTS9:
000EF4r 2  60                   rts
000EF5r 2               
000EF5r 2               ; ----------------------------------------------------------------------------
000EF5r 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000EF5r 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000EF5r 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000EF5r 2               ; ----------------------------------------------------------------------------
000EF5r 2               MULTIPLY_SUBSCRIPT:
000EF5r 2  84 6A                sty     INDEX
000EF7r 2  B1 A7                lda     (LOWTR),y
000EF9r 2  85 70                sta     RESULT_LAST-2
000EFBr 2  88                   dey
000EFCr 2  B1 A7                lda     (LOWTR),y
000EFEr 2               MULTIPLY_SUBS1:
000EFEr 2  85 71                sta     RESULT_LAST-1
000F00r 2  A9 10                lda     #$10
000F02r 2  85 A5                sta     INDX
000F04r 2  A2 00                ldx     #$00
000F06r 2  A0 00                ldy     #$00
000F08r 2               L3163:
000F08r 2  8A                   txa
000F09r 2  0A                   asl     a
000F0Ar 2  AA                   tax
000F0Br 2  98                   tya
000F0Cr 2  2A                   rol     a
000F0Dr 2  A8                   tay
000F0Er 2  B0 A4                bcs     GME
000F10r 2  06 B9                asl     STRNG2
000F12r 2  26 BA                rol     STRNG2+1
000F14r 2  90 0B                bcc     L317C
000F16r 2  18                   clc
000F17r 2  8A                   txa
000F18r 2  65 70                adc     RESULT_LAST-2
000F1Ar 2  AA                   tax
000F1Br 2  98                   tya
000F1Cr 2  65 71                adc     RESULT_LAST-1
000F1Er 2  A8                   tay
000F1Fr 2  B0 93                bcs     GME
000F21r 2               L317C:
000F21r 2  C6 A5                dec     INDX
000F23r 2  D0 E3                bne     L3163
000F25r 2  60                   rts
000F26r 2               
000F26r 2               
000F26r 1               .include "misc2.s"
000F26r 2               .segment "CODE"
000F26r 2               
000F26r 2               ; ----------------------------------------------------------------------------
000F26r 2               ; "FRE" FUNCTION
000F26r 2               ;
000F26r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000F26r 2               ; ----------------------------------------------------------------------------
000F26r 2               FRE:
000F26r 2  A5 0A                lda     VALTYP
000F28r 2  F0 03                beq     L3188
000F2Ar 2  20 rr rr             jsr     FREFAC
000F2Dr 2               L3188:
000F2Dr 2  20 rr rr             jsr     GARBAG
000F30r 2  38                   sec
000F31r 2  A5 7B                lda     FRETOP
000F33r 2  E5 79                sbc     STREND
000F35r 2  A8                   tay
000F36r 2  A5 7C                lda     FRETOP+1
000F38r 2  E5 7A                sbc     STREND+1
000F3Ar 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000F3Ar 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000F3Ar 2               
000F3Ar 2               ; ----------------------------------------------------------------------------
000F3Ar 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000F3Ar 2               ; ----------------------------------------------------------------------------
000F3Ar 2               GIVAYF:
000F3Ar 2  A2 00                ldx     #$00
000F3Cr 2  86 0A                stx     VALTYP
000F3Er 2  85 AA                sta     FAC+1
000F40r 2  84 AB                sty     FAC+2
000F42r 2  A2 90                ldx     #$90
000F44r 2  4C rr rr             jmp     FLOAT1
000F47r 2               POS:
000F47r 2  A4 11                ldy     POSX
000F49r 2               
000F49r 2               ; ----------------------------------------------------------------------------
000F49r 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000F49r 2               ; ----------------------------------------------------------------------------
000F49r 2               SNGFLT:
000F49r 2  A9 00                lda     #$00
000F4Br 2  F0 ED                beq     GIVAYF
000F4Dr 2               
000F4Dr 2               ; ----------------------------------------------------------------------------
000F4Dr 2               ; CHECK FOR DIRECT OR RUNNING MODE
000F4Dr 2               ; GIVING ERROR IF DIRECT MODE
000F4Dr 2               ; ----------------------------------------------------------------------------
000F4Dr 2               ERRDIR:
000F4Dr 2  A6 82                ldx     CURLIN+1
000F4Fr 2  E8                   inx
000F50r 2  D0 A2                bne     RTS9
000F52r 2  A2 16                ldx     #ERR_ILLDIR
000F54r 2               .ifdef CONFIG_2
000F54r 2  2C                   .byte   $2C
000F55r 2               LD288:
000F55r 2  A2 20                ldx     #ERR_UNDEFFN
000F57r 2               .endif
000F57r 2               L31AF:
000F57r 2  4C rr rr             jmp     ERROR
000F5Ar 2               DEF:
000F5Ar 2  20 rr rr             jsr     FNC
000F5Dr 2  20 rr rr             jsr     ERRDIR
000F60r 2  20 rr rr             jsr     CHKOPN
000F63r 2  A9 80                lda     #$80
000F65r 2  85 0D                sta     SUBFLG
000F67r 2  20 rr rr             jsr     PTRGET
000F6Ar 2  20 rr rr             jsr     CHKNUM
000F6Dr 2  20 rr rr             jsr     CHKCLS
000F70r 2  A9 AC                lda     #TOKEN_EQUAL
000F72r 2  20 rr rr             jsr     SYNCHR
000F75r 2               .ifndef CONFIG_SMALL
000F75r 2  48                   pha
000F76r 2               .endif
000F76r 2  A5 90                lda     VARPNT+1
000F78r 2  48                   pha
000F79r 2  A5 8F                lda     VARPNT
000F7Br 2  48                   pha
000F7Cr 2  A5 C7                lda     TXTPTR+1
000F7Er 2  48                   pha
000F7Fr 2  A5 C6                lda     TXTPTR
000F81r 2  48                   pha
000F82r 2  20 rr rr             jsr     DATA
000F85r 2  4C rr rr             jmp     L3250
000F88r 2               FNC:
000F88r 2  A9 9F                lda     #TOKEN_FN
000F8Ar 2  20 rr rr             jsr     SYNCHR
000F8Dr 2  09 80                ora     #$80
000F8Fr 2  85 0D                sta     SUBFLG
000F91r 2  20 rr rr             jsr     PTRGET3
000F94r 2  85 96                sta     FNCNAM
000F96r 2  84 97                sty     FNCNAM+1
000F98r 2  4C rr rr             jmp     CHKNUM
000F9Br 2               L31F3:
000F9Br 2  20 rr rr             jsr     FNC
000F9Er 2  A5 97                lda     FNCNAM+1
000FA0r 2  48                   pha
000FA1r 2  A5 96                lda     FNCNAM
000FA3r 2  48                   pha
000FA4r 2  20 rr rr             jsr     PARCHK
000FA7r 2  20 rr rr             jsr     CHKNUM
000FAAr 2  68                   pla
000FABr 2  85 96                sta     FNCNAM
000FADr 2  68                   pla
000FAEr 2  85 97                sta     FNCNAM+1
000FB0r 2  A0 02                ldy     #$02
000FB2r 2               .ifndef CONFIG_2
000FB2r 2                       ldx     #ERR_UNDEFFN
000FB2r 2               .endif
000FB2r 2  B1 96                lda     (FNCNAM),y
000FB4r 2               .ifndef CONFIG_2
000FB4r 2                       beq     L31AF
000FB4r 2               .endif
000FB4r 2  85 8F                sta     VARPNT
000FB6r 2  AA                   tax
000FB7r 2  C8                   iny
000FB8r 2  B1 96                lda     (FNCNAM),y
000FBAr 2               .ifdef CONFIG_2
000FBAr 2  F0 99                beq     LD288
000FBCr 2               .endif
000FBCr 2  85 90                sta     VARPNT+1
000FBEr 2               .ifndef CONFIG_SMALL
000FBEr 2  C8                   iny
000FBFr 2               .endif
000FBFr 2               L3219:
000FBFr 2  B1 8F                lda     (VARPNT),y
000FC1r 2  48                   pha
000FC2r 2  88                   dey
000FC3r 2  10 FA                bpl     L3219
000FC5r 2  A4 90                ldy     VARPNT+1
000FC7r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000FCAr 2  A5 C7                lda     TXTPTR+1
000FCCr 2  48                   pha
000FCDr 2  A5 C6                lda     TXTPTR
000FCFr 2  48                   pha
000FD0r 2  B1 96                lda     (FNCNAM),y
000FD2r 2  85 C6                sta     TXTPTR
000FD4r 2  C8                   iny
000FD5r 2  B1 96                lda     (FNCNAM),y
000FD7r 2  85 C7                sta     TXTPTR+1
000FD9r 2  A5 90                lda     VARPNT+1
000FDBr 2  48                   pha
000FDCr 2  A5 8F                lda     VARPNT
000FDEr 2  48                   pha
000FDFr 2  20 rr rr             jsr     FRMNUM
000FE2r 2  68                   pla
000FE3r 2  85 96                sta     FNCNAM
000FE5r 2  68                   pla
000FE6r 2  85 97                sta     FNCNAM+1
000FE8r 2  20 C5 00             jsr     CHRGOT
000FEBr 2  F0 03                beq     L324A
000FEDr 2  4C rr rr             jmp     SYNERR
000FF0r 2               L324A:
000FF0r 2  68                   pla
000FF1r 2  85 C6                sta     TXTPTR
000FF3r 2  68                   pla
000FF4r 2  85 C7                sta     TXTPTR+1
000FF6r 2               L3250:
000FF6r 2  A0 00                ldy     #$00
000FF8r 2  68                   pla
000FF9r 2  91 96                sta     (FNCNAM),y
000FFBr 2  68                   pla
000FFCr 2  C8                   iny
000FFDr 2  91 96                sta     (FNCNAM),y
000FFFr 2  68                   pla
001000r 2  C8                   iny
001001r 2  91 96                sta     (FNCNAM),y
001003r 2  68                   pla
001004r 2  C8                   iny
001005r 2  91 96                sta     (FNCNAM),y
001007r 2               .ifndef CONFIG_SMALL
001007r 2  68                   pla
001008r 2  C8                   iny
001009r 2  91 96                sta     (FNCNAM),y
00100Br 2               .endif
00100Br 2  60                   rts
00100Cr 2               
00100Cr 1               .include "string.s"
00100Cr 2               .segment "CODE"
00100Cr 2               ; ----------------------------------------------------------------------------
00100Cr 2               ; "STR$" FUNCTION
00100Cr 2               ; ----------------------------------------------------------------------------
00100Cr 2               STR:
00100Cr 2  20 rr rr             jsr     CHKNUM
00100Fr 2  A0 00                ldy     #$00
001011r 2  20 rr rr             jsr     FOUT1
001014r 2  68                   pla
001015r 2  68                   pla
001016r 2               LD353:
001016r 2  A9 FF                lda     #<(STACK2-1)
001018r 2  A0 01                ldy     #>(STACK2-1)
00101Ar 2               .if STACK2 > $0100
00101Ar 2  D0 12                bne     STRLIT
00101Cr 2               .else
00101Cr 2                       beq     STRLIT
00101Cr 2               .endif
00101Cr 2               
00101Cr 2               ; ----------------------------------------------------------------------------
00101Cr 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00101Cr 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
00101Cr 2               ; ----------------------------------------------------------------------------
00101Cr 2               STRINI:
00101Cr 2  A6 AC                ldx     FAC_LAST-1
00101Er 2  A4 AD                ldy     FAC_LAST
001020r 2  86 98                stx     DSCPTR
001022r 2  84 99                sty     DSCPTR+1
001024r 2               
001024r 2               ; ----------------------------------------------------------------------------
001024r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
001024r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
001024r 2               ; ----------------------------------------------------------------------------
001024r 2               STRSPA:
001024r 2  20 rr rr             jsr     GETSPA
001027r 2  86 AA                stx     FAC+1
001029r 2  84 AB                sty     FAC+2
00102Br 2  85 A9                sta     FAC
00102Dr 2  60                   rts
00102Er 2               
00102Er 2               ; ----------------------------------------------------------------------------
00102Er 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
00102Er 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
00102Er 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
00102Er 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
00102Er 2               ; ----------------------------------------------------------------------------
00102Er 2               STRLIT:
00102Er 2  A2 22                ldx     #$22
001030r 2  86 06                stx     CHARAC
001032r 2  86 07                stx     ENDCHR
001034r 2               
001034r 2               ; ----------------------------------------------------------------------------
001034r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
001034r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
001034r 2               ;
001034r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
001034r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
001034r 2               ; ----------------------------------------------------------------------------
001034r 2               STRLT2:
001034r 2  85 B7                sta     STRNG1
001036r 2  84 B8                sty     STRNG1+1
001038r 2  85 AA                sta     FAC+1
00103Ar 2  84 AB                sty     FAC+2
00103Cr 2  A0 FF                ldy     #$FF
00103Er 2               L3298:
00103Er 2  C8                   iny
00103Fr 2  B1 B7                lda     (STRNG1),y
001041r 2  F0 0C                beq     L32A9
001043r 2  C5 06                cmp     CHARAC
001045r 2  F0 04                beq     L32A5
001047r 2  C5 07                cmp     ENDCHR
001049r 2  D0 F3                bne     L3298
00104Br 2               L32A5:
00104Br 2  C9 22                cmp     #$22
00104Dr 2  F0 01                beq     L32AA
00104Fr 2               L32A9:
00104Fr 2  18                   clc
001050r 2               L32AA:
001050r 2  84 A9                sty     FAC
001052r 2  98                   tya
001053r 2  65 B7                adc     STRNG1
001055r 2  85 B9                sta     STRNG2
001057r 2  A6 B8                ldx     STRNG1+1
001059r 2  90 01                bcc     L32B6
00105Br 2  E8                   inx
00105Cr 2               L32B6:
00105Cr 2  86 BA                stx     STRNG2+1
00105Er 2  A5 B8                lda     STRNG1+1
001060r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
001060r 2                       beq     LD399
001060r 2                       cmp     #>INPUTBUFFER
001060r 2               .elseif .def(AIM65)
001060r 2  F0 04                beq     LD399
001062r 2  C9 01                cmp     #$01
001064r 2               .endif
001064r 2  D0 0B                bne     PUTNEW
001066r 2               LD399:
001066r 2  98                   tya
001067r 2  20 rr rr             jsr     STRINI
00106Ar 2  A6 B7                ldx     STRNG1
00106Cr 2  A4 B8                ldy     STRNG1+1
00106Er 2  20 rr rr             jsr     MOVSTR
001071r 2               
001071r 2               ; ----------------------------------------------------------------------------
001071r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
001071r 2               ;
001071r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
001071r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
001071r 2               ; ----------------------------------------------------------------------------
001071r 2               PUTNEW:
001071r 2  A6 5E                ldx     TEMPPT
001073r 2  E0 6A                cpx     #TEMPST+9
001075r 2  D0 05                bne     PUTEMP
001077r 2  A2 1C                ldx     #ERR_FRMCPX
001079r 2               JERR:
001079r 2  4C rr rr             jmp     ERROR
00107Cr 2               PUTEMP:
00107Cr 2  A5 A9                lda     FAC
00107Er 2  95 00                sta     0,x
001080r 2  A5 AA                lda     FAC+1
001082r 2  95 01                sta     1,x
001084r 2  A5 AB                lda     FAC+2
001086r 2  95 02                sta     2,x
001088r 2  A0 00                ldy     #$00
00108Ar 2  86 AC                stx     FAC_LAST-1
00108Cr 2  84 AD                sty     FAC_LAST
00108Er 2               .ifdef CONFIG_2
00108Er 2  84 B8                sty     FACEXTENSION
001090r 2               .endif
001090r 2  88                   dey
001091r 2  84 0A                sty     VALTYP
001093r 2  86 5F                stx     LASTPT
001095r 2  E8                   inx
001096r 2  E8                   inx
001097r 2  E8                   inx
001098r 2  86 5E                stx     TEMPPT
00109Ar 2  60                   rts
00109Br 2               
00109Br 2               ; ----------------------------------------------------------------------------
00109Br 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00109Br 2               ; (A)=# BYTES SPACE TO MAKE
00109Br 2               ;
00109Br 2               ; RETURN WITH (A) SAME,
00109Br 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00109Br 2               ; ----------------------------------------------------------------------------
00109Br 2               GETSPA:
00109Br 2  46 0C                lsr     DATAFLG
00109Dr 2               L32F1:
00109Dr 2  48                   pha
00109Er 2  49 FF                eor     #$FF
0010A0r 2  38                   sec
0010A1r 2  65 7B                adc     FRETOP
0010A3r 2  A4 7C                ldy     FRETOP+1
0010A5r 2  B0 01                bcs     L32FC
0010A7r 2  88                   dey
0010A8r 2               L32FC:
0010A8r 2  C4 7A                cpy     STREND+1
0010AAr 2  90 11                bcc     L3311
0010ACr 2  D0 04                bne     L3306
0010AEr 2  C5 79                cmp     STREND
0010B0r 2  90 0B                bcc     L3311
0010B2r 2               L3306:
0010B2r 2  85 7B                sta     FRETOP
0010B4r 2  84 7C                sty     FRETOP+1
0010B6r 2  85 7D                sta     FRESPC
0010B8r 2  84 7E                sty     FRESPC+1
0010BAr 2  AA                   tax
0010BBr 2  68                   pla
0010BCr 2  60                   rts
0010BDr 2               L3311:
0010BDr 2  A2 0C                ldx     #ERR_MEMFULL
0010BFr 2  A5 0C                lda     DATAFLG
0010C1r 2  30 B6                bmi     JERR
0010C3r 2  20 rr rr             jsr     GARBAG
0010C6r 2  A9 80                lda     #$80
0010C8r 2  85 0C                sta     DATAFLG
0010CAr 2  68                   pla
0010CBr 2  D0 D0                bne     L32F1
0010CDr 2               
0010CDr 2               ; ----------------------------------------------------------------------------
0010CDr 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
0010CDr 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
0010CDr 2               ; BELOW STRING AREA DOWN TO STREND.
0010CDr 2               ; ----------------------------------------------------------------------------
0010CDr 2               GARBAG:
0010CDr 2               
0010CDr 2               .ifdef CONST_MEMSIZ
0010CDr 2                       ldx     #<CONST_MEMSIZ
0010CDr 2                       lda     #>CONST_MEMSIZ
0010CDr 2               .else
0010CDr 2  A6 7F                ldx     MEMSIZ
0010CFr 2  A5 80                lda     MEMSIZ+1
0010D1r 2               .endif
0010D1r 2               FINDHIGHESTSTRING:
0010D1r 2  86 7B                stx     FRETOP
0010D3r 2  85 7C                sta     FRETOP+1
0010D5r 2  A0 00                ldy     #$00
0010D7r 2  84 97                sty     FNCNAM+1
0010D9r 2               .ifdef CONFIG_2
0010D9r 2  84 96                sty     FNCNAM	; GC bugfix!
0010DBr 2               .endif
0010DBr 2  A5 79                lda     STREND
0010DDr 2  A6 7A                ldx     STREND+1
0010DFr 2  85 A7                sta     LOWTR
0010E1r 2  86 A8                stx     LOWTR+1
0010E3r 2  A9 61                lda     #TEMPST
0010E5r 2  A2 00                ldx     #$00
0010E7r 2  85 6A                sta     INDEX
0010E9r 2  86 6B                stx     INDEX+1
0010EBr 2               L333D:
0010EBr 2  C5 5E                cmp     TEMPPT
0010EDr 2  F0 05                beq     L3346
0010EFr 2  20 rr rr             jsr     CHECK_VARIABLE
0010F2r 2  F0 F7                beq     L333D
0010F4r 2               L3346:
0010F4r 2  A9 07                lda     #BYTES_PER_VARIABLE
0010F6r 2  85 9B                sta     DSCLEN
0010F8r 2  A5 75                lda     VARTAB
0010FAr 2  A6 76                ldx     VARTAB+1
0010FCr 2  85 6A                sta     INDEX
0010FEr 2  86 6B                stx     INDEX+1
001100r 2               L3352:
001100r 2  E4 78                cpx     ARYTAB+1
001102r 2  D0 04                bne     L335A
001104r 2  C5 77                cmp     ARYTAB
001106r 2  F0 05                beq     L335F
001108r 2               L335A:
001108r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
00110Br 2  F0 F3                beq     L3352
00110Dr 2               L335F:
00110Dr 2  85 A0                sta     HIGHDS
00110Fr 2  86 A1                stx     HIGHDS+1
001111r 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
001113r 2  85 9B                sta     DSCLEN
001115r 2               L3367:
001115r 2  A5 A0                lda     HIGHDS
001117r 2  A6 A1                ldx     HIGHDS+1
001119r 2               L336B:
001119r 2  E4 7A                cpx     STREND+1
00111Br 2  D0 07                bne     L3376
00111Dr 2  C5 79                cmp     STREND
00111Fr 2  D0 03                bne     L3376
001121r 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
001124r 2               L3376:
001124r 2  85 6A                sta     INDEX
001126r 2  86 6B                stx     INDEX+1
001128r 2               .ifdef CONFIG_SMALL
001128r 2                       ldy     #$01
001128r 2               .else
001128r 2  A0 00                ldy     #$00
00112Ar 2  B1 6A                lda     (INDEX),y
00112Cr 2  AA                   tax
00112Dr 2  C8                   iny
00112Er 2               .endif
00112Er 2  B1 6A                lda     (INDEX),y
001130r 2  08                   php
001131r 2  C8                   iny
001132r 2  B1 6A                lda     (INDEX),y
001134r 2  65 A0                adc     HIGHDS
001136r 2  85 A0                sta     HIGHDS
001138r 2  C8                   iny
001139r 2  B1 6A                lda     (INDEX),y
00113Br 2  65 A1                adc     HIGHDS+1
00113Dr 2  85 A1                sta     HIGHDS+1
00113Fr 2  28                   plp
001140r 2  10 D3                bpl     L3367
001142r 2               .ifndef CONFIG_SMALL
001142r 2  8A                   txa
001143r 2  30 D0                bmi     L3367
001145r 2               .endif
001145r 2  C8                   iny
001146r 2  B1 6A                lda     (INDEX),y
001148r 2               .ifdef CONFIG_CBM1_PATCHES
001148r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
001148r 2               .else
001148r 2                 .ifdef CONFIG_11
001148r 2  A0 00                ldy     #$00	; GC bugfix
00114Ar 2                 .endif
00114Ar 2  0A                   asl     a
00114Br 2  69 05                adc     #$05
00114Dr 2               .endif
00114Dr 2  65 6A                adc     INDEX
00114Fr 2  85 6A                sta     INDEX
001151r 2  90 02                bcc     L33A7
001153r 2  E6 6B                inc     INDEX+1
001155r 2               L33A7:
001155r 2  A6 6B                ldx     INDEX+1
001157r 2               L33A9:
001157r 2  E4 A1                cpx     HIGHDS+1
001159r 2  D0 04                bne     L33B1
00115Br 2  C5 A0                cmp     HIGHDS
00115Dr 2  F0 BA                beq     L336B
00115Fr 2               L33B1:
00115Fr 2  20 rr rr             jsr     CHECK_VARIABLE
001162r 2  F0 F3                beq     L33A9
001164r 2               
001164r 2               ; ----------------------------------------------------------------------------
001164r 2               ; PROCESS A SIMPLE VARIABLE
001164r 2               ; ----------------------------------------------------------------------------
001164r 2               CHECK_SIMPLE_VARIABLE:
001164r 2               .ifndef CONFIG_SMALL
001164r 2  B1 6A                lda     (INDEX),y
001166r 2  30 35                bmi     CHECK_BUMP
001168r 2               .endif
001168r 2  C8                   iny
001169r 2  B1 6A                lda     (INDEX),y
00116Br 2  10 30                bpl     CHECK_BUMP
00116Dr 2  C8                   iny
00116Er 2               
00116Er 2               ; ----------------------------------------------------------------------------
00116Er 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
00116Er 2               ; ----------------------------------------------------------------------------
00116Er 2               CHECK_VARIABLE:
00116Er 2  B1 6A                lda     (INDEX),y
001170r 2  F0 2B                beq     CHECK_BUMP
001172r 2  C8                   iny
001173r 2  B1 6A                lda     (INDEX),y
001175r 2  AA                   tax
001176r 2  C8                   iny
001177r 2  B1 6A                lda     (INDEX),y
001179r 2  C5 7C                cmp     FRETOP+1
00117Br 2  90 06                bcc     L33D5
00117Dr 2  D0 1E                bne     CHECK_BUMP
00117Fr 2  E4 7B                cpx     FRETOP
001181r 2  B0 1A                bcs     CHECK_BUMP
001183r 2               L33D5:
001183r 2  C5 A8                cmp     LOWTR+1
001185r 2  90 16                bcc     CHECK_BUMP
001187r 2  D0 04                bne     L33DF
001189r 2  E4 A7                cpx     LOWTR
00118Br 2  90 10                bcc     CHECK_BUMP
00118Dr 2               L33DF:
00118Dr 2  86 A7                stx     LOWTR
00118Fr 2  85 A8                sta     LOWTR+1
001191r 2  A5 6A                lda     INDEX
001193r 2  A6 6B                ldx     INDEX+1
001195r 2  85 96                sta     FNCNAM
001197r 2  86 97                stx     FNCNAM+1
001199r 2  A5 9B                lda     DSCLEN
00119Br 2  85 9D                sta     Z52
00119Dr 2               
00119Dr 2               ; ----------------------------------------------------------------------------
00119Dr 2               ; ADD (DSCLEN) TO PNTR IN INDEX
00119Dr 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00119Dr 2               ; ----------------------------------------------------------------------------
00119Dr 2               CHECK_BUMP:
00119Dr 2  A5 9B                lda     DSCLEN
00119Fr 2  18                   clc
0011A0r 2  65 6A                adc     INDEX
0011A2r 2  85 6A                sta     INDEX
0011A4r 2  90 02                bcc     L33FA
0011A6r 2  E6 6B                inc     INDEX+1
0011A8r 2               L33FA:
0011A8r 2  A6 6B                ldx     INDEX+1
0011AAr 2  A0 00                ldy     #$00
0011ACr 2  60                   rts
0011ADr 2               
0011ADr 2               ; ----------------------------------------------------------------------------
0011ADr 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
0011ADr 2               ; TO TOP AND GO BACK FOR ANOTHER
0011ADr 2               ; ----------------------------------------------------------------------------
0011ADr 2               MOVE_HIGHEST_STRING_TO_TOP:
0011ADr 2               .ifdef CONFIG_2
0011ADr 2  A5 97                lda     FNCNAM+1	; GC bugfix
0011AFr 2  05 96                ora     FNCNAM
0011B1r 2               .else
0011B1r 2                       ldx     FNCNAM+1
0011B1r 2               .endif
0011B1r 2  F0 F5                beq     L33FA
0011B3r 2  A5 9D                lda     Z52
0011B5r 2               .ifndef CONFIG_10A
0011B5r 2                       sbc     #$03
0011B5r 2               .else
0011B5r 2  29 04                and     #$04
0011B7r 2               .endif
0011B7r 2  4A                   lsr     a
0011B8r 2  A8                   tay
0011B9r 2  85 9D                sta     Z52
0011BBr 2  B1 96                lda     (FNCNAM),y
0011BDr 2  65 A7                adc     LOWTR
0011BFr 2  85 A2                sta     HIGHTR
0011C1r 2  A5 A8                lda     LOWTR+1
0011C3r 2  69 00                adc     #$00
0011C5r 2  85 A3                sta     HIGHTR+1
0011C7r 2  A5 7B                lda     FRETOP
0011C9r 2  A6 7C                ldx     FRETOP+1
0011CBr 2  85 A0                sta     HIGHDS
0011CDr 2  86 A1                stx     HIGHDS+1
0011CFr 2  20 rr rr             jsr     BLTU2
0011D2r 2  A4 9D                ldy     Z52
0011D4r 2  C8                   iny
0011D5r 2  A5 A0                lda     HIGHDS
0011D7r 2  91 96                sta     (FNCNAM),y
0011D9r 2  AA                   tax
0011DAr 2  E6 A1                inc     HIGHDS+1
0011DCr 2  A5 A1                lda     HIGHDS+1
0011DEr 2  C8                   iny
0011DFr 2  91 96                sta     (FNCNAM),y
0011E1r 2  4C rr rr             jmp     FINDHIGHESTSTRING
0011E4r 2               
0011E4r 2               ; ----------------------------------------------------------------------------
0011E4r 2               ; CONCATENATE TWO STRINGS
0011E4r 2               ; ----------------------------------------------------------------------------
0011E4r 2               CAT:
0011E4r 2  A5 AD                lda     FAC_LAST
0011E6r 2  48                   pha
0011E7r 2  A5 AC                lda     FAC_LAST-1
0011E9r 2  48                   pha
0011EAr 2  20 rr rr             jsr     FRM_ELEMENT
0011EDr 2  20 rr rr             jsr     CHKSTR
0011F0r 2  68                   pla
0011F1r 2  85 B7                sta     STRNG1
0011F3r 2  68                   pla
0011F4r 2  85 B8                sta     STRNG1+1
0011F6r 2  A0 00                ldy     #$00
0011F8r 2  B1 B7                lda     (STRNG1),y
0011FAr 2  18                   clc
0011FBr 2  71 AC                adc     (FAC_LAST-1),y
0011FDr 2  90 05                bcc     L3454
0011FFr 2  A2 1A                ldx     #ERR_STRLONG
001201r 2  4C rr rr             jmp     ERROR
001204r 2               L3454:
001204r 2  20 rr rr             jsr     STRINI
001207r 2  20 rr rr             jsr     MOVINS
00120Ar 2  A5 98                lda     DSCPTR
00120Cr 2  A4 99                ldy     DSCPTR+1
00120Er 2  20 rr rr             jsr     FRETMP
001211r 2  20 rr rr             jsr     MOVSTR1
001214r 2  A5 B7                lda     STRNG1
001216r 2  A4 B8                ldy     STRNG1+1
001218r 2  20 rr rr             jsr     FRETMP
00121Br 2  20 rr rr             jsr     PUTNEW
00121Er 2  4C rr rr             jmp     FRMEVL2
001221r 2               
001221r 2               ; ----------------------------------------------------------------------------
001221r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
001221r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
001221r 2               ; ----------------------------------------------------------------------------
001221r 2               MOVINS:
001221r 2  A0 00                ldy     #$00
001223r 2  B1 B7                lda     (STRNG1),y
001225r 2  48                   pha
001226r 2  C8                   iny
001227r 2  B1 B7                lda     (STRNG1),y
001229r 2  AA                   tax
00122Ar 2  C8                   iny
00122Br 2  B1 B7                lda     (STRNG1),y
00122Dr 2  A8                   tay
00122Er 2  68                   pla
00122Fr 2               
00122Fr 2               ; ----------------------------------------------------------------------------
00122Fr 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
00122Fr 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
00122Fr 2               ; ----------------------------------------------------------------------------
00122Fr 2               MOVSTR:
00122Fr 2  86 6A                stx     INDEX
001231r 2  84 6B                sty     INDEX+1
001233r 2               MOVSTR1:
001233r 2  A8                   tay
001234r 2  F0 0A                beq     L3490
001236r 2  48                   pha
001237r 2               L3487:
001237r 2  88                   dey
001238r 2  B1 6A                lda     (INDEX),y
00123Ar 2  91 7D                sta     (FRESPC),y
00123Cr 2  98                   tya
00123Dr 2  D0 F8                bne     L3487
00123Fr 2  68                   pla
001240r 2               L3490:
001240r 2  18                   clc
001241r 2  65 7D                adc     FRESPC
001243r 2  85 7D                sta     FRESPC
001245r 2  90 02                bcc     L3499
001247r 2  E6 7E                inc     FRESPC+1
001249r 2               L3499:
001249r 2  60                   rts
00124Ar 2               
00124Ar 2               ; ----------------------------------------------------------------------------
00124Ar 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
00124Ar 2               ; ----------------------------------------------------------------------------
00124Ar 2               FRESTR:
00124Ar 2  20 rr rr             jsr     CHKSTR
00124Dr 2               
00124Dr 2               ; ----------------------------------------------------------------------------
00124Dr 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
00124Dr 2               ; A TEMPORARY STRING, RELEASE IT.
00124Dr 2               ; ----------------------------------------------------------------------------
00124Dr 2               FREFAC:
00124Dr 2  A5 AC                lda     FAC_LAST-1
00124Fr 2  A4 AD                ldy     FAC_LAST
001251r 2               
001251r 2               ; ----------------------------------------------------------------------------
001251r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
001251r 2               ; A TEMPORARY STRING, RELEASE IT.
001251r 2               ; ----------------------------------------------------------------------------
001251r 2               FRETMP:
001251r 2  85 6A                sta     INDEX
001253r 2  84 6B                sty     INDEX+1
001255r 2  20 rr rr             jsr     FRETMS
001258r 2  08                   php
001259r 2  A0 00                ldy     #$00
00125Br 2  B1 6A                lda     (INDEX),y
00125Dr 2  48                   pha
00125Er 2  C8                   iny
00125Fr 2  B1 6A                lda     (INDEX),y
001261r 2  AA                   tax
001262r 2  C8                   iny
001263r 2  B1 6A                lda     (INDEX),y
001265r 2  A8                   tay
001266r 2  68                   pla
001267r 2  28                   plp
001268r 2  D0 13                bne     L34CD
00126Ar 2  C4 7C                cpy     FRETOP+1
00126Cr 2  D0 0F                bne     L34CD
00126Er 2  E4 7B                cpx     FRETOP
001270r 2  D0 0B                bne     L34CD
001272r 2  48                   pha
001273r 2  18                   clc
001274r 2  65 7B                adc     FRETOP
001276r 2  85 7B                sta     FRETOP
001278r 2  90 02                bcc     L34CC
00127Ar 2  E6 7C                inc     FRETOP+1
00127Cr 2               L34CC:
00127Cr 2  68                   pla
00127Dr 2               L34CD:
00127Dr 2  86 6A                stx     INDEX
00127Fr 2  84 6B                sty     INDEX+1
001281r 2  60                   rts
001282r 2               
001282r 2               ; ----------------------------------------------------------------------------
001282r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001282r 2               ; ----------------------------------------------------------------------------
001282r 2               FRETMS:
001282r 2               .ifdef KBD
001282r 2                       cpy     #$00
001282r 2               .else
001282r 2  C4 60                cpy     LASTPT+1
001284r 2               .endif
001284r 2  D0 0C                bne     L34E2
001286r 2  C5 5F                cmp     LASTPT
001288r 2  D0 08                bne     L34E2
00128Ar 2  85 5E                sta     TEMPPT
00128Cr 2  E9 03                sbc     #$03
00128Er 2  85 5F                sta     LASTPT
001290r 2  A0 00                ldy     #$00
001292r 2               L34E2:
001292r 2  60                   rts
001293r 2               
001293r 2               ; ----------------------------------------------------------------------------
001293r 2               ; "CHR$" FUNCTION
001293r 2               ; ----------------------------------------------------------------------------
001293r 2               CHRSTR:
001293r 2  20 rr rr             jsr     CONINT
001296r 2  8A                   txa
001297r 2  48                   pha
001298r 2  A9 01                lda     #$01
00129Ar 2  20 rr rr             jsr     STRSPA
00129Dr 2  68                   pla
00129Er 2  A0 00                ldy     #$00
0012A0r 2  91 AA                sta     (FAC+1),y
0012A2r 2  68                   pla
0012A3r 2  68                   pla
0012A4r 2  4C rr rr             jmp     PUTNEW
0012A7r 2               
0012A7r 2               ; ----------------------------------------------------------------------------
0012A7r 2               ; "LEFT$" FUNCTION
0012A7r 2               ; ----------------------------------------------------------------------------
0012A7r 2               LEFTSTR:
0012A7r 2  20 rr rr             jsr     SUBSTRING_SETUP
0012AAr 2  D1 98                cmp     (DSCPTR),y
0012ACr 2  98                   tya
0012ADr 2               SUBSTRING1:
0012ADr 2  90 04                bcc     L3503
0012AFr 2  B1 98                lda     (DSCPTR),y
0012B1r 2  AA                   tax
0012B2r 2  98                   tya
0012B3r 2               L3503:
0012B3r 2  48                   pha
0012B4r 2               SUBSTRING2:
0012B4r 2  8A                   txa
0012B5r 2               SUBSTRING3:
0012B5r 2  48                   pha
0012B6r 2  20 rr rr             jsr     STRSPA
0012B9r 2  A5 98                lda     DSCPTR
0012BBr 2  A4 99                ldy     DSCPTR+1
0012BDr 2  20 rr rr             jsr     FRETMP
0012C0r 2  68                   pla
0012C1r 2  A8                   tay
0012C2r 2  68                   pla
0012C3r 2  18                   clc
0012C4r 2  65 6A                adc     INDEX
0012C6r 2  85 6A                sta     INDEX
0012C8r 2  90 02                bcc     L351C
0012CAr 2  E6 6B                inc     INDEX+1
0012CCr 2               L351C:
0012CCr 2  98                   tya
0012CDr 2  20 rr rr             jsr     MOVSTR1
0012D0r 2  4C rr rr             jmp     PUTNEW
0012D3r 2               
0012D3r 2               ; ----------------------------------------------------------------------------
0012D3r 2               ; "RIGHT$" FUNCTION
0012D3r 2               ; ----------------------------------------------------------------------------
0012D3r 2               RIGHTSTR:
0012D3r 2  20 rr rr             jsr     SUBSTRING_SETUP
0012D6r 2  18                   clc
0012D7r 2  F1 98                sbc     (DSCPTR),y
0012D9r 2  49 FF                eor     #$FF
0012DBr 2  4C rr rr             jmp     SUBSTRING1
0012DEr 2               
0012DEr 2               ; ----------------------------------------------------------------------------
0012DEr 2               ; "MID$" FUNCTION
0012DEr 2               ; ----------------------------------------------------------------------------
0012DEr 2               MIDSTR:
0012DEr 2  A9 FF                lda     #$FF
0012E0r 2  85 AD                sta     FAC_LAST
0012E2r 2  20 C5 00             jsr     CHRGOT
0012E5r 2  C9 29                cmp     #$29
0012E7r 2  F0 06                beq     L353F
0012E9r 2  20 rr rr             jsr     CHKCOM
0012ECr 2  20 rr rr             jsr     GETBYT
0012EFr 2               L353F:
0012EFr 2  20 rr rr             jsr     SUBSTRING_SETUP
0012F2r 2               .ifdef CONFIG_2
0012F2r 2  F0 4B                beq     GOIQ
0012F4r 2               .endif
0012F4r 2  CA                   dex
0012F5r 2  8A                   txa
0012F6r 2  48                   pha
0012F7r 2  18                   clc
0012F8r 2  A2 00                ldx     #$00
0012FAr 2  F1 98                sbc     (DSCPTR),y
0012FCr 2  B0 B6                bcs     SUBSTRING2
0012FEr 2  49 FF                eor     #$FF
001300r 2  C5 AD                cmp     FAC_LAST
001302r 2  90 B1                bcc     SUBSTRING3
001304r 2  A5 AD                lda     FAC_LAST
001306r 2  B0 AD                bcs     SUBSTRING3
001308r 2               
001308r 2               ; ----------------------------------------------------------------------------
001308r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
001308r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
001308r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
001308r 2               ; ----------------------------------------------------------------------------
001308r 2               SUBSTRING_SETUP:
001308r 2  20 rr rr             jsr     CHKCLS
00130Br 2  68                   pla
00130Cr 2               .ifndef CONFIG_11
00130Cr 2                       sta     JMPADRS+1
00130Cr 2                       pla
00130Cr 2                       sta     JMPADRS+2
00130Cr 2               .else
00130Cr 2  A8                   tay
00130Dr 2  68                   pla
00130Er 2  85 9D                sta     Z52
001310r 2               .endif
001310r 2  68                   pla
001311r 2  68                   pla
001312r 2  68                   pla
001313r 2  AA                   tax
001314r 2  68                   pla
001315r 2  85 98                sta     DSCPTR
001317r 2  68                   pla
001318r 2  85 99                sta     DSCPTR+1
00131Ar 2               .ifdef CONFIG_11
00131Ar 2  A5 9D                lda     Z52
00131Cr 2  48                   pha
00131Dr 2  98                   tya
00131Er 2  48                   pha
00131Fr 2               .endif
00131Fr 2  A0 00                ldy     #$00
001321r 2  8A                   txa
001322r 2               .ifndef CONFIG_2
001322r 2                       beq     GOIQ
001322r 2               .endif
001322r 2               .ifndef CONFIG_11
001322r 2                       inc     JMPADRS+1
001322r 2                       jmp     (JMPADRS+1)
001322r 2               .else
001322r 2  60                   rts
001323r 2               .endif
001323r 2               
001323r 2               ; ----------------------------------------------------------------------------
001323r 2               ; "LEN" FUNCTION
001323r 2               ; ----------------------------------------------------------------------------
001323r 2               LEN:
001323r 2  20 rr rr             jsr     GETSTR
001326r 2               SNGFLT1:
001326r 2  4C rr rr             jmp     SNGFLT
001329r 2               
001329r 2               ; ----------------------------------------------------------------------------
001329r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
001329r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
001329r 2               ; ----------------------------------------------------------------------------
001329r 2               GETSTR:
001329r 2  20 rr rr             jsr     FRESTR
00132Cr 2  A2 00                ldx     #$00
00132Er 2  86 0A                stx     VALTYP
001330r 2  A8                   tay
001331r 2  60                   rts
001332r 2               
001332r 2               ; ----------------------------------------------------------------------------
001332r 2               ; "ASC" FUNCTION
001332r 2               ; ----------------------------------------------------------------------------
001332r 2               ASC:
001332r 2  20 rr rr             jsr     GETSTR
001335r 2  F0 08                beq     GOIQ
001337r 2  A0 00                ldy     #$00
001339r 2  B1 6A                lda     (INDEX),y
00133Br 2  A8                   tay
00133Cr 2               .ifndef CONFIG_11A
00133Cr 2                       jmp     SNGFLT1
00133Cr 2               .else
00133Cr 2  4C rr rr             jmp     SNGFLT
00133Fr 2               .endif
00133Fr 2               ; ----------------------------------------------------------------------------
00133Fr 2               GOIQ:
00133Fr 2  4C rr rr             jmp     IQERR
001342r 2               
001342r 2               ; ----------------------------------------------------------------------------
001342r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
001342r 2               ; TO SINGLE BYTE IN X-REG
001342r 2               ; ----------------------------------------------------------------------------
001342r 2               GTBYTC:
001342r 2  20 BF 00             jsr     CHRGET
001345r 2               
001345r 2               ; ----------------------------------------------------------------------------
001345r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
001345r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
001345r 2               ; ----------------------------------------------------------------------------
001345r 2               GETBYT:
001345r 2  20 rr rr             jsr     FRMNUM
001348r 2               
001348r 2               ; ----------------------------------------------------------------------------
001348r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
001348r 2               ; ----------------------------------------------------------------------------
001348r 2               CONINT:
001348r 2  20 rr rr             jsr     MKINT
00134Br 2  A6 AC                ldx     FAC_LAST-1
00134Dr 2  D0 F0                bne     GOIQ
00134Fr 2  A6 AD                ldx     FAC_LAST
001351r 2  4C C5 00             jmp     CHRGOT
001354r 2               
001354r 2               ; ----------------------------------------------------------------------------
001354r 2               ; "VAL" FUNCTION
001354r 2               ; ----------------------------------------------------------------------------
001354r 2               VAL:
001354r 2  20 rr rr             jsr     GETSTR
001357r 2  D0 03                bne     L35AC
001359r 2  4C rr rr             jmp     ZERO_FAC
00135Cr 2               L35AC:
00135Cr 2  A6 C6                ldx     TXTPTR
00135Er 2  A4 C7                ldy     TXTPTR+1
001360r 2  86 B9                stx     STRNG2
001362r 2  84 BA                sty     STRNG2+1
001364r 2  A6 6A                ldx     INDEX
001366r 2  86 C6                stx     TXTPTR
001368r 2  18                   clc
001369r 2  65 6A                adc     INDEX
00136Br 2  85 6C                sta     DEST
00136Dr 2  A6 6B                ldx     INDEX+1
00136Fr 2  86 C7                stx     TXTPTR+1
001371r 2  90 01                bcc     L35C4
001373r 2  E8                   inx
001374r 2               L35C4:
001374r 2  86 6D                stx     DEST+1
001376r 2  A0 00                ldy     #$00
001378r 2  B1 6C                lda     (DEST),y
00137Ar 2  48                   pha
00137Br 2  A9 00                lda     #$00
00137Dr 2  91 6C                sta     (DEST),y
00137Fr 2  20 C5 00             jsr     CHRGOT
001382r 2  20 rr rr             jsr     FIN
001385r 2  68                   pla
001386r 2  A0 00                ldy     #$00
001388r 2  91 6C                sta     (DEST),y
00138Ar 2               
00138Ar 2               ; ----------------------------------------------------------------------------
00138Ar 2               ; COPY STRNG2 INTO TXTPTR
00138Ar 2               ; ----------------------------------------------------------------------------
00138Ar 2               POINT:
00138Ar 2  A6 B9                ldx     STRNG2
00138Cr 2  A4 BA                ldy     STRNG2+1
00138Er 2  86 C6                stx     TXTPTR
001390r 2  84 C7                sty     TXTPTR+1
001392r 2  60                   rts
001393r 2               
001393r 2               
001393r 1               .include "misc3.s"
001393r 2               ; KBD specific patches
001393r 2               
001393r 2               .segment "CODE"
001393r 2               
001393r 2               .ifdef KBD
001393r 2               VARTAB_MINUS_2_TO_AY:
001393r 2                       lda     VARTAB
001393r 2                       sec
001393r 2                       sbc     #$02
001393r 2                       ldy     VARTAB+1
001393r 2                       bcs     LF42C
001393r 2                       dey
001393r 2               LF42C:
001393r 2                       rts
001393r 2               
001393r 2               ; ----------------------------------------------------------------------------
001393r 2               GET_UPPER:
001393r 2                       lda     INPUTBUFFERX,x
001393r 2               LF430:
001393r 2                       cmp     #'a'
001393r 2                       bcc     LF43A
001393r 2                       cmp     #'z'+1
001393r 2                       bcs     LF43A
001393r 2               LF438:
001393r 2                       sbc     #$1F
001393r 2               LF43A:
001393r 2                       rts
001393r 2               
001393r 2               ; ----------------------------------------------------------------------------
001393r 2               GETLN:
001393r 2                       ldx     #$5D
001393r 2               LF43D:
001393r 2                       txa
001393r 2                       and     #$7F
001393r 2                       cmp     $0340
001393r 2                       beq     LF44D
001393r 2                       sta     $0340
001393r 2                       lda     #$03
001393r 2                       jsr     LDE48
001393r 2               LF44D:
001393r 2                       jsr     LDE7F
001393r 2                       bne     RTS4
001393r 2                       cpx     #$80
001393r 2                       bcc     LF44D
001393r 2               RTS4:
001393r 2                       rts
001393r 2               
001393r 2               ; ----------------------------------------------------------------------------
001393r 2               LF457:
001393r 2                       lda     TXTTAB
001393r 2                       ldx     TXTTAB+1
001393r 2               LF45B:
001393r 2                       sta     JMPADRS+1
001393r 2                       stx     JMPADRS+2
001393r 2                       ldy     #$01
001393r 2                       lda     (JMPADRS+1),y
001393r 2                       beq     LF438
001393r 2                       iny
001393r 2                       iny
001393r 2                       lda     (JMPADRS+1),y
001393r 2                       dey
001393r 2                       cmp     LINNUM+1
001393r 2                       bne     LF472
001393r 2                       lda     (JMPADRS+1),y
001393r 2                       cmp     LINNUM
001393r 2               LF472:
001393r 2                       bcs     LF43A
001393r 2                       dey
001393r 2                       lda     (JMPADRS+1),y
001393r 2                       tax
001393r 2                       dey
001393r 2                       lda     (JMPADRS+1),y
001393r 2                       bcc     LF45B
001393r 2               LF47D:
001393r 2                       jmp     (JMPADRS+1)
001393r 2               .endif
001393r 2               
001393r 1               .include "poke.s"
001393r 2               .segment "CODE"
001393r 2               
001393r 2               .ifndef CONFIG_NO_POKE
001393r 2               ; ----------------------------------------------------------------------------
001393r 2               ; EVALUATE "EXP1,EXP2"
001393r 2               ;
001393r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
001393r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
001393r 2               ; ----------------------------------------------------------------------------
001393r 2               GTNUM:
001393r 2  20 rr rr             jsr     FRMNUM
001396r 2  20 rr rr             jsr     GETADR
001399r 2               
001399r 2               ; ----------------------------------------------------------------------------
001399r 2               ; EVALUATE ",EXPRESSION"
001399r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001399r 2               ; ----------------------------------------------------------------------------
001399r 2               COMBYTE:
001399r 2  20 rr rr             jsr     CHKCOM
00139Cr 2  4C rr rr             jmp     GETBYT
00139Fr 2               
00139Fr 2               ; ----------------------------------------------------------------------------
00139Fr 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00139Fr 2               ; ----------------------------------------------------------------------------
00139Fr 2               GETADR:
00139Fr 2  A5 AE                lda     FACSIGN
0013A1r 2                 .ifdef APPLE
0013A1r 2                       nop ; PATCH
0013A1r 2                       nop
0013A1r 2                 .else
0013A1r 2  30 9C                bmi     GOIQ
0013A3r 2                 .endif
0013A3r 2  A5 A9                lda     FAC
0013A5r 2  C9 91                cmp     #$91
0013A7r 2  B0 96                bcs     GOIQ
0013A9r 2  20 rr rr             jsr     QINT
0013ACr 2  A5 AC                lda     FAC_LAST-1
0013AEr 2  A4 AD                ldy     FAC_LAST
0013B0r 2  84 14                sty     LINNUM
0013B2r 2  85 15                sta     LINNUM+1
0013B4r 2  60                   rts
0013B5r 2               
0013B5r 2               ; ----------------------------------------------------------------------------
0013B5r 2               ; "PEEK" FUNCTION
0013B5r 2               ; ----------------------------------------------------------------------------
0013B5r 2               PEEK:
0013B5r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0013B5r 2  A5 15                lda     LINNUM+1
0013B7r 2  48                   pha
0013B8r 2  A5 14                lda     LINNUM
0013BAr 2  48                   pha
0013BBr 2               .endif
0013BBr 2  20 rr rr             jsr     GETADR
0013BEr 2  A0 00                ldy     #$00
0013C0r 2               .ifdef CBM1
0013C0r 2               ; disallow PEEK between $C000 and $DFFF
0013C0r 2                       cmp     #$C0
0013C0r 2                       bcc     LD6F3
0013C0r 2                       cmp     #$E1
0013C0r 2                       bcc     LD6F6
0013C0r 2               LD6F3:
0013C0r 2               .endif
0013C0r 2               .ifdef CBM2
0013C0r 2               		nop ; patch that disables the compares above
0013C0r 2               		nop
0013C0r 2               		nop
0013C0r 2               		nop
0013C0r 2               		nop
0013C0r 2               		nop
0013C0r 2               		nop
0013C0r 2               		nop
0013C0r 2               .endif
0013C0r 2  B1 14                lda     (LINNUM),y
0013C2r 2  A8                   tay
0013C3r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0013C3r 2  68                   pla
0013C4r 2  85 14                sta     LINNUM
0013C6r 2  68                   pla
0013C7r 2  85 15                sta     LINNUM+1
0013C9r 2               .endif
0013C9r 2               LD6F6:
0013C9r 2  4C rr rr             jmp     SNGFLT
0013CCr 2               
0013CCr 2               ; ----------------------------------------------------------------------------
0013CCr 2               ; "POKE" STATEMENT
0013CCr 2               ; ----------------------------------------------------------------------------
0013CCr 2               POKE:
0013CCr 2  20 rr rr             jsr     GTNUM
0013CFr 2  8A                   txa
0013D0r 2  A0 00                ldy     #$00
0013D2r 2  91 14                sta     (LINNUM),y
0013D4r 2  60                   rts
0013D5r 2               
0013D5r 2               ; ----------------------------------------------------------------------------
0013D5r 2               ; "WAIT" STATEMENT
0013D5r 2               ; ----------------------------------------------------------------------------
0013D5r 2               WAIT:
0013D5r 2  20 rr rr             jsr     GTNUM
0013D8r 2  86 91                stx     FORPNT
0013DAr 2  A2 00                ldx     #$00
0013DCr 2  20 C5 00             jsr     CHRGOT
0013DFr 2               .ifdef CONFIG_EASTER_EGG
0013DFr 2                       beq     EASTER_EGG
0013DFr 2               .else
0013DFr 2  F0 03                beq     L3628
0013E1r 2               .endif
0013E1r 2  20 rr rr             jsr     COMBYTE
0013E4r 2               L3628:
0013E4r 2  86 92                stx     FORPNT+1
0013E6r 2  A0 00                ldy     #$00
0013E8r 2               L362C:
0013E8r 2  B1 14                lda     (LINNUM),y
0013EAr 2  45 92                eor     FORPNT+1
0013ECr 2  25 91                and     FORPNT
0013EEr 2  F0 F8                beq     L362C
0013F0r 2               RTS3:
0013F0r 2  60                   rts
0013F1r 2               .endif
0013F1r 2               
0013F1r 1               .include "float.s"
0013F1r 2               .segment "CODE"
0013F1r 2               
0013F1r 2               TEMP1X = TEMP1+(5-BYTES_FP)
0013F1r 2               
0013F1r 2               ; ----------------------------------------------------------------------------
0013F1r 2               ; ADD 0.5 TO FAC
0013F1r 2               ; ----------------------------------------------------------------------------
0013F1r 2               FADDH:
0013F1r 2  A9 rr                lda     #<CON_HALF
0013F3r 2  A0 rr                ldy     #>CON_HALF
0013F5r 2  4C rr rr             jmp     FADD
0013F8r 2               
0013F8r 2               ; ----------------------------------------------------------------------------
0013F8r 2               ; FAC = (Y,A) - FAC
0013F8r 2               ; ----------------------------------------------------------------------------
0013F8r 2               FSUB:
0013F8r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0013FBr 2               
0013FBr 2               ; ----------------------------------------------------------------------------
0013FBr 2               ; FAC = ARG - FAC
0013FBr 2               ; ----------------------------------------------------------------------------
0013FBr 2               FSUBT:
0013FBr 2  A5 AE                lda     FACSIGN
0013FDr 2  49 FF                eor     #$FF
0013FFr 2  85 AE                sta     FACSIGN
001401r 2  45 B6                eor     ARGSIGN
001403r 2  85 B7                sta     SGNCPR
001405r 2  A5 A9                lda     FAC
001407r 2  4C rr rr             jmp     FADDT
00140Ar 2               
00140Ar 2               ; ----------------------------------------------------------------------------
00140Ar 2               ; Commodore BASIC V2 Easter Egg
00140Ar 2               ; ----------------------------------------------------------------------------
00140Ar 2               .ifdef CONFIG_EASTER_EGG
00140Ar 2               EASTER_EGG:
00140Ar 2                       lda     LINNUM
00140Ar 2                       cmp     #<6502
00140Ar 2                       bne     L3628
00140Ar 2                       lda     LINNUM+1
00140Ar 2                       sbc     #>6502
00140Ar 2                       bne     L3628
00140Ar 2                       sta     LINNUM
00140Ar 2                       tay
00140Ar 2                       lda     #$80
00140Ar 2                       sta     LINNUM+1
00140Ar 2               LD758:
00140Ar 2                       ldx     #$0A
00140Ar 2               LD75A:
00140Ar 2                       lda     MICROSOFT-1,x
00140Ar 2                       and     #$3F
00140Ar 2                       sta     (LINNUM),y
00140Ar 2                       iny
00140Ar 2                       bne     LD766
00140Ar 2                       inc     LINNUM+1
00140Ar 2               LD766:
00140Ar 2                       dex
00140Ar 2                       bne     LD75A
00140Ar 2                       dec     FORPNT
00140Ar 2                       bne     LD758
00140Ar 2                       rts
00140Ar 2               .endif
00140Ar 2               
00140Ar 2               ; ----------------------------------------------------------------------------
00140Ar 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
00140Ar 2               ; ----------------------------------------------------------------------------
00140Ar 2               FADD1:
00140Ar 2  20 rr rr             jsr     SHIFT_RIGHT
00140Dr 2  90 3C                bcc     FADD3
00140Fr 2               
00140Fr 2               ; ----------------------------------------------------------------------------
00140Fr 2               ; FAC = (Y,A) + FAC
00140Fr 2               ; ----------------------------------------------------------------------------
00140Fr 2               FADD:
00140Fr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001412r 2               
001412r 2               ; ----------------------------------------------------------------------------
001412r 2               ; FAC = ARG + FAC
001412r 2               ; ----------------------------------------------------------------------------
001412r 2               FADDT:
001412r 2  D0 03                bne     L365B
001414r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
001417r 2               L365B:
001417r 2  A6 B8                ldx     FACEXTENSION
001419r 2  86 9E                stx     ARGEXTENSION
00141Br 2  A2 B1                ldx     #ARG
00141Dr 2  A5 B1                lda     ARG
00141Fr 2               FADD2:
00141Fr 2  A8                   tay
001420r 2               .ifdef KBD
001420r 2                       beq     RTS4
001420r 2               .else
001420r 2  F0 CE                beq     RTS3
001422r 2               .endif
001422r 2  38                   sec
001423r 2  E5 A9                sbc     FAC
001425r 2  F0 24                beq     FADD3
001427r 2  90 12                bcc     L367F
001429r 2  84 A9                sty     FAC
00142Br 2  A4 B6                ldy     ARGSIGN
00142Dr 2  84 AE                sty     FACSIGN
00142Fr 2  49 FF                eor     #$FF
001431r 2  69 00                adc     #$00
001433r 2  A0 00                ldy     #$00
001435r 2  84 9E                sty     ARGEXTENSION
001437r 2  A2 A9                ldx     #FAC
001439r 2  D0 04                bne     L3683
00143Br 2               L367F:
00143Br 2  A0 00                ldy     #$00
00143Dr 2  84 B8                sty     FACEXTENSION
00143Fr 2               L3683:
00143Fr 2  C9 F9                cmp     #$F9
001441r 2  30 C7                bmi     FADD1
001443r 2  A8                   tay
001444r 2  A5 B8                lda     FACEXTENSION
001446r 2  56 01                lsr     1,x
001448r 2  20 rr rr             jsr     SHIFT_RIGHT4
00144Br 2               FADD3:
00144Br 2  24 B7                bit     SGNCPR
00144Dr 2  10 57                bpl     FADD4
00144Fr 2  A0 A9                ldy     #FAC
001451r 2  E0 B1                cpx     #ARG
001453r 2  F0 02                beq     L369B
001455r 2  A0 B1                ldy     #ARG
001457r 2               L369B:
001457r 2  38                   sec
001458r 2  49 FF                eor     #$FF
00145Ar 2  65 9E                adc     ARGEXTENSION
00145Cr 2  85 B8                sta     FACEXTENSION
00145Er 2               .ifndef CONFIG_SMALL
00145Er 2  B9 04 00             lda     4,y
001461r 2  F5 04                sbc     4,x
001463r 2  85 AD                sta     FAC+4
001465r 2               .endif
001465r 2  B9 03 00             lda     3,y
001468r 2  F5 03                sbc     3,x
00146Ar 2  85 AC                sta     FAC+3
00146Cr 2  B9 02 00             lda     2,y
00146Fr 2  F5 02                sbc     2,x
001471r 2  85 AB                sta     FAC+2
001473r 2  B9 01 00             lda     1,y
001476r 2  F5 01                sbc     1,x
001478r 2  85 AA                sta     FAC+1
00147Ar 2               
00147Ar 2               ; ----------------------------------------------------------------------------
00147Ar 2               ; NORMALIZE VALUE IN FAC
00147Ar 2               ; ----------------------------------------------------------------------------
00147Ar 2               NORMALIZE_FAC1:
00147Ar 2  B0 03                bcs     NORMALIZE_FAC2
00147Cr 2  20 rr rr             jsr     COMPLEMENT_FAC
00147Fr 2               NORMALIZE_FAC2:
00147Fr 2  A0 00                ldy     #$00
001481r 2  98                   tya
001482r 2  18                   clc
001483r 2               L36C7:
001483r 2  A6 AA                ldx     FAC+1
001485r 2  D0 4A                bne     NORMALIZE_FAC4
001487r 2  A6 AB                ldx     FAC+2
001489r 2  86 AA                stx     FAC+1
00148Br 2  A6 AC                ldx     FAC+3
00148Dr 2  86 AB                stx     FAC+2
00148Fr 2               .ifdef CONFIG_SMALL
00148Fr 2                       ldx     FACEXTENSION
00148Fr 2                       stx     FAC+3
00148Fr 2               .else
00148Fr 2  A6 AD                ldx     FAC+4
001491r 2  86 AC                stx     FAC+3
001493r 2  A6 B8                ldx     FACEXTENSION
001495r 2  86 AD                stx     FAC+4
001497r 2               .endif
001497r 2  84 B8                sty     FACEXTENSION
001499r 2  69 08                adc     #$08
00149Br 2               .ifdef CONFIG_2B
00149Br 2               ; bugfix?
00149Br 2               ; fix does not exist on AppleSoft 2
00149Br 2                       cmp     #(MANTISSA_BYTES+1)*8
00149Br 2               .else
00149Br 2  C9 20                cmp     #MANTISSA_BYTES*8
00149Dr 2               .endif
00149Dr 2  D0 E4                bne     L36C7
00149Fr 2               
00149Fr 2               ; ----------------------------------------------------------------------------
00149Fr 2               ; SET FAC = 0
00149Fr 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00149Fr 2               ; ----------------------------------------------------------------------------
00149Fr 2               ZERO_FAC:
00149Fr 2  A9 00                lda     #$00
0014A1r 2               STA_IN_FAC_SIGN_AND_EXP:
0014A1r 2  85 A9                sta     FAC
0014A3r 2               STA_IN_FAC_SIGN:
0014A3r 2  85 AE                sta     FACSIGN
0014A5r 2  60                   rts
0014A6r 2               
0014A6r 2               ; ----------------------------------------------------------------------------
0014A6r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
0014A6r 2               ; ----------------------------------------------------------------------------
0014A6r 2               FADD4:
0014A6r 2  65 9E                adc     ARGEXTENSION
0014A8r 2  85 B8                sta     FACEXTENSION
0014AAr 2               .ifndef CONFIG_SMALL
0014AAr 2  A5 AD                lda     FAC+4
0014ACr 2  65 B5                adc     ARG+4
0014AEr 2  85 AD                sta     FAC+4
0014B0r 2               .endif
0014B0r 2  A5 AC                lda     FAC+3
0014B2r 2  65 B4                adc     ARG+3
0014B4r 2  85 AC                sta     FAC+3
0014B6r 2  A5 AB                lda     FAC+2
0014B8r 2  65 B3                adc     ARG+2
0014BAr 2  85 AB                sta     FAC+2
0014BCr 2  A5 AA                lda     FAC+1
0014BEr 2  65 B2                adc     ARG+1
0014C0r 2  85 AA                sta     FAC+1
0014C2r 2  4C rr rr             jmp     NORMALIZE_FAC5
0014C5r 2               
0014C5r 2               ; ----------------------------------------------------------------------------
0014C5r 2               ; FINISH NORMALIZING FAC
0014C5r 2               ; ----------------------------------------------------------------------------
0014C5r 2               NORMALIZE_FAC3:
0014C5r 2  69 01                adc     #$01
0014C7r 2  06 B8                asl     FACEXTENSION
0014C9r 2               .ifndef CONFIG_SMALL
0014C9r 2  26 AD                rol     FAC+4
0014CBr 2               .endif
0014CBr 2  26 AC                rol     FAC+3
0014CDr 2  26 AB                rol     FAC+2
0014CFr 2  26 AA                rol     FAC+1
0014D1r 2               NORMALIZE_FAC4:
0014D1r 2  10 F2                bpl     NORMALIZE_FAC3
0014D3r 2  38                   sec
0014D4r 2  E5 A9                sbc     FAC
0014D6r 2  B0 C7                bcs     ZERO_FAC
0014D8r 2  49 FF                eor     #$FF
0014DAr 2  69 01                adc     #$01
0014DCr 2  85 A9                sta     FAC
0014DEr 2               NORMALIZE_FAC5:
0014DEr 2  90 0E                bcc     L3764
0014E0r 2               NORMALIZE_FAC6:
0014E0r 2  E6 A9                inc     FAC
0014E2r 2  F0 42                beq     OVERFLOW
0014E4r 2               .ifndef CONFIG_ROR_WORKAROUND
0014E4r 2  66 AA                ror     FAC+1
0014E6r 2  66 AB                ror     FAC+2
0014E8r 2  66 AC                ror     FAC+3
0014EAr 2                 .ifndef CONFIG_SMALL
0014EAr 2  66 AD                ror     FAC+4
0014ECr 2                 .endif
0014ECr 2  66 B8                ror     FACEXTENSION
0014EEr 2               .else
0014EEr 2                       lda     #$00
0014EEr 2                       bcc     L372E
0014EEr 2                       lda     #$80
0014EEr 2               L372E:
0014EEr 2                       lsr     FAC+1
0014EEr 2                       ora     FAC+1
0014EEr 2                       sta     FAC+1
0014EEr 2                       lda     #$00
0014EEr 2                       bcc     L373A
0014EEr 2                       lda     #$80
0014EEr 2               L373A:
0014EEr 2                       lsr     FAC+2
0014EEr 2                       ora     FAC+2
0014EEr 2                       sta     FAC+2
0014EEr 2                       lda     #$00
0014EEr 2                       bcc     L3746
0014EEr 2                       lda     #$80
0014EEr 2               L3746:
0014EEr 2                       lsr     FAC+3
0014EEr 2                       ora     FAC+3
0014EEr 2                       sta     FAC+3
0014EEr 2                       lda     #$00
0014EEr 2                       bcc     L3752
0014EEr 2                       lda     #$80
0014EEr 2               L3752:
0014EEr 2                       lsr     FAC+4
0014EEr 2                       ora     FAC+4
0014EEr 2                       sta     FAC+4
0014EEr 2                       lda     #$00
0014EEr 2                       bcc     L375E
0014EEr 2                       lda     #$80
0014EEr 2               L375E:
0014EEr 2                       lsr     FACEXTENSION
0014EEr 2                       ora     FACEXTENSION
0014EEr 2                       sta     FACEXTENSION
0014EEr 2               .endif
0014EEr 2               L3764:
0014EEr 2  60                   rts
0014EFr 2               
0014EFr 2               ; ----------------------------------------------------------------------------
0014EFr 2               ; 2'S COMPLEMENT OF FAC
0014EFr 2               ; ----------------------------------------------------------------------------
0014EFr 2               COMPLEMENT_FAC:
0014EFr 2  A5 AE                lda     FACSIGN
0014F1r 2  49 FF                eor     #$FF
0014F3r 2  85 AE                sta     FACSIGN
0014F5r 2               
0014F5r 2               ; ----------------------------------------------------------------------------
0014F5r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
0014F5r 2               ; ----------------------------------------------------------------------------
0014F5r 2               COMPLEMENT_FAC_MANTISSA:
0014F5r 2  A5 AA                lda     FAC+1
0014F7r 2  49 FF                eor     #$FF
0014F9r 2  85 AA                sta     FAC+1
0014FBr 2  A5 AB                lda     FAC+2
0014FDr 2  49 FF                eor     #$FF
0014FFr 2  85 AB                sta     FAC+2
001501r 2  A5 AC                lda     FAC+3
001503r 2  49 FF                eor     #$FF
001505r 2  85 AC                sta     FAC+3
001507r 2               .ifndef CONFIG_SMALL
001507r 2  A5 AD                lda     FAC+4
001509r 2  49 FF                eor     #$FF
00150Br 2  85 AD                sta     FAC+4
00150Dr 2               .endif
00150Dr 2  A5 B8                lda     FACEXTENSION
00150Fr 2  49 FF                eor     #$FF
001511r 2  85 B8                sta     FACEXTENSION
001513r 2  E6 B8                inc     FACEXTENSION
001515r 2  D0 0E                bne     RTS12
001517r 2               
001517r 2               ; ----------------------------------------------------------------------------
001517r 2               ; INCREMENT FAC MANTISSA
001517r 2               ; ----------------------------------------------------------------------------
001517r 2               INCREMENT_FAC_MANTISSA:
001517r 2               .ifndef CONFIG_SMALL
001517r 2  E6 AD                inc     FAC+4
001519r 2  D0 0A                bne     RTS12
00151Br 2               .endif
00151Br 2  E6 AC                inc     FAC+3
00151Dr 2  D0 06                bne     RTS12
00151Fr 2  E6 AB                inc     FAC+2
001521r 2  D0 02                bne     RTS12
001523r 2  E6 AA                inc     FAC+1
001525r 2               RTS12:
001525r 2  60                   rts
001526r 2               OVERFLOW:
001526r 2  A2 0A                ldx     #ERR_OVERFLOW
001528r 2  4C rr rr             jmp     ERROR
00152Br 2               
00152Br 2               ; ----------------------------------------------------------------------------
00152Br 2               ; SHIFT 1,X THRU 5,X RIGHT
00152Br 2               ; (A) = NEGATIVE OF SHIFT COUNT
00152Br 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
00152Br 2               ;
00152Br 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
00152Br 2               ; ----------------------------------------------------------------------------
00152Br 2               SHIFT_RIGHT1:
00152Br 2  A2 6D                ldx     #RESULT-1
00152Dr 2               SHIFT_RIGHT2:
00152Dr 2               .ifdef CONFIG_SMALL
00152Dr 2                       ldy     3,x
00152Dr 2               .else
00152Dr 2  B4 04                ldy     4,x
00152Fr 2               .endif
00152Fr 2  84 B8                sty     FACEXTENSION
001531r 2               .ifndef CONFIG_SMALL
001531r 2  B4 03                ldy     3,x
001533r 2  94 04                sty     4,x
001535r 2               .endif
001535r 2  B4 02                ldy     2,x
001537r 2  94 03                sty     3,x
001539r 2  B4 01                ldy     1,x
00153Br 2  94 02                sty     2,x
00153Dr 2  A4 B0                ldy     SHIFTSIGNEXT
00153Fr 2  94 01                sty     1,x
001541r 2               
001541r 2               ; ----------------------------------------------------------------------------
001541r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
001541r 2               ; ----------------------------------------------------------------------------
001541r 2               SHIFT_RIGHT:
001541r 2  69 08                adc     #$08
001543r 2  30 E8                bmi     SHIFT_RIGHT2
001545r 2  F0 E6                beq     SHIFT_RIGHT2
001547r 2  E9 08                sbc     #$08
001549r 2  A8                   tay
00154Ar 2  A5 B8                lda     FACEXTENSION
00154Cr 2  B0 14                bcs     SHIFT_RIGHT5
00154Er 2               .ifndef CONFIG_ROR_WORKAROUND
00154Er 2               LB588:
00154Er 2  16 01                asl     1,x
001550r 2  90 02                bcc     LB58E
001552r 2  F6 01                inc     1,x
001554r 2               LB58E:
001554r 2  76 01                ror     1,x
001556r 2  76 01                ror     1,x
001558r 2               
001558r 2               ; ----------------------------------------------------------------------------
001558r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
001558r 2               ; ----------------------------------------------------------------------------
001558r 2               SHIFT_RIGHT4:
001558r 2  76 02                ror     2,x
00155Ar 2  76 03                ror     3,x
00155Cr 2                 .ifndef CONFIG_SMALL
00155Cr 2  76 04                ror     4,x
00155Er 2                 .endif
00155Er 2  6A                   ror     a
00155Fr 2  C8                   iny
001560r 2  D0 EC                bne     LB588
001562r 2               .else
001562r 2               L37C4:
001562r 2                       pha
001562r 2                       lda     1,x
001562r 2                       and     #$80
001562r 2                       lsr     1,x
001562r 2                       ora     1,x
001562r 2                       sta     1,x
001562r 2                       .byte   $24
001562r 2               SHIFT_RIGHT4:
001562r 2                       pha
001562r 2                       lda     #$00
001562r 2                       bcc     L37D7
001562r 2                       lda     #$80
001562r 2               L37D7:
001562r 2                       lsr     2,x
001562r 2                       ora     2,x
001562r 2                       sta     2,x
001562r 2                       lda     #$00
001562r 2                       bcc     L37E3
001562r 2                       lda     #$80
001562r 2               L37E3:
001562r 2                       lsr     3,x
001562r 2                       ora     3,x
001562r 2                       sta     3,x
001562r 2                       lda     #$00
001562r 2                       bcc     L37EF
001562r 2                       lda     #$80
001562r 2               L37EF:
001562r 2                       lsr     4,x
001562r 2                       ora     4,x
001562r 2                       sta     4,x
001562r 2                       pla
001562r 2                       php
001562r 2                       lsr     a
001562r 2                       plp
001562r 2                       bcc     L37FD
001562r 2                       ora     #$80
001562r 2               L37FD:
001562r 2                       iny
001562r 2                       bne     L37C4
001562r 2               .endif
001562r 2               SHIFT_RIGHT5:
001562r 2  18                   clc
001563r 2  60                   rts
001564r 2               
001564r 2               ; ----------------------------------------------------------------------------
001564r 2               .ifdef CONFIG_SMALL
001564r 2               CON_ONE:
001564r 2                       .byte   $81,$00,$00,$00
001564r 2               POLY_LOG:
001564r 2               		.byte	$02
001564r 2               		.byte   $80,$19,$56,$62
001564r 2               		.byte   $80,$76,$22,$F3
001564r 2               		.byte   $82,$38,$AA,$40
001564r 2               CON_SQR_HALF:
001564r 2               		.byte   $80,$35,$04,$F3
001564r 2               CON_SQR_TWO:
001564r 2               		.byte   $81,$35,$04,$F3
001564r 2               CON_NEG_HALF:
001564r 2               		.byte   $80,$80,$00,$00
001564r 2               CON_LOG_TWO:
001564r 2               		.byte   $80,$31,$72,$18
001564r 2               .else
001564r 2               CON_ONE:
001564r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001568r 2  00           
001569r 2               POLY_LOG:
001569r 2  03                   .byte   $03
00156Ar 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
00156Er 2  79           
00156Fr 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
001573r 2  64           
001574r 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
001578r 2  16           
001579r 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
00157Dr 2  20           
00157Er 2               CON_SQR_HALF:
00157Er 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
001582r 2  34           
001583r 2               CON_SQR_TWO:
001583r 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
001587r 2  34           
001588r 2               CON_NEG_HALF:
001588r 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
00158Cr 2  00           
00158Dr 2               CON_LOG_TWO:
00158Dr 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
001591r 2  F8           
001592r 2               .endif
001592r 2               
001592r 2               ; ----------------------------------------------------------------------------
001592r 2               ; "LOG" FUNCTION
001592r 2               ; ----------------------------------------------------------------------------
001592r 2               LOG:
001592r 2  20 rr rr             jsr     SIGN
001595r 2  F0 02                beq     GIQ
001597r 2  10 03                bpl     LOG2
001599r 2               GIQ:
001599r 2  4C rr rr             jmp     IQERR
00159Cr 2               LOG2:
00159Cr 2  A5 A9                lda     FAC
00159Er 2  E9 7F                sbc     #$7F
0015A0r 2  48                   pha
0015A1r 2  A9 80                lda     #$80
0015A3r 2  85 A9                sta     FAC
0015A5r 2  A9 rr                lda     #<CON_SQR_HALF
0015A7r 2  A0 rr                ldy     #>CON_SQR_HALF
0015A9r 2  20 rr rr             jsr     FADD
0015ACr 2  A9 rr                lda     #<CON_SQR_TWO
0015AEr 2  A0 rr                ldy     #>CON_SQR_TWO
0015B0r 2  20 rr rr             jsr     FDIV
0015B3r 2  A9 rr                lda     #<CON_ONE
0015B5r 2  A0 rr                ldy     #>CON_ONE
0015B7r 2  20 rr rr             jsr     FSUB
0015BAr 2  A9 rr                lda     #<POLY_LOG
0015BCr 2  A0 rr                ldy     #>POLY_LOG
0015BEr 2  20 rr rr             jsr     POLYNOMIAL_ODD
0015C1r 2  A9 rr                lda     #<CON_NEG_HALF
0015C3r 2  A0 rr                ldy     #>CON_NEG_HALF
0015C5r 2  20 rr rr             jsr     FADD
0015C8r 2  68                   pla
0015C9r 2  20 rr rr             jsr     ADDACC
0015CCr 2  A9 rr                lda     #<CON_LOG_TWO
0015CEr 2  A0 rr                ldy     #>CON_LOG_TWO
0015D0r 2               
0015D0r 2               ; ----------------------------------------------------------------------------
0015D0r 2               ; FAC = (Y,A) * FAC
0015D0r 2               ; ----------------------------------------------------------------------------
0015D0r 2               FMULT:
0015D0r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0015D3r 2               
0015D3r 2               ; ----------------------------------------------------------------------------
0015D3r 2               ; FAC = ARG * FAC
0015D3r 2               ; ----------------------------------------------------------------------------
0015D3r 2               FMULTT:
0015D3r 2               .ifndef CONFIG_11
0015D3r 2                       beq     L3903
0015D3r 2               .else
0015D3r 2  D0 03 4C rr          jeq     L3903
0015D7r 2  rr           
0015D8r 2               .endif
0015D8r 2  20 rr rr             jsr     ADD_EXPONENTS
0015DBr 2  A9 00                lda     #$00
0015DDr 2  85 6E                sta     RESULT
0015DFr 2  85 6F                sta     RESULT+1
0015E1r 2  85 70                sta     RESULT+2
0015E3r 2               .ifndef CONFIG_SMALL
0015E3r 2  85 71                sta     RESULT+3
0015E5r 2               .endif
0015E5r 2  A5 B8                lda     FACEXTENSION
0015E7r 2  20 rr rr             jsr     MULTIPLY1
0015EAr 2               .ifndef CONFIG_SMALL
0015EAr 2  A5 AD                lda     FAC+4
0015ECr 2  20 rr rr             jsr     MULTIPLY1
0015EFr 2               .endif
0015EFr 2  A5 AC                lda     FAC+3
0015F1r 2  20 rr rr             jsr     MULTIPLY1
0015F4r 2  A5 AB                lda     FAC+2
0015F6r 2  20 rr rr             jsr     MULTIPLY1
0015F9r 2  A5 AA                lda     FAC+1
0015FBr 2  20 rr rr             jsr     MULTIPLY2
0015FEr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001601r 2               
001601r 2               ; ----------------------------------------------------------------------------
001601r 2               ; MULTIPLY ARG BY (A) INTO RESULT
001601r 2               ; ----------------------------------------------------------------------------
001601r 2               MULTIPLY1:
001601r 2  D0 03                bne     MULTIPLY2
001603r 2  4C rr rr             jmp     SHIFT_RIGHT1
001606r 2               MULTIPLY2:
001606r 2  4A                   lsr     a
001607r 2  09 80                ora     #$80
001609r 2               L38A7:
001609r 2  A8                   tay
00160Ar 2  90 19                bcc     L38C3
00160Cr 2  18                   clc
00160Dr 2               .ifndef CONFIG_SMALL
00160Dr 2  A5 71                lda     RESULT+3
00160Fr 2  65 B5                adc     ARG+4
001611r 2  85 71                sta     RESULT+3
001613r 2               .endif
001613r 2  A5 70                lda     RESULT+2
001615r 2  65 B4                adc     ARG+3
001617r 2  85 70                sta     RESULT+2
001619r 2  A5 6F                lda     RESULT+1
00161Br 2  65 B3                adc     ARG+2
00161Dr 2  85 6F                sta     RESULT+1
00161Fr 2  A5 6E                lda     RESULT
001621r 2  65 B2                adc     ARG+1
001623r 2  85 6E                sta     RESULT
001625r 2               L38C3:
001625r 2               .ifndef CONFIG_ROR_WORKAROUND
001625r 2  66 6E                ror     RESULT
001627r 2  66 6F                ror     RESULT+1
001629r 2               .ifdef APPLE_BAD_BYTE
001629r 2               ; this seems to be a bad byte in the dump
001629r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
001629r 2               .else
001629r 2  66 70                ror     RESULT+2
00162Br 2               .endif
00162Br 2               .ifndef CONFIG_SMALL
00162Br 2  66 71                ror     RESULT+3
00162Dr 2               .endif
00162Dr 2  66 B8                ror     FACEXTENSION
00162Fr 2               .else
00162Fr 2                       lda     #$00
00162Fr 2                       bcc     L38C9
00162Fr 2                       lda     #$80
00162Fr 2               L38C9:
00162Fr 2                       lsr     RESULT
00162Fr 2                       ora     RESULT
00162Fr 2                       sta     RESULT
00162Fr 2                       lda     #$00
00162Fr 2                       bcc     L38D5
00162Fr 2                       lda     #$80
00162Fr 2               L38D5:
00162Fr 2                       lsr     RESULT+1
00162Fr 2                       ora     RESULT+1
00162Fr 2                       sta     RESULT+1
00162Fr 2                       lda     #$00
00162Fr 2                       bcc     L38E1
00162Fr 2                       lda     #$80
00162Fr 2               L38E1:
00162Fr 2                       lsr     RESULT+2
00162Fr 2                       ora     RESULT+2
00162Fr 2                       sta     RESULT+2
00162Fr 2                       lda     #$00
00162Fr 2                       bcc     L38ED
00162Fr 2                       lda     #$80
00162Fr 2               L38ED:
00162Fr 2                       lsr     RESULT+3
00162Fr 2                       ora     RESULT+3
00162Fr 2                       sta     RESULT+3
00162Fr 2                       lda     #$00
00162Fr 2                       bcc     L38F9
00162Fr 2                       lda     #$80
00162Fr 2               L38F9:
00162Fr 2                       lsr     FACEXTENSION
00162Fr 2                       ora     FACEXTENSION
00162Fr 2                       sta     FACEXTENSION
00162Fr 2               .endif
00162Fr 2  98                   tya
001630r 2  4A                   lsr     a
001631r 2  D0 D6                bne     L38A7
001633r 2               L3903:
001633r 2  60                   rts
001634r 2               
001634r 2               ; ----------------------------------------------------------------------------
001634r 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
001634r 2               ; ----------------------------------------------------------------------------
001634r 2               LOAD_ARG_FROM_YA:
001634r 2  85 6A                sta     INDEX
001636r 2  84 6B                sty     INDEX+1
001638r 2  A0 04                ldy     #BYTES_FP-1
00163Ar 2               .ifndef CONFIG_SMALL
00163Ar 2  B1 6A                lda     (INDEX),y
00163Cr 2  85 B5                sta     ARG+4
00163Er 2  88                   dey
00163Fr 2               .endif
00163Fr 2  B1 6A                lda     (INDEX),y
001641r 2  85 B4                sta     ARG+3
001643r 2  88                   dey
001644r 2  B1 6A                lda     (INDEX),y
001646r 2  85 B3                sta     ARG+2
001648r 2  88                   dey
001649r 2  B1 6A                lda     (INDEX),y
00164Br 2  85 B6                sta     ARGSIGN
00164Dr 2  45 AE                eor     FACSIGN
00164Fr 2  85 B7                sta     SGNCPR
001651r 2  A5 B6                lda     ARGSIGN
001653r 2  09 80                ora     #$80
001655r 2  85 B2                sta     ARG+1
001657r 2  88                   dey
001658r 2  B1 6A                lda     (INDEX),y
00165Ar 2  85 B1                sta     ARG
00165Cr 2  A5 A9                lda     FAC
00165Er 2  60                   rts
00165Fr 2               
00165Fr 2               ; ----------------------------------------------------------------------------
00165Fr 2               ; ADD EXPONENTS OF ARG AND FAC
00165Fr 2               ; (CALLED BY FMULT AND FDIV)
00165Fr 2               ;
00165Fr 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
00165Fr 2               ; ----------------------------------------------------------------------------
00165Fr 2               ADD_EXPONENTS:
00165Fr 2  A5 B1                lda     ARG
001661r 2               ADD_EXPONENTS1:
001661r 2  F0 1F                beq     ZERO
001663r 2  18                   clc
001664r 2  65 A9                adc     FAC
001666r 2  90 04                bcc     L393C
001668r 2  30 1D                bmi     JOV
00166Ar 2  18                   clc
00166Br 2  2C                   .byte   $2C
00166Cr 2               L393C:
00166Cr 2  10 14                bpl     ZERO
00166Er 2  69 80                adc     #$80
001670r 2  85 A9                sta     FAC
001672r 2  D0 03                bne     L3947
001674r 2  4C rr rr             jmp     STA_IN_FAC_SIGN
001677r 2               L3947:
001677r 2  A5 B7                lda     SGNCPR
001679r 2  85 AE                sta     FACSIGN
00167Br 2  60                   rts
00167Cr 2               
00167Cr 2               ; ----------------------------------------------------------------------------
00167Cr 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00167Cr 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00167Cr 2               ; CALLED FROM "EXP" FUNCTION
00167Cr 2               ; ----------------------------------------------------------------------------
00167Cr 2               OUTOFRNG:
00167Cr 2  A5 AE                lda     FACSIGN
00167Er 2  49 FF                eor     #$FF
001680r 2  30 05                bmi     JOV
001682r 2               
001682r 2               ; ----------------------------------------------------------------------------
001682r 2               ; POP RETURN ADDRESS AND SET FAC=0
001682r 2               ; ----------------------------------------------------------------------------
001682r 2               ZERO:
001682r 2  68                   pla
001683r 2  68                   pla
001684r 2  4C rr rr             jmp     ZERO_FAC
001687r 2               JOV:
001687r 2  4C rr rr             jmp     OVERFLOW
00168Ar 2               
00168Ar 2               ; ----------------------------------------------------------------------------
00168Ar 2               ; MULTIPLY FAC BY 10
00168Ar 2               ; ----------------------------------------------------------------------------
00168Ar 2               MUL10:
00168Ar 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00168Dr 2  AA                   tax
00168Er 2  F0 10                beq     L3970
001690r 2  18                   clc
001691r 2  69 02                adc     #$02
001693r 2  B0 F2                bcs     JOV
001695r 2               LD9BF:
001695r 2  A2 00                ldx     #$00
001697r 2  86 B7                stx     SGNCPR
001699r 2  20 rr rr             jsr     FADD2
00169Cr 2  E6 A9                inc     FAC
00169Er 2  F0 E7                beq     JOV
0016A0r 2               L3970:
0016A0r 2  60                   rts
0016A1r 2               
0016A1r 2               ; ----------------------------------------------------------------------------
0016A1r 2               CONTEN:
0016A1r 2               .ifdef CONFIG_SMALL
0016A1r 2                       .byte   $84,$20,$00,$00
0016A1r 2               .else
0016A1r 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
0016A5r 2  00           
0016A6r 2               .endif
0016A6r 2               
0016A6r 2               ; ----------------------------------------------------------------------------
0016A6r 2               ; DIVIDE FAC BY 10
0016A6r 2               ; ----------------------------------------------------------------------------
0016A6r 2               DIV10:
0016A6r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0016A9r 2  A9 rr                lda     #<CONTEN
0016ABr 2  A0 rr                ldy     #>CONTEN
0016ADr 2  A2 00                ldx     #$00
0016AFr 2               
0016AFr 2               ; ----------------------------------------------------------------------------
0016AFr 2               ; FAC = ARG / (Y,A)
0016AFr 2               ; ----------------------------------------------------------------------------
0016AFr 2               DIV:
0016AFr 2  86 B7                stx     SGNCPR
0016B1r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0016B4r 2  4C rr rr             jmp     FDIVT
0016B7r 2               
0016B7r 2               ; ----------------------------------------------------------------------------
0016B7r 2               ; FAC = (Y,A) / FAC
0016B7r 2               ; ----------------------------------------------------------------------------
0016B7r 2               FDIV:
0016B7r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0016BAr 2               
0016BAr 2               ; ----------------------------------------------------------------------------
0016BAr 2               ; FAC = ARG / FAC
0016BAr 2               ; ----------------------------------------------------------------------------
0016BAr 2               FDIVT:
0016BAr 2  F0 76                beq     L3A02
0016BCr 2  20 rr rr             jsr     ROUND_FAC
0016BFr 2  A9 00                lda     #$00
0016C1r 2  38                   sec
0016C2r 2  E5 A9                sbc     FAC
0016C4r 2  85 A9                sta     FAC
0016C6r 2  20 rr rr             jsr     ADD_EXPONENTS
0016C9r 2  E6 A9                inc     FAC
0016CBr 2  F0 BA                beq     JOV
0016CDr 2  A2 FC                ldx     #-MANTISSA_BYTES
0016CFr 2  A9 01                lda     #$01
0016D1r 2               L39A1:
0016D1r 2  A4 B2                ldy     ARG+1
0016D3r 2  C4 AA                cpy     FAC+1
0016D5r 2  D0 10                bne     L39B7
0016D7r 2  A4 B3                ldy     ARG+2
0016D9r 2  C4 AB                cpy     FAC+2
0016DBr 2  D0 0A                bne     L39B7
0016DDr 2  A4 B4                ldy     ARG+3
0016DFr 2  C4 AC                cpy     FAC+3
0016E1r 2               .ifndef CONFIG_SMALL
0016E1r 2  D0 04                bne     L39B7
0016E3r 2  A4 B5                ldy     ARG+4
0016E5r 2  C4 AD                cpy     FAC+4
0016E7r 2               .endif
0016E7r 2               L39B7:
0016E7r 2  08                   php
0016E8r 2  2A                   rol     a
0016E9r 2  90 09                bcc     L39C4
0016EBr 2  E8                   inx
0016ECr 2  95 71                sta     RESULT_LAST-1,x
0016EEr 2  F0 32                beq     L39F2
0016F0r 2  10 34                bpl     L39F6
0016F2r 2  A9 01                lda     #$01
0016F4r 2               L39C4:
0016F4r 2  28                   plp
0016F5r 2  B0 0E                bcs     L39D5
0016F7r 2               L39C7:
0016F7r 2  06 B5                asl     ARG_LAST
0016F9r 2               .ifndef CONFIG_SMALL
0016F9r 2  26 B4                rol     ARG+3
0016FBr 2               .endif
0016FBr 2  26 B3                rol     ARG+2
0016FDr 2  26 B2                rol     ARG+1
0016FFr 2  B0 E6                bcs     L39B7
001701r 2  30 CE                bmi     L39A1
001703r 2  10 E2                bpl     L39B7
001705r 2               L39D5:
001705r 2  A8                   tay
001706r 2               .ifndef CONFIG_SMALL
001706r 2  A5 B5                lda     ARG+4
001708r 2  E5 AD                sbc     FAC+4
00170Ar 2  85 B5                sta     ARG+4
00170Cr 2               .endif
00170Cr 2  A5 B4                lda     ARG+3
00170Er 2  E5 AC                sbc     FAC+3
001710r 2  85 B4                sta     ARG+3
001712r 2  A5 B3                lda     ARG+2
001714r 2  E5 AB                sbc     FAC+2
001716r 2  85 B3                sta     ARG+2
001718r 2  A5 B2                lda     ARG+1
00171Ar 2  E5 AA                sbc     FAC+1
00171Cr 2  85 B2                sta     ARG+1
00171Er 2  98                   tya
00171Fr 2  4C rr rr             jmp     L39C7
001722r 2               L39F2:
001722r 2  A9 40                lda     #$40
001724r 2  D0 CE                bne     L39C4
001726r 2               L39F6:
001726r 2  0A                   asl     a
001727r 2  0A                   asl     a
001728r 2  0A                   asl     a
001729r 2  0A                   asl     a
00172Ar 2  0A                   asl     a
00172Br 2  0A                   asl     a
00172Cr 2  85 B8                sta     FACEXTENSION
00172Er 2  28                   plp
00172Fr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001732r 2               L3A02:
001732r 2  A2 14                ldx     #ERR_ZERODIV
001734r 2  4C rr rr             jmp     ERROR
001737r 2               
001737r 2               ; ----------------------------------------------------------------------------
001737r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
001737r 2               ; ----------------------------------------------------------------------------
001737r 2               COPY_RESULT_INTO_FAC:
001737r 2  A5 6E                lda     RESULT
001739r 2  85 AA                sta     FAC+1
00173Br 2  A5 6F                lda     RESULT+1
00173Dr 2  85 AB                sta     FAC+2
00173Fr 2  A5 70                lda     RESULT+2
001741r 2  85 AC                sta     FAC+3
001743r 2               .ifndef CONFIG_SMALL
001743r 2  A5 71                lda     RESULT+3
001745r 2  85 AD                sta     FAC+4
001747r 2               .endif
001747r 2  4C rr rr             jmp     NORMALIZE_FAC2
00174Ar 2               
00174Ar 2               ; ----------------------------------------------------------------------------
00174Ar 2               ; UNPACK (Y,A) INTO FAC
00174Ar 2               ; ----------------------------------------------------------------------------
00174Ar 2               LOAD_FAC_FROM_YA:
00174Ar 2  85 6A                sta     INDEX
00174Cr 2  84 6B                sty     INDEX+1
00174Er 2  A0 04                ldy     #MANTISSA_BYTES
001750r 2               .ifndef CONFIG_SMALL
001750r 2  B1 6A                lda     (INDEX),y
001752r 2  85 AD                sta     FAC+4
001754r 2  88                   dey
001755r 2               .endif
001755r 2  B1 6A                lda     (INDEX),y
001757r 2  85 AC                sta     FAC+3
001759r 2  88                   dey
00175Ar 2  B1 6A                lda     (INDEX),y
00175Cr 2  85 AB                sta     FAC+2
00175Er 2  88                   dey
00175Fr 2  B1 6A                lda     (INDEX),y
001761r 2  85 AE                sta     FACSIGN
001763r 2  09 80                ora     #$80
001765r 2  85 AA                sta     FAC+1
001767r 2  88                   dey
001768r 2  B1 6A                lda     (INDEX),y
00176Ar 2  85 A9                sta     FAC
00176Cr 2  84 B8                sty     FACEXTENSION
00176Er 2  60                   rts
00176Fr 2               
00176Fr 2               ; ----------------------------------------------------------------------------
00176Fr 2               ; ROUND FAC, STORE IN TEMP2
00176Fr 2               ; ----------------------------------------------------------------------------
00176Fr 2               STORE_FAC_IN_TEMP2_ROUNDED:
00176Fr 2  A2 A4                ldx     #TEMP2
001771r 2  2C                   .byte   $2C
001772r 2               
001772r 2               ; ----------------------------------------------------------------------------
001772r 2               ; ROUND FAC, STORE IN TEMP1
001772r 2               ; ----------------------------------------------------------------------------
001772r 2               STORE_FAC_IN_TEMP1_ROUNDED:
001772r 2  A2 9F                ldx     #TEMP1X
001774r 2  A0 00                ldy     #$00
001776r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
001778r 2               
001778r 2               ; ----------------------------------------------------------------------------
001778r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
001778r 2               ; ----------------------------------------------------------------------------
001778r 2               SETFOR:
001778r 2  A6 91                ldx     FORPNT
00177Ar 2  A4 92                ldy     FORPNT+1
00177Cr 2               
00177Cr 2               ; ----------------------------------------------------------------------------
00177Cr 2               ; ROUND FAC, AND STORE AT (Y,X)
00177Cr 2               ; ----------------------------------------------------------------------------
00177Cr 2               STORE_FAC_AT_YX_ROUNDED:
00177Cr 2  20 rr rr             jsr     ROUND_FAC
00177Fr 2  86 6A                stx     INDEX
001781r 2  84 6B                sty     INDEX+1
001783r 2  A0 04                ldy     #MANTISSA_BYTES
001785r 2               .ifndef CONFIG_SMALL
001785r 2  A5 AD                lda     FAC+4
001787r 2  91 6A                sta     (INDEX),y
001789r 2  88                   dey
00178Ar 2               .endif
00178Ar 2  A5 AC                lda     FAC+3
00178Cr 2  91 6A                sta     (INDEX),y
00178Er 2  88                   dey
00178Fr 2  A5 AB                lda     FAC+2
001791r 2  91 6A                sta     (INDEX),y
001793r 2  88                   dey
001794r 2  A5 AE                lda     FACSIGN
001796r 2  09 7F                ora     #$7F
001798r 2  25 AA                and     FAC+1
00179Ar 2  91 6A                sta     (INDEX),y
00179Cr 2  88                   dey
00179Dr 2  A5 A9                lda     FAC
00179Fr 2  91 6A                sta     (INDEX),y
0017A1r 2  84 B8                sty     FACEXTENSION
0017A3r 2  60                   rts
0017A4r 2               
0017A4r 2               ; ----------------------------------------------------------------------------
0017A4r 2               ; COPY ARG INTO FAC
0017A4r 2               ; ----------------------------------------------------------------------------
0017A4r 2               COPY_ARG_TO_FAC:
0017A4r 2  A5 B6                lda     ARGSIGN
0017A6r 2               MFA:
0017A6r 2  85 AE                sta     FACSIGN
0017A8r 2  A2 05                ldx     #BYTES_FP
0017AAr 2               L3A7A:
0017AAr 2  B5 B0                lda     SHIFTSIGNEXT,x
0017ACr 2  95 A8                sta     EXPSGN,x
0017AEr 2  CA                   dex
0017AFr 2  D0 F9                bne     L3A7A
0017B1r 2  86 B8                stx     FACEXTENSION
0017B3r 2  60                   rts
0017B4r 2               
0017B4r 2               ; ----------------------------------------------------------------------------
0017B4r 2               ; ROUND FAC AND COPY TO ARG
0017B4r 2               ; ----------------------------------------------------------------------------
0017B4r 2               COPY_FAC_TO_ARG_ROUNDED:
0017B4r 2  20 rr rr             jsr     ROUND_FAC
0017B7r 2               MAF:
0017B7r 2  A2 06                ldx     #BYTES_FP+1
0017B9r 2               L3A89:
0017B9r 2  B5 A8                lda     EXPSGN,x
0017BBr 2  95 B0                sta     SHIFTSIGNEXT,x
0017BDr 2  CA                   dex
0017BEr 2  D0 F9                bne     L3A89
0017C0r 2  86 B8                stx     FACEXTENSION
0017C2r 2               RTS14:
0017C2r 2  60                   rts
0017C3r 2               
0017C3r 2               ; ----------------------------------------------------------------------------
0017C3r 2               ; ROUND FAC USING EXTENSION BYTE
0017C3r 2               ; ----------------------------------------------------------------------------
0017C3r 2               ROUND_FAC:
0017C3r 2  A5 A9                lda     FAC
0017C5r 2  F0 FB                beq     RTS14
0017C7r 2  06 B8                asl     FACEXTENSION
0017C9r 2  90 F7                bcc     RTS14
0017CBr 2               
0017CBr 2               ; ----------------------------------------------------------------------------
0017CBr 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
0017CBr 2               ; ----------------------------------------------------------------------------
0017CBr 2               INCREMENT_MANTISSA:
0017CBr 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
0017CEr 2  D0 F2                bne     RTS14
0017D0r 2  4C rr rr             jmp     NORMALIZE_FAC6
0017D3r 2               
0017D3r 2               ; ----------------------------------------------------------------------------
0017D3r 2               ; TEST FAC FOR ZERO AND SIGN
0017D3r 2               ;
0017D3r 2               ; FAC > 0, RETURN +1
0017D3r 2               ; FAC = 0, RETURN  0
0017D3r 2               ; FAC < 0, RETURN -1
0017D3r 2               ; ----------------------------------------------------------------------------
0017D3r 2               SIGN:
0017D3r 2  A5 A9                lda     FAC
0017D5r 2  F0 09                beq     RTS15
0017D7r 2               L3AA7:
0017D7r 2  A5 AE                lda     FACSIGN
0017D9r 2               SIGN2:
0017D9r 2  2A                   rol     a
0017DAr 2  A9 FF                lda     #$FF
0017DCr 2  B0 02                bcs     RTS15
0017DEr 2  A9 01                lda     #$01
0017E0r 2               RTS15:
0017E0r 2  60                   rts
0017E1r 2               
0017E1r 2               ; ----------------------------------------------------------------------------
0017E1r 2               ; "SGN" FUNCTION
0017E1r 2               ; ----------------------------------------------------------------------------
0017E1r 2               SGN:
0017E1r 2  20 rr rr             jsr     SIGN
0017E4r 2               
0017E4r 2               ; ----------------------------------------------------------------------------
0017E4r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
0017E4r 2               ; ----------------------------------------------------------------------------
0017E4r 2               FLOAT:
0017E4r 2  85 AA                sta     FAC+1
0017E6r 2  A9 00                lda     #$00
0017E8r 2  85 AB                sta     FAC+2
0017EAr 2  A2 88                ldx     #$88
0017ECr 2               
0017ECr 2               ; ----------------------------------------------------------------------------
0017ECr 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
0017ECr 2               ; (X) = EXPONENT
0017ECr 2               ; ----------------------------------------------------------------------------
0017ECr 2               FLOAT1:
0017ECr 2  A5 AA                lda     FAC+1
0017EEr 2  49 FF                eor     #$FF
0017F0r 2  2A                   rol     a
0017F1r 2               
0017F1r 2               ; ----------------------------------------------------------------------------
0017F1r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
0017F1r 2               ; (X) = EXPONENT
0017F1r 2               ; C=0 TO MAKE VALUE NEGATIVE
0017F1r 2               ; C=1 TO MAKE VALUE POSITIVE
0017F1r 2               ; ----------------------------------------------------------------------------
0017F1r 2               FLOAT2:
0017F1r 2  A9 00                lda     #$00
0017F3r 2               .ifndef CONFIG_SMALL
0017F3r 2  85 AD                sta     FAC+4
0017F5r 2               .endif
0017F5r 2  85 AC                sta     FAC+3
0017F7r 2               LDB21:
0017F7r 2  86 A9                stx     FAC
0017F9r 2  85 B8                sta     FACEXTENSION
0017FBr 2  85 AE                sta     FACSIGN
0017FDr 2  4C rr rr             jmp     NORMALIZE_FAC1
001800r 2               
001800r 2               ; ----------------------------------------------------------------------------
001800r 2               ; "ABS" FUNCTION
001800r 2               ; ----------------------------------------------------------------------------
001800r 2               ABS:
001800r 2  46 AE                lsr     FACSIGN
001802r 2  60                   rts
001803r 2               
001803r 2               ; ----------------------------------------------------------------------------
001803r 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
001803r 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001803r 2               ; ----------------------------------------------------------------------------
001803r 2               FCOMP:
001803r 2  85 6C                sta     DEST
001805r 2               
001805r 2               ; ----------------------------------------------------------------------------
001805r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001805r 2               ; "DEST" ALREADY SET UP
001805r 2               ; ----------------------------------------------------------------------------
001805r 2               FCOMP2:
001805r 2  84 6D                sty     DEST+1
001807r 2  A0 00                ldy     #$00
001809r 2  B1 6C                lda     (DEST),y
00180Br 2  C8                   iny
00180Cr 2  AA                   tax
00180Dr 2  F0 C4                beq     SIGN
00180Fr 2  B1 6C                lda     (DEST),y
001811r 2  45 AE                eor     FACSIGN
001813r 2  30 C2                bmi     L3AA7
001815r 2  E4 A9                cpx     FAC
001817r 2  D0 21                bne     L3B0A
001819r 2  B1 6C                lda     (DEST),y
00181Br 2  09 80                ora     #$80
00181Dr 2  C5 AA                cmp     FAC+1
00181Fr 2  D0 19                bne     L3B0A
001821r 2  C8                   iny
001822r 2  B1 6C                lda     (DEST),y
001824r 2  C5 AB                cmp     FAC+2
001826r 2  D0 12                bne     L3B0A
001828r 2  C8                   iny
001829r 2               .ifndef CONFIG_SMALL
001829r 2  B1 6C                lda     (DEST),y
00182Br 2  C5 AC                cmp     FAC+3
00182Dr 2  D0 0B                bne     L3B0A
00182Fr 2  C8                   iny
001830r 2               .endif
001830r 2  A9 7F                lda     #$7F
001832r 2  C5 B8                cmp     FACEXTENSION
001834r 2  B1 6C                lda     (DEST),y
001836r 2  E5 AD                sbc     FAC_LAST
001838r 2  F0 28                beq     L3B32
00183Ar 2               L3B0A:
00183Ar 2  A5 AE                lda     FACSIGN
00183Cr 2  90 02                bcc     L3B10
00183Er 2  49 FF                eor     #$FF
001840r 2               L3B10:
001840r 2  4C rr rr             jmp     SIGN2
001843r 2               
001843r 2               ; ----------------------------------------------------------------------------
001843r 2               ; QUICK INTEGER FUNCTION
001843r 2               ;
001843r 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
001843r 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
001843r 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
001843r 2               ;
001843r 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
001843r 2               ; ----------------------------------------------------------------------------
001843r 2               QINT:
001843r 2  A5 A9                lda     FAC
001845r 2  F0 4A                beq     QINT3
001847r 2  38                   sec
001848r 2  E9 A0                sbc     #120+8*BYTES_FP
00184Ar 2  24 AE                bit     FACSIGN
00184Cr 2  10 09                bpl     L3B27
00184Er 2  AA                   tax
00184Fr 2  A9 FF                lda     #$FF
001851r 2  85 B0                sta     SHIFTSIGNEXT
001853r 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
001856r 2  8A                   txa
001857r 2               L3B27:
001857r 2  A2 A9                ldx     #FAC
001859r 2  C9 F9                cmp     #$F9
00185Br 2  10 06                bpl     QINT2
00185Dr 2  20 rr rr             jsr     SHIFT_RIGHT
001860r 2  84 B0                sty     SHIFTSIGNEXT
001862r 2               L3B32:
001862r 2  60                   rts
001863r 2               QINT2:
001863r 2  A8                   tay
001864r 2  A5 AE                lda     FACSIGN
001866r 2  29 80                and     #$80
001868r 2  46 AA                lsr     FAC+1
00186Ar 2  05 AA                ora     FAC+1
00186Cr 2  85 AA                sta     FAC+1
00186Er 2  20 rr rr             jsr     SHIFT_RIGHT4
001871r 2  84 B0                sty     SHIFTSIGNEXT
001873r 2  60                   rts
001874r 2               
001874r 2               ; ----------------------------------------------------------------------------
001874r 2               ; "INT" FUNCTION
001874r 2               ;
001874r 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
001874r 2               ; AND THEN REFLOATS THE INTEGER.
001874r 2               ; ----------------------------------------------------------------------------
001874r 2               INT:
001874r 2  A5 A9                lda     FAC
001876r 2  C9 A0                cmp     #120+8*BYTES_FP
001878r 2  B0 20                bcs     RTS17
00187Ar 2  20 rr rr             jsr     QINT
00187Dr 2  84 B8                sty     FACEXTENSION
00187Fr 2  A5 AE                lda     FACSIGN
001881r 2  84 AE                sty     FACSIGN
001883r 2  49 80                eor     #$80
001885r 2  2A                   rol     a
001886r 2  A9 A0                lda     #120+8*BYTES_FP
001888r 2  85 A9                sta     FAC
00188Ar 2  A5 AD                lda     FAC_LAST
00188Cr 2  85 06                sta     CHARAC
00188Er 2  4C rr rr             jmp     NORMALIZE_FAC1
001891r 2               QINT3:
001891r 2  85 AA                sta     FAC+1
001893r 2  85 AB                sta     FAC+2
001895r 2  85 AC                sta     FAC+3
001897r 2               .ifndef CONFIG_SMALL
001897r 2  85 AD                sta     FAC+4
001899r 2               .endif
001899r 2  A8                   tay
00189Ar 2               RTS17:
00189Ar 2  60                   rts
00189Br 2               
00189Br 2               ; ----------------------------------------------------------------------------
00189Br 2               ; CONVERT STRING TO FP VALUE IN FAC
00189Br 2               ;
00189Br 2               ; STRING POINTED TO BY TXTPTR
00189Br 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00189Br 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00189Br 2               ; ----------------------------------------------------------------------------
00189Br 2               FIN:
00189Br 2  A0 00                ldy     #$00
00189Dr 2  A2 0A                ldx     #SERLEN-TMPEXP
00189Fr 2               L3B6F:
00189Fr 2  94 A5                sty     TMPEXP,x
0018A1r 2  CA                   dex
0018A2r 2  10 FB                bpl     L3B6F
0018A4r 2  90 0F                bcc     FIN2
0018A6r 2               .ifdef SYM1
0018A6r 2                       cmp     #$26
0018A6r 2                       bne     LDABB
0018A6r 2                       jmp     LCDFE
0018A6r 2               LDABB:
0018A6r 2               .endif
0018A6r 2  C9 2D                cmp     #$2D
0018A8r 2  D0 04                bne     L3B7E
0018AAr 2  86 AF                stx     SERLEN
0018ACr 2  F0 04                beq     FIN1
0018AEr 2               L3B7E:
0018AEr 2  C9 2B                cmp     #$2B
0018B0r 2  D0 05                bne     FIN3
0018B2r 2               FIN1:
0018B2r 2  20 BF 00             jsr     CHRGET
0018B5r 2               FIN2:
0018B5r 2  90 5B                bcc     FIN9
0018B7r 2               FIN3:
0018B7r 2  C9 2E                cmp     #$2E
0018B9r 2  F0 2E                beq     FIN10
0018BBr 2  C9 45                cmp     #$45
0018BDr 2  D0 30                bne     FIN7
0018BFr 2  20 BF 00             jsr     CHRGET
0018C2r 2  90 17                bcc     FIN5
0018C4r 2  C9 A5                cmp     #TOKEN_MINUS
0018C6r 2  F0 0E                beq     L3BA6
0018C8r 2  C9 2D                cmp     #$2D
0018CAr 2  F0 0A                beq     L3BA6
0018CCr 2  C9 A4                cmp     #TOKEN_PLUS
0018CEr 2  F0 08                beq     FIN4
0018D0r 2  C9 2B                cmp     #$2B
0018D2r 2  F0 04                beq     FIN4
0018D4r 2  D0 07                bne     FIN6
0018D6r 2               L3BA6:
0018D6r 2               .ifndef CONFIG_ROR_WORKAROUND
0018D6r 2  66 A8                ror     EXPSGN
0018D8r 2               .else
0018D8r 2                       lda     #$00
0018D8r 2                       bcc     L3BAC
0018D8r 2                       lda     #$80
0018D8r 2               L3BAC:
0018D8r 2                       lsr     EXPSGN
0018D8r 2                       ora     EXPSGN
0018D8r 2                       sta     EXPSGN
0018D8r 2               .endif
0018D8r 2               FIN4:
0018D8r 2  20 BF 00             jsr     CHRGET
0018DBr 2               FIN5:
0018DBr 2  90 5C                bcc     GETEXP
0018DDr 2               FIN6:
0018DDr 2  24 A8                bit     EXPSGN
0018DFr 2  10 0E                bpl     FIN7
0018E1r 2  A9 00                lda     #$00
0018E3r 2  38                   sec
0018E4r 2  E5 A6                sbc     EXPON
0018E6r 2  4C rr rr             jmp     FIN8
0018E9r 2               
0018E9r 2               ; ----------------------------------------------------------------------------
0018E9r 2               ; FOUND A DECIMAL POINT
0018E9r 2               ; ----------------------------------------------------------------------------
0018E9r 2               FIN10:
0018E9r 2               .ifndef CONFIG_ROR_WORKAROUND
0018E9r 2  66 A7                ror     LOWTR
0018EBr 2               .else
0018EBr 2                       lda     #$00
0018EBr 2                       bcc     L3BC9
0018EBr 2                       lda     #$80
0018EBr 2               L3BC9:
0018EBr 2                       lsr     LOWTR
0018EBr 2                       ora     LOWTR
0018EBr 2                       sta     LOWTR
0018EBr 2               .endif
0018EBr 2  24 A7                bit     LOWTR
0018EDr 2  50 C3                bvc     FIN1
0018EFr 2               
0018EFr 2               ; ----------------------------------------------------------------------------
0018EFr 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
0018EFr 2               ; ----------------------------------------------------------------------------
0018EFr 2               FIN7:
0018EFr 2  A5 A6                lda     EXPON
0018F1r 2               FIN8:
0018F1r 2  38                   sec
0018F2r 2  E5 A5                sbc     INDX
0018F4r 2  85 A6                sta     EXPON
0018F6r 2  F0 12                beq     L3BEE
0018F8r 2  10 09                bpl     L3BE7
0018FAr 2               L3BDE:
0018FAr 2  20 rr rr             jsr     DIV10
0018FDr 2  E6 A6                inc     EXPON
0018FFr 2  D0 F9                bne     L3BDE
001901r 2  F0 07                beq     L3BEE
001903r 2               L3BE7:
001903r 2  20 rr rr             jsr     MUL10
001906r 2  C6 A6                dec     EXPON
001908r 2  D0 F9                bne     L3BE7
00190Ar 2               L3BEE:
00190Ar 2  A5 AF                lda     SERLEN
00190Cr 2  30 01                bmi     L3BF3
00190Er 2  60                   rts
00190Fr 2               L3BF3:
00190Fr 2  4C rr rr             jmp     NEGOP
001912r 2               
001912r 2               ; ----------------------------------------------------------------------------
001912r 2               ; ACCUMULATE A DIGIT INTO FAC
001912r 2               ; ----------------------------------------------------------------------------
001912r 2               FIN9:
001912r 2  48                   pha
001913r 2  24 A7                bit     LOWTR
001915r 2  10 02                bpl     L3BFD
001917r 2  E6 A5                inc     INDX
001919r 2               L3BFD:
001919r 2  20 rr rr             jsr     MUL10
00191Cr 2  68                   pla
00191Dr 2  38                   sec
00191Er 2  E9 30                sbc     #$30
001920r 2  20 rr rr             jsr     ADDACC
001923r 2  4C rr rr             jmp     FIN1
001926r 2               
001926r 2               ; ----------------------------------------------------------------------------
001926r 2               ; ADD (A) TO FAC
001926r 2               ; ----------------------------------------------------------------------------
001926r 2               ADDACC:
001926r 2  48                   pha
001927r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00192Ar 2  68                   pla
00192Br 2  20 rr rr             jsr     FLOAT
00192Er 2  A5 B6                lda     ARGSIGN
001930r 2  45 AE                eor     FACSIGN
001932r 2  85 B7                sta     SGNCPR
001934r 2  A6 A9                ldx     FAC
001936r 2  4C rr rr             jmp     FADDT
001939r 2               
001939r 2               ; ----------------------------------------------------------------------------
001939r 2               ; ACCUMULATE DIGIT OF EXPONENT
001939r 2               ; ----------------------------------------------------------------------------
001939r 2               GETEXP:
001939r 2  A5 A6                lda     EXPON
00193Br 2  C9 0A                cmp     #MAX_EXPON
00193Dr 2  90 09                bcc     L3C2C
00193Fr 2               .ifdef CONFIG_10A
00193Fr 2  A9 64                lda     #$64
001941r 2               .endif
001941r 2  24 A8                bit     EXPSGN
001943r 2               .ifdef CONFIG_10A
001943r 2  30 11                bmi     L3C3A
001945r 2               .else
001945r 2                       bmi     LDC70
001945r 2               .endif
001945r 2  4C rr rr             jmp     OVERFLOW
001948r 2               LDC70:
001948r 2               .ifndef CONFIG_10A
001948r 2                       lda     #$0B
001948r 2               .endif
001948r 2               L3C2C:
001948r 2  0A                   asl     a
001949r 2  0A                   asl     a
00194Ar 2  18                   clc
00194Br 2  65 A6                adc     EXPON
00194Dr 2  0A                   asl     a
00194Er 2  18                   clc
00194Fr 2  A0 00                ldy     #$00
001951r 2  71 C6                adc     (TXTPTR),y
001953r 2  38                   sec
001954r 2  E9 30                sbc     #$30
001956r 2               L3C3A:
001956r 2  85 A6                sta     EXPON
001958r 2  4C rr rr             jmp     FIN4
00195Br 2               
00195Br 2               ; ----------------------------------------------------------------------------
00195Br 2               .ifdef CONFIG_SMALL
00195Br 2               ; these values are /1000 of what the labels say
00195Br 2               CON_99999999_9:
00195Br 2                       .byte   $91,$43,$4F,$F8
00195Br 2               CON_999999999:
00195Br 2               		.byte   $94,$74,$23,$F7
00195Br 2               CON_BILLION:
00195Br 2                       .byte   $94,$74,$24,$00
00195Br 2               .else
00195Br 2               CON_99999999_9:
00195Br 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
00195Fr 2  FD           
001960r 2               CON_999999999:
001960r 2               .ifndef CONFIG_10A
001960r 2                       .byte   $9E,$6E,$6B,$27,$FE
001960r 2               .else
001960r 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FD
001964r 2  FD           
001965r 2               .endif
001965r 2               CON_BILLION:
001965r 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
001969r 2  00           
00196Ar 2               .endif
00196Ar 2               
00196Ar 2               ; ----------------------------------------------------------------------------
00196Ar 2               ; PRINT "IN <LINE #>"
00196Ar 2               ; ----------------------------------------------------------------------------
00196Ar 2               INPRT:
00196Ar 2               .ifdef KBD
00196Ar 2                       jsr     LFE0B
00196Ar 2                       .byte	" in"
00196Ar 2                       .byte	0
00196Ar 2               .else
00196Ar 2  A9 rr                lda     #<QT_IN
00196Cr 2  A0 rr                ldy     #>QT_IN
00196Er 2  20 rr rr             jsr     GOSTROUT2
001971r 2               .endif
001971r 2  A5 82                lda     CURLIN+1
001973r 2  A6 81                ldx     CURLIN
001975r 2               
001975r 2               ; ----------------------------------------------------------------------------
001975r 2               ; PRINT A,X AS DECIMAL INTEGER
001975r 2               ; ----------------------------------------------------------------------------
001975r 2               LINPRT:
001975r 2  85 AA                sta     FAC+1
001977r 2  86 AB                stx     FAC+2
001979r 2  A2 90                ldx     #$90
00197Br 2  38                   sec
00197Cr 2  20 rr rr             jsr     FLOAT2
00197Fr 2  20 rr rr             jsr     FOUT
001982r 2               GOSTROUT2:
001982r 2  4C rr rr             jmp     STROUT
001985r 2               
001985r 2               ; ----------------------------------------------------------------------------
001985r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
001985r 2               ; RETURN WITH (Y,A) POINTING AT STRING
001985r 2               ; ----------------------------------------------------------------------------
001985r 2               FOUT:
001985r 2  A0 01                ldy     #$01
001987r 2               
001987r 2               ; ----------------------------------------------------------------------------
001987r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
001987r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
001987r 2               ; (THIS IS USED AS A FLAG)
001987r 2               ; ----------------------------------------------------------------------------
001987r 2               FOUT1:
001987r 2  A9 20                lda     #$20
001989r 2  24 AE                bit     FACSIGN
00198Br 2  10 02                bpl     L3C73
00198Dr 2  A9 2D                lda     #$2D
00198Fr 2               L3C73:
00198Fr 2  99 FF 01             sta     STACK2-1,y
001992r 2  85 AE                sta     FACSIGN
001994r 2  84 B9                sty     STRNG2
001996r 2  C8                   iny
001997r 2  A9 30                lda     #$30
001999r 2  A6 A9                ldx     FAC
00199Br 2  D0 03                bne     L3C84
00199Dr 2  4C rr rr             jmp     FOUT4
0019A0r 2               L3C84:
0019A0r 2  A9 00                lda     #$00
0019A2r 2  E0 80                cpx     #$80
0019A4r 2  F0 02                beq     L3C8C
0019A6r 2  B0 09                bcs     L3C95
0019A8r 2               L3C8C:
0019A8r 2  A9 rr                lda     #<CON_BILLION
0019AAr 2  A0 rr                ldy     #>CON_BILLION
0019ACr 2  20 rr rr             jsr     FMULT
0019AFr 2               .ifdef CONFIG_SMALL
0019AFr 2                       lda     #-6 ; exponent adjustment
0019AFr 2               .else
0019AFr 2  A9 F7                lda     #-9
0019B1r 2               .endif
0019B1r 2               L3C95:
0019B1r 2  85 A5                sta     INDX
0019B3r 2               ; ----------------------------------------------------------------------------
0019B3r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
0019B3r 2               ; ----------------------------------------------------------------------------
0019B3r 2               L3C97:
0019B3r 2  A9 rr                lda     #<CON_999999999
0019B5r 2  A0 rr                ldy     #>CON_999999999
0019B7r 2  20 rr rr             jsr     FCOMP
0019BAr 2  F0 1E                beq     L3CBE
0019BCr 2  10 12                bpl     L3CB4
0019BEr 2               L3CA2:
0019BEr 2  A9 rr                lda     #<CON_99999999_9
0019C0r 2  A0 rr                ldy     #>CON_99999999_9
0019C2r 2  20 rr rr             jsr     FCOMP
0019C5r 2  F0 02                beq     L3CAD
0019C7r 2  10 0E                bpl     L3CBB
0019C9r 2               L3CAD:
0019C9r 2  20 rr rr             jsr     MUL10
0019CCr 2  C6 A5                dec     INDX
0019CEr 2  D0 EE                bne     L3CA2
0019D0r 2               L3CB4:
0019D0r 2  20 rr rr             jsr     DIV10
0019D3r 2  E6 A5                inc     INDX
0019D5r 2  D0 DC                bne     L3C97
0019D7r 2               L3CBB:
0019D7r 2  20 rr rr             jsr     FADDH
0019DAr 2               L3CBE:
0019DAr 2  20 rr rr             jsr     QINT
0019DDr 2               ; ----------------------------------------------------------------------------
0019DDr 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
0019DDr 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
0019DDr 2               ;
0019DDr 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
0019DDr 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
0019DDr 2               ; ----------------------------------------------------------------------------
0019DDr 2  A2 01                ldx     #$01
0019DFr 2  A5 A5                lda     INDX
0019E1r 2  18                   clc
0019E2r 2  69 0A                adc     #3*BYTES_FP-5
0019E4r 2  30 09                bmi     L3CD3
0019E6r 2  C9 0B                cmp     #3*BYTES_FP-4
0019E8r 2  B0 06                bcs     L3CD4
0019EAr 2  69 FF                adc     #$FF
0019ECr 2  AA                   tax
0019EDr 2  A9 02                lda     #$02
0019EFr 2               L3CD3:
0019EFr 2  38                   sec
0019F0r 2               L3CD4:
0019F0r 2  E9 02                sbc     #$02
0019F2r 2  85 A6                sta     EXPON
0019F4r 2  86 A5                stx     INDX
0019F6r 2  8A                   txa
0019F7r 2  F0 02                beq     L3CDF
0019F9r 2  10 13                bpl     L3CF2
0019FBr 2               L3CDF:
0019FBr 2  A4 B9                ldy     STRNG2
0019FDr 2  A9 2E                lda     #$2E
0019FFr 2  C8                   iny
001A00r 2  99 FF 01             sta     STACK2-1,y
001A03r 2  8A                   txa
001A04r 2  F0 06                beq     L3CF0
001A06r 2  A9 30                lda     #$30
001A08r 2  C8                   iny
001A09r 2  99 FF 01             sta     STACK2-1,y
001A0Cr 2               L3CF0:
001A0Cr 2  84 B9                sty     STRNG2
001A0Er 2               ; ----------------------------------------------------------------------------
001A0Er 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001A0Er 2               ; ----------------------------------------------------------------------------
001A0Er 2               L3CF2:
001A0Er 2  A0 00                ldy     #$00
001A10r 2               LDD3A:
001A10r 2  A2 80                ldx     #$80
001A12r 2               L3CF6:
001A12r 2  A5 AD                lda     FAC_LAST
001A14r 2  18                   clc
001A15r 2               .ifndef CONFIG_SMALL
001A15r 2  79 rr rr             adc     DECTBL+3,y
001A18r 2  85 AD                sta     FAC+4
001A1Ar 2  A5 AC                lda     FAC+3
001A1Cr 2               .endif
001A1Cr 2  79 rr rr             adc     DECTBL+2,y
001A1Fr 2  85 AC                sta     FAC+3
001A21r 2  A5 AB                lda     FAC+2
001A23r 2  79 rr rr             adc     DECTBL+1,y
001A26r 2  85 AB                sta     FAC+2
001A28r 2  A5 AA                lda     FAC+1
001A2Ar 2  79 rr rr             adc     DECTBL,y
001A2Dr 2  85 AA                sta     FAC+1
001A2Fr 2  E8                   inx
001A30r 2  B0 04                bcs     L3D1A
001A32r 2  10 DE                bpl     L3CF6
001A34r 2  30 02                bmi     L3D1C
001A36r 2               L3D1A:
001A36r 2  30 DA                bmi     L3CF6
001A38r 2               L3D1C:
001A38r 2  8A                   txa
001A39r 2  90 04                bcc     L3D23
001A3Br 2  49 FF                eor     #$FF
001A3Dr 2  69 0A                adc     #$0A
001A3Fr 2               L3D23:
001A3Fr 2  69 2F                adc     #$2F
001A41r 2  C8                   iny
001A42r 2  C8                   iny
001A43r 2  C8                   iny
001A44r 2               .ifndef CONFIG_SMALL
001A44r 2  C8                   iny
001A45r 2               .endif
001A45r 2  84 8F                sty     VARPNT
001A47r 2  A4 B9                ldy     STRNG2
001A49r 2  C8                   iny
001A4Ar 2  AA                   tax
001A4Br 2  29 7F                and     #$7F
001A4Dr 2  99 FF 01             sta     STACK2-1,y
001A50r 2  C6 A5                dec     INDX
001A52r 2  D0 06                bne     L3D3E
001A54r 2  A9 2E                lda     #$2E
001A56r 2  C8                   iny
001A57r 2  99 FF 01             sta     STACK2-1,y
001A5Ar 2               L3D3E:
001A5Ar 2  84 B9                sty     STRNG2
001A5Cr 2  A4 8F                ldy     VARPNT
001A5Er 2  8A                   txa
001A5Fr 2  49 FF                eor     #$FF
001A61r 2  29 80                and     #$80
001A63r 2  AA                   tax
001A64r 2  C0 24                cpy     #DECTBL_END-DECTBL
001A66r 2               .ifdef CONFIG_CBM_ALL
001A66r 2                       beq     LDD96
001A66r 2                       cpy     #$3C ; XXX
001A66r 2               .endif
001A66r 2  D0 AA                bne     L3CF6
001A68r 2               ; ----------------------------------------------------------------------------
001A68r 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
001A68r 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
001A68r 2               ; DECIMAL POINT.
001A68r 2               ; ----------------------------------------------------------------------------
001A68r 2               LDD96:
001A68r 2  A4 B9                ldy     STRNG2
001A6Ar 2               L3D4E:
001A6Ar 2  B9 FF 01             lda     STACK2-1,y
001A6Dr 2  88                   dey
001A6Er 2  C9 30                cmp     #$30
001A70r 2  F0 F8                beq     L3D4E
001A72r 2  C9 2E                cmp     #$2E
001A74r 2  F0 01                beq     L3D5B
001A76r 2  C8                   iny
001A77r 2               L3D5B:
001A77r 2  A9 2B                lda     #$2B
001A79r 2  A6 A6                ldx     EXPON
001A7Br 2  F0 2E                beq     L3D8F
001A7Dr 2  10 08                bpl     L3D6B
001A7Fr 2  A9 00                lda     #$00
001A81r 2  38                   sec
001A82r 2  E5 A6                sbc     EXPON
001A84r 2  AA                   tax
001A85r 2  A9 2D                lda     #$2D
001A87r 2               L3D6B:
001A87r 2  99 01 02             sta     STACK2+1,y
001A8Ar 2  A9 45                lda     #$45
001A8Cr 2  99 00 02             sta     STACK2,y
001A8Fr 2  8A                   txa
001A90r 2  A2 2F                ldx     #$2F
001A92r 2  38                   sec
001A93r 2               L3D77:
001A93r 2  E8                   inx
001A94r 2  E9 0A                sbc     #$0A
001A96r 2  B0 FB                bcs     L3D77
001A98r 2  69 3A                adc     #$3A
001A9Ar 2  99 03 02             sta     STACK2+3,y
001A9Dr 2  8A                   txa
001A9Er 2  99 02 02             sta     STACK2+2,y
001AA1r 2  A9 00                lda     #$00
001AA3r 2  99 04 02             sta     STACK2+4,y
001AA6r 2  F0 08                beq     L3D94
001AA8r 2               FOUT4:
001AA8r 2  99 FF 01             sta     STACK2-1,y
001AABr 2               L3D8F:
001AABr 2  A9 00                lda     #$00
001AADr 2  99 00 02             sta     STACK2,y
001AB0r 2               L3D94:
001AB0r 2  A9 00                lda     #<STACK2
001AB2r 2  A0 02                ldy     #>STACK2
001AB4r 2  60                   rts
001AB5r 2               
001AB5r 2               ; ----------------------------------------------------------------------------
001AB5r 2               CON_HALF:
001AB5r 2               .ifdef CONFIG_SMALL
001AB5r 2                       .byte   $80,$00,$00,$00
001AB5r 2               .else
001AB5r 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
001AB9r 2  00           
001ABAr 2               .endif
001ABAr 2               
001ABAr 2               ; ----------------------------------------------------------------------------
001ABAr 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001ABAr 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001ABAr 2               ; ----------------------------------------------------------------------------
001ABAr 2               DECTBL:
001ABAr 2               .ifdef CONFIG_SMALL
001ABAr 2                       .byte   $FE,$79,$60 ; -100000
001ABAr 2               		.byte	$00,$27,$10 ; 10000
001ABAr 2               		.byte	$FF,$FC,$18 ; -1000
001ABAr 2               		.byte	$00,$00,$64 ; 100
001ABAr 2               		.byte	$FF,$FF,$F6 ; -10
001ABAr 2               		.byte	$00,$00,$01 ; 1
001ABAr 2               .else
001ABAr 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
001ABEr 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
001AC2r 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001AC6r 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001ACAr 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001ACEr 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001AD2r 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001AD6r 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001ADAr 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001ADEr 2               .endif
001ADEr 2               DECTBL_END:
001ADEr 2               .ifdef CONFIG_CBM_ALL
001ADEr 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001ADEr 2               		.byte	$00,$03,$4B,$C0
001ADEr 2               		.byte	$FF,$FF,$73,$60
001ADEr 2               		.byte	$00,$00,$0E,$10
001ADEr 2               		.byte	$FF,$FF,$FD,$A8
001ADEr 2               		.byte	$00,$00,$00,$3C
001ADEr 2               .endif
001ADEr 2               .ifdef CONFIG_2
001ADEr 2               C_ZERO = CON_HALF + 2
001ADEr 2               .endif
001ADEr 2               
001ADEr 2               ; ----------------------------------------------------------------------------
001ADEr 2               ; "SQR" FUNCTION
001ADEr 2               ; ----------------------------------------------------------------------------
001ADEr 2               SQR:
001ADEr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001AE1r 2  A9 rr                lda     #<CON_HALF
001AE3r 2  A0 rr                ldy     #>CON_HALF
001AE5r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001AE8r 2               
001AE8r 2               ; ----------------------------------------------------------------------------
001AE8r 2               ; EXPONENTIATION OPERATION
001AE8r 2               ;
001AE8r 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001AE8r 2               ; ----------------------------------------------------------------------------
001AE8r 2               FPWRT:
001AE8r 2  F0 70                beq     EXP
001AEAr 2  A5 B1                lda     ARG
001AECr 2  D0 03                bne     L3DD5
001AEEr 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001AF1r 2               L3DD5:
001AF1r 2  A2 96                ldx     #TEMP3
001AF3r 2  A0 00                ldy     #$00
001AF5r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001AF8r 2  A5 B6                lda     ARGSIGN
001AFAr 2  10 0F                bpl     L3DEF
001AFCr 2  20 rr rr             jsr     INT
001AFFr 2  A9 96                lda     #TEMP3
001B01r 2  A0 00                ldy     #$00
001B03r 2  20 rr rr             jsr     FCOMP
001B06r 2  D0 03                bne     L3DEF
001B08r 2  98                   tya
001B09r 2  A4 06                ldy     CHARAC
001B0Br 2               L3DEF:
001B0Br 2  20 rr rr             jsr     MFA
001B0Er 2  98                   tya
001B0Fr 2  48                   pha
001B10r 2  20 rr rr             jsr     LOG
001B13r 2  A9 96                lda     #TEMP3
001B15r 2  A0 00                ldy     #$00
001B17r 2  20 rr rr             jsr     FMULT
001B1Ar 2  20 rr rr             jsr     EXP
001B1Dr 2  68                   pla
001B1Er 2  4A                   lsr     a
001B1Fr 2  90 0A                bcc     L3E0F
001B21r 2               
001B21r 2               ; ----------------------------------------------------------------------------
001B21r 2               ; NEGATE VALUE IN FAC
001B21r 2               ; ----------------------------------------------------------------------------
001B21r 2               NEGOP:
001B21r 2  A5 A9                lda     FAC
001B23r 2  F0 06                beq     L3E0F
001B25r 2  A5 AE                lda     FACSIGN
001B27r 2  49 FF                eor     #$FF
001B29r 2  85 AE                sta     FACSIGN
001B2Br 2               L3E0F:
001B2Br 2  60                   rts
001B2Cr 2               
001B2Cr 2               ; ----------------------------------------------------------------------------
001B2Cr 2               .ifdef CONFIG_SMALL
001B2Cr 2               CON_LOG_E:
001B2Cr 2                       .byte   $81,$38,$AA,$3B
001B2Cr 2               POLY_EXP:
001B2Cr 2               		.byte	$06
001B2Cr 2               		.byte	$74,$63,$90,$8C
001B2Cr 2               		.byte	$77,$23,$0C,$AB
001B2Cr 2               		.byte	$7A,$1E,$94,$00
001B2Cr 2               		.byte	$7C,$63,$42,$80
001B2Cr 2               		.byte	$7E,$75,$FE,$D0
001B2Cr 2               		.byte	$80,$31,$72,$15
001B2Cr 2               		.byte	$81,$00,$00,$00
001B2Cr 2               .else
001B2Cr 2               CON_LOG_E:
001B2Cr 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001B30r 2  29           
001B31r 2               POLY_EXP:
001B31r 2  07                   .byte   $07
001B32r 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001B36r 2  56           
001B37r 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001B3Br 2  1B           
001B3Cr 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001B40r 2  85           
001B41r 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001B45r 2  2A           
001B46r 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001B4Ar 2  0A           
001B4Br 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001B4Fr 2  C6           
001B50r 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001B54r 2  10           
001B55r 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001B59r 2  00           
001B5Ar 2               .endif
001B5Ar 2               
001B5Ar 2               ; ----------------------------------------------------------------------------
001B5Ar 2               ; "EXP" FUNCTION
001B5Ar 2               ;
001B5Ar 2               ; FAC = E ^ FAC
001B5Ar 2               ; ----------------------------------------------------------------------------
001B5Ar 2               EXP:
001B5Ar 2  A9 rr                lda     #<CON_LOG_E
001B5Cr 2  A0 rr                ldy     #>CON_LOG_E
001B5Er 2  20 rr rr             jsr     FMULT
001B61r 2  A5 B8                lda     FACEXTENSION
001B63r 2  69 50                adc     #$50
001B65r 2  90 03                bcc     L3E4E
001B67r 2  20 rr rr             jsr     INCREMENT_MANTISSA
001B6Ar 2               L3E4E:
001B6Ar 2  85 9E                sta     ARGEXTENSION
001B6Cr 2  20 rr rr             jsr     MAF
001B6Fr 2  A5 A9                lda     FAC
001B71r 2  C9 88                cmp     #$88
001B73r 2  90 03                bcc     L3E5C
001B75r 2               L3E59:
001B75r 2  20 rr rr             jsr     OUTOFRNG
001B78r 2               L3E5C:
001B78r 2  20 rr rr             jsr     INT
001B7Br 2  A5 06                lda     CHARAC
001B7Dr 2  18                   clc
001B7Er 2  69 81                adc     #$81
001B80r 2  F0 F3                beq     L3E59
001B82r 2  38                   sec
001B83r 2  E9 01                sbc     #$01
001B85r 2  48                   pha
001B86r 2  A2 05                ldx     #BYTES_FP
001B88r 2               L3E6C:
001B88r 2  B5 B1                lda     ARG,x
001B8Ar 2  B4 A9                ldy     FAC,x
001B8Cr 2  95 A9                sta     FAC,x
001B8Er 2  94 B1                sty     ARG,x
001B90r 2  CA                   dex
001B91r 2  10 F5                bpl     L3E6C
001B93r 2  A5 9E                lda     ARGEXTENSION
001B95r 2  85 B8                sta     FACEXTENSION
001B97r 2  20 rr rr             jsr     FSUBT
001B9Ar 2  20 rr rr             jsr     NEGOP
001B9Dr 2  A9 rr                lda     #<POLY_EXP
001B9Fr 2  A0 rr                ldy     #>POLY_EXP
001BA1r 2  20 rr rr             jsr     POLYNOMIAL
001BA4r 2  A9 00                lda     #$00
001BA6r 2  85 B7                sta     SGNCPR
001BA8r 2  68                   pla
001BA9r 2  20 rr rr             jsr     ADD_EXPONENTS1
001BACr 2  60                   rts
001BADr 2               
001BADr 2               ; ----------------------------------------------------------------------------
001BADr 2               ; ODD POLYNOMIAL SUBROUTINE
001BADr 2               ;
001BADr 2               ; F(X) = X * P(X^2)
001BADr 2               ;
001BADr 2               ; WHERE:  X IS VALUE IN FAC
001BADr 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001BADr 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001BADr 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001BADr 2               ;
001BADr 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001BADr 2               ; ----------------------------------------------------------------------------
001BADr 2               POLYNOMIAL_ODD:
001BADr 2  85 B9                sta     STRNG2
001BAFr 2  84 BA                sty     STRNG2+1
001BB1r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001BB4r 2  A9 9F                lda     #TEMP1X
001BB6r 2  20 rr rr             jsr     FMULT
001BB9r 2  20 rr rr             jsr     SERMAIN
001BBCr 2  A9 9F                lda     #TEMP1X
001BBEr 2  A0 00                ldy     #$00
001BC0r 2  4C rr rr             jmp     FMULT
001BC3r 2               
001BC3r 2               ; ----------------------------------------------------------------------------
001BC3r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001BC3r 2               ;
001BC3r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001BC3r 2               ;
001BC3r 2               ; WHERE:  X IS VALUE IN FAC
001BC3r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001BC3r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001BC3r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001BC3r 2               ; ----------------------------------------------------------------------------
001BC3r 2               POLYNOMIAL:
001BC3r 2  85 B9                sta     STRNG2
001BC5r 2  84 BA                sty     STRNG2+1
001BC7r 2               SERMAIN:
001BC7r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001BCAr 2  B1 B9                lda     (STRNG2),y
001BCCr 2  85 AF                sta     SERLEN
001BCEr 2  A4 B9                ldy     STRNG2
001BD0r 2  C8                   iny
001BD1r 2  98                   tya
001BD2r 2  D0 02                bne     L3EBA
001BD4r 2  E6 BA                inc     STRNG2+1
001BD6r 2               L3EBA:
001BD6r 2  85 B9                sta     STRNG2
001BD8r 2  A4 BA                ldy     STRNG2+1
001BDAr 2               L3EBE:
001BDAr 2  20 rr rr             jsr     FMULT
001BDDr 2  A5 B9                lda     STRNG2
001BDFr 2  A4 BA                ldy     STRNG2+1
001BE1r 2  18                   clc
001BE2r 2  69 05                adc     #BYTES_FP
001BE4r 2  90 01                bcc     L3ECB
001BE6r 2  C8                   iny
001BE7r 2               L3ECB:
001BE7r 2  85 B9                sta     STRNG2
001BE9r 2  84 BA                sty     STRNG2+1
001BEBr 2  20 rr rr             jsr     FADD
001BEEr 2  A9 A4                lda     #TEMP2
001BF0r 2  A0 00                ldy     #$00
001BF2r 2  C6 AF                dec     SERLEN
001BF4r 2  D0 E4                bne     L3EBE
001BF6r 2               RTS19:
001BF6r 2  60                   rts
001BF7r 2               
001BF7r 1               .include "chrget.s"
001BF7r 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 C6                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 C7                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001BF7r 2               
001BF7r 2               ; ----------------------------------------------------------------------------
001BF7r 2               ; "RND" FUNCTION
001BF7r 2               ; ----------------------------------------------------------------------------
001BF7r 2               
001BF7r 2               .ifdef KBD
001BF7r 2               RND:
001BF7r 2                       ldx     #$10
001BF7r 2                       jsr     SIGN
001BF7r 2                       beq     LFC26
001BF7r 2                       bmi     LFC10
001BF7r 2                       lda     RNDSEED
001BF7r 2                       ldy     RNDSEED+1
001BF7r 2               LFBFA:
001BF7r 2                       sta     FAC+2
001BF7r 2                       sty     FAC+1
001BF7r 2               LFBFE:
001BF7r 2                       asl     a
001BF7r 2                       asl     a
001BF7r 2                       eor     FAC+2
001BF7r 2                       asl     a
001BF7r 2                       eor     FAC+1
001BF7r 2                       asl     a
001BF7r 2                       asl     a
001BF7r 2                       asl     a
001BF7r 2                       asl     a
001BF7r 2                       eor     FAC+1
001BF7r 2                       asl     a
001BF7r 2                       rol     FAC+2
001BF7r 2                       rol     FAC+1
001BF7r 2               LFC10:
001BF7r 2                       lda     FAC+2
001BF7r 2                       dex
001BF7r 2                       bne     LFBFE
001BF7r 2                       sta     RNDSEED
001BF7r 2                       sta     FAC+3
001BF7r 2                       lda     FAC+1
001BF7r 2                       sta     RNDSEED+1
001BF7r 2                       lda     #$80
001BF7r 2                       sta     FAC
001BF7r 2                       stx     FACSIGN
001BF7r 2                       jmp     NORMALIZE_FAC2
001BF7r 2               LFC26:
001BF7r 2                       ldy     $03CA
001BF7r 2                       lda     $03C7
001BF7r 2                       ora     #$01
001BF7r 2               GOMOVMF:
001BF7r 2                       bne     LFBFA
001BF7r 2                       .byte   $F0
001BF7r 2               .else
001BF7r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001BF7r 2               ; (non CONFIG_SMALL)
001BF7r 2               CONRND1:
001BF7r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001BFBr 2               CONRND2:
001BFBr 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001BFFr 2               RND:
001BFFr 2  20 rr rr             jsr     SIGN
001C02r 2               .ifdef CONFIG_CBM_ALL
001C02r 2                       bmi     L3F01
001C02r 2                       bne     LDF63
001C02r 2                       lda     ENTROPY
001C02r 2                       sta     FAC+1
001C02r 2                       lda     ENTROPY+4
001C02r 2                       sta     FAC+2
001C02r 2                       lda     ENTROPY+1
001C02r 2                       sta     FAC+3
001C02r 2                       lda     ENTROPY+5
001C02r 2                       sta     FAC+4
001C02r 2                       jmp     LDF88
001C02r 2               LDF63:
001C02r 2               .else
001C02r 2  AA                   tax
001C03r 2  30 18                bmi     L3F01
001C05r 2               .endif
001C05r 2  A9 D7                lda     #<RNDSEED
001C07r 2  A0 00                ldy     #>RNDSEED
001C09r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001C0Cr 2               .ifndef CONFIG_CBM_ALL
001C0Cr 2  8A                   txa
001C0Dr 2  F0 E7                beq     RTS19
001C0Fr 2               .endif
001C0Fr 2  A9 rr                lda     #<CONRND1
001C11r 2  A0 rr                ldy     #>CONRND1
001C13r 2  20 rr rr             jsr     FMULT
001C16r 2  A9 rr                lda     #<CONRND2
001C18r 2  A0 rr                ldy     #>CONRND2
001C1Ar 2  20 rr rr             jsr     FADD
001C1Dr 2               L3F01:
001C1Dr 2  A6 AD                ldx     FAC_LAST
001C1Fr 2  A5 AA                lda     FAC+1
001C21r 2  85 AD                sta     FAC_LAST
001C23r 2  86 AA                stx     FAC+1
001C25r 2               .ifdef CONFIG_CBM_ALL
001C25r 2                       ldx     FAC+2
001C25r 2                       lda     FAC+3
001C25r 2                       sta     FAC+2
001C25r 2                       stx     FAC+3
001C25r 2               LDF88:
001C25r 2               .endif
001C25r 2  A9 00                lda     #$00
001C27r 2  85 AE                sta     FACSIGN
001C29r 2  A5 A9                lda     FAC
001C2Br 2  85 B8                sta     FACEXTENSION
001C2Dr 2  A9 80                lda     #$80
001C2Fr 2  85 A9                sta     FAC
001C31r 2  20 rr rr             jsr     NORMALIZE_FAC2
001C34r 2  A2 D7                ldx     #<RNDSEED
001C36r 2  A0 00                ldy     #>RNDSEED
001C38r 2               GOMOVMF:
001C38r 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001C3Br 2               .endif
001C3Br 2               
001C3Br 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$58
00001Cr 2  58           
00001Dr 2                   .else
00001Dr 2                       .byte   $80,$4F,$C7,$52,$59
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001C3Br 2               
001C3Br 2               .ifndef SYM1
001C3Br 2               SIN_COS_TAN_ATN:
001C3Br 2               ; ----------------------------------------------------------------------------
001C3Br 2               ; "COS" FUNCTION
001C3Br 2               ; ----------------------------------------------------------------------------
001C3Br 2               COS:
001C3Br 2  A9 rr                lda     #<CON_PI_HALF
001C3Dr 2  A0 rr                ldy     #>CON_PI_HALF
001C3Fr 2  20 rr rr             jsr     FADD
001C42r 2               
001C42r 2               ; ----------------------------------------------------------------------------
001C42r 2               ; "SIN" FUNCTION
001C42r 2               ; ----------------------------------------------------------------------------
001C42r 2               SIN:
001C42r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001C45r 2  A9 rr                lda     #<CON_PI_DOUB
001C47r 2  A0 rr                ldy     #>CON_PI_DOUB
001C49r 2  A6 B6                ldx     ARGSIGN
001C4Br 2  20 rr rr             jsr     DIV
001C4Er 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001C51r 2  20 rr rr             jsr     INT
001C54r 2  A9 00                lda     #$00
001C56r 2  85 B7                sta     STRNG1
001C58r 2  20 rr rr             jsr     FSUBT
001C5Br 2               ; ----------------------------------------------------------------------------
001C5Br 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001C5Br 2               ;
001C5Br 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001C5Br 2               ;
001C5Br 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001C5Br 2               ; ----------------------------------------------------------------------------
001C5Br 2  A9 rr                lda     #<QUARTER
001C5Dr 2  A0 rr                ldy     #>QUARTER
001C5Fr 2  20 rr rr             jsr     FSUB
001C62r 2  A5 AE                lda     FACSIGN
001C64r 2  48                   pha
001C65r 2  10 0D                bpl     SIN1
001C67r 2  20 rr rr             jsr     FADDH
001C6Ar 2  A5 AE                lda     FACSIGN
001C6Cr 2  30 09                bmi     L3F5B
001C6Er 2  A5 0F                lda     CPRMASK
001C70r 2  49 FF                eor     #$FF
001C72r 2  85 0F                sta     CPRMASK
001C74r 2               ; ----------------------------------------------------------------------------
001C74r 2               ; IF FALL THRU, RANGE IS 0...1/2
001C74r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001C74r 2               ; ----------------------------------------------------------------------------
001C74r 2               SIN1:
001C74r 2  20 rr rr             jsr     NEGOP
001C77r 2               ; ----------------------------------------------------------------------------
001C77r 2               ; IF FALL THRU, RANGE IS -1/2...0
001C77r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001C77r 2               ; ----------------------------------------------------------------------------
001C77r 2               L3F5B:
001C77r 2  A9 rr                lda     #<QUARTER
001C79r 2  A0 rr                ldy     #>QUARTER
001C7Br 2  20 rr rr             jsr     FADD
001C7Er 2  68                   pla
001C7Fr 2  10 03                bpl     L3F68
001C81r 2  20 rr rr             jsr     NEGOP
001C84r 2               L3F68:
001C84r 2  A9 rr                lda     #<POLY_SIN
001C86r 2  A0 rr                ldy     #>POLY_SIN
001C88r 2  4C rr rr             jmp     POLYNOMIAL_ODD
001C8Br 2               
001C8Br 2               ; ----------------------------------------------------------------------------
001C8Br 2               ; "TAN" FUNCTION
001C8Br 2               ;
001C8Br 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001C8Br 2               ; ----------------------------------------------------------------------------
001C8Br 2               TAN:
001C8Br 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001C8Er 2  A9 00                lda     #$00
001C90r 2  85 0F                sta     CPRMASK
001C92r 2  20 rr rr             jsr     SIN
001C95r 2  A2 96                ldx     #TEMP3
001C97r 2  A0 00                ldy     #$00
001C99r 2  20 rr rr             jsr     GOMOVMF
001C9Cr 2  A9 9F                lda     #TEMP1+(5-BYTES_FP)
001C9Er 2  A0 00                ldy     #$00
001CA0r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001CA3r 2  A9 00                lda     #$00
001CA5r 2  85 AE                sta     FACSIGN
001CA7r 2  A5 0F                lda     CPRMASK
001CA9r 2  20 rr rr             jsr     TAN1
001CACr 2  A9 96                lda     #TEMP3
001CAEr 2  A0 00                ldy     #$00
001CB0r 2  4C rr rr             jmp     FDIV
001CB3r 2               TAN1:
001CB3r 2  48                   pha
001CB4r 2  4C rr rr             jmp     SIN1
001CB7r 2               
001CB7r 2               ; ----------------------------------------------------------------------------
001CB7r 2               .ifdef CONFIG_SMALL
001CB7r 2               CON_PI_HALF:
001CB7r 2                       .byte   $81,$49,$0F,$DB
001CB7r 2               CON_PI_DOUB:
001CB7r 2                       .byte   $83,$49,$0F,$DB
001CB7r 2               QUARTER:
001CB7r 2                       .byte   $7F,$00,$00,$00
001CB7r 2               POLY_SIN:
001CB7r 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001CB7r 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001CB7r 2                       .byte   $E1,$83,$49,$0F,$DB
001CB7r 2               .else
001CB7r 2               CON_PI_HALF:
001CB7r 2  81 49 0F DA          .byte   $81,$49,$0F,$DA,$A2
001CBBr 2  A2           
001CBCr 2               CON_PI_DOUB:
001CBCr 2  83 49 0F DA          .byte   $83,$49,$0F,$DA,$A2
001CC0r 2  A2           
001CC1r 2               QUARTER:
001CC1r 2  7F 00 00 00          .byte   $7F,$00,$00,$00,$00
001CC5r 2  00           
001CC6r 2               POLY_SIN:
001CC6r 2  05 84 E6 1A          .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001CCAr 2  2D 1B 86 28  
001CCEr 2  07 FB F8 87          .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001CD2r 2  99 68 89 01  
001CD6r 2  87 23 35 DF          .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001CDAr 2  E1 86 A5 5D  
001CDEr 2  E7 28 83 49          .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001CE2r 2  0F DA A2     
001CE5r 2                 .ifndef CONFIG_11
001CE5r 2               ; no easter egg text before BASIC 1.1
001CE5r 2                 .elseif !.def(CONFIG_2A)
001CE5r 2               ; ASCII encoded easter egg
001CE5r 2               MICROSOFT:
001CE5r 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001CE5r 2                       .byte   $CE,$CA
001CE5r 2                 .else
001CE5r 2               ; PET encoded easter egg text since CBM2
001CE5r 2               MICROSOFT:
001CE5r 2  A1 54 46 8F          .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001CE9r 2  13 8F 52 43  
001CEDr 2  89 CD                .byte   $89,$CD
001CEFr 2                 .endif
001CEFr 2               .endif
001CEFr 2               
001CEFr 2               .ifndef AIM65
001CEFr 2               ; ----------------------------------------------------------------------------
001CEFr 2               ; "ATN" FUNCTION
001CEFr 2               ; ----------------------------------------------------------------------------
001CEFr 2               ATN:
001CEFr 2                       lda     FACSIGN
001CEFr 2                       pha
001CEFr 2                       bpl     L3FDB
001CEFr 2                       jsr     NEGOP
001CEFr 2               L3FDB:
001CEFr 2                       lda     FAC
001CEFr 2                       pha
001CEFr 2                       cmp     #$81
001CEFr 2                       bcc     L3FE9
001CEFr 2                       lda     #<CON_ONE
001CEFr 2                       ldy     #>CON_ONE
001CEFr 2                       jsr     FDIV
001CEFr 2               ; ----------------------------------------------------------------------------
001CEFr 2               ; 0 <= X <= 1
001CEFr 2               ; 0 <= ATN(X) <= PI/8
001CEFr 2               ; ----------------------------------------------------------------------------
001CEFr 2               L3FE9:
001CEFr 2                       lda     #<POLY_ATN
001CEFr 2                       ldy     #>POLY_ATN
001CEFr 2                       jsr     POLYNOMIAL_ODD
001CEFr 2                       pla
001CEFr 2                       cmp     #$81
001CEFr 2                       bcc     L3FFC
001CEFr 2                       lda     #<CON_PI_HALF
001CEFr 2                       ldy     #>CON_PI_HALF
001CEFr 2                       jsr     FSUB
001CEFr 2               L3FFC:
001CEFr 2                       pla
001CEFr 2                       bpl     L4002
001CEFr 2                       jmp     NEGOP
001CEFr 2               L4002:
001CEFr 2                       rts
001CEFr 2               
001CEFr 2               ; ----------------------------------------------------------------------------
001CEFr 2               POLY_ATN:
001CEFr 2               .ifdef CONFIG_SMALL
001CEFr 2                       .byte   $08
001CEFr 2               		.byte	$78,$3A,$C5,$37
001CEFr 2               		.byte	$7B,$83,$A2,$5C
001CEFr 2               		.byte	$7C,$2E,$DD,$4D
001CEFr 2               		.byte	$7D,$99,$B0,$1E
001CEFr 2               		.byte	$7D,$59,$ED,$24
001CEFr 2               		.byte	$7E,$91,$72,$00
001CEFr 2               		.byte	$7E,$4C,$B9,$73
001CEFr 2               		.byte	$7F,$AA,$AA,$53
001CEFr 2               		.byte	$81,$00,$00,$00
001CEFr 2               .else
001CEFr 2                       .byte   $0B
001CEFr 2               		.byte	$76,$B3,$83,$BD,$D3
001CEFr 2               		.byte	$79,$1E,$F4,$A6,$F5
001CEFr 2               		.byte	$7B,$83,$FC,$B0,$10
001CEFr 2                       .byte   $7C,$0C,$1F,$67,$CA
001CEFr 2               		.byte	$7C,$DE,$53,$CB,$C1
001CEFr 2               		.byte	$7D,$14,$64,$70,$4C
001CEFr 2               		.byte	$7D,$B7,$EA,$51,$7A
001CEFr 2               		.byte	$7D,$63,$30,$88,$7E
001CEFr 2               		.byte	$7E,$92,$44,$99,$3A
001CEFr 2               		.byte	$7E,$4C,$CC,$91,$C7
001CEFr 2               		.byte	$7F,$AA,$AA,$AA,$13
001CEFr 2                       .byte   $81,$00,$00,$00,$00
001CEFr 2               .endif
001CEFr 2               
001CEFr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001CEFr 2               		.byte	$00 ; XXX
001CEFr 2               .endif
001CEFr 2               .endif
001CEFr 2               .endif
001CEFr 2               
001CEFr 1               .include "init.s"
001CEFr 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2                   .ifndef AIM65
000000r 2                     .ifndef SYM1
000000r 2                       lda     #<QT_WRITTEN_BY
000000r 2                       ldy     #>QT_WRITTEN_BY
000000r 2                       jsr     STROUT
000000r 2                     .endif
000000r 2                   .endif
000000r 2                 .endif
000000r 2               .endif
000000r 2               COLD_START:
000000r 2               .ifdef SYM1
000000r 2                       jsr     ACCESS
000000r 2               .endif
000000r 2               .ifdef KBD
000000r 2                       lda     #<LFD81
000000r 2                       sta     $03A0
000000r 2                       lda     #>LFD81
000000r 2                       sta     $03A1
000000r 2                       lda     #$20
000000r 2                       sta     $0480
000000r 2                       lda     $0352
000000r 2                       sta     $04
000000r 2                       lda     $0353
000000r 2                       sta     $05
000000r 2               .else
000000r 2                 .ifndef CBM2
000000r 2  A2 FF                ldx     #$FF
000002r 2  86 82                stx     CURLIN+1
000004r 2                 .endif
000004r 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
000004r 2                       ldx     #$FB
000004r 2                 .elseif .def(AIM65)
000004r 2  A2 FE                ldx     #$FE
000006r 2                 .endif
000006r 2  9A                   txs
000007r 2                 .ifndef CONFIG_CBM_ALL
000007r 2  A9 rr                lda     #<COLD_START
000009r 2  A0 rr                ldy     #>COLD_START
00000Br 2  85 01                sta     GORESTART+1
00000Dr 2  84 02                sty     GORESTART+2
00000Fr 2                   .ifndef AIM65
00000Fr 2                       sta     GOSTROUT+1
00000Fr 2                       sty     GOSTROUT+2
00000Fr 2                       lda     #<AYINT
00000Fr 2                       ldy     #>AYINT
00000Fr 2                       sta     GOAYINT
00000Fr 2                       sty     GOAYINT+1
00000Fr 2                       lda     #<GIVAYF
00000Fr 2                       ldy     #>GIVAYF
00000Fr 2                       sta     GOGIVEAYF
00000Fr 2                       sty     GOGIVEAYF+1
00000Fr 2                   .endif
00000Fr 2                 .endif
00000Fr 2  A9 4C                lda     #$4C
000011r 2                 .ifdef CONFIG_CBM_ALL
000011r 2                       sta     JMPADRS
000011r 2                 .endif
000011r 2  85 00                sta     GORESTART
000013r 2                 .ifdef AIM65
000013r 2  85 9C                sta     JMPADRS
000015r 2  85 BB                sta     ATN
000017r 2  85 03                sta     GOSTROUT
000019r 2                 .else
000019r 2                 .ifndef CONFIG_CBM_ALL
000019r 2                       sta     GOSTROUT
000019r 2                       sta     JMPADRS
000019r 2                 .endif
000019r 2                 .ifdef SYM1
000019r 2                       sta     USR1
000019r 2                       sta     USR3
000019r 2                       sta     USR2
000019r 2                 .endif
000019r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000019r 2                       sta     USR
000019r 2                 .endif
000019r 2                 .endif
000019r 2               
000019r 2                 .ifndef CONFIG_RAM
000019r 2                   .ifdef APPLE
000019r 2                         lda     #<USR_FUNC
000019r 2                         ldy     #>USR_FUNC
000019r 2                   .else
000019r 2  A9 rr                  lda     #<IQERR
00001Br 2  A0 rr                  ldy     #>IQERR
00001Dr 2                   .endif
00001Dr 2                   .ifdef AIM65
00001Dr 2  85 BC                  sta     ATN+1
00001Fr 2  84 BD                  sty     ATN+2
000021r 2  85 04                  sta     GOSTROUT+1
000023r 2  84 05                  sty     GOSTROUT+2
000025r 2                   .else
000025r 2                         sta     USR+1
000025r 2                         sty     USR+2
000025r 2                     .ifdef SYM1
000025r 2                         sta     USR1+1
000025r 2                         sty     USR1+2
000025r 2                         lda     #<DUMPT
000025r 2                         ldy     #>DUMPT
000025r 2                         sta     USR2+1
000025r 2                         sty     USR2+2
000025r 2                         lda     #<L8C78
000025r 2                         ldy     #>L8C78
000025r 2                         sta     USR3+1
000025r 2                         sty     USR3+2
000025r 2                     .endif
000025r 2                   .endif
000025r 2                 .endif
000025r 2                 .ifndef CBM1
000025r 2  A9 14                lda     #WIDTH
000027r 2  85 12                sta     Z17
000029r 2  A9 0A                lda     #WIDTH2
00002Br 2  85 13                sta     Z18
00002Dr 2                 .endif
00002Dr 2                 .ifdef EATER
00002Dr 2                       jsr     LCDINIT
00002Dr 2                 .endif
00002Dr 2               .endif
00002Dr 2               
00002Dr 2               ; All non-CONFIG_SMALL versions of BASIC have
00002Dr 2               ; the same bug here: While the number of bytes
00002Dr 2               ; to be copied is correct for CONFIG_SMALL,
00002Dr 2               ; it is one byte short on non-CONFIG_SMALL:
00002Dr 2               ; It seems the "ldx" value below has been
00002Dr 2               ; hardcoded. So on these configurations,
00002Dr 2               ; the last byte of GENERIC_RNDSEED, which
00002Dr 2               ; is 5 bytes instead of 4, does not get copied -
00002Dr 2               ; which is nothing major, because it is just
00002Dr 2               ; the least significant 8 bits of the mantissa
00002Dr 2               ; of the random number seed.
00002Dr 2               ; KBD added three bytes to CHRGET and removed
00002Dr 2               ; the random number seed, but only adjusted
00002Dr 2               ; the number of bytes by adding 3 - this
00002Dr 2               ; copies four bytes too many, which is no
00002Dr 2               ; problem.
00002Dr 2               .ifdef CONFIG_SMALL
00002Dr 2                 .ifdef KBD
00002Dr 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
00002Dr 2                 .else
00002Dr 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
00002Dr 2                 .endif
00002Dr 2               .else
00002Dr 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
00002Fr 2               .endif
00002Fr 2               L4098:
00002Fr 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000032r 2  95 BE                sta     CHRGET-1,x
000034r 2  CA                   dex
000035r 2  D0 F8                bne     L4098
000037r 2               .ifdef CONFIG_2
000037r 2  A9 03                lda     #$03
000039r 2  85 9B                sta     DSCLEN
00003Br 2               .endif
00003Br 2               .ifndef KBD
00003Br 2  8A                   txa
00003Cr 2  85 B0                sta     SHIFTSIGNEXT
00003Er 2                 .ifdef CONFIG_CBM_ALL
00003Er 2                       sta     CURDVC
00003Er 2                 .endif
00003Er 2  85 60                sta     LASTPT+1
000040r 2                 .ifndef AIM65
000040r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000040r 2                       sta     Z15
000040r 2                 .endif
000040r 2                 .endif
000040r 2                 .ifndef CONFIG_11
000040r 2                       sta     POSX
000040r 2                 .endif
000040r 2  48                   pha
000041r 2  85 10                sta     Z14
000043r 2                 .ifndef CBM2
000043r 2                  .ifndef AIM65
000043r 2                  .ifndef SYM1
000043r 2                   .ifndef MICROTAN
000043r 2                       lda     #$03
000043r 2                       sta     DSCLEN
000043r 2                   .endif
000043r 2                  .endif
000043r 2                  .endif
000043r 2                   .ifndef CONFIG_11
000043r 2                       lda     #$2C
000043r 2                       sta     LINNUM+1
000043r 2                   .endif
000043r 2  20 rr rr             jsr     CRDO
000046r 2                 .endif
000046r 2                 .ifdef CBM2
000046r 2                       inx
000046r 2                       stx     INPUTBUFFER-3
000046r 2                       stx     INPUTBUFFER-4
000046r 2                 .endif
000046r 2                 .ifdef APPLE
000046r 2                       lda     #$01
000046r 2                       sta     INPUTBUFFER-3
000046r 2                       sta     INPUTBUFFER-4
000046r 2                 .endif
000046r 2  A2 61                ldx     #TEMPST
000048r 2  86 5E                stx     TEMPPT
00004Ar 2               .ifndef CONFIG_CBM_ALL
00004Ar 2  A9 rr                lda     #<QT_MEMORY_SIZE
00004Cr 2  A0 rr                ldy     #>QT_MEMORY_SIZE
00004Er 2  20 rr rr             jsr     STROUT
000051r 2                 .ifdef APPLE
000051r 2                       jsr     INLINX
000051r 2                 .else
000051r 2  20 rr rr             jsr     NXIN
000054r 2                 .endif
000054r 2  86 C6                stx     TXTPTR
000056r 2  84 C7                sty     TXTPTR+1
000058r 2  20 BF 00             jsr     CHRGET
00005Br 2                 .ifndef AIM65
00005Br 2                   .ifndef SYM1
00005Br 2                       cmp     #$41
00005Br 2                       beq     PR_WRITTEN_BY
00005Br 2                   .endif
00005Br 2                 .endif
00005Br 2  A8                   tay
00005Cr 2  D0 2B                bne     L40EE
00005Er 2               .endif
00005Er 2               .ifndef CBM2
00005Er 2  A9 11                lda     #<RAMSTART2
000060r 2               .endif
000060r 2  A0 02                ldy     #>RAMSTART2
000062r 2               .ifdef CONFIG_2
000062r 2  85 73                sta     TXTTAB
000064r 2  84 74                sty     TXTTAB+1
000066r 2               .endif
000066r 2  85 14                sta     LINNUM
000068r 2  84 15                sty     LINNUM+1
00006Ar 2               .ifdef CBM2
00006Ar 2               		tay
00006Ar 2               .else
00006Ar 2  A0 00                ldy     #$00
00006Cr 2               .endif
00006Cr 2               L40D7:
00006Cr 2  E6 14                inc     LINNUM
00006Er 2  D0 08                bne     L40DD
000070r 2  E6 15                inc     LINNUM+1
000072r 2               .ifdef CBM1
000072r 2               ; CBM: hard RAM top limit is $8000
000072r 2                       lda     LINNUM+1
000072r 2                       cmp     #$80
000072r 2                       beq     L40FA
000072r 2               .endif
000072r 2               .ifdef CBM2
000072r 2               ; optimized version of the CBM1 code
000072r 2                       bmi     L40FA
000072r 2               .endif
000072r 2               .if .def(AIM65)
000072r 2               ; AIM65: hard RAM top limit is $A000
000072r 2  A5 15                lda     LINNUM+1
000074r 2  C9 A0                cmp     #$A0
000076r 2  F0 1D                beq     L40FA
000078r 2               .endif
000078r 2               L40DD:
000078r 2               .ifdef CONFIG_2
000078r 2  A9 55                lda     #$55 ; 01010101 / 10101010
00007Ar 2               .else
00007Ar 2                       lda     #$92 ; 10010010 / 00100100
00007Ar 2               .endif
00007Ar 2  91 14                sta     (LINNUM),y
00007Cr 2  D1 14                cmp     (LINNUM),y
00007Er 2  D0 15                bne     L40FA
000080r 2  0A                   asl     a
000081r 2  91 14                sta     (LINNUM),y
000083r 2  D1 14                cmp     (LINNUM),y
000085r 2               .ifdef CONFIG_CBM_ALL
000085r 2                       beq     L40D7
000085r 2               .else
000085r 2                 .ifndef CONFIG_11
000085r 2                       beq     L40D7; old: faster
000085r 2                       bne     L40FA
000085r 2                 .else
000085r 2  D0 0E                bne     L40FA; new: slower
000087r 2  F0 E3                beq     L40D7
000089r 2                 .endif
000089r 2               L40EE:
000089r 2  20 C5 00             jsr     CHRGOT
00008Cr 2  20 rr rr             jsr     LINGET
00008Fr 2  A8                   tay
000090r 2  F0 03                beq     L40FA
000092r 2  4C rr rr             jmp     SYNERR
000095r 2               .endif
000095r 2               L40FA:
000095r 2  A5 14                lda     LINNUM
000097r 2  A4 15                ldy     LINNUM+1
000099r 2  85 7F                sta     MEMSIZ
00009Br 2  84 80                sty     MEMSIZ+1
00009Dr 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
00009Dr 2                       sta     FRETOP
00009Dr 2                       sty     FRETOP+1
00009Dr 2               .endif
00009Dr 2               L4106:
00009Dr 2               .ifndef CONFIG_CBM_ALL
00009Dr 2                 .ifdef APPLE
00009Dr 2                       lda     #$FF
00009Dr 2                       jmp     L2829
00009Dr 2                       .word	STROUT ; PATCH!
00009Dr 2                       jsr     NXIN
00009Dr 2                 .else
00009Dr 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
00009Fr 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
0000A1r 2  20 rr rr             jsr     STROUT
0000A4r 2  20 rr rr             jsr     NXIN
0000A7r 2                 .endif
0000A7r 2  86 C6                stx     TXTPTR
0000A9r 2  84 C7                sty     TXTPTR+1
0000ABr 2  20 BF 00             jsr     CHRGET
0000AEr 2  A8                   tay
0000AFr 2  F0 1C                beq     L4136
0000B1r 2  20 rr rr             jsr     LINGET
0000B4r 2  A5 15                lda     LINNUM+1
0000B6r 2  D0 E5                bne     L4106
0000B8r 2  A5 14                lda     LINNUM
0000BAr 2  C9 10                cmp     #$10
0000BCr 2  90 DF                bcc     L4106
0000BEr 2               L2829:
0000BEr 2  85 12                sta     Z17
0000C0r 2               L4129:
0000C0r 2                 .ifdef AIM65
0000C0r 2  E9 0A                sbc     #$0A
0000C2r 2                 .else
0000C2r 2                       sbc     #$0E
0000C2r 2                 .endif
0000C2r 2  B0 FC                bcs     L4129
0000C4r 2  49 FF                eor     #$FF
0000C6r 2                 .ifdef AIM65
0000C6r 2  E9 08                sbc     #$08
0000C8r 2                 .else
0000C8r 2                       sbc     #$0C
0000C8r 2                 .endif
0000C8r 2  18                   clc
0000C9r 2  65 12                adc     Z17
0000CBr 2  85 13                sta     Z18
0000CDr 2               .endif
0000CDr 2               L4136:
0000CDr 2               .ifdef CONFIG_RAM
0000CDr 2                       lda     #<QT_WANT
0000CDr 2                       ldy     #>QT_WANT
0000CDr 2                       jsr     STROUT
0000CDr 2                       jsr     NXIN
0000CDr 2                       stx     TXTPTR
0000CDr 2                       sty     TXTPTR+1
0000CDr 2                       jsr     CHRGET
0000CDr 2                       ldx     #<RAMSTART1
0000CDr 2                       ldy     #>RAMSTART1
0000CDr 2                       cmp     #'Y'
0000CDr 2                       beq     L4183
0000CDr 2                       cmp     #'A'
0000CDr 2                       beq     L4157
0000CDr 2                       cmp     #'N'
0000CDr 2                       bne     L4136
0000CDr 2               L4157:
0000CDr 2                       ldx     #<IQERR
0000CDr 2                       ldy     #>IQERR
0000CDr 2                       stx     UNFNC_ATN
0000CDr 2                       sty     UNFNC_ATN+1
0000CDr 2                       ldx     #<ATN	; overwrite starting
0000CDr 2                       ldy     #>ATN	; with ATN
0000CDr 2                       cmp     #'A'
0000CDr 2                       beq     L4183
0000CDr 2                       ldx     #<IQERR
0000CDr 2                       ldy     #>IQERR
0000CDr 2                       stx     UNFNC_COS
0000CDr 2                       sty     UNFNC_COS+1
0000CDr 2                       stx     UNFNC_TAN
0000CDr 2                       sty     UNFNC_TAN+1
0000CDr 2                       stx     UNFNC_SIN
0000CDr 2                       sty     UNFNC_SIN+1
0000CDr 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000CDr 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000CDr 2               L4183:
0000CDr 2               .else
0000CDr 2  A2 11                ldx     #<RAMSTART2
0000CFr 2  A0 02                ldy     #>RAMSTART2
0000D1r 2               .endif
0000D1r 2  86 73                stx     TXTTAB
0000D3r 2  84 74                sty     TXTTAB+1
0000D5r 2  A0 00                ldy     #$00
0000D7r 2  98                   tya
0000D8r 2  91 73                sta     (TXTTAB),y
0000DAr 2  E6 73                inc     TXTTAB
0000DCr 2               .ifndef CBM2
0000DCr 2  D0 02                bne     L4192
0000DEr 2  E6 74                inc     TXTTAB+1
0000E0r 2               L4192:
0000E0r 2               .endif
0000E0r 2               .if CONFIG_SCRTCH_ORDER = 1
0000E0r 2  20 rr rr             jsr     SCRTCH
0000E3r 2               .endif
0000E3r 2  A5 73                lda     TXTTAB
0000E5r 2  A4 74                ldy     TXTTAB+1
0000E7r 2  20 rr rr             jsr     REASON
0000EAr 2               .ifdef CBM2
0000EAr 2                       lda     #<QT_BASIC
0000EAr 2                       ldy     #>QT_BASIC
0000EAr 2                       jsr     STROUT
0000EAr 2               .else
0000EAr 2  20 rr rr             jsr     CRDO
0000EDr 2               .endif
0000EDr 2  A5 7F                lda     MEMSIZ
0000EFr 2  38                   sec
0000F0r 2  E5 73                sbc     TXTTAB
0000F2r 2  AA                   tax
0000F3r 2  A5 80                lda     MEMSIZ+1
0000F5r 2  E5 74                sbc     TXTTAB+1
0000F7r 2  20 rr rr             jsr     LINPRT
0000FAr 2  A9 rr                lda     #<QT_BYTES_FREE
0000FCr 2  A0 rr                ldy     #>QT_BYTES_FREE
0000FEr 2  20 rr rr             jsr     STROUT
000101r 2               .if CONFIG_SCRTCH_ORDER = 2
000101r 2                       jsr     SCRTCH
000101r 2               .endif
000101r 2               .ifdef CONFIG_CBM_ALL
000101r 2                       jmp     RESTART
000101r 2               .elseif .def(AIM65)
000101r 2  A9 rr                lda     #<CRDO
000103r 2  A0 rr                ldy     #>CRDO
000105r 2  85 01                sta     GORESTART+1
000107r 2  84 02                sty     GORESTART+2
000109r 2  4C rr rr             jmp     RESTART
00010Cr 2               .else
00010Cr 2                       lda     #<STROUT
00010Cr 2                       ldy     #>STROUT
00010Cr 2                       sta     GOSTROUT+1
00010Cr 2                       sty     GOSTROUT+2
00010Cr 2                 .if CONFIG_SCRTCH_ORDER = 3
00010Cr 2                        jsr     SCRTCH
00010Cr 2                 .endif
00010Cr 2                       lda     #<RESTART
00010Cr 2                       ldy     #>RESTART
00010Cr 2                       sta     GORESTART+1
00010Cr 2                       sty     GORESTART+2
00010Cr 2                       jmp     (GORESTART+1)
00010Cr 2               .endif
00010Cr 2               
00010Cr 2                 .if .def(CONFIG_RAM) || .def(OSI)
00010Cr 2               ; OSI is compiled for ROM, but includes
00010Cr 2               ; this unused string
00010Cr 2               QT_WANT:
00010Cr 2                       .byte   "WANT SIN-COS-TAN-ATN"
00010Cr 2                       .byte   0
00010Cr 2                 .endif
00010Cr 2               QT_WRITTEN_BY:
00010Cr 2                 .ifndef CONFIG_CBM_ALL
00010Cr 2                 .if !(.def(AIM65) || .def(SYM1))
00010Cr 2                   .ifdef APPLE
00010Cr 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
00010Cr 2               		.byte	CR,0
00010Cr 2                   .else
00010Cr 2                       .byte   CR,LF,$0C ; FORM FEED
00010Cr 2                     .ifndef CONFIG_11
00010Cr 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
00010Cr 2                     .else
00010Cr 2                       .byte   "WRITTEN BY WEILAND & GATES"
00010Cr 2                     .endif
00010Cr 2                       .byte   CR,LF,0
00010Cr 2                   .endif
00010Cr 2                  .endif
00010Cr 2               QT_MEMORY_SIZE:
00010Cr 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
000110r 2  52 59 20 53  
000114r 2  49 5A 45     
000117r 2  00                   .byte   0
000118r 2               QT_TERMINAL_WIDTH:
000118r 2                   .if !(.def(AIM65) || .def(SYM1))
000118r 2                       .byte   "TERMINAL "
000118r 2                   .endif
000118r 2  57 49 44 54          .byte   "WIDTH"
00011Cr 2  48           
00011Dr 2  00                   .byte   0
00011Er 2                 .endif
00011Er 2               QT_BYTES_FREE:
00011Er 2  20 42 59 54          .byte   " BYTES FREE"
000122r 2  45 53 20 46  
000126r 2  52 45 45     
000129r 2                 .ifdef CBM1
000129r 2                 .elseif .def(CBM2)
000129r 2                       .byte   CR,0
000129r 2                 .elseif .def(APPLE)
000129r 2                       .byte   0
000129r 2                 .else
000129r 2  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00012Dr 2                 .endif
00012Dr 2               QT_BASIC:
00012Dr 2                 .ifdef OSI
00012Dr 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00012Dr 2                 .endif
00012Dr 2                 .ifdef KIM
00012Dr 2                       .byte   "MOS TECH 6502 BASIC V1.1"
00012Dr 2                 .endif
00012Dr 2                 .ifdef MICROTAN
00012Dr 2                       .byte   "MICROTAN BASIC"
00012Dr 2                 .endif
00012Dr 2                 .ifdef AIM65
00012Dr 2  20 20 41 49          .byte   "  AIM 65 BASIC V1.1"
000131r 2  4D 20 36 35  
000135r 2  20 42 41 53  
000140r 2                 .endif
000140r 2                 .ifdef SYM1
000140r 2                       .byte   "BASIC V1.1"
000140r 2                 .endif
000140r 2                 .ifdef CBM1
000140r 2                       .byte   $13 ; HOME
000140r 2                       .byte   "*** COMMODORE BASIC ***"
000140r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
000140r 2                 .endif
000140r 2                 .ifdef CBM2
000140r 2                       .byte   "### COMMODORE BASIC ###"
000140r 2                       .byte   CR,CR,0
000140r 2                 .endif
000140r 2                 .ifdef APPLE
000140r 2                       .byte   LF,CR,LF
000140r 2               		.byte	"APPLE BASIC V1.1"
000140r 2                 .endif
000140r 2                 .ifndef CONFIG_CBM_ALL
000140r 2  0D 0A                .byte   CR,LF
000142r 2                   .ifdef MICROTAN
000142r 2                       .byte   "(C) 1980 MICROSOFT"
000142r 2                   .elseif .def(AIM65)
000142r 2  00                   .byte   0
000143r 2  28 43 29 20          .byte   "(C) 1978 MICROSOFT"
000147r 2  31 39 37 38  
00014Br 2  20 4D 49 43  
000155r 2                   .elseif .def(SYM1)
000155r 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
000155r 2                   .else
000155r 2                       .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
000155r 2                   .endif
000155r 2  0D 0A                .byte   CR,LF
000157r 2                     .ifndef AIM65
000157r 2                       .byte   0
000157r 2                     .endif
000157r 2                 .endif
000157r 2               .endif
000157r 2               
000157r 1               .include "extra.s"
000157r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef MICROTAN
000000r 2               .include "microtan_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef AIM65
000000r 2               .include "aim65_extra.s"
000000r 3               .segment "EXTRA"
000000r 3               
000000r 3               LCFFA:
000000r 3  20 C5 00             jsr     CHRGOT
000003r 3  4C rr rr             jmp     LB89D
000006r 3               
000006r 2               .endif
000006r 2               
000006r 2               .ifdef SYM1
000006r 2                       .byte   0,0,0
000006r 2               .endif
000006r 2               
000006r 2               .ifdef EATER
000006r 2               .include "bios.s"
000006r 2               .endif
000006r 2               
000006r 1               .include "lcd.s"
000006r 2               .segment "CODE"
001CEFr 2               .ifdef EATER
001CEFr 2               PORTB = $6000
001CEFr 2               DDRB = $6002
001CEFr 2               E  = %01000000
001CEFr 2               RW = %00100000
001CEFr 2               RS = %00010000
001CEFr 2               
001CEFr 2               lcd_wait:
001CEFr 2                 pha
001CEFr 2                 lda #%11110000  ; LCD data is input
001CEFr 2                 sta DDRB
001CEFr 2               lcdbusy:
001CEFr 2                 lda #RW
001CEFr 2                 sta PORTB
001CEFr 2                 lda #(RW | E)
001CEFr 2                 sta PORTB
001CEFr 2                 lda PORTB       ; Read high nibble
001CEFr 2                 pha             ; and put on stack since it has the busy flag
001CEFr 2                 lda #RW
001CEFr 2                 sta PORTB
001CEFr 2                 lda #(RW | E)
001CEFr 2                 sta PORTB
001CEFr 2                 lda PORTB       ; Read low nibble
001CEFr 2                 pla             ; Get high nibble off stack
001CEFr 2                 and #%00001000
001CEFr 2                 bne lcdbusy
001CEFr 2               
001CEFr 2                 lda #RW
001CEFr 2                 sta PORTB
001CEFr 2                 lda #%11111111  ; LCD data is output
001CEFr 2                 sta DDRB
001CEFr 2                 pla
001CEFr 2                 rts
001CEFr 2               
001CEFr 2               LCDINIT:
001CEFr 2                 lda #$ff ; Set all pins on port B to output
001CEFr 2                 sta DDRB
001CEFr 2               
001CEFr 2                 lda #%00000011 ; Set 8-bit mode
001CEFr 2                 sta PORTB
001CEFr 2                 ora #E
001CEFr 2                 sta PORTB
001CEFr 2                 and #%00001111
001CEFr 2                 sta PORTB
001CEFr 2               
001CEFr 2                 lda #%00000011 ; Set 8-bit mode
001CEFr 2                 sta PORTB
001CEFr 2                 ora #E
001CEFr 2                 sta PORTB
001CEFr 2                 and #%00001111
001CEFr 2                 sta PORTB
001CEFr 2               
001CEFr 2                 lda #%00000011 ; Set 8-bit mode
001CEFr 2                 sta PORTB
001CEFr 2                 ora #E
001CEFr 2                 sta PORTB
001CEFr 2                 and #%00001111
001CEFr 2                 sta PORTB
001CEFr 2               
001CEFr 2                 ; Okay, now we're really in 8-bit mode.
001CEFr 2                 ; Command to get to 4-bit mode ought to work now
001CEFr 2                 lda #%00000010 ; Set 4-bit mode
001CEFr 2                 sta PORTB
001CEFr 2                 ora #E
001CEFr 2                 sta PORTB
001CEFr 2                 and #%00001111
001CEFr 2                 sta PORTB
001CEFr 2               
001CEFr 2                 lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
001CEFr 2                 jsr lcd_instruction
001CEFr 2                 lda #%00001110 ; Display on; cursor on; blink off
001CEFr 2                 jsr lcd_instruction
001CEFr 2                 lda #%00000110 ; Increment and shift cursor; don't shift display
001CEFr 2                 jsr lcd_instruction
001CEFr 2                 lda #%00000001 ; Clear display
001CEFr 2                 jsr lcd_instruction
001CEFr 2                 rts
001CEFr 2               
001CEFr 2               
001CEFr 2               LCDCMD:
001CEFr 2                 jsr GETBYT
001CEFr 2                 txa
001CEFr 2               lcd_instruction:
001CEFr 2                 jsr lcd_wait
001CEFr 2                 pha
001CEFr 2                 lsr
001CEFr 2                 lsr
001CEFr 2                 lsr
001CEFr 2                 lsr            ; Send high 4 bits
001CEFr 2                 sta PORTB
001CEFr 2                 ora #E         ; Set E bit to send instruction
001CEFr 2                 sta PORTB
001CEFr 2                 eor #E         ; Clear E bit
001CEFr 2                 sta PORTB
001CEFr 2                 pla
001CEFr 2                 and #%00001111 ; Send low 4 bits
001CEFr 2                 sta PORTB
001CEFr 2                 ora #E         ; Set E bit to send instruction
001CEFr 2                 sta PORTB
001CEFr 2                 eor #E         ; Clear E bit
001CEFr 2                 sta PORTB
001CEFr 2                 rts
001CEFr 2               
001CEFr 2               LCDPRINT:
001CEFr 2                 jsr GETBYT
001CEFr 2                 txa
001CEFr 2                 jsr lcd_wait
001CEFr 2                 pha
001CEFr 2                 lsr
001CEFr 2                 lsr
001CEFr 2                 lsr
001CEFr 2                 lsr             ; Send high 4 bits
001CEFr 2                 ora #RS         ; Set RS
001CEFr 2                 sta PORTB
001CEFr 2                 ora #E          ; Set E bit to send instruction
001CEFr 2                 sta PORTB
001CEFr 2                 eor #E          ; Clear E bit
001CEFr 2                 sta PORTB
001CEFr 2                 pla
001CEFr 2                 and #%00001111  ; Send low 4 bits
001CEFr 2                 ora #RS         ; Set RS
001CEFr 2                 sta PORTB
001CEFr 2                 ora #E          ; Set E bit to send instruction
001CEFr 2                 sta PORTB
001CEFr 2                 eor #E          ; Clear E bit
001CEFr 2                 sta PORTB
001CEFr 2                 rts
001CEFr 2               
001CEFr 2               .endif
001CEFr 2               
001CEFr 1               
