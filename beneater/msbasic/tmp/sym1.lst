ca65 V2.19 - Git 3dfe03300
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 3               ; configuration
000000r 3               CONFIG_2A := 1
000000r 3               
000000r 3               CONFIG_NULL := 1
000000r 3               CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_SAFE_NAMENOTFOUND := 1
000000r 3               CONFIG_SCRTCH_ORDER := 1
000000r 3               CONFIG_PEEK_SAVE_LINNUM := 1
000000r 3               CONFIG_SMALL_ERROR := 1
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $18
000000r 3               ZP_START3 = $0d
000000r 3               ZP_START4 = $66
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR             := $0A
000000r 3               TXPSV			:= LASTOP
000000r 3               ZD3             := $D3
000000r 3               ZD4             := $D4
000000r 3               
000000r 3               GET      := IQERR
000000r 3               COS      := USR1
000000r 3               SIN      := USR1
000000r 3               TAN      := USR1
000000r 3               ATN      := USR1
000000r 3               
000000r 3               ; inputbuffer
000000r 3               INPUTBUFFER     := $001E
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $FE
000000r 3               SPACE_FOR_GOSUB := $3E
000000r 3               NULL_MAX		:= $F0
000000r 3               CRLF_1 := CR
000000r 3               CRLF_2 := LF
000000r 3               WIDTH			:= 72
000000r 3               WIDTH2			:= 56
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2	:= $0200
000000r 3               
000000r 3               ; monitor functions
000000r 3               ASCNIB   := $8275
000000r 3               INSTAT   := $8386
000000r 3               MONRDKEY := $8A1B
000000r 3               MONCOUT  := $8A47
000000r 3               ACCESS   := $8B86
000000r 3               L8C78    := $8C78
000000r 3               DUMPT    := $8E87
000000r 3               
000000r 3               P3L      := $A64A
000000r 3               P3H      := P3L+1
000000r 3               P2L      := $A64C
000000r 3               P2H      := P2L+1
000000r 3               P1L      := $A64E
000000r 3               
000000r 2               .elseif .def(eater)
000000r 2               EATER := 1
000000r 2               .include "defines_eater.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
000018  2               Z15:
000018  2  xx           	.res 1
000019  2               .ifndef POSX; allow override
000019  2               POSX:
000019  2               .endif
000019  2  xx           	.res 1
00001A  2               .ifndef Z17; allow override
00001A  2               Z17:
00001A  2               .endif
00001A  2  xx           	.res 1
00001B  2               .ifndef Z18; allow override
00001B  2               Z18:
00001B  2               .endif
00001B  2  xx           	.res 1
00001C  2               LINNUM:
00001C  2               .ifndef TXPSV; allow override
00001C  2               TXPSV:
00001C  2               .endif
00001C  2  xx xx        	.res 2
00001E  2               .ifndef INPUTBUFFER; allow override
00001E  2               INPUTBUFFER:
00001E  2               .endif
00001E  2               
00001E  2               .org ZP_START3
00000D  2               
00000D  2               CHARAC:
00000D  2  xx           	.res 1
00000E  2               ENDCHR:
00000E  2  xx           	.res 1
00000F  2               EOLPNTR:
00000F  2  xx           	.res 1
000010  2               DIMFLG:
000010  2  xx           	.res 1
000011  2               VALTYP:
000011  2               .ifdef CONFIG_SMALL
000011  2               	.res 1
000011  2               .else
000011  2  xx xx        	.res 2
000013  2               .endif
000013  2               DATAFLG:
000013  2  xx           	.res 1
000014  2               SUBFLG:
000014  2  xx           	.res 1
000015  2               INPUTFLG:
000015  2  xx           	.res 1
000016  2               CPRMASK:
000016  2  xx           	.res 1
000017  2               Z14:
000017  2  xx           	.res 1
000018  2               
000018  2               .org ZP_START4
000066  2               
000066  2               TEMPPT:
000066  2  xx           	.res 1
000067  2               LASTPT:
000067  2  xx xx        	.res 2
000069  2               TEMPST:
000069  2  xx xx xx xx  	.res 9
00006D  2  xx xx xx xx  
000071  2  xx           
000072  2               INDEX:
000072  2  xx xx        	.res 2
000074  2               DEST:
000074  2  xx xx        	.res 2
000076  2               RESULT:
000076  2  xx xx xx xx  	.res BYTES_FP
00007A  2  xx           
00007B  2               RESULT_LAST = RESULT + BYTES_FP-1
00007B  2               TXTTAB:
00007B  2  xx xx        	.res 2
00007D  2               VARTAB:
00007D  2  xx xx        	.res 2
00007F  2               ARYTAB:
00007F  2  xx xx        	.res 2
000081  2               STREND:
000081  2  xx xx        	.res 2
000083  2               FRETOP:
000083  2  xx xx        	.res 2
000085  2               FRESPC:
000085  2  xx xx        	.res 2
000087  2               MEMSIZ:
000087  2  xx xx        	.res 2
000089  2               CURLIN:
000089  2  xx xx        	.res 2
00008B  2               OLDLIN:
00008B  2  xx xx        	.res 2
00008D  2               OLDTEXT:
00008D  2  xx xx        	.res 2
00008F  2               Z8C:
00008F  2  xx xx        	.res 2
000091  2               DATPTR:
000091  2  xx xx        	.res 2
000093  2               INPTR:
000093  2  xx xx        	.res 2
000095  2               VARNAM:
000095  2  xx xx        	.res 2
000097  2               VARPNT:
000097  2  xx xx        	.res 2
000099  2               FORPNT:
000099  2  xx xx        	.res 2
00009B  2               LASTOP:
00009B  2  xx xx        	.res 2
00009D  2               CPRTYP:
00009D  2  xx           	.res 1
00009E  2               FNCNAM:
00009E  2               TEMP3:
00009E  2  xx xx        	.res 2
0000A0  2               DSCPTR:
0000A0  2               .ifdef CONFIG_SMALL
0000A0  2               		.res 2
0000A0  2               .else
0000A0  2  xx xx xx     		.res 3
0000A3  2               .endif
0000A3  2               DSCLEN:
0000A3  2  xx xx        	.res 2
0000A5  2               .ifndef JMPADRS ; allow override
0000A5  2               JMPADRS			:= DSCLEN + 1
0000A5  2               .endif
0000A5  2               Z52:
0000A5  2  xx           	.res 1
0000A6  2               ARGEXTENSION:
0000A6  2               .ifndef CONFIG_SMALL
0000A6  2  xx           	.res 1
0000A7  2               .endif
0000A7  2               TEMP1:
0000A7  2  xx           	.res 1
0000A8  2               HIGHDS:
0000A8  2  xx xx        	.res 2
0000AA  2               HIGHTR:
0000AA  2  xx xx        	.res 2
0000AC  2               .ifndef CONFIG_SMALL
0000AC  2               TEMP2:
0000AC  2  xx           	.res 1
0000AD  2               .endif
0000AD  2               INDX:
0000AD  2               TMPEXP:
0000AD  2               .ifdef CONFIG_SMALL
0000AD  2               TEMP2:
0000AD  2               .endif
0000AD  2  xx           	.res 1
0000AE  2               EXPON:
0000AE  2  xx           	.res 1
0000AF  2               LOWTR:
0000AF  2               .ifndef LOWTRX ; allow override
0000AF  2               LOWTRX:
0000AF  2               .endif
0000AF  2  xx           	.res 1
0000B0  2               EXPSGN:
0000B0  2  xx           	.res 1
0000B1  2               FAC:
0000B1  2  xx xx xx xx  	.res BYTES_FP
0000B5  2  xx           
0000B6  2               FAC_LAST = FAC + BYTES_FP-1
0000B6  2               FACSIGN:
0000B6  2  xx           	.res 1
0000B7  2               SERLEN:
0000B7  2  xx           	.res 1
0000B8  2               SHIFTSIGNEXT:
0000B8  2  xx           	.res 1
0000B9  2               ARG:
0000B9  2  xx xx xx xx  	.res BYTES_FP
0000BD  2  xx           
0000BE  2               ARG_LAST = ARG + BYTES_FP-1
0000BE  2               ARGSIGN:
0000BE  2  xx           	.res 1
0000BF  2               STRNG1:
0000BF  2  xx xx        	.res 2
0000C1  2               SGNCPR = STRNG1
0000C1  2               FACEXTENSION = STRNG1+1
0000C1  2               STRNG2:
0000C1  2  xx xx        	.res 2
0000C3  2               .ifdef AIM65
0000C3  2               ATN:
0000C3  2               	.res 3
0000C3  2               ZBE:
0000C3  2               	.res 1
0000C3  2               .endif
0000C3  2               .ifdef SYM1
0000C3  2               USR1:
0000C3  2  xx xx xx     	.res 3
0000C6  2               USR2:
0000C6  2  xx xx xx     	.res 3
0000C9  2               USR3:
0000C9  2  xx xx xx     	.res 3
0000CC  2               .endif
0000CC  2               CHRGET:
0000CC  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000CC  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000CC  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000CC  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000CC  2               
0000CC  2               
0000CC  2               
0000CC  1               
0000CC  1               .include "header.s"
0000CC  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2                       jmp     COLD_START
000000r 2                       jmp     RESTART
000000r 2                       .word   AYINT,GIVAYF
000000r 2               .endif
000000r 2               .ifdef SYM1
000000r 2  4C rr rr             jmp     PR_WRITTEN_BY
000003r 2               .endif
000003r 2               .ifdef EATER
000003r 2                       jmp COLD_START
000003r 2               .endif
000003r 2               
000003r 1               .include "token.s"
000003r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               .else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2  rr rr 4E 55  		keyword_rts "NULL", NULL
000015r 2  4C CC xx     
000012r 2               .endif
000012r 2               .ifdef KBD
000012r 2               		keyword_rts "PLOD", PLOD
000012r 2               		keyword_rts "PSAV", PSAV
000012r 2               		keyword_rts "VLOD", VLOD
000012r 2               		keyword_rts "VSAV", VSAV
000012r 2               .endif
000012r 2               .ifndef CONFIG_NO_POKE
000012r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000016r 2  49 D4 xx     
000013r 2               .endif
000013r 2               .ifndef KBD
000013r 2  rr rr 4C 4F  		keyword_rts "LOAD", LOAD
000017r 2  41 C4 xx     
000014r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
000018r 2  56 C5 xx     
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2               		keyword_rts "VERIFY", VERIFY
000015r 2               .endif
000015r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000019r 2  C6 xx        
000016r 2               .ifdef KBD
000016r 2               		keyword_rts "SLOD", SLOD
000016r 2               .endif
000016r 2               .ifndef CONFIG_NO_POKE
000016r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Ar 2  4B C5 xx     
000017r 2               .endif
000017r 2               .ifdef CONFIG_FILE
000017r 2               		keyword_rts "PRINT#", PRINTH
000017r 2               .endif
000017r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Br 2  49 4E D4 xx  
000018r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Cr 2  4E D4 xx     
000019r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Dr 2  53 D4 xx     
00001Ar 2               .ifdef CONFIG_CBM_ALL
00001Ar 2               		keyword_rts "CLR", CLEAR
00001Ar 2               .else
00001Ar 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Er 2  45 41 D2 xx  
00001Br 2               .endif
00001Br 2               .ifdef CONFIG_FILE
00001Br 2               		keyword_rts "CMD", CMD
00001Br 2               		keyword_rts "SYS", SYS
00001Br 2               		keyword_rts "OPEN", OPEN
00001Br 2               		keyword_rts "CLOSE", CLOSE
00001Br 2               .endif
00001Br 2               .ifndef CONFIG_SMALL
00001Br 2  rr rr 47 45  		keyword_rts "GET", GET
00001Fr 2  D4 xx        
00001Cr 2               .endif
00001Cr 2               .ifdef KBD
00001Cr 2               		keyword_rts "PRT", PRT
00001Cr 2               .endif
00001Cr 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000020r 2  D7 xx        
00001Dr 2               .ifdef EATER
00001Dr 2               		keyword_rts "LCDCMD", LCDCMD
00001Dr 2               		keyword_rts "LCDPRINT", LCDPRINT
00001Dr 2               .endif
00001Dr 2               
00001Dr 2               		count_tokens
00001Dr 2               
00001Dr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000021r 2  xx           
00001Er 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Fr 2  46 CE xx     		keyword	"FN", TOKEN_FN
000020r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000024r 2  xx           
000021r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000025r 2  xx           
000022r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000023r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000027r 2  xx           
000024r 2  AB xx        		keyword	"+", TOKEN_PLUS
000025r 2  AD xx        		keyword	"-", TOKEN_MINUS
000026r 2  AA xx        		keyword	"*"
000027r 2  AF xx        		keyword	"/"
000028r 2               .ifdef KBD
000028r 2               		keyword	"#"
000028r 2               .else
000028r 2  DE xx        		keyword	"^"
000029r 2               .endif
000029r 2  41 4E C4 xx  		keyword	"AND"
00002Ar 2  4F D2 xx     		keyword	"OR"
00002Br 2  BE xx        		keyword	">", TOKEN_GREATER
00002Cr 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Dr 2  BC xx        		keyword	"<"
00002Er 2               
00002Er 2                       .segment "VECTORS"
00003Ar 2               UNFNC:
00003Ar 2               
00003Ar 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Er 2  CE xx        
00002Fr 2  rr rr 49 4E  		keyword_addr "INT", INT
000033r 2  D4 xx        
000030r 2  rr rr 41 42  		keyword_addr "ABS", ABS
000034r 2  D3 xx        
000031r 2               .ifdef KBD
000031r 2               		keyword_addr "VER", VER
000031r 2               .endif
000031r 2               .ifndef CONFIG_NO_POKE
000031r 2                 .ifdef CONFIG_RAM
000031r 2               		keyword_addr "USR", IQERR
000031r 2                 .else
000031r 2  0A 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
000035r 2  D2 xx        
000032r 2                 .endif
000032r 2               .endif
000032r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000036r 2  C5 xx        
000033r 2  rr rr 50 4F  		keyword_addr "POS", POS
000037r 2  D3 xx        
000034r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000038r 2  D2 xx        
000035r 2  rr rr 52 4E  		keyword_addr "RND", RND
000039r 2  C4 xx        
000036r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
00003Ar 2  C7 xx        
000037r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Br 2  D0 xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_COS:
00004Er 2  C3 00 43 4F  		keyword_addr "COS", COS
000052r 2  D3 xx        
000039r 2               .segment "VECTORS"
000050r 2               UNFNC_SIN:
000050r 2  C3 00 53 49  		keyword_addr "SIN", SIN
000054r 2  CE xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_TAN:
000052r 2  C3 00 54 41  		keyword_addr "TAN", TAN
000056r 2  CE xx        
00003Br 2               .segment "VECTORS"
000054r 2               UNFNC_ATN:
000054r 2  C3 00 41 54  		keyword_addr "ATN", ATN
000058r 2  CE xx        
00003Cr 2               .ifdef KBD
00003Cr 2               		keyword_addr "GETC", GETC
00003Cr 2               .endif
00003Cr 2               .ifndef CONFIG_NO_POKE
00003Cr 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
000040r 2  45 CB xx     
00003Dr 2               .endif
00003Dr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000041r 2  CE xx        
00003Er 2  rr rr 53 54  		keyword_addr "STR$", STR
000042r 2  52 A4 xx     
00003Fr 2  rr rr 56 41  		keyword_addr "VAL", VAL
000043r 2  CC xx        
000040r 2  rr rr 41 53  		keyword_addr "ASC", ASC
000044r 2  C3 xx        
000041r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000045r 2  52 A4 xx     
000042r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000046r 2  46 54 A4 xx  
000043r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000047r 2  47 48 54 A4  
00004Br 2  xx           
000044r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000048r 2  44 A4 xx     
000045r 2               .ifdef CONFIG_2
000045r 2  47 CF xx     		keyword	"GO", TOKEN_GO
000046r 2               .endif
000046r 2                       .segment "KEYWORDS"
0000E4r 2  00           		.byte   0
0000E5r 2               
0000E5r 2                       .segment "VECTORS"
000068r 2               MATHTBL:
000068r 2  79                   .byte   $79
000069r 2  rr rr                .word   FADDT-1
00006Br 2  79                   .byte   $79
00006Cr 2  rr rr                .word   FSUBT-1
00006Er 2  7B                   .byte   $7B
00006Fr 2  rr rr                .word   FMULTT-1
000071r 2  7B                   .byte   $7B
000072r 2  rr rr                .word   FDIVT-1
000074r 2  7F                   .byte   $7F
000075r 2  rr rr                .word   FPWRT-1
000077r 2  50                   .byte   $50
000078r 2  rr rr                .word   TAND-1
00007Ar 2  46                   .byte   $46
00007Br 2  rr rr                .word   OR-1
00007Dr 2  7D                   .byte   $7D
00007Er 2  rr rr                .word   NEGOP-1
000080r 2  5A                   .byte   $5A
000081r 2  rr rr                .word   EQUOP-1
000083r 2  64                   .byte   $64
000084r 2  rr rr                .word   RELOPS-1
000086r 2               
000086r 1               .include "error.s"
000086r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2  4E C6        define_error ERR_NOFOR, "NF"
000002r 2  53 CE        define_error ERR_SYNTAX, "SN"
000004r 2  52 C7        define_error ERR_NOGOSUB, "RG"
000006r 2  4F C4        define_error ERR_NODATA, "OD"
000008r 2  46 C3        define_error ERR_ILLQTY, "FC"
00000Ar 2  4F D6        define_error ERR_OVERFLOW, "OV"
00000Cr 2  4F CD        define_error ERR_MEMFULL, "OM"
00000Er 2  55 D3        define_error ERR_UNDEFSTAT, "US"
000010r 2  42 D3        define_error ERR_BADSUBS, "BS"
000012r 2  44 C4        define_error ERR_REDIMD, "DD"
000014r 2  2F B0        define_error ERR_ZERODIV, "/0"
000016r 2  49 C4        define_error ERR_ILLDIR, "ID"
000018r 2  54 CD        define_error ERR_BADTYPE, "TM"
00001Ar 2  4C D3        define_error ERR_STRLONG, "LS"
00001Cr 2  53 D4        define_error ERR_FRMCPX, "ST"
00001Er 2  43 CE        define_error ERR_CANTCONT, "CN"
000020r 2  55 C6        define_error ERR_UNDEFFN, "UF"
000022r 2               .else
000022r 2               define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000022r 2               define_error ERR_SYNTAX, "SYNTAX"
000022r 2               define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
000022r 2               define_error ERR_NODATA, "OUT OF DATA"
000022r 2               define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000022r 2               .ifdef CBM1
000022r 2               	.byte 0,0,0,0,0
000022r 2               .endif
000022r 2               define_error ERR_OVERFLOW, "OVERFLOW"
000022r 2               define_error ERR_MEMFULL, "OUT OF MEMORY"
000022r 2               define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
000022r 2               define_error ERR_BADSUBS, "BAD SUBSCRIPT"
000022r 2               define_error ERR_REDIMD, "REDIM'D ARRAY"
000022r 2               define_error ERR_ZERODIV, "DIVISION BY ZERO"
000022r 2               define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000022r 2               define_error ERR_BADTYPE, "TYPE MISMATCH"
000022r 2               define_error ERR_STRLONG, "STRING TOO LONG"
000022r 2               .ifdef CONFIG_FILE
000022r 2                 .ifdef CBM1
000022r 2               define_error ERR_BADDATA, "BAD DATA"
000022r 2                 .else
000022r 2               define_error ERR_BADDATA, "FILE DATA"
000022r 2                 .endif
000022r 2               .endif
000022r 2               define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
000022r 2               define_error ERR_CANTCONT, "CAN'T CONTINUE"
000022r 2               define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
000022r 2               .endif
000022r 2               
000022r 1               .include "message.s"
000022r 2               ; global messages: "error", "in", "ready", "break"
000022r 2               
000022r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
000010r 2  0D 0A        
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2                .endif
000013r 2               .endif
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN) || .def(AIM65)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 9A                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 99                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 9A                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 99                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 12                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 81                sta     STREND
00004Er 2  84 82                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 AA                lda     HIGHTR
000053r 2  E5 AF                sbc     LOWTR
000055r 2  85 72                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 AB                lda     HIGHTR+1
00005Ar 2  E5 B0                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 AA                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 72                sbc     INDEX
000066r 2  85 AA                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 AB                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 A8                lda     HIGHDS
00006Fr 2  E5 72                sbc     INDEX
000071r 2  85 A8                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 A9                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 AA                lda     (HIGHTR),y
00007Br 2  91 A8                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 AA                lda     (HIGHTR),y
000082r 2  91 A8                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 AB                dec     HIGHTR+1
000086r 2  C6 A9                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 3E                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 72                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 72                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 84                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 83                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 09                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 A7                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F7                ldx     #TEMP1-FAC+1
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 B1                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 84                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 83                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 0C                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 17                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL_ERROR
0000D3r 2                       pha
0000D3r 2                       and     #$7F
0000D3r 2               .endif
0000D3r 2  20 rr rr             jsr     OUTDO
0000D6r 2               .ifdef CONFIG_SMALL_ERROR
0000D6r 2  BD rr rr             lda     ERROR_MESSAGES+1,x
0000D9r 2                 .ifdef KBD
0000D9r 2                       and     #$7F
0000D9r 2                 .endif
0000D9r 2  20 rr rr             jsr     OUTDO
0000DCr 2               .else
0000DCr 2                       inx
0000DCr 2                       pla
0000DCr 2                       bpl     L2329
0000DCr 2               .endif
0000DCr 2  20 rr rr             jsr     STKINI
0000DFr 2  A9 rr                lda     #<QT_ERROR
0000E1r 2  A0 rr                ldy     #>QT_ERROR
0000E3r 2               
0000E3r 2               ; ----------------------------------------------------------------------------
0000E3r 2               ; PRINT STRING AT (Y,A)
0000E3r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E3r 2               ; FALL INTO WARM RESTART
0000E3r 2               ; ----------------------------------------------------------------------------
0000E3r 2               PRINT_ERROR_LINNUM:
0000E3r 2  20 rr rr             jsr     STROUT
0000E6r 2  A4 8A                ldy     CURLIN+1
0000E8r 2  C8                   iny
0000E9r 2  F0 03                beq     RESTART
0000EBr 2  20 rr rr             jsr     INPRT
0000EEr 2               
0000EEr 2               ; ----------------------------------------------------------------------------
0000EEr 2               ; WARM RESTART ENTRY
0000EEr 2               ; ----------------------------------------------------------------------------
0000EEr 2               RESTART:
0000EEr 2               .ifdef KBD
0000EEr 2                       jsr     CRDO
0000EEr 2                       nop
0000EEr 2               L2351X:
0000EEr 2                       jsr     OKPRT
0000EEr 2               L2351:
0000EEr 2                       jsr     INLIN
0000EEr 2               LE28E:
0000EEr 2                       bpl     RESTART
0000EEr 2               .else
0000EEr 2  46 17                lsr     Z14
0000F0r 2                .ifndef AIM65
0000F0r 2  A9 rr                lda     #<QT_OK
0000F2r 2  A0 rr                ldy     #>QT_OK
0000F4r 2                 .ifdef CONFIG_CBM_ALL
0000F4r 2                       jsr     STROUT
0000F4r 2                 .else
0000F4r 2  20 03 00             jsr     GOSTROUT
0000F7r 2                 .endif
0000F7r 2                .else
0000F7r 2                       jsr     GORESTART
0000F7r 2                .endif
0000F7r 2               L2351:
0000F7r 2  20 rr rr             jsr     INLIN
0000FAr 2               .endif
0000FAr 2  86 D3                stx     TXTPTR
0000FCr 2  84 D4                sty     TXTPTR+1
0000FEr 2  20 CC 00             jsr     CHRGET
000101r 2               .ifdef CONFIG_11
000101r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000101r 2               ; and ':' - a line starting with ':' in
000101r 2               ; direct mode gets ignored
000101r 2  AA                   tax
000102r 2               .endif
000102r 2               .ifdef KBD
000102r 2                       beq     L2351X
000102r 2               .else
000102r 2  F0 F3                beq     L2351
000104r 2               .endif
000104r 2  A2 FF                ldx     #$FF
000106r 2  86 8A                stx     CURLIN+1
000108r 2  90 06                bcc     NUMBERED_LINE
00010Ar 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Dr 2  4C rr rr             jmp     NEWSTT2
000110r 2               
000110r 2               ; ----------------------------------------------------------------------------
000110r 2               ; HANDLE NUMBERED LINE
000110r 2               ; ----------------------------------------------------------------------------
000110r 2               NUMBERED_LINE:
000110r 2  20 rr rr             jsr     LINGET
000113r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000116r 2  84 0F                sty     EOLPNTR
000118r 2               .ifdef KBD
000118r 2                       jsr     FNDLIN2
000118r 2                       lda     JMPADRS+1
000118r 2                       sta     LOWTR
000118r 2                       sta     Z96
000118r 2                       lda     JMPADRS+2
000118r 2                       sta     LOWTR+1
000118r 2                       sta     Z96+1
000118r 2                       lda     LINNUM
000118r 2                       sta     L06FE
000118r 2                       lda     LINNUM+1
000118r 2                       sta     L06FE+1
000118r 2                       inc     LINNUM
000118r 2                       bne     LE2D2
000118r 2                       inc     LINNUM+1
000118r 2                       bne     LE2D2
000118r 2                       jmp     SYNERR
000118r 2               LE2D2:
000118r 2                       jsr     LF457
000118r 2                       ldx     #Z96
000118r 2                       jsr     CMPJMPADRS
000118r 2                       bcs     LE2FD
000118r 2               LE2DC:
000118r 2                       ldx     #$00
000118r 2                       lda     (JMPADRS+1,x)
000118r 2                       sta     (Z96,x)
000118r 2                       inc     JMPADRS+1
000118r 2                       bne     LE2E8
000118r 2                       inc     JMPADRS+2
000118r 2               LE2E8:
000118r 2                       inc     Z96
000118r 2                       bne     LE2EE
000118r 2                       inc     Z96+1
000118r 2               LE2EE:
000118r 2                       ldx     #VARTAB
000118r 2                       jsr     CMPJMPADRS
000118r 2                       bne     LE2DC
000118r 2                       lda     Z96
000118r 2                       sta     VARTAB
000118r 2                       lda     Z96+1
000118r 2                       sta     VARTAB+1
000118r 2               LE2FD:
000118r 2                       jsr     SETPTRS
000118r 2                       jsr     LE33D
000118r 2                       lda     INPUTBUFFER
000118r 2               LE306:
000118r 2                       beq     LE28E
000118r 2                       cmp     #$A5
000118r 2                       beq     LE306
000118r 2                       clc
000118r 2               .else
000118r 2  20 rr rr             jsr     FNDLIN
00011Br 2  90 44                bcc     PUT_NEW_LINE
00011Dr 2  A0 01                ldy     #$01
00011Fr 2  B1 AF                lda     (LOWTR),y
000121r 2  85 73                sta     INDEX+1
000123r 2  A5 7D                lda     VARTAB
000125r 2  85 72                sta     INDEX
000127r 2  A5 B0                lda     LOWTR+1
000129r 2  85 75                sta     DEST+1
00012Br 2  A5 AF                lda     LOWTR
00012Dr 2  88                   dey
00012Er 2  F1 AF                sbc     (LOWTR),y
000130r 2  18                   clc
000131r 2  65 7D                adc     VARTAB
000133r 2  85 7D                sta     VARTAB
000135r 2  85 74                sta     DEST
000137r 2  A5 7E                lda     VARTAB+1
000139r 2  69 FF                adc     #$FF
00013Br 2  85 7E                sta     VARTAB+1
00013Dr 2  E5 B0                sbc     LOWTR+1
00013Fr 2  AA                   tax
000140r 2  38                   sec
000141r 2  A5 AF                lda     LOWTR
000143r 2  E5 7D                sbc     VARTAB
000145r 2  A8                   tay
000146r 2  B0 03                bcs     L23A5
000148r 2  E8                   inx
000149r 2  C6 75                dec     DEST+1
00014Br 2               L23A5:
00014Br 2  18                   clc
00014Cr 2  65 72                adc     INDEX
00014Er 2  90 03                bcc     L23AD
000150r 2  C6 73                dec     INDEX+1
000152r 2  18                   clc
000153r 2               L23AD:
000153r 2  B1 72                lda     (INDEX),y
000155r 2  91 74                sta     (DEST),y
000157r 2  C8                   iny
000158r 2  D0 F9                bne     L23AD
00015Ar 2  E6 73                inc     INDEX+1
00015Cr 2  E6 75                inc     DEST+1
00015Er 2  CA                   dex
00015Fr 2  D0 F2                bne     L23AD
000161r 2               .endif
000161r 2               ; ----------------------------------------------------------------------------
000161r 2               PUT_NEW_LINE:
000161r 2               .ifndef KBD
000161r 2                 .ifdef CONFIG_2
000161r 2  20 rr rr             jsr     SETPTRS
000164r 2  20 rr rr             jsr     LE33D
000167r 2  A5 1E                lda     INPUTBUFFER
000169r 2  F0 8C                beq     L2351
00016Br 2  18                   clc
00016Cr 2                 .else
00016Cr 2                       lda     INPUTBUFFER
00016Cr 2                       beq     FIX_LINKS
00016Cr 2                       lda     MEMSIZ
00016Cr 2                       ldy     MEMSIZ+1
00016Cr 2                       sta     FRETOP
00016Cr 2                       sty     FRETOP+1
00016Cr 2                 .endif
00016Cr 2               .endif
00016Cr 2  A5 7D                lda     VARTAB
00016Er 2  85 AA                sta     HIGHTR
000170r 2  65 0F                adc     EOLPNTR
000172r 2  85 A8                sta     HIGHDS
000174r 2  A4 7E                ldy     VARTAB+1
000176r 2  84 AB                sty     HIGHTR+1
000178r 2  90 01                bcc     L23D6
00017Ar 2  C8                   iny
00017Br 2               L23D6:
00017Br 2  84 A9                sty     HIGHDS+1
00017Dr 2  20 rr rr             jsr     BLTU
000180r 2               .ifdef CONFIG_INPUTBUFFER_0200
000180r 2                       lda     LINNUM
000180r 2                       ldy     LINNUM+1
000180r 2                       sta     INPUTBUFFER-2
000180r 2                       sty     INPUTBUFFER-1
000180r 2               .endif
000180r 2  A5 81                lda     STREND
000182r 2  A4 82                ldy     STREND+1
000184r 2  85 7D                sta     VARTAB
000186r 2  84 7E                sty     VARTAB+1
000188r 2  A4 0F                ldy     EOLPNTR
00018Ar 2  88                   dey
00018Br 2               ; ---COPY LINE INTO PROGRAM-------
00018Br 2               L23E6:
00018Br 2  B9 1A 00             lda     INPUTBUFFER-4,y
00018Er 2  91 AF                sta     (LOWTR),y
000190r 2  88                   dey
000191r 2  10 F8                bpl     L23E6
000193r 2               
000193r 2               ; ----------------------------------------------------------------------------
000193r 2               ; CLEAR ALL VARIABLES
000193r 2               ; RE-ESTABLISH ALL FORWARD LINKS
000193r 2               ; ----------------------------------------------------------------------------
000193r 2               FIX_LINKS:
000193r 2  20 rr rr             jsr     SETPTRS
000196r 2               .ifdef CONFIG_2
000196r 2  20 rr rr             jsr     LE33D
000199r 2  4C rr rr             jmp     L2351
00019Cr 2               LE33D:
00019Cr 2               .endif
00019Cr 2  A5 7B                lda     TXTTAB
00019Er 2  A4 7C                ldy     TXTTAB+1
0001A0r 2  85 72                sta     INDEX
0001A2r 2  84 73                sty     INDEX+1
0001A4r 2  18                   clc
0001A5r 2               L23FA:
0001A5r 2  A0 01                ldy     #$01
0001A7r 2  B1 72                lda     (INDEX),y
0001A9r 2               .ifdef CONFIG_2
0001A9r 2  F0 1D                beq     RET3
0001ABr 2               .else
0001ABr 2                       jeq     L2351
0001ABr 2               .endif
0001ABr 2  A0 04                ldy     #$04
0001ADr 2               L2405:
0001ADr 2  C8                   iny
0001AEr 2  B1 72                lda     (INDEX),y
0001B0r 2  D0 FB                bne     L2405
0001B2r 2  C8                   iny
0001B3r 2  98                   tya
0001B4r 2  65 72                adc     INDEX
0001B6r 2  AA                   tax
0001B7r 2  A0 00                ldy     #$00
0001B9r 2  91 72                sta     (INDEX),y
0001BBr 2  A5 73                lda     INDEX+1
0001BDr 2  69 00                adc     #$00
0001BFr 2  C8                   iny
0001C0r 2  91 72                sta     (INDEX),y
0001C2r 2  86 72                stx     INDEX
0001C4r 2  85 73                sta     INDEX+1
0001C6r 2  90 DD                bcc     L23FA	; always
0001C8r 2               
0001C8r 2               ; ----------------------------------------------------------------------------
0001C8r 2               .ifdef KBD
0001C8r 2               .include "kbd_loadsave.s"
0001C8r 2               .endif
0001C8r 2               
0001C8r 2               .ifdef CONFIG_2
0001C8r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001C8r 2               RET3:
0001C8r 2  60           		rts
0001C9r 2               .endif
0001C9r 2               
0001C9r 2               .include "inline.s"
0001C9r 3               .segment "CODE"
0001C9r 3               
0001C9r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001C9r 3               L2420:
0001C9r 3                 .ifdef OSI
0001C9r 3                       jsr     OUTDO
0001C9r 3                 .endif
0001C9r 3  CA                   dex
0001CAr 3                 .ifdef AIM65
0001CAr 3                       bmi     L2423
0001CAr 3                       jsr     PSLS
0001CAr 3                       jmp     INLIN2
0001CAr 3               LB35F:
0001CAr 3                       jsr     OUTDO
0001CAr 3                 .else
0001CAr 3  10 05                bpl     INLIN2
0001CCr 3                 .endif
0001CCr 3               L2423:
0001CCr 3                 .ifdef OSI
0001CCr 3                       jsr     OUTDO
0001CCr 3                 .endif
0001CCr 3  20 rr rr             jsr     CRDO
0001CFr 3               .endif
0001CFr 3               
0001CFr 3               ; ----------------------------------------------------------------------------
0001CFr 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001CFr 3               ; ----------------------------------------------------------------------------
0001CFr 3               .ifndef KBD
0001CFr 3               INLIN:
0001CFr 3                 .ifdef APPLE
0001CFr 3                       ldx     #$DD
0001CFr 3               INLIN1:
0001CFr 3                       stx     $33
0001CFr 3                       jsr     L2900
0001CFr 3                       cpx     #$EF
0001CFr 3                       bcs     L0C32
0001CFr 3                       ldx     #$EF
0001CFr 3               L0C32:
0001CFr 3                       lda     #$00
0001CFr 3                       sta     INPUTBUFFER,x
0001CFr 3                       ldx     #<INPUTBUFFER-1
0001CFr 3                       ldy     #>INPUTBUFFER-1
0001CFr 3                       rts
0001CFr 3                 .endif
0001CFr 3               
0001CFr 3                 .ifndef APPLE
0001CFr 3  A2 00                ldx     #$00
0001D1r 3               INLIN2:
0001D1r 3  20 rr rr             jsr     GETLN
0001D4r 3                   .ifdef AIM65
0001D4r 3                       cmp     #$1A
0001D4r 3                       bne     INLINAIM
0001D4r 3                       jsr     DU13
0001D4r 3                       jmp     INLIN
0001D4r 3               INLINAIM:
0001D4r 3                   .endif
0001D4r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001D4r 3  C9 07                cmp     #$07
0001D6r 3  F0 14                beq     L2443
0001D8r 3                   .endif
0001D8r 3  C9 0D                cmp     #$0D
0001DAr 3  F0 20                beq     L2453
0001DCr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001DCr 3  C9 20                cmp     #$20
0001DEr 3                     .ifdef AIM65
0001DEr 3                       bcc     L244E
0001DEr 3                     .else
0001DEr 3  90 F1                bcc     INLIN2
0001E0r 3                     .endif
0001E0r 3                     .ifdef MICROTAN
0001E0r 3                       cmp     #$80
0001E0r 3                     .else
0001E0r 3                       .ifdef AIM65
0001E0r 3                       cmp     #$7F
0001E0r 3                       beq     L2420
0001E0r 3                       .endif
0001E0r 3  C9 7D                cmp     #$7D
0001E2r 3                     .endif
0001E2r 3  B0 ED                bcs     INLIN2
0001E4r 3  C9 40                cmp     #$40 ; @
0001E6r 3                     .ifdef AIM65
0001E6r 3                       beq     LB35F
0001E6r 3                     .else
0001E6r 3  F0 E4                beq     L2423
0001E8r 3                     .ifdef MICROTAN
0001E8r 3                       cmp     #$7F ; DEL
0001E8r 3                     .else
0001E8r 3  C9 5F                cmp     #$5F ; _
0001EAr 3                     .endif
0001EAr 3  F0 DD                beq     L2420
0001ECr 3                     .endif
0001ECr 3               L2443:
0001ECr 3                     .ifdef MICROTAN
0001ECr 3                       cpx     #$4F
0001ECr 3                     .else
0001ECr 3  E0 47                cpx     #$47
0001EEr 3                     .endif
0001EEr 3  B0 05                bcs     L244C
0001F0r 3                   .endif
0001F0r 3  95 1E                sta     INPUTBUFFER,x
0001F2r 3  E8                   inx
0001F3r 3                   .if .def(OSI) || .def(AIM65)
0001F3r 3                       .byte   $2C
0001F3r 3                   .else
0001F3r 3  D0 DC                bne     INLIN2
0001F5r 3                   .endif
0001F5r 3               L244C:
0001F5r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001F5r 3  A9 07                lda     #$07 ; BEL
0001F7r 3               L244E:
0001F7r 3  20 rr rr             jsr     OUTDO
0001FAr 3  D0 D5                bne     INLIN2
0001FCr 3                   .endif
0001FCr 3               L2453:
0001FCr 3  4C rr rr             jmp     L29B9
0001FFr 3                 .endif
0001FFr 3               .endif
0001FFr 3               
0001FFr 3               .ifndef KBD
0001FFr 3                 .ifndef APPLE
0001FFr 3               GETLN:
0001FFr 3                   .ifdef CONFIG_FILE
0001FFr 3                       jsr     CHRIN
0001FFr 3                       ldy     CURDVC
0001FFr 3                       bne     L2465
0001FFr 3                   .else
0001FFr 3  20 1B 8A             jsr     MONRDKEY
000202r 3                   .endif
000202r 3                   .ifdef OSI
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       nop
000202r 3                       and     #$7F
000202r 3                   .endif
000202r 3                 .endif
000202r 3                 .ifdef APPLE
000202r 3               RDKEY:
000202r 3                       jsr     LFD0C
000202r 3                       and     #$7F
000202r 3                 .endif
000202r 3                   .ifdef SYM1
000202r 3  C9 14                cmp     #$14
000204r 3                   .else
000204r 3                       cmp     #$0F
000204r 3                   .endif
000204r 3  D0 08                bne     L2465
000206r 3  48                   pha
000207r 3  A5 17                lda     Z14
000209r 3  49 FF                eor     #$FF
00020Br 3  85 17                sta     Z14
00020Dr 3  68                   pla
00020Er 3               L2465:
00020Er 3  60                   rts
00020Fr 3               .endif
00020Fr 3               
00020Fr 2               
00020Fr 2               ; ----------------------------------------------------------------------------
00020Fr 2               ; TOKENIZE THE INPUT LINE
00020Fr 2               ; ----------------------------------------------------------------------------
00020Fr 2               PARSE_INPUT_LINE:
00020Fr 2  A6 D3                ldx     TXTPTR
000211r 2  A0 04                ldy     #$04
000213r 2  84 13                sty     DATAFLG
000215r 2               L246C:
000215r 2  B5 00                lda     INPUTBUFFERX,x
000217r 2               .ifdef CONFIG_CBM_ALL
000217r 2                       bpl     LC49E
000217r 2                       cmp     #$FF
000217r 2                       beq     L24AC
000217r 2                       inx
000217r 2                       bne     L246C
000217r 2               LC49E:
000217r 2               .endif
000217r 2  C9 20                cmp     #$20
000219r 2  F0 36                beq     L24AC
00021Br 2  85 0E                sta     ENDCHR
00021Dr 2  C9 22                cmp     #$22
00021Fr 2  F0 54                beq     L24D0
000221r 2  24 13                bit     DATAFLG
000223r 2  70 2C                bvs     L24AC
000225r 2  C9 3F                cmp     #$3F
000227r 2  D0 04                bne     L2484
000229r 2  A9 97                lda     #TOKEN_PRINT
00022Br 2  D0 24                bne     L24AC
00022Dr 2               L2484:
00022Dr 2  C9 30                cmp     #$30
00022Fr 2  90 04                bcc     L248C
000231r 2  C9 3C                cmp     #$3C
000233r 2  90 1C                bcc     L24AC
000235r 2               ; ----------------------------------------------------------------------------
000235r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000235r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000235r 2               ; ----------------------------------------------------------------------------
000235r 2               L248C:
000235r 2  84 C1                sty     STRNG2
000237r 2  A0 00                ldy     #$00
000239r 2  84 0F                sty     EOLPNTR
00023Br 2  88                   dey
00023Cr 2  86 D3                stx     TXTPTR
00023Er 2  CA                   dex
00023Fr 2               L2496:
00023Fr 2  C8                   iny
000240r 2               L2497:
000240r 2  E8                   inx
000241r 2               L2498:
000241r 2               .ifdef KBD
000241r 2                       jsr     GET_UPPER
000241r 2               .else
000241r 2  B5 00                lda     INPUTBUFFERX,x
000243r 2                 .ifndef CONFIG_2
000243r 2                       cmp     #$20
000243r 2                       beq     L2497
000243r 2                 .endif
000243r 2               .endif
000243r 2  38                   sec
000244r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
000247r 2  F0 F6                beq     L2496
000249r 2  C9 80                cmp     #$80
00024Br 2  D0 2F                bne     L24D7
00024Dr 2  05 0F                ora     EOLPNTR
00024Fr 2               ; ----------------------------------------------------------------------------
00024Fr 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00024Fr 2               ; ----------------------------------------------------------------------------
00024Fr 2               L24AA:
00024Fr 2  A4 C1                ldy     STRNG2
000251r 2               L24AC:
000251r 2  E8                   inx
000252r 2  C8                   iny
000253r 2  99 19 00             sta     INPUTBUFFER-5,y
000256r 2  B9 19 00             lda     INPUTBUFFER-5,y
000259r 2  F0 34                beq     L24EA
00025Br 2  38                   sec
00025Cr 2  E9 3A                sbc     #$3A
00025Er 2  F0 04                beq     L24BF
000260r 2  C9 49                cmp     #$49
000262r 2  D0 02                bne     L24C1
000264r 2               L24BF:
000264r 2  85 13                sta     DATAFLG
000266r 2               L24C1:
000266r 2  38                   sec
000267r 2  E9 54                sbc     #TOKEN_REM-':'
000269r 2  D0 AA                bne     L246C
00026Br 2  85 0E                sta     ENDCHR
00026Dr 2               ; ----------------------------------------------------------------------------
00026Dr 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00026Dr 2               ; BY COPYING CHARS UP TO ENDCHR.
00026Dr 2               ; ----------------------------------------------------------------------------
00026Dr 2               L24C8:
00026Dr 2  B5 00                lda     INPUTBUFFERX,x
00026Fr 2  F0 E0                beq     L24AC
000271r 2  C5 0E                cmp     ENDCHR
000273r 2  F0 DC                beq     L24AC
000275r 2               L24D0:
000275r 2  C8                   iny
000276r 2  99 19 00             sta     INPUTBUFFER-5,y
000279r 2  E8                   inx
00027Ar 2  D0 F1                bne     L24C8
00027Cr 2               ; ----------------------------------------------------------------------------
00027Cr 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
00027Cr 2               ; ----------------------------------------------------------------------------
00027Cr 2               L24D7:
00027Cr 2  A6 D3                ldx     TXTPTR
00027Er 2  E6 0F                inc     EOLPNTR
000280r 2               L24DB:
000280r 2  C8                   iny
000281r 2  B9 rr rr             lda     MATHTBL+28+1,y
000284r 2  10 FA                bpl     L24DB
000286r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000289r 2  D0 B6                bne     L2498
00028Br 2  B5 00                lda     INPUTBUFFERX,x
00028Dr 2  10 C0                bpl     L24AA
00028Fr 2               ; ---END OF LINE------------------
00028Fr 2               L24EA:
00028Fr 2  99 1B 00             sta     INPUTBUFFER-3,y
000292r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000292r 2                       dec     TXTPTR+1
000292r 2               .endif
000292r 2  A9 1D                lda     #<INPUTBUFFER-1
000294r 2  85 D3                sta     TXTPTR
000296r 2  60                   rts
000297r 2               
000297r 2               ; ----------------------------------------------------------------------------
000297r 2               ; SEARCH FOR LINE
000297r 2               ;
000297r 2               ; (LINNUM) = LINE # TO FIND
000297r 2               ; IF NOT FOUND:  CARRY = 0
000297r 2               ;	LOWTR POINTS AT NEXT LINE
000297r 2               ; IF FOUND:      CARRY = 1
000297r 2               ;	LOWTR POINTS AT LINE
000297r 2               ; ----------------------------------------------------------------------------
000297r 2               FNDLIN:
000297r 2               .ifdef KBD
000297r 2                       jsr     CHRGET
000297r 2                       jmp     LE444
000297r 2               LE440:
000297r 2                       php
000297r 2                       jsr     LINGET
000297r 2               LE444:
000297r 2                       jsr     LF457
000297r 2                       ldx     #$FF
000297r 2                       plp
000297r 2                       beq     LE464
000297r 2                       jsr     CHRGOT
000297r 2                       beq     L2520
000297r 2                       cmp     #$A5
000297r 2                       bne     L2520
000297r 2                       jsr     CHRGET
000297r 2                       beq     LE464
000297r 2                       bcs     LE461
000297r 2                       jsr     LINGET
000297r 2                       beq     L2520
000297r 2               LE461:
000297r 2                       jmp     SYNERR
000297r 2               LE464:
000297r 2                       stx     LINNUM
000297r 2                       stx     LINNUM+1
000297r 2               .else
000297r 2  A5 7B                lda     TXTTAB
000299r 2  A6 7C                ldx     TXTTAB+1
00029Br 2               FL1:
00029Br 2  A0 01                ldy     #$01
00029Dr 2  85 AF                sta     LOWTR
00029Fr 2  86 B0                stx     LOWTR+1
0002A1r 2  B1 AF                lda     (LOWTR),y
0002A3r 2  F0 1F                beq     L251F
0002A5r 2  C8                   iny
0002A6r 2  C8                   iny
0002A7r 2  A5 1D                lda     LINNUM+1
0002A9r 2  D1 AF                cmp     (LOWTR),y
0002ABr 2  90 18                bcc     L2520
0002ADr 2  F0 03                beq     L250D
0002AFr 2  88                   dey
0002B0r 2  D0 09                bne     L2516
0002B2r 2               L250D:
0002B2r 2  A5 1C                lda     LINNUM
0002B4r 2  88                   dey
0002B5r 2  D1 AF                cmp     (LOWTR),y
0002B7r 2  90 0C                bcc     L2520
0002B9r 2  F0 0A                beq     L2520
0002BBr 2               L2516:
0002BBr 2  88                   dey
0002BCr 2  B1 AF                lda     (LOWTR),y
0002BEr 2  AA                   tax
0002BFr 2  88                   dey
0002C0r 2  B1 AF                lda     (LOWTR),y
0002C2r 2  B0 D7                bcs     FL1
0002C4r 2               L251F:
0002C4r 2  18                   clc
0002C5r 2               .endif
0002C5r 2               L2520:
0002C5r 2  60                   rts
0002C6r 2               
0002C6r 2               ; ----------------------------------------------------------------------------
0002C6r 2               ; "NEW" STATEMENT
0002C6r 2               ; ----------------------------------------------------------------------------
0002C6r 2               NEW:
0002C6r 2  D0 FD                bne     L2520
0002C8r 2               SCRTCH:
0002C8r 2  A9 00                lda     #$00
0002CAr 2  A8                   tay
0002CBr 2  91 7B                sta     (TXTTAB),y
0002CDr 2  C8                   iny
0002CEr 2  91 7B                sta     (TXTTAB),y
0002D0r 2  A5 7B                lda     TXTTAB
0002D2r 2               .ifdef CONFIG_2
0002D2r 2  18           		clc
0002D3r 2               .endif
0002D3r 2  69 02                adc     #$02
0002D5r 2  85 7D                sta     VARTAB
0002D7r 2  A5 7C                lda     TXTTAB+1
0002D9r 2  69 00                adc     #$00
0002DBr 2  85 7E                sta     VARTAB+1
0002DDr 2               ; ----------------------------------------------------------------------------
0002DDr 2               SETPTRS:
0002DDr 2  20 rr rr             jsr     STXTPT
0002E0r 2               .ifdef CONFIG_11A
0002E0r 2  A9 00                lda     #$00
0002E2r 2               
0002E2r 2               ; ----------------------------------------------------------------------------
0002E2r 2               ; "CLEAR" STATEMENT
0002E2r 2               ; ----------------------------------------------------------------------------
0002E2r 2               CLEAR:
0002E2r 2  D0 2A                bne     L256A
0002E4r 2               .endif
0002E4r 2               CLEARC:
0002E4r 2               .ifdef KBD
0002E4r 2                       lda     #<CONST_MEMSIZ
0002E4r 2                       ldy     #>CONST_MEMSIZ
0002E4r 2               .else
0002E4r 2  A5 87                lda     MEMSIZ
0002E6r 2  A4 88                ldy     MEMSIZ+1
0002E8r 2               .endif
0002E8r 2  85 83                sta     FRETOP
0002EAr 2  84 84                sty     FRETOP+1
0002ECr 2               .ifdef CONFIG_CBM_ALL
0002ECr 2                       jsr     CLALL
0002ECr 2               .endif
0002ECr 2  A5 7D                lda     VARTAB
0002EEr 2  A4 7E                ldy     VARTAB+1
0002F0r 2  85 7F                sta     ARYTAB
0002F2r 2  84 80                sty     ARYTAB+1
0002F4r 2  85 81                sta     STREND
0002F6r 2  84 82                sty     STREND+1
0002F8r 2  20 rr rr             jsr     RESTORE
0002FBr 2               ; ----------------------------------------------------------------------------
0002FBr 2               STKINI:
0002FBr 2  A2 69                ldx     #TEMPST
0002FDr 2  86 66                stx     TEMPPT
0002FFr 2  68                   pla
000300r 2               .ifdef CONFIG_2
000300r 2  A8           		tay
000301r 2               .else
000301r 2                       sta     STACK+STACK_TOP+1
000301r 2               .endif
000301r 2  68                   pla
000302r 2               .ifndef CONFIG_2
000302r 2                       sta     STACK+STACK_TOP+2
000302r 2               .endif
000302r 2  A2 FE                ldx     #STACK_TOP
000304r 2  9A                   txs
000305r 2               .ifdef CONFIG_2
000305r 2  48                   pha
000306r 2  98                   tya
000307r 2  48                   pha
000308r 2               .endif
000308r 2  A9 00                lda     #$00
00030Ar 2  85 8E                sta     OLDTEXT+1
00030Cr 2  85 14                sta     SUBFLG
00030Er 2               L256A:
00030Er 2  60                   rts
00030Fr 2               
00030Fr 2               ; ----------------------------------------------------------------------------
00030Fr 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
00030Fr 2               ; ----------------------------------------------------------------------------
00030Fr 2               STXTPT:
00030Fr 2  18                   clc
000310r 2  A5 7B                lda     TXTTAB
000312r 2  69 FF                adc     #$FF
000314r 2  85 D3                sta     TXTPTR
000316r 2  A5 7C                lda     TXTTAB+1
000318r 2  69 FF                adc     #$FF
00031Ar 2  85 D4                sta     TXTPTR+1
00031Cr 2  60                   rts
00031Dr 2               
00031Dr 2               ; ----------------------------------------------------------------------------
00031Dr 2               .ifdef KBD
00031Dr 2               LE4C0:
00031Dr 2                       ldy     #<LE444
00031Dr 2                       ldx     #>LE444
00031Dr 2               LE4C4:
00031Dr 2                       jsr     LFFD6
00031Dr 2                       jsr     LFFED
00031Dr 2                       lda     $0504
00031Dr 2                       clc
00031Dr 2                       adc     #$08
00031Dr 2                       sta     $0504
00031Dr 2                       rts
00031Dr 2               
00031Dr 2               CMPJMPADRS:
00031Dr 2                       lda     1,x
00031Dr 2                       cmp     JMPADRS+2
00031Dr 2                       bne     LE4DE
00031Dr 2                       lda     0,x
00031Dr 2                       cmp     JMPADRS+1
00031Dr 2               LE4DE:
00031Dr 2                       rts
00031Dr 2               .endif
00031Dr 2               
00031Dr 2               ; ----------------------------------------------------------------------------
00031Dr 2               ; "LIST" STATEMENT
00031Dr 2               ; ----------------------------------------------------------------------------
00031Dr 2               LIST:
00031Dr 2               .ifdef KBD
00031Dr 2                       jsr     LE440
00031Dr 2                       bne     LE4DE
00031Dr 2                       pla
00031Dr 2                       pla
00031Dr 2               L25A6:
00031Dr 2                       jsr     CRDO
00031Dr 2               .else
00031Dr 2                   .ifdef AIM65
00031Dr 2                       pha
00031Dr 2                       lda     #$00
00031Dr 2               LB4BF:
00031Dr 2                       sta     INPUTFLG
00031Dr 2                       pla
00031Dr 2                   .endif
00031Dr 2                 .ifdef MICROTAN
00031Dr 2                       php
00031Dr 2                       jmp     LE21C ; patch
00031Dr 2               LC57E:
00031Dr 2                  .elseif .def(AIM65) || .def(SYM1)
00031Dr 2  08                   php
00031Er 2  20 rr rr             jsr     LINGET
000321r 2               LC57E:
000321r 2                 .else
000321r 2                       bcc     L2581
000321r 2                       beq     L2581
000321r 2                       cmp     #TOKEN_MINUS
000321r 2                       bne     L256A
000321r 2               L2581:
000321r 2                       jsr     LINGET
000321r 2                 .endif
000321r 2  20 rr rr             jsr     FNDLIN
000324r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000324r 2  28                   plp
000325r 2  F0 14                beq     L2598
000327r 2                 .endif
000327r 2  20 D2 00             jsr     CHRGOT
00032Ar 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00032Ar 2  F0 15                beq     L25A6
00032Cr 2                 .else
00032Cr 2                       beq     L2598
00032Cr 2                 .endif
00032Cr 2  C9 A5                cmp     #TOKEN_MINUS
00032Er 2  D0 95                bne     L2520
000330r 2  20 CC 00             jsr     CHRGET
000333r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000333r 2  F0 06                beq     L2598
000335r 2  20 rr rr             jsr     LINGET
000338r 2  F0 07                beq     L25A6
00033Ar 2  60                   rts
00033Br 2                 .else
00033Br 2                       jsr     LINGET
00033Br 2                       bne     L2520
00033Br 2                 .endif
00033Br 2               L2598:
00033Br 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
00033Br 2                       pla
00033Br 2                       pla
00033Br 2                       lda     LINNUM
00033Br 2                       ora     LINNUM+1
00033Br 2                       bne     L25A6
00033Br 2                 .endif
00033Br 2  A9 FF                lda     #$FF
00033Dr 2  85 1C                sta     LINNUM
00033Fr 2  85 1D                sta     LINNUM+1
000341r 2               L25A6:
000341r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000341r 2  68                   pla
000342r 2  68                   pla
000343r 2                 .endif
000343r 2               L25A6X:
000343r 2               .endif
000343r 2  A0 01                ldy     #$01
000345r 2               .ifdef CONFIG_DATAFLG
000345r 2                       sty     DATAFLG
000345r 2               .endif
000345r 2  B1 AF                lda     (LOWTRX),y
000347r 2  F0 39                beq     L25E5
000349r 2               .ifdef MICROTAN
000349r 2                       jmp     LE21F
000349r 2               LC5A9:
000349r 2               .else
000349r 2  20 rr rr             jsr     ISCNTC
00034Cr 2               .endif
00034Cr 2               .ifndef KBD
00034Cr 2  20 rr rr             jsr     CRDO
00034Fr 2               .endif
00034Fr 2  C8                   iny
000350r 2  B1 AF                lda     (LOWTRX),y
000352r 2  AA                   tax
000353r 2  C8                   iny
000354r 2  B1 AF                lda     (LOWTRX),y
000356r 2  C5 1D                cmp     LINNUM+1
000358r 2  D0 04                bne     L25C1
00035Ar 2  E4 1C                cpx     LINNUM
00035Cr 2  F0 02                beq     L25C3
00035Er 2               L25C1:
00035Er 2  B0 22                bcs     L25E5
000360r 2               ; ---LIST ONE LINE----------------
000360r 2               L25C3:
000360r 2  84 99                sty     FORPNT
000362r 2  20 rr rr             jsr     LINPRT
000365r 2  A9 20                lda     #$20
000367r 2               L25CA:
000367r 2  A4 99                ldy     FORPNT
000369r 2  29 7F                and     #$7F
00036Br 2               L25CE:
00036Br 2  20 rr rr             jsr     OUTDO
00036Er 2               .ifdef CONFIG_DATAFLG
00036Er 2                       cmp     #$22
00036Er 2                       bne     LA519
00036Er 2                       lda     DATAFLG
00036Er 2                       eor     #$FF
00036Er 2                       sta     DATAFLG
00036Er 2               LA519:
00036Er 2               .endif
00036Er 2  C8                   iny
00036Fr 2               .ifdef CONFIG_11
00036Fr 2  F0 11                beq     L25E5
000371r 2               .endif
000371r 2  B1 AF                lda     (LOWTRX),y
000373r 2  D0 10                bne     L25E8
000375r 2  A8                   tay
000376r 2  B1 AF                lda     (LOWTRX),y
000378r 2  AA                   tax
000379r 2  C8                   iny
00037Ar 2  B1 AF                lda     (LOWTRX),y
00037Cr 2  86 AF                stx     LOWTRX
00037Er 2  85 B0                sta     LOWTRX+1
000380r 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000380r 2  D0 C1                bne     L25A6X
000382r 2               .else
000382r 2                       bne     L25A6
000382r 2               .endif
000382r 2               L25E5:
000382r 2               .ifdef AIM65
000382r 2                       lda     INPUTFLG
000382r 2                       beq     L25E5a
000382r 2                       jsr     CRDO
000382r 2                       jsr     CRDO
000382r 2                       lda     #$1a
000382r 2                       jsr     OUTDO
000382r 2                       jsr     $e50a
000382r 2               L25E5a:
000382r 2               .endif
000382r 2  4C rr rr             jmp     RESTART
000385r 2               L25E8:
000385r 2  10 E4                bpl     L25CE
000387r 2               .ifdef CONFIG_DATAFLG
000387r 2                       cmp     #$FF
000387r 2                       beq     L25CE
000387r 2                       bit     DATAFLG
000387r 2                       bmi     L25CE
000387r 2               .endif
000387r 2  38                   sec
000388r 2  E9 7F                sbc     #$7F
00038Ar 2  AA                   tax
00038Br 2  84 99                sty     FORPNT
00038Dr 2  A0 FF                ldy     #$FF
00038Fr 2               L25F2:
00038Fr 2  CA                   dex
000390r 2  F0 08                beq     L25FD
000392r 2               L25F5:
000392r 2  C8                   iny
000393r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000396r 2  10 FA                bpl     L25F5
000398r 2  30 F5                bmi     L25F2
00039Ar 2               L25FD:
00039Ar 2  C8                   iny
00039Br 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00039Er 2  30 C7                bmi     L25CA
0003A0r 2  20 rr rr             jsr     OUTDO
0003A3r 2  D0 F5                bne     L25FD	; always
0003A5r 2               
0003A5r 2               
0003A5r 1               .include "flow1.s"
0003A5r 2               .segment "CODE"
0003A5r 2               
0003A5r 2               ; ----------------------------------------------------------------------------
0003A5r 2               ; "FOR" STATEMENT
0003A5r 2               ;
0003A5r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003A5r 2               ; 2 -- TXTPTR
0003A5r 2               ; 2 -- LINE NUMBER
0003A5r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003A5r 2               ; 1 -- STEP SIGN
0003A5r 2               ; 5 -- STEP VALUE
0003A5r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003A5r 2               ; 1 -- FOR TOKEN ($81)
0003A5r 2               ; ----------------------------------------------------------------------------
0003A5r 2               FOR:
0003A5r 2  A9 80                lda     #$80
0003A7r 2  85 14                sta     SUBFLG
0003A9r 2  20 rr rr             jsr     LET
0003ACr 2  20 rr rr             jsr     GTFORPNT
0003AFr 2  D0 05                bne     L2619
0003B1r 2  8A                   txa
0003B2r 2  69 0F                adc     #FOR_STACK1
0003B4r 2  AA                   tax
0003B5r 2  9A                   txs
0003B6r 2               L2619:
0003B6r 2  68                   pla
0003B7r 2  68                   pla
0003B8r 2  A9 09                lda     #FOR_STACK2
0003BAr 2  20 rr rr             jsr     CHKMEM
0003BDr 2  20 rr rr             jsr     DATAN
0003C0r 2  18                   clc
0003C1r 2  98                   tya
0003C2r 2  65 D3                adc     TXTPTR
0003C4r 2  48                   pha
0003C5r 2  A5 D4                lda     TXTPTR+1
0003C7r 2  69 00                adc     #$00
0003C9r 2  48                   pha
0003CAr 2  A5 8A                lda     CURLIN+1
0003CCr 2  48                   pha
0003CDr 2  A5 89                lda     CURLIN
0003CFr 2  48                   pha
0003D0r 2  A9 9E                lda     #TOKEN_TO
0003D2r 2  20 rr rr             jsr     SYNCHR
0003D5r 2  20 rr rr             jsr     CHKNUM
0003D8r 2  20 rr rr             jsr     FRMNUM
0003DBr 2  A5 B6                lda     FACSIGN
0003DDr 2  09 7F                ora     #$7F
0003DFr 2  25 B2                and     FAC+1
0003E1r 2  85 B2                sta     FAC+1
0003E3r 2  A9 rr                lda     #<STEP
0003E5r 2  A0 rr                ldy     #>STEP
0003E7r 2  85 72                sta     INDEX
0003E9r 2  84 73                sty     INDEX+1
0003EBr 2  4C rr rr             jmp     FRM_STACK3
0003EEr 2               
0003EEr 2               ; ----------------------------------------------------------------------------
0003EEr 2               ; "STEP" PHRASE OF "FOR" STATEMENT
0003EEr 2               ; ----------------------------------------------------------------------------
0003EEr 2               STEP:
0003EEr 2  A9 rr                lda     #<CON_ONE
0003F0r 2  A0 rr                ldy     #>CON_ONE
0003F2r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0003F5r 2  20 D2 00             jsr     CHRGOT
0003F8r 2  C9 A3                cmp     #TOKEN_STEP
0003FAr 2  D0 06                bne     L2665
0003FCr 2  20 CC 00             jsr     CHRGET
0003FFr 2  20 rr rr             jsr     FRMNUM
000402r 2               L2665:
000402r 2  20 rr rr             jsr     SIGN
000405r 2  20 rr rr             jsr     FRM_STACK2
000408r 2  A5 9A                lda     FORPNT+1
00040Ar 2  48                   pha
00040Br 2  A5 99                lda     FORPNT
00040Dr 2  48                   pha
00040Er 2  A9 81                lda     #$81
000410r 2  48                   pha
000411r 2               
000411r 2               ; ----------------------------------------------------------------------------
000411r 2               ; PERFORM NEXT STATEMENT
000411r 2               ; ----------------------------------------------------------------------------
000411r 2               NEWSTT:
000411r 2  20 rr rr             jsr     ISCNTC
000414r 2  A5 D3                lda     TXTPTR
000416r 2  A4 D4                ldy     TXTPTR+1
000418r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000418r 2                       cpy     #>INPUTBUFFER
000418r 2                 .ifdef CBM2
000418r 2                       nop
000418r 2                 .endif
000418r 2                       beq     LC6D4
000418r 2               .else
000418r 2               ; BUG on AppleSoft I,
000418r 2               ; fixed differently on AppleSoft II (ldx/inx)
000418r 2  F0 06                beq     L2683
00041Ar 2               .endif
00041Ar 2  85 8D                sta     OLDTEXT
00041Cr 2  84 8E                sty     OLDTEXT+1
00041Er 2               LC6D4:
00041Er 2  A0 00                ldy     #$00
000420r 2               L2683:
000420r 2  B1 D3                lda     (TXTPTR),y
000422r 2               .ifndef CONFIG_11
000422r 2                       beq     LA5DC	; old: 1 cycle more on generic case
000422r 2                       cmp     #$3A
000422r 2                       beq     NEWSTT2
000422r 2               SYNERR1:
000422r 2                       jmp     SYNERR
000422r 2               LA5DC:
000422r 2               .else
000422r 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
000424r 2               .endif
000424r 2  A0 02                ldy     #$02
000426r 2  B1 D3                lda     (TXTPTR),y
000428r 2  18                   clc
000429r 2               .ifdef CONFIG_2
000429r 2  D0 03 4C rr          jeq     L2701
00042Dr 2  rr           
00042Er 2               .else
00042Er 2                       beq     L2701
00042Er 2               .endif
00042Er 2  C8                   iny
00042Fr 2  B1 D3                lda     (TXTPTR),y
000431r 2  85 89                sta     CURLIN
000433r 2  C8                   iny
000434r 2  B1 D3                lda     (TXTPTR),y
000436r 2  85 8A                sta     CURLIN+1
000438r 2  98                   tya
000439r 2  65 D3                adc     TXTPTR
00043Br 2  85 D3                sta     TXTPTR
00043Dr 2  90 02                bcc     NEWSTT2
00043Fr 2  E6 D4                inc     TXTPTR+1
000441r 2               NEWSTT2:
000441r 2  20 CC 00             jsr     CHRGET
000444r 2  20 rr rr             jsr     EXECUTE_STATEMENT
000447r 2  4C rr rr             jmp     NEWSTT
00044Ar 2               
00044Ar 2               ; ----------------------------------------------------------------------------
00044Ar 2               ; EXECUTE A STATEMENT
00044Ar 2               ;
00044Ar 2               ; (A) IS FIRST CHAR OF STATEMENT
00044Ar 2               ; CARRY IS SET
00044Ar 2               ; ----------------------------------------------------------------------------
00044Ar 2               EXECUTE_STATEMENT:
00044Ar 2               .ifndef CONFIG_11A
00044Ar 2                       beq     RET1
00044Ar 2               .else
00044Ar 2  F0 3C                beq     RET2
00044Cr 2               .endif
00044Cr 2               .ifndef CONFIG_11
00044Cr 2                       sec
00044Cr 2               .endif
00044Cr 2               EXECUTE_STATEMENT1:
00044Cr 2  E9 80                sbc     #$80
00044Er 2               .ifndef CONFIG_11
00044Er 2                       jcc     LET	; old: 1 cycle more on instr.
00044Er 2               .else
00044Er 2  90 11                bcc     LET1; new: 1 cycle more on assignment
000450r 2               .endif
000450r 2  C9 1D                cmp     #NUM_TOKENS
000452r 2               .ifdef CONFIG_2
000452r 2  B0 17                bcs     LC721
000454r 2               .else
000454r 2                       bcs     SYNERR1
000454r 2               .endif
000454r 2  0A                   asl     a
000455r 2  A8                   tay
000456r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
000459r 2  48                   pha
00045Ar 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
00045Dr 2  48                   pha
00045Er 2  4C CC 00             jmp     CHRGET
000461r 2               
000461r 2               .ifdef CONFIG_11
000461r 2               LET1:
000461r 2  4C rr rr             jmp     LET
000464r 2               
000464r 2               COLON:
000464r 2  C9 3A                cmp     #$3A
000466r 2  F0 D9                beq     NEWSTT2
000468r 2               SYNERR1:
000468r 2  4C rr rr             jmp     SYNERR
00046Br 2               .endif
00046Br 2               
00046Br 2               .ifdef CONFIG_2; GO TO
00046Br 2               LC721:
00046Br 2  C9 45                cmp     #TOKEN_GO-$80
00046Dr 2  D0 F9                bne     SYNERR1
00046Fr 2  20 CC 00             jsr     CHRGET
000472r 2  A9 9E                lda     #TOKEN_TO
000474r 2  20 rr rr             jsr     SYNCHR
000477r 2  4C rr rr             jmp     GOTO
00047Ar 2               .endif
00047Ar 2               
00047Ar 2               ; ----------------------------------------------------------------------------
00047Ar 2               ; "RESTORE" STATEMENT
00047Ar 2               ; ----------------------------------------------------------------------------
00047Ar 2               RESTORE:
00047Ar 2  38                   sec
00047Br 2  A5 7B                lda     TXTTAB
00047Dr 2  E9 01                sbc     #$01
00047Fr 2  A4 7C                ldy     TXTTAB+1
000481r 2  B0 01                bcs     SETDA
000483r 2  88                   dey
000484r 2               SETDA:
000484r 2  85 91                sta     DATPTR
000486r 2  84 92                sty     DATPTR+1
000488r 2               RET2:
000488r 2  60                   rts
000489r 2               
000489r 2               .include "iscntc.s"
000489r 3               .segment "CODE"
000489r 3               ; ----------------------------------------------------------------------------
000489r 3               ; SEE IF CONTROL-C TYPED
000489r 3               ; ----------------------------------------------------------------------------
000489r 3               .ifndef CONFIG_CBM_ALL
000489r 3               .include "cbm_iscntc.s"
000489r 4               ; nothing - ISCNTC is a KERNAL function
000489r 4               
000489r 3               .endif
000489r 3               .ifdef KBD
000489r 3               .include "kbd_iscntc.s"
000489r 3               .endif
000489r 3               .ifdef OSI
000489r 3               .include "osi_iscntc.s"
000489r 3               .endif
000489r 3               .ifdef APPLE
000489r 3               .include "apple_iscntc.s"
000489r 3               .endif
000489r 3               .ifdef KIM
000489r 3               .include "kim_iscntc.s"
000489r 3               .endif
000489r 3               .ifdef MICROTAN
000489r 3               .include "microtan_iscntc.s"
000489r 3               .endif
000489r 3               .ifdef AIM65
000489r 3               .include "aim65_iscntc.s"
000489r 3               .endif
000489r 3               .ifdef SYM1
000489r 3               .include "sym1_iscntc.s"
000489r 4               .segment "CODE"
000489r 4               ISCNTC:
000489r 4  20 86 83             jsr     INSTAT
00048Cr 4  90 46                bcc     RET1
00048Er 4               
00048Er 4  A9 03                lda     #$03
000490r 4  C9 03                cmp     #$03
000492r 4               ;!!! runs into "STOP"
000492r 4               
000492r 3               .endif
000492r 3               .ifdef EATER
000492r 3               .include "eater_iscntc.s"
000492r 3               .endif
000492r 3               ;!!! runs into "STOP"
000492r 3               
000492r 2               ;!!! runs into "STOP"
000492r 2               ; ----------------------------------------------------------------------------
000492r 2               ; "STOP" STATEMENT
000492r 2               ; ----------------------------------------------------------------------------
000492r 2               STOP:
000492r 2  B0 01                bcs     END2
000494r 2               
000494r 2               ; ----------------------------------------------------------------------------
000494r 2               ; "END" STATEMENT
000494r 2               ; ----------------------------------------------------------------------------
000494r 2               END:
000494r 2  18                   clc
000495r 2               END2:
000495r 2  D0 3D                bne     RET1
000497r 2  A5 D3                lda     TXTPTR
000499r 2  A4 D4                ldy     TXTPTR+1
00049Br 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
00049Br 2               ; BUG on AppleSoft I
00049Br 2               ; fix exists on AppleSoft II
00049Br 2               ; TXTPTR+1 will always be > 0
00049Br 2                       ldx     CURLIN+1
00049Br 2                       inx
00049Br 2               .endif
00049Br 2  F0 0C                beq     END4
00049Dr 2  85 8D                sta     OLDTEXT
00049Fr 2  84 8E                sty     OLDTEXT+1
0004A1r 2               CONTROL_C_TYPED:
0004A1r 2  A5 89                lda     CURLIN
0004A3r 2  A4 8A                ldy     CURLIN+1
0004A5r 2  85 8B                sta     OLDLIN
0004A7r 2  84 8C                sty     OLDLIN+1
0004A9r 2               END4:
0004A9r 2  68                   pla
0004AAr 2  68                   pla
0004ABr 2               L2701:
0004ABr 2  A9 rr                lda     #<QT_BREAK
0004ADr 2  A0 rr                ldy     #>QT_BREAK
0004AFr 2               .ifndef KBD
0004AFr 2  A2 00                ldx     #$00
0004B1r 2  86 17                stx     Z14
0004B3r 2               .endif
0004B3r 2  90 03                bcc     L270E
0004B5r 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004B8r 2               L270E:
0004B8r 2  4C rr rr             jmp     RESTART
0004BBr 2               .ifdef KBD
0004BBr 2               LE664:
0004BBr 2                       tay
0004BBr 2                       jmp     SNGFLT
0004BBr 2               .endif
0004BBr 2               
0004BBr 2               ; ----------------------------------------------------------------------------
0004BBr 2               ; "CONT" COMMAND
0004BBr 2               ; ----------------------------------------------------------------------------
0004BBr 2               CONT:
0004BBr 2  D0 17                bne     RET1
0004BDr 2  A2 1E                ldx     #ERR_CANTCONT
0004BFr 2  A4 8E                ldy     OLDTEXT+1
0004C1r 2  D0 03                bne     L271C
0004C3r 2  4C rr rr             jmp     ERROR
0004C6r 2               L271C:
0004C6r 2  A5 8D                lda     OLDTEXT
0004C8r 2  85 D3                sta     TXTPTR
0004CAr 2  84 D4                sty     TXTPTR+1
0004CCr 2  A5 8B                lda     OLDLIN
0004CEr 2  A4 8C                ldy     OLDLIN+1
0004D0r 2  85 89                sta     CURLIN
0004D2r 2  84 8A                sty     CURLIN+1
0004D4r 2               RET1:
0004D4r 2  60                   rts
0004D5r 2               
0004D5r 2               .ifdef KBD
0004D5r 2               PRT:
0004D5r 2                       jsr     GETBYT
0004D5r 2                       txa
0004D5r 2               ; not ROR bug safe
0004D5r 2                       ror     a
0004D5r 2                       ror     a
0004D5r 2                       ror     a
0004D5r 2                       sta     $8F
0004D5r 2                       rts
0004D5r 2               
0004D5r 2               LE68C:
0004D5r 2                       ldy     #$12
0004D5r 2               LE68E:
0004D5r 2                       lda     LEA30,y
0004D5r 2                       sta     $03A2,y
0004D5r 2                       dey
0004D5r 2                       bpl     LE68E
0004D5r 2                       rts
0004D5r 2               .endif
0004D5r 2               
0004D5r 2               .ifndef AIM65
0004D5r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004D5r 2               ; CBM1 has the keyword removed,
0004D5r 2               ; but the code is still here
0004D5r 2               NULL:
0004D5r 2  20 rr rr             jsr     GETBYT
0004D8r 2  D0 FA                bne     RET1
0004DAr 2  E8                   inx
0004DBr 2  E0 F0                cpx     #NULL_MAX
0004DDr 2  B0 04                bcs     L2739
0004DFr 2  CA                   dex
0004E0r 2  86 18                stx     Z15
0004E2r 2               L2738:
0004E2r 2  60                   rts
0004E3r 2               L2739:
0004E3r 2  4C rr rr             jmp     IQERR
0004E6r 2               .endif
0004E6r 2               .ifndef CONFIG_11A
0004E6r 2               CLEAR:
0004E6r 2                       bne     RET1
0004E6r 2                       jmp     CLEARC
0004E6r 2               .endif
0004E6r 2               .endif
0004E6r 2               
0004E6r 1               .include "loadsave.s"
0004E6r 2               .segment "CODE"
0004E6r 2               
0004E6r 2               .ifdef APPLE
0004E6r 2               .include "apple_loadsave.s"
0004E6r 2               .endif
0004E6r 2               .ifdef KIM
0004E6r 2               .include "kim_loadsave.s"
0004E6r 2               .endif
0004E6r 2               .ifdef MICROTAN
0004E6r 2               .include "microtan_loadsave.s"
0004E6r 2               .endif
0004E6r 2               .ifdef AIM65
0004E6r 2               .include "aim65_loadsave.s"
0004E6r 2               .endif
0004E6r 2               .ifdef SYM1
0004E6r 2               .include "sym1_loadsave.s"
0004E6r 3               .segment "CODE"
0004E6r 3               
0004E6r 3               SAVE:
0004E6r 3  F0 FB                beq     L2739
0004E8r 3  8D 4E A6             sta     P1L
0004EBr 3  20 CC 00             jsr     CHRGET
0004EEr 3  D0 E4                bne     NULL-1
0004F0r 3               
0004F0r 3  A5 7B                lda     TXTTAB
0004F2r 3  A4 7C                ldy     TXTTAB+1
0004F4r 3  8D 4C A6             sta     P2L
0004F7r 3  8C 4D A6             sty     P2H
0004FAr 3               
0004FAr 3  A5 7D                lda     VARTAB
0004FCr 3  A4 7E                ldy     VARTAB+1
0004FEr 3  8D 4A A6             sta     P3L
000501r 3  8C 4B A6             sty     P3H
000504r 3               
000504r 3  A0 80                ldy     #$80
000506r 3  20 C6 00             jsr     USR2
000509r 3  B0 42                bcs     LC6DD
00050Br 3  A9 rr                lda     #<SAVED
00050Dr 3  A0 rr                ldy     #>SAVED
00050Fr 3  4C rr rr             jmp     STROUT
000512r 3               
000512r 3               LOADED:
000512r 3  4C 4F 41 44          .byte "LOADED",CR,LF
000516r 3  45 44 0D 0A  
00051Ar 3  4F 4B 0D 0A          .byte "OK",CR,LF,0
00051Er 3  00           
00051Fr 3               
00051Fr 3               SAVED:
00051Fr 3  53 41 56 45          .byte "SAVED",CR,LF,0
000523r 3  44 0D 0A 00  
000527r 3               
000527r 3               LOAD:
000527r 3  F0 BA                beq     L2739
000529r 3  8D 4E A6             sta     $A64E
00052Cr 3  20 CC 00             jsr     CHRGET
00052Fr 3  D0 B1                bne     L2738
000531r 3  A0 80                ldy     #$80
000533r 3  20 C9 00             jsr     USR3
000536r 3  B0 27                bcs     LC6EF
000538r 3               
000538r 3  A9 rr                lda     #<LOADED
00053Ar 3  A0 rr                ldy     #>LOADED
00053Cr 3  20 rr rr             jsr     STROUT
00053Fr 3               
00053Fr 3  AE 4A A6             ldx     P3L
000542r 3  AC 4B A6             ldy     P3H
000545r 3  8A                   txa
000546r 3  86 7D                stx     VARTAB
000548r 3  84 7E                sty     VARTAB+1
00054Ar 3  4C rr rr             jmp     FIX_LINKS
00054Dr 3               
00054Dr 3               LC6DD:
00054Dr 3  A9 rr                lda     #<BAD_SAVE
00054Fr 3  A0 rr                ldy     #>BAD_SAVE
000551r 3  4C rr rr             jmp     STROUT
000554r 3               
000554r 3               BAD_SAVE:
000554r 3  42 41 44 20          htasc   "BAD SAVE"
000558r 3  53 41 56 C5  
00055Cr 3  0D 0A 00             .byte   CR,LF,0
00055Fr 3               LC6EF:
00055Fr 3  A9 rr                lda     #<BAD_LOAD
000561r 3  A0 rr                ldy     #>BAD_LOAD
000563r 3  20 rr rr             jsr     STROUT
000566r 3  20 rr rr             jsr     SCRTCH
000569r 3  4C rr rr             jmp     RESTART
00056Cr 3               
00056Cr 3               BAD_LOAD:
00056Cr 3  42 41 44 20          htasc   "BAD LOAD"
000570r 3  4C 4F 41 C4  
000574r 3  0D 0A 00             .byte   CR,LF,0
000577r 3               
000577r 2               .endif
000577r 2               
000577r 1               .include "flow2.s"
000577r 2               .segment "CODE"
000577r 2               ; ----------------------------------------------------------------------------
000577r 2               ; "RUN" COMMAND
000577r 2               ; ----------------------------------------------------------------------------
000577r 2               RUN:
000577r 2  D0 03                bne     L27CF
000579r 2  4C rr rr             jmp     SETPTRS
00057Cr 2               L27CF:
00057Cr 2  20 rr rr             jsr     CLEARC
00057Fr 2  4C rr rr             jmp     L27E9
000582r 2               
000582r 2               ; ----------------------------------------------------------------------------
000582r 2               ; "GOSUB" STATEMENT
000582r 2               ;
000582r 2               ; LEAVES 7 BYTES ON STACK:
000582r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
000582r 2               ; 2 -- TXTPTR
000582r 2               ; 2 -- LINE #
000582r 2               ; 1 -- GOSUB TOKEN
000582r 2               ; ----------------------------------------------------------------------------
000582r 2               GOSUB:
000582r 2  A9 03                lda     #$03
000584r 2  20 rr rr             jsr     CHKMEM
000587r 2  A5 D4                lda     TXTPTR+1
000589r 2  48                   pha
00058Ar 2  A5 D3                lda     TXTPTR
00058Cr 2  48                   pha
00058Dr 2  A5 8A                lda     CURLIN+1
00058Fr 2  48                   pha
000590r 2  A5 89                lda     CURLIN
000592r 2  48                   pha
000593r 2  A9 8C                lda     #TOKEN_GOSUB
000595r 2  48                   pha
000596r 2               L27E9:
000596r 2  20 D2 00             jsr     CHRGOT
000599r 2  20 rr rr             jsr     GOTO
00059Cr 2  4C rr rr             jmp     NEWSTT
00059Fr 2               
00059Fr 2               ; ----------------------------------------------------------------------------
00059Fr 2               ; "GOTO" STATEMENT
00059Fr 2               ; ALSO USED BY "RUN" AND "GOSUB"
00059Fr 2               ; ----------------------------------------------------------------------------
00059Fr 2               GOTO:
00059Fr 2  20 rr rr             jsr     LINGET
0005A2r 2  20 rr rr             jsr     REMN
0005A5r 2  A5 8A                lda     CURLIN+1
0005A7r 2  C5 1D                cmp     LINNUM+1
0005A9r 2  B0 0B                bcs     L2809
0005ABr 2  98                   tya
0005ACr 2  38                   sec
0005ADr 2  65 D3                adc     TXTPTR
0005AFr 2  A6 D4                ldx     TXTPTR+1
0005B1r 2  90 07                bcc     L280D
0005B3r 2  E8                   inx
0005B4r 2  B0 04                bcs     L280D
0005B6r 2               L2809:
0005B6r 2  A5 7B                lda     TXTTAB
0005B8r 2  A6 7C                ldx     TXTTAB+1
0005BAr 2               L280D:
0005BAr 2               .ifdef KBD
0005BAr 2                       jsr     LF457
0005BAr 2                       bne     UNDERR
0005BAr 2               .else
0005BAr 2  20 rr rr             jsr     FL1
0005BDr 2  90 1E                bcc     UNDERR
0005BFr 2               .endif
0005BFr 2  A5 AF                lda     LOWTRX
0005C1r 2  E9 01                sbc     #$01
0005C3r 2  85 D3                sta     TXTPTR
0005C5r 2  A5 B0                lda     LOWTRX+1
0005C7r 2  E9 00                sbc     #$00
0005C9r 2  85 D4                sta     TXTPTR+1
0005CBr 2               L281E:
0005CBr 2  60                   rts
0005CCr 2               
0005CCr 2               ; ----------------------------------------------------------------------------
0005CCr 2               ; "POP" AND "RETURN" STATEMENTS
0005CCr 2               ; ----------------------------------------------------------------------------
0005CCr 2               POP:
0005CCr 2  D0 FD                bne     L281E
0005CEr 2  A9 FF                lda     #$FF
0005D0r 2               .ifdef CONFIG_2A
0005D0r 2  85 9A                sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
0005D2r 2               .else
0005D2r 2                       sta     FORPNT
0005D2r 2               .endif
0005D2r 2  20 rr rr             jsr     GTFORPNT
0005D5r 2  9A                   txs
0005D6r 2  C9 8C                cmp     #TOKEN_GOSUB
0005D8r 2  F0 0B                beq     RETURN
0005DAr 2  A2 04                ldx     #ERR_NOGOSUB
0005DCr 2  2C                   .byte   $2C
0005DDr 2               UNDERR:
0005DDr 2  A2 0E                ldx     #ERR_UNDEFSTAT
0005DFr 2  4C rr rr             jmp     ERROR
0005E2r 2               ; ----------------------------------------------------------------------------
0005E2r 2               SYNERR2:
0005E2r 2  4C rr rr             jmp     SYNERR
0005E5r 2               ; ----------------------------------------------------------------------------
0005E5r 2               RETURN:
0005E5r 2  68                   pla
0005E6r 2  68                   pla
0005E7r 2  85 89                sta     CURLIN
0005E9r 2  68                   pla
0005EAr 2  85 8A                sta     CURLIN+1
0005ECr 2  68                   pla
0005EDr 2  85 D3                sta     TXTPTR
0005EFr 2  68                   pla
0005F0r 2  85 D4                sta     TXTPTR+1
0005F2r 2               
0005F2r 2               ; ----------------------------------------------------------------------------
0005F2r 2               ; "DATA" STATEMENT
0005F2r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
0005F2r 2               ; ----------------------------------------------------------------------------
0005F2r 2               DATA:
0005F2r 2  20 rr rr             jsr     DATAN
0005F5r 2               
0005F5r 2               ; ----------------------------------------------------------------------------
0005F5r 2               ; ADD (Y) TO TXTPTR
0005F5r 2               ; ----------------------------------------------------------------------------
0005F5r 2               ADDON:
0005F5r 2  98                   tya
0005F6r 2  18                   clc
0005F7r 2  65 D3                adc     TXTPTR
0005F9r 2  85 D3                sta     TXTPTR
0005FBr 2  90 02                bcc     L2852
0005FDr 2  E6 D4                inc     TXTPTR+1
0005FFr 2               L2852:
0005FFr 2  60                   rts
000600r 2               
000600r 2               ; ----------------------------------------------------------------------------
000600r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000600r 2               ; ----------------------------------------------------------------------------
000600r 2               DATAN:
000600r 2  A2 3A                ldx     #$3A
000602r 2  2C                   .byte   $2C
000603r 2               REMN:
000603r 2  A2 00                ldx     #$00
000605r 2  86 0D                stx     CHARAC
000607r 2  A0 00                ldy     #$00
000609r 2  84 0E                sty     ENDCHR
00060Br 2               L285E:
00060Br 2  A5 0E                lda     ENDCHR
00060Dr 2  A6 0D                ldx     CHARAC
00060Fr 2  85 0D                sta     CHARAC
000611r 2  86 0E                stx     ENDCHR
000613r 2               L2866:
000613r 2  B1 D3                lda     (TXTPTR),y
000615r 2  F0 E8                beq     L2852
000617r 2  C5 0E                cmp     ENDCHR
000619r 2  F0 E4                beq     L2852
00061Br 2  C8                   iny
00061Cr 2  C9 22                cmp     #$22
00061Er 2               .ifndef CONFIG_11
00061Er 2                       beq     L285E; old: swap & cont is faster
00061Er 2                       bne     L2866
00061Er 2               .else
00061Er 2  D0 F3                bne     L2866; new: cont is faster
000620r 2  F0 E9                beq     L285E
000622r 2               .endif
000622r 2               
000622r 2               ; ----------------------------------------------------------------------------
000622r 2               ; "IF" STATEMENT
000622r 2               ; ----------------------------------------------------------------------------
000622r 2               IF:
000622r 2  20 rr rr             jsr     FRMEVL
000625r 2  20 D2 00             jsr     CHRGOT
000628r 2  C9 88                cmp     #TOKEN_GOTO
00062Ar 2  F0 05                beq     L2884
00062Cr 2  A9 A1                lda     #TOKEN_THEN
00062Er 2  20 rr rr             jsr     SYNCHR
000631r 2               L2884:
000631r 2  A5 B1                lda     FAC
000633r 2  D0 05                bne     L288D
000635r 2               
000635r 2               ; ----------------------------------------------------------------------------
000635r 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
000635r 2               ; ----------------------------------------------------------------------------
000635r 2               REM:
000635r 2  20 rr rr             jsr     REMN
000638r 2  F0 BB                beq     ADDON
00063Ar 2               L288D:
00063Ar 2  20 D2 00             jsr     CHRGOT
00063Dr 2  B0 03                bcs     L2895
00063Fr 2  4C rr rr             jmp     GOTO
000642r 2               L2895:
000642r 2  4C rr rr             jmp     EXECUTE_STATEMENT
000645r 2               
000645r 2               ; ----------------------------------------------------------------------------
000645r 2               ; "ON" STATEMENT
000645r 2               ;
000645r 2               ; ON <EXP> GOTO <LIST>
000645r 2               ; ON <EXP> GOSUB <LIST>
000645r 2               ; ----------------------------------------------------------------------------
000645r 2               ON:
000645r 2  20 rr rr             jsr     GETBYT
000648r 2  48                   pha
000649r 2  C9 8C                cmp     #TOKEN_GOSUB
00064Br 2  F0 04                beq     L28A4
00064Dr 2               L28A0:
00064Dr 2  C9 88                cmp     #TOKEN_GOTO
00064Fr 2  D0 91                bne     SYNERR2
000651r 2               L28A4:
000651r 2  C6 B5                dec     FAC_LAST
000653r 2  D0 04                bne     L28AC
000655r 2  68                   pla
000656r 2  4C rr rr             jmp     EXECUTE_STATEMENT1
000659r 2               L28AC:
000659r 2  20 CC 00             jsr     CHRGET
00065Cr 2  20 rr rr             jsr     LINGET
00065Fr 2  C9 2C                cmp     #$2C
000661r 2  F0 EE                beq     L28A4
000663r 2  68                   pla
000664r 2               L28B7:
000664r 2  60                   rts
000665r 2               
000665r 1               .include "misc1.s"
000665r 2               .segment "CODE"
000665r 2               
000665r 2               ; ----------------------------------------------------------------------------
000665r 2               ; CONVERT LINE NUMBER
000665r 2               ; ----------------------------------------------------------------------------
000665r 2               LINGET:
000665r 2  A2 00                ldx     #$00
000667r 2  86 1C                stx     LINNUM
000669r 2  86 1D                stx     LINNUM+1
00066Br 2               L28BE:
00066Br 2  B0 F7                bcs     L28B7
00066Dr 2  E9 2F                sbc     #$2F
00066Fr 2  85 0D                sta     CHARAC
000671r 2  A5 1D                lda     LINNUM+1
000673r 2  85 72                sta     INDEX
000675r 2  C9 19                cmp     #$19
000677r 2  B0 D4                bcs     L28A0
000679r 2               ; <<<<<DANGEROUS CODE>>>>>
000679r 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
000679r 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
000679r 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
000679r 2               ; FOR OTHER CALLS TO LINGET.
000679r 2               ;
000679r 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
000679r 2               ; THEN TYPE "GO TO 437761".
000679r 2               ;
000679r 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
000679r 2               ; THE PROBLEM.  ($AB00 - $ABFF)
000679r 2               ; <<<<<DANGEROUS CODE>>>>>
000679r 2  A5 1C                lda     LINNUM
00067Br 2  0A                   asl     a
00067Cr 2  26 72                rol     INDEX
00067Er 2  0A                   asl     a
00067Fr 2  26 72                rol     INDEX
000681r 2  65 1C                adc     LINNUM
000683r 2  85 1C                sta     LINNUM
000685r 2  A5 72                lda     INDEX
000687r 2  65 1D                adc     LINNUM+1
000689r 2  85 1D                sta     LINNUM+1
00068Br 2  06 1C                asl     LINNUM
00068Dr 2  26 1D                rol     LINNUM+1
00068Fr 2  A5 1C                lda     LINNUM
000691r 2  65 0D                adc     CHARAC
000693r 2  85 1C                sta     LINNUM
000695r 2  90 02                bcc     L28EC
000697r 2  E6 1D                inc     LINNUM+1
000699r 2               L28EC:
000699r 2  20 CC 00             jsr     CHRGET
00069Cr 2  4C rr rr             jmp     L28BE
00069Fr 2               
00069Fr 2               ; ----------------------------------------------------------------------------
00069Fr 2               ; "LET" STATEMENT
00069Fr 2               ;
00069Fr 2               ; LET <VAR> = <EXP>
00069Fr 2               ; <VAR> = <EXP>
00069Fr 2               ; ----------------------------------------------------------------------------
00069Fr 2               LET:
00069Fr 2  20 rr rr             jsr     PTRGET
0006A2r 2  85 99                sta     FORPNT
0006A4r 2  84 9A                sty     FORPNT+1
0006A6r 2  A9 AC                lda     #TOKEN_EQUAL
0006A8r 2  20 rr rr             jsr     SYNCHR
0006ABr 2               .ifndef CONFIG_SMALL
0006ABr 2  A5 12                lda     VALTYP+1
0006ADr 2  48                   pha
0006AEr 2               .endif
0006AEr 2  A5 11                lda     VALTYP
0006B0r 2  48                   pha
0006B1r 2  20 rr rr             jsr     FRMEVL
0006B4r 2  68                   pla
0006B5r 2  2A                   rol     a
0006B6r 2  20 rr rr             jsr     CHKVAL
0006B9r 2  D0 18                bne     LETSTRING
0006BBr 2               .ifndef CONFIG_SMALL
0006BBr 2  68                   pla
0006BCr 2               LET2:
0006BCr 2  10 12                bpl     L2923
0006BEr 2  20 rr rr             jsr     ROUND_FAC
0006C1r 2  20 rr rr             jsr     AYINT
0006C4r 2  A0 00                ldy     #$00
0006C6r 2  A5 B4                lda     FAC+3
0006C8r 2  91 99                sta     (FORPNT),y
0006CAr 2  C8                   iny
0006CBr 2  A5 B5                lda     FAC+4
0006CDr 2  91 99                sta     (FORPNT),y
0006CFr 2  60                   rts
0006D0r 2               L2923:
0006D0r 2               .endif
0006D0r 2               
0006D0r 2               ; ----------------------------------------------------------------------------
0006D0r 2               ; REAL VARIABLE = EXPRESSION
0006D0r 2               ; ----------------------------------------------------------------------------
0006D0r 2  4C rr rr             jmp     SETFOR
0006D3r 2               LETSTRING:
0006D3r 2               .ifndef CONFIG_SMALL
0006D3r 2  68                   pla
0006D4r 2               .endif
0006D4r 2               
0006D4r 2               ; ----------------------------------------------------------------------------
0006D4r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
0006D4r 2               ; ----------------------------------------------------------------------------
0006D4r 2               PUTSTR:
0006D4r 2               .ifdef CONFIG_CBM_ALL
0006D4r 2                       ldy     FORPNT+1
0006D4r 2                 .ifdef CBM1
0006D4r 2                       cpy     #$D0	; TI$
0006D4r 2                 .else
0006D4r 2                       cpy     #$DE
0006D4r 2                 .endif
0006D4r 2                       bne     LC92B
0006D4r 2                       jsr     FREFAC
0006D4r 2                       cmp     #$06
0006D4r 2                 .ifdef CBM2
0006D4r 2                       bne     IQERR1
0006D4r 2                 .else
0006D4r 2                       jne     IQERR
0006D4r 2                 .endif
0006D4r 2                       ldy     #$00
0006D4r 2                       sty     FAC
0006D4r 2                       sty     FACSIGN
0006D4r 2               LC8E8:
0006D4r 2                       sty     STRNG2
0006D4r 2                       jsr     LC91C
0006D4r 2                       jsr     MUL10
0006D4r 2                       inc     STRNG2
0006D4r 2                       ldy     STRNG2
0006D4r 2                       jsr     LC91C
0006D4r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
0006D4r 2                       tax
0006D4r 2                       beq     LC902
0006D4r 2                       inx
0006D4r 2                       txa
0006D4r 2                       jsr     LD9BF
0006D4r 2               LC902:
0006D4r 2                       ldy     STRNG2
0006D4r 2                       iny
0006D4r 2                       cpy     #$06
0006D4r 2                       bne     LC8E8
0006D4r 2                       jsr     MUL10
0006D4r 2                       jsr     QINT
0006D4r 2                       ldx     #$02
0006D4r 2                       sei
0006D4r 2               LC912:
0006D4r 2                       lda     FAC+2,x
0006D4r 2                       sta     TISTR,x
0006D4r 2                       dex
0006D4r 2                       bpl     LC912
0006D4r 2                       cli
0006D4r 2                       rts
0006D4r 2               LC91C:
0006D4r 2                       lda     (INDEX),y
0006D4r 2                       jsr     CHRGOT2
0006D4r 2                       bcc     LC926
0006D4r 2               IQERR1:
0006D4r 2                       jmp     IQERR
0006D4r 2               LC926:
0006D4r 2                       sbc     #$2F
0006D4r 2                       jmp     ADDACC
0006D4r 2               LC92B:
0006D4r 2               .endif
0006D4r 2  A0 02                ldy     #$02
0006D6r 2  B1 B4                lda     (FAC_LAST-1),y
0006D8r 2  C5 84                cmp     FRETOP+1
0006DAr 2  90 17                bcc     L2946
0006DCr 2  D0 07                bne     L2938
0006DEr 2  88                   dey
0006DFr 2  B1 B4                lda     (FAC_LAST-1),y
0006E1r 2  C5 83                cmp     FRETOP
0006E3r 2  90 0E                bcc     L2946
0006E5r 2               L2938:
0006E5r 2  A4 B5                ldy     FAC_LAST
0006E7r 2  C4 7E                cpy     VARTAB+1
0006E9r 2  90 08                bcc     L2946
0006EBr 2  D0 0D                bne     L294D
0006EDr 2  A5 B4                lda     FAC_LAST-1
0006EFr 2  C5 7D                cmp     VARTAB
0006F1r 2  B0 07                bcs     L294D
0006F3r 2               L2946:
0006F3r 2  A5 B4                lda     FAC_LAST-1
0006F5r 2  A4 B5                ldy     FAC_LAST
0006F7r 2  4C rr rr             jmp     L2963
0006FAr 2               L294D:
0006FAr 2  A0 00                ldy     #$00
0006FCr 2  B1 B4                lda     (FAC_LAST-1),y
0006FEr 2  20 rr rr             jsr     STRINI
000701r 2  A5 A0                lda     DSCPTR
000703r 2  A4 A1                ldy     DSCPTR+1
000705r 2  85 BF                sta     STRNG1
000707r 2  84 C0                sty     STRNG1+1
000709r 2  20 rr rr             jsr     MOVINS
00070Cr 2  A9 B1                lda     #FAC
00070Er 2  A0 00                ldy     #$00
000710r 2               L2963:
000710r 2  85 A0                sta     DSCPTR
000712r 2  84 A1                sty     DSCPTR+1
000714r 2  20 rr rr             jsr     FRETMS
000717r 2  A0 00                ldy     #$00
000719r 2  B1 A0                lda     (DSCPTR),y
00071Br 2  91 99                sta     (FORPNT),y
00071Dr 2  C8                   iny
00071Er 2  B1 A0                lda     (DSCPTR),y
000720r 2  91 99                sta     (FORPNT),y
000722r 2  C8                   iny
000723r 2  B1 A0                lda     (DSCPTR),y
000725r 2  91 99                sta     (FORPNT),y
000727r 2               RET5:
000727r 2  60                   rts
000728r 2               .ifdef AIM65
000728r 2               LB89D:
000728r 2                       cmp     #$21
000728r 2                       bne     RET5
000728r 2                       lda     #$80
000728r 2                       sta     PRIFLG
000728r 2                       jmp     CHRGET
000728r 2               .endif
000728r 2               
000728r 2               .ifdef CONFIG_FILE
000728r 2               PRINTH:
000728r 2                       jsr     CMD
000728r 2                       jmp     LCAD6
000728r 2               CMD:
000728r 2                       jsr     GETBYT
000728r 2                       beq     LC98F
000728r 2                       lda     #$2C
000728r 2                       jsr     SYNCHR
000728r 2               LC98F:
000728r 2                       php
000728r 2                       jsr     CHKOUT
000728r 2                       stx     CURDVC
000728r 2                       plp
000728r 2                       jmp     PRINT
000728r 2               .endif
000728r 2               
000728r 2               
000728r 1               .include "print.s"
000728r 2               .segment "CODE"
000728r 2               
000728r 2               .ifdef AIM65
000728r 2               PRINT:
000728r 2                       lda     PRIFLG
000728r 2                       sta     ZBE
000728r 2                       jsr     L297E
000728r 2               LB8B1:
000728r 2                       lda     ZBE
000728r 2                       sta     PRIFLG
000728r 2                       rts
000728r 2               .endif
000728r 2               
000728r 2               PRSTRING:
000728r 2  20 rr rr             jsr     STRPRT
00072Br 2               L297E:
00072Br 2  20 D2 00             jsr     CHRGOT
00072Er 2               
00072Er 2               ; ----------------------------------------------------------------------------
00072Er 2               ; "PRINT" STATEMENT
00072Er 2               ; ----------------------------------------------------------------------------
00072Er 2               .ifndef AIM65
00072Er 2               PRINT:
00072Er 2               .endif
00072Er 2  F0 3E                beq     CRDO
000730r 2               PRINT2:
000730r 2  F0 5A                beq     L29DD
000732r 2               .ifdef AIM65
000732r 2                       jsr     LB89D
000732r 2                       beq     L29DD
000732r 2               .endif
000732r 2  C9 9D                cmp     #TOKEN_TAB
000734r 2  F0 6E                beq     L29F5
000736r 2  C9 A0                cmp     #TOKEN_SPC
000738r 2               .ifdef CONFIG_2
000738r 2  18                   clc	; also AppleSoft II
000739r 2               .endif
000739r 2  F0 69                beq     L29F5
00073Br 2  C9 2C                cmp     #','
00073Dr 2               ; Pre-KIM had no CLC. KIM added the CLC
00073Dr 2               ; here. Post-KIM moved the CLC up...
00073Dr 2               ; (makes no sense on KIM, liveness = 0)
00073Dr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
00073Dr 2                       clc
00073Dr 2               .endif
00073Dr 2  F0 4E                beq     L29DE
00073Fr 2  C9 3B                cmp     #$3B
000741r 2  F0 76                beq     L2A0D
000743r 2  20 rr rr             jsr     FRMEVL
000746r 2  24 11                bit     VALTYP
000748r 2  30 DE                bmi     PRSTRING
00074Ar 2  20 rr rr             jsr     FOUT
00074Dr 2  20 rr rr             jsr     STRLIT
000750r 2               .ifndef CONFIG_NO_CR
000750r 2  A0 00                ldy     #$00
000752r 2  B1 B4                lda     (FAC_LAST-1),y
000754r 2  18                   clc
000755r 2  65 19                adc     POSX
000757r 2                 .ifdef KBD
000757r 2                       cmp     #$28
000757r 2                 .else
000757r 2  C5 1A                cmp     Z17
000759r 2                 .endif
000759r 2  90 03                bcc     L29B1
00075Br 2  20 rr rr             jsr     CRDO
00075Er 2               L29B1:
00075Er 2               .endif
00075Er 2  20 rr rr             jsr     STRPRT
000761r 2               .ifdef KBD
000761r 2                       jmp     L297E
000761r 2               .else
000761r 2  20 rr rr             jsr     OUTSP
000764r 2  D0 C5                bne     L297E ; branch always
000766r 2               .endif
000766r 2               
000766r 2               .ifdef KBD
000766r 2               ; PATCHES
000766r 2               LE86C:
000766r 2                       pla
000766r 2                       jmp     CONTROL_C_TYPED
000766r 2               LE870:
000766r 2                       jsr     GETBYT
000766r 2                       txa
000766r 2               LE874:
000766r 2                       beq     LE878
000766r 2                       bpl     LE8F2
000766r 2               LE878:
000766r 2                       jmp     IQERR
000766r 2               ; PATCHES
000766r 2               .endif
000766r 2               
000766r 2               
000766r 2               
000766r 2               .ifndef KBD
000766r 2               L29B9:
000766r 2                 .ifdef CBM2
000766r 2                       lda     #$00
000766r 2                       sta     INPUTBUFFER,x
000766r 2                       ldx     #<(INPUTBUFFER-1)
000766r 2                       ldy     #>(INPUTBUFFER-1)
000766r 2                 .else
000766r 2                   .ifndef APPLE
000766r 2  A0 00                ldy     #$00
000768r 2  94 1E                sty     INPUTBUFFER,x
00076Ar 2  A2 1D                ldx     #LINNUM+1
00076Cr 2                   .endif
00076Cr 2                   .if .def(MICROTAN) || .def(SYM1)
00076Cr 2  D0 07                bne     CRDO2
00076Er 2               	.endif
00076Er 2                 .endif
00076Er 2                 .ifdef CONFIG_FILE
00076Er 2                       lda     CURDVC
00076Er 2                       bne     L29DD
00076Er 2                 .endif
00076Er 2               .endif
00076Er 2               
00076Er 2               
00076Er 2               CRDO:
00076Er 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
00076Er 2                       lda     CURDVC
00076Er 2                       bne     LC9D8
00076Er 2                       sta     POSX
00076Er 2               LC9D8:
00076Er 2               .endif
00076Er 2  A9 0D                lda     #CRLF_1
000770r 2               .ifndef CONFIG_CBM_ALL
000770r 2  85 19                sta     POSX
000772r 2               .endif
000772r 2  20 rr rr             jsr     OUTDO
000775r 2               CRDO2:
000775r 2  A9 0A                lda     #CRLF_2
000777r 2  20 rr rr             jsr     OUTDO
00077Ar 2               
00077Ar 2               PRINTNULLS:
00077Ar 2               .if .def(KBD) || .def(AIM65)
00077Ar 2                       lda     #$00
00077Ar 2                       sta     POSX
00077Ar 2                       eor     #$FF
00077Ar 2               .else
00077Ar 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
00077Ar 2                   .ifdef CONFIG_FILE
00077Ar 2                   ; Although there is no statement for it,
00077Ar 2                   ; CBM1 had NULL support and ignores
00077Ar 2                   ; it when not targeting the screen,
00077Ar 2                   ; CBM2 dropped it completely.
00077Ar 2                       lda     CURDVC
00077Ar 2                       bne     L29DD
00077Ar 2                   .endif
00077Ar 2  8A                   txa
00077Br 2  48                   pha
00077Cr 2  A6 18                ldx     Z15
00077Er 2  F0 08                beq     L29D9
000780r 2                     .ifdef SYM1
000780r 2  A9 FF                lda     #$FF
000782r 2                     .else
000782r 2                       lda     #$00
000782r 2                     .endif
000782r 2               L29D3:
000782r 2  20 rr rr             jsr     OUTDO
000785r 2  CA                   dex
000786r 2  D0 FA                bne     L29D3
000788r 2               L29D9:
000788r 2  86 19                stx     POSX
00078Ar 2  68                   pla
00078Br 2  AA                   tax
00078Cr 2                 .else
00078Cr 2                   .ifndef CONFIG_2
00078Cr 2                       lda     #$00
00078Cr 2                       sta     POSX
00078Cr 2                   .endif
00078Cr 2                       eor     #$FF
00078Cr 2                 .endif
00078Cr 2               .endif
00078Cr 2               L29DD:
00078Cr 2  60                   rts
00078Dr 2               L29DE:
00078Dr 2  A5 19                lda     POSX
00078Fr 2               .ifndef CONFIG_NO_CR
00078Fr 2                 .ifdef KBD
00078Fr 2                       cmp     #$1A
00078Fr 2                 .else
00078Fr 2  C5 1B                cmp     Z18
000791r 2                 .endif
000791r 2  90 06                bcc     L29EA
000793r 2  20 rr rr             jsr     CRDO
000796r 2  4C rr rr             jmp     L2A0D
000799r 2               L29EA:
000799r 2               .endif
000799r 2  38                   sec
00079Ar 2               L29EB:
00079Ar 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
00079Ar 2                       sbc     #$0A
00079Ar 2               .else
00079Ar 2                 .ifdef KBD
00079Ar 2                       sbc     #$0D
00079Ar 2                 .else
00079Ar 2  E9 0E                sbc     #$0E
00079Cr 2                 .endif
00079Cr 2               .endif
00079Cr 2  B0 FC                bcs     L29EB
00079Er 2  49 FF                eor     #$FF
0007A0r 2  69 01                adc     #$01
0007A2r 2  D0 10                bne     L2A08
0007A4r 2               L29F5:
0007A4r 2               .ifdef CONFIG_11A
0007A4r 2  08                   php
0007A5r 2               .else
0007A5r 2                       pha
0007A5r 2               .endif
0007A5r 2  20 rr rr             jsr     GTBYTC
0007A8r 2  C9 29                cmp     #')'
0007AAr 2               .ifdef CONFIG_11A
0007AAr 2                 .ifdef CONFIG_2
0007AAr 2  D0 61                bne     SYNERR4
0007ACr 2                 .else
0007ACr 2                       jne     SYNERR
0007ACr 2                 .endif
0007ACr 2  28                   plp
0007ADr 2  90 06                bcc     L2A09
0007AFr 2               .else
0007AFr 2                 .ifdef CONFIG_11
0007AFr 2                       jne     SYNERR
0007AFr 2                 .else
0007AFr 2                       bne     SYNERR4
0007AFr 2                 .endif
0007AFr 2                       pla
0007AFr 2                       cmp     #TOKEN_TAB
0007AFr 2                 .ifdef CONFIG_11
0007AFr 2                       bne     L2A09
0007AFr 2                 .else
0007AFr 2                       bne     L2A0A
0007AFr 2                 .endif
0007AFr 2               .endif
0007AFr 2  8A                   txa
0007B0r 2  E5 19                sbc     POSX
0007B2r 2  90 05                bcc     L2A0D
0007B4r 2               .ifndef CONFIG_11
0007B4r 2                       beq     L2A0D
0007B4r 2               .endif
0007B4r 2               L2A08:
0007B4r 2  AA                   tax
0007B5r 2               .ifdef CONFIG_11
0007B5r 2               L2A09:
0007B5r 2  E8                   inx
0007B6r 2               .endif
0007B6r 2               L2A0A:
0007B6r 2               .ifndef CONFIG_11
0007B6r 2                       jsr     OUTSP
0007B6r 2               .endif
0007B6r 2  CA                   dex
0007B7r 2               .ifndef CONFIG_11
0007B7r 2                       bne     L2A0A
0007B7r 2               .else
0007B7r 2  D0 06                bne     L2A13
0007B9r 2               .endif
0007B9r 2               L2A0D:
0007B9r 2  20 CC 00             jsr     CHRGET
0007BCr 2  4C rr rr             jmp     PRINT2
0007BFr 2               .ifdef CONFIG_11
0007BFr 2               L2A13:
0007BFr 2  20 rr rr             jsr     OUTSP
0007C2r 2  D0 F2                bne     L2A0A
0007C4r 2               .endif
0007C4r 2               
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               ; PRINT STRING AT (Y,A)
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               STROUT:
0007C4r 2  20 rr rr             jsr     STRLIT
0007C7r 2               
0007C7r 2               ; ----------------------------------------------------------------------------
0007C7r 2               ; PRINT STRING AT (FACMO,FACLO)
0007C7r 2               ; ----------------------------------------------------------------------------
0007C7r 2               STRPRT:
0007C7r 2  20 rr rr             jsr     FREFAC
0007CAr 2  AA                   tax
0007CBr 2  A0 00                ldy     #$00
0007CDr 2  E8                   inx
0007CEr 2               L2A22:
0007CEr 2  CA                   dex
0007CFr 2  F0 BB                beq     L29DD
0007D1r 2  B1 72                lda     (INDEX),y
0007D3r 2  20 rr rr             jsr     OUTDO
0007D6r 2  C8                   iny
0007D7r 2  C9 0D                cmp     #$0D
0007D9r 2  D0 F3                bne     L2A22
0007DBr 2  20 rr rr             jsr     PRINTNULLS
0007DEr 2  4C rr rr             jmp     L2A22
0007E1r 2               ; ----------------------------------------------------------------------------
0007E1r 2               OUTSP:
0007E1r 2               .ifdef CONFIG_FILE
0007E1r 2                 .ifndef CBM1
0007E1r 2               ; on non-screen devices, print SPACE
0007E1r 2               ; instead of CRSR RIGHT
0007E1r 2                       lda     CURDVC
0007E1r 2                       beq     LCA40
0007E1r 2                       lda     #$20
0007E1r 2                       .byte   $2C
0007E1r 2               LCA40:
0007E1r 2                 .endif
0007E1r 2                       lda     #$1D ; CRSR RIGHT
0007E1r 2               .else
0007E1r 2  A9 20                lda     #$20
0007E3r 2               .endif
0007E3r 2  2C                   .byte   $2C
0007E4r 2               OUTQUES:
0007E4r 2  A9 3F                lda     #$3F
0007E6r 2               
0007E6r 2               ; ----------------------------------------------------------------------------
0007E6r 2               ; PRINT CHAR FROM (A)
0007E6r 2               ; ----------------------------------------------------------------------------
0007E6r 2               OUTDO:
0007E6r 2               .ifndef KBD
0007E6r 2  24 17                bit     Z14
0007E8r 2  30 14                bmi     L2A56
0007EAr 2               .endif
0007EAr 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007EAr 2               ; Commodore forgot to remove this in CBM1
0007EAr 2  48                   pha
0007EBr 2               .endif
0007EBr 2               .ifdef CBM1
0007EBr 2                       cmp     #$1D ; CRSR RIGHT
0007EBr 2                       beq     LCA6A
0007EBr 2                       cmp     #$9D ; CRSR LEFT
0007EBr 2                       beq     LCA5A
0007EBr 2                       cmp     #$14 ; DEL
0007EBr 2                       bne     LCA64
0007EBr 2               LCA5A:
0007EBr 2                       lda     POSX
0007EBr 2                       beq     L2A4E
0007EBr 2                       lda     CURDVC
0007EBr 2                       bne     L2A4E
0007EBr 2                       dec     POSX
0007EBr 2               LCA64:
0007EBr 2                       and     #$7F
0007EBr 2               .endif
0007EBr 2               .ifndef CBM2
0007EBr 2  C9 20                cmp     #$20
0007EDr 2  90 0B                bcc     L2A4E
0007EFr 2               .endif
0007EFr 2               LCA6A:
0007EFr 2               .ifdef CONFIG_CBM1_PATCHES
0007EFr 2                       lda     CURDVC
0007EFr 2                       jsr     PATCH6
0007EFr 2                       nop
0007EFr 2               .endif
0007EFr 2               .ifdef CONFIG_PRINT_CR
0007EFr 2  A5 19                lda     POSX
0007F1r 2  C5 1A                cmp     Z17
0007F3r 2  D0 03                bne     L2A4C
0007F5r 2                 .ifdef AIM65
0007F5r 2                       lda #$00
0007F5r 2                       sta POSX
0007F5r 2                 .elseif .def(APPLE)
0007F5r 2                       nop ; PATCH!
0007F5r 2                       nop ; don't print CR
0007F5r 2                       nop
0007F5r 2                 .else
0007F5r 2  20 rr rr             jsr     CRDO
0007F8r 2                 .endif
0007F8r 2               L2A4C:
0007F8r 2               .endif
0007F8r 2               .ifndef CONFIG_CBM_ALL
0007F8r 2  E6 19                inc     POSX
0007FAr 2               .endif
0007FAr 2               L2A4E:
0007FAr 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007FAr 2               ; Commodore forgot to remove this in CBM1
0007FAr 2  68                   pla
0007FBr 2               .endif
0007FBr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007FBr 2                       sty     DIMFLG
0007FBr 2               .endif
0007FBr 2               .ifdef CONFIG_IO_MSB
0007FBr 2                       ora     #$80
0007FBr 2               .endif
0007FBr 2  20 47 8A             jsr     MONCOUT
0007FEr 2               .ifdef CONFIG_IO_MSB
0007FEr 2                       and     #$7F
0007FEr 2               .endif
0007FEr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007FEr 2                       ldy     DIMFLG
0007FEr 2               .endif
0007FEr 2               .ifdef OSI
0007FEr 2                       nop
0007FEr 2                       nop
0007FEr 2                       nop
0007FEr 2                       nop
0007FEr 2               .endif
0007FEr 2               L2A56:
0007FEr 2  29 FF                and     #$FF
000800r 2               LE8F2:
000800r 2  60                   rts
000801r 2               
000801r 2               ; ----------------------------------------------------------------------------
000801r 2               ; ???
000801r 2               ; ----------------------------------------------------------------------------
000801r 2               .ifdef KBD
000801r 2               LE8F3:
000801r 2                       pha
000801r 2                       lda     $047F
000801r 2                       clc
000801r 2                       beq     LE900
000801r 2                       lda     #$00
000801r 2                       sta     $047F
000801r 2                       sec
000801r 2               LE900:
000801r 2                       pla
000801r 2                       rts
000801r 2               .endif
000801r 2               
000801r 1               .include "input.s"
000801r 2               .segment "CODE"
000801r 2               
000801r 2               ; ----------------------------------------------------------------------------
000801r 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
000801r 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
000801r 2               ; BETWEEN INPUT, READ, AND GET
000801r 2               ; ----------------------------------------------------------------------------
000801r 2               INPUTERR:
000801r 2  A5 15                lda     INPUTFLG
000803r 2  F0 0B                beq     RESPERR	; INPUT
000805r 2               .ifndef SYM1
000805r 2               .ifndef CONFIG_SMALL
000805r 2               .ifdef CONFIG_10A
000805r 2               ; without this, it treats GET errors
000805r 2               ; like READ errors
000805r 2                       bmi     L2A63	; READ
000805r 2                       ldy     #$FF	; GET
000805r 2                       bne     L2A67
000805r 2               L2A63:
000805r 2               .endif
000805r 2               .endif
000805r 2               .endif
000805r 2               .ifdef CONFIG_CBM1_PATCHES
000805r 2                       jsr     PATCH5
000805r 2               		nop
000805r 2               .else
000805r 2  A5 8F                lda     Z8C
000807r 2  A4 90                ldy     Z8C+1
000809r 2               .endif
000809r 2               L2A67:
000809r 2  85 89                sta     CURLIN
00080Br 2  84 8A                sty     CURLIN+1
00080Dr 2               SYNERR4:
00080Dr 2  4C rr rr             jmp     SYNERR
000810r 2               RESPERR:
000810r 2               .ifdef CONFIG_FILE
000810r 2                       lda     CURDVC
000810r 2                       beq     LCA8F
000810r 2                       ldx     #ERR_BADDATA
000810r 2                       jmp     ERROR
000810r 2               LCA8F:
000810r 2               .endif
000810r 2  A9 rr                lda     #<ERRREENTRY
000812r 2  A0 rr                ldy     #>ERRREENTRY
000814r 2  20 rr rr             jsr     STROUT
000817r 2  A5 8D                lda     OLDTEXT
000819r 2  A4 8E                ldy     OLDTEXT+1
00081Br 2  85 D3                sta     TXTPTR
00081Dr 2  84 D4                sty     TXTPTR+1
00081Fr 2               RTS20:
00081Fr 2  60                   rts
000820r 2               
000820r 2               ; ----------------------------------------------------------------------------
000820r 2               ; "GET" STATEMENT
000820r 2               ; ----------------------------------------------------------------------------
000820r 2               .ifndef CONFIG_SMALL
000820r 2               .ifndef SYM1
000820r 2               GET:
000820r 2                       jsr     ERRDIR
000820r 2               ; CBM: if GET#, then switch input
000820r 2               .ifdef CONFIG_FILE
000820r 2                       cmp     #'#'
000820r 2                       bne     LCAB6
000820r 2                       jsr     CHRGET
000820r 2                       jsr     GETBYT
000820r 2                       lda     #','
000820r 2                       jsr     SYNCHR
000820r 2                       jsr     CHKIN
000820r 2                       stx     CURDVC
000820r 2               LCAB6:
000820r 2               .endif
000820r 2                       ldx     #<(INPUTBUFFER+1)
000820r 2                       ldy     #>(INPUTBUFFER+1)
000820r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000820r 2                       lda     #$00
000820r 2                       sta     INPUTBUFFER+1
000820r 2               .else
000820r 2                       sty     INPUTBUFFER+1
000820r 2               .endif
000820r 2                       lda     #$40
000820r 2                       jsr     PROCESS_INPUT_LIST
000820r 2               ; CBM: if GET#, then switch input back
000820r 2               .ifdef CONFIG_FILE
000820r 2                       ldx     CURDVC
000820r 2                       bne     LCAD8
000820r 2               .endif
000820r 2                       rts
000820r 2               .endif
000820r 2               .endif
000820r 2               
000820r 2               ; ----------------------------------------------------------------------------
000820r 2               ; "INPUT#" STATEMENT
000820r 2               ; ----------------------------------------------------------------------------
000820r 2               .ifdef CONFIG_FILE
000820r 2               INPUTH:
000820r 2                       jsr     GETBYT
000820r 2                       lda     #$2C
000820r 2                       jsr     SYNCHR
000820r 2                       jsr     CHKIN
000820r 2                       stx     CURDVC
000820r 2                       jsr     L2A9E
000820r 2               LCAD6:
000820r 2                       lda     CURDVC
000820r 2               LCAD8:
000820r 2                       jsr     CLRCH
000820r 2                       ldx     #$00
000820r 2                       stx     CURDVC
000820r 2                       rts
000820r 2               LCAE0:
000820r 2               .endif
000820r 2               
000820r 2               .ifdef SYM1
000820r 2               LC9B0:
000820r 2  20 rr rr             jsr     OUTQUES	; '?'
000823r 2  20 rr rr             jsr     OUTSP
000826r 2  4C rr rr             jmp     L2A9E
000829r 2               .endif
000829r 2               ; ----------------------------------------------------------------------------
000829r 2               ; "INPUT" STATEMENT
000829r 2               ; ----------------------------------------------------------------------------
000829r 2               INPUT:
000829r 2               .ifndef KBD
000829r 2  46 17                lsr     Z14
00082Br 2               .endif
00082Br 2               .ifdef AIM65
00082Br 2                       lda     PRIFLG
00082Br 2                       sta     ZBE
00082Br 2                       jsr     LCFFA
00082Br 2               .endif
00082Br 2  C9 22                cmp     #$22
00082Dr 2               .ifdef SYM1
00082Dr 2  D0 F1                bne     LC9B0
00082Fr 2               .else
00082Fr 2                       bne     L2A9E
00082Fr 2               .endif
00082Fr 2  20 rr rr             jsr     STRTXT
000832r 2  A9 3B                lda     #$3B
000834r 2  20 rr rr             jsr     SYNCHR
000837r 2  20 rr rr             jsr     STRPRT
00083Ar 2               L2A9E:
00083Ar 2  20 rr rr             jsr     ERRDIR
00083Dr 2  A9 2C                lda     #$2C
00083Fr 2  85 1D                sta     INPUTBUFFER-1
000841r 2               LCAF8:
000841r 2               .ifdef APPLE
000841r 2                       jsr     INLINX
000841r 2               .elseif .def(SYM1)
000841r 2  20 rr rr             jsr     INLIN
000844r 2               .else
000844r 2                       jsr     NXIN
000844r 2               .endif
000844r 2               .ifdef KBD
000844r 2                       bmi     L2ABE
000844r 2               .else
000844r 2                 .ifdef CONFIG_FILE
000844r 2                       lda     CURDVC
000844r 2                       beq     LCB0C
000844r 2                       lda     Z96
000844r 2                       and     #$02
000844r 2                       beq     LCB0C
000844r 2                       jsr     LCAD6
000844r 2                       jmp     DATA
000844r 2               LCB0C:
000844r 2                 .endif
000844r 2  A5 1E                lda     INPUTBUFFER
000846r 2  D0 12                bne     L2ABE
000848r 2                 .ifdef CONFIG_FILE
000848r 2                       lda     CURDVC
000848r 2                       bne     LCAF8
000848r 2                 .endif
000848r 2                 .ifdef CONFIG_CBM1_PATCHES
000848r 2                       jmp     PATCH1
000848r 2                 .else
000848r 2  18                   clc
000849r 2  4C rr rr             jmp     CONTROL_C_TYPED
00084Cr 2                 .endif
00084Cr 2               .endif
00084Cr 2               
00084Cr 2               NXIN:
00084Cr 2               .ifdef KBD
00084Cr 2                       jsr     INLIN
00084Cr 2                       bmi     RTS20
00084Cr 2                       pla
00084Cr 2                       jmp     LE86C
00084Cr 2               .else
00084Cr 2                 .ifdef CONFIG_FILE
00084Cr 2                       lda     CURDVC
00084Cr 2                       bne     LCB21
00084Cr 2                 .endif
00084Cr 2  20 rr rr             jsr     OUTQUES	; '?'
00084Fr 2  20 rr rr             jsr     OUTSP
000852r 2               LCB21:
000852r 2  4C rr rr             jmp     INLIN
000855r 2               .endif
000855r 2               
000855r 2               ; ----------------------------------------------------------------------------
000855r 2               ; "GETC" STATEMENT
000855r 2               ; ----------------------------------------------------------------------------
000855r 2               .ifdef KBD
000855r 2               GETC:
000855r 2                       jsr     CONINT
000855r 2                       jsr     LF43D
000855r 2                       jmp     LE664
000855r 2               .endif
000855r 2               
000855r 2               ; ----------------------------------------------------------------------------
000855r 2               ; "READ" STATEMENT
000855r 2               ; ----------------------------------------------------------------------------
000855r 2               READ:
000855r 2  A6 91                ldx     DATPTR
000857r 2  A4 92                ldy     DATPTR+1
000859r 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
000859r 2               ; AppleSoft II, too
000859r 2                       lda     #$98	; READ
000859r 2                       .byte   $2C
000859r 2               L2ABE:
000859r 2                       lda     #$00	; INPUT
000859r 2               .else
000859r 2  A9                   .byte   $A9	; LDA #$98
00085Ar 2               L2ABE:
00085Ar 2  98                   tya
00085Br 2               .endif
00085Br 2               
00085Br 2               ; ----------------------------------------------------------------------------
00085Br 2               ; PROCESS INPUT LIST
00085Br 2               ;
00085Br 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
00085Br 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
00085Br 2               ; 				$40 FOR GET
00085Br 2               ;				$98 FOR READ
00085Br 2               ; ----------------------------------------------------------------------------
00085Br 2               PROCESS_INPUT_LIST:
00085Br 2  85 15                sta     INPUTFLG
00085Dr 2  86 93                stx     INPTR
00085Fr 2  84 94                sty     INPTR+1
000861r 2               PROCESS_INPUT_ITEM:
000861r 2  20 rr rr             jsr     PTRGET
000864r 2  85 99                sta     FORPNT
000866r 2  84 9A                sty     FORPNT+1
000868r 2  A5 D3                lda     TXTPTR
00086Ar 2  A4 D4                ldy     TXTPTR+1
00086Cr 2  85 9B                sta     TXPSV
00086Er 2  84 9C                sty     TXPSV+1
000870r 2  A6 93                ldx     INPTR
000872r 2  A4 94                ldy     INPTR+1
000874r 2  86 D3                stx     TXTPTR
000876r 2  84 D4                sty     TXTPTR+1
000878r 2  20 D2 00             jsr     CHRGOT
00087Br 2  D0 0E                bne     INSTART
00087Dr 2  24 15                bit     INPUTFLG
00087Fr 2               .ifndef CONFIG_SMALL ; GET
00087Fr 2                .ifndef SYM1
00087Fr 2                       bvc     L2AF0
00087Fr 2                 .ifdef MICROTAN
00087Fr 2                       jsr     MONRDKEY2
00087Fr 2                 .elseif .def(AIM65)
00087Fr 2                       jsr     MONRDKEY2
00087Fr 2                 .else
00087Fr 2                       jsr     MONRDKEY
00087Fr 2                 .endif
00087Fr 2                 .ifdef CONFIG_IO_MSB
00087Fr 2                       and     #$7F
00087Fr 2                 .endif
00087Fr 2                       sta     INPUTBUFFER
00087Fr 2               ; BUG: The beq/bne L2AF8 below is supposed
00087Fr 2               ; to be always taken. For this to happen,
00087Fr 2               ; the last load must be a 0 for beq
00087Fr 2               ; and != 0 for bne. The original Microsoft
00087Fr 2               ; code had ldx/ldy/bne here, which was only
00087Fr 2               ; correct for a non-ZP INPUTBUFFER. Commodore
00087Fr 2               ; fixed it in CBMBASIC V1 by swapping the
00087Fr 2               ; ldx and the ldy. It was broken on KIM,
00087Fr 2               ; but okay on APPLE and CBM2, because
00087Fr 2               ; these used a non-ZP INPUTBUFFER.
00087Fr 2               ; Microsoft fixed this somewhere after KIM
00087Fr 2               ; and before MICROTAN, by using beq instead
00087Fr 2               ; of bne in the ZP case.
00087Fr 2                 .ifdef CBM1
00087Fr 2                       ldy     #>(INPUTBUFFER-1)
00087Fr 2                       ldx     #<(INPUTBUFFER-1)
00087Fr 2                 .else
00087Fr 2                       ldx     #<(INPUTBUFFER-1)
00087Fr 2                       ldy     #>(INPUTBUFFER-1)
00087Fr 2                 .endif
00087Fr 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
00087Fr 2                       beq     L2AF8	; always
00087Fr 2                 .else
00087Fr 2                       bne     L2AF8	; always
00087Fr 2                 .endif
00087Fr 2               L2AF0:
00087Fr 2                .endif
00087Fr 2               .endif
00087Fr 2  30 64                bmi     FINDATA
000881r 2               .ifdef CONFIG_FILE
000881r 2                       lda     CURDVC
000881r 2                       bne     LCB64
000881r 2               .endif
000881r 2               .ifdef KBD
000881r 2                       jsr     OUTQUESSP
000881r 2               .else
000881r 2  20 rr rr             jsr     OUTQUES
000884r 2               .endif
000884r 2               LCB64:
000884r 2  20 rr rr             jsr     NXIN
000887r 2               L2AF8:
000887r 2  86 D3                stx     TXTPTR
000889r 2  84 D4                sty     TXTPTR+1
00088Br 2               
00088Br 2               ; ----------------------------------------------------------------------------
00088Br 2               INSTART:
00088Br 2  20 CC 00             jsr     CHRGET
00088Er 2  24 11                bit     VALTYP
000890r 2  10 24                bpl     L2B34
000892r 2               .ifndef CONFIG_SMALL ; GET
000892r 2                .ifndef SYM1
000892r 2                       bit     INPUTFLG
000892r 2                       bvc     L2B10
000892r 2                 .ifdef CONFIG_CBM1_PATCHES
000892r 2                       lda     #$00
000892r 2                       jsr     PATCH4
000892r 2                       nop
000892r 2                 .else
000892r 2                       inx
000892r 2                       stx     TXTPTR
000892r 2                       lda     #$00
000892r 2                       sta     CHARAC
000892r 2                       beq     L2B1C
000892r 2                 .endif
000892r 2               L2B10:
000892r 2                .endif
000892r 2               .endif
000892r 2  85 0D                sta     CHARAC
000894r 2  C9 22                cmp     #$22
000896r 2  F0 07                beq     L2B1D
000898r 2  A9 3A                lda     #$3A
00089Ar 2  85 0D                sta     CHARAC
00089Cr 2  A9 2C                lda     #$2C
00089Er 2               L2B1C:
00089Er 2  18                   clc
00089Fr 2               L2B1D:
00089Fr 2  85 0E                sta     ENDCHR
0008A1r 2  A5 D3                lda     TXTPTR
0008A3r 2  A4 D4                ldy     TXTPTR+1
0008A5r 2  69 00                adc     #$00
0008A7r 2  90 01                bcc     L2B28
0008A9r 2  C8                   iny
0008AAr 2               L2B28:
0008AAr 2  20 rr rr             jsr     STRLT2
0008ADr 2  20 rr rr             jsr     POINT
0008B0r 2               .ifdef CONFIG_SMALL
0008B0r 2                       jsr     LETSTRING
0008B0r 2               .else
0008B0r 2  20 rr rr             jsr     PUTSTR
0008B3r 2               .endif
0008B3r 2  4C rr rr             jmp     INPUT_MORE
0008B6r 2               ; ----------------------------------------------------------------------------
0008B6r 2               L2B34:
0008B6r 2  20 rr rr             jsr     FIN
0008B9r 2               .ifdef CONFIG_SMALL
0008B9r 2                       jsr     SETFOR
0008B9r 2               .else
0008B9r 2  A5 12                lda     VALTYP+1
0008BBr 2  20 rr rr             jsr     LET2
0008BEr 2               .endif
0008BEr 2               ; ----------------------------------------------------------------------------
0008BEr 2               INPUT_MORE:
0008BEr 2  20 D2 00             jsr     CHRGOT
0008C1r 2  F0 07                beq     L2B48
0008C3r 2  C9 2C                cmp     #$2C
0008C5r 2  F0 03                beq     L2B48
0008C7r 2  4C rr rr             jmp     INPUTERR
0008CAr 2               L2B48:
0008CAr 2  A5 D3                lda     TXTPTR
0008CCr 2  A4 D4                ldy     TXTPTR+1
0008CEr 2  85 93                sta     INPTR
0008D0r 2  84 94                sty     INPTR+1
0008D2r 2  A5 9B                lda     TXPSV
0008D4r 2  A4 9C                ldy     TXPSV+1
0008D6r 2  85 D3                sta     TXTPTR
0008D8r 2  84 D4                sty     TXTPTR+1
0008DAr 2  20 D2 00             jsr     CHRGOT
0008DDr 2  F0 2C                beq     INPDONE
0008DFr 2  20 rr rr             jsr     CHKCOM
0008E2r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
0008E5r 2               ; ----------------------------------------------------------------------------
0008E5r 2               FINDATA:
0008E5r 2  20 rr rr             jsr     DATAN
0008E8r 2  C8                   iny
0008E9r 2  AA                   tax
0008EAr 2  D0 12                bne     L2B7C
0008ECr 2  A2 06                ldx     #ERR_NODATA
0008EEr 2  C8                   iny
0008EFr 2  B1 D3                lda     (TXTPTR),y
0008F1r 2  F0 69                beq     GERR
0008F3r 2  C8                   iny
0008F4r 2  B1 D3                lda     (TXTPTR),y
0008F6r 2  85 8F                sta     Z8C
0008F8r 2  C8                   iny
0008F9r 2  B1 D3                lda     (TXTPTR),y
0008FBr 2  C8                   iny
0008FCr 2  85 90                sta     Z8C+1
0008FEr 2               L2B7C:
0008FEr 2  B1 D3                lda     (TXTPTR),y
000900r 2  AA                   tax
000901r 2  20 rr rr             jsr     ADDON
000904r 2  E0 83                cpx     #$83
000906r 2  D0 DD                bne     FINDATA
000908r 2  4C rr rr             jmp     INSTART
00090Br 2               ; ---NO MORE INPUT REQUESTED------
00090Br 2               INPDONE:
00090Br 2  A5 93                lda     INPTR
00090Dr 2  A4 94                ldy     INPTR+1
00090Fr 2  A6 15                ldx     INPUTFLG
000911r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000911r 2                       beq     L2B94 ; INPUT
000911r 2               .else
000911r 2  10 03                bpl     L2B94; INPUT or GET
000913r 2               .endif
000913r 2  4C rr rr             jmp     SETDA
000916r 2               L2B94:
000916r 2  A0 00                ldy     #$00
000918r 2               .ifdef AIM65
000918r 2                       jsr     LB8B1
000918r 2               .endif
000918r 2  B1 93                lda     (INPTR),y
00091Ar 2  F0 07                beq     L2BA1
00091Cr 2               .ifdef CONFIG_FILE
00091Cr 2                       lda     CURDVC
00091Cr 2                       bne     L2BA1
00091Cr 2               .endif
00091Cr 2  A9 rr                lda     #<ERREXTRA
00091Er 2  A0 rr                ldy     #>ERREXTRA
000920r 2  4C rr rr             jmp     STROUT
000923r 2               L2BA1:
000923r 2  60                   rts
000924r 2               
000924r 2               ; ----------------------------------------------------------------------------
000924r 2               ERREXTRA:
000924r 2               .ifdef KBD
000924r 2                       .byte   "?Extra"
000924r 2               .else
000924r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
000928r 2  52 41 20 49  
00092Cr 2  47 4E 4F 52  
000932r 2               .endif
000932r 2  0D 0A 00             .byte   $0D,$0A,$00
000935r 2               ERRREENTRY:
000935r 2               .ifdef KBD
000935r 2                       .byte   "What?"
000935r 2               .else
000935r 2  3F 52 45 44          .byte   "?REDO FROM START"
000939r 2  4F 20 46 52  
00093Dr 2  4F 4D 20 53  
000945r 2               .endif
000945r 2  0D 0A 00             .byte   $0D,$0A,$00
000948r 2               .ifdef KBD
000948r 2               LEA30:
000948r 2                       .byte   "B"
000948r 2                       .byte   $FD
000948r 2                       .byte   "GsBASIC"
000948r 2                       .byte   $00,$1B,$0D,$13
000948r 2                       .byte   " BASIC"
000948r 2               .endif
000948r 2               
000948r 1               .include "eval.s"
000948r 2               .segment "CODE"
000948r 2               
000948r 2               ; ----------------------------------------------------------------------------
000948r 2               ; "NEXT" STATEMENT
000948r 2               ; ----------------------------------------------------------------------------
000948r 2               NEXT:
000948r 2  D0 04                bne     NEXT1
00094Ar 2  A0 00                ldy     #$00
00094Cr 2  F0 03                beq     NEXT2
00094Er 2               NEXT1:
00094Er 2  20 rr rr             jsr     PTRGET
000951r 2               NEXT2:
000951r 2  85 99                sta     FORPNT
000953r 2  84 9A                sty     FORPNT+1
000955r 2  20 rr rr             jsr     GTFORPNT
000958r 2  F0 04                beq     NEXT3
00095Ar 2  A2 00                ldx     #$00
00095Cr 2               GERR:
00095Cr 2  F0 66                beq     JERROR
00095Er 2               NEXT3:
00095Er 2  9A                   txs
00095Fr 2               .ifndef CONFIG_2
00095Fr 2                       inx
00095Fr 2                       inx
00095Fr 2                       inx
00095Fr 2                       inx
00095Fr 2               .endif
00095Fr 2  8A                   txa
000960r 2               .ifdef CONFIG_2
000960r 2  18                   clc
000961r 2  69 04                adc     #$04
000963r 2  48                   pha
000964r 2  69 06                adc     #BYTES_FP+1
000966r 2  85 74                sta     DEST
000968r 2  68                   pla
000969r 2               .else
000969r 2                       inx
000969r 2                       inx
000969r 2                       inx
000969r 2                       inx
000969r 2                       inx
000969r 2               .ifndef CONFIG_SMALL
000969r 2                       inx
000969r 2               .endif
000969r 2                       stx     DEST
000969r 2               .endif
000969r 2  A0 01                ldy     #>STACK
00096Br 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00096Er 2  BA                   tsx
00096Fr 2  BD 09 01             lda     STACK+BYTES_FP+4,x
000972r 2  85 B6                sta     FACSIGN
000974r 2  A5 99                lda     FORPNT
000976r 2  A4 9A                ldy     FORPNT+1
000978r 2  20 rr rr             jsr     FADD
00097Br 2  20 rr rr             jsr     SETFOR
00097Er 2  A0 01                ldy     #>STACK
000980r 2  20 rr rr             jsr     FCOMP2
000983r 2  BA                   tsx
000984r 2  38                   sec
000985r 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
000988r 2  F0 17                beq     L2C22
00098Ar 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
00098Dr 2  85 89                sta     CURLIN
00098Fr 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
000992r 2  85 8A                sta     CURLIN+1
000994r 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
000997r 2  85 D3                sta     TXTPTR
000999r 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
00099Cr 2  85 D4                sta     TXTPTR+1
00099Er 2               L2C1F:
00099Er 2  4C rr rr             jmp     NEWSTT
0009A1r 2               L2C22:
0009A1r 2  8A                   txa
0009A2r 2  69 11                adc     #2*BYTES_FP+7
0009A4r 2  AA                   tax
0009A5r 2  9A                   txs
0009A6r 2  20 D2 00             jsr     CHRGOT
0009A9r 2  C9 2C                cmp     #$2C
0009ABr 2  D0 F1                bne     L2C1F
0009ADr 2  20 CC 00             jsr     CHRGET
0009B0r 2  20 rr rr             jsr     NEXT1
0009B3r 2               
0009B3r 2               ; ----------------------------------------------------------------------------
0009B3r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
0009B3r 2               ; ----------------------------------------------------------------------------
0009B3r 2               FRMNUM:
0009B3r 2  20 rr rr             jsr     FRMEVL
0009B6r 2               
0009B6r 2               ; ----------------------------------------------------------------------------
0009B6r 2               ; MAKE SURE (FAC) IS NUMERIC
0009B6r 2               ; ----------------------------------------------------------------------------
0009B6r 2               CHKNUM:
0009B6r 2  18                   clc
0009B7r 2  24                   .byte   $24
0009B8r 2               
0009B8r 2               ; ----------------------------------------------------------------------------
0009B8r 2               ; MAKE SURE (FAC) IS STRING
0009B8r 2               ; ----------------------------------------------------------------------------
0009B8r 2               CHKSTR:
0009B8r 2  38                   sec
0009B9r 2               
0009B9r 2               ; ----------------------------------------------------------------------------
0009B9r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
0009B9r 2               ; IF C=0, TYPE MUST BE NUMERIC
0009B9r 2               ; IF C=1, TYPE MUST BE STRING
0009B9r 2               ; ----------------------------------------------------------------------------
0009B9r 2               CHKVAL:
0009B9r 2  24 11                bit     VALTYP
0009BBr 2  30 03                bmi     L2C41
0009BDr 2  B0 03                bcs     L2C43
0009BFr 2               L2C40:
0009BFr 2  60                   rts
0009C0r 2               L2C41:
0009C0r 2  B0 FD                bcs     L2C40
0009C2r 2               L2C43:
0009C2r 2  A2 18                ldx     #ERR_BADTYPE
0009C4r 2               JERROR:
0009C4r 2  4C rr rr             jmp     ERROR
0009C7r 2               
0009C7r 2               ; ----------------------------------------------------------------------------
0009C7r 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
0009C7r 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
0009C7r 2               ; EXPRESSIONS.
0009C7r 2               ; ----------------------------------------------------------------------------
0009C7r 2               FRMEVL:
0009C7r 2  A6 D3                ldx     TXTPTR
0009C9r 2  D0 02                bne     L2C4E
0009CBr 2  C6 D4                dec     TXTPTR+1
0009CDr 2               L2C4E:
0009CDr 2  C6 D3                dec     TXTPTR
0009CFr 2  A2 00                ldx     #$00
0009D1r 2  24                   .byte   $24
0009D2r 2               FRMEVL1:
0009D2r 2  48                   pha
0009D3r 2  8A                   txa
0009D4r 2  48                   pha
0009D5r 2  A9 01                lda     #$01
0009D7r 2  20 rr rr             jsr     CHKMEM
0009DAr 2  20 rr rr             jsr     FRM_ELEMENT
0009DDr 2  A9 00                lda     #$00
0009DFr 2  85 9D                sta     CPRTYP
0009E1r 2               FRMEVL2:
0009E1r 2  20 D2 00             jsr     CHRGOT
0009E4r 2               L2C65:
0009E4r 2  38                   sec
0009E5r 2  E9 AB                sbc     #TOKEN_GREATER
0009E7r 2  90 17                bcc     L2C81
0009E9r 2  C9 03                cmp     #$03
0009EBr 2  B0 13                bcs     L2C81
0009EDr 2  C9 01                cmp     #$01
0009EFr 2  2A                   rol     a
0009F0r 2  49 01                eor     #$01
0009F2r 2  45 9D                eor     CPRTYP
0009F4r 2  C5 9D                cmp     CPRTYP
0009F6r 2  90 61                bcc     SNTXERR
0009F8r 2  85 9D                sta     CPRTYP
0009FAr 2  20 CC 00             jsr     CHRGET
0009FDr 2  4C rr rr             jmp     L2C65
000A00r 2               L2C81:
000A00r 2  A6 9D                ldx     CPRTYP
000A02r 2  D0 2C                bne     FRM_RELATIONAL
000A04r 2  B0 7B                bcs     L2D02
000A06r 2  69 07                adc     #$07
000A08r 2  90 77                bcc     L2D02
000A0Ar 2  65 11                adc     VALTYP
000A0Cr 2  D0 03                bne     L2C92
000A0Er 2  4C rr rr             jmp     CAT
000A11r 2               L2C92:
000A11r 2  69 FF                adc     #$FF
000A13r 2  85 72                sta     INDEX
000A15r 2  0A                   asl     a
000A16r 2  65 72                adc     INDEX
000A18r 2  A8                   tay
000A19r 2               FRM_PRECEDENCE_TEST:
000A19r 2  68                   pla
000A1Ar 2  D9 rr rr             cmp     MATHTBL,y
000A1Dr 2  B0 67                bcs     FRM_PERFORM1
000A1Fr 2  20 rr rr             jsr     CHKNUM
000A22r 2               L2CA3:
000A22r 2  48                   pha
000A23r 2               L2CA4:
000A23r 2  20 rr rr             jsr     FRM_RECURSE
000A26r 2  68                   pla
000A27r 2  A4 9B                ldy     LASTOP
000A29r 2  10 17                bpl     PREFNC
000A2Br 2  AA                   tax
000A2Cr 2  F0 56                beq     GOEX
000A2Er 2  D0 5F                bne     FRM_PERFORM2
000A30r 2               
000A30r 2               ; ----------------------------------------------------------------------------
000A30r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000A30r 2               ; ----------------------------------------------------------------------------
000A30r 2               FRM_RELATIONAL:
000A30r 2  46 11                lsr     VALTYP
000A32r 2  8A                   txa
000A33r 2  2A                   rol     a
000A34r 2  A6 D3                ldx     TXTPTR
000A36r 2  D0 02                bne     L2CBB
000A38r 2  C6 D4                dec     TXTPTR+1
000A3Ar 2               L2CBB:
000A3Ar 2  C6 D3                dec     TXTPTR
000A3Cr 2  A0 1B                ldy     #$1B
000A3Er 2  85 9D                sta     CPRTYP
000A40r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
000A42r 2               PREFNC:
000A42r 2  D9 rr rr             cmp     MATHTBL,y
000A45r 2  B0 48                bcs     FRM_PERFORM2
000A47r 2  90 D9                bcc     L2CA3
000A49r 2               
000A49r 2               ; ----------------------------------------------------------------------------
000A49r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000A49r 2               ; ANOTHER ONE
000A49r 2               ; ----------------------------------------------------------------------------
000A49r 2               FRM_RECURSE:
000A49r 2  B9 rr rr             lda     MATHTBL+2,y
000A4Cr 2  48                   pha
000A4Dr 2  B9 rr rr             lda     MATHTBL+1,y
000A50r 2  48                   pha
000A51r 2  20 rr rr             jsr     FRM_STACK1
000A54r 2  A5 9D                lda     CPRTYP
000A56r 2  4C rr rr             jmp     FRMEVL1
000A59r 2               SNTXERR:
000A59r 2  4C rr rr             jmp     SYNERR
000A5Cr 2               
000A5Cr 2               ; ----------------------------------------------------------------------------
000A5Cr 2               ; STACK (FAC)
000A5Cr 2               ; THREE ENTRY POINTS:
000A5Cr 2               ; 	1, FROM FRMEVL
000A5Cr 2               ;	2, FROM "STEP"
000A5Cr 2               ;	3, FROM "FOR"
000A5Cr 2               ; ----------------------------------------------------------------------------
000A5Cr 2               FRM_STACK1:
000A5Cr 2  A5 B6                lda     FACSIGN
000A5Er 2  BE rr rr             ldx     MATHTBL,y
000A61r 2               
000A61r 2               ; ----------------------------------------------------------------------------
000A61r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000A61r 2               ; ----------------------------------------------------------------------------
000A61r 2               FRM_STACK2:
000A61r 2  A8                   tay
000A62r 2  68                   pla
000A63r 2  85 72                sta     INDEX
000A65r 2               .ifndef CONFIG_2B
000A65r 2  E6 72                inc     INDEX ; bug: assumes not on page boundary
000A67r 2               ; bug exists on AppleSoft II
000A67r 2               .endif
000A67r 2  68                   pla
000A68r 2  85 73                sta     INDEX+1
000A6Ar 2               .ifdef CONFIG_2B
000A6Ar 2                       inc     INDEX
000A6Ar 2                       bne     LEB69
000A6Ar 2                       inc     INDEX+1
000A6Ar 2               LEB69:
000A6Ar 2               .endif
000A6Ar 2  98                   tya
000A6Br 2  48                   pha
000A6Cr 2               
000A6Cr 2               ; ----------------------------------------------------------------------------
000A6Cr 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000A6Cr 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000A6Cr 2               ; ----------------------------------------------------------------------------
000A6Cr 2               FRM_STACK3:
000A6Cr 2  20 rr rr             jsr     ROUND_FAC
000A6Fr 2               .ifndef CONFIG_SMALL
000A6Fr 2  A5 B5                lda     FAC+4
000A71r 2  48                   pha
000A72r 2               .endif
000A72r 2  A5 B4                lda     FAC+3
000A74r 2  48                   pha
000A75r 2  A5 B3                lda     FAC+2
000A77r 2  48                   pha
000A78r 2  A5 B2                lda     FAC+1
000A7Ar 2  48                   pha
000A7Br 2  A5 B1                lda     FAC
000A7Dr 2  48                   pha
000A7Er 2  6C 72 00             jmp     (INDEX)
000A81r 2               L2D02:
000A81r 2  A0 FF                ldy     #$FF
000A83r 2  68                   pla
000A84r 2               GOEX:
000A84r 2  F0 23                beq     EXIT
000A86r 2               
000A86r 2               ; ----------------------------------------------------------------------------
000A86r 2               ; PERFORM STACKED OPERATION
000A86r 2               ;
000A86r 2               ; (A) = PRECEDENCE BYTE
000A86r 2               ; STACK:  1 -- CPRMASK
000A86r 2               ;	5 -- (ARG)
000A86r 2               ;	2 -- ADDR OF PERFORMER
000A86r 2               ; ----------------------------------------------------------------------------
000A86r 2               FRM_PERFORM1:
000A86r 2  C9 64                cmp     #$64
000A88r 2  F0 03                beq     L2D0E
000A8Ar 2  20 rr rr             jsr     CHKNUM
000A8Dr 2               L2D0E:
000A8Dr 2  84 9B                sty     LASTOP
000A8Fr 2               FRM_PERFORM2:
000A8Fr 2  68                   pla
000A90r 2  4A                   lsr     a
000A91r 2  85 16                sta     CPRMASK
000A93r 2  68                   pla
000A94r 2  85 B9                sta     ARG
000A96r 2  68                   pla
000A97r 2  85 BA                sta     ARG+1
000A99r 2  68                   pla
000A9Ar 2  85 BB                sta     ARG+2
000A9Cr 2  68                   pla
000A9Dr 2  85 BC                sta     ARG+3
000A9Fr 2  68                   pla
000AA0r 2               .ifndef CONFIG_SMALL
000AA0r 2  85 BD                sta     ARG+4
000AA2r 2  68                   pla
000AA3r 2               .endif
000AA3r 2  85 BE                sta     ARGSIGN
000AA5r 2  45 B6                eor     FACSIGN
000AA7r 2  85 BF                sta     SGNCPR
000AA9r 2               EXIT:
000AA9r 2  A5 B1                lda     FAC
000AABr 2  60                   rts
000AACr 2               
000AACr 2               ; ----------------------------------------------------------------------------
000AACr 2               ; GET ELEMENT IN EXPRESSION
000AACr 2               ;
000AACr 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000AACr 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000AACr 2               ; ----------------------------------------------------------------------------
000AACr 2               FRM_ELEMENT:
000AACr 2  A9 00                lda     #$00
000AAEr 2  85 11                sta     VALTYP
000AB0r 2               L2D31:
000AB0r 2  20 CC 00             jsr     CHRGET
000AB3r 2  B0 03                bcs     L2D39
000AB5r 2               L2D36:
000AB5r 2  4C rr rr             jmp     FIN
000AB8r 2               L2D39:
000AB8r 2  20 rr rr             jsr     ISLETC
000ABBr 2  B0 75                bcs     FRM_VARIABLE
000ABDr 2               .ifdef CONFIG_CBM_ALL
000ABDr 2                       cmp     #$FF
000ABDr 2                       bne     LCDC1
000ABDr 2                       lda     #<CON_PI
000ABDr 2                       ldy     #>CON_PI
000ABDr 2                       jsr     LOAD_FAC_FROM_YA
000ABDr 2                       jmp     CHRGET
000ABDr 2               CON_PI:
000ABDr 2                       .byte   $82,$49,$0f,$DA,$A1
000ABDr 2               LCDC1:
000ABDr 2               .endif
000ABDr 2  C9 2E                cmp     #$2E
000ABFr 2  F0 F4                beq     L2D36
000AC1r 2  C9 A5                cmp     #TOKEN_MINUS
000AC3r 2  F0 66                beq     MIN
000AC5r 2  C9 A4                cmp     #TOKEN_PLUS
000AC7r 2  F0 E7                beq     L2D31
000AC9r 2  C9 22                cmp     #$22
000ACBr 2  D0 0F                bne     NOT_
000ACDr 2               
000ACDr 2               ; ----------------------------------------------------------------------------
000ACDr 2               ; STRING CONSTANT ELEMENT
000ACDr 2               ;
000ACDr 2               ; SET Y,A = (TXTPTR)+CARRY
000ACDr 2               ; ----------------------------------------------------------------------------
000ACDr 2               STRTXT:
000ACDr 2  A5 D3                lda     TXTPTR
000ACFr 2  A4 D4                ldy     TXTPTR+1
000AD1r 2  69 00                adc     #$00
000AD3r 2  90 01                bcc     L2D57
000AD5r 2  C8                   iny
000AD6r 2               L2D57:
000AD6r 2  20 rr rr             jsr     STRLIT
000AD9r 2  4C rr rr             jmp     POINT
000ADCr 2               
000ADCr 2               ; ----------------------------------------------------------------------------
000ADCr 2               ; "NOT" FUNCTION
000ADCr 2               ; IF FAC=0, RETURN FAC=1
000ADCr 2               ; IF FAC<>0, RETURN FAC=0
000ADCr 2               ; ----------------------------------------------------------------------------
000ADCr 2               NOT_:
000ADCr 2  C9 A2                cmp     #TOKEN_NOT
000ADEr 2  D0 13                bne     L2D74
000AE0r 2  A0 18                ldy     #$18
000AE2r 2  D0 49                bne     EQUL
000AE4r 2               
000AE4r 2               ; ----------------------------------------------------------------------------
000AE4r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000AE4r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000AE4r 2               ; ----------------------------------------------------------------------------
000AE4r 2               EQUOP:
000AE4r 2  20 rr rr             jsr     AYINT
000AE7r 2  A5 B5                lda     FAC_LAST
000AE9r 2  49 FF                eor     #$FF
000AEBr 2  A8                   tay
000AECr 2  A5 B4                lda     FAC_LAST-1
000AEEr 2  49 FF                eor     #$FF
000AF0r 2  4C rr rr             jmp     GIVAYF
000AF3r 2               L2D74:
000AF3r 2               .ifdef SYM1
000AF3r 2  C9 B1                cmp     #TOKEN_USR
000AF5r 2  D0 03                bne     LCC8A
000AF7r 2  4C rr rr             jmp     LCDBD
000AFAr 2               LCC8A:
000AFAr 2  C9 26                cmp     #$26
000AFCr 2  D0 03                bne     LCC91
000AFEr 2  4C rr rr             jmp     LCDFE
000B01r 2               LCC91:
000B01r 2               .endif
000B01r 2  C9 9F                cmp     #TOKEN_FN
000B03r 2  D0 03                bne     L2D7B
000B05r 2  4C rr rr             jmp     L31F3
000B08r 2               L2D7B:
000B08r 2  C9 AE                cmp     #TOKEN_SGN
000B0Ar 2  90 03                bcc     PARCHK
000B0Cr 2  4C rr rr             jmp     UNARY
000B0Fr 2               
000B0Fr 2               ; ----------------------------------------------------------------------------
000B0Fr 2               ; EVALUATE "(EXPRESSION)"
000B0Fr 2               ; ----------------------------------------------------------------------------
000B0Fr 2               PARCHK:
000B0Fr 2  20 rr rr             jsr     CHKOPN
000B12r 2  20 rr rr             jsr     FRMEVL
000B15r 2               CHKCLS:
000B15r 2  A9 29                lda     #$29
000B17r 2  2C                   .byte   $2C
000B18r 2               CHKOPN:
000B18r 2  A9 28                lda     #$28
000B1Ar 2  2C                   .byte   $2C
000B1Br 2               CHKCOM:
000B1Br 2  A9 2C                lda     #$2C
000B1Dr 2               
000B1Dr 2               ; ----------------------------------------------------------------------------
000B1Dr 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000B1Dr 2               ; ----------------------------------------------------------------------------
000B1Dr 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000B1Dr 2  A0 00                ldy     #$00
000B1Fr 2  D1 D3                cmp     (TXTPTR),y
000B21r 2  D0 03                bne     SYNERR
000B23r 2  4C CC 00             jmp     CHRGET
000B26r 2               ; ----------------------------------------------------------------------------
000B26r 2               SYNERR:
000B26r 2  A2 02                ldx     #ERR_SYNTAX
000B28r 2  4C rr rr             jmp     ERROR
000B2Br 2               ; ----------------------------------------------------------------------------
000B2Br 2               MIN:
000B2Br 2  A0 15                ldy     #$15
000B2Dr 2               EQUL:
000B2Dr 2  68                   pla
000B2Er 2  68                   pla
000B2Fr 2  4C rr rr             jmp     L2CA4
000B32r 2               ; ----------------------------------------------------------------------------
000B32r 2               FRM_VARIABLE:
000B32r 2  20 rr rr             jsr     PTRGET
000B35r 2               FRM_VARIABLE_CALL	= *-1
000B35r 2  85 B4                sta     FAC_LAST-1
000B37r 2  84 B5                sty     FAC_LAST
000B39r 2               .ifdef CONFIG_CBM_ALL
000B39r 2                       lda     VARNAM
000B39r 2                       ldy     VARNAM+1
000B39r 2               .endif
000B39r 2  A6 11                ldx     VALTYP
000B3Br 2  F0 05                beq     L2DB1
000B3Dr 2               .ifdef CONFIG_CBM_ALL
000B3Dr 2                 .ifdef CONFIG_CBM1_PATCHES
000B3Dr 2                       jmp     PATCH2
000B3Dr 2                       clc
000B3Dr 2               LCE3B:
000B3Dr 2                 .else
000B3Dr 2                       ldx     #$00
000B3Dr 2                       stx     STRNG1+1
000B3Dr 2                       bit     FAC+4
000B3Dr 2                       bpl     LCE53
000B3Dr 2                       cmp     #$54	; T
000B3Dr 2                       bne     LCE53
000B3Dr 2                 .endif
000B3Dr 2                       cpy     #$C9	; I$
000B3Dr 2                       bne     LCE53
000B3Dr 2                       jsr     LCE76
000B3Dr 2                       sty     EXPON
000B3Dr 2                       dey
000B3Dr 2                       sty     STRNG2
000B3Dr 2                       ldy     #$06
000B3Dr 2                       sty     INDX
000B3Dr 2                       ldy     #$24
000B3Dr 2                       jsr     LDD3A
000B3Dr 2                       jmp     LD353
000B3Dr 2               LCE53:
000B3Dr 2               .endif
000B3Dr 2               .ifdef CONFIG_2
000B3Dr 2                 .ifndef CBM2
000B3Dr 2               ; bugfix?
000B3Dr 2               ; fixed on AppleSoft II, not on any CBM
000B3Dr 2  A2 00                ldx     #$00
000B3Fr 2  86 C0                stx     STRNG1+1
000B41r 2                 .endif
000B41r 2               .endif
000B41r 2  60                   rts
000B42r 2               L2DB1:
000B42r 2               .ifndef CONFIG_SMALL
000B42r 2  A6 12                ldx     VALTYP+1
000B44r 2  10 0D                bpl     L2DC2
000B46r 2  A0 00                ldy     #$00
000B48r 2  B1 B4                lda     (FAC+3),y
000B4Ar 2  AA                   tax
000B4Br 2  C8                   iny
000B4Cr 2  B1 B4                lda     (FAC+3),y
000B4Er 2  A8                   tay
000B4Fr 2  8A                   txa
000B50r 2  4C rr rr             jmp     GIVAYF
000B53r 2               L2DC2:
000B53r 2               .endif
000B53r 2               .ifdef CONFIG_CBM1_PATCHES
000B53r 2                       jmp     PATCH3
000B53r 2                       .byte   $19
000B53r 2               .endif
000B53r 2               .ifdef CBM2
000B53r 2                       bit     FAC+4
000B53r 2                       bpl     LCE90
000B53r 2                       cmp     #$54
000B53r 2                       bne     LCE82
000B53r 2               .endif
000B53r 2               .ifndef CONFIG_CBM_ALL
000B53r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000B56r 2               .endif
000B56r 2               .ifdef CONFIG_CBM_ALL
000B56r 2               LCE69:
000B56r 2                       cpy     #$49
000B56r 2               .ifdef CBM1
000B56r 2                       bne     LCE82
000B56r 2               .else
000B56r 2                       bne     LCE90
000B56r 2               .endif
000B56r 2                       jsr     LCE76
000B56r 2                       tya
000B56r 2                       ldx     #$A0
000B56r 2                       jmp     LDB21
000B56r 2               LCE76:
000B56r 2               .ifdef CBM1
000B56r 2                       lda     #$FE
000B56r 2                       ldy     #$01
000B56r 2               .else
000B56r 2                       lda     #$8B
000B56r 2                       ldy     #$00
000B56r 2               .endif
000B56r 2                       sei
000B56r 2                       jsr     LOAD_FAC_FROM_YA
000B56r 2                       cli
000B56r 2                       sty     FAC+1
000B56r 2                       rts
000B56r 2               LCE82:
000B56r 2                       cmp     #$53
000B56r 2                       bne     LCE90
000B56r 2                       cpy     #$54
000B56r 2                       bne     LCE90
000B56r 2                       lda     Z96
000B56r 2                       jmp     FLOAT
000B56r 2               LCE90:
000B56r 2                       lda     FAC+3
000B56r 2                       ldy     FAC+4
000B56r 2                       jmp     LOAD_FAC_FROM_YA
000B56r 2               .endif
000B56r 2               
000B56r 2               ; ----------------------------------------------------------------------------
000B56r 2               UNARY:
000B56r 2  0A                   asl     a
000B57r 2  48                   pha
000B58r 2  AA                   tax
000B59r 2  20 CC 00             jsr     CHRGET
000B5Cr 2  E0 83                cpx     #<(TOKEN_LEFTSTR*2-1)
000B5Er 2  90 20                bcc     L2DEF
000B60r 2  20 rr rr             jsr     CHKOPN
000B63r 2  20 rr rr             jsr     FRMEVL
000B66r 2  20 rr rr             jsr     CHKCOM
000B69r 2  20 rr rr             jsr     CHKSTR
000B6Cr 2  68                   pla
000B6Dr 2  AA                   tax
000B6Er 2  A5 B5                lda     FAC_LAST
000B70r 2  48                   pha
000B71r 2  A5 B4                lda     FAC_LAST-1
000B73r 2  48                   pha
000B74r 2  8A                   txa
000B75r 2  48                   pha
000B76r 2  20 rr rr             jsr     GETBYT
000B79r 2  68                   pla
000B7Ar 2  A8                   tay
000B7Br 2  8A                   txa
000B7Cr 2  48                   pha
000B7Dr 2  4C rr rr             jmp     L2DF4
000B80r 2               L2DEF:
000B80r 2  20 rr rr             jsr     PARCHK
000B83r 2  68                   pla
000B84r 2  A8                   tay
000B85r 2               L2DF4:
000B85r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000B88r 2  85 A5                sta     JMPADRS+1
000B8Ar 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000B8Dr 2  85 A6                sta     JMPADRS+2
000B8Fr 2               .ifdef KBD
000B8Fr 2                       jsr     LF47D
000B8Fr 2               .else
000B8Fr 2  20 A4 00             jsr     JMPADRS
000B92r 2               .endif
000B92r 2  4C rr rr             jmp     CHKNUM
000B95r 2               
000B95r 2               ; ----------------------------------------------------------------------------
000B95r 2               OR:
000B95r 2  A0 FF                ldy     #$FF
000B97r 2  2C                   .byte   $2C
000B98r 2               ; ----------------------------------------------------------------------------
000B98r 2               TAND:
000B98r 2  A0 00                ldy     #$00
000B9Ar 2  84 0F                sty     EOLPNTR
000B9Cr 2  20 rr rr             jsr     AYINT
000B9Fr 2  A5 B4                lda     FAC_LAST-1
000BA1r 2  45 0F                eor     EOLPNTR
000BA3r 2  85 0D                sta     CHARAC
000BA5r 2  A5 B5                lda     FAC_LAST
000BA7r 2  45 0F                eor     EOLPNTR
000BA9r 2  85 0E                sta     ENDCHR
000BABr 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000BAEr 2  20 rr rr             jsr     AYINT
000BB1r 2  A5 B5                lda     FAC_LAST
000BB3r 2  45 0F                eor     EOLPNTR
000BB5r 2  25 0E                and     ENDCHR
000BB7r 2  45 0F                eor     EOLPNTR
000BB9r 2  A8                   tay
000BBAr 2  A5 B4                lda     FAC_LAST-1
000BBCr 2  45 0F                eor     EOLPNTR
000BBEr 2  25 0D                and     CHARAC
000BC0r 2  45 0F                eor     EOLPNTR
000BC2r 2  4C rr rr             jmp     GIVAYF
000BC5r 2               
000BC5r 2               ; ----------------------------------------------------------------------------
000BC5r 2               ; PERFORM RELATIONAL OPERATIONS
000BC5r 2               ; ----------------------------------------------------------------------------
000BC5r 2               RELOPS:
000BC5r 2  20 rr rr             jsr     CHKVAL
000BC8r 2  B0 13                bcs     STRCMP
000BCAr 2  A5 BE                lda     ARGSIGN
000BCCr 2  09 7F                ora     #$7F
000BCEr 2  25 BA                and     ARG+1
000BD0r 2  85 BA                sta     ARG+1
000BD2r 2  A9 B9                lda     #<ARG
000BD4r 2  A0 00                ldy     #$00
000BD6r 2  20 rr rr             jsr     FCOMP
000BD9r 2  AA                   tax
000BDAr 2  4C rr rr             jmp     NUMCMP
000BDDr 2               
000BDDr 2               ; ----------------------------------------------------------------------------
000BDDr 2               ; STRING COMPARISON
000BDDr 2               ; ----------------------------------------------------------------------------
000BDDr 2               STRCMP:
000BDDr 2  A9 00                lda     #$00
000BDFr 2  85 11                sta     VALTYP
000BE1r 2  C6 9D                dec     CPRTYP
000BE3r 2  20 rr rr             jsr     FREFAC
000BE6r 2  85 B1                sta     FAC
000BE8r 2  86 B2                stx     FAC+1
000BEAr 2  84 B3                sty     FAC+2
000BECr 2  A5 BC                lda     ARG_LAST-1
000BEEr 2  A4 BD                ldy     ARG_LAST
000BF0r 2  20 rr rr             jsr     FRETMP
000BF3r 2  86 BC                stx     ARG_LAST-1
000BF5r 2  84 BD                sty     ARG_LAST
000BF7r 2  AA                   tax
000BF8r 2  38                   sec
000BF9r 2  E5 B1                sbc     FAC
000BFBr 2  F0 08                beq     L2E74
000BFDr 2  A9 01                lda     #$01
000BFFr 2  90 04                bcc     L2E74
000C01r 2  A6 B1                ldx     FAC
000C03r 2  A9 FF                lda     #$FF
000C05r 2               L2E74:
000C05r 2  85 B6                sta     FACSIGN
000C07r 2  A0 FF                ldy     #$FF
000C09r 2  E8                   inx
000C0Ar 2               STRCMP1:
000C0Ar 2  C8                   iny
000C0Br 2  CA                   dex
000C0Cr 2  D0 07                bne     L2E84
000C0Er 2  A6 B6                ldx     FACSIGN
000C10r 2               NUMCMP:
000C10r 2  30 0F                bmi     CMPDONE
000C12r 2  18                   clc
000C13r 2  90 0C                bcc     CMPDONE
000C15r 2               L2E84:
000C15r 2  B1 BC                lda     (ARG_LAST-1),y
000C17r 2  D1 B2                cmp     (FAC+1),y
000C19r 2  F0 EF                beq     STRCMP1
000C1Br 2  A2 FF                ldx     #$FF
000C1Dr 2  B0 02                bcs     CMPDONE
000C1Fr 2  A2 01                ldx     #$01
000C21r 2               CMPDONE:
000C21r 2  E8                   inx
000C22r 2  8A                   txa
000C23r 2  2A                   rol     a
000C24r 2  25 16                and     CPRMASK
000C26r 2  F0 02                beq     L2E99
000C28r 2  A9 FF                lda     #$FF
000C2Ar 2               L2E99:
000C2Ar 2  4C rr rr             jmp     FLOAT
000C2Dr 2               
000C2Dr 2               .ifdef SYM1
000C2Dr 2               LCDBD:
000C2Dr 2  20 CC 00             jsr     CHRGET
000C30r 2  20 rr rr             jsr     CHKOPN
000C33r 2  20 rr rr             jsr     FRMEVL
000C36r 2  20 D2 00             jsr     CHRGOT
000C39r 2  C9 29                cmp     #$29
000C3Br 2  F0 24                beq     LCDF1
000C3Dr 2  20 rr rr             jsr     AYINT
000C40r 2  A5 B5                lda     FAC+4
000C42r 2  A4 B4                ldy     FAC+3
000C44r 2  85 0B                sta     USR+1
000C46r 2  84 0C                sty     USR+2
000C48r 2               LCDD8:
000C48r 2  20 rr rr             jsr     CHKCOM
000C4Br 2  20 rr rr             jsr     FRMEVL
000C4Er 2  20 D2 00             jsr     CHRGOT
000C51r 2  C9 29                cmp     #$29
000C53r 2  F0 0C                beq     LCDF1
000C55r 2  20 rr rr             jsr     AYINT
000C58r 2  A5 B4                lda     FAC+3
000C5Ar 2  48                   pha
000C5Br 2  A5 B5                lda     FAC+4
000C5Dr 2  48                   pha
000C5Er 2  4C rr rr             jmp     LCDD8
000C61r 2               
000C61r 2               LCDF1:
000C61r 2  20 CC 00             jsr     CHRGET
000C64r 2  20 rr rr             jsr     AYINT
000C67r 2  A5 B4                lda     FAC+3
000C69r 2  A4 B5                ldy     FAC+4
000C6Br 2  4C 0A 00             jmp     USR
000C6Er 2               
000C6Er 2               LCDFE:
000C6Er 2  A5 D4                lda     ZD4
000C70r 2  48                   pha
000C71r 2  A5 D3                lda     ZD3
000C73r 2  48                   pha
000C74r 2  20 CC 00             jsr     CHRGET
000C77r 2  C9 22                cmp     #$22
000C79r 2  D0 3E                bne     LCE49
000C7Br 2  20 CC 00             jsr     CHRGET
000C7Er 2  20 rr rr             jsr     LCE2B
000C81r 2  AA                   tax
000C82r 2  20 D2 00             jsr     CHRGOT
000C85r 2  20 rr rr             jsr     LCE2B
000C88r 2  48                   pha
000C89r 2  20 D2 00             jsr     CHRGOT
000C8Cr 2  C9 22                cmp     #$22
000C8Er 2  D0 28                bne     LCE48
000C90r 2  20 CC 00             jsr     CHRGET
000C93r 2  68                   pla
000C94r 2  A8                   tay
000C95r 2  68                   pla
000C96r 2  68                   pla
000C97r 2  8A                   txa
000C98r 2  4C rr rr             jmp     GIVAYF
000C9Br 2               
000C9Br 2               LCE2B:
000C9Br 2  20 75 82             jsr     ASCNIB
000C9Er 2  B0 17                bcs     LCE47
000CA0r 2  48                   pha
000CA1r 2  20 CC 00             jsr     CHRGET
000CA4r 2  20 75 82             jsr     ASCNIB
000CA7r 2  85 B5                sta     FAC+4
000CA9r 2  B0 0B                bcs     LCE46
000CABr 2  20 CC 00             jsr     CHRGET
000CAEr 2  68                   pla
000CAFr 2  0A                   asl     a
000CB0r 2  0A                   asl     a
000CB1r 2  0A                   asl     a
000CB2r 2  0A                   asl     a
000CB3r 2  05 B5                ora     FAC+4
000CB5r 2  60                   rts
000CB6r 2               
000CB6r 2               LCE46:
000CB6r 2  68                   pla
000CB7r 2               LCE47:
000CB7r 2  68                   pla
000CB8r 2               LCE48:
000CB8r 2  68                   pla
000CB9r 2               LCE49:
000CB9r 2  68                   pla
000CBAr 2  85 D3                sta     ZD3
000CBCr 2  68                   pla
000CBDr 2  85 D4                sta     ZD4
000CBFr 2  4C rr rr             jmp     ZERO_FAC
000CC2r 2               .endif
000CC2r 2               
000CC2r 1               .include "var.s"
000CC2r 2               .segment "CODE"
000CC2r 2               
000CC2r 2               ; ----------------------------------------------------------------------------
000CC2r 2               ; "DIM" STATEMENT
000CC2r 2               ; ----------------------------------------------------------------------------
000CC2r 2               NXDIM:
000CC2r 2  20 rr rr             jsr     CHKCOM
000CC5r 2               DIM:
000CC5r 2  AA                   tax
000CC6r 2  20 rr rr             jsr     PTRGET2
000CC9r 2  20 D2 00             jsr     CHRGOT
000CCCr 2  D0 F4                bne     NXDIM
000CCEr 2  60                   rts
000CCFr 2               
000CCFr 2               ; ----------------------------------------------------------------------------
000CCFr 2               ; PTRGET -- GENERAL VARIABLE SCAN
000CCFr 2               ;
000CCFr 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000CCFr 2               ; VARTAB AND ARYTAB FOR THE NAME.
000CCFr 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000CCFr 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000CCFr 2               ;
000CCFr 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000CCFr 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000CCFr 2               ;		ELSE = 0
000CCFr 2               ;
000CCFr 2               ;	SUBFLG -- = $00
000CCFr 2               ;		= $40 IF CALLED FROM "GETARYPT"
000CCFr 2               ; ----------------------------------------------------------------------------
000CCFr 2               PTRGET:
000CCFr 2  A2 00                ldx     #$00
000CD1r 2  20 D2 00             jsr     CHRGOT
000CD4r 2               PTRGET2:
000CD4r 2  86 10                stx     DIMFLG
000CD6r 2               PTRGET3:
000CD6r 2  85 95                sta     VARNAM
000CD8r 2  20 D2 00             jsr     CHRGOT
000CDBr 2  20 rr rr             jsr     ISLETC
000CDEr 2  B0 03                bcs     NAMOK
000CE0r 2               SYNERR3:
000CE0r 2  4C rr rr             jmp     SYNERR
000CE3r 2               NAMOK:
000CE3r 2  A2 00                ldx     #$00
000CE5r 2  86 11                stx     VALTYP
000CE7r 2               .ifndef CONFIG_SMALL
000CE7r 2  86 12                stx     VALTYP+1
000CE9r 2               .endif
000CE9r 2  20 CC 00             jsr     CHRGET
000CECr 2  90 05                bcc     L2ECD
000CEEr 2  20 rr rr             jsr     ISLETC
000CF1r 2  90 0B                bcc     L2ED8
000CF3r 2               L2ECD:
000CF3r 2  AA                   tax
000CF4r 2               L2ECE:
000CF4r 2  20 CC 00             jsr     CHRGET
000CF7r 2  90 FB                bcc     L2ECE
000CF9r 2  20 rr rr             jsr     ISLETC
000CFCr 2  B0 F6                bcs     L2ECE
000CFEr 2               L2ED8:
000CFEr 2  C9 24                cmp     #$24
000D00r 2               .ifdef CONFIG_SMALL
000D00r 2                       bne     L2EF9
000D00r 2               .else
000D00r 2  D0 06                bne     L2EE2
000D02r 2               .endif
000D02r 2  A9 FF                lda     #$FF
000D04r 2  85 11                sta     VALTYP
000D06r 2               .ifndef CONFIG_SMALL
000D06r 2  D0 10                bne     L2EF2
000D08r 2               L2EE2:
000D08r 2  C9 25                cmp     #$25
000D0Ar 2  D0 13                bne     L2EF9
000D0Cr 2  A5 14                lda     SUBFLG
000D0Er 2  D0 D0                bne     SYNERR3
000D10r 2  A9 80                lda     #$80
000D12r 2  85 12                sta     VALTYP+1
000D14r 2  05 95                ora     VARNAM
000D16r 2  85 95                sta     VARNAM
000D18r 2               L2EF2:
000D18r 2               .endif
000D18r 2  8A                   txa
000D19r 2  09 80                ora     #$80
000D1Br 2  AA                   tax
000D1Cr 2  20 CC 00             jsr     CHRGET
000D1Fr 2               L2EF9:
000D1Fr 2  86 96                stx     VARNAM+1
000D21r 2  38                   sec
000D22r 2  05 14                ora     SUBFLG
000D24r 2  E9 28                sbc     #$28
000D26r 2  D0 03                bne     L2F05
000D28r 2  4C rr rr             jmp     ARRAY
000D2Br 2               L2F05:
000D2Br 2  A9 00                lda     #$00
000D2Dr 2  85 14                sta     SUBFLG
000D2Fr 2  A5 7D                lda     VARTAB
000D31r 2  A6 7E                ldx     VARTAB+1
000D33r 2  A0 00                ldy     #$00
000D35r 2               L2F0F:
000D35r 2  86 B0                stx     LOWTR+1
000D37r 2               L2F11:
000D37r 2  85 AF                sta     LOWTR
000D39r 2  E4 80                cpx     ARYTAB+1
000D3Br 2  D0 04                bne     L2F1B
000D3Dr 2  C5 7F                cmp     ARYTAB
000D3Fr 2  F0 22                beq     NAMENOTFOUND
000D41r 2               L2F1B:
000D41r 2  A5 95                lda     VARNAM
000D43r 2  D1 AF                cmp     (LOWTR),y
000D45r 2  D0 08                bne     L2F29
000D47r 2  A5 96                lda     VARNAM+1
000D49r 2  C8                   iny
000D4Ar 2  D1 AF                cmp     (LOWTR),y
000D4Cr 2  F0 6A                beq     SET_VARPNT_AND_YA
000D4Er 2  88                   dey
000D4Fr 2               L2F29:
000D4Fr 2  18                   clc
000D50r 2  A5 AF                lda     LOWTR
000D52r 2  69 07                adc     #BYTES_PER_VARIABLE
000D54r 2  90 E1                bcc     L2F11
000D56r 2  E8                   inx
000D57r 2  D0 DC                bne     L2F0F
000D59r 2               
000D59r 2               ; ----------------------------------------------------------------------------
000D59r 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000D59r 2               ;
000D59r 2               ; RETURN CARRY = 1 IF A-Z
000D59r 2               ;	= 0 IF NOT
000D59r 2               ; ----------------------------------------------------------------------------
000D59r 2               ISLETC:
000D59r 2  C9 41                cmp     #$41
000D5Br 2  90 05                bcc     L2F3C
000D5Dr 2  E9 5B                sbc     #$5B
000D5Fr 2  38                   sec
000D60r 2  E9 A5                sbc     #$A5
000D62r 2               L2F3C:
000D62r 2  60                   rts
000D63r 2               
000D63r 2               ; ----------------------------------------------------------------------------
000D63r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000D63r 2               ; ----------------------------------------------------------------------------
000D63r 2               NAMENOTFOUND:
000D63r 2  68                   pla
000D64r 2  48                   pha
000D65r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000D67r 2  D0 0D                bne     MAKENEWVARIABLE
000D69r 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000D69r 2  BA                   tsx
000D6Ar 2  BD 02 01             lda     STACK+2,x
000D6Dr 2  C9 rr                cmp     #>FRM_VARIABLE_CALL
000D6Fr 2  D0 05                bne     MAKENEWVARIABLE
000D71r 2               .endif
000D71r 2               LD015:
000D71r 2  A9 rr                lda     #<C_ZERO
000D73r 2  A0 rr                ldy     #>C_ZERO
000D75r 2  60                   rts
000D76r 2               
000D76r 2               ; ----------------------------------------------------------------------------
000D76r 2               .ifndef CONFIG_2
000D76r 2               C_ZERO:
000D76r 2                       .byte   $00,$00
000D76r 2               .endif
000D76r 2               
000D76r 2               ; ----------------------------------------------------------------------------
000D76r 2               ; MAKE A NEW SIMPLE VARIABLE
000D76r 2               ;
000D76r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000D76r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000D76r 2               ; ----------------------------------------------------------------------------
000D76r 2               MAKENEWVARIABLE:
000D76r 2               .ifdef CONFIG_CBM_ALL
000D76r 2                       lda     VARNAM
000D76r 2                       ldy     VARNAM+1
000D76r 2                       cmp     #$54
000D76r 2                       bne     LD02F
000D76r 2                       cpy     #$C9
000D76r 2                       beq     LD015
000D76r 2                       cpy     #$49
000D76r 2                       bne     LD02F
000D76r 2               LD02C:
000D76r 2                       jmp     SYNERR
000D76r 2               LD02F:
000D76r 2                       cmp     #$53
000D76r 2                       bne     LD037
000D76r 2                       cpy     #$54
000D76r 2                       beq     LD02C
000D76r 2               LD037:
000D76r 2               .endif
000D76r 2  A5 7F                lda     ARYTAB
000D78r 2  A4 80                ldy     ARYTAB+1
000D7Ar 2  85 AF                sta     LOWTR
000D7Cr 2  84 B0                sty     LOWTR+1
000D7Er 2  A5 81                lda     STREND
000D80r 2  A4 82                ldy     STREND+1
000D82r 2  85 AA                sta     HIGHTR
000D84r 2  84 AB                sty     HIGHTR+1
000D86r 2  18                   clc
000D87r 2  69 07                adc     #BYTES_PER_VARIABLE
000D89r 2  90 01                bcc     L2F68
000D8Br 2  C8                   iny
000D8Cr 2               L2F68:
000D8Cr 2  85 A8                sta     HIGHDS
000D8Er 2  84 A9                sty     HIGHDS+1
000D90r 2  20 rr rr             jsr     BLTU
000D93r 2  A5 A8                lda     HIGHDS
000D95r 2  A4 A9                ldy     HIGHDS+1
000D97r 2  C8                   iny
000D98r 2  85 7F                sta     ARYTAB
000D9Ar 2  84 80                sty     ARYTAB+1
000D9Cr 2  A0 00                ldy     #$00
000D9Er 2  A5 95                lda     VARNAM
000DA0r 2  91 AF                sta     (LOWTR),y
000DA2r 2  C8                   iny
000DA3r 2  A5 96                lda     VARNAM+1
000DA5r 2  91 AF                sta     (LOWTR),y
000DA7r 2  A9 00                lda     #$00
000DA9r 2  C8                   iny
000DAAr 2  91 AF                sta     (LOWTR),y
000DACr 2  C8                   iny
000DADr 2  91 AF                sta     (LOWTR),y
000DAFr 2  C8                   iny
000DB0r 2  91 AF                sta     (LOWTR),y
000DB2r 2  C8                   iny
000DB3r 2  91 AF                sta     (LOWTR),y
000DB5r 2               .ifndef CONFIG_SMALL
000DB5r 2  C8                   iny
000DB6r 2  91 AF                sta     (LOWTR),y
000DB8r 2               .endif
000DB8r 2               
000DB8r 2               ; ----------------------------------------------------------------------------
000DB8r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000DB8r 2               ; ----------------------------------------------------------------------------
000DB8r 2               SET_VARPNT_AND_YA:
000DB8r 2  A5 AF                lda     LOWTR
000DBAr 2  18                   clc
000DBBr 2  69 02                adc     #$02
000DBDr 2  A4 B0                ldy     LOWTR+1
000DBFr 2  90 01                bcc     L2F9E
000DC1r 2  C8                   iny
000DC2r 2               L2F9E:
000DC2r 2  85 97                sta     VARPNT
000DC4r 2  84 98                sty     VARPNT+1
000DC6r 2  60                   rts
000DC7r 2               
000DC7r 1               .include "array.s"
000DC7r 2               .segment "CODE"
000DC7r 2               
000DC7r 2               ; ----------------------------------------------------------------------------
000DC7r 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000DC7r 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000DC7r 2               ; ----------------------------------------------------------------------------
000DC7r 2               GETARY:
000DC7r 2  A5 0F                lda     EOLPNTR
000DC9r 2  0A                   asl     a
000DCAr 2  69 05                adc     #$05
000DCCr 2  65 AF                adc     LOWTR
000DCEr 2  A4 B0                ldy     LOWTR+1
000DD0r 2  90 01                bcc     L2FAF
000DD2r 2  C8                   iny
000DD3r 2               L2FAF:
000DD3r 2  85 A8                sta     HIGHDS
000DD5r 2  84 A9                sty     HIGHDS+1
000DD7r 2  60                   rts
000DD8r 2               
000DD8r 2               ; ----------------------------------------------------------------------------
000DD8r 2               NEG32768:
000DD8r 2  90 80 00 00          .byte   $90,$80,$00,$00
000DDCr 2               
000DDCr 2               .ifdef CONFIG_2C
000DDCr 2               		.byte	$00; bugfix: short number
000DDCr 2               .endif
000DDCr 2               
000DDCr 2               ; ----------------------------------------------------------------------------
000DDCr 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000DDCr 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000DDCr 2               ; IN FAC+3,4
000DDCr 2               ; ----------------------------------------------------------------------------
000DDCr 2               MAKINT:
000DDCr 2  20 CC 00             jsr     CHRGET
000DDFr 2               .ifdef CONFIG_2
000DDFr 2  20 rr rr             jsr     FRMEVL
000DE2r 2               .else
000DE2r 2                       jsr     FRMNUM
000DE2r 2               .endif
000DE2r 2               
000DE2r 2               ; ----------------------------------------------------------------------------
000DE2r 2               ; CONVERT FAC TO INTEGER
000DE2r 2               ; MUST BE POSITIVE AND LESS THAN 32768
000DE2r 2               ; ----------------------------------------------------------------------------
000DE2r 2               MKINT:
000DE2r 2               .ifdef CONFIG_2
000DE2r 2  20 rr rr             jsr     CHKNUM
000DE5r 2               .endif
000DE5r 2  A5 B6                lda     FACSIGN
000DE7r 2  30 0D                bmi     MI1
000DE9r 2               
000DE9r 2               ; ----------------------------------------------------------------------------
000DE9r 2               ; CONVERT FAC TO INTEGER
000DE9r 2               ; MUST BE -32767 <= FAC <= 32767
000DE9r 2               ; ----------------------------------------------------------------------------
000DE9r 2               AYINT:
000DE9r 2  A5 B1                lda     FAC
000DEBr 2  C9 90                cmp     #$90
000DEDr 2  90 09                bcc     MI2
000DEFr 2  A9 rr                lda     #<NEG32768
000DF1r 2  A0 rr                ldy     #>NEG32768
000DF3r 2  20 rr rr             jsr     FCOMP
000DF6r 2               MI1:
000DF6r 2  D0 7A                bne     IQERR
000DF8r 2               MI2:
000DF8r 2  4C rr rr             jmp     QINT
000DFBr 2               
000DFBr 2               ; ----------------------------------------------------------------------------
000DFBr 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000DFBr 2               ; ----------------------------------------------------------------------------
000DFBr 2               ARRAY:
000DFBr 2  A5 10                lda     DIMFLG
000DFDr 2               .ifndef CONFIG_SMALL
000DFDr 2  05 12                ora     VALTYP+1
000DFFr 2               .endif
000DFFr 2  48                   pha
000E00r 2  A5 11                lda     VALTYP
000E02r 2  48                   pha
000E03r 2  A0 00                ldy     #$00
000E05r 2               L2FDE:
000E05r 2  98                   tya
000E06r 2  48                   pha
000E07r 2  A5 96                lda     VARNAM+1
000E09r 2  48                   pha
000E0Ar 2  A5 95                lda     VARNAM
000E0Cr 2  48                   pha
000E0Dr 2  20 rr rr             jsr     MAKINT
000E10r 2  68                   pla
000E11r 2  85 95                sta     VARNAM
000E13r 2  68                   pla
000E14r 2  85 96                sta     VARNAM+1
000E16r 2  68                   pla
000E17r 2  A8                   tay
000E18r 2  BA                   tsx
000E19r 2  BD 02 01             lda     STACK+2,x
000E1Cr 2  48                   pha
000E1Dr 2  BD 01 01             lda     STACK+1,x
000E20r 2  48                   pha
000E21r 2  A5 B4                lda     FAC_LAST-1
000E23r 2  9D 02 01             sta     STACK+2,x
000E26r 2  A5 B5                lda     FAC_LAST
000E28r 2  9D 01 01             sta     STACK+1,x
000E2Br 2  C8                   iny
000E2Cr 2  20 D2 00             jsr     CHRGOT
000E2Fr 2  C9 2C                cmp     #$2C
000E31r 2  F0 D2                beq     L2FDE
000E33r 2  84 0F                sty     EOLPNTR
000E35r 2  20 rr rr             jsr     CHKCLS
000E38r 2  68                   pla
000E39r 2  85 11                sta     VALTYP
000E3Br 2  68                   pla
000E3Cr 2               .ifndef CONFIG_SMALL
000E3Cr 2  85 12                sta     VALTYP+1
000E3Er 2  29 7F                and     #$7F
000E40r 2               .endif
000E40r 2  85 10                sta     DIMFLG
000E42r 2               ; ----------------------------------------------------------------------------
000E42r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000E42r 2               ; ----------------------------------------------------------------------------
000E42r 2  A6 7F                ldx     ARYTAB
000E44r 2  A5 80                lda     ARYTAB+1
000E46r 2               L301F:
000E46r 2  86 AF                stx     LOWTR
000E48r 2  85 B0                sta     LOWTR+1
000E4Ar 2  C5 82                cmp     STREND+1
000E4Cr 2  D0 04                bne     L302B
000E4Er 2  E4 81                cpx     STREND
000E50r 2  F0 39                beq     MAKE_NEW_ARRAY
000E52r 2               L302B:
000E52r 2  A0 00                ldy     #$00
000E54r 2  B1 AF                lda     (LOWTR),y
000E56r 2  C8                   iny
000E57r 2  C5 95                cmp     VARNAM
000E59r 2  D0 06                bne     L303A
000E5Br 2  A5 96                lda     VARNAM+1
000E5Dr 2  D1 AF                cmp     (LOWTR),y
000E5Fr 2  F0 16                beq     USE_OLD_ARRAY
000E61r 2               L303A:
000E61r 2  C8                   iny
000E62r 2  B1 AF                lda     (LOWTR),y
000E64r 2  18                   clc
000E65r 2  65 AF                adc     LOWTR
000E67r 2  AA                   tax
000E68r 2  C8                   iny
000E69r 2  B1 AF                lda     (LOWTR),y
000E6Br 2  65 B0                adc     LOWTR+1
000E6Dr 2  90 D7                bcc     L301F
000E6Fr 2               
000E6Fr 2               ; ----------------------------------------------------------------------------
000E6Fr 2               ; ERROR:  BAD SUBSCRIPTS
000E6Fr 2               ; ----------------------------------------------------------------------------
000E6Fr 2               SUBERR:
000E6Fr 2  A2 10                ldx     #ERR_BADSUBS
000E71r 2  2C                   .byte   $2C
000E72r 2               
000E72r 2               ; ----------------------------------------------------------------------------
000E72r 2               ; ERROR:  ILLEGAL QUANTITY
000E72r 2               ; ----------------------------------------------------------------------------
000E72r 2               IQERR:
000E72r 2  A2 08                ldx     #ERR_ILLQTY
000E74r 2               JER:
000E74r 2  4C rr rr             jmp     ERROR
000E77r 2               
000E77r 2               ; ----------------------------------------------------------------------------
000E77r 2               ; FOUND THE ARRAY
000E77r 2               ; ----------------------------------------------------------------------------
000E77r 2               USE_OLD_ARRAY:
000E77r 2  A2 12                ldx     #ERR_REDIMD
000E79r 2  A5 10                lda     DIMFLG
000E7Br 2  D0 F7                bne     JER
000E7Dr 2  20 rr rr             jsr     GETARY
000E80r 2  A5 0F                lda     EOLPNTR
000E82r 2  A0 04                ldy     #$04
000E84r 2  D1 AF                cmp     (LOWTR),y
000E86r 2  D0 E7                bne     SUBERR
000E88r 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000E8Br 2               
000E8Br 2               ; ----------------------------------------------------------------------------
000E8Br 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000E8Br 2               ; ----------------------------------------------------------------------------
000E8Br 2               MAKE_NEW_ARRAY:
000E8Br 2  20 rr rr             jsr     GETARY
000E8Er 2  20 rr rr             jsr     REASON
000E91r 2  A9 00                lda     #$00
000E93r 2  A8                   tay
000E94r 2  85 C2                sta     STRNG2+1
000E96r 2  A2 05                ldx     #BYTES_PER_ELEMENT
000E98r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000E98r 2                       stx     STRNG2
000E98r 2               .endif
000E98r 2  A5 95                lda     VARNAM
000E9Ar 2  91 AF                sta     (LOWTR),y
000E9Cr 2               .ifndef CONFIG_SMALL
000E9Cr 2  10 01                bpl     L3078
000E9Er 2  CA                   dex
000E9Fr 2               L3078:
000E9Fr 2               .endif
000E9Fr 2  C8                   iny
000EA0r 2  A5 96                lda     VARNAM+1
000EA2r 2  91 AF                sta     (LOWTR),y
000EA4r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000EA4r 2  10 02                bpl     L3081
000EA6r 2  CA                   dex
000EA7r 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000EA7r 2  CA                   dex
000EA8r 2                 .endif
000EA8r 2               L3081:
000EA8r 2  86 C1                stx     STRNG2
000EAAr 2               .endif
000EAAr 2  A5 0F                lda     EOLPNTR
000EACr 2  C8                   iny
000EADr 2  C8                   iny
000EAEr 2  C8                   iny
000EAFr 2  91 AF                sta     (LOWTR),y
000EB1r 2               L308A:
000EB1r 2  A2 0B                ldx     #$0B
000EB3r 2  A9 00                lda     #$00
000EB5r 2  24 10                bit     DIMFLG
000EB7r 2  50 08                bvc     L309A
000EB9r 2  68                   pla
000EBAr 2  18                   clc
000EBBr 2  69 01                adc     #$01
000EBDr 2  AA                   tax
000EBEr 2  68                   pla
000EBFr 2  69 00                adc     #$00
000EC1r 2               L309A:
000EC1r 2  C8                   iny
000EC2r 2  91 AF                sta     (LOWTR),y
000EC4r 2  C8                   iny
000EC5r 2  8A                   txa
000EC6r 2  91 AF                sta     (LOWTR),y
000EC8r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000ECBr 2  86 C1                stx     STRNG2
000ECDr 2  85 C2                sta     STRNG2+1
000ECFr 2  A4 72                ldy     INDEX
000ED1r 2  C6 0F                dec     EOLPNTR
000ED3r 2  D0 DC                bne     L308A
000ED5r 2  65 A9                adc     HIGHDS+1
000ED7r 2  B0 5D                bcs     GME
000ED9r 2  85 A9                sta     HIGHDS+1
000EDBr 2  A8                   tay
000EDCr 2  8A                   txa
000EDDr 2  65 A8                adc     HIGHDS
000EDFr 2  90 03                bcc     L30BD
000EE1r 2  C8                   iny
000EE2r 2  F0 52                beq     GME
000EE4r 2               L30BD:
000EE4r 2  20 rr rr             jsr     REASON
000EE7r 2  85 81                sta     STREND
000EE9r 2  84 82                sty     STREND+1
000EEBr 2  A9 00                lda     #$00
000EEDr 2  E6 C2                inc     STRNG2+1
000EEFr 2  A4 C1                ldy     STRNG2
000EF1r 2  F0 05                beq     L30D1
000EF3r 2               L30CC:
000EF3r 2  88                   dey
000EF4r 2  91 A8                sta     (HIGHDS),y
000EF6r 2  D0 FB                bne     L30CC
000EF8r 2               L30D1:
000EF8r 2  C6 A9                dec     HIGHDS+1
000EFAr 2  C6 C2                dec     STRNG2+1
000EFCr 2  D0 F5                bne     L30CC
000EFEr 2  E6 A9                inc     HIGHDS+1
000F00r 2  38                   sec
000F01r 2  A5 81                lda     STREND
000F03r 2  E5 AF                sbc     LOWTR
000F05r 2  A0 02                ldy     #$02
000F07r 2  91 AF                sta     (LOWTR),y
000F09r 2  A5 82                lda     STREND+1
000F0Br 2  C8                   iny
000F0Cr 2  E5 B0                sbc     LOWTR+1
000F0Er 2  91 AF                sta     (LOWTR),y
000F10r 2  A5 10                lda     DIMFLG
000F12r 2  D0 62                bne     RTS9
000F14r 2  C8                   iny
000F15r 2               
000F15r 2               ; ----------------------------------------------------------------------------
000F15r 2               ; FIND SPECIFIED ARRAY ELEMENT
000F15r 2               ;
000F15r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000F15r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000F15r 2               ; ----------------------------------------------------------------------------
000F15r 2               FIND_ARRAY_ELEMENT:
000F15r 2  B1 AF                lda     (LOWTR),y
000F17r 2  85 0F                sta     EOLPNTR
000F19r 2  A9 00                lda     #$00
000F1Br 2  85 C1                sta     STRNG2
000F1Dr 2               L30F6:
000F1Dr 2  85 C2                sta     STRNG2+1
000F1Fr 2  C8                   iny
000F20r 2  68                   pla
000F21r 2  AA                   tax
000F22r 2  85 B4                sta     FAC_LAST-1
000F24r 2  68                   pla
000F25r 2  85 B5                sta     FAC_LAST
000F27r 2  D1 AF                cmp     (LOWTR),y
000F29r 2  90 0E                bcc     FAE2
000F2Br 2  D0 06                bne     GSE
000F2Dr 2  C8                   iny
000F2Er 2  8A                   txa
000F2Fr 2  D1 AF                cmp     (LOWTR),y
000F31r 2  90 07                bcc     FAE3
000F33r 2               ; ----------------------------------------------------------------------------
000F33r 2               GSE:
000F33r 2  4C rr rr             jmp     SUBERR
000F36r 2               GME:
000F36r 2  4C rr rr             jmp     MEMERR
000F39r 2               ; ----------------------------------------------------------------------------
000F39r 2               FAE2:
000F39r 2  C8                   iny
000F3Ar 2               FAE3:
000F3Ar 2  A5 C2                lda     STRNG2+1
000F3Cr 2  05 C1                ora     STRNG2
000F3Er 2  18                   clc
000F3Fr 2  F0 0A                beq     L3124
000F41r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000F44r 2  8A                   txa
000F45r 2  65 B4                adc     FAC_LAST-1
000F47r 2  AA                   tax
000F48r 2  98                   tya
000F49r 2  A4 72                ldy     INDEX
000F4Br 2               L3124:
000F4Br 2  65 B5                adc     FAC_LAST
000F4Dr 2  86 C1                stx     STRNG2
000F4Fr 2  C6 0F                dec     EOLPNTR
000F51r 2  D0 CA                bne     L30F6
000F53r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000F53r 2                       asl     STRNG2
000F53r 2                       rol     a
000F53r 2                       bcs     GSE
000F53r 2                       asl     STRNG2
000F53r 2                       rol     a
000F53r 2                       bcs     GSE
000F53r 2                       tay
000F53r 2                       lda     STRNG2
000F53r 2               .else
000F53r 2                 .ifdef CONFIG_11A
000F53r 2  85 C2                sta     STRNG2+1
000F55r 2                 .endif
000F55r 2  A2 05                ldx     #BYTES_FP
000F57r 2                 .ifdef CONFIG_SMALL
000F57r 2                       lda     VARNAM+1
000F57r 2                 .else
000F57r 2  A5 95                lda     VARNAM
000F59r 2                 .endif
000F59r 2  10 01                bpl     L3135
000F5Br 2  CA                   dex
000F5Cr 2               L3135:
000F5Cr 2                 .ifdef CONFIG_SMALL
000F5Cr 2                       stx     RESULT+1
000F5Cr 2                 .else
000F5Cr 2  A5 96                lda     VARNAM+1
000F5Er 2  10 02                bpl     L313B
000F60r 2  CA                   dex
000F61r 2  CA                   dex
000F62r 2               L313B:
000F62r 2  86 78                stx     RESULT+2
000F64r 2                 .endif
000F64r 2  A9 00                lda     #$00
000F66r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000F69r 2  8A                   txa
000F6Ar 2               .endif
000F6Ar 2  65 A8                adc     HIGHDS
000F6Cr 2  85 97                sta     VARPNT
000F6Er 2  98                   tya
000F6Fr 2  65 A9                adc     HIGHDS+1
000F71r 2  85 98                sta     VARPNT+1
000F73r 2  A8                   tay
000F74r 2  A5 97                lda     VARPNT
000F76r 2               RTS9:
000F76r 2  60                   rts
000F77r 2               
000F77r 2               ; ----------------------------------------------------------------------------
000F77r 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000F77r 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000F77r 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000F77r 2               ; ----------------------------------------------------------------------------
000F77r 2               MULTIPLY_SUBSCRIPT:
000F77r 2  84 72                sty     INDEX
000F79r 2  B1 AF                lda     (LOWTR),y
000F7Br 2  85 78                sta     RESULT_LAST-2
000F7Dr 2  88                   dey
000F7Er 2  B1 AF                lda     (LOWTR),y
000F80r 2               MULTIPLY_SUBS1:
000F80r 2  85 79                sta     RESULT_LAST-1
000F82r 2  A9 10                lda     #$10
000F84r 2  85 AD                sta     INDX
000F86r 2  A2 00                ldx     #$00
000F88r 2  A0 00                ldy     #$00
000F8Ar 2               L3163:
000F8Ar 2  8A                   txa
000F8Br 2  0A                   asl     a
000F8Cr 2  AA                   tax
000F8Dr 2  98                   tya
000F8Er 2  2A                   rol     a
000F8Fr 2  A8                   tay
000F90r 2  B0 A4                bcs     GME
000F92r 2  06 C1                asl     STRNG2
000F94r 2  26 C2                rol     STRNG2+1
000F96r 2  90 0B                bcc     L317C
000F98r 2  18                   clc
000F99r 2  8A                   txa
000F9Ar 2  65 78                adc     RESULT_LAST-2
000F9Cr 2  AA                   tax
000F9Dr 2  98                   tya
000F9Er 2  65 79                adc     RESULT_LAST-1
000FA0r 2  A8                   tay
000FA1r 2  B0 93                bcs     GME
000FA3r 2               L317C:
000FA3r 2  C6 AD                dec     INDX
000FA5r 2  D0 E3                bne     L3163
000FA7r 2  60                   rts
000FA8r 2               
000FA8r 2               
000FA8r 1               .include "misc2.s"
000FA8r 2               .segment "CODE"
000FA8r 2               
000FA8r 2               ; ----------------------------------------------------------------------------
000FA8r 2               ; "FRE" FUNCTION
000FA8r 2               ;
000FA8r 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000FA8r 2               ; ----------------------------------------------------------------------------
000FA8r 2               FRE:
000FA8r 2  A5 11                lda     VALTYP
000FAAr 2  F0 03                beq     L3188
000FACr 2  20 rr rr             jsr     FREFAC
000FAFr 2               L3188:
000FAFr 2  20 rr rr             jsr     GARBAG
000FB2r 2  38                   sec
000FB3r 2  A5 83                lda     FRETOP
000FB5r 2  E5 81                sbc     STREND
000FB7r 2  A8                   tay
000FB8r 2  A5 84                lda     FRETOP+1
000FBAr 2  E5 82                sbc     STREND+1
000FBCr 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000FBCr 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000FBCr 2               
000FBCr 2               ; ----------------------------------------------------------------------------
000FBCr 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000FBCr 2               ; ----------------------------------------------------------------------------
000FBCr 2               GIVAYF:
000FBCr 2  A2 00                ldx     #$00
000FBEr 2  86 11                stx     VALTYP
000FC0r 2  85 B2                sta     FAC+1
000FC2r 2  84 B3                sty     FAC+2
000FC4r 2  A2 90                ldx     #$90
000FC6r 2  4C rr rr             jmp     FLOAT1
000FC9r 2               POS:
000FC9r 2  A4 19                ldy     POSX
000FCBr 2               
000FCBr 2               ; ----------------------------------------------------------------------------
000FCBr 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000FCBr 2               ; ----------------------------------------------------------------------------
000FCBr 2               SNGFLT:
000FCBr 2  A9 00                lda     #$00
000FCDr 2  F0 ED                beq     GIVAYF
000FCFr 2               
000FCFr 2               ; ----------------------------------------------------------------------------
000FCFr 2               ; CHECK FOR DIRECT OR RUNNING MODE
000FCFr 2               ; GIVING ERROR IF DIRECT MODE
000FCFr 2               ; ----------------------------------------------------------------------------
000FCFr 2               ERRDIR:
000FCFr 2  A6 8A                ldx     CURLIN+1
000FD1r 2  E8                   inx
000FD2r 2  D0 A2                bne     RTS9
000FD4r 2  A2 16                ldx     #ERR_ILLDIR
000FD6r 2               .ifdef CONFIG_2
000FD6r 2  2C                   .byte   $2C
000FD7r 2               LD288:
000FD7r 2  A2 20                ldx     #ERR_UNDEFFN
000FD9r 2               .endif
000FD9r 2               L31AF:
000FD9r 2  4C rr rr             jmp     ERROR
000FDCr 2               DEF:
000FDCr 2  20 rr rr             jsr     FNC
000FDFr 2  20 rr rr             jsr     ERRDIR
000FE2r 2  20 rr rr             jsr     CHKOPN
000FE5r 2  A9 80                lda     #$80
000FE7r 2  85 14                sta     SUBFLG
000FE9r 2  20 rr rr             jsr     PTRGET
000FECr 2  20 rr rr             jsr     CHKNUM
000FEFr 2  20 rr rr             jsr     CHKCLS
000FF2r 2  A9 AC                lda     #TOKEN_EQUAL
000FF4r 2  20 rr rr             jsr     SYNCHR
000FF7r 2               .ifndef CONFIG_SMALL
000FF7r 2  48                   pha
000FF8r 2               .endif
000FF8r 2  A5 98                lda     VARPNT+1
000FFAr 2  48                   pha
000FFBr 2  A5 97                lda     VARPNT
000FFDr 2  48                   pha
000FFEr 2  A5 D4                lda     TXTPTR+1
001000r 2  48                   pha
001001r 2  A5 D3                lda     TXTPTR
001003r 2  48                   pha
001004r 2  20 rr rr             jsr     DATA
001007r 2  4C rr rr             jmp     L3250
00100Ar 2               FNC:
00100Ar 2  A9 9F                lda     #TOKEN_FN
00100Cr 2  20 rr rr             jsr     SYNCHR
00100Fr 2  09 80                ora     #$80
001011r 2  85 14                sta     SUBFLG
001013r 2  20 rr rr             jsr     PTRGET3
001016r 2  85 9E                sta     FNCNAM
001018r 2  84 9F                sty     FNCNAM+1
00101Ar 2  4C rr rr             jmp     CHKNUM
00101Dr 2               L31F3:
00101Dr 2  20 rr rr             jsr     FNC
001020r 2  A5 9F                lda     FNCNAM+1
001022r 2  48                   pha
001023r 2  A5 9E                lda     FNCNAM
001025r 2  48                   pha
001026r 2  20 rr rr             jsr     PARCHK
001029r 2  20 rr rr             jsr     CHKNUM
00102Cr 2  68                   pla
00102Dr 2  85 9E                sta     FNCNAM
00102Fr 2  68                   pla
001030r 2  85 9F                sta     FNCNAM+1
001032r 2  A0 02                ldy     #$02
001034r 2               .ifndef CONFIG_2
001034r 2                       ldx     #ERR_UNDEFFN
001034r 2               .endif
001034r 2  B1 9E                lda     (FNCNAM),y
001036r 2               .ifndef CONFIG_2
001036r 2                       beq     L31AF
001036r 2               .endif
001036r 2  85 97                sta     VARPNT
001038r 2  AA                   tax
001039r 2  C8                   iny
00103Ar 2  B1 9E                lda     (FNCNAM),y
00103Cr 2               .ifdef CONFIG_2
00103Cr 2  F0 99                beq     LD288
00103Er 2               .endif
00103Er 2  85 98                sta     VARPNT+1
001040r 2               .ifndef CONFIG_SMALL
001040r 2  C8                   iny
001041r 2               .endif
001041r 2               L3219:
001041r 2  B1 97                lda     (VARPNT),y
001043r 2  48                   pha
001044r 2  88                   dey
001045r 2  10 FA                bpl     L3219
001047r 2  A4 98                ldy     VARPNT+1
001049r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
00104Cr 2  A5 D4                lda     TXTPTR+1
00104Er 2  48                   pha
00104Fr 2  A5 D3                lda     TXTPTR
001051r 2  48                   pha
001052r 2  B1 9E                lda     (FNCNAM),y
001054r 2  85 D3                sta     TXTPTR
001056r 2  C8                   iny
001057r 2  B1 9E                lda     (FNCNAM),y
001059r 2  85 D4                sta     TXTPTR+1
00105Br 2  A5 98                lda     VARPNT+1
00105Dr 2  48                   pha
00105Er 2  A5 97                lda     VARPNT
001060r 2  48                   pha
001061r 2  20 rr rr             jsr     FRMNUM
001064r 2  68                   pla
001065r 2  85 9E                sta     FNCNAM
001067r 2  68                   pla
001068r 2  85 9F                sta     FNCNAM+1
00106Ar 2  20 D2 00             jsr     CHRGOT
00106Dr 2  F0 03                beq     L324A
00106Fr 2  4C rr rr             jmp     SYNERR
001072r 2               L324A:
001072r 2  68                   pla
001073r 2  85 D3                sta     TXTPTR
001075r 2  68                   pla
001076r 2  85 D4                sta     TXTPTR+1
001078r 2               L3250:
001078r 2  A0 00                ldy     #$00
00107Ar 2  68                   pla
00107Br 2  91 9E                sta     (FNCNAM),y
00107Dr 2  68                   pla
00107Er 2  C8                   iny
00107Fr 2  91 9E                sta     (FNCNAM),y
001081r 2  68                   pla
001082r 2  C8                   iny
001083r 2  91 9E                sta     (FNCNAM),y
001085r 2  68                   pla
001086r 2  C8                   iny
001087r 2  91 9E                sta     (FNCNAM),y
001089r 2               .ifndef CONFIG_SMALL
001089r 2  68                   pla
00108Ar 2  C8                   iny
00108Br 2  91 9E                sta     (FNCNAM),y
00108Dr 2               .endif
00108Dr 2  60                   rts
00108Er 2               
00108Er 1               .include "string.s"
00108Er 2               .segment "CODE"
00108Er 2               ; ----------------------------------------------------------------------------
00108Er 2               ; "STR$" FUNCTION
00108Er 2               ; ----------------------------------------------------------------------------
00108Er 2               STR:
00108Er 2  20 rr rr             jsr     CHKNUM
001091r 2  A0 00                ldy     #$00
001093r 2  20 rr rr             jsr     FOUT1
001096r 2  68                   pla
001097r 2  68                   pla
001098r 2               LD353:
001098r 2  A9 FF                lda     #<(STACK2-1)
00109Ar 2  A0 00                ldy     #>(STACK2-1)
00109Cr 2               .if STACK2 > $0100
00109Cr 2                       bne     STRLIT
00109Cr 2               .else
00109Cr 2  F0 12                beq     STRLIT
00109Er 2               .endif
00109Er 2               
00109Er 2               ; ----------------------------------------------------------------------------
00109Er 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
00109Er 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
00109Er 2               ; ----------------------------------------------------------------------------
00109Er 2               STRINI:
00109Er 2  A6 B4                ldx     FAC_LAST-1
0010A0r 2  A4 B5                ldy     FAC_LAST
0010A2r 2  86 A0                stx     DSCPTR
0010A4r 2  84 A1                sty     DSCPTR+1
0010A6r 2               
0010A6r 2               ; ----------------------------------------------------------------------------
0010A6r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010A6r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
0010A6r 2               ; ----------------------------------------------------------------------------
0010A6r 2               STRSPA:
0010A6r 2  20 rr rr             jsr     GETSPA
0010A9r 2  86 B2                stx     FAC+1
0010ABr 2  84 B3                sty     FAC+2
0010ADr 2  85 B1                sta     FAC
0010AFr 2  60                   rts
0010B0r 2               
0010B0r 2               ; ----------------------------------------------------------------------------
0010B0r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010B0r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
0010B0r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010B0r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010B0r 2               ; ----------------------------------------------------------------------------
0010B0r 2               STRLIT:
0010B0r 2  A2 22                ldx     #$22
0010B2r 2  86 0D                stx     CHARAC
0010B4r 2  86 0E                stx     ENDCHR
0010B6r 2               
0010B6r 2               ; ----------------------------------------------------------------------------
0010B6r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010B6r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
0010B6r 2               ;
0010B6r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010B6r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010B6r 2               ; ----------------------------------------------------------------------------
0010B6r 2               STRLT2:
0010B6r 2  85 BF                sta     STRNG1
0010B8r 2  84 C0                sty     STRNG1+1
0010BAr 2  85 B2                sta     FAC+1
0010BCr 2  84 B3                sty     FAC+2
0010BEr 2  A0 FF                ldy     #$FF
0010C0r 2               L3298:
0010C0r 2  C8                   iny
0010C1r 2  B1 BF                lda     (STRNG1),y
0010C3r 2  F0 0C                beq     L32A9
0010C5r 2  C5 0D                cmp     CHARAC
0010C7r 2  F0 04                beq     L32A5
0010C9r 2  C5 0E                cmp     ENDCHR
0010CBr 2  D0 F3                bne     L3298
0010CDr 2               L32A5:
0010CDr 2  C9 22                cmp     #$22
0010CFr 2  F0 01                beq     L32AA
0010D1r 2               L32A9:
0010D1r 2  18                   clc
0010D2r 2               L32AA:
0010D2r 2  84 B1                sty     FAC
0010D4r 2  98                   tya
0010D5r 2  65 BF                adc     STRNG1
0010D7r 2  85 C1                sta     STRNG2
0010D9r 2  A6 C0                ldx     STRNG1+1
0010DBr 2  90 01                bcc     L32B6
0010DDr 2  E8                   inx
0010DEr 2               L32B6:
0010DEr 2  86 C2                stx     STRNG2+1
0010E0r 2  A5 C0                lda     STRNG1+1
0010E2r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
0010E2r 2                       beq     LD399
0010E2r 2                       cmp     #>INPUTBUFFER
0010E2r 2               .elseif .def(AIM65)
0010E2r 2                       beq     LD399
0010E2r 2                       cmp     #$01
0010E2r 2               .endif
0010E2r 2  D0 0B                bne     PUTNEW
0010E4r 2               LD399:
0010E4r 2  98                   tya
0010E5r 2  20 rr rr             jsr     STRINI
0010E8r 2  A6 BF                ldx     STRNG1
0010EAr 2  A4 C0                ldy     STRNG1+1
0010ECr 2  20 rr rr             jsr     MOVSTR
0010EFr 2               
0010EFr 2               ; ----------------------------------------------------------------------------
0010EFr 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
0010EFr 2               ;
0010EFr 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
0010EFr 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
0010EFr 2               ; ----------------------------------------------------------------------------
0010EFr 2               PUTNEW:
0010EFr 2  A6 66                ldx     TEMPPT
0010F1r 2  E0 72                cpx     #TEMPST+9
0010F3r 2  D0 05                bne     PUTEMP
0010F5r 2  A2 1C                ldx     #ERR_FRMCPX
0010F7r 2               JERR:
0010F7r 2  4C rr rr             jmp     ERROR
0010FAr 2               PUTEMP:
0010FAr 2  A5 B1                lda     FAC
0010FCr 2  95 00                sta     0,x
0010FEr 2  A5 B2                lda     FAC+1
001100r 2  95 01                sta     1,x
001102r 2  A5 B3                lda     FAC+2
001104r 2  95 02                sta     2,x
001106r 2  A0 00                ldy     #$00
001108r 2  86 B4                stx     FAC_LAST-1
00110Ar 2  84 B5                sty     FAC_LAST
00110Cr 2               .ifdef CONFIG_2
00110Cr 2  84 C0                sty     FACEXTENSION
00110Er 2               .endif
00110Er 2  88                   dey
00110Fr 2  84 11                sty     VALTYP
001111r 2  86 67                stx     LASTPT
001113r 2  E8                   inx
001114r 2  E8                   inx
001115r 2  E8                   inx
001116r 2  86 66                stx     TEMPPT
001118r 2  60                   rts
001119r 2               
001119r 2               ; ----------------------------------------------------------------------------
001119r 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
001119r 2               ; (A)=# BYTES SPACE TO MAKE
001119r 2               ;
001119r 2               ; RETURN WITH (A) SAME,
001119r 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
001119r 2               ; ----------------------------------------------------------------------------
001119r 2               GETSPA:
001119r 2  46 13                lsr     DATAFLG
00111Br 2               L32F1:
00111Br 2  48                   pha
00111Cr 2  49 FF                eor     #$FF
00111Er 2  38                   sec
00111Fr 2  65 83                adc     FRETOP
001121r 2  A4 84                ldy     FRETOP+1
001123r 2  B0 01                bcs     L32FC
001125r 2  88                   dey
001126r 2               L32FC:
001126r 2  C4 82                cpy     STREND+1
001128r 2  90 11                bcc     L3311
00112Ar 2  D0 04                bne     L3306
00112Cr 2  C5 81                cmp     STREND
00112Er 2  90 0B                bcc     L3311
001130r 2               L3306:
001130r 2  85 83                sta     FRETOP
001132r 2  84 84                sty     FRETOP+1
001134r 2  85 85                sta     FRESPC
001136r 2  84 86                sty     FRESPC+1
001138r 2  AA                   tax
001139r 2  68                   pla
00113Ar 2  60                   rts
00113Br 2               L3311:
00113Br 2  A2 0C                ldx     #ERR_MEMFULL
00113Dr 2  A5 13                lda     DATAFLG
00113Fr 2  30 B6                bmi     JERR
001141r 2  20 rr rr             jsr     GARBAG
001144r 2  A9 80                lda     #$80
001146r 2  85 13                sta     DATAFLG
001148r 2  68                   pla
001149r 2  D0 D0                bne     L32F1
00114Br 2               
00114Br 2               ; ----------------------------------------------------------------------------
00114Br 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00114Br 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00114Br 2               ; BELOW STRING AREA DOWN TO STREND.
00114Br 2               ; ----------------------------------------------------------------------------
00114Br 2               GARBAG:
00114Br 2               
00114Br 2               .ifdef CONST_MEMSIZ
00114Br 2                       ldx     #<CONST_MEMSIZ
00114Br 2                       lda     #>CONST_MEMSIZ
00114Br 2               .else
00114Br 2  A6 87                ldx     MEMSIZ
00114Dr 2  A5 88                lda     MEMSIZ+1
00114Fr 2               .endif
00114Fr 2               FINDHIGHESTSTRING:
00114Fr 2  86 83                stx     FRETOP
001151r 2  85 84                sta     FRETOP+1
001153r 2  A0 00                ldy     #$00
001155r 2  84 9F                sty     FNCNAM+1
001157r 2               .ifdef CONFIG_2
001157r 2  84 9E                sty     FNCNAM	; GC bugfix!
001159r 2               .endif
001159r 2  A5 81                lda     STREND
00115Br 2  A6 82                ldx     STREND+1
00115Dr 2  85 AF                sta     LOWTR
00115Fr 2  86 B0                stx     LOWTR+1
001161r 2  A9 69                lda     #TEMPST
001163r 2  A2 00                ldx     #$00
001165r 2  85 72                sta     INDEX
001167r 2  86 73                stx     INDEX+1
001169r 2               L333D:
001169r 2  C5 66                cmp     TEMPPT
00116Br 2  F0 05                beq     L3346
00116Dr 2  20 rr rr             jsr     CHECK_VARIABLE
001170r 2  F0 F7                beq     L333D
001172r 2               L3346:
001172r 2  A9 07                lda     #BYTES_PER_VARIABLE
001174r 2  85 A3                sta     DSCLEN
001176r 2  A5 7D                lda     VARTAB
001178r 2  A6 7E                ldx     VARTAB+1
00117Ar 2  85 72                sta     INDEX
00117Cr 2  86 73                stx     INDEX+1
00117Er 2               L3352:
00117Er 2  E4 80                cpx     ARYTAB+1
001180r 2  D0 04                bne     L335A
001182r 2  C5 7F                cmp     ARYTAB
001184r 2  F0 05                beq     L335F
001186r 2               L335A:
001186r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
001189r 2  F0 F3                beq     L3352
00118Br 2               L335F:
00118Br 2  85 A8                sta     HIGHDS
00118Dr 2  86 A9                stx     HIGHDS+1
00118Fr 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
001191r 2  85 A3                sta     DSCLEN
001193r 2               L3367:
001193r 2  A5 A8                lda     HIGHDS
001195r 2  A6 A9                ldx     HIGHDS+1
001197r 2               L336B:
001197r 2  E4 82                cpx     STREND+1
001199r 2  D0 07                bne     L3376
00119Br 2  C5 81                cmp     STREND
00119Dr 2  D0 03                bne     L3376
00119Fr 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
0011A2r 2               L3376:
0011A2r 2  85 72                sta     INDEX
0011A4r 2  86 73                stx     INDEX+1
0011A6r 2               .ifdef CONFIG_SMALL
0011A6r 2                       ldy     #$01
0011A6r 2               .else
0011A6r 2  A0 00                ldy     #$00
0011A8r 2  B1 72                lda     (INDEX),y
0011AAr 2  AA                   tax
0011ABr 2  C8                   iny
0011ACr 2               .endif
0011ACr 2  B1 72                lda     (INDEX),y
0011AEr 2  08                   php
0011AFr 2  C8                   iny
0011B0r 2  B1 72                lda     (INDEX),y
0011B2r 2  65 A8                adc     HIGHDS
0011B4r 2  85 A8                sta     HIGHDS
0011B6r 2  C8                   iny
0011B7r 2  B1 72                lda     (INDEX),y
0011B9r 2  65 A9                adc     HIGHDS+1
0011BBr 2  85 A9                sta     HIGHDS+1
0011BDr 2  28                   plp
0011BEr 2  10 D3                bpl     L3367
0011C0r 2               .ifndef CONFIG_SMALL
0011C0r 2  8A                   txa
0011C1r 2  30 D0                bmi     L3367
0011C3r 2               .endif
0011C3r 2  C8                   iny
0011C4r 2  B1 72                lda     (INDEX),y
0011C6r 2               .ifdef CONFIG_CBM1_PATCHES
0011C6r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
0011C6r 2               .else
0011C6r 2                 .ifdef CONFIG_11
0011C6r 2  A0 00                ldy     #$00	; GC bugfix
0011C8r 2                 .endif
0011C8r 2  0A                   asl     a
0011C9r 2  69 05                adc     #$05
0011CBr 2               .endif
0011CBr 2  65 72                adc     INDEX
0011CDr 2  85 72                sta     INDEX
0011CFr 2  90 02                bcc     L33A7
0011D1r 2  E6 73                inc     INDEX+1
0011D3r 2               L33A7:
0011D3r 2  A6 73                ldx     INDEX+1
0011D5r 2               L33A9:
0011D5r 2  E4 A9                cpx     HIGHDS+1
0011D7r 2  D0 04                bne     L33B1
0011D9r 2  C5 A8                cmp     HIGHDS
0011DBr 2  F0 BA                beq     L336B
0011DDr 2               L33B1:
0011DDr 2  20 rr rr             jsr     CHECK_VARIABLE
0011E0r 2  F0 F3                beq     L33A9
0011E2r 2               
0011E2r 2               ; ----------------------------------------------------------------------------
0011E2r 2               ; PROCESS A SIMPLE VARIABLE
0011E2r 2               ; ----------------------------------------------------------------------------
0011E2r 2               CHECK_SIMPLE_VARIABLE:
0011E2r 2               .ifndef CONFIG_SMALL
0011E2r 2  B1 72                lda     (INDEX),y
0011E4r 2  30 35                bmi     CHECK_BUMP
0011E6r 2               .endif
0011E6r 2  C8                   iny
0011E7r 2  B1 72                lda     (INDEX),y
0011E9r 2  10 30                bpl     CHECK_BUMP
0011EBr 2  C8                   iny
0011ECr 2               
0011ECr 2               ; ----------------------------------------------------------------------------
0011ECr 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
0011ECr 2               ; ----------------------------------------------------------------------------
0011ECr 2               CHECK_VARIABLE:
0011ECr 2  B1 72                lda     (INDEX),y
0011EEr 2  F0 2B                beq     CHECK_BUMP
0011F0r 2  C8                   iny
0011F1r 2  B1 72                lda     (INDEX),y
0011F3r 2  AA                   tax
0011F4r 2  C8                   iny
0011F5r 2  B1 72                lda     (INDEX),y
0011F7r 2  C5 84                cmp     FRETOP+1
0011F9r 2  90 06                bcc     L33D5
0011FBr 2  D0 1E                bne     CHECK_BUMP
0011FDr 2  E4 83                cpx     FRETOP
0011FFr 2  B0 1A                bcs     CHECK_BUMP
001201r 2               L33D5:
001201r 2  C5 B0                cmp     LOWTR+1
001203r 2  90 16                bcc     CHECK_BUMP
001205r 2  D0 04                bne     L33DF
001207r 2  E4 AF                cpx     LOWTR
001209r 2  90 10                bcc     CHECK_BUMP
00120Br 2               L33DF:
00120Br 2  86 AF                stx     LOWTR
00120Dr 2  85 B0                sta     LOWTR+1
00120Fr 2  A5 72                lda     INDEX
001211r 2  A6 73                ldx     INDEX+1
001213r 2  85 9E                sta     FNCNAM
001215r 2  86 9F                stx     FNCNAM+1
001217r 2  A5 A3                lda     DSCLEN
001219r 2  85 A5                sta     Z52
00121Br 2               
00121Br 2               ; ----------------------------------------------------------------------------
00121Br 2               ; ADD (DSCLEN) TO PNTR IN INDEX
00121Br 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00121Br 2               ; ----------------------------------------------------------------------------
00121Br 2               CHECK_BUMP:
00121Br 2  A5 A3                lda     DSCLEN
00121Dr 2  18                   clc
00121Er 2  65 72                adc     INDEX
001220r 2  85 72                sta     INDEX
001222r 2  90 02                bcc     L33FA
001224r 2  E6 73                inc     INDEX+1
001226r 2               L33FA:
001226r 2  A6 73                ldx     INDEX+1
001228r 2  A0 00                ldy     #$00
00122Ar 2  60                   rts
00122Br 2               
00122Br 2               ; ----------------------------------------------------------------------------
00122Br 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00122Br 2               ; TO TOP AND GO BACK FOR ANOTHER
00122Br 2               ; ----------------------------------------------------------------------------
00122Br 2               MOVE_HIGHEST_STRING_TO_TOP:
00122Br 2               .ifdef CONFIG_2
00122Br 2  A5 9F                lda     FNCNAM+1	; GC bugfix
00122Dr 2  05 9E                ora     FNCNAM
00122Fr 2               .else
00122Fr 2                       ldx     FNCNAM+1
00122Fr 2               .endif
00122Fr 2  F0 F5                beq     L33FA
001231r 2  A5 A5                lda     Z52
001233r 2               .ifndef CONFIG_10A
001233r 2                       sbc     #$03
001233r 2               .else
001233r 2  29 04                and     #$04
001235r 2               .endif
001235r 2  4A                   lsr     a
001236r 2  A8                   tay
001237r 2  85 A5                sta     Z52
001239r 2  B1 9E                lda     (FNCNAM),y
00123Br 2  65 AF                adc     LOWTR
00123Dr 2  85 AA                sta     HIGHTR
00123Fr 2  A5 B0                lda     LOWTR+1
001241r 2  69 00                adc     #$00
001243r 2  85 AB                sta     HIGHTR+1
001245r 2  A5 83                lda     FRETOP
001247r 2  A6 84                ldx     FRETOP+1
001249r 2  85 A8                sta     HIGHDS
00124Br 2  86 A9                stx     HIGHDS+1
00124Dr 2  20 rr rr             jsr     BLTU2
001250r 2  A4 A5                ldy     Z52
001252r 2  C8                   iny
001253r 2  A5 A8                lda     HIGHDS
001255r 2  91 9E                sta     (FNCNAM),y
001257r 2  AA                   tax
001258r 2  E6 A9                inc     HIGHDS+1
00125Ar 2  A5 A9                lda     HIGHDS+1
00125Cr 2  C8                   iny
00125Dr 2  91 9E                sta     (FNCNAM),y
00125Fr 2  4C rr rr             jmp     FINDHIGHESTSTRING
001262r 2               
001262r 2               ; ----------------------------------------------------------------------------
001262r 2               ; CONCATENATE TWO STRINGS
001262r 2               ; ----------------------------------------------------------------------------
001262r 2               CAT:
001262r 2  A5 B5                lda     FAC_LAST
001264r 2  48                   pha
001265r 2  A5 B4                lda     FAC_LAST-1
001267r 2  48                   pha
001268r 2  20 rr rr             jsr     FRM_ELEMENT
00126Br 2  20 rr rr             jsr     CHKSTR
00126Er 2  68                   pla
00126Fr 2  85 BF                sta     STRNG1
001271r 2  68                   pla
001272r 2  85 C0                sta     STRNG1+1
001274r 2  A0 00                ldy     #$00
001276r 2  B1 BF                lda     (STRNG1),y
001278r 2  18                   clc
001279r 2  71 B4                adc     (FAC_LAST-1),y
00127Br 2  90 05                bcc     L3454
00127Dr 2  A2 1A                ldx     #ERR_STRLONG
00127Fr 2  4C rr rr             jmp     ERROR
001282r 2               L3454:
001282r 2  20 rr rr             jsr     STRINI
001285r 2  20 rr rr             jsr     MOVINS
001288r 2  A5 A0                lda     DSCPTR
00128Ar 2  A4 A1                ldy     DSCPTR+1
00128Cr 2  20 rr rr             jsr     FRETMP
00128Fr 2  20 rr rr             jsr     MOVSTR1
001292r 2  A5 BF                lda     STRNG1
001294r 2  A4 C0                ldy     STRNG1+1
001296r 2  20 rr rr             jsr     FRETMP
001299r 2  20 rr rr             jsr     PUTNEW
00129Cr 2  4C rr rr             jmp     FRMEVL2
00129Fr 2               
00129Fr 2               ; ----------------------------------------------------------------------------
00129Fr 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
00129Fr 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
00129Fr 2               ; ----------------------------------------------------------------------------
00129Fr 2               MOVINS:
00129Fr 2  A0 00                ldy     #$00
0012A1r 2  B1 BF                lda     (STRNG1),y
0012A3r 2  48                   pha
0012A4r 2  C8                   iny
0012A5r 2  B1 BF                lda     (STRNG1),y
0012A7r 2  AA                   tax
0012A8r 2  C8                   iny
0012A9r 2  B1 BF                lda     (STRNG1),y
0012ABr 2  A8                   tay
0012ACr 2  68                   pla
0012ADr 2               
0012ADr 2               ; ----------------------------------------------------------------------------
0012ADr 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
0012ADr 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
0012ADr 2               ; ----------------------------------------------------------------------------
0012ADr 2               MOVSTR:
0012ADr 2  86 72                stx     INDEX
0012AFr 2  84 73                sty     INDEX+1
0012B1r 2               MOVSTR1:
0012B1r 2  A8                   tay
0012B2r 2  F0 0A                beq     L3490
0012B4r 2  48                   pha
0012B5r 2               L3487:
0012B5r 2  88                   dey
0012B6r 2  B1 72                lda     (INDEX),y
0012B8r 2  91 85                sta     (FRESPC),y
0012BAr 2  98                   tya
0012BBr 2  D0 F8                bne     L3487
0012BDr 2  68                   pla
0012BEr 2               L3490:
0012BEr 2  18                   clc
0012BFr 2  65 85                adc     FRESPC
0012C1r 2  85 85                sta     FRESPC
0012C3r 2  90 02                bcc     L3499
0012C5r 2  E6 86                inc     FRESPC+1
0012C7r 2               L3499:
0012C7r 2  60                   rts
0012C8r 2               
0012C8r 2               ; ----------------------------------------------------------------------------
0012C8r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
0012C8r 2               ; ----------------------------------------------------------------------------
0012C8r 2               FRESTR:
0012C8r 2  20 rr rr             jsr     CHKSTR
0012CBr 2               
0012CBr 2               ; ----------------------------------------------------------------------------
0012CBr 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
0012CBr 2               ; A TEMPORARY STRING, RELEASE IT.
0012CBr 2               ; ----------------------------------------------------------------------------
0012CBr 2               FREFAC:
0012CBr 2  A5 B4                lda     FAC_LAST-1
0012CDr 2  A4 B5                ldy     FAC_LAST
0012CFr 2               
0012CFr 2               ; ----------------------------------------------------------------------------
0012CFr 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
0012CFr 2               ; A TEMPORARY STRING, RELEASE IT.
0012CFr 2               ; ----------------------------------------------------------------------------
0012CFr 2               FRETMP:
0012CFr 2  85 72                sta     INDEX
0012D1r 2  84 73                sty     INDEX+1
0012D3r 2  20 rr rr             jsr     FRETMS
0012D6r 2  08                   php
0012D7r 2  A0 00                ldy     #$00
0012D9r 2  B1 72                lda     (INDEX),y
0012DBr 2  48                   pha
0012DCr 2  C8                   iny
0012DDr 2  B1 72                lda     (INDEX),y
0012DFr 2  AA                   tax
0012E0r 2  C8                   iny
0012E1r 2  B1 72                lda     (INDEX),y
0012E3r 2  A8                   tay
0012E4r 2  68                   pla
0012E5r 2  28                   plp
0012E6r 2  D0 13                bne     L34CD
0012E8r 2  C4 84                cpy     FRETOP+1
0012EAr 2  D0 0F                bne     L34CD
0012ECr 2  E4 83                cpx     FRETOP
0012EEr 2  D0 0B                bne     L34CD
0012F0r 2  48                   pha
0012F1r 2  18                   clc
0012F2r 2  65 83                adc     FRETOP
0012F4r 2  85 83                sta     FRETOP
0012F6r 2  90 02                bcc     L34CC
0012F8r 2  E6 84                inc     FRETOP+1
0012FAr 2               L34CC:
0012FAr 2  68                   pla
0012FBr 2               L34CD:
0012FBr 2  86 72                stx     INDEX
0012FDr 2  84 73                sty     INDEX+1
0012FFr 2  60                   rts
001300r 2               
001300r 2               ; ----------------------------------------------------------------------------
001300r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001300r 2               ; ----------------------------------------------------------------------------
001300r 2               FRETMS:
001300r 2               .ifdef KBD
001300r 2                       cpy     #$00
001300r 2               .else
001300r 2  C4 68                cpy     LASTPT+1
001302r 2               .endif
001302r 2  D0 0C                bne     L34E2
001304r 2  C5 67                cmp     LASTPT
001306r 2  D0 08                bne     L34E2
001308r 2  85 66                sta     TEMPPT
00130Ar 2  E9 03                sbc     #$03
00130Cr 2  85 67                sta     LASTPT
00130Er 2  A0 00                ldy     #$00
001310r 2               L34E2:
001310r 2  60                   rts
001311r 2               
001311r 2               ; ----------------------------------------------------------------------------
001311r 2               ; "CHR$" FUNCTION
001311r 2               ; ----------------------------------------------------------------------------
001311r 2               CHRSTR:
001311r 2  20 rr rr             jsr     CONINT
001314r 2  8A                   txa
001315r 2  48                   pha
001316r 2  A9 01                lda     #$01
001318r 2  20 rr rr             jsr     STRSPA
00131Br 2  68                   pla
00131Cr 2  A0 00                ldy     #$00
00131Er 2  91 B2                sta     (FAC+1),y
001320r 2  68                   pla
001321r 2  68                   pla
001322r 2  4C rr rr             jmp     PUTNEW
001325r 2               
001325r 2               ; ----------------------------------------------------------------------------
001325r 2               ; "LEFT$" FUNCTION
001325r 2               ; ----------------------------------------------------------------------------
001325r 2               LEFTSTR:
001325r 2  20 rr rr             jsr     SUBSTRING_SETUP
001328r 2  D1 A0                cmp     (DSCPTR),y
00132Ar 2  98                   tya
00132Br 2               SUBSTRING1:
00132Br 2  90 04                bcc     L3503
00132Dr 2  B1 A0                lda     (DSCPTR),y
00132Fr 2  AA                   tax
001330r 2  98                   tya
001331r 2               L3503:
001331r 2  48                   pha
001332r 2               SUBSTRING2:
001332r 2  8A                   txa
001333r 2               SUBSTRING3:
001333r 2  48                   pha
001334r 2  20 rr rr             jsr     STRSPA
001337r 2  A5 A0                lda     DSCPTR
001339r 2  A4 A1                ldy     DSCPTR+1
00133Br 2  20 rr rr             jsr     FRETMP
00133Er 2  68                   pla
00133Fr 2  A8                   tay
001340r 2  68                   pla
001341r 2  18                   clc
001342r 2  65 72                adc     INDEX
001344r 2  85 72                sta     INDEX
001346r 2  90 02                bcc     L351C
001348r 2  E6 73                inc     INDEX+1
00134Ar 2               L351C:
00134Ar 2  98                   tya
00134Br 2  20 rr rr             jsr     MOVSTR1
00134Er 2  4C rr rr             jmp     PUTNEW
001351r 2               
001351r 2               ; ----------------------------------------------------------------------------
001351r 2               ; "RIGHT$" FUNCTION
001351r 2               ; ----------------------------------------------------------------------------
001351r 2               RIGHTSTR:
001351r 2  20 rr rr             jsr     SUBSTRING_SETUP
001354r 2  18                   clc
001355r 2  F1 A0                sbc     (DSCPTR),y
001357r 2  49 FF                eor     #$FF
001359r 2  4C rr rr             jmp     SUBSTRING1
00135Cr 2               
00135Cr 2               ; ----------------------------------------------------------------------------
00135Cr 2               ; "MID$" FUNCTION
00135Cr 2               ; ----------------------------------------------------------------------------
00135Cr 2               MIDSTR:
00135Cr 2  A9 FF                lda     #$FF
00135Er 2  85 B5                sta     FAC_LAST
001360r 2  20 D2 00             jsr     CHRGOT
001363r 2  C9 29                cmp     #$29
001365r 2  F0 06                beq     L353F
001367r 2  20 rr rr             jsr     CHKCOM
00136Ar 2  20 rr rr             jsr     GETBYT
00136Dr 2               L353F:
00136Dr 2  20 rr rr             jsr     SUBSTRING_SETUP
001370r 2               .ifdef CONFIG_2
001370r 2  F0 4B                beq     GOIQ
001372r 2               .endif
001372r 2  CA                   dex
001373r 2  8A                   txa
001374r 2  48                   pha
001375r 2  18                   clc
001376r 2  A2 00                ldx     #$00
001378r 2  F1 A0                sbc     (DSCPTR),y
00137Ar 2  B0 B6                bcs     SUBSTRING2
00137Cr 2  49 FF                eor     #$FF
00137Er 2  C5 B5                cmp     FAC_LAST
001380r 2  90 B1                bcc     SUBSTRING3
001382r 2  A5 B5                lda     FAC_LAST
001384r 2  B0 AD                bcs     SUBSTRING3
001386r 2               
001386r 2               ; ----------------------------------------------------------------------------
001386r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
001386r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
001386r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
001386r 2               ; ----------------------------------------------------------------------------
001386r 2               SUBSTRING_SETUP:
001386r 2  20 rr rr             jsr     CHKCLS
001389r 2  68                   pla
00138Ar 2               .ifndef CONFIG_11
00138Ar 2                       sta     JMPADRS+1
00138Ar 2                       pla
00138Ar 2                       sta     JMPADRS+2
00138Ar 2               .else
00138Ar 2  A8                   tay
00138Br 2  68                   pla
00138Cr 2  85 A5                sta     Z52
00138Er 2               .endif
00138Er 2  68                   pla
00138Fr 2  68                   pla
001390r 2  68                   pla
001391r 2  AA                   tax
001392r 2  68                   pla
001393r 2  85 A0                sta     DSCPTR
001395r 2  68                   pla
001396r 2  85 A1                sta     DSCPTR+1
001398r 2               .ifdef CONFIG_11
001398r 2  A5 A5                lda     Z52
00139Ar 2  48                   pha
00139Br 2  98                   tya
00139Cr 2  48                   pha
00139Dr 2               .endif
00139Dr 2  A0 00                ldy     #$00
00139Fr 2  8A                   txa
0013A0r 2               .ifndef CONFIG_2
0013A0r 2                       beq     GOIQ
0013A0r 2               .endif
0013A0r 2               .ifndef CONFIG_11
0013A0r 2                       inc     JMPADRS+1
0013A0r 2                       jmp     (JMPADRS+1)
0013A0r 2               .else
0013A0r 2  60                   rts
0013A1r 2               .endif
0013A1r 2               
0013A1r 2               ; ----------------------------------------------------------------------------
0013A1r 2               ; "LEN" FUNCTION
0013A1r 2               ; ----------------------------------------------------------------------------
0013A1r 2               LEN:
0013A1r 2  20 rr rr             jsr     GETSTR
0013A4r 2               SNGFLT1:
0013A4r 2  4C rr rr             jmp     SNGFLT
0013A7r 2               
0013A7r 2               ; ----------------------------------------------------------------------------
0013A7r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
0013A7r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
0013A7r 2               ; ----------------------------------------------------------------------------
0013A7r 2               GETSTR:
0013A7r 2  20 rr rr             jsr     FRESTR
0013AAr 2  A2 00                ldx     #$00
0013ACr 2  86 11                stx     VALTYP
0013AEr 2  A8                   tay
0013AFr 2  60                   rts
0013B0r 2               
0013B0r 2               ; ----------------------------------------------------------------------------
0013B0r 2               ; "ASC" FUNCTION
0013B0r 2               ; ----------------------------------------------------------------------------
0013B0r 2               ASC:
0013B0r 2  20 rr rr             jsr     GETSTR
0013B3r 2  F0 08                beq     GOIQ
0013B5r 2  A0 00                ldy     #$00
0013B7r 2  B1 72                lda     (INDEX),y
0013B9r 2  A8                   tay
0013BAr 2               .ifndef CONFIG_11A
0013BAr 2                       jmp     SNGFLT1
0013BAr 2               .else
0013BAr 2  4C rr rr             jmp     SNGFLT
0013BDr 2               .endif
0013BDr 2               ; ----------------------------------------------------------------------------
0013BDr 2               GOIQ:
0013BDr 2  4C rr rr             jmp     IQERR
0013C0r 2               
0013C0r 2               ; ----------------------------------------------------------------------------
0013C0r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
0013C0r 2               ; TO SINGLE BYTE IN X-REG
0013C0r 2               ; ----------------------------------------------------------------------------
0013C0r 2               GTBYTC:
0013C0r 2  20 CC 00             jsr     CHRGET
0013C3r 2               
0013C3r 2               ; ----------------------------------------------------------------------------
0013C3r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
0013C3r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
0013C3r 2               ; ----------------------------------------------------------------------------
0013C3r 2               GETBYT:
0013C3r 2  20 rr rr             jsr     FRMNUM
0013C6r 2               
0013C6r 2               ; ----------------------------------------------------------------------------
0013C6r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
0013C6r 2               ; ----------------------------------------------------------------------------
0013C6r 2               CONINT:
0013C6r 2  20 rr rr             jsr     MKINT
0013C9r 2  A6 B4                ldx     FAC_LAST-1
0013CBr 2  D0 F0                bne     GOIQ
0013CDr 2  A6 B5                ldx     FAC_LAST
0013CFr 2  4C D2 00             jmp     CHRGOT
0013D2r 2               
0013D2r 2               ; ----------------------------------------------------------------------------
0013D2r 2               ; "VAL" FUNCTION
0013D2r 2               ; ----------------------------------------------------------------------------
0013D2r 2               VAL:
0013D2r 2  20 rr rr             jsr     GETSTR
0013D5r 2  D0 03                bne     L35AC
0013D7r 2  4C rr rr             jmp     ZERO_FAC
0013DAr 2               L35AC:
0013DAr 2  A6 D3                ldx     TXTPTR
0013DCr 2  A4 D4                ldy     TXTPTR+1
0013DEr 2  86 C1                stx     STRNG2
0013E0r 2  84 C2                sty     STRNG2+1
0013E2r 2  A6 72                ldx     INDEX
0013E4r 2  86 D3                stx     TXTPTR
0013E6r 2  18                   clc
0013E7r 2  65 72                adc     INDEX
0013E9r 2  85 74                sta     DEST
0013EBr 2  A6 73                ldx     INDEX+1
0013EDr 2  86 D4                stx     TXTPTR+1
0013EFr 2  90 01                bcc     L35C4
0013F1r 2  E8                   inx
0013F2r 2               L35C4:
0013F2r 2  86 75                stx     DEST+1
0013F4r 2  A0 00                ldy     #$00
0013F6r 2  B1 74                lda     (DEST),y
0013F8r 2  48                   pha
0013F9r 2  A9 00                lda     #$00
0013FBr 2  91 74                sta     (DEST),y
0013FDr 2  20 D2 00             jsr     CHRGOT
001400r 2  20 rr rr             jsr     FIN
001403r 2  68                   pla
001404r 2  A0 00                ldy     #$00
001406r 2  91 74                sta     (DEST),y
001408r 2               
001408r 2               ; ----------------------------------------------------------------------------
001408r 2               ; COPY STRNG2 INTO TXTPTR
001408r 2               ; ----------------------------------------------------------------------------
001408r 2               POINT:
001408r 2  A6 C1                ldx     STRNG2
00140Ar 2  A4 C2                ldy     STRNG2+1
00140Cr 2  86 D3                stx     TXTPTR
00140Er 2  84 D4                sty     TXTPTR+1
001410r 2  60                   rts
001411r 2               
001411r 2               
001411r 1               .include "misc3.s"
001411r 2               ; KBD specific patches
001411r 2               
001411r 2               .segment "CODE"
001411r 2               
001411r 2               .ifdef KBD
001411r 2               VARTAB_MINUS_2_TO_AY:
001411r 2                       lda     VARTAB
001411r 2                       sec
001411r 2                       sbc     #$02
001411r 2                       ldy     VARTAB+1
001411r 2                       bcs     LF42C
001411r 2                       dey
001411r 2               LF42C:
001411r 2                       rts
001411r 2               
001411r 2               ; ----------------------------------------------------------------------------
001411r 2               GET_UPPER:
001411r 2                       lda     INPUTBUFFERX,x
001411r 2               LF430:
001411r 2                       cmp     #'a'
001411r 2                       bcc     LF43A
001411r 2                       cmp     #'z'+1
001411r 2                       bcs     LF43A
001411r 2               LF438:
001411r 2                       sbc     #$1F
001411r 2               LF43A:
001411r 2                       rts
001411r 2               
001411r 2               ; ----------------------------------------------------------------------------
001411r 2               GETLN:
001411r 2                       ldx     #$5D
001411r 2               LF43D:
001411r 2                       txa
001411r 2                       and     #$7F
001411r 2                       cmp     $0340
001411r 2                       beq     LF44D
001411r 2                       sta     $0340
001411r 2                       lda     #$03
001411r 2                       jsr     LDE48
001411r 2               LF44D:
001411r 2                       jsr     LDE7F
001411r 2                       bne     RTS4
001411r 2                       cpx     #$80
001411r 2                       bcc     LF44D
001411r 2               RTS4:
001411r 2                       rts
001411r 2               
001411r 2               ; ----------------------------------------------------------------------------
001411r 2               LF457:
001411r 2                       lda     TXTTAB
001411r 2                       ldx     TXTTAB+1
001411r 2               LF45B:
001411r 2                       sta     JMPADRS+1
001411r 2                       stx     JMPADRS+2
001411r 2                       ldy     #$01
001411r 2                       lda     (JMPADRS+1),y
001411r 2                       beq     LF438
001411r 2                       iny
001411r 2                       iny
001411r 2                       lda     (JMPADRS+1),y
001411r 2                       dey
001411r 2                       cmp     LINNUM+1
001411r 2                       bne     LF472
001411r 2                       lda     (JMPADRS+1),y
001411r 2                       cmp     LINNUM
001411r 2               LF472:
001411r 2                       bcs     LF43A
001411r 2                       dey
001411r 2                       lda     (JMPADRS+1),y
001411r 2                       tax
001411r 2                       dey
001411r 2                       lda     (JMPADRS+1),y
001411r 2                       bcc     LF45B
001411r 2               LF47D:
001411r 2                       jmp     (JMPADRS+1)
001411r 2               .endif
001411r 2               
001411r 1               .include "poke.s"
001411r 2               .segment "CODE"
001411r 2               
001411r 2               .ifndef CONFIG_NO_POKE
001411r 2               ; ----------------------------------------------------------------------------
001411r 2               ; EVALUATE "EXP1,EXP2"
001411r 2               ;
001411r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
001411r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
001411r 2               ; ----------------------------------------------------------------------------
001411r 2               GTNUM:
001411r 2  20 rr rr             jsr     FRMNUM
001414r 2  20 rr rr             jsr     GETADR
001417r 2               
001417r 2               ; ----------------------------------------------------------------------------
001417r 2               ; EVALUATE ",EXPRESSION"
001417r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001417r 2               ; ----------------------------------------------------------------------------
001417r 2               COMBYTE:
001417r 2  20 rr rr             jsr     CHKCOM
00141Ar 2  4C rr rr             jmp     GETBYT
00141Dr 2               
00141Dr 2               ; ----------------------------------------------------------------------------
00141Dr 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00141Dr 2               ; ----------------------------------------------------------------------------
00141Dr 2               GETADR:
00141Dr 2  A5 B6                lda     FACSIGN
00141Fr 2                 .ifdef APPLE
00141Fr 2                       nop ; PATCH
00141Fr 2                       nop
00141Fr 2                 .else
00141Fr 2  30 9C                bmi     GOIQ
001421r 2                 .endif
001421r 2  A5 B1                lda     FAC
001423r 2  C9 91                cmp     #$91
001425r 2  B0 96                bcs     GOIQ
001427r 2  20 rr rr             jsr     QINT
00142Ar 2  A5 B4                lda     FAC_LAST-1
00142Cr 2  A4 B5                ldy     FAC_LAST
00142Er 2  84 1C                sty     LINNUM
001430r 2  85 1D                sta     LINNUM+1
001432r 2  60                   rts
001433r 2               
001433r 2               ; ----------------------------------------------------------------------------
001433r 2               ; "PEEK" FUNCTION
001433r 2               ; ----------------------------------------------------------------------------
001433r 2               PEEK:
001433r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001433r 2  A5 1D                lda     LINNUM+1
001435r 2  48                   pha
001436r 2  A5 1C                lda     LINNUM
001438r 2  48                   pha
001439r 2               .endif
001439r 2  20 rr rr             jsr     GETADR
00143Cr 2  A0 00                ldy     #$00
00143Er 2               .ifdef CBM1
00143Er 2               ; disallow PEEK between $C000 and $DFFF
00143Er 2                       cmp     #$C0
00143Er 2                       bcc     LD6F3
00143Er 2                       cmp     #$E1
00143Er 2                       bcc     LD6F6
00143Er 2               LD6F3:
00143Er 2               .endif
00143Er 2               .ifdef CBM2
00143Er 2               		nop ; patch that disables the compares above
00143Er 2               		nop
00143Er 2               		nop
00143Er 2               		nop
00143Er 2               		nop
00143Er 2               		nop
00143Er 2               		nop
00143Er 2               		nop
00143Er 2               .endif
00143Er 2  B1 1C                lda     (LINNUM),y
001440r 2  A8                   tay
001441r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001441r 2  68                   pla
001442r 2  85 1C                sta     LINNUM
001444r 2  68                   pla
001445r 2  85 1D                sta     LINNUM+1
001447r 2               .endif
001447r 2               LD6F6:
001447r 2  4C rr rr             jmp     SNGFLT
00144Ar 2               
00144Ar 2               ; ----------------------------------------------------------------------------
00144Ar 2               ; "POKE" STATEMENT
00144Ar 2               ; ----------------------------------------------------------------------------
00144Ar 2               POKE:
00144Ar 2  20 rr rr             jsr     GTNUM
00144Dr 2  8A                   txa
00144Er 2  A0 00                ldy     #$00
001450r 2  91 1C                sta     (LINNUM),y
001452r 2  60                   rts
001453r 2               
001453r 2               ; ----------------------------------------------------------------------------
001453r 2               ; "WAIT" STATEMENT
001453r 2               ; ----------------------------------------------------------------------------
001453r 2               WAIT:
001453r 2  20 rr rr             jsr     GTNUM
001456r 2  86 99                stx     FORPNT
001458r 2  A2 00                ldx     #$00
00145Ar 2  20 D2 00             jsr     CHRGOT
00145Dr 2               .ifdef CONFIG_EASTER_EGG
00145Dr 2                       beq     EASTER_EGG
00145Dr 2               .else
00145Dr 2  F0 03                beq     L3628
00145Fr 2               .endif
00145Fr 2  20 rr rr             jsr     COMBYTE
001462r 2               L3628:
001462r 2  86 9A                stx     FORPNT+1
001464r 2  A0 00                ldy     #$00
001466r 2               L362C:
001466r 2  B1 1C                lda     (LINNUM),y
001468r 2  45 9A                eor     FORPNT+1
00146Ar 2  25 99                and     FORPNT
00146Cr 2  F0 F8                beq     L362C
00146Er 2               RTS3:
00146Er 2  60                   rts
00146Fr 2               .endif
00146Fr 2               
00146Fr 1               .include "float.s"
00146Fr 2               .segment "CODE"
00146Fr 2               
00146Fr 2               TEMP1X = TEMP1+(5-BYTES_FP)
00146Fr 2               
00146Fr 2               ; ----------------------------------------------------------------------------
00146Fr 2               ; ADD 0.5 TO FAC
00146Fr 2               ; ----------------------------------------------------------------------------
00146Fr 2               FADDH:
00146Fr 2  A9 rr                lda     #<CON_HALF
001471r 2  A0 rr                ldy     #>CON_HALF
001473r 2  4C rr rr             jmp     FADD
001476r 2               
001476r 2               ; ----------------------------------------------------------------------------
001476r 2               ; FAC = (Y,A) - FAC
001476r 2               ; ----------------------------------------------------------------------------
001476r 2               FSUB:
001476r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001479r 2               
001479r 2               ; ----------------------------------------------------------------------------
001479r 2               ; FAC = ARG - FAC
001479r 2               ; ----------------------------------------------------------------------------
001479r 2               FSUBT:
001479r 2  A5 B6                lda     FACSIGN
00147Br 2  49 FF                eor     #$FF
00147Dr 2  85 B6                sta     FACSIGN
00147Fr 2  45 BE                eor     ARGSIGN
001481r 2  85 BF                sta     SGNCPR
001483r 2  A5 B1                lda     FAC
001485r 2  4C rr rr             jmp     FADDT
001488r 2               
001488r 2               ; ----------------------------------------------------------------------------
001488r 2               ; Commodore BASIC V2 Easter Egg
001488r 2               ; ----------------------------------------------------------------------------
001488r 2               .ifdef CONFIG_EASTER_EGG
001488r 2               EASTER_EGG:
001488r 2                       lda     LINNUM
001488r 2                       cmp     #<6502
001488r 2                       bne     L3628
001488r 2                       lda     LINNUM+1
001488r 2                       sbc     #>6502
001488r 2                       bne     L3628
001488r 2                       sta     LINNUM
001488r 2                       tay
001488r 2                       lda     #$80
001488r 2                       sta     LINNUM+1
001488r 2               LD758:
001488r 2                       ldx     #$0A
001488r 2               LD75A:
001488r 2                       lda     MICROSOFT-1,x
001488r 2                       and     #$3F
001488r 2                       sta     (LINNUM),y
001488r 2                       iny
001488r 2                       bne     LD766
001488r 2                       inc     LINNUM+1
001488r 2               LD766:
001488r 2                       dex
001488r 2                       bne     LD75A
001488r 2                       dec     FORPNT
001488r 2                       bne     LD758
001488r 2                       rts
001488r 2               .endif
001488r 2               
001488r 2               ; ----------------------------------------------------------------------------
001488r 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
001488r 2               ; ----------------------------------------------------------------------------
001488r 2               FADD1:
001488r 2  20 rr rr             jsr     SHIFT_RIGHT
00148Br 2  90 3C                bcc     FADD3
00148Dr 2               
00148Dr 2               ; ----------------------------------------------------------------------------
00148Dr 2               ; FAC = (Y,A) + FAC
00148Dr 2               ; ----------------------------------------------------------------------------
00148Dr 2               FADD:
00148Dr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001490r 2               
001490r 2               ; ----------------------------------------------------------------------------
001490r 2               ; FAC = ARG + FAC
001490r 2               ; ----------------------------------------------------------------------------
001490r 2               FADDT:
001490r 2  D0 03                bne     L365B
001492r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
001495r 2               L365B:
001495r 2  A6 C0                ldx     FACEXTENSION
001497r 2  86 A6                stx     ARGEXTENSION
001499r 2  A2 B9                ldx     #ARG
00149Br 2  A5 B9                lda     ARG
00149Dr 2               FADD2:
00149Dr 2  A8                   tay
00149Er 2               .ifdef KBD
00149Er 2                       beq     RTS4
00149Er 2               .else
00149Er 2  F0 CE                beq     RTS3
0014A0r 2               .endif
0014A0r 2  38                   sec
0014A1r 2  E5 B1                sbc     FAC
0014A3r 2  F0 24                beq     FADD3
0014A5r 2  90 12                bcc     L367F
0014A7r 2  84 B1                sty     FAC
0014A9r 2  A4 BE                ldy     ARGSIGN
0014ABr 2  84 B6                sty     FACSIGN
0014ADr 2  49 FF                eor     #$FF
0014AFr 2  69 00                adc     #$00
0014B1r 2  A0 00                ldy     #$00
0014B3r 2  84 A6                sty     ARGEXTENSION
0014B5r 2  A2 B1                ldx     #FAC
0014B7r 2  D0 04                bne     L3683
0014B9r 2               L367F:
0014B9r 2  A0 00                ldy     #$00
0014BBr 2  84 C0                sty     FACEXTENSION
0014BDr 2               L3683:
0014BDr 2  C9 F9                cmp     #$F9
0014BFr 2  30 C7                bmi     FADD1
0014C1r 2  A8                   tay
0014C2r 2  A5 C0                lda     FACEXTENSION
0014C4r 2  56 01                lsr     1,x
0014C6r 2  20 rr rr             jsr     SHIFT_RIGHT4
0014C9r 2               FADD3:
0014C9r 2  24 BF                bit     SGNCPR
0014CBr 2  10 57                bpl     FADD4
0014CDr 2  A0 B1                ldy     #FAC
0014CFr 2  E0 B9                cpx     #ARG
0014D1r 2  F0 02                beq     L369B
0014D3r 2  A0 B9                ldy     #ARG
0014D5r 2               L369B:
0014D5r 2  38                   sec
0014D6r 2  49 FF                eor     #$FF
0014D8r 2  65 A6                adc     ARGEXTENSION
0014DAr 2  85 C0                sta     FACEXTENSION
0014DCr 2               .ifndef CONFIG_SMALL
0014DCr 2  B9 04 00             lda     4,y
0014DFr 2  F5 04                sbc     4,x
0014E1r 2  85 B5                sta     FAC+4
0014E3r 2               .endif
0014E3r 2  B9 03 00             lda     3,y
0014E6r 2  F5 03                sbc     3,x
0014E8r 2  85 B4                sta     FAC+3
0014EAr 2  B9 02 00             lda     2,y
0014EDr 2  F5 02                sbc     2,x
0014EFr 2  85 B3                sta     FAC+2
0014F1r 2  B9 01 00             lda     1,y
0014F4r 2  F5 01                sbc     1,x
0014F6r 2  85 B2                sta     FAC+1
0014F8r 2               
0014F8r 2               ; ----------------------------------------------------------------------------
0014F8r 2               ; NORMALIZE VALUE IN FAC
0014F8r 2               ; ----------------------------------------------------------------------------
0014F8r 2               NORMALIZE_FAC1:
0014F8r 2  B0 03                bcs     NORMALIZE_FAC2
0014FAr 2  20 rr rr             jsr     COMPLEMENT_FAC
0014FDr 2               NORMALIZE_FAC2:
0014FDr 2  A0 00                ldy     #$00
0014FFr 2  98                   tya
001500r 2  18                   clc
001501r 2               L36C7:
001501r 2  A6 B2                ldx     FAC+1
001503r 2  D0 4A                bne     NORMALIZE_FAC4
001505r 2  A6 B3                ldx     FAC+2
001507r 2  86 B2                stx     FAC+1
001509r 2  A6 B4                ldx     FAC+3
00150Br 2  86 B3                stx     FAC+2
00150Dr 2               .ifdef CONFIG_SMALL
00150Dr 2                       ldx     FACEXTENSION
00150Dr 2                       stx     FAC+3
00150Dr 2               .else
00150Dr 2  A6 B5                ldx     FAC+4
00150Fr 2  86 B4                stx     FAC+3
001511r 2  A6 C0                ldx     FACEXTENSION
001513r 2  86 B5                stx     FAC+4
001515r 2               .endif
001515r 2  84 C0                sty     FACEXTENSION
001517r 2  69 08                adc     #$08
001519r 2               .ifdef CONFIG_2B
001519r 2               ; bugfix?
001519r 2               ; fix does not exist on AppleSoft 2
001519r 2                       cmp     #(MANTISSA_BYTES+1)*8
001519r 2               .else
001519r 2  C9 20                cmp     #MANTISSA_BYTES*8
00151Br 2               .endif
00151Br 2  D0 E4                bne     L36C7
00151Dr 2               
00151Dr 2               ; ----------------------------------------------------------------------------
00151Dr 2               ; SET FAC = 0
00151Dr 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00151Dr 2               ; ----------------------------------------------------------------------------
00151Dr 2               ZERO_FAC:
00151Dr 2  A9 00                lda     #$00
00151Fr 2               STA_IN_FAC_SIGN_AND_EXP:
00151Fr 2  85 B1                sta     FAC
001521r 2               STA_IN_FAC_SIGN:
001521r 2  85 B6                sta     FACSIGN
001523r 2  60                   rts
001524r 2               
001524r 2               ; ----------------------------------------------------------------------------
001524r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
001524r 2               ; ----------------------------------------------------------------------------
001524r 2               FADD4:
001524r 2  65 A6                adc     ARGEXTENSION
001526r 2  85 C0                sta     FACEXTENSION
001528r 2               .ifndef CONFIG_SMALL
001528r 2  A5 B5                lda     FAC+4
00152Ar 2  65 BD                adc     ARG+4
00152Cr 2  85 B5                sta     FAC+4
00152Er 2               .endif
00152Er 2  A5 B4                lda     FAC+3
001530r 2  65 BC                adc     ARG+3
001532r 2  85 B4                sta     FAC+3
001534r 2  A5 B3                lda     FAC+2
001536r 2  65 BB                adc     ARG+2
001538r 2  85 B3                sta     FAC+2
00153Ar 2  A5 B2                lda     FAC+1
00153Cr 2  65 BA                adc     ARG+1
00153Er 2  85 B2                sta     FAC+1
001540r 2  4C rr rr             jmp     NORMALIZE_FAC5
001543r 2               
001543r 2               ; ----------------------------------------------------------------------------
001543r 2               ; FINISH NORMALIZING FAC
001543r 2               ; ----------------------------------------------------------------------------
001543r 2               NORMALIZE_FAC3:
001543r 2  69 01                adc     #$01
001545r 2  06 C0                asl     FACEXTENSION
001547r 2               .ifndef CONFIG_SMALL
001547r 2  26 B5                rol     FAC+4
001549r 2               .endif
001549r 2  26 B4                rol     FAC+3
00154Br 2  26 B3                rol     FAC+2
00154Dr 2  26 B2                rol     FAC+1
00154Fr 2               NORMALIZE_FAC4:
00154Fr 2  10 F2                bpl     NORMALIZE_FAC3
001551r 2  38                   sec
001552r 2  E5 B1                sbc     FAC
001554r 2  B0 C7                bcs     ZERO_FAC
001556r 2  49 FF                eor     #$FF
001558r 2  69 01                adc     #$01
00155Ar 2  85 B1                sta     FAC
00155Cr 2               NORMALIZE_FAC5:
00155Cr 2  90 0E                bcc     L3764
00155Er 2               NORMALIZE_FAC6:
00155Er 2  E6 B1                inc     FAC
001560r 2  F0 42                beq     OVERFLOW
001562r 2               .ifndef CONFIG_ROR_WORKAROUND
001562r 2  66 B2                ror     FAC+1
001564r 2  66 B3                ror     FAC+2
001566r 2  66 B4                ror     FAC+3
001568r 2                 .ifndef CONFIG_SMALL
001568r 2  66 B5                ror     FAC+4
00156Ar 2                 .endif
00156Ar 2  66 C0                ror     FACEXTENSION
00156Cr 2               .else
00156Cr 2                       lda     #$00
00156Cr 2                       bcc     L372E
00156Cr 2                       lda     #$80
00156Cr 2               L372E:
00156Cr 2                       lsr     FAC+1
00156Cr 2                       ora     FAC+1
00156Cr 2                       sta     FAC+1
00156Cr 2                       lda     #$00
00156Cr 2                       bcc     L373A
00156Cr 2                       lda     #$80
00156Cr 2               L373A:
00156Cr 2                       lsr     FAC+2
00156Cr 2                       ora     FAC+2
00156Cr 2                       sta     FAC+2
00156Cr 2                       lda     #$00
00156Cr 2                       bcc     L3746
00156Cr 2                       lda     #$80
00156Cr 2               L3746:
00156Cr 2                       lsr     FAC+3
00156Cr 2                       ora     FAC+3
00156Cr 2                       sta     FAC+3
00156Cr 2                       lda     #$00
00156Cr 2                       bcc     L3752
00156Cr 2                       lda     #$80
00156Cr 2               L3752:
00156Cr 2                       lsr     FAC+4
00156Cr 2                       ora     FAC+4
00156Cr 2                       sta     FAC+4
00156Cr 2                       lda     #$00
00156Cr 2                       bcc     L375E
00156Cr 2                       lda     #$80
00156Cr 2               L375E:
00156Cr 2                       lsr     FACEXTENSION
00156Cr 2                       ora     FACEXTENSION
00156Cr 2                       sta     FACEXTENSION
00156Cr 2               .endif
00156Cr 2               L3764:
00156Cr 2  60                   rts
00156Dr 2               
00156Dr 2               ; ----------------------------------------------------------------------------
00156Dr 2               ; 2'S COMPLEMENT OF FAC
00156Dr 2               ; ----------------------------------------------------------------------------
00156Dr 2               COMPLEMENT_FAC:
00156Dr 2  A5 B6                lda     FACSIGN
00156Fr 2  49 FF                eor     #$FF
001571r 2  85 B6                sta     FACSIGN
001573r 2               
001573r 2               ; ----------------------------------------------------------------------------
001573r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
001573r 2               ; ----------------------------------------------------------------------------
001573r 2               COMPLEMENT_FAC_MANTISSA:
001573r 2  A5 B2                lda     FAC+1
001575r 2  49 FF                eor     #$FF
001577r 2  85 B2                sta     FAC+1
001579r 2  A5 B3                lda     FAC+2
00157Br 2  49 FF                eor     #$FF
00157Dr 2  85 B3                sta     FAC+2
00157Fr 2  A5 B4                lda     FAC+3
001581r 2  49 FF                eor     #$FF
001583r 2  85 B4                sta     FAC+3
001585r 2               .ifndef CONFIG_SMALL
001585r 2  A5 B5                lda     FAC+4
001587r 2  49 FF                eor     #$FF
001589r 2  85 B5                sta     FAC+4
00158Br 2               .endif
00158Br 2  A5 C0                lda     FACEXTENSION
00158Dr 2  49 FF                eor     #$FF
00158Fr 2  85 C0                sta     FACEXTENSION
001591r 2  E6 C0                inc     FACEXTENSION
001593r 2  D0 0E                bne     RTS12
001595r 2               
001595r 2               ; ----------------------------------------------------------------------------
001595r 2               ; INCREMENT FAC MANTISSA
001595r 2               ; ----------------------------------------------------------------------------
001595r 2               INCREMENT_FAC_MANTISSA:
001595r 2               .ifndef CONFIG_SMALL
001595r 2  E6 B5                inc     FAC+4
001597r 2  D0 0A                bne     RTS12
001599r 2               .endif
001599r 2  E6 B4                inc     FAC+3
00159Br 2  D0 06                bne     RTS12
00159Dr 2  E6 B3                inc     FAC+2
00159Fr 2  D0 02                bne     RTS12
0015A1r 2  E6 B2                inc     FAC+1
0015A3r 2               RTS12:
0015A3r 2  60                   rts
0015A4r 2               OVERFLOW:
0015A4r 2  A2 0A                ldx     #ERR_OVERFLOW
0015A6r 2  4C rr rr             jmp     ERROR
0015A9r 2               
0015A9r 2               ; ----------------------------------------------------------------------------
0015A9r 2               ; SHIFT 1,X THRU 5,X RIGHT
0015A9r 2               ; (A) = NEGATIVE OF SHIFT COUNT
0015A9r 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
0015A9r 2               ;
0015A9r 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
0015A9r 2               ; ----------------------------------------------------------------------------
0015A9r 2               SHIFT_RIGHT1:
0015A9r 2  A2 75                ldx     #RESULT-1
0015ABr 2               SHIFT_RIGHT2:
0015ABr 2               .ifdef CONFIG_SMALL
0015ABr 2                       ldy     3,x
0015ABr 2               .else
0015ABr 2  B4 04                ldy     4,x
0015ADr 2               .endif
0015ADr 2  84 C0                sty     FACEXTENSION
0015AFr 2               .ifndef CONFIG_SMALL
0015AFr 2  B4 03                ldy     3,x
0015B1r 2  94 04                sty     4,x
0015B3r 2               .endif
0015B3r 2  B4 02                ldy     2,x
0015B5r 2  94 03                sty     3,x
0015B7r 2  B4 01                ldy     1,x
0015B9r 2  94 02                sty     2,x
0015BBr 2  A4 B8                ldy     SHIFTSIGNEXT
0015BDr 2  94 01                sty     1,x
0015BFr 2               
0015BFr 2               ; ----------------------------------------------------------------------------
0015BFr 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0015BFr 2               ; ----------------------------------------------------------------------------
0015BFr 2               SHIFT_RIGHT:
0015BFr 2  69 08                adc     #$08
0015C1r 2  30 E8                bmi     SHIFT_RIGHT2
0015C3r 2  F0 E6                beq     SHIFT_RIGHT2
0015C5r 2  E9 08                sbc     #$08
0015C7r 2  A8                   tay
0015C8r 2  A5 C0                lda     FACEXTENSION
0015CAr 2  B0 14                bcs     SHIFT_RIGHT5
0015CCr 2               .ifndef CONFIG_ROR_WORKAROUND
0015CCr 2               LB588:
0015CCr 2  16 01                asl     1,x
0015CEr 2  90 02                bcc     LB58E
0015D0r 2  F6 01                inc     1,x
0015D2r 2               LB58E:
0015D2r 2  76 01                ror     1,x
0015D4r 2  76 01                ror     1,x
0015D6r 2               
0015D6r 2               ; ----------------------------------------------------------------------------
0015D6r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
0015D6r 2               ; ----------------------------------------------------------------------------
0015D6r 2               SHIFT_RIGHT4:
0015D6r 2  76 02                ror     2,x
0015D8r 2  76 03                ror     3,x
0015DAr 2                 .ifndef CONFIG_SMALL
0015DAr 2  76 04                ror     4,x
0015DCr 2                 .endif
0015DCr 2  6A                   ror     a
0015DDr 2  C8                   iny
0015DEr 2  D0 EC                bne     LB588
0015E0r 2               .else
0015E0r 2               L37C4:
0015E0r 2                       pha
0015E0r 2                       lda     1,x
0015E0r 2                       and     #$80
0015E0r 2                       lsr     1,x
0015E0r 2                       ora     1,x
0015E0r 2                       sta     1,x
0015E0r 2                       .byte   $24
0015E0r 2               SHIFT_RIGHT4:
0015E0r 2                       pha
0015E0r 2                       lda     #$00
0015E0r 2                       bcc     L37D7
0015E0r 2                       lda     #$80
0015E0r 2               L37D7:
0015E0r 2                       lsr     2,x
0015E0r 2                       ora     2,x
0015E0r 2                       sta     2,x
0015E0r 2                       lda     #$00
0015E0r 2                       bcc     L37E3
0015E0r 2                       lda     #$80
0015E0r 2               L37E3:
0015E0r 2                       lsr     3,x
0015E0r 2                       ora     3,x
0015E0r 2                       sta     3,x
0015E0r 2                       lda     #$00
0015E0r 2                       bcc     L37EF
0015E0r 2                       lda     #$80
0015E0r 2               L37EF:
0015E0r 2                       lsr     4,x
0015E0r 2                       ora     4,x
0015E0r 2                       sta     4,x
0015E0r 2                       pla
0015E0r 2                       php
0015E0r 2                       lsr     a
0015E0r 2                       plp
0015E0r 2                       bcc     L37FD
0015E0r 2                       ora     #$80
0015E0r 2               L37FD:
0015E0r 2                       iny
0015E0r 2                       bne     L37C4
0015E0r 2               .endif
0015E0r 2               SHIFT_RIGHT5:
0015E0r 2  18                   clc
0015E1r 2  60                   rts
0015E2r 2               
0015E2r 2               ; ----------------------------------------------------------------------------
0015E2r 2               .ifdef CONFIG_SMALL
0015E2r 2               CON_ONE:
0015E2r 2                       .byte   $81,$00,$00,$00
0015E2r 2               POLY_LOG:
0015E2r 2               		.byte	$02
0015E2r 2               		.byte   $80,$19,$56,$62
0015E2r 2               		.byte   $80,$76,$22,$F3
0015E2r 2               		.byte   $82,$38,$AA,$40
0015E2r 2               CON_SQR_HALF:
0015E2r 2               		.byte   $80,$35,$04,$F3
0015E2r 2               CON_SQR_TWO:
0015E2r 2               		.byte   $81,$35,$04,$F3
0015E2r 2               CON_NEG_HALF:
0015E2r 2               		.byte   $80,$80,$00,$00
0015E2r 2               CON_LOG_TWO:
0015E2r 2               		.byte   $80,$31,$72,$18
0015E2r 2               .else
0015E2r 2               CON_ONE:
0015E2r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
0015E6r 2  00           
0015E7r 2               POLY_LOG:
0015E7r 2  03                   .byte   $03
0015E8r 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
0015ECr 2  79           
0015EDr 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
0015F1r 2  64           
0015F2r 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
0015F6r 2  16           
0015F7r 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
0015FBr 2  20           
0015FCr 2               CON_SQR_HALF:
0015FCr 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
001600r 2  34           
001601r 2               CON_SQR_TWO:
001601r 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
001605r 2  34           
001606r 2               CON_NEG_HALF:
001606r 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
00160Ar 2  00           
00160Br 2               CON_LOG_TWO:
00160Br 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
00160Fr 2  F8           
001610r 2               .endif
001610r 2               
001610r 2               ; ----------------------------------------------------------------------------
001610r 2               ; "LOG" FUNCTION
001610r 2               ; ----------------------------------------------------------------------------
001610r 2               LOG:
001610r 2  20 rr rr             jsr     SIGN
001613r 2  F0 02                beq     GIQ
001615r 2  10 03                bpl     LOG2
001617r 2               GIQ:
001617r 2  4C rr rr             jmp     IQERR
00161Ar 2               LOG2:
00161Ar 2  A5 B1                lda     FAC
00161Cr 2  E9 7F                sbc     #$7F
00161Er 2  48                   pha
00161Fr 2  A9 80                lda     #$80
001621r 2  85 B1                sta     FAC
001623r 2  A9 rr                lda     #<CON_SQR_HALF
001625r 2  A0 rr                ldy     #>CON_SQR_HALF
001627r 2  20 rr rr             jsr     FADD
00162Ar 2  A9 rr                lda     #<CON_SQR_TWO
00162Cr 2  A0 rr                ldy     #>CON_SQR_TWO
00162Er 2  20 rr rr             jsr     FDIV
001631r 2  A9 rr                lda     #<CON_ONE
001633r 2  A0 rr                ldy     #>CON_ONE
001635r 2  20 rr rr             jsr     FSUB
001638r 2  A9 rr                lda     #<POLY_LOG
00163Ar 2  A0 rr                ldy     #>POLY_LOG
00163Cr 2  20 rr rr             jsr     POLYNOMIAL_ODD
00163Fr 2  A9 rr                lda     #<CON_NEG_HALF
001641r 2  A0 rr                ldy     #>CON_NEG_HALF
001643r 2  20 rr rr             jsr     FADD
001646r 2  68                   pla
001647r 2  20 rr rr             jsr     ADDACC
00164Ar 2  A9 rr                lda     #<CON_LOG_TWO
00164Cr 2  A0 rr                ldy     #>CON_LOG_TWO
00164Er 2               
00164Er 2               ; ----------------------------------------------------------------------------
00164Er 2               ; FAC = (Y,A) * FAC
00164Er 2               ; ----------------------------------------------------------------------------
00164Er 2               FMULT:
00164Er 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001651r 2               
001651r 2               ; ----------------------------------------------------------------------------
001651r 2               ; FAC = ARG * FAC
001651r 2               ; ----------------------------------------------------------------------------
001651r 2               FMULTT:
001651r 2               .ifndef CONFIG_11
001651r 2                       beq     L3903
001651r 2               .else
001651r 2  D0 03 4C rr          jeq     L3903
001655r 2  rr           
001656r 2               .endif
001656r 2  20 rr rr             jsr     ADD_EXPONENTS
001659r 2  A9 00                lda     #$00
00165Br 2  85 76                sta     RESULT
00165Dr 2  85 77                sta     RESULT+1
00165Fr 2  85 78                sta     RESULT+2
001661r 2               .ifndef CONFIG_SMALL
001661r 2  85 79                sta     RESULT+3
001663r 2               .endif
001663r 2  A5 C0                lda     FACEXTENSION
001665r 2  20 rr rr             jsr     MULTIPLY1
001668r 2               .ifndef CONFIG_SMALL
001668r 2  A5 B5                lda     FAC+4
00166Ar 2  20 rr rr             jsr     MULTIPLY1
00166Dr 2               .endif
00166Dr 2  A5 B4                lda     FAC+3
00166Fr 2  20 rr rr             jsr     MULTIPLY1
001672r 2  A5 B3                lda     FAC+2
001674r 2  20 rr rr             jsr     MULTIPLY1
001677r 2  A5 B2                lda     FAC+1
001679r 2  20 rr rr             jsr     MULTIPLY2
00167Cr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
00167Fr 2               
00167Fr 2               ; ----------------------------------------------------------------------------
00167Fr 2               ; MULTIPLY ARG BY (A) INTO RESULT
00167Fr 2               ; ----------------------------------------------------------------------------
00167Fr 2               MULTIPLY1:
00167Fr 2  D0 03                bne     MULTIPLY2
001681r 2  4C rr rr             jmp     SHIFT_RIGHT1
001684r 2               MULTIPLY2:
001684r 2  4A                   lsr     a
001685r 2  09 80                ora     #$80
001687r 2               L38A7:
001687r 2  A8                   tay
001688r 2  90 19                bcc     L38C3
00168Ar 2  18                   clc
00168Br 2               .ifndef CONFIG_SMALL
00168Br 2  A5 79                lda     RESULT+3
00168Dr 2  65 BD                adc     ARG+4
00168Fr 2  85 79                sta     RESULT+3
001691r 2               .endif
001691r 2  A5 78                lda     RESULT+2
001693r 2  65 BC                adc     ARG+3
001695r 2  85 78                sta     RESULT+2
001697r 2  A5 77                lda     RESULT+1
001699r 2  65 BB                adc     ARG+2
00169Br 2  85 77                sta     RESULT+1
00169Dr 2  A5 76                lda     RESULT
00169Fr 2  65 BA                adc     ARG+1
0016A1r 2  85 76                sta     RESULT
0016A3r 2               L38C3:
0016A3r 2               .ifndef CONFIG_ROR_WORKAROUND
0016A3r 2  66 76                ror     RESULT
0016A5r 2  66 77                ror     RESULT+1
0016A7r 2               .ifdef APPLE_BAD_BYTE
0016A7r 2               ; this seems to be a bad byte in the dump
0016A7r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
0016A7r 2               .else
0016A7r 2  66 78                ror     RESULT+2
0016A9r 2               .endif
0016A9r 2               .ifndef CONFIG_SMALL
0016A9r 2  66 79                ror     RESULT+3
0016ABr 2               .endif
0016ABr 2  66 C0                ror     FACEXTENSION
0016ADr 2               .else
0016ADr 2                       lda     #$00
0016ADr 2                       bcc     L38C9
0016ADr 2                       lda     #$80
0016ADr 2               L38C9:
0016ADr 2                       lsr     RESULT
0016ADr 2                       ora     RESULT
0016ADr 2                       sta     RESULT
0016ADr 2                       lda     #$00
0016ADr 2                       bcc     L38D5
0016ADr 2                       lda     #$80
0016ADr 2               L38D5:
0016ADr 2                       lsr     RESULT+1
0016ADr 2                       ora     RESULT+1
0016ADr 2                       sta     RESULT+1
0016ADr 2                       lda     #$00
0016ADr 2                       bcc     L38E1
0016ADr 2                       lda     #$80
0016ADr 2               L38E1:
0016ADr 2                       lsr     RESULT+2
0016ADr 2                       ora     RESULT+2
0016ADr 2                       sta     RESULT+2
0016ADr 2                       lda     #$00
0016ADr 2                       bcc     L38ED
0016ADr 2                       lda     #$80
0016ADr 2               L38ED:
0016ADr 2                       lsr     RESULT+3
0016ADr 2                       ora     RESULT+3
0016ADr 2                       sta     RESULT+3
0016ADr 2                       lda     #$00
0016ADr 2                       bcc     L38F9
0016ADr 2                       lda     #$80
0016ADr 2               L38F9:
0016ADr 2                       lsr     FACEXTENSION
0016ADr 2                       ora     FACEXTENSION
0016ADr 2                       sta     FACEXTENSION
0016ADr 2               .endif
0016ADr 2  98                   tya
0016AEr 2  4A                   lsr     a
0016AFr 2  D0 D6                bne     L38A7
0016B1r 2               L3903:
0016B1r 2  60                   rts
0016B2r 2               
0016B2r 2               ; ----------------------------------------------------------------------------
0016B2r 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0016B2r 2               ; ----------------------------------------------------------------------------
0016B2r 2               LOAD_ARG_FROM_YA:
0016B2r 2  85 72                sta     INDEX
0016B4r 2  84 73                sty     INDEX+1
0016B6r 2  A0 04                ldy     #BYTES_FP-1
0016B8r 2               .ifndef CONFIG_SMALL
0016B8r 2  B1 72                lda     (INDEX),y
0016BAr 2  85 BD                sta     ARG+4
0016BCr 2  88                   dey
0016BDr 2               .endif
0016BDr 2  B1 72                lda     (INDEX),y
0016BFr 2  85 BC                sta     ARG+3
0016C1r 2  88                   dey
0016C2r 2  B1 72                lda     (INDEX),y
0016C4r 2  85 BB                sta     ARG+2
0016C6r 2  88                   dey
0016C7r 2  B1 72                lda     (INDEX),y
0016C9r 2  85 BE                sta     ARGSIGN
0016CBr 2  45 B6                eor     FACSIGN
0016CDr 2  85 BF                sta     SGNCPR
0016CFr 2  A5 BE                lda     ARGSIGN
0016D1r 2  09 80                ora     #$80
0016D3r 2  85 BA                sta     ARG+1
0016D5r 2  88                   dey
0016D6r 2  B1 72                lda     (INDEX),y
0016D8r 2  85 B9                sta     ARG
0016DAr 2  A5 B1                lda     FAC
0016DCr 2  60                   rts
0016DDr 2               
0016DDr 2               ; ----------------------------------------------------------------------------
0016DDr 2               ; ADD EXPONENTS OF ARG AND FAC
0016DDr 2               ; (CALLED BY FMULT AND FDIV)
0016DDr 2               ;
0016DDr 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0016DDr 2               ; ----------------------------------------------------------------------------
0016DDr 2               ADD_EXPONENTS:
0016DDr 2  A5 B9                lda     ARG
0016DFr 2               ADD_EXPONENTS1:
0016DFr 2  F0 1F                beq     ZERO
0016E1r 2  18                   clc
0016E2r 2  65 B1                adc     FAC
0016E4r 2  90 04                bcc     L393C
0016E6r 2  30 1D                bmi     JOV
0016E8r 2  18                   clc
0016E9r 2  2C                   .byte   $2C
0016EAr 2               L393C:
0016EAr 2  10 14                bpl     ZERO
0016ECr 2  69 80                adc     #$80
0016EEr 2  85 B1                sta     FAC
0016F0r 2  D0 03                bne     L3947
0016F2r 2  4C rr rr             jmp     STA_IN_FAC_SIGN
0016F5r 2               L3947:
0016F5r 2  A5 BF                lda     SGNCPR
0016F7r 2  85 B6                sta     FACSIGN
0016F9r 2  60                   rts
0016FAr 2               
0016FAr 2               ; ----------------------------------------------------------------------------
0016FAr 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
0016FAr 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
0016FAr 2               ; CALLED FROM "EXP" FUNCTION
0016FAr 2               ; ----------------------------------------------------------------------------
0016FAr 2               OUTOFRNG:
0016FAr 2  A5 B6                lda     FACSIGN
0016FCr 2  49 FF                eor     #$FF
0016FEr 2  30 05                bmi     JOV
001700r 2               
001700r 2               ; ----------------------------------------------------------------------------
001700r 2               ; POP RETURN ADDRESS AND SET FAC=0
001700r 2               ; ----------------------------------------------------------------------------
001700r 2               ZERO:
001700r 2  68                   pla
001701r 2  68                   pla
001702r 2  4C rr rr             jmp     ZERO_FAC
001705r 2               JOV:
001705r 2  4C rr rr             jmp     OVERFLOW
001708r 2               
001708r 2               ; ----------------------------------------------------------------------------
001708r 2               ; MULTIPLY FAC BY 10
001708r 2               ; ----------------------------------------------------------------------------
001708r 2               MUL10:
001708r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00170Br 2  AA                   tax
00170Cr 2  F0 10                beq     L3970
00170Er 2  18                   clc
00170Fr 2  69 02                adc     #$02
001711r 2  B0 F2                bcs     JOV
001713r 2               LD9BF:
001713r 2  A2 00                ldx     #$00
001715r 2  86 BF                stx     SGNCPR
001717r 2  20 rr rr             jsr     FADD2
00171Ar 2  E6 B1                inc     FAC
00171Cr 2  F0 E7                beq     JOV
00171Er 2               L3970:
00171Er 2  60                   rts
00171Fr 2               
00171Fr 2               ; ----------------------------------------------------------------------------
00171Fr 2               CONTEN:
00171Fr 2               .ifdef CONFIG_SMALL
00171Fr 2                       .byte   $84,$20,$00,$00
00171Fr 2               .else
00171Fr 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
001723r 2  00           
001724r 2               .endif
001724r 2               
001724r 2               ; ----------------------------------------------------------------------------
001724r 2               ; DIVIDE FAC BY 10
001724r 2               ; ----------------------------------------------------------------------------
001724r 2               DIV10:
001724r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001727r 2  A9 rr                lda     #<CONTEN
001729r 2  A0 rr                ldy     #>CONTEN
00172Br 2  A2 00                ldx     #$00
00172Dr 2               
00172Dr 2               ; ----------------------------------------------------------------------------
00172Dr 2               ; FAC = ARG / (Y,A)
00172Dr 2               ; ----------------------------------------------------------------------------
00172Dr 2               DIV:
00172Dr 2  86 BF                stx     SGNCPR
00172Fr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001732r 2  4C rr rr             jmp     FDIVT
001735r 2               
001735r 2               ; ----------------------------------------------------------------------------
001735r 2               ; FAC = (Y,A) / FAC
001735r 2               ; ----------------------------------------------------------------------------
001735r 2               FDIV:
001735r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001738r 2               
001738r 2               ; ----------------------------------------------------------------------------
001738r 2               ; FAC = ARG / FAC
001738r 2               ; ----------------------------------------------------------------------------
001738r 2               FDIVT:
001738r 2  F0 76                beq     L3A02
00173Ar 2  20 rr rr             jsr     ROUND_FAC
00173Dr 2  A9 00                lda     #$00
00173Fr 2  38                   sec
001740r 2  E5 B1                sbc     FAC
001742r 2  85 B1                sta     FAC
001744r 2  20 rr rr             jsr     ADD_EXPONENTS
001747r 2  E6 B1                inc     FAC
001749r 2  F0 BA                beq     JOV
00174Br 2  A2 FC                ldx     #-MANTISSA_BYTES
00174Dr 2  A9 01                lda     #$01
00174Fr 2               L39A1:
00174Fr 2  A4 BA                ldy     ARG+1
001751r 2  C4 B2                cpy     FAC+1
001753r 2  D0 10                bne     L39B7
001755r 2  A4 BB                ldy     ARG+2
001757r 2  C4 B3                cpy     FAC+2
001759r 2  D0 0A                bne     L39B7
00175Br 2  A4 BC                ldy     ARG+3
00175Dr 2  C4 B4                cpy     FAC+3
00175Fr 2               .ifndef CONFIG_SMALL
00175Fr 2  D0 04                bne     L39B7
001761r 2  A4 BD                ldy     ARG+4
001763r 2  C4 B5                cpy     FAC+4
001765r 2               .endif
001765r 2               L39B7:
001765r 2  08                   php
001766r 2  2A                   rol     a
001767r 2  90 09                bcc     L39C4
001769r 2  E8                   inx
00176Ar 2  95 79                sta     RESULT_LAST-1,x
00176Cr 2  F0 32                beq     L39F2
00176Er 2  10 34                bpl     L39F6
001770r 2  A9 01                lda     #$01
001772r 2               L39C4:
001772r 2  28                   plp
001773r 2  B0 0E                bcs     L39D5
001775r 2               L39C7:
001775r 2  06 BD                asl     ARG_LAST
001777r 2               .ifndef CONFIG_SMALL
001777r 2  26 BC                rol     ARG+3
001779r 2               .endif
001779r 2  26 BB                rol     ARG+2
00177Br 2  26 BA                rol     ARG+1
00177Dr 2  B0 E6                bcs     L39B7
00177Fr 2  30 CE                bmi     L39A1
001781r 2  10 E2                bpl     L39B7
001783r 2               L39D5:
001783r 2  A8                   tay
001784r 2               .ifndef CONFIG_SMALL
001784r 2  A5 BD                lda     ARG+4
001786r 2  E5 B5                sbc     FAC+4
001788r 2  85 BD                sta     ARG+4
00178Ar 2               .endif
00178Ar 2  A5 BC                lda     ARG+3
00178Cr 2  E5 B4                sbc     FAC+3
00178Er 2  85 BC                sta     ARG+3
001790r 2  A5 BB                lda     ARG+2
001792r 2  E5 B3                sbc     FAC+2
001794r 2  85 BB                sta     ARG+2
001796r 2  A5 BA                lda     ARG+1
001798r 2  E5 B2                sbc     FAC+1
00179Ar 2  85 BA                sta     ARG+1
00179Cr 2  98                   tya
00179Dr 2  4C rr rr             jmp     L39C7
0017A0r 2               L39F2:
0017A0r 2  A9 40                lda     #$40
0017A2r 2  D0 CE                bne     L39C4
0017A4r 2               L39F6:
0017A4r 2  0A                   asl     a
0017A5r 2  0A                   asl     a
0017A6r 2  0A                   asl     a
0017A7r 2  0A                   asl     a
0017A8r 2  0A                   asl     a
0017A9r 2  0A                   asl     a
0017AAr 2  85 C0                sta     FACEXTENSION
0017ACr 2  28                   plp
0017ADr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0017B0r 2               L3A02:
0017B0r 2  A2 14                ldx     #ERR_ZERODIV
0017B2r 2  4C rr rr             jmp     ERROR
0017B5r 2               
0017B5r 2               ; ----------------------------------------------------------------------------
0017B5r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0017B5r 2               ; ----------------------------------------------------------------------------
0017B5r 2               COPY_RESULT_INTO_FAC:
0017B5r 2  A5 76                lda     RESULT
0017B7r 2  85 B2                sta     FAC+1
0017B9r 2  A5 77                lda     RESULT+1
0017BBr 2  85 B3                sta     FAC+2
0017BDr 2  A5 78                lda     RESULT+2
0017BFr 2  85 B4                sta     FAC+3
0017C1r 2               .ifndef CONFIG_SMALL
0017C1r 2  A5 79                lda     RESULT+3
0017C3r 2  85 B5                sta     FAC+4
0017C5r 2               .endif
0017C5r 2  4C rr rr             jmp     NORMALIZE_FAC2
0017C8r 2               
0017C8r 2               ; ----------------------------------------------------------------------------
0017C8r 2               ; UNPACK (Y,A) INTO FAC
0017C8r 2               ; ----------------------------------------------------------------------------
0017C8r 2               LOAD_FAC_FROM_YA:
0017C8r 2  85 72                sta     INDEX
0017CAr 2  84 73                sty     INDEX+1
0017CCr 2  A0 04                ldy     #MANTISSA_BYTES
0017CEr 2               .ifndef CONFIG_SMALL
0017CEr 2  B1 72                lda     (INDEX),y
0017D0r 2  85 B5                sta     FAC+4
0017D2r 2  88                   dey
0017D3r 2               .endif
0017D3r 2  B1 72                lda     (INDEX),y
0017D5r 2  85 B4                sta     FAC+3
0017D7r 2  88                   dey
0017D8r 2  B1 72                lda     (INDEX),y
0017DAr 2  85 B3                sta     FAC+2
0017DCr 2  88                   dey
0017DDr 2  B1 72                lda     (INDEX),y
0017DFr 2  85 B6                sta     FACSIGN
0017E1r 2  09 80                ora     #$80
0017E3r 2  85 B2                sta     FAC+1
0017E5r 2  88                   dey
0017E6r 2  B1 72                lda     (INDEX),y
0017E8r 2  85 B1                sta     FAC
0017EAr 2  84 C0                sty     FACEXTENSION
0017ECr 2  60                   rts
0017EDr 2               
0017EDr 2               ; ----------------------------------------------------------------------------
0017EDr 2               ; ROUND FAC, STORE IN TEMP2
0017EDr 2               ; ----------------------------------------------------------------------------
0017EDr 2               STORE_FAC_IN_TEMP2_ROUNDED:
0017EDr 2  A2 AC                ldx     #TEMP2
0017EFr 2  2C                   .byte   $2C
0017F0r 2               
0017F0r 2               ; ----------------------------------------------------------------------------
0017F0r 2               ; ROUND FAC, STORE IN TEMP1
0017F0r 2               ; ----------------------------------------------------------------------------
0017F0r 2               STORE_FAC_IN_TEMP1_ROUNDED:
0017F0r 2  A2 A7                ldx     #TEMP1X
0017F2r 2  A0 00                ldy     #$00
0017F4r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0017F6r 2               
0017F6r 2               ; ----------------------------------------------------------------------------
0017F6r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0017F6r 2               ; ----------------------------------------------------------------------------
0017F6r 2               SETFOR:
0017F6r 2  A6 99                ldx     FORPNT
0017F8r 2  A4 9A                ldy     FORPNT+1
0017FAr 2               
0017FAr 2               ; ----------------------------------------------------------------------------
0017FAr 2               ; ROUND FAC, AND STORE AT (Y,X)
0017FAr 2               ; ----------------------------------------------------------------------------
0017FAr 2               STORE_FAC_AT_YX_ROUNDED:
0017FAr 2  20 rr rr             jsr     ROUND_FAC
0017FDr 2  86 72                stx     INDEX
0017FFr 2  84 73                sty     INDEX+1
001801r 2  A0 04                ldy     #MANTISSA_BYTES
001803r 2               .ifndef CONFIG_SMALL
001803r 2  A5 B5                lda     FAC+4
001805r 2  91 72                sta     (INDEX),y
001807r 2  88                   dey
001808r 2               .endif
001808r 2  A5 B4                lda     FAC+3
00180Ar 2  91 72                sta     (INDEX),y
00180Cr 2  88                   dey
00180Dr 2  A5 B3                lda     FAC+2
00180Fr 2  91 72                sta     (INDEX),y
001811r 2  88                   dey
001812r 2  A5 B6                lda     FACSIGN
001814r 2  09 7F                ora     #$7F
001816r 2  25 B2                and     FAC+1
001818r 2  91 72                sta     (INDEX),y
00181Ar 2  88                   dey
00181Br 2  A5 B1                lda     FAC
00181Dr 2  91 72                sta     (INDEX),y
00181Fr 2  84 C0                sty     FACEXTENSION
001821r 2  60                   rts
001822r 2               
001822r 2               ; ----------------------------------------------------------------------------
001822r 2               ; COPY ARG INTO FAC
001822r 2               ; ----------------------------------------------------------------------------
001822r 2               COPY_ARG_TO_FAC:
001822r 2  A5 BE                lda     ARGSIGN
001824r 2               MFA:
001824r 2  85 B6                sta     FACSIGN
001826r 2  A2 05                ldx     #BYTES_FP
001828r 2               L3A7A:
001828r 2  B5 B8                lda     SHIFTSIGNEXT,x
00182Ar 2  95 B0                sta     EXPSGN,x
00182Cr 2  CA                   dex
00182Dr 2  D0 F9                bne     L3A7A
00182Fr 2  86 C0                stx     FACEXTENSION
001831r 2  60                   rts
001832r 2               
001832r 2               ; ----------------------------------------------------------------------------
001832r 2               ; ROUND FAC AND COPY TO ARG
001832r 2               ; ----------------------------------------------------------------------------
001832r 2               COPY_FAC_TO_ARG_ROUNDED:
001832r 2  20 rr rr             jsr     ROUND_FAC
001835r 2               MAF:
001835r 2  A2 06                ldx     #BYTES_FP+1
001837r 2               L3A89:
001837r 2  B5 B0                lda     EXPSGN,x
001839r 2  95 B8                sta     SHIFTSIGNEXT,x
00183Br 2  CA                   dex
00183Cr 2  D0 F9                bne     L3A89
00183Er 2  86 C0                stx     FACEXTENSION
001840r 2               RTS14:
001840r 2  60                   rts
001841r 2               
001841r 2               ; ----------------------------------------------------------------------------
001841r 2               ; ROUND FAC USING EXTENSION BYTE
001841r 2               ; ----------------------------------------------------------------------------
001841r 2               ROUND_FAC:
001841r 2  A5 B1                lda     FAC
001843r 2  F0 FB                beq     RTS14
001845r 2  06 C0                asl     FACEXTENSION
001847r 2  90 F7                bcc     RTS14
001849r 2               
001849r 2               ; ----------------------------------------------------------------------------
001849r 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
001849r 2               ; ----------------------------------------------------------------------------
001849r 2               INCREMENT_MANTISSA:
001849r 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
00184Cr 2  D0 F2                bne     RTS14
00184Er 2  4C rr rr             jmp     NORMALIZE_FAC6
001851r 2               
001851r 2               ; ----------------------------------------------------------------------------
001851r 2               ; TEST FAC FOR ZERO AND SIGN
001851r 2               ;
001851r 2               ; FAC > 0, RETURN +1
001851r 2               ; FAC = 0, RETURN  0
001851r 2               ; FAC < 0, RETURN -1
001851r 2               ; ----------------------------------------------------------------------------
001851r 2               SIGN:
001851r 2  A5 B1                lda     FAC
001853r 2  F0 09                beq     RTS15
001855r 2               L3AA7:
001855r 2  A5 B6                lda     FACSIGN
001857r 2               SIGN2:
001857r 2  2A                   rol     a
001858r 2  A9 FF                lda     #$FF
00185Ar 2  B0 02                bcs     RTS15
00185Cr 2  A9 01                lda     #$01
00185Er 2               RTS15:
00185Er 2  60                   rts
00185Fr 2               
00185Fr 2               ; ----------------------------------------------------------------------------
00185Fr 2               ; "SGN" FUNCTION
00185Fr 2               ; ----------------------------------------------------------------------------
00185Fr 2               SGN:
00185Fr 2  20 rr rr             jsr     SIGN
001862r 2               
001862r 2               ; ----------------------------------------------------------------------------
001862r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001862r 2               ; ----------------------------------------------------------------------------
001862r 2               FLOAT:
001862r 2  85 B2                sta     FAC+1
001864r 2  A9 00                lda     #$00
001866r 2  85 B3                sta     FAC+2
001868r 2  A2 88                ldx     #$88
00186Ar 2               
00186Ar 2               ; ----------------------------------------------------------------------------
00186Ar 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00186Ar 2               ; (X) = EXPONENT
00186Ar 2               ; ----------------------------------------------------------------------------
00186Ar 2               FLOAT1:
00186Ar 2  A5 B2                lda     FAC+1
00186Cr 2  49 FF                eor     #$FF
00186Er 2  2A                   rol     a
00186Fr 2               
00186Fr 2               ; ----------------------------------------------------------------------------
00186Fr 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00186Fr 2               ; (X) = EXPONENT
00186Fr 2               ; C=0 TO MAKE VALUE NEGATIVE
00186Fr 2               ; C=1 TO MAKE VALUE POSITIVE
00186Fr 2               ; ----------------------------------------------------------------------------
00186Fr 2               FLOAT2:
00186Fr 2  A9 00                lda     #$00
001871r 2               .ifndef CONFIG_SMALL
001871r 2  85 B5                sta     FAC+4
001873r 2               .endif
001873r 2  85 B4                sta     FAC+3
001875r 2               LDB21:
001875r 2  86 B1                stx     FAC
001877r 2  85 C0                sta     FACEXTENSION
001879r 2  85 B6                sta     FACSIGN
00187Br 2  4C rr rr             jmp     NORMALIZE_FAC1
00187Er 2               
00187Er 2               ; ----------------------------------------------------------------------------
00187Er 2               ; "ABS" FUNCTION
00187Er 2               ; ----------------------------------------------------------------------------
00187Er 2               ABS:
00187Er 2  46 B6                lsr     FACSIGN
001880r 2  60                   rts
001881r 2               
001881r 2               ; ----------------------------------------------------------------------------
001881r 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
001881r 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001881r 2               ; ----------------------------------------------------------------------------
001881r 2               FCOMP:
001881r 2  85 74                sta     DEST
001883r 2               
001883r 2               ; ----------------------------------------------------------------------------
001883r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001883r 2               ; "DEST" ALREADY SET UP
001883r 2               ; ----------------------------------------------------------------------------
001883r 2               FCOMP2:
001883r 2  84 75                sty     DEST+1
001885r 2  A0 00                ldy     #$00
001887r 2  B1 74                lda     (DEST),y
001889r 2  C8                   iny
00188Ar 2  AA                   tax
00188Br 2  F0 C4                beq     SIGN
00188Dr 2  B1 74                lda     (DEST),y
00188Fr 2  45 B6                eor     FACSIGN
001891r 2  30 C2                bmi     L3AA7
001893r 2  E4 B1                cpx     FAC
001895r 2  D0 21                bne     L3B0A
001897r 2  B1 74                lda     (DEST),y
001899r 2  09 80                ora     #$80
00189Br 2  C5 B2                cmp     FAC+1
00189Dr 2  D0 19                bne     L3B0A
00189Fr 2  C8                   iny
0018A0r 2  B1 74                lda     (DEST),y
0018A2r 2  C5 B3                cmp     FAC+2
0018A4r 2  D0 12                bne     L3B0A
0018A6r 2  C8                   iny
0018A7r 2               .ifndef CONFIG_SMALL
0018A7r 2  B1 74                lda     (DEST),y
0018A9r 2  C5 B4                cmp     FAC+3
0018ABr 2  D0 0B                bne     L3B0A
0018ADr 2  C8                   iny
0018AEr 2               .endif
0018AEr 2  A9 7F                lda     #$7F
0018B0r 2  C5 C0                cmp     FACEXTENSION
0018B2r 2  B1 74                lda     (DEST),y
0018B4r 2  E5 B5                sbc     FAC_LAST
0018B6r 2  F0 28                beq     L3B32
0018B8r 2               L3B0A:
0018B8r 2  A5 B6                lda     FACSIGN
0018BAr 2  90 02                bcc     L3B10
0018BCr 2  49 FF                eor     #$FF
0018BEr 2               L3B10:
0018BEr 2  4C rr rr             jmp     SIGN2
0018C1r 2               
0018C1r 2               ; ----------------------------------------------------------------------------
0018C1r 2               ; QUICK INTEGER FUNCTION
0018C1r 2               ;
0018C1r 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0018C1r 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0018C1r 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0018C1r 2               ;
0018C1r 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0018C1r 2               ; ----------------------------------------------------------------------------
0018C1r 2               QINT:
0018C1r 2  A5 B1                lda     FAC
0018C3r 2  F0 4A                beq     QINT3
0018C5r 2  38                   sec
0018C6r 2  E9 A0                sbc     #120+8*BYTES_FP
0018C8r 2  24 B6                bit     FACSIGN
0018CAr 2  10 09                bpl     L3B27
0018CCr 2  AA                   tax
0018CDr 2  A9 FF                lda     #$FF
0018CFr 2  85 B8                sta     SHIFTSIGNEXT
0018D1r 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0018D4r 2  8A                   txa
0018D5r 2               L3B27:
0018D5r 2  A2 B1                ldx     #FAC
0018D7r 2  C9 F9                cmp     #$F9
0018D9r 2  10 06                bpl     QINT2
0018DBr 2  20 rr rr             jsr     SHIFT_RIGHT
0018DEr 2  84 B8                sty     SHIFTSIGNEXT
0018E0r 2               L3B32:
0018E0r 2  60                   rts
0018E1r 2               QINT2:
0018E1r 2  A8                   tay
0018E2r 2  A5 B6                lda     FACSIGN
0018E4r 2  29 80                and     #$80
0018E6r 2  46 B2                lsr     FAC+1
0018E8r 2  05 B2                ora     FAC+1
0018EAr 2  85 B2                sta     FAC+1
0018ECr 2  20 rr rr             jsr     SHIFT_RIGHT4
0018EFr 2  84 B8                sty     SHIFTSIGNEXT
0018F1r 2  60                   rts
0018F2r 2               
0018F2r 2               ; ----------------------------------------------------------------------------
0018F2r 2               ; "INT" FUNCTION
0018F2r 2               ;
0018F2r 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0018F2r 2               ; AND THEN REFLOATS THE INTEGER.
0018F2r 2               ; ----------------------------------------------------------------------------
0018F2r 2               INT:
0018F2r 2  A5 B1                lda     FAC
0018F4r 2  C9 A0                cmp     #120+8*BYTES_FP
0018F6r 2  B0 20                bcs     RTS17
0018F8r 2  20 rr rr             jsr     QINT
0018FBr 2  84 C0                sty     FACEXTENSION
0018FDr 2  A5 B6                lda     FACSIGN
0018FFr 2  84 B6                sty     FACSIGN
001901r 2  49 80                eor     #$80
001903r 2  2A                   rol     a
001904r 2  A9 A0                lda     #120+8*BYTES_FP
001906r 2  85 B1                sta     FAC
001908r 2  A5 B5                lda     FAC_LAST
00190Ar 2  85 0D                sta     CHARAC
00190Cr 2  4C rr rr             jmp     NORMALIZE_FAC1
00190Fr 2               QINT3:
00190Fr 2  85 B2                sta     FAC+1
001911r 2  85 B3                sta     FAC+2
001913r 2  85 B4                sta     FAC+3
001915r 2               .ifndef CONFIG_SMALL
001915r 2  85 B5                sta     FAC+4
001917r 2               .endif
001917r 2  A8                   tay
001918r 2               RTS17:
001918r 2  60                   rts
001919r 2               
001919r 2               ; ----------------------------------------------------------------------------
001919r 2               ; CONVERT STRING TO FP VALUE IN FAC
001919r 2               ;
001919r 2               ; STRING POINTED TO BY TXTPTR
001919r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
001919r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
001919r 2               ; ----------------------------------------------------------------------------
001919r 2               FIN:
001919r 2  A0 00                ldy     #$00
00191Br 2  A2 0A                ldx     #SERLEN-TMPEXP
00191Dr 2               L3B6F:
00191Dr 2  94 AD                sty     TMPEXP,x
00191Fr 2  CA                   dex
001920r 2  10 FB                bpl     L3B6F
001922r 2  90 16                bcc     FIN2
001924r 2               .ifdef SYM1
001924r 2  C9 26                cmp     #$26
001926r 2  D0 03                bne     LDABB
001928r 2  4C rr rr             jmp     LCDFE
00192Br 2               LDABB:
00192Br 2               .endif
00192Br 2  C9 2D                cmp     #$2D
00192Dr 2  D0 04                bne     L3B7E
00192Fr 2  86 B7                stx     SERLEN
001931r 2  F0 04                beq     FIN1
001933r 2               L3B7E:
001933r 2  C9 2B                cmp     #$2B
001935r 2  D0 05                bne     FIN3
001937r 2               FIN1:
001937r 2  20 CC 00             jsr     CHRGET
00193Ar 2               FIN2:
00193Ar 2  90 5B                bcc     FIN9
00193Cr 2               FIN3:
00193Cr 2  C9 2E                cmp     #$2E
00193Er 2  F0 2E                beq     FIN10
001940r 2  C9 45                cmp     #$45
001942r 2  D0 30                bne     FIN7
001944r 2  20 CC 00             jsr     CHRGET
001947r 2  90 17                bcc     FIN5
001949r 2  C9 A5                cmp     #TOKEN_MINUS
00194Br 2  F0 0E                beq     L3BA6
00194Dr 2  C9 2D                cmp     #$2D
00194Fr 2  F0 0A                beq     L3BA6
001951r 2  C9 A4                cmp     #TOKEN_PLUS
001953r 2  F0 08                beq     FIN4
001955r 2  C9 2B                cmp     #$2B
001957r 2  F0 04                beq     FIN4
001959r 2  D0 07                bne     FIN6
00195Br 2               L3BA6:
00195Br 2               .ifndef CONFIG_ROR_WORKAROUND
00195Br 2  66 B0                ror     EXPSGN
00195Dr 2               .else
00195Dr 2                       lda     #$00
00195Dr 2                       bcc     L3BAC
00195Dr 2                       lda     #$80
00195Dr 2               L3BAC:
00195Dr 2                       lsr     EXPSGN
00195Dr 2                       ora     EXPSGN
00195Dr 2                       sta     EXPSGN
00195Dr 2               .endif
00195Dr 2               FIN4:
00195Dr 2  20 CC 00             jsr     CHRGET
001960r 2               FIN5:
001960r 2  90 5C                bcc     GETEXP
001962r 2               FIN6:
001962r 2  24 B0                bit     EXPSGN
001964r 2  10 0E                bpl     FIN7
001966r 2  A9 00                lda     #$00
001968r 2  38                   sec
001969r 2  E5 AE                sbc     EXPON
00196Br 2  4C rr rr             jmp     FIN8
00196Er 2               
00196Er 2               ; ----------------------------------------------------------------------------
00196Er 2               ; FOUND A DECIMAL POINT
00196Er 2               ; ----------------------------------------------------------------------------
00196Er 2               FIN10:
00196Er 2               .ifndef CONFIG_ROR_WORKAROUND
00196Er 2  66 AF                ror     LOWTR
001970r 2               .else
001970r 2                       lda     #$00
001970r 2                       bcc     L3BC9
001970r 2                       lda     #$80
001970r 2               L3BC9:
001970r 2                       lsr     LOWTR
001970r 2                       ora     LOWTR
001970r 2                       sta     LOWTR
001970r 2               .endif
001970r 2  24 AF                bit     LOWTR
001972r 2  50 C3                bvc     FIN1
001974r 2               
001974r 2               ; ----------------------------------------------------------------------------
001974r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001974r 2               ; ----------------------------------------------------------------------------
001974r 2               FIN7:
001974r 2  A5 AE                lda     EXPON
001976r 2               FIN8:
001976r 2  38                   sec
001977r 2  E5 AD                sbc     INDX
001979r 2  85 AE                sta     EXPON
00197Br 2  F0 12                beq     L3BEE
00197Dr 2  10 09                bpl     L3BE7
00197Fr 2               L3BDE:
00197Fr 2  20 rr rr             jsr     DIV10
001982r 2  E6 AE                inc     EXPON
001984r 2  D0 F9                bne     L3BDE
001986r 2  F0 07                beq     L3BEE
001988r 2               L3BE7:
001988r 2  20 rr rr             jsr     MUL10
00198Br 2  C6 AE                dec     EXPON
00198Dr 2  D0 F9                bne     L3BE7
00198Fr 2               L3BEE:
00198Fr 2  A5 B7                lda     SERLEN
001991r 2  30 01                bmi     L3BF3
001993r 2  60                   rts
001994r 2               L3BF3:
001994r 2  4C rr rr             jmp     NEGOP
001997r 2               
001997r 2               ; ----------------------------------------------------------------------------
001997r 2               ; ACCUMULATE A DIGIT INTO FAC
001997r 2               ; ----------------------------------------------------------------------------
001997r 2               FIN9:
001997r 2  48                   pha
001998r 2  24 AF                bit     LOWTR
00199Ar 2  10 02                bpl     L3BFD
00199Cr 2  E6 AD                inc     INDX
00199Er 2               L3BFD:
00199Er 2  20 rr rr             jsr     MUL10
0019A1r 2  68                   pla
0019A2r 2  38                   sec
0019A3r 2  E9 30                sbc     #$30
0019A5r 2  20 rr rr             jsr     ADDACC
0019A8r 2  4C rr rr             jmp     FIN1
0019ABr 2               
0019ABr 2               ; ----------------------------------------------------------------------------
0019ABr 2               ; ADD (A) TO FAC
0019ABr 2               ; ----------------------------------------------------------------------------
0019ABr 2               ADDACC:
0019ABr 2  48                   pha
0019ACr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0019AFr 2  68                   pla
0019B0r 2  20 rr rr             jsr     FLOAT
0019B3r 2  A5 BE                lda     ARGSIGN
0019B5r 2  45 B6                eor     FACSIGN
0019B7r 2  85 BF                sta     SGNCPR
0019B9r 2  A6 B1                ldx     FAC
0019BBr 2  4C rr rr             jmp     FADDT
0019BEr 2               
0019BEr 2               ; ----------------------------------------------------------------------------
0019BEr 2               ; ACCUMULATE DIGIT OF EXPONENT
0019BEr 2               ; ----------------------------------------------------------------------------
0019BEr 2               GETEXP:
0019BEr 2  A5 AE                lda     EXPON
0019C0r 2  C9 0A                cmp     #MAX_EXPON
0019C2r 2  90 09                bcc     L3C2C
0019C4r 2               .ifdef CONFIG_10A
0019C4r 2  A9 64                lda     #$64
0019C6r 2               .endif
0019C6r 2  24 B0                bit     EXPSGN
0019C8r 2               .ifdef CONFIG_10A
0019C8r 2  30 11                bmi     L3C3A
0019CAr 2               .else
0019CAr 2                       bmi     LDC70
0019CAr 2               .endif
0019CAr 2  4C rr rr             jmp     OVERFLOW
0019CDr 2               LDC70:
0019CDr 2               .ifndef CONFIG_10A
0019CDr 2                       lda     #$0B
0019CDr 2               .endif
0019CDr 2               L3C2C:
0019CDr 2  0A                   asl     a
0019CEr 2  0A                   asl     a
0019CFr 2  18                   clc
0019D0r 2  65 AE                adc     EXPON
0019D2r 2  0A                   asl     a
0019D3r 2  18                   clc
0019D4r 2  A0 00                ldy     #$00
0019D6r 2  71 D3                adc     (TXTPTR),y
0019D8r 2  38                   sec
0019D9r 2  E9 30                sbc     #$30
0019DBr 2               L3C3A:
0019DBr 2  85 AE                sta     EXPON
0019DDr 2  4C rr rr             jmp     FIN4
0019E0r 2               
0019E0r 2               ; ----------------------------------------------------------------------------
0019E0r 2               .ifdef CONFIG_SMALL
0019E0r 2               ; these values are /1000 of what the labels say
0019E0r 2               CON_99999999_9:
0019E0r 2                       .byte   $91,$43,$4F,$F8
0019E0r 2               CON_999999999:
0019E0r 2               		.byte   $94,$74,$23,$F7
0019E0r 2               CON_BILLION:
0019E0r 2                       .byte   $94,$74,$24,$00
0019E0r 2               .else
0019E0r 2               CON_99999999_9:
0019E0r 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
0019E4r 2  FD           
0019E5r 2               CON_999999999:
0019E5r 2               .ifndef CONFIG_10A
0019E5r 2                       .byte   $9E,$6E,$6B,$27,$FE
0019E5r 2               .else
0019E5r 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FD
0019E9r 2  FD           
0019EAr 2               .endif
0019EAr 2               CON_BILLION:
0019EAr 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
0019EEr 2  00           
0019EFr 2               .endif
0019EFr 2               
0019EFr 2               ; ----------------------------------------------------------------------------
0019EFr 2               ; PRINT "IN <LINE #>"
0019EFr 2               ; ----------------------------------------------------------------------------
0019EFr 2               INPRT:
0019EFr 2               .ifdef KBD
0019EFr 2                       jsr     LFE0B
0019EFr 2                       .byte	" in"
0019EFr 2                       .byte	0
0019EFr 2               .else
0019EFr 2  A9 rr                lda     #<QT_IN
0019F1r 2  A0 rr                ldy     #>QT_IN
0019F3r 2  20 rr rr             jsr     GOSTROUT2
0019F6r 2               .endif
0019F6r 2  A5 8A                lda     CURLIN+1
0019F8r 2  A6 89                ldx     CURLIN
0019FAr 2               
0019FAr 2               ; ----------------------------------------------------------------------------
0019FAr 2               ; PRINT A,X AS DECIMAL INTEGER
0019FAr 2               ; ----------------------------------------------------------------------------
0019FAr 2               LINPRT:
0019FAr 2  85 B2                sta     FAC+1
0019FCr 2  86 B3                stx     FAC+2
0019FEr 2  A2 90                ldx     #$90
001A00r 2  38                   sec
001A01r 2  20 rr rr             jsr     FLOAT2
001A04r 2  20 rr rr             jsr     FOUT
001A07r 2               GOSTROUT2:
001A07r 2  4C rr rr             jmp     STROUT
001A0Ar 2               
001A0Ar 2               ; ----------------------------------------------------------------------------
001A0Ar 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
001A0Ar 2               ; RETURN WITH (Y,A) POINTING AT STRING
001A0Ar 2               ; ----------------------------------------------------------------------------
001A0Ar 2               FOUT:
001A0Ar 2  A0 01                ldy     #$01
001A0Cr 2               
001A0Cr 2               ; ----------------------------------------------------------------------------
001A0Cr 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
001A0Cr 2               ; SO THAT RESULT STRING STARTS AT STACK-1
001A0Cr 2               ; (THIS IS USED AS A FLAG)
001A0Cr 2               ; ----------------------------------------------------------------------------
001A0Cr 2               FOUT1:
001A0Cr 2  A9 20                lda     #$20
001A0Er 2  24 B6                bit     FACSIGN
001A10r 2  10 02                bpl     L3C73
001A12r 2  A9 2D                lda     #$2D
001A14r 2               L3C73:
001A14r 2  99 FF 00             sta     STACK2-1,y
001A17r 2  85 B6                sta     FACSIGN
001A19r 2  84 C1                sty     STRNG2
001A1Br 2  C8                   iny
001A1Cr 2  A9 30                lda     #$30
001A1Er 2  A6 B1                ldx     FAC
001A20r 2  D0 03                bne     L3C84
001A22r 2  4C rr rr             jmp     FOUT4
001A25r 2               L3C84:
001A25r 2  A9 00                lda     #$00
001A27r 2  E0 80                cpx     #$80
001A29r 2  F0 02                beq     L3C8C
001A2Br 2  B0 09                bcs     L3C95
001A2Dr 2               L3C8C:
001A2Dr 2  A9 rr                lda     #<CON_BILLION
001A2Fr 2  A0 rr                ldy     #>CON_BILLION
001A31r 2  20 rr rr             jsr     FMULT
001A34r 2               .ifdef CONFIG_SMALL
001A34r 2                       lda     #-6 ; exponent adjustment
001A34r 2               .else
001A34r 2  A9 F7                lda     #-9
001A36r 2               .endif
001A36r 2               L3C95:
001A36r 2  85 AD                sta     INDX
001A38r 2               ; ----------------------------------------------------------------------------
001A38r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
001A38r 2               ; ----------------------------------------------------------------------------
001A38r 2               L3C97:
001A38r 2  A9 rr                lda     #<CON_999999999
001A3Ar 2  A0 rr                ldy     #>CON_999999999
001A3Cr 2  20 rr rr             jsr     FCOMP
001A3Fr 2  F0 1E                beq     L3CBE
001A41r 2  10 12                bpl     L3CB4
001A43r 2               L3CA2:
001A43r 2  A9 rr                lda     #<CON_99999999_9
001A45r 2  A0 rr                ldy     #>CON_99999999_9
001A47r 2  20 rr rr             jsr     FCOMP
001A4Ar 2  F0 02                beq     L3CAD
001A4Cr 2  10 0E                bpl     L3CBB
001A4Er 2               L3CAD:
001A4Er 2  20 rr rr             jsr     MUL10
001A51r 2  C6 AD                dec     INDX
001A53r 2  D0 EE                bne     L3CA2
001A55r 2               L3CB4:
001A55r 2  20 rr rr             jsr     DIV10
001A58r 2  E6 AD                inc     INDX
001A5Ar 2  D0 DC                bne     L3C97
001A5Cr 2               L3CBB:
001A5Cr 2  20 rr rr             jsr     FADDH
001A5Fr 2               L3CBE:
001A5Fr 2  20 rr rr             jsr     QINT
001A62r 2               ; ----------------------------------------------------------------------------
001A62r 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001A62r 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001A62r 2               ;
001A62r 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001A62r 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001A62r 2               ; ----------------------------------------------------------------------------
001A62r 2  A2 01                ldx     #$01
001A64r 2  A5 AD                lda     INDX
001A66r 2  18                   clc
001A67r 2  69 0A                adc     #3*BYTES_FP-5
001A69r 2  30 09                bmi     L3CD3
001A6Br 2  C9 0B                cmp     #3*BYTES_FP-4
001A6Dr 2  B0 06                bcs     L3CD4
001A6Fr 2  69 FF                adc     #$FF
001A71r 2  AA                   tax
001A72r 2  A9 02                lda     #$02
001A74r 2               L3CD3:
001A74r 2  38                   sec
001A75r 2               L3CD4:
001A75r 2  E9 02                sbc     #$02
001A77r 2  85 AE                sta     EXPON
001A79r 2  86 AD                stx     INDX
001A7Br 2  8A                   txa
001A7Cr 2  F0 02                beq     L3CDF
001A7Er 2  10 13                bpl     L3CF2
001A80r 2               L3CDF:
001A80r 2  A4 C1                ldy     STRNG2
001A82r 2  A9 2E                lda     #$2E
001A84r 2  C8                   iny
001A85r 2  99 FF 00             sta     STACK2-1,y
001A88r 2  8A                   txa
001A89r 2  F0 06                beq     L3CF0
001A8Br 2  A9 30                lda     #$30
001A8Dr 2  C8                   iny
001A8Er 2  99 FF 00             sta     STACK2-1,y
001A91r 2               L3CF0:
001A91r 2  84 C1                sty     STRNG2
001A93r 2               ; ----------------------------------------------------------------------------
001A93r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001A93r 2               ; ----------------------------------------------------------------------------
001A93r 2               L3CF2:
001A93r 2  A0 00                ldy     #$00
001A95r 2               LDD3A:
001A95r 2  A2 80                ldx     #$80
001A97r 2               L3CF6:
001A97r 2  A5 B5                lda     FAC_LAST
001A99r 2  18                   clc
001A9Ar 2               .ifndef CONFIG_SMALL
001A9Ar 2  79 rr rr             adc     DECTBL+3,y
001A9Dr 2  85 B5                sta     FAC+4
001A9Fr 2  A5 B4                lda     FAC+3
001AA1r 2               .endif
001AA1r 2  79 rr rr             adc     DECTBL+2,y
001AA4r 2  85 B4                sta     FAC+3
001AA6r 2  A5 B3                lda     FAC+2
001AA8r 2  79 rr rr             adc     DECTBL+1,y
001AABr 2  85 B3                sta     FAC+2
001AADr 2  A5 B2                lda     FAC+1
001AAFr 2  79 rr rr             adc     DECTBL,y
001AB2r 2  85 B2                sta     FAC+1
001AB4r 2  E8                   inx
001AB5r 2  B0 04                bcs     L3D1A
001AB7r 2  10 DE                bpl     L3CF6
001AB9r 2  30 02                bmi     L3D1C
001ABBr 2               L3D1A:
001ABBr 2  30 DA                bmi     L3CF6
001ABDr 2               L3D1C:
001ABDr 2  8A                   txa
001ABEr 2  90 04                bcc     L3D23
001AC0r 2  49 FF                eor     #$FF
001AC2r 2  69 0A                adc     #$0A
001AC4r 2               L3D23:
001AC4r 2  69 2F                adc     #$2F
001AC6r 2  C8                   iny
001AC7r 2  C8                   iny
001AC8r 2  C8                   iny
001AC9r 2               .ifndef CONFIG_SMALL
001AC9r 2  C8                   iny
001ACAr 2               .endif
001ACAr 2  84 97                sty     VARPNT
001ACCr 2  A4 C1                ldy     STRNG2
001ACEr 2  C8                   iny
001ACFr 2  AA                   tax
001AD0r 2  29 7F                and     #$7F
001AD2r 2  99 FF 00             sta     STACK2-1,y
001AD5r 2  C6 AD                dec     INDX
001AD7r 2  D0 06                bne     L3D3E
001AD9r 2  A9 2E                lda     #$2E
001ADBr 2  C8                   iny
001ADCr 2  99 FF 00             sta     STACK2-1,y
001ADFr 2               L3D3E:
001ADFr 2  84 C1                sty     STRNG2
001AE1r 2  A4 97                ldy     VARPNT
001AE3r 2  8A                   txa
001AE4r 2  49 FF                eor     #$FF
001AE6r 2  29 80                and     #$80
001AE8r 2  AA                   tax
001AE9r 2  C0 24                cpy     #DECTBL_END-DECTBL
001AEBr 2               .ifdef CONFIG_CBM_ALL
001AEBr 2                       beq     LDD96
001AEBr 2                       cpy     #$3C ; XXX
001AEBr 2               .endif
001AEBr 2  D0 AA                bne     L3CF6
001AEDr 2               ; ----------------------------------------------------------------------------
001AEDr 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
001AEDr 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
001AEDr 2               ; DECIMAL POINT.
001AEDr 2               ; ----------------------------------------------------------------------------
001AEDr 2               LDD96:
001AEDr 2  A4 C1                ldy     STRNG2
001AEFr 2               L3D4E:
001AEFr 2  B9 FF 00             lda     STACK2-1,y
001AF2r 2  88                   dey
001AF3r 2  C9 30                cmp     #$30
001AF5r 2  F0 F8                beq     L3D4E
001AF7r 2  C9 2E                cmp     #$2E
001AF9r 2  F0 01                beq     L3D5B
001AFBr 2  C8                   iny
001AFCr 2               L3D5B:
001AFCr 2  A9 2B                lda     #$2B
001AFEr 2  A6 AE                ldx     EXPON
001B00r 2  F0 2E                beq     L3D8F
001B02r 2  10 08                bpl     L3D6B
001B04r 2  A9 00                lda     #$00
001B06r 2  38                   sec
001B07r 2  E5 AE                sbc     EXPON
001B09r 2  AA                   tax
001B0Ar 2  A9 2D                lda     #$2D
001B0Cr 2               L3D6B:
001B0Cr 2  99 01 01             sta     STACK2+1,y
001B0Fr 2  A9 45                lda     #$45
001B11r 2  99 00 01             sta     STACK2,y
001B14r 2  8A                   txa
001B15r 2  A2 2F                ldx     #$2F
001B17r 2  38                   sec
001B18r 2               L3D77:
001B18r 2  E8                   inx
001B19r 2  E9 0A                sbc     #$0A
001B1Br 2  B0 FB                bcs     L3D77
001B1Dr 2  69 3A                adc     #$3A
001B1Fr 2  99 03 01             sta     STACK2+3,y
001B22r 2  8A                   txa
001B23r 2  99 02 01             sta     STACK2+2,y
001B26r 2  A9 00                lda     #$00
001B28r 2  99 04 01             sta     STACK2+4,y
001B2Br 2  F0 08                beq     L3D94
001B2Dr 2               FOUT4:
001B2Dr 2  99 FF 00             sta     STACK2-1,y
001B30r 2               L3D8F:
001B30r 2  A9 00                lda     #$00
001B32r 2  99 00 01             sta     STACK2,y
001B35r 2               L3D94:
001B35r 2  A9 00                lda     #<STACK2
001B37r 2  A0 01                ldy     #>STACK2
001B39r 2  60                   rts
001B3Ar 2               
001B3Ar 2               ; ----------------------------------------------------------------------------
001B3Ar 2               CON_HALF:
001B3Ar 2               .ifdef CONFIG_SMALL
001B3Ar 2                       .byte   $80,$00,$00,$00
001B3Ar 2               .else
001B3Ar 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
001B3Er 2  00           
001B3Fr 2               .endif
001B3Fr 2               
001B3Fr 2               ; ----------------------------------------------------------------------------
001B3Fr 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001B3Fr 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001B3Fr 2               ; ----------------------------------------------------------------------------
001B3Fr 2               DECTBL:
001B3Fr 2               .ifdef CONFIG_SMALL
001B3Fr 2                       .byte   $FE,$79,$60 ; -100000
001B3Fr 2               		.byte	$00,$27,$10 ; 10000
001B3Fr 2               		.byte	$FF,$FC,$18 ; -1000
001B3Fr 2               		.byte	$00,$00,$64 ; 100
001B3Fr 2               		.byte	$FF,$FF,$F6 ; -10
001B3Fr 2               		.byte	$00,$00,$01 ; 1
001B3Fr 2               .else
001B3Fr 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
001B43r 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
001B47r 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001B4Br 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001B4Fr 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001B53r 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001B57r 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001B5Br 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001B5Fr 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001B63r 2               .endif
001B63r 2               DECTBL_END:
001B63r 2               .ifdef CONFIG_CBM_ALL
001B63r 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001B63r 2               		.byte	$00,$03,$4B,$C0
001B63r 2               		.byte	$FF,$FF,$73,$60
001B63r 2               		.byte	$00,$00,$0E,$10
001B63r 2               		.byte	$FF,$FF,$FD,$A8
001B63r 2               		.byte	$00,$00,$00,$3C
001B63r 2               .endif
001B63r 2               .ifdef CONFIG_2
001B63r 2               C_ZERO = CON_HALF + 2
001B63r 2               .endif
001B63r 2               
001B63r 2               ; ----------------------------------------------------------------------------
001B63r 2               ; "SQR" FUNCTION
001B63r 2               ; ----------------------------------------------------------------------------
001B63r 2               SQR:
001B63r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001B66r 2  A9 rr                lda     #<CON_HALF
001B68r 2  A0 rr                ldy     #>CON_HALF
001B6Ar 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001B6Dr 2               
001B6Dr 2               ; ----------------------------------------------------------------------------
001B6Dr 2               ; EXPONENTIATION OPERATION
001B6Dr 2               ;
001B6Dr 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001B6Dr 2               ; ----------------------------------------------------------------------------
001B6Dr 2               FPWRT:
001B6Dr 2  F0 70                beq     EXP
001B6Fr 2  A5 B9                lda     ARG
001B71r 2  D0 03                bne     L3DD5
001B73r 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001B76r 2               L3DD5:
001B76r 2  A2 9E                ldx     #TEMP3
001B78r 2  A0 00                ldy     #$00
001B7Ar 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001B7Dr 2  A5 BE                lda     ARGSIGN
001B7Fr 2  10 0F                bpl     L3DEF
001B81r 2  20 rr rr             jsr     INT
001B84r 2  A9 9E                lda     #TEMP3
001B86r 2  A0 00                ldy     #$00
001B88r 2  20 rr rr             jsr     FCOMP
001B8Br 2  D0 03                bne     L3DEF
001B8Dr 2  98                   tya
001B8Er 2  A4 0D                ldy     CHARAC
001B90r 2               L3DEF:
001B90r 2  20 rr rr             jsr     MFA
001B93r 2  98                   tya
001B94r 2  48                   pha
001B95r 2  20 rr rr             jsr     LOG
001B98r 2  A9 9E                lda     #TEMP3
001B9Ar 2  A0 00                ldy     #$00
001B9Cr 2  20 rr rr             jsr     FMULT
001B9Fr 2  20 rr rr             jsr     EXP
001BA2r 2  68                   pla
001BA3r 2  4A                   lsr     a
001BA4r 2  90 0A                bcc     L3E0F
001BA6r 2               
001BA6r 2               ; ----------------------------------------------------------------------------
001BA6r 2               ; NEGATE VALUE IN FAC
001BA6r 2               ; ----------------------------------------------------------------------------
001BA6r 2               NEGOP:
001BA6r 2  A5 B1                lda     FAC
001BA8r 2  F0 06                beq     L3E0F
001BAAr 2  A5 B6                lda     FACSIGN
001BACr 2  49 FF                eor     #$FF
001BAEr 2  85 B6                sta     FACSIGN
001BB0r 2               L3E0F:
001BB0r 2  60                   rts
001BB1r 2               
001BB1r 2               ; ----------------------------------------------------------------------------
001BB1r 2               .ifdef CONFIG_SMALL
001BB1r 2               CON_LOG_E:
001BB1r 2                       .byte   $81,$38,$AA,$3B
001BB1r 2               POLY_EXP:
001BB1r 2               		.byte	$06
001BB1r 2               		.byte	$74,$63,$90,$8C
001BB1r 2               		.byte	$77,$23,$0C,$AB
001BB1r 2               		.byte	$7A,$1E,$94,$00
001BB1r 2               		.byte	$7C,$63,$42,$80
001BB1r 2               		.byte	$7E,$75,$FE,$D0
001BB1r 2               		.byte	$80,$31,$72,$15
001BB1r 2               		.byte	$81,$00,$00,$00
001BB1r 2               .else
001BB1r 2               CON_LOG_E:
001BB1r 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001BB5r 2  29           
001BB6r 2               POLY_EXP:
001BB6r 2  07                   .byte   $07
001BB7r 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001BBBr 2  56           
001BBCr 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001BC0r 2  1B           
001BC1r 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001BC5r 2  85           
001BC6r 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001BCAr 2  2A           
001BCBr 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001BCFr 2  0A           
001BD0r 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001BD4r 2  C6           
001BD5r 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001BD9r 2  10           
001BDAr 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001BDEr 2  00           
001BDFr 2               .endif
001BDFr 2               
001BDFr 2               ; ----------------------------------------------------------------------------
001BDFr 2               ; "EXP" FUNCTION
001BDFr 2               ;
001BDFr 2               ; FAC = E ^ FAC
001BDFr 2               ; ----------------------------------------------------------------------------
001BDFr 2               EXP:
001BDFr 2  A9 rr                lda     #<CON_LOG_E
001BE1r 2  A0 rr                ldy     #>CON_LOG_E
001BE3r 2  20 rr rr             jsr     FMULT
001BE6r 2  A5 C0                lda     FACEXTENSION
001BE8r 2  69 50                adc     #$50
001BEAr 2  90 03                bcc     L3E4E
001BECr 2  20 rr rr             jsr     INCREMENT_MANTISSA
001BEFr 2               L3E4E:
001BEFr 2  85 A6                sta     ARGEXTENSION
001BF1r 2  20 rr rr             jsr     MAF
001BF4r 2  A5 B1                lda     FAC
001BF6r 2  C9 88                cmp     #$88
001BF8r 2  90 03                bcc     L3E5C
001BFAr 2               L3E59:
001BFAr 2  20 rr rr             jsr     OUTOFRNG
001BFDr 2               L3E5C:
001BFDr 2  20 rr rr             jsr     INT
001C00r 2  A5 0D                lda     CHARAC
001C02r 2  18                   clc
001C03r 2  69 81                adc     #$81
001C05r 2  F0 F3                beq     L3E59
001C07r 2  38                   sec
001C08r 2  E9 01                sbc     #$01
001C0Ar 2  48                   pha
001C0Br 2  A2 05                ldx     #BYTES_FP
001C0Dr 2               L3E6C:
001C0Dr 2  B5 B9                lda     ARG,x
001C0Fr 2  B4 B1                ldy     FAC,x
001C11r 2  95 B1                sta     FAC,x
001C13r 2  94 B9                sty     ARG,x
001C15r 2  CA                   dex
001C16r 2  10 F5                bpl     L3E6C
001C18r 2  A5 A6                lda     ARGEXTENSION
001C1Ar 2  85 C0                sta     FACEXTENSION
001C1Cr 2  20 rr rr             jsr     FSUBT
001C1Fr 2  20 rr rr             jsr     NEGOP
001C22r 2  A9 rr                lda     #<POLY_EXP
001C24r 2  A0 rr                ldy     #>POLY_EXP
001C26r 2  20 rr rr             jsr     POLYNOMIAL
001C29r 2  A9 00                lda     #$00
001C2Br 2  85 BF                sta     SGNCPR
001C2Dr 2  68                   pla
001C2Er 2  20 rr rr             jsr     ADD_EXPONENTS1
001C31r 2  60                   rts
001C32r 2               
001C32r 2               ; ----------------------------------------------------------------------------
001C32r 2               ; ODD POLYNOMIAL SUBROUTINE
001C32r 2               ;
001C32r 2               ; F(X) = X * P(X^2)
001C32r 2               ;
001C32r 2               ; WHERE:  X IS VALUE IN FAC
001C32r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001C32r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001C32r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001C32r 2               ;
001C32r 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001C32r 2               ; ----------------------------------------------------------------------------
001C32r 2               POLYNOMIAL_ODD:
001C32r 2  85 C1                sta     STRNG2
001C34r 2  84 C2                sty     STRNG2+1
001C36r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001C39r 2  A9 A7                lda     #TEMP1X
001C3Br 2  20 rr rr             jsr     FMULT
001C3Er 2  20 rr rr             jsr     SERMAIN
001C41r 2  A9 A7                lda     #TEMP1X
001C43r 2  A0 00                ldy     #$00
001C45r 2  4C rr rr             jmp     FMULT
001C48r 2               
001C48r 2               ; ----------------------------------------------------------------------------
001C48r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001C48r 2               ;
001C48r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001C48r 2               ;
001C48r 2               ; WHERE:  X IS VALUE IN FAC
001C48r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001C48r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001C48r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001C48r 2               ; ----------------------------------------------------------------------------
001C48r 2               POLYNOMIAL:
001C48r 2  85 C1                sta     STRNG2
001C4Ar 2  84 C2                sty     STRNG2+1
001C4Cr 2               SERMAIN:
001C4Cr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001C4Fr 2  B1 C1                lda     (STRNG2),y
001C51r 2  85 B7                sta     SERLEN
001C53r 2  A4 C1                ldy     STRNG2
001C55r 2  C8                   iny
001C56r 2  98                   tya
001C57r 2  D0 02                bne     L3EBA
001C59r 2  E6 C2                inc     STRNG2+1
001C5Br 2               L3EBA:
001C5Br 2  85 C1                sta     STRNG2
001C5Dr 2  A4 C2                ldy     STRNG2+1
001C5Fr 2               L3EBE:
001C5Fr 2  20 rr rr             jsr     FMULT
001C62r 2  A5 C1                lda     STRNG2
001C64r 2  A4 C2                ldy     STRNG2+1
001C66r 2  18                   clc
001C67r 2  69 05                adc     #BYTES_FP
001C69r 2  90 01                bcc     L3ECB
001C6Br 2  C8                   iny
001C6Cr 2               L3ECB:
001C6Cr 2  85 C1                sta     STRNG2
001C6Er 2  84 C2                sty     STRNG2+1
001C70r 2  20 rr rr             jsr     FADD
001C73r 2  A9 AC                lda     #TEMP2
001C75r 2  A0 00                ldy     #$00
001C77r 2  C6 B7                dec     SERLEN
001C79r 2  D0 E4                bne     L3EBE
001C7Br 2               RTS19:
001C7Br 2  60                   rts
001C7Cr 2               
001C7Cr 1               .include "chrget.s"
001C7Cr 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 D3                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 D4                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001C7Cr 2               
001C7Cr 2               ; ----------------------------------------------------------------------------
001C7Cr 2               ; "RND" FUNCTION
001C7Cr 2               ; ----------------------------------------------------------------------------
001C7Cr 2               
001C7Cr 2               .ifdef KBD
001C7Cr 2               RND:
001C7Cr 2                       ldx     #$10
001C7Cr 2                       jsr     SIGN
001C7Cr 2                       beq     LFC26
001C7Cr 2                       bmi     LFC10
001C7Cr 2                       lda     RNDSEED
001C7Cr 2                       ldy     RNDSEED+1
001C7Cr 2               LFBFA:
001C7Cr 2                       sta     FAC+2
001C7Cr 2                       sty     FAC+1
001C7Cr 2               LFBFE:
001C7Cr 2                       asl     a
001C7Cr 2                       asl     a
001C7Cr 2                       eor     FAC+2
001C7Cr 2                       asl     a
001C7Cr 2                       eor     FAC+1
001C7Cr 2                       asl     a
001C7Cr 2                       asl     a
001C7Cr 2                       asl     a
001C7Cr 2                       asl     a
001C7Cr 2                       eor     FAC+1
001C7Cr 2                       asl     a
001C7Cr 2                       rol     FAC+2
001C7Cr 2                       rol     FAC+1
001C7Cr 2               LFC10:
001C7Cr 2                       lda     FAC+2
001C7Cr 2                       dex
001C7Cr 2                       bne     LFBFE
001C7Cr 2                       sta     RNDSEED
001C7Cr 2                       sta     FAC+3
001C7Cr 2                       lda     FAC+1
001C7Cr 2                       sta     RNDSEED+1
001C7Cr 2                       lda     #$80
001C7Cr 2                       sta     FAC
001C7Cr 2                       stx     FACSIGN
001C7Cr 2                       jmp     NORMALIZE_FAC2
001C7Cr 2               LFC26:
001C7Cr 2                       ldy     $03CA
001C7Cr 2                       lda     $03C7
001C7Cr 2                       ora     #$01
001C7Cr 2               GOMOVMF:
001C7Cr 2                       bne     LFBFA
001C7Cr 2                       .byte   $F0
001C7Cr 2               .else
001C7Cr 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001C7Cr 2               ; (non CONFIG_SMALL)
001C7Cr 2               CONRND1:
001C7Cr 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001C80r 2               CONRND2:
001C80r 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001C84r 2               RND:
001C84r 2  20 rr rr             jsr     SIGN
001C87r 2               .ifdef CONFIG_CBM_ALL
001C87r 2                       bmi     L3F01
001C87r 2                       bne     LDF63
001C87r 2                       lda     ENTROPY
001C87r 2                       sta     FAC+1
001C87r 2                       lda     ENTROPY+4
001C87r 2                       sta     FAC+2
001C87r 2                       lda     ENTROPY+1
001C87r 2                       sta     FAC+3
001C87r 2                       lda     ENTROPY+5
001C87r 2                       sta     FAC+4
001C87r 2                       jmp     LDF88
001C87r 2               LDF63:
001C87r 2               .else
001C87r 2  AA                   tax
001C88r 2  30 18                bmi     L3F01
001C8Ar 2               .endif
001C8Ar 2  A9 E4                lda     #<RNDSEED
001C8Cr 2  A0 00                ldy     #>RNDSEED
001C8Er 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001C91r 2               .ifndef CONFIG_CBM_ALL
001C91r 2  8A                   txa
001C92r 2  F0 E7                beq     RTS19
001C94r 2               .endif
001C94r 2  A9 rr                lda     #<CONRND1
001C96r 2  A0 rr                ldy     #>CONRND1
001C98r 2  20 rr rr             jsr     FMULT
001C9Br 2  A9 rr                lda     #<CONRND2
001C9Dr 2  A0 rr                ldy     #>CONRND2
001C9Fr 2  20 rr rr             jsr     FADD
001CA2r 2               L3F01:
001CA2r 2  A6 B5                ldx     FAC_LAST
001CA4r 2  A5 B2                lda     FAC+1
001CA6r 2  85 B5                sta     FAC_LAST
001CA8r 2  86 B2                stx     FAC+1
001CAAr 2               .ifdef CONFIG_CBM_ALL
001CAAr 2                       ldx     FAC+2
001CAAr 2                       lda     FAC+3
001CAAr 2                       sta     FAC+2
001CAAr 2                       stx     FAC+3
001CAAr 2               LDF88:
001CAAr 2               .endif
001CAAr 2  A9 00                lda     #$00
001CACr 2  85 B6                sta     FACSIGN
001CAEr 2  A5 B1                lda     FAC
001CB0r 2  85 C0                sta     FACEXTENSION
001CB2r 2  A9 80                lda     #$80
001CB4r 2  85 B1                sta     FAC
001CB6r 2  20 rr rr             jsr     NORMALIZE_FAC2
001CB9r 2  A2 E4                ldx     #<RNDSEED
001CBBr 2  A0 00                ldy     #>RNDSEED
001CBDr 2               GOMOVMF:
001CBDr 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001CC0r 2               .endif
001CC0r 2               
001CC0r 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$58
00001Cr 2  58           
00001Dr 2                   .else
00001Dr 2                       .byte   $80,$4F,$C7,$52,$59
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001CC0r 2               
001CC0r 2               .ifndef SYM1
001CC0r 2               SIN_COS_TAN_ATN:
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ; "COS" FUNCTION
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               COS:
001CC0r 2                       lda     #<CON_PI_HALF
001CC0r 2                       ldy     #>CON_PI_HALF
001CC0r 2                       jsr     FADD
001CC0r 2               
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ; "SIN" FUNCTION
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               SIN:
001CC0r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
001CC0r 2                       lda     #<CON_PI_DOUB
001CC0r 2                       ldy     #>CON_PI_DOUB
001CC0r 2                       ldx     ARGSIGN
001CC0r 2                       jsr     DIV
001CC0r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
001CC0r 2                       jsr     INT
001CC0r 2                       lda     #$00
001CC0r 2                       sta     STRNG1
001CC0r 2                       jsr     FSUBT
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001CC0r 2               ;
001CC0r 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001CC0r 2               ;
001CC0r 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2                       lda     #<QUARTER
001CC0r 2                       ldy     #>QUARTER
001CC0r 2                       jsr     FSUB
001CC0r 2                       lda     FACSIGN
001CC0r 2                       pha
001CC0r 2                       bpl     SIN1
001CC0r 2                       jsr     FADDH
001CC0r 2                       lda     FACSIGN
001CC0r 2                       bmi     L3F5B
001CC0r 2                       lda     CPRMASK
001CC0r 2                       eor     #$FF
001CC0r 2                       sta     CPRMASK
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ; IF FALL THRU, RANGE IS 0...1/2
001CC0r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               SIN1:
001CC0r 2                       jsr     NEGOP
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ; IF FALL THRU, RANGE IS -1/2...0
001CC0r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               L3F5B:
001CC0r 2                       lda     #<QUARTER
001CC0r 2                       ldy     #>QUARTER
001CC0r 2                       jsr     FADD
001CC0r 2                       pla
001CC0r 2                       bpl     L3F68
001CC0r 2                       jsr     NEGOP
001CC0r 2               L3F68:
001CC0r 2                       lda     #<POLY_SIN
001CC0r 2                       ldy     #>POLY_SIN
001CC0r 2                       jmp     POLYNOMIAL_ODD
001CC0r 2               
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ; "TAN" FUNCTION
001CC0r 2               ;
001CC0r 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               TAN:
001CC0r 2                       jsr     STORE_FAC_IN_TEMP1_ROUNDED
001CC0r 2                       lda     #$00
001CC0r 2                       sta     CPRMASK
001CC0r 2                       jsr     SIN
001CC0r 2                       ldx     #TEMP3
001CC0r 2                       ldy     #$00
001CC0r 2                       jsr     GOMOVMF
001CC0r 2                       lda     #TEMP1+(5-BYTES_FP)
001CC0r 2                       ldy     #$00
001CC0r 2                       jsr     LOAD_FAC_FROM_YA
001CC0r 2                       lda     #$00
001CC0r 2                       sta     FACSIGN
001CC0r 2                       lda     CPRMASK
001CC0r 2                       jsr     TAN1
001CC0r 2                       lda     #TEMP3
001CC0r 2                       ldy     #$00
001CC0r 2                       jmp     FDIV
001CC0r 2               TAN1:
001CC0r 2                       pha
001CC0r 2                       jmp     SIN1
001CC0r 2               
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               .ifdef CONFIG_SMALL
001CC0r 2               CON_PI_HALF:
001CC0r 2                       .byte   $81,$49,$0F,$DB
001CC0r 2               CON_PI_DOUB:
001CC0r 2                       .byte   $83,$49,$0F,$DB
001CC0r 2               QUARTER:
001CC0r 2                       .byte   $7F,$00,$00,$00
001CC0r 2               POLY_SIN:
001CC0r 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001CC0r 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001CC0r 2                       .byte   $E1,$83,$49,$0F,$DB
001CC0r 2               .else
001CC0r 2               CON_PI_HALF:
001CC0r 2                       .byte   $81,$49,$0F,$DA,$A2
001CC0r 2               CON_PI_DOUB:
001CC0r 2                       .byte   $83,$49,$0F,$DA,$A2
001CC0r 2               QUARTER:
001CC0r 2                       .byte   $7F,$00,$00,$00,$00
001CC0r 2               POLY_SIN:
001CC0r 2                       .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001CC0r 2                       .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001CC0r 2                       .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001CC0r 2                       .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001CC0r 2                 .ifndef CONFIG_11
001CC0r 2               ; no easter egg text before BASIC 1.1
001CC0r 2                 .elseif !.def(CONFIG_2A)
001CC0r 2               ; ASCII encoded easter egg
001CC0r 2               MICROSOFT:
001CC0r 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001CC0r 2                       .byte   $CE,$CA
001CC0r 2                 .else
001CC0r 2               ; PET encoded easter egg text since CBM2
001CC0r 2               MICROSOFT:
001CC0r 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001CC0r 2                       .byte   $89,$CD
001CC0r 2                 .endif
001CC0r 2               .endif
001CC0r 2               
001CC0r 2               .ifndef AIM65
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ; "ATN" FUNCTION
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ATN:
001CC0r 2                       lda     FACSIGN
001CC0r 2                       pha
001CC0r 2                       bpl     L3FDB
001CC0r 2                       jsr     NEGOP
001CC0r 2               L3FDB:
001CC0r 2                       lda     FAC
001CC0r 2                       pha
001CC0r 2                       cmp     #$81
001CC0r 2                       bcc     L3FE9
001CC0r 2                       lda     #<CON_ONE
001CC0r 2                       ldy     #>CON_ONE
001CC0r 2                       jsr     FDIV
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               ; 0 <= X <= 1
001CC0r 2               ; 0 <= ATN(X) <= PI/8
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               L3FE9:
001CC0r 2                       lda     #<POLY_ATN
001CC0r 2                       ldy     #>POLY_ATN
001CC0r 2                       jsr     POLYNOMIAL_ODD
001CC0r 2                       pla
001CC0r 2                       cmp     #$81
001CC0r 2                       bcc     L3FFC
001CC0r 2                       lda     #<CON_PI_HALF
001CC0r 2                       ldy     #>CON_PI_HALF
001CC0r 2                       jsr     FSUB
001CC0r 2               L3FFC:
001CC0r 2                       pla
001CC0r 2                       bpl     L4002
001CC0r 2                       jmp     NEGOP
001CC0r 2               L4002:
001CC0r 2                       rts
001CC0r 2               
001CC0r 2               ; ----------------------------------------------------------------------------
001CC0r 2               POLY_ATN:
001CC0r 2               .ifdef CONFIG_SMALL
001CC0r 2                       .byte   $08
001CC0r 2               		.byte	$78,$3A,$C5,$37
001CC0r 2               		.byte	$7B,$83,$A2,$5C
001CC0r 2               		.byte	$7C,$2E,$DD,$4D
001CC0r 2               		.byte	$7D,$99,$B0,$1E
001CC0r 2               		.byte	$7D,$59,$ED,$24
001CC0r 2               		.byte	$7E,$91,$72,$00
001CC0r 2               		.byte	$7E,$4C,$B9,$73
001CC0r 2               		.byte	$7F,$AA,$AA,$53
001CC0r 2               		.byte	$81,$00,$00,$00
001CC0r 2               .else
001CC0r 2                       .byte   $0B
001CC0r 2               		.byte	$76,$B3,$83,$BD,$D3
001CC0r 2               		.byte	$79,$1E,$F4,$A6,$F5
001CC0r 2               		.byte	$7B,$83,$FC,$B0,$10
001CC0r 2                       .byte   $7C,$0C,$1F,$67,$CA
001CC0r 2               		.byte	$7C,$DE,$53,$CB,$C1
001CC0r 2               		.byte	$7D,$14,$64,$70,$4C
001CC0r 2               		.byte	$7D,$B7,$EA,$51,$7A
001CC0r 2               		.byte	$7D,$63,$30,$88,$7E
001CC0r 2               		.byte	$7E,$92,$44,$99,$3A
001CC0r 2               		.byte	$7E,$4C,$CC,$91,$C7
001CC0r 2               		.byte	$7F,$AA,$AA,$AA,$13
001CC0r 2                       .byte   $81,$00,$00,$00,$00
001CC0r 2               .endif
001CC0r 2               
001CC0r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001CC0r 2               		.byte	$00 ; XXX
001CC0r 2               .endif
001CC0r 2               .endif
001CC0r 2               .endif
001CC0r 2               
001CC0r 1               .include "init.s"
001CC0r 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2                   .ifndef AIM65
000000r 2                     .ifndef SYM1
000000r 2                       lda     #<QT_WRITTEN_BY
000000r 2                       ldy     #>QT_WRITTEN_BY
000000r 2                       jsr     STROUT
000000r 2                     .endif
000000r 2                   .endif
000000r 2                 .endif
000000r 2               .endif
000000r 2               COLD_START:
000000r 2               .ifdef SYM1
000000r 2  20 86 8B             jsr     ACCESS
000003r 2               .endif
000003r 2               .ifdef KBD
000003r 2                       lda     #<LFD81
000003r 2                       sta     $03A0
000003r 2                       lda     #>LFD81
000003r 2                       sta     $03A1
000003r 2                       lda     #$20
000003r 2                       sta     $0480
000003r 2                       lda     $0352
000003r 2                       sta     $04
000003r 2                       lda     $0353
000003r 2                       sta     $05
000003r 2               .else
000003r 2                 .ifndef CBM2
000003r 2  A2 FF                ldx     #$FF
000005r 2  86 8A                stx     CURLIN+1
000007r 2                 .endif
000007r 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
000007r 2                       ldx     #$FB
000007r 2                 .elseif .def(AIM65)
000007r 2                       ldx     #$FE
000007r 2                 .endif
000007r 2  9A                   txs
000008r 2                 .ifndef CONFIG_CBM_ALL
000008r 2  A9 rr                lda     #<COLD_START
00000Ar 2  A0 rr                ldy     #>COLD_START
00000Cr 2  85 01                sta     GORESTART+1
00000Er 2  84 02                sty     GORESTART+2
000010r 2                   .ifndef AIM65
000010r 2  85 04                sta     GOSTROUT+1
000012r 2  84 05                sty     GOSTROUT+2
000014r 2  A9 rr                lda     #<AYINT
000016r 2  A0 rr                ldy     #>AYINT
000018r 2  85 06                sta     GOAYINT
00001Ar 2  84 07                sty     GOAYINT+1
00001Cr 2  A9 rr                lda     #<GIVAYF
00001Er 2  A0 rr                ldy     #>GIVAYF
000020r 2  85 08                sta     GOGIVEAYF
000022r 2  84 09                sty     GOGIVEAYF+1
000024r 2                   .endif
000024r 2                 .endif
000024r 2  A9 4C                lda     #$4C
000026r 2                 .ifdef CONFIG_CBM_ALL
000026r 2                       sta     JMPADRS
000026r 2                 .endif
000026r 2  85 00                sta     GORESTART
000028r 2                 .ifdef AIM65
000028r 2                       sta     JMPADRS
000028r 2                       sta     ATN
000028r 2                       sta     GOSTROUT
000028r 2                 .else
000028r 2                 .ifndef CONFIG_CBM_ALL
000028r 2  85 03                sta     GOSTROUT
00002Ar 2  85 A4                sta     JMPADRS
00002Cr 2                 .endif
00002Cr 2                 .ifdef SYM1
00002Cr 2  85 C3                sta     USR1
00002Er 2  85 C9                sta     USR3
000030r 2  85 C6                sta     USR2
000032r 2                 .endif
000032r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000032r 2  85 0A                sta     USR
000034r 2                 .endif
000034r 2                 .endif
000034r 2               
000034r 2                 .ifndef CONFIG_RAM
000034r 2                   .ifdef APPLE
000034r 2                         lda     #<USR_FUNC
000034r 2                         ldy     #>USR_FUNC
000034r 2                   .else
000034r 2  A9 rr                  lda     #<IQERR
000036r 2  A0 rr                  ldy     #>IQERR
000038r 2                   .endif
000038r 2                   .ifdef AIM65
000038r 2                         sta     ATN+1
000038r 2                         sty     ATN+2
000038r 2                         sta     GOSTROUT+1
000038r 2                         sty     GOSTROUT+2
000038r 2                   .else
000038r 2  85 0B                  sta     USR+1
00003Ar 2  84 0C                  sty     USR+2
00003Cr 2                     .ifdef SYM1
00003Cr 2  85 C4                  sta     USR1+1
00003Er 2  84 C5                  sty     USR1+2
000040r 2  A9 87                  lda     #<DUMPT
000042r 2  A0 8E                  ldy     #>DUMPT
000044r 2  85 C7                  sta     USR2+1
000046r 2  84 C8                  sty     USR2+2
000048r 2  A9 78                  lda     #<L8C78
00004Ar 2  A0 8C                  ldy     #>L8C78
00004Cr 2  85 CA                  sta     USR3+1
00004Er 2  84 CB                  sty     USR3+2
000050r 2                     .endif
000050r 2                   .endif
000050r 2                 .endif
000050r 2                 .ifndef CBM1
000050r 2  A9 48                lda     #WIDTH
000052r 2  85 1A                sta     Z17
000054r 2  A9 38                lda     #WIDTH2
000056r 2  85 1B                sta     Z18
000058r 2                 .endif
000058r 2                 .ifdef EATER
000058r 2                       jsr     LCDINIT
000058r 2                 .endif
000058r 2               .endif
000058r 2               
000058r 2               ; All non-CONFIG_SMALL versions of BASIC have
000058r 2               ; the same bug here: While the number of bytes
000058r 2               ; to be copied is correct for CONFIG_SMALL,
000058r 2               ; it is one byte short on non-CONFIG_SMALL:
000058r 2               ; It seems the "ldx" value below has been
000058r 2               ; hardcoded. So on these configurations,
000058r 2               ; the last byte of GENERIC_RNDSEED, which
000058r 2               ; is 5 bytes instead of 4, does not get copied -
000058r 2               ; which is nothing major, because it is just
000058r 2               ; the least significant 8 bits of the mantissa
000058r 2               ; of the random number seed.
000058r 2               ; KBD added three bytes to CHRGET and removed
000058r 2               ; the random number seed, but only adjusted
000058r 2               ; the number of bytes by adding 3 - this
000058r 2               ; copies four bytes too many, which is no
000058r 2               ; problem.
000058r 2               .ifdef CONFIG_SMALL
000058r 2                 .ifdef KBD
000058r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000058r 2                 .else
000058r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000058r 2                 .endif
000058r 2               .else
000058r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
00005Ar 2               .endif
00005Ar 2               L4098:
00005Ar 2  BD rr rr             lda     GENERIC_CHRGET-1,x
00005Dr 2  95 CB                sta     CHRGET-1,x
00005Fr 2  CA                   dex
000060r 2  D0 F8                bne     L4098
000062r 2               .ifdef CONFIG_2
000062r 2  A9 03                lda     #$03
000064r 2  85 A3                sta     DSCLEN
000066r 2               .endif
000066r 2               .ifndef KBD
000066r 2  8A                   txa
000067r 2  85 B8                sta     SHIFTSIGNEXT
000069r 2                 .ifdef CONFIG_CBM_ALL
000069r 2                       sta     CURDVC
000069r 2                 .endif
000069r 2  85 68                sta     LASTPT+1
00006Br 2                 .ifndef AIM65
00006Br 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
00006Br 2  85 18                sta     Z15
00006Dr 2                 .endif
00006Dr 2                 .endif
00006Dr 2                 .ifndef CONFIG_11
00006Dr 2                       sta     POSX
00006Dr 2                 .endif
00006Dr 2  48                   pha
00006Er 2  85 17                sta     Z14
000070r 2                 .ifndef CBM2
000070r 2                  .ifndef AIM65
000070r 2                  .ifndef SYM1
000070r 2                   .ifndef MICROTAN
000070r 2                       lda     #$03
000070r 2                       sta     DSCLEN
000070r 2                   .endif
000070r 2                  .endif
000070r 2                  .endif
000070r 2                   .ifndef CONFIG_11
000070r 2                       lda     #$2C
000070r 2                       sta     LINNUM+1
000070r 2                   .endif
000070r 2  20 rr rr             jsr     CRDO
000073r 2                 .endif
000073r 2                 .ifdef CBM2
000073r 2                       inx
000073r 2                       stx     INPUTBUFFER-3
000073r 2                       stx     INPUTBUFFER-4
000073r 2                 .endif
000073r 2                 .ifdef APPLE
000073r 2                       lda     #$01
000073r 2                       sta     INPUTBUFFER-3
000073r 2                       sta     INPUTBUFFER-4
000073r 2                 .endif
000073r 2  A2 69                ldx     #TEMPST
000075r 2  86 66                stx     TEMPPT
000077r 2               .ifndef CONFIG_CBM_ALL
000077r 2  A9 rr                lda     #<QT_MEMORY_SIZE
000079r 2  A0 rr                ldy     #>QT_MEMORY_SIZE
00007Br 2  20 rr rr             jsr     STROUT
00007Er 2                 .ifdef APPLE
00007Er 2                       jsr     INLINX
00007Er 2                 .else
00007Er 2  20 rr rr             jsr     NXIN
000081r 2                 .endif
000081r 2  86 D3                stx     TXTPTR
000083r 2  84 D4                sty     TXTPTR+1
000085r 2  20 CC 00             jsr     CHRGET
000088r 2                 .ifndef AIM65
000088r 2                   .ifndef SYM1
000088r 2                       cmp     #$41
000088r 2                       beq     PR_WRITTEN_BY
000088r 2                   .endif
000088r 2                 .endif
000088r 2  A8                   tay
000089r 2  D0 25                bne     L40EE
00008Br 2               .endif
00008Br 2               .ifndef CBM2
00008Br 2  A9 00                lda     #<RAMSTART2
00008Dr 2               .endif
00008Dr 2  A0 02                ldy     #>RAMSTART2
00008Fr 2               .ifdef CONFIG_2
00008Fr 2  85 7B                sta     TXTTAB
000091r 2  84 7C                sty     TXTTAB+1
000093r 2               .endif
000093r 2  85 1C                sta     LINNUM
000095r 2  84 1D                sty     LINNUM+1
000097r 2               .ifdef CBM2
000097r 2               		tay
000097r 2               .else
000097r 2  A0 00                ldy     #$00
000099r 2               .endif
000099r 2               L40D7:
000099r 2  E6 1C                inc     LINNUM
00009Br 2  D0 02                bne     L40DD
00009Dr 2  E6 1D                inc     LINNUM+1
00009Fr 2               .ifdef CBM1
00009Fr 2               ; CBM: hard RAM top limit is $8000
00009Fr 2                       lda     LINNUM+1
00009Fr 2                       cmp     #$80
00009Fr 2                       beq     L40FA
00009Fr 2               .endif
00009Fr 2               .ifdef CBM2
00009Fr 2               ; optimized version of the CBM1 code
00009Fr 2                       bmi     L40FA
00009Fr 2               .endif
00009Fr 2               .if .def(AIM65)
00009Fr 2               ; AIM65: hard RAM top limit is $A000
00009Fr 2                       lda     LINNUM+1
00009Fr 2                       cmp     #$A0
00009Fr 2                       beq     L40FA
00009Fr 2               .endif
00009Fr 2               L40DD:
00009Fr 2               .ifdef CONFIG_2
00009Fr 2  A9 55                lda     #$55 ; 01010101 / 10101010
0000A1r 2               .else
0000A1r 2                       lda     #$92 ; 10010010 / 00100100
0000A1r 2               .endif
0000A1r 2  91 1C                sta     (LINNUM),y
0000A3r 2  D1 1C                cmp     (LINNUM),y
0000A5r 2  D0 15                bne     L40FA
0000A7r 2  0A                   asl     a
0000A8r 2  91 1C                sta     (LINNUM),y
0000AAr 2  D1 1C                cmp     (LINNUM),y
0000ACr 2               .ifdef CONFIG_CBM_ALL
0000ACr 2                       beq     L40D7
0000ACr 2               .else
0000ACr 2                 .ifndef CONFIG_11
0000ACr 2                       beq     L40D7; old: faster
0000ACr 2                       bne     L40FA
0000ACr 2                 .else
0000ACr 2  D0 0E                bne     L40FA; new: slower
0000AEr 2  F0 E9                beq     L40D7
0000B0r 2                 .endif
0000B0r 2               L40EE:
0000B0r 2  20 D2 00             jsr     CHRGOT
0000B3r 2  20 rr rr             jsr     LINGET
0000B6r 2  A8                   tay
0000B7r 2  F0 03                beq     L40FA
0000B9r 2  4C rr rr             jmp     SYNERR
0000BCr 2               .endif
0000BCr 2               L40FA:
0000BCr 2  A5 1C                lda     LINNUM
0000BEr 2  A4 1D                ldy     LINNUM+1
0000C0r 2  85 87                sta     MEMSIZ
0000C2r 2  84 88                sty     MEMSIZ+1
0000C4r 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
0000C4r 2                       sta     FRETOP
0000C4r 2                       sty     FRETOP+1
0000C4r 2               .endif
0000C4r 2               L4106:
0000C4r 2               .ifndef CONFIG_CBM_ALL
0000C4r 2                 .ifdef APPLE
0000C4r 2                       lda     #$FF
0000C4r 2                       jmp     L2829
0000C4r 2                       .word	STROUT ; PATCH!
0000C4r 2                       jsr     NXIN
0000C4r 2                 .else
0000C4r 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
0000C6r 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
0000C8r 2  20 rr rr             jsr     STROUT
0000CBr 2  20 rr rr             jsr     NXIN
0000CEr 2                 .endif
0000CEr 2  86 D3                stx     TXTPTR
0000D0r 2  84 D4                sty     TXTPTR+1
0000D2r 2  20 CC 00             jsr     CHRGET
0000D5r 2  A8                   tay
0000D6r 2  F0 1C                beq     L4136
0000D8r 2  20 rr rr             jsr     LINGET
0000DBr 2  A5 1D                lda     LINNUM+1
0000DDr 2  D0 E5                bne     L4106
0000DFr 2  A5 1C                lda     LINNUM
0000E1r 2  C9 10                cmp     #$10
0000E3r 2  90 DF                bcc     L4106
0000E5r 2               L2829:
0000E5r 2  85 1A                sta     Z17
0000E7r 2               L4129:
0000E7r 2                 .ifdef AIM65
0000E7r 2                       sbc     #$0A
0000E7r 2                 .else
0000E7r 2  E9 0E                sbc     #$0E
0000E9r 2                 .endif
0000E9r 2  B0 FC                bcs     L4129
0000EBr 2  49 FF                eor     #$FF
0000EDr 2                 .ifdef AIM65
0000EDr 2                       sbc     #$08
0000EDr 2                 .else
0000EDr 2  E9 0C                sbc     #$0C
0000EFr 2                 .endif
0000EFr 2  18                   clc
0000F0r 2  65 1A                adc     Z17
0000F2r 2  85 1B                sta     Z18
0000F4r 2               .endif
0000F4r 2               L4136:
0000F4r 2               .ifdef CONFIG_RAM
0000F4r 2                       lda     #<QT_WANT
0000F4r 2                       ldy     #>QT_WANT
0000F4r 2                       jsr     STROUT
0000F4r 2                       jsr     NXIN
0000F4r 2                       stx     TXTPTR
0000F4r 2                       sty     TXTPTR+1
0000F4r 2                       jsr     CHRGET
0000F4r 2                       ldx     #<RAMSTART1
0000F4r 2                       ldy     #>RAMSTART1
0000F4r 2                       cmp     #'Y'
0000F4r 2                       beq     L4183
0000F4r 2                       cmp     #'A'
0000F4r 2                       beq     L4157
0000F4r 2                       cmp     #'N'
0000F4r 2                       bne     L4136
0000F4r 2               L4157:
0000F4r 2                       ldx     #<IQERR
0000F4r 2                       ldy     #>IQERR
0000F4r 2                       stx     UNFNC_ATN
0000F4r 2                       sty     UNFNC_ATN+1
0000F4r 2                       ldx     #<ATN	; overwrite starting
0000F4r 2                       ldy     #>ATN	; with ATN
0000F4r 2                       cmp     #'A'
0000F4r 2                       beq     L4183
0000F4r 2                       ldx     #<IQERR
0000F4r 2                       ldy     #>IQERR
0000F4r 2                       stx     UNFNC_COS
0000F4r 2                       sty     UNFNC_COS+1
0000F4r 2                       stx     UNFNC_TAN
0000F4r 2                       sty     UNFNC_TAN+1
0000F4r 2                       stx     UNFNC_SIN
0000F4r 2                       sty     UNFNC_SIN+1
0000F4r 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000F4r 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000F4r 2               L4183:
0000F4r 2               .else
0000F4r 2  A2 00                ldx     #<RAMSTART2
0000F6r 2  A0 02                ldy     #>RAMSTART2
0000F8r 2               .endif
0000F8r 2  86 7B                stx     TXTTAB
0000FAr 2  84 7C                sty     TXTTAB+1
0000FCr 2  A0 00                ldy     #$00
0000FEr 2  98                   tya
0000FFr 2  91 7B                sta     (TXTTAB),y
000101r 2  E6 7B                inc     TXTTAB
000103r 2               .ifndef CBM2
000103r 2  D0 02                bne     L4192
000105r 2  E6 7C                inc     TXTTAB+1
000107r 2               L4192:
000107r 2               .endif
000107r 2               .if CONFIG_SCRTCH_ORDER = 1
000107r 2  20 rr rr             jsr     SCRTCH
00010Ar 2               .endif
00010Ar 2  A5 7B                lda     TXTTAB
00010Cr 2  A4 7C                ldy     TXTTAB+1
00010Er 2  20 rr rr             jsr     REASON
000111r 2               .ifdef CBM2
000111r 2                       lda     #<QT_BASIC
000111r 2                       ldy     #>QT_BASIC
000111r 2                       jsr     STROUT
000111r 2               .else
000111r 2  20 rr rr             jsr     CRDO
000114r 2               .endif
000114r 2  A5 87                lda     MEMSIZ
000116r 2  38                   sec
000117r 2  E5 7B                sbc     TXTTAB
000119r 2  AA                   tax
00011Ar 2  A5 88                lda     MEMSIZ+1
00011Cr 2  E5 7C                sbc     TXTTAB+1
00011Er 2  20 rr rr             jsr     LINPRT
000121r 2  A9 rr                lda     #<QT_BYTES_FREE
000123r 2  A0 rr                ldy     #>QT_BYTES_FREE
000125r 2  20 rr rr             jsr     STROUT
000128r 2               .if CONFIG_SCRTCH_ORDER = 2
000128r 2                       jsr     SCRTCH
000128r 2               .endif
000128r 2               .ifdef CONFIG_CBM_ALL
000128r 2                       jmp     RESTART
000128r 2               .elseif .def(AIM65)
000128r 2                       lda     #<CRDO
000128r 2                       ldy     #>CRDO
000128r 2                       sta     GORESTART+1
000128r 2                       sty     GORESTART+2
000128r 2                       jmp     RESTART
000128r 2               .else
000128r 2  A9 rr                lda     #<STROUT
00012Ar 2  A0 rr                ldy     #>STROUT
00012Cr 2  85 04                sta     GOSTROUT+1
00012Er 2  84 05                sty     GOSTROUT+2
000130r 2                 .if CONFIG_SCRTCH_ORDER = 3
000130r 2                        jsr     SCRTCH
000130r 2                 .endif
000130r 2  A9 rr                lda     #<RESTART
000132r 2  A0 rr                ldy     #>RESTART
000134r 2  85 01                sta     GORESTART+1
000136r 2  84 02                sty     GORESTART+2
000138r 2  6C 01 00             jmp     (GORESTART+1)
00013Br 2               .endif
00013Br 2               
00013Br 2                 .if .def(CONFIG_RAM) || .def(OSI)
00013Br 2               ; OSI is compiled for ROM, but includes
00013Br 2               ; this unused string
00013Br 2               QT_WANT:
00013Br 2                       .byte   "WANT SIN-COS-TAN-ATN"
00013Br 2                       .byte   0
00013Br 2                 .endif
00013Br 2               QT_WRITTEN_BY:
00013Br 2                 .ifndef CONFIG_CBM_ALL
00013Br 2                 .if !(.def(AIM65) || .def(SYM1))
00013Br 2                   .ifdef APPLE
00013Br 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
00013Br 2               		.byte	CR,0
00013Br 2                   .else
00013Br 2                       .byte   CR,LF,$0C ; FORM FEED
00013Br 2                     .ifndef CONFIG_11
00013Br 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
00013Br 2                     .else
00013Br 2                       .byte   "WRITTEN BY WEILAND & GATES"
00013Br 2                     .endif
00013Br 2                       .byte   CR,LF,0
00013Br 2                   .endif
00013Br 2                  .endif
00013Br 2               QT_MEMORY_SIZE:
00013Br 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
00013Fr 2  52 59 20 53  
000143r 2  49 5A 45     
000146r 2  00                   .byte   0
000147r 2               QT_TERMINAL_WIDTH:
000147r 2                   .if !(.def(AIM65) || .def(SYM1))
000147r 2                       .byte   "TERMINAL "
000147r 2                   .endif
000147r 2  57 49 44 54          .byte   "WIDTH"
00014Br 2  48           
00014Cr 2  00                   .byte   0
00014Dr 2                 .endif
00014Dr 2               QT_BYTES_FREE:
00014Dr 2  20 42 59 54          .byte   " BYTES FREE"
000151r 2  45 53 20 46  
000155r 2  52 45 45     
000158r 2                 .ifdef CBM1
000158r 2                 .elseif .def(CBM2)
000158r 2                       .byte   CR,0
000158r 2                 .elseif .def(APPLE)
000158r 2                       .byte   0
000158r 2                 .else
000158r 2  0D 0A 0D 0A          .byte   CR,LF,CR,LF
00015Cr 2                 .endif
00015Cr 2               QT_BASIC:
00015Cr 2                 .ifdef OSI
00015Cr 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
00015Cr 2                 .endif
00015Cr 2                 .ifdef KIM
00015Cr 2                       .byte   "MOS TECH 6502 BASIC V1.1"
00015Cr 2                 .endif
00015Cr 2                 .ifdef MICROTAN
00015Cr 2                       .byte   "MICROTAN BASIC"
00015Cr 2                 .endif
00015Cr 2                 .ifdef AIM65
00015Cr 2                       .byte   "  AIM 65 BASIC V1.1"
00015Cr 2                 .endif
00015Cr 2                 .ifdef SYM1
00015Cr 2  42 41 53 49          .byte   "BASIC V1.1"
000160r 2  43 20 56 31  
000164r 2  2E 31        
000166r 2                 .endif
000166r 2                 .ifdef CBM1
000166r 2                       .byte   $13 ; HOME
000166r 2                       .byte   "*** COMMODORE BASIC ***"
000166r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
000166r 2                 .endif
000166r 2                 .ifdef CBM2
000166r 2                       .byte   "### COMMODORE BASIC ###"
000166r 2                       .byte   CR,CR,0
000166r 2                 .endif
000166r 2                 .ifdef APPLE
000166r 2                       .byte   LF,CR,LF
000166r 2               		.byte	"APPLE BASIC V1.1"
000166r 2                 .endif
000166r 2                 .ifndef CONFIG_CBM_ALL
000166r 2  0D 0A                .byte   CR,LF
000168r 2                   .ifdef MICROTAN
000168r 2                       .byte   "(C) 1980 MICROSOFT"
000168r 2                   .elseif .def(AIM65)
000168r 2                       .byte   0
000168r 2                       .byte   "(C) 1978 MICROSOFT"
000168r 2                   .elseif .def(SYM1)
000168r 2  43 4F 50 59          .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
00016Cr 2  52 49 47 48  
000170r 2  54 20 31 39  
00018Dr 2                   .else
00018Dr 2                       .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
00018Dr 2                   .endif
00018Dr 2  0D 0A                .byte   CR,LF
00018Fr 2                     .ifndef AIM65
00018Fr 2  00                   .byte   0
000190r 2                     .endif
000190r 2                 .endif
000190r 2               .endif
000190r 2               
000190r 1               .include "extra.s"
000190r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef MICROTAN
000000r 2               .include "microtan_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef AIM65
000000r 2               .include "aim65_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef SYM1
000000r 2  00 00 00             .byte   0,0,0
000003r 2               .endif
000003r 2               
000003r 2               .ifdef EATER
000003r 2               .include "bios.s"
000003r 2               .endif
000003r 2               
000003r 1               .include "lcd.s"
000003r 2               .segment "CODE"
001CC0r 2               .ifdef EATER
001CC0r 2               PORTB = $6000
001CC0r 2               DDRB = $6002
001CC0r 2               E  = %01000000
001CC0r 2               RW = %00100000
001CC0r 2               RS = %00010000
001CC0r 2               
001CC0r 2               lcd_wait:
001CC0r 2                 pha
001CC0r 2                 lda #%11110000  ; LCD data is input
001CC0r 2                 sta DDRB
001CC0r 2               lcdbusy:
001CC0r 2                 lda #RW
001CC0r 2                 sta PORTB
001CC0r 2                 lda #(RW | E)
001CC0r 2                 sta PORTB
001CC0r 2                 lda PORTB       ; Read high nibble
001CC0r 2                 pha             ; and put on stack since it has the busy flag
001CC0r 2                 lda #RW
001CC0r 2                 sta PORTB
001CC0r 2                 lda #(RW | E)
001CC0r 2                 sta PORTB
001CC0r 2                 lda PORTB       ; Read low nibble
001CC0r 2                 pla             ; Get high nibble off stack
001CC0r 2                 and #%00001000
001CC0r 2                 bne lcdbusy
001CC0r 2               
001CC0r 2                 lda #RW
001CC0r 2                 sta PORTB
001CC0r 2                 lda #%11111111  ; LCD data is output
001CC0r 2                 sta DDRB
001CC0r 2                 pla
001CC0r 2                 rts
001CC0r 2               
001CC0r 2               LCDINIT:
001CC0r 2                 lda #$ff ; Set all pins on port B to output
001CC0r 2                 sta DDRB
001CC0r 2               
001CC0r 2                 lda #%00000011 ; Set 8-bit mode
001CC0r 2                 sta PORTB
001CC0r 2                 ora #E
001CC0r 2                 sta PORTB
001CC0r 2                 and #%00001111
001CC0r 2                 sta PORTB
001CC0r 2               
001CC0r 2                 lda #%00000011 ; Set 8-bit mode
001CC0r 2                 sta PORTB
001CC0r 2                 ora #E
001CC0r 2                 sta PORTB
001CC0r 2                 and #%00001111
001CC0r 2                 sta PORTB
001CC0r 2               
001CC0r 2                 lda #%00000011 ; Set 8-bit mode
001CC0r 2                 sta PORTB
001CC0r 2                 ora #E
001CC0r 2                 sta PORTB
001CC0r 2                 and #%00001111
001CC0r 2                 sta PORTB
001CC0r 2               
001CC0r 2                 ; Okay, now we're really in 8-bit mode.
001CC0r 2                 ; Command to get to 4-bit mode ought to work now
001CC0r 2                 lda #%00000010 ; Set 4-bit mode
001CC0r 2                 sta PORTB
001CC0r 2                 ora #E
001CC0r 2                 sta PORTB
001CC0r 2                 and #%00001111
001CC0r 2                 sta PORTB
001CC0r 2               
001CC0r 2                 lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
001CC0r 2                 jsr lcd_instruction
001CC0r 2                 lda #%00001110 ; Display on; cursor on; blink off
001CC0r 2                 jsr lcd_instruction
001CC0r 2                 lda #%00000110 ; Increment and shift cursor; don't shift display
001CC0r 2                 jsr lcd_instruction
001CC0r 2                 lda #%00000001 ; Clear display
001CC0r 2                 jsr lcd_instruction
001CC0r 2                 rts
001CC0r 2               
001CC0r 2               
001CC0r 2               LCDCMD:
001CC0r 2                 jsr GETBYT
001CC0r 2                 txa
001CC0r 2               lcd_instruction:
001CC0r 2                 jsr lcd_wait
001CC0r 2                 pha
001CC0r 2                 lsr
001CC0r 2                 lsr
001CC0r 2                 lsr
001CC0r 2                 lsr            ; Send high 4 bits
001CC0r 2                 sta PORTB
001CC0r 2                 ora #E         ; Set E bit to send instruction
001CC0r 2                 sta PORTB
001CC0r 2                 eor #E         ; Clear E bit
001CC0r 2                 sta PORTB
001CC0r 2                 pla
001CC0r 2                 and #%00001111 ; Send low 4 bits
001CC0r 2                 sta PORTB
001CC0r 2                 ora #E         ; Set E bit to send instruction
001CC0r 2                 sta PORTB
001CC0r 2                 eor #E         ; Clear E bit
001CC0r 2                 sta PORTB
001CC0r 2                 rts
001CC0r 2               
001CC0r 2               LCDPRINT:
001CC0r 2                 jsr GETBYT
001CC0r 2                 txa
001CC0r 2                 jsr lcd_wait
001CC0r 2                 pha
001CC0r 2                 lsr
001CC0r 2                 lsr
001CC0r 2                 lsr
001CC0r 2                 lsr             ; Send high 4 bits
001CC0r 2                 ora #RS         ; Set RS
001CC0r 2                 sta PORTB
001CC0r 2                 ora #E          ; Set E bit to send instruction
001CC0r 2                 sta PORTB
001CC0r 2                 eor #E          ; Clear E bit
001CC0r 2                 sta PORTB
001CC0r 2                 pla
001CC0r 2                 and #%00001111  ; Send low 4 bits
001CC0r 2                 ora #RS         ; Set RS
001CC0r 2                 sta PORTB
001CC0r 2                 ora #E          ; Set E bit to send instruction
001CC0r 2                 sta PORTB
001CC0r 2                 eor #E          ; Clear E bit
001CC0r 2                 sta PORTB
001CC0r 2                 rts
001CC0r 2               
001CC0r 2               .endif
001CC0r 2               
001CC0r 1               
