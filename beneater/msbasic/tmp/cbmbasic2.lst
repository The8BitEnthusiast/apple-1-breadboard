ca65 V2.19 - Git 3dfe03300
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 3               ; configuration
000000r 3               CONFIG_2A := 1
000000r 3               
000000r 3               CONFIG_CBM_ALL := 1
000000r 3               
000000r 3               CONFIG_DATAFLG := 1
000000r 3               CONFIG_EASTER_EGG := 1
000000r 3               CONFIG_FILE := 1; support PRINT#, INPUT#, GET#, CMD
000000r 3               CONFIG_NO_CR := 1; terminal doesn't need explicit CRs on line ends
000000r 3               CONFIG_NO_LINE_EDITING := 1; support for "@", "_", BEL etc.
000000r 3               CONFIG_NO_READ_Y_IS_ZERO_HACK := 1
000000r 3               CONFIG_PEEK_SAVE_LINNUM := 1
000000r 3               CONFIG_SCRTCH_ORDER := 2
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $0D
000000r 3               ZP_START3 = $03
000000r 3               ZP_START4 = $13
000000r 3               
000000r 3               ; extra/override ZP variables
000000r 3               CURDVC			:= $000E
000000r 3               TISTR			:= $008D
000000r 3               Z96				:= $0096
000000r 3               POSX			:= $00C6
000000r 3               TXPSV			:= LASTOP
000000r 3               USR				:= GORESTART ; XXX
000000r 3               
000000r 3               ; inputbuffer
000000r 3               INPUTBUFFER     := $0200
000000r 3               
000000r 3               ; constants
000000r 3               SPACE_FOR_GOSUB := $3E
000000r 3               STACK_TOP		:= $FA
000000r 3               WIDTH			:= 40
000000r 3               WIDTH2			:= 30
000000r 3               
000000r 3               RAMSTART2		:= $0400
000000r 3               
000000r 3               ; magic memory locations
000000r 3               ENTROPY = $E844
000000r 3               
000000r 3               ; monitor functions
000000r 3               OPEN	:= $FFC0
000000r 3               CLOSE	:= $FFC3
000000r 3               CHKIN	:= $FFC6
000000r 3               CHKOUT	:= $FFC9
000000r 3               CLRCH	:= $FFCC
000000r 3               CHRIN	:= $FFCF
000000r 3               CHROUT	:= $FFD2
000000r 3               LOAD	:= $FFD5
000000r 3               SAVE	:= $FFD8
000000r 3               VERIFY	:= $FFDB
000000r 3               SYS		:= $FFDE
000000r 3               ISCNTC	:= $FFE1
000000r 3               GETIN	:= $FFE4
000000r 3               CLALL	:= $FFE7
000000r 3               LE7F3	:= $E7F3; for CBM1
000000r 3               MONCOUT	:= CHROUT
000000r 3               MONRDKEY := GETIN
000000r 3               
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(eater)
000000r 2               EATER := 1
000000r 2               .include "defines_eater.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
00000D  2               Z15:
00000D  2  xx           	.res 1
00000E  2               .ifndef POSX; allow override
00000E  2               POSX:
00000E  2               .endif
00000E  2  xx           	.res 1
00000F  2               .ifndef Z17; allow override
00000F  2               Z17:
00000F  2               .endif
00000F  2  xx           	.res 1
000010  2               .ifndef Z18; allow override
000010  2               Z18:
000010  2               .endif
000010  2  xx           	.res 1
000011  2               LINNUM:
000011  2               .ifndef TXPSV; allow override
000011  2               TXPSV:
000011  2               .endif
000011  2  xx xx        	.res 2
000013  2               .ifndef INPUTBUFFER; allow override
000013  2               INPUTBUFFER:
000013  2               .endif
000013  2               
000013  2               .org ZP_START3
000003  2               
000003  2               CHARAC:
000003  2  xx           	.res 1
000004  2               ENDCHR:
000004  2  xx           	.res 1
000005  2               EOLPNTR:
000005  2  xx           	.res 1
000006  2               DIMFLG:
000006  2  xx           	.res 1
000007  2               VALTYP:
000007  2               .ifdef CONFIG_SMALL
000007  2               	.res 1
000007  2               .else
000007  2  xx xx        	.res 2
000009  2               .endif
000009  2               DATAFLG:
000009  2  xx           	.res 1
00000A  2               SUBFLG:
00000A  2  xx           	.res 1
00000B  2               INPUTFLG:
00000B  2  xx           	.res 1
00000C  2               CPRMASK:
00000C  2  xx           	.res 1
00000D  2               Z14:
00000D  2  xx           	.res 1
00000E  2               
00000E  2               .org ZP_START4
000013  2               
000013  2               TEMPPT:
000013  2  xx           	.res 1
000014  2               LASTPT:
000014  2  xx xx        	.res 2
000016  2               TEMPST:
000016  2  xx xx xx xx  	.res 9
00001A  2  xx xx xx xx  
00001E  2  xx           
00001F  2               INDEX:
00001F  2  xx xx        	.res 2
000021  2               DEST:
000021  2  xx xx        	.res 2
000023  2               RESULT:
000023  2  xx xx xx xx  	.res BYTES_FP
000027  2  xx           
000028  2               RESULT_LAST = RESULT + BYTES_FP-1
000028  2               TXTTAB:
000028  2  xx xx        	.res 2
00002A  2               VARTAB:
00002A  2  xx xx        	.res 2
00002C  2               ARYTAB:
00002C  2  xx xx        	.res 2
00002E  2               STREND:
00002E  2  xx xx        	.res 2
000030  2               FRETOP:
000030  2  xx xx        	.res 2
000032  2               FRESPC:
000032  2  xx xx        	.res 2
000034  2               MEMSIZ:
000034  2  xx xx        	.res 2
000036  2               CURLIN:
000036  2  xx xx        	.res 2
000038  2               OLDLIN:
000038  2  xx xx        	.res 2
00003A  2               OLDTEXT:
00003A  2  xx xx        	.res 2
00003C  2               Z8C:
00003C  2  xx xx        	.res 2
00003E  2               DATPTR:
00003E  2  xx xx        	.res 2
000040  2               INPTR:
000040  2  xx xx        	.res 2
000042  2               VARNAM:
000042  2  xx xx        	.res 2
000044  2               VARPNT:
000044  2  xx xx        	.res 2
000046  2               FORPNT:
000046  2  xx xx        	.res 2
000048  2               LASTOP:
000048  2  xx xx        	.res 2
00004A  2               CPRTYP:
00004A  2  xx           	.res 1
00004B  2               FNCNAM:
00004B  2               TEMP3:
00004B  2  xx xx        	.res 2
00004D  2               DSCPTR:
00004D  2               .ifdef CONFIG_SMALL
00004D  2               		.res 2
00004D  2               .else
00004D  2  xx xx xx     		.res 3
000050  2               .endif
000050  2               DSCLEN:
000050  2  xx xx        	.res 2
000052  2               .ifndef JMPADRS ; allow override
000052  2               JMPADRS			:= DSCLEN + 1
000052  2               .endif
000052  2               Z52:
000052  2  xx           	.res 1
000053  2               ARGEXTENSION:
000053  2               .ifndef CONFIG_SMALL
000053  2  xx           	.res 1
000054  2               .endif
000054  2               TEMP1:
000054  2  xx           	.res 1
000055  2               HIGHDS:
000055  2  xx xx        	.res 2
000057  2               HIGHTR:
000057  2  xx xx        	.res 2
000059  2               .ifndef CONFIG_SMALL
000059  2               TEMP2:
000059  2  xx           	.res 1
00005A  2               .endif
00005A  2               INDX:
00005A  2               TMPEXP:
00005A  2               .ifdef CONFIG_SMALL
00005A  2               TEMP2:
00005A  2               .endif
00005A  2  xx           	.res 1
00005B  2               EXPON:
00005B  2  xx           	.res 1
00005C  2               LOWTR:
00005C  2               .ifndef LOWTRX ; allow override
00005C  2               LOWTRX:
00005C  2               .endif
00005C  2  xx           	.res 1
00005D  2               EXPSGN:
00005D  2  xx           	.res 1
00005E  2               FAC:
00005E  2  xx xx xx xx  	.res BYTES_FP
000062  2  xx           
000063  2               FAC_LAST = FAC + BYTES_FP-1
000063  2               FACSIGN:
000063  2  xx           	.res 1
000064  2               SERLEN:
000064  2  xx           	.res 1
000065  2               SHIFTSIGNEXT:
000065  2  xx           	.res 1
000066  2               ARG:
000066  2  xx xx xx xx  	.res BYTES_FP
00006A  2  xx           
00006B  2               ARG_LAST = ARG + BYTES_FP-1
00006B  2               ARGSIGN:
00006B  2  xx           	.res 1
00006C  2               STRNG1:
00006C  2  xx xx        	.res 2
00006E  2               SGNCPR = STRNG1
00006E  2               FACEXTENSION = STRNG1+1
00006E  2               STRNG2:
00006E  2  xx xx        	.res 2
000070  2               .ifdef AIM65
000070  2               ATN:
000070  2               	.res 3
000070  2               ZBE:
000070  2               	.res 1
000070  2               .endif
000070  2               .ifdef SYM1
000070  2               USR1:
000070  2               	.res 3
000070  2               USR2:
000070  2               	.res 3
000070  2               USR3:
000070  2               	.res 3
000070  2               .endif
000070  2               CHRGET:
000070  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
000070  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
000070  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
000070  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
000070  2               
000070  2               
000070  2               
000070  1               
000070  1               .include "header.s"
000070  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2                       jmp     COLD_START
000000r 2                       jmp     RESTART
000000r 2                       .word   AYINT,GIVAYF
000000r 2               .endif
000000r 2               .ifdef SYM1
000000r 2                       jmp     PR_WRITTEN_BY
000000r 2               .endif
000000r 2               .ifdef EATER
000000r 2                       jmp COLD_START
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2  rr rr 49 4E  		keyword_rts "INPUT#", INPUTH
000008r 2  50 55 54 A3  
00000Cr 2  xx           
000005r 2               .endif
000005r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000009r 2  50 55 D4 xx  
000006r 2  rr rr 44 49  		keyword_rts "DIM", DIM
00000Ar 2  CD xx        
000007r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Br 2  41 C4 xx     
000008r 2               .ifdef APPLE
000008r 2               		keyword_rts "PLT", PLT
000008r 2               .else
000008r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Cr 2  D4 xx        
000009r 2               .endif
000009r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Dr 2  54 CF xx     
00000Ar 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Er 2  CE xx        
00000Br 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Fr 2  xx           
00000Cr 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
000010r 2  53 54 4F 52  
000014r 2  C5 xx        
00000Dr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000011r 2  53 55 C2 xx  
00000Er 2  rr rr 52 45  		keyword_rts "RETURN", POP
000012r 2  54 55 52 CE  
000016r 2  xx           
00000Fr 2               .ifdef APPLE
00000Fr 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Fr 2               .else
00000Fr 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000013r 2  CD xx        
000010r 2               .endif
000010r 2  rr rr 53 54  		keyword_rts "STOP", STOP
000014r 2  4F D0 xx     
000011r 2  rr rr 4F CE  		keyword_rts "ON", ON
000015r 2  xx           
000012r 2               .ifdef CONFIG_NULL
000012r 2               		keyword_rts "NULL", NULL
000012r 2               .endif
000012r 2               .ifdef KBD
000012r 2               		keyword_rts "PLOD", PLOD
000012r 2               		keyword_rts "PSAV", PSAV
000012r 2               		keyword_rts "VLOD", VLOD
000012r 2               		keyword_rts "VSAV", VSAV
000012r 2               .endif
000012r 2               .ifndef CONFIG_NO_POKE
000012r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000016r 2  49 D4 xx     
000013r 2               .endif
000013r 2               .ifndef KBD
000013r 2  D4 FF 4C 4F  		keyword_rts "LOAD", LOAD
000017r 2  41 C4 xx     
000014r 2  D7 FF 53 41  		keyword_rts "SAVE", SAVE
000018r 2  56 C5 xx     
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2  DA FF 56 45  		keyword_rts "VERIFY", VERIFY
000019r 2  52 49 46 D9  
00001Dr 2  xx           
000016r 2               .endif
000016r 2  rr rr 44 45  		keyword_rts "DEF", DEF
00001Ar 2  C6 xx        
000017r 2               .ifdef KBD
000017r 2               		keyword_rts "SLOD", SLOD
000017r 2               .endif
000017r 2               .ifndef CONFIG_NO_POKE
000017r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Br 2  4B C5 xx     
000018r 2               .endif
000018r 2               .ifdef CONFIG_FILE
000018r 2  rr rr 50 52  		keyword_rts "PRINT#", PRINTH
00001Cr 2  49 4E 54 A3  
000020r 2  xx           
000019r 2               .endif
000019r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Dr 2  49 4E D4 xx  
00001Ar 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Er 2  4E D4 xx     
00001Br 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Fr 2  53 D4 xx     
00001Cr 2               .ifdef CONFIG_CBM_ALL
00001Cr 2  rr rr 43 4C  		keyword_rts "CLR", CLEAR
000020r 2  D2 xx        
00001Dr 2               .else
00001Dr 2               		keyword_rts "CLEAR", CLEAR
00001Dr 2               .endif
00001Dr 2               .ifdef CONFIG_FILE
00001Dr 2  rr rr 43 4D  		keyword_rts "CMD", CMD
000021r 2  C4 xx        
00001Er 2  DD FF 53 59  		keyword_rts "SYS", SYS
000022r 2  D3 xx        
00001Fr 2  BF FF 4F 50  		keyword_rts "OPEN", OPEN
000023r 2  45 CE xx     
000020r 2  C2 FF 43 4C  		keyword_rts "CLOSE", CLOSE
000024r 2  4F 53 C5 xx  
000021r 2               .endif
000021r 2               .ifndef CONFIG_SMALL
000021r 2  rr rr 47 45  		keyword_rts "GET", GET
000025r 2  D4 xx        
000022r 2               .endif
000022r 2               .ifdef KBD
000022r 2               		keyword_rts "PRT", PRT
000022r 2               .endif
000022r 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000026r 2  D7 xx        
000023r 2               .ifdef EATER
000023r 2               		keyword_rts "LCDCMD", LCDCMD
000023r 2               		keyword_rts "LCDPRINT", LCDPRINT
000023r 2               .endif
000023r 2               
000023r 2               		count_tokens
000023r 2               
000023r 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000027r 2  xx           
000024r 2  54 CF xx     		keyword	"TO", TOKEN_TO
000025r 2  46 CE xx     		keyword	"FN", TOKEN_FN
000026r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
00002Ar 2  xx           
000027r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
00002Br 2  xx           
000028r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000029r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
00002Dr 2  xx           
00002Ar 2  AB xx        		keyword	"+", TOKEN_PLUS
00002Br 2  AD xx        		keyword	"-", TOKEN_MINUS
00002Cr 2  AA xx        		keyword	"*"
00002Dr 2  AF xx        		keyword	"/"
00002Er 2               .ifdef KBD
00002Er 2               		keyword	"#"
00002Er 2               .else
00002Er 2  DE xx        		keyword	"^"
00002Fr 2               .endif
00002Fr 2  41 4E C4 xx  		keyword	"AND"
000030r 2  4F D2 xx     		keyword	"OR"
000031r 2  BE xx        		keyword	">", TOKEN_GREATER
000032r 2  BD xx        		keyword	"=", TOKEN_EQUAL
000033r 2  BC xx        		keyword	"<"
000034r 2               
000034r 2                       .segment "VECTORS"
000046r 2               UNFNC:
000046r 2               
000046r 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00004Ar 2  CE xx        
000035r 2  rr rr 49 4E  		keyword_addr "INT", INT
000039r 2  D4 xx        
000036r 2  rr rr 41 42  		keyword_addr "ABS", ABS
00003Ar 2  D3 xx        
000037r 2               .ifdef KBD
000037r 2               		keyword_addr "VER", VER
000037r 2               .endif
000037r 2               .ifndef CONFIG_NO_POKE
000037r 2                 .ifdef CONFIG_RAM
000037r 2               		keyword_addr "USR", IQERR
000037r 2                 .else
000037r 2  00 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
00003Br 2  D2 xx        
000038r 2                 .endif
000038r 2               .endif
000038r 2  rr rr 46 52  		keyword_addr "FRE", FRE
00003Cr 2  C5 xx        
000039r 2  rr rr 50 4F  		keyword_addr "POS", POS
00003Dr 2  D3 xx        
00003Ar 2  rr rr 53 51  		keyword_addr "SQR", SQR
00003Er 2  D2 xx        
00003Br 2  rr rr 52 4E  		keyword_addr "RND", RND
00003Fr 2  C4 xx        
00003Cr 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
000040r 2  C7 xx        
00003Dr 2  rr rr 45 58  		keyword_addr "EXP", EXP
000041r 2  D0 xx        
00003Er 2               .segment "VECTORS"
00005Ar 2               UNFNC_COS:
00005Ar 2  rr rr 43 4F  		keyword_addr "COS", COS
00005Er 2  D3 xx        
00003Fr 2               .segment "VECTORS"
00005Cr 2               UNFNC_SIN:
00005Cr 2  rr rr 53 49  		keyword_addr "SIN", SIN
000060r 2  CE xx        
000040r 2               .segment "VECTORS"
00005Er 2               UNFNC_TAN:
00005Er 2  rr rr 54 41  		keyword_addr "TAN", TAN
000062r 2  CE xx        
000041r 2               .segment "VECTORS"
000060r 2               UNFNC_ATN:
000060r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000064r 2  CE xx        
000042r 2               .ifdef KBD
000042r 2               		keyword_addr "GETC", GETC
000042r 2               .endif
000042r 2               .ifndef CONFIG_NO_POKE
000042r 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
000046r 2  45 CB xx     
000043r 2               .endif
000043r 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000047r 2  CE xx        
000044r 2  rr rr 53 54  		keyword_addr "STR$", STR
000048r 2  52 A4 xx     
000045r 2  rr rr 56 41  		keyword_addr "VAL", VAL
000049r 2  CC xx        
000046r 2  rr rr 41 53  		keyword_addr "ASC", ASC
00004Ar 2  C3 xx        
000047r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
00004Br 2  52 A4 xx     
000048r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
00004Cr 2  46 54 A4 xx  
000049r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
00004Dr 2  47 48 54 A4  
000051r 2  xx           
00004Ar 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
00004Er 2  44 A4 xx     
00004Br 2               .ifdef CONFIG_2
00004Br 2  47 CF xx     		keyword	"GO", TOKEN_GO
00004Cr 2               .endif
00004Cr 2                       .segment "KEYWORDS"
0000FFr 2  00           		.byte   0
000100r 2               
000100r 2                       .segment "VECTORS"
000074r 2               MATHTBL:
000074r 2  79                   .byte   $79
000075r 2  rr rr                .word   FADDT-1
000077r 2  79                   .byte   $79
000078r 2  rr rr                .word   FSUBT-1
00007Ar 2  7B                   .byte   $7B
00007Br 2  rr rr                .word   FMULTT-1
00007Dr 2  7B                   .byte   $7B
00007Er 2  rr rr                .word   FDIVT-1
000080r 2  7F                   .byte   $7F
000081r 2  rr rr                .word   FPWRT-1
000083r 2  50                   .byte   $50
000084r 2  rr rr                .word   TAND-1
000086r 2  46                   .byte   $46
000087r 2  rr rr                .word   OR-1
000089r 2  7D                   .byte   $7D
00008Ar 2  rr rr                .word   NEGOP-1
00008Cr 2  5A                   .byte   $5A
00008Dr 2  rr rr                .word   EQUOP-1
00008Fr 2  64                   .byte   $64
000090r 2  rr rr                .word   RELOPS-1
000092r 2               
000092r 1               .include "error.s"
000092r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2               define_error ERR_NOFOR, "NF"
000000r 2               define_error ERR_SYNTAX, "SN"
000000r 2               define_error ERR_NOGOSUB, "RG"
000000r 2               define_error ERR_NODATA, "OD"
000000r 2               define_error ERR_ILLQTY, "FC"
000000r 2               define_error ERR_OVERFLOW, "OV"
000000r 2               define_error ERR_MEMFULL, "OM"
000000r 2               define_error ERR_UNDEFSTAT, "US"
000000r 2               define_error ERR_BADSUBS, "BS"
000000r 2               define_error ERR_REDIMD, "DD"
000000r 2               define_error ERR_ZERODIV, "/0"
000000r 2               define_error ERR_ILLDIR, "ID"
000000r 2               define_error ERR_BADTYPE, "TM"
000000r 2               define_error ERR_STRLONG, "LS"
000000r 2               define_error ERR_FRMCPX, "ST"
000000r 2               define_error ERR_CANTCONT, "CN"
000000r 2               define_error ERR_UNDEFFN, "UF"
000000r 2               .else
000000r 2  4E 45 58 54  define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000004r 2  20 57 49 54  
000008r 2  48 4F 55 54  
000010r 2  53 59 4E 54  define_error ERR_SYNTAX, "SYNTAX"
000014r 2  41 D8        
000016r 2  52 45 54 55  define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
00001Ar 2  52 4E 20 57  
00001Er 2  49 54 48 4F  
00002Ar 2  4F 55 54 20  define_error ERR_NODATA, "OUT OF DATA"
00002Er 2  4F 46 20 44  
000032r 2  41 54 C1     
000035r 2  49 4C 4C 45  define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000039r 2  47 41 4C 20  
00003Dr 2  51 55 41 4E  
000045r 2               .ifdef CBM1
000045r 2               	.byte 0,0,0,0,0
000045r 2               .endif
000045r 2  4F 56 45 52  define_error ERR_OVERFLOW, "OVERFLOW"
000049r 2  46 4C 4F D7  
00004Dr 2  4F 55 54 20  define_error ERR_MEMFULL, "OUT OF MEMORY"
000051r 2  4F 46 20 4D  
000055r 2  45 4D 4F 52  
00005Ar 2  55 4E 44 45  define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
00005Er 2  46 27 44 20  
000062r 2  53 54 41 54  
00006Br 2  42 41 44 20  define_error ERR_BADSUBS, "BAD SUBSCRIPT"
00006Fr 2  53 55 42 53  
000073r 2  43 52 49 50  
000078r 2  52 45 44 49  define_error ERR_REDIMD, "REDIM'D ARRAY"
00007Cr 2  4D 27 44 20  
000080r 2  41 52 52 41  
000085r 2  44 49 56 49  define_error ERR_ZERODIV, "DIVISION BY ZERO"
000089r 2  53 49 4F 4E  
00008Dr 2  20 42 59 20  
000095r 2  49 4C 4C 45  define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000099r 2  47 41 4C 20  
00009Dr 2  44 49 52 45  
0000A3r 2  54 59 50 45  define_error ERR_BADTYPE, "TYPE MISMATCH"
0000A7r 2  20 4D 49 53  
0000ABr 2  4D 41 54 43  
0000B0r 2  53 54 52 49  define_error ERR_STRLONG, "STRING TOO LONG"
0000B4r 2  4E 47 20 54  
0000B8r 2  4F 4F 20 4C  
0000BFr 2               .ifdef CONFIG_FILE
0000BFr 2                 .ifdef CBM1
0000BFr 2               define_error ERR_BADDATA, "BAD DATA"
0000BFr 2                 .else
0000BFr 2  46 49 4C 45  define_error ERR_BADDATA, "FILE DATA"
0000C3r 2  20 44 41 54  
0000C7r 2  C1           
0000C8r 2                 .endif
0000C8r 2               .endif
0000C8r 2  46 4F 52 4D  define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
0000CCr 2  55 4C 41 20  
0000D0r 2  54 4F 4F 20  
0000DBr 2  43 41 4E 27  define_error ERR_CANTCONT, "CAN'T CONTINUE"
0000DFr 2  54 20 43 4F  
0000E3r 2  4E 54 49 4E  
0000E9r 2  55 4E 44 45  define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
0000EDr 2  46 27 44 20  
0000F1r 2  46 55 4E 43  
0000F9r 2               .endif
0000F9r 2               
0000F9r 1               .include "message.s"
0000F9r 2               ; global messages: "error", "in", "ready", "break"
0000F9r 2               
0000F9r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2  0D 0A 52 45  		.byte   CR,LF,"READY.",CR,LF
000010r 2  41 44 59 2E  
000014r 2  0D 0A        
000016r 2                 .else
000016r 2                   .ifdef APPLE
000016r 2               		; binary patch!
000016r 2                       .byte   CR,0,0,"K",CR,LF
000016r 2                   .else
000016r 2               		.byte   CR,LF,"OK",CR,LF
000016r 2                   .endif
000016r 2                 .endif
000016r 2  00           		.byte	0
000017r 2                .endif
000017r 2               .endif
000017r 2               QT_BREAK:
000017r 2               
000017r 2               .ifdef KBD
000017r 2               		.byte	CR,LF," Brk"
000017r 2                       .byte   0
000017r 2                       .byte   $54,$D0 ; ???
000017r 2               .elseif .def(MICROTAN) || .def(AIM65)
000017r 2               		.byte CR,LF," BREAK"
000017r 2                       .byte   0
000017r 2               .else
000017r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
00001Br 2  45 41 4B     
00001Er 2  00                   .byte   0
00001Fr 2               .endif
00001Fr 2               
00001Fr 1               .include "memory.s"
00001Fr 2               ; generic stack and memory management code
00001Fr 2               ; this code is identical across all versions of
00001Fr 2               ; BASIC
00001Fr 2               
00001Fr 2               .segment "CODE"
00001Fr 2               
00001Fr 2               ; ----------------------------------------------------------------------------
00001Fr 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Fr 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Fr 2               ;
00001Fr 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Fr 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Fr 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Fr 2               ;
00001Fr 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Fr 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Fr 2               ;
00001Fr 2               ;	.EQ. IF FOUND
00001Fr 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Fr 2               ; ----------------------------------------------------------------------------
00001Fr 2               GTFORPNT:
00001Fr 2  BA                   tsx
000020r 2  E8                   inx
000021r 2  E8                   inx
000022r 2  E8                   inx
000023r 2  E8                   inx
000024r 2               L2279:
000024r 2  BD 01 01             lda     STACK+1,x
000027r 2  C9 81                cmp     #$81
000029r 2  D0 21                bne     L22A1
00002Br 2  A5 47                lda     FORPNT+1
00002Dr 2  D0 0A                bne     L228E
00002Fr 2  BD 02 01             lda     STACK+2,x
000032r 2  85 46                sta     FORPNT
000034r 2  BD 03 01             lda     STACK+3,x
000037r 2  85 47                sta     FORPNT+1
000039r 2               L228E:
000039r 2  DD 03 01             cmp     STACK+3,x
00003Cr 2  D0 07                bne     L229A
00003Er 2  A5 46                lda     FORPNT
000040r 2  DD 02 01             cmp     STACK+2,x
000043r 2  F0 07                beq     L22A1
000045r 2               L229A:
000045r 2  8A                   txa
000046r 2  18                   clc
000047r 2  69 12                adc     #BYTES_PER_FRAME
000049r 2  AA                   tax
00004Ar 2  D0 D8                bne     L2279
00004Cr 2               L22A1:
00004Cr 2  60                   rts
00004Dr 2               
00004Dr 2               ; ----------------------------------------------------------------------------
00004Dr 2               ; MOVE BLOCK OF MEMORY UP
00004Dr 2               ;
00004Dr 2               ; ON ENTRY:
00004Dr 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00004Dr 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00004Dr 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00004Dr 2               ; ----------------------------------------------------------------------------
00004Dr 2               BLTU:
00004Dr 2  20 rr rr             jsr     REASON
000050r 2  85 2E                sta     STREND
000052r 2  84 2F                sty     STREND+1
000054r 2               BLTU2:
000054r 2  38                   sec
000055r 2  A5 57                lda     HIGHTR
000057r 2  E5 5C                sbc     LOWTR
000059r 2  85 1F                sta     INDEX
00005Br 2  A8                   tay
00005Cr 2  A5 58                lda     HIGHTR+1
00005Er 2  E5 5D                sbc     LOWTR+1
000060r 2  AA                   tax
000061r 2  E8                   inx
000062r 2  98                   tya
000063r 2  F0 23                beq     L22DD
000065r 2  A5 57                lda     HIGHTR
000067r 2  38                   sec
000068r 2  E5 1F                sbc     INDEX
00006Ar 2  85 57                sta     HIGHTR
00006Cr 2  B0 03                bcs     L22C6
00006Er 2  C6 58                dec     HIGHTR+1
000070r 2  38                   sec
000071r 2               L22C6:
000071r 2  A5 55                lda     HIGHDS
000073r 2  E5 1F                sbc     INDEX
000075r 2  85 55                sta     HIGHDS
000077r 2  B0 08                bcs     L22D6
000079r 2  C6 56                dec     HIGHDS+1
00007Br 2  90 04                bcc     L22D6
00007Dr 2               L22D2:
00007Dr 2  B1 57                lda     (HIGHTR),y
00007Fr 2  91 55                sta     (HIGHDS),y
000081r 2               L22D6:
000081r 2  88                   dey
000082r 2  D0 F9                bne     L22D2
000084r 2  B1 57                lda     (HIGHTR),y
000086r 2  91 55                sta     (HIGHDS),y
000088r 2               L22DD:
000088r 2  C6 58                dec     HIGHTR+1
00008Ar 2  C6 56                dec     HIGHDS+1
00008Cr 2  CA                   dex
00008Dr 2  D0 F2                bne     L22D6
00008Fr 2  60                   rts
000090r 2               
000090r 2               ; ----------------------------------------------------------------------------
000090r 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
000090r 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
000090r 2               ; ----------------------------------------------------------------------------
000090r 2               CHKMEM:
000090r 2  0A                   asl     a
000091r 2  69 3E                adc     #SPACE_FOR_GOSUB
000093r 2  B0 35                bcs     MEMERR
000095r 2  85 1F                sta     INDEX
000097r 2  BA                   tsx
000098r 2  E4 1F                cpx     INDEX
00009Ar 2  90 2E                bcc     MEMERR
00009Cr 2  60                   rts
00009Dr 2               
00009Dr 2               ; ----------------------------------------------------------------------------
00009Dr 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00009Dr 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00009Dr 2               ; ----------------------------------------------------------------------------
00009Dr 2               REASON:
00009Dr 2  C4 31                cpy     FRETOP+1
00009Fr 2  90 28                bcc     L231E
0000A1r 2  D0 04                bne     L22FC
0000A3r 2  C5 30                cmp     FRETOP
0000A5r 2  90 22                bcc     L231E
0000A7r 2               L22FC:
0000A7r 2  48                   pha
0000A8r 2  A2 09                ldx     #FAC-TEMP1-1
0000AAr 2  98                   tya
0000ABr 2               L2300:
0000ABr 2  48                   pha
0000ACr 2  B5 54                lda     TEMP1,x
0000AEr 2  CA                   dex
0000AFr 2  10 FA                bpl     L2300
0000B1r 2  20 rr rr             jsr     GARBAG
0000B4r 2  A2 F7                ldx     #TEMP1-FAC+1
0000B6r 2               L230B:
0000B6r 2  68                   pla
0000B7r 2  95 5E                sta     FAC,x
0000B9r 2  E8                   inx
0000BAr 2  30 FA                bmi     L230B
0000BCr 2  68                   pla
0000BDr 2  A8                   tay
0000BEr 2  68                   pla
0000BFr 2  C4 31                cpy     FRETOP+1
0000C1r 2  90 06                bcc     L231E
0000C3r 2  D0 05                bne     MEMERR
0000C5r 2  C5 30                cmp     FRETOP
0000C7r 2  B0 01                bcs     MEMERR
0000C9r 2               L231E:
0000C9r 2  60                   rts
0000CAr 2               
0000CAr 1               .include "program.s"
0000CAr 2               ; error
0000CAr 2               ; line input, line editing
0000CAr 2               ; tokenize
0000CAr 2               ; detokenize
0000CAr 2               ; BASIC program memory management
0000CAr 2               
0000CAr 2               ; MICROTAN has some nonstandard extension to LIST here
0000CAr 2               
0000CAr 2               .segment "CODE"
0000CAr 2               
0000CAr 2               MEMERR:
0000CAr 2  A2 4D                ldx     #ERR_MEMFULL
0000CCr 2               
0000CCr 2               ; ----------------------------------------------------------------------------
0000CCr 2               ; HANDLE AN ERROR
0000CCr 2               ;
0000CCr 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000CCr 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000CCr 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000CCr 2               ; ----------------------------------------------------------------------------
0000CCr 2               ERROR:
0000CCr 2  46 0D                lsr     Z14
0000CEr 2               .ifdef CONFIG_FILE
0000CEr 2  A5 0E                lda     CURDVC    ; output
0000D0r 2  F0 07                beq     LC366     ; is screen
0000D2r 2  20 CC FF             jsr     CLRCH     ; otherwise redirect output back to screen
0000D5r 2  A9 00                lda     #$00
0000D7r 2  85 0E                sta     CURDVC
0000D9r 2               LC366:
0000D9r 2               .endif
0000D9r 2  20 rr rr             jsr     CRDO
0000DCr 2  20 rr rr             jsr     OUTQUES
0000DFr 2               L2329:
0000DFr 2  BD rr rr             lda     ERROR_MESSAGES,x
0000E2r 2               .ifndef CONFIG_SMALL_ERROR
0000E2r 2  48                   pha
0000E3r 2  29 7F                and     #$7F
0000E5r 2               .endif
0000E5r 2  20 rr rr             jsr     OUTDO
0000E8r 2               .ifdef CONFIG_SMALL_ERROR
0000E8r 2                       lda     ERROR_MESSAGES+1,x
0000E8r 2                 .ifdef KBD
0000E8r 2                       and     #$7F
0000E8r 2                 .endif
0000E8r 2                       jsr     OUTDO
0000E8r 2               .else
0000E8r 2  E8                   inx
0000E9r 2  68                   pla
0000EAr 2  10 F3                bpl     L2329
0000ECr 2               .endif
0000ECr 2  20 rr rr             jsr     STKINI
0000EFr 2  A9 rr                lda     #<QT_ERROR
0000F1r 2  A0 rr                ldy     #>QT_ERROR
0000F3r 2               
0000F3r 2               ; ----------------------------------------------------------------------------
0000F3r 2               ; PRINT STRING AT (Y,A)
0000F3r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000F3r 2               ; FALL INTO WARM RESTART
0000F3r 2               ; ----------------------------------------------------------------------------
0000F3r 2               PRINT_ERROR_LINNUM:
0000F3r 2  20 rr rr             jsr     STROUT
0000F6r 2  A4 37                ldy     CURLIN+1
0000F8r 2  C8                   iny
0000F9r 2  F0 03                beq     RESTART
0000FBr 2  20 rr rr             jsr     INPRT
0000FEr 2               
0000FEr 2               ; ----------------------------------------------------------------------------
0000FEr 2               ; WARM RESTART ENTRY
0000FEr 2               ; ----------------------------------------------------------------------------
0000FEr 2               RESTART:
0000FEr 2               .ifdef KBD
0000FEr 2                       jsr     CRDO
0000FEr 2                       nop
0000FEr 2               L2351X:
0000FEr 2                       jsr     OKPRT
0000FEr 2               L2351:
0000FEr 2                       jsr     INLIN
0000FEr 2               LE28E:
0000FEr 2                       bpl     RESTART
0000FEr 2               .else
0000FEr 2  46 0D                lsr     Z14
000100r 2                .ifndef AIM65
000100r 2  A9 rr                lda     #<QT_OK
000102r 2  A0 rr                ldy     #>QT_OK
000104r 2                 .ifdef CONFIG_CBM_ALL
000104r 2  20 rr rr             jsr     STROUT
000107r 2                 .else
000107r 2                       jsr     GOSTROUT
000107r 2                 .endif
000107r 2                .else
000107r 2                       jsr     GORESTART
000107r 2                .endif
000107r 2               L2351:
000107r 2  20 rr rr             jsr     INLIN
00010Ar 2               .endif
00010Ar 2  86 77                stx     TXTPTR
00010Cr 2  84 78                sty     TXTPTR+1
00010Er 2  20 70 00             jsr     CHRGET
000111r 2               .ifdef CONFIG_11
000111r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000111r 2               ; and ':' - a line starting with ':' in
000111r 2               ; direct mode gets ignored
000111r 2  AA                   tax
000112r 2               .endif
000112r 2               .ifdef KBD
000112r 2                       beq     L2351X
000112r 2               .else
000112r 2  F0 F3                beq     L2351
000114r 2               .endif
000114r 2  A2 FF                ldx     #$FF
000116r 2  86 37                stx     CURLIN+1
000118r 2  90 06                bcc     NUMBERED_LINE
00011Ar 2  20 rr rr             jsr     PARSE_INPUT_LINE
00011Dr 2  4C rr rr             jmp     NEWSTT2
000120r 2               
000120r 2               ; ----------------------------------------------------------------------------
000120r 2               ; HANDLE NUMBERED LINE
000120r 2               ; ----------------------------------------------------------------------------
000120r 2               NUMBERED_LINE:
000120r 2  20 rr rr             jsr     LINGET
000123r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000126r 2  84 05                sty     EOLPNTR
000128r 2               .ifdef KBD
000128r 2                       jsr     FNDLIN2
000128r 2                       lda     JMPADRS+1
000128r 2                       sta     LOWTR
000128r 2                       sta     Z96
000128r 2                       lda     JMPADRS+2
000128r 2                       sta     LOWTR+1
000128r 2                       sta     Z96+1
000128r 2                       lda     LINNUM
000128r 2                       sta     L06FE
000128r 2                       lda     LINNUM+1
000128r 2                       sta     L06FE+1
000128r 2                       inc     LINNUM
000128r 2                       bne     LE2D2
000128r 2                       inc     LINNUM+1
000128r 2                       bne     LE2D2
000128r 2                       jmp     SYNERR
000128r 2               LE2D2:
000128r 2                       jsr     LF457
000128r 2                       ldx     #Z96
000128r 2                       jsr     CMPJMPADRS
000128r 2                       bcs     LE2FD
000128r 2               LE2DC:
000128r 2                       ldx     #$00
000128r 2                       lda     (JMPADRS+1,x)
000128r 2                       sta     (Z96,x)
000128r 2                       inc     JMPADRS+1
000128r 2                       bne     LE2E8
000128r 2                       inc     JMPADRS+2
000128r 2               LE2E8:
000128r 2                       inc     Z96
000128r 2                       bne     LE2EE
000128r 2                       inc     Z96+1
000128r 2               LE2EE:
000128r 2                       ldx     #VARTAB
000128r 2                       jsr     CMPJMPADRS
000128r 2                       bne     LE2DC
000128r 2                       lda     Z96
000128r 2                       sta     VARTAB
000128r 2                       lda     Z96+1
000128r 2                       sta     VARTAB+1
000128r 2               LE2FD:
000128r 2                       jsr     SETPTRS
000128r 2                       jsr     LE33D
000128r 2                       lda     INPUTBUFFER
000128r 2               LE306:
000128r 2                       beq     LE28E
000128r 2                       cmp     #$A5
000128r 2                       beq     LE306
000128r 2                       clc
000128r 2               .else
000128r 2  20 rr rr             jsr     FNDLIN
00012Br 2  90 44                bcc     PUT_NEW_LINE
00012Dr 2  A0 01                ldy     #$01
00012Fr 2  B1 5C                lda     (LOWTR),y
000131r 2  85 20                sta     INDEX+1
000133r 2  A5 2A                lda     VARTAB
000135r 2  85 1F                sta     INDEX
000137r 2  A5 5D                lda     LOWTR+1
000139r 2  85 22                sta     DEST+1
00013Br 2  A5 5C                lda     LOWTR
00013Dr 2  88                   dey
00013Er 2  F1 5C                sbc     (LOWTR),y
000140r 2  18                   clc
000141r 2  65 2A                adc     VARTAB
000143r 2  85 2A                sta     VARTAB
000145r 2  85 21                sta     DEST
000147r 2  A5 2B                lda     VARTAB+1
000149r 2  69 FF                adc     #$FF
00014Br 2  85 2B                sta     VARTAB+1
00014Dr 2  E5 5D                sbc     LOWTR+1
00014Fr 2  AA                   tax
000150r 2  38                   sec
000151r 2  A5 5C                lda     LOWTR
000153r 2  E5 2A                sbc     VARTAB
000155r 2  A8                   tay
000156r 2  B0 03                bcs     L23A5
000158r 2  E8                   inx
000159r 2  C6 22                dec     DEST+1
00015Br 2               L23A5:
00015Br 2  18                   clc
00015Cr 2  65 1F                adc     INDEX
00015Er 2  90 03                bcc     L23AD
000160r 2  C6 20                dec     INDEX+1
000162r 2  18                   clc
000163r 2               L23AD:
000163r 2  B1 1F                lda     (INDEX),y
000165r 2  91 21                sta     (DEST),y
000167r 2  C8                   iny
000168r 2  D0 F9                bne     L23AD
00016Ar 2  E6 20                inc     INDEX+1
00016Cr 2  E6 22                inc     DEST+1
00016Er 2  CA                   dex
00016Fr 2  D0 F2                bne     L23AD
000171r 2               .endif
000171r 2               ; ----------------------------------------------------------------------------
000171r 2               PUT_NEW_LINE:
000171r 2               .ifndef KBD
000171r 2                 .ifdef CONFIG_2
000171r 2  20 rr rr             jsr     SETPTRS
000174r 2  20 rr rr             jsr     LE33D
000177r 2  AD 00 02             lda     INPUTBUFFER
00017Ar 2  F0 8B                beq     L2351
00017Cr 2  18                   clc
00017Dr 2                 .else
00017Dr 2                       lda     INPUTBUFFER
00017Dr 2                       beq     FIX_LINKS
00017Dr 2                       lda     MEMSIZ
00017Dr 2                       ldy     MEMSIZ+1
00017Dr 2                       sta     FRETOP
00017Dr 2                       sty     FRETOP+1
00017Dr 2                 .endif
00017Dr 2               .endif
00017Dr 2  A5 2A                lda     VARTAB
00017Fr 2  85 57                sta     HIGHTR
000181r 2  65 05                adc     EOLPNTR
000183r 2  85 55                sta     HIGHDS
000185r 2  A4 2B                ldy     VARTAB+1
000187r 2  84 58                sty     HIGHTR+1
000189r 2  90 01                bcc     L23D6
00018Br 2  C8                   iny
00018Cr 2               L23D6:
00018Cr 2  84 56                sty     HIGHDS+1
00018Er 2  20 rr rr             jsr     BLTU
000191r 2               .ifdef CONFIG_INPUTBUFFER_0200
000191r 2  A5 11                lda     LINNUM
000193r 2  A4 12                ldy     LINNUM+1
000195r 2  8D FE 01             sta     INPUTBUFFER-2
000198r 2  8C FF 01             sty     INPUTBUFFER-1
00019Br 2               .endif
00019Br 2  A5 2E                lda     STREND
00019Dr 2  A4 2F                ldy     STREND+1
00019Fr 2  85 2A                sta     VARTAB
0001A1r 2  84 2B                sty     VARTAB+1
0001A3r 2  A4 05                ldy     EOLPNTR
0001A5r 2  88                   dey
0001A6r 2               ; ---COPY LINE INTO PROGRAM-------
0001A6r 2               L23E6:
0001A6r 2  B9 FC 01             lda     INPUTBUFFER-4,y
0001A9r 2  91 5C                sta     (LOWTR),y
0001ABr 2  88                   dey
0001ACr 2  10 F8                bpl     L23E6
0001AEr 2               
0001AEr 2               ; ----------------------------------------------------------------------------
0001AEr 2               ; CLEAR ALL VARIABLES
0001AEr 2               ; RE-ESTABLISH ALL FORWARD LINKS
0001AEr 2               ; ----------------------------------------------------------------------------
0001AEr 2               FIX_LINKS:
0001AEr 2  20 rr rr             jsr     SETPTRS
0001B1r 2               .ifdef CONFIG_2
0001B1r 2  20 rr rr             jsr     LE33D
0001B4r 2  4C rr rr             jmp     L2351
0001B7r 2               LE33D:
0001B7r 2               .endif
0001B7r 2  A5 28                lda     TXTTAB
0001B9r 2  A4 29                ldy     TXTTAB+1
0001BBr 2  85 1F                sta     INDEX
0001BDr 2  84 20                sty     INDEX+1
0001BFr 2  18                   clc
0001C0r 2               L23FA:
0001C0r 2  A0 01                ldy     #$01
0001C2r 2  B1 1F                lda     (INDEX),y
0001C4r 2               .ifdef CONFIG_2
0001C4r 2  F0 1D                beq     RET3
0001C6r 2               .else
0001C6r 2                       jeq     L2351
0001C6r 2               .endif
0001C6r 2  A0 04                ldy     #$04
0001C8r 2               L2405:
0001C8r 2  C8                   iny
0001C9r 2  B1 1F                lda     (INDEX),y
0001CBr 2  D0 FB                bne     L2405
0001CDr 2  C8                   iny
0001CEr 2  98                   tya
0001CFr 2  65 1F                adc     INDEX
0001D1r 2  AA                   tax
0001D2r 2  A0 00                ldy     #$00
0001D4r 2  91 1F                sta     (INDEX),y
0001D6r 2  A5 20                lda     INDEX+1
0001D8r 2  69 00                adc     #$00
0001DAr 2  C8                   iny
0001DBr 2  91 1F                sta     (INDEX),y
0001DDr 2  86 1F                stx     INDEX
0001DFr 2  85 20                sta     INDEX+1
0001E1r 2  90 DD                bcc     L23FA	; always
0001E3r 2               
0001E3r 2               ; ----------------------------------------------------------------------------
0001E3r 2               .ifdef KBD
0001E3r 2               .include "kbd_loadsave.s"
0001E3r 2               .endif
0001E3r 2               
0001E3r 2               .ifdef CONFIG_2
0001E3r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001E3r 2               RET3:
0001E3r 2  60           		rts
0001E4r 2               .endif
0001E4r 2               
0001E4r 2               .include "inline.s"
0001E4r 3               .segment "CODE"
0001E4r 3               
0001E4r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001E4r 3               L2420:
0001E4r 3                 .ifdef OSI
0001E4r 3                       jsr     OUTDO
0001E4r 3                 .endif
0001E4r 3                       dex
0001E4r 3                 .ifdef AIM65
0001E4r 3                       bmi     L2423
0001E4r 3                       jsr     PSLS
0001E4r 3                       jmp     INLIN2
0001E4r 3               LB35F:
0001E4r 3                       jsr     OUTDO
0001E4r 3                 .else
0001E4r 3                       bpl     INLIN2
0001E4r 3                 .endif
0001E4r 3               L2423:
0001E4r 3                 .ifdef OSI
0001E4r 3                       jsr     OUTDO
0001E4r 3                 .endif
0001E4r 3                       jsr     CRDO
0001E4r 3               .endif
0001E4r 3               
0001E4r 3               ; ----------------------------------------------------------------------------
0001E4r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001E4r 3               ; ----------------------------------------------------------------------------
0001E4r 3               .ifndef KBD
0001E4r 3               INLIN:
0001E4r 3                 .ifdef APPLE
0001E4r 3                       ldx     #$DD
0001E4r 3               INLIN1:
0001E4r 3                       stx     $33
0001E4r 3                       jsr     L2900
0001E4r 3                       cpx     #$EF
0001E4r 3                       bcs     L0C32
0001E4r 3                       ldx     #$EF
0001E4r 3               L0C32:
0001E4r 3                       lda     #$00
0001E4r 3                       sta     INPUTBUFFER,x
0001E4r 3                       ldx     #<INPUTBUFFER-1
0001E4r 3                       ldy     #>INPUTBUFFER-1
0001E4r 3                       rts
0001E4r 3                 .endif
0001E4r 3               
0001E4r 3                 .ifndef APPLE
0001E4r 3  A2 00                ldx     #$00
0001E6r 3               INLIN2:
0001E6r 3  20 rr rr             jsr     GETLN
0001E9r 3                   .ifdef AIM65
0001E9r 3                       cmp     #$1A
0001E9r 3                       bne     INLINAIM
0001E9r 3                       jsr     DU13
0001E9r 3                       jmp     INLIN
0001E9r 3               INLINAIM:
0001E9r 3                   .endif
0001E9r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E9r 3                       cmp     #$07
0001E9r 3                       beq     L2443
0001E9r 3                   .endif
0001E9r 3  C9 0D                cmp     #$0D
0001EBr 3  F0 06                beq     L2453
0001EDr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001EDr 3                       cmp     #$20
0001EDr 3                     .ifdef AIM65
0001EDr 3                       bcc     L244E
0001EDr 3                     .else
0001EDr 3                       bcc     INLIN2
0001EDr 3                     .endif
0001EDr 3                     .ifdef MICROTAN
0001EDr 3                       cmp     #$80
0001EDr 3                     .else
0001EDr 3                       .ifdef AIM65
0001EDr 3                       cmp     #$7F
0001EDr 3                       beq     L2420
0001EDr 3                       .endif
0001EDr 3                       cmp     #$7D
0001EDr 3                     .endif
0001EDr 3                       bcs     INLIN2
0001EDr 3                       cmp     #$40 ; @
0001EDr 3                     .ifdef AIM65
0001EDr 3                       beq     LB35F
0001EDr 3                     .else
0001EDr 3                       beq     L2423
0001EDr 3                     .ifdef MICROTAN
0001EDr 3                       cmp     #$7F ; DEL
0001EDr 3                     .else
0001EDr 3                       cmp     #$5F ; _
0001EDr 3                     .endif
0001EDr 3                       beq     L2420
0001EDr 3                     .endif
0001EDr 3               L2443:
0001EDr 3                     .ifdef MICROTAN
0001EDr 3                       cpx     #$4F
0001EDr 3                     .else
0001EDr 3                       cpx     #$47
0001EDr 3                     .endif
0001EDr 3                       bcs     L244C
0001EDr 3                   .endif
0001EDr 3  9D 00 02             sta     INPUTBUFFER,x
0001F0r 3  E8                   inx
0001F1r 3                   .if .def(OSI) || .def(AIM65)
0001F1r 3                       .byte   $2C
0001F1r 3                   .else
0001F1r 3  D0 F3                bne     INLIN2
0001F3r 3                   .endif
0001F3r 3               L244C:
0001F3r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001F3r 3                       lda     #$07 ; BEL
0001F3r 3               L244E:
0001F3r 3                       jsr     OUTDO
0001F3r 3                       bne     INLIN2
0001F3r 3                   .endif
0001F3r 3               L2453:
0001F3r 3  4C rr rr             jmp     L29B9
0001F6r 3                 .endif
0001F6r 3               .endif
0001F6r 3               
0001F6r 3               .ifndef KBD
0001F6r 3                 .ifndef APPLE
0001F6r 3               GETLN:
0001F6r 3                   .ifdef CONFIG_FILE
0001F6r 3  20 CF FF             jsr     CHRIN
0001F9r 3  A4 0E                ldy     CURDVC
0001FBr 3  D0 0C                bne     L2465
0001FDr 3                   .else
0001FDr 3                       jsr     MONRDKEY
0001FDr 3                   .endif
0001FDr 3                   .ifdef OSI
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       nop
0001FDr 3                       and     #$7F
0001FDr 3                   .endif
0001FDr 3                 .endif
0001FDr 3                 .ifdef APPLE
0001FDr 3               RDKEY:
0001FDr 3                       jsr     LFD0C
0001FDr 3                       and     #$7F
0001FDr 3                 .endif
0001FDr 3                   .ifdef SYM1
0001FDr 3                       cmp     #$14
0001FDr 3                   .else
0001FDr 3  C9 0F                cmp     #$0F
0001FFr 3                   .endif
0001FFr 3  D0 08                bne     L2465
000201r 3  48                   pha
000202r 3  A5 0D                lda     Z14
000204r 3  49 FF                eor     #$FF
000206r 3  85 0D                sta     Z14
000208r 3  68                   pla
000209r 3               L2465:
000209r 3  60                   rts
00020Ar 3               .endif
00020Ar 3               
00020Ar 2               
00020Ar 2               ; ----------------------------------------------------------------------------
00020Ar 2               ; TOKENIZE THE INPUT LINE
00020Ar 2               ; ----------------------------------------------------------------------------
00020Ar 2               PARSE_INPUT_LINE:
00020Ar 2  A6 77                ldx     TXTPTR
00020Cr 2  A0 04                ldy     #$04
00020Er 2  84 09                sty     DATAFLG
000210r 2               L246C:
000210r 2  BD 00 02             lda     INPUTBUFFERX,x
000213r 2               .ifdef CONFIG_CBM_ALL
000213r 2  10 07                bpl     LC49E
000215r 2  C9 FF                cmp     #$FF
000217r 2  F0 3E                beq     L24AC
000219r 2  E8                   inx
00021Ar 2  D0 F4                bne     L246C
00021Cr 2               LC49E:
00021Cr 2               .endif
00021Cr 2  C9 20                cmp     #$20
00021Er 2  F0 37                beq     L24AC
000220r 2  85 04                sta     ENDCHR
000222r 2  C9 22                cmp     #$22
000224r 2  F0 56                beq     L24D0
000226r 2  24 09                bit     DATAFLG
000228r 2  70 2D                bvs     L24AC
00022Ar 2  C9 3F                cmp     #$3F
00022Cr 2  D0 04                bne     L2484
00022Er 2  A9 99                lda     #TOKEN_PRINT
000230r 2  D0 25                bne     L24AC
000232r 2               L2484:
000232r 2  C9 30                cmp     #$30
000234r 2  90 04                bcc     L248C
000236r 2  C9 3C                cmp     #$3C
000238r 2  90 1D                bcc     L24AC
00023Ar 2               ; ----------------------------------------------------------------------------
00023Ar 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
00023Ar 2               ; WITH CURRENT CHAR FROM INPUT LINE
00023Ar 2               ; ----------------------------------------------------------------------------
00023Ar 2               L248C:
00023Ar 2  84 6E                sty     STRNG2
00023Cr 2  A0 00                ldy     #$00
00023Er 2  84 05                sty     EOLPNTR
000240r 2  88                   dey
000241r 2  86 77                stx     TXTPTR
000243r 2  CA                   dex
000244r 2               L2496:
000244r 2  C8                   iny
000245r 2               L2497:
000245r 2  E8                   inx
000246r 2               L2498:
000246r 2               .ifdef KBD
000246r 2                       jsr     GET_UPPER
000246r 2               .else
000246r 2  BD 00 02             lda     INPUTBUFFERX,x
000249r 2                 .ifndef CONFIG_2
000249r 2                       cmp     #$20
000249r 2                       beq     L2497
000249r 2                 .endif
000249r 2               .endif
000249r 2  38                   sec
00024Ar 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
00024Dr 2  F0 F5                beq     L2496
00024Fr 2  C9 80                cmp     #$80
000251r 2  D0 30                bne     L24D7
000253r 2  05 05                ora     EOLPNTR
000255r 2               ; ----------------------------------------------------------------------------
000255r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000255r 2               ; ----------------------------------------------------------------------------
000255r 2               L24AA:
000255r 2  A4 6E                ldy     STRNG2
000257r 2               L24AC:
000257r 2  E8                   inx
000258r 2  C8                   iny
000259r 2  99 FB 01             sta     INPUTBUFFER-5,y
00025Cr 2  B9 FB 01             lda     INPUTBUFFER-5,y
00025Fr 2  F0 36                beq     L24EA
000261r 2  38                   sec
000262r 2  E9 3A                sbc     #$3A
000264r 2  F0 04                beq     L24BF
000266r 2  C9 49                cmp     #$49
000268r 2  D0 02                bne     L24C1
00026Ar 2               L24BF:
00026Ar 2  85 09                sta     DATAFLG
00026Cr 2               L24C1:
00026Cr 2  38                   sec
00026Dr 2  E9 55                sbc     #TOKEN_REM-':'
00026Fr 2  D0 9F                bne     L246C
000271r 2  85 04                sta     ENDCHR
000273r 2               ; ----------------------------------------------------------------------------
000273r 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000273r 2               ; BY COPYING CHARS UP TO ENDCHR.
000273r 2               ; ----------------------------------------------------------------------------
000273r 2               L24C8:
000273r 2  BD 00 02             lda     INPUTBUFFERX,x
000276r 2  F0 DF                beq     L24AC
000278r 2  C5 04                cmp     ENDCHR
00027Ar 2  F0 DB                beq     L24AC
00027Cr 2               L24D0:
00027Cr 2  C8                   iny
00027Dr 2  99 FB 01             sta     INPUTBUFFER-5,y
000280r 2  E8                   inx
000281r 2  D0 F0                bne     L24C8
000283r 2               ; ----------------------------------------------------------------------------
000283r 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
000283r 2               ; ----------------------------------------------------------------------------
000283r 2               L24D7:
000283r 2  A6 77                ldx     TXTPTR
000285r 2  E6 05                inc     EOLPNTR
000287r 2               L24DB:
000287r 2  C8                   iny
000288r 2  B9 rr rr             lda     MATHTBL+28+1,y
00028Br 2  10 FA                bpl     L24DB
00028Dr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000290r 2  D0 B4                bne     L2498
000292r 2  BD 00 02             lda     INPUTBUFFERX,x
000295r 2  10 BE                bpl     L24AA
000297r 2               ; ---END OF LINE------------------
000297r 2               L24EA:
000297r 2  99 FD 01             sta     INPUTBUFFER-3,y
00029Ar 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00029Ar 2  C6 78                dec     TXTPTR+1
00029Cr 2               .endif
00029Cr 2  A9 FF                lda     #<INPUTBUFFER-1
00029Er 2  85 77                sta     TXTPTR
0002A0r 2  60                   rts
0002A1r 2               
0002A1r 2               ; ----------------------------------------------------------------------------
0002A1r 2               ; SEARCH FOR LINE
0002A1r 2               ;
0002A1r 2               ; (LINNUM) = LINE # TO FIND
0002A1r 2               ; IF NOT FOUND:  CARRY = 0
0002A1r 2               ;	LOWTR POINTS AT NEXT LINE
0002A1r 2               ; IF FOUND:      CARRY = 1
0002A1r 2               ;	LOWTR POINTS AT LINE
0002A1r 2               ; ----------------------------------------------------------------------------
0002A1r 2               FNDLIN:
0002A1r 2               .ifdef KBD
0002A1r 2                       jsr     CHRGET
0002A1r 2                       jmp     LE444
0002A1r 2               LE440:
0002A1r 2                       php
0002A1r 2                       jsr     LINGET
0002A1r 2               LE444:
0002A1r 2                       jsr     LF457
0002A1r 2                       ldx     #$FF
0002A1r 2                       plp
0002A1r 2                       beq     LE464
0002A1r 2                       jsr     CHRGOT
0002A1r 2                       beq     L2520
0002A1r 2                       cmp     #$A5
0002A1r 2                       bne     L2520
0002A1r 2                       jsr     CHRGET
0002A1r 2                       beq     LE464
0002A1r 2                       bcs     LE461
0002A1r 2                       jsr     LINGET
0002A1r 2                       beq     L2520
0002A1r 2               LE461:
0002A1r 2                       jmp     SYNERR
0002A1r 2               LE464:
0002A1r 2                       stx     LINNUM
0002A1r 2                       stx     LINNUM+1
0002A1r 2               .else
0002A1r 2  A5 28                lda     TXTTAB
0002A3r 2  A6 29                ldx     TXTTAB+1
0002A5r 2               FL1:
0002A5r 2  A0 01                ldy     #$01
0002A7r 2  85 5C                sta     LOWTR
0002A9r 2  86 5D                stx     LOWTR+1
0002ABr 2  B1 5C                lda     (LOWTR),y
0002ADr 2  F0 1F                beq     L251F
0002AFr 2  C8                   iny
0002B0r 2  C8                   iny
0002B1r 2  A5 12                lda     LINNUM+1
0002B3r 2  D1 5C                cmp     (LOWTR),y
0002B5r 2  90 18                bcc     L2520
0002B7r 2  F0 03                beq     L250D
0002B9r 2  88                   dey
0002BAr 2  D0 09                bne     L2516
0002BCr 2               L250D:
0002BCr 2  A5 11                lda     LINNUM
0002BEr 2  88                   dey
0002BFr 2  D1 5C                cmp     (LOWTR),y
0002C1r 2  90 0C                bcc     L2520
0002C3r 2  F0 0A                beq     L2520
0002C5r 2               L2516:
0002C5r 2  88                   dey
0002C6r 2  B1 5C                lda     (LOWTR),y
0002C8r 2  AA                   tax
0002C9r 2  88                   dey
0002CAr 2  B1 5C                lda     (LOWTR),y
0002CCr 2  B0 D7                bcs     FL1
0002CEr 2               L251F:
0002CEr 2  18                   clc
0002CFr 2               .endif
0002CFr 2               L2520:
0002CFr 2  60                   rts
0002D0r 2               
0002D0r 2               ; ----------------------------------------------------------------------------
0002D0r 2               ; "NEW" STATEMENT
0002D0r 2               ; ----------------------------------------------------------------------------
0002D0r 2               NEW:
0002D0r 2  D0 FD                bne     L2520
0002D2r 2               SCRTCH:
0002D2r 2  A9 00                lda     #$00
0002D4r 2  A8                   tay
0002D5r 2  91 28                sta     (TXTTAB),y
0002D7r 2  C8                   iny
0002D8r 2  91 28                sta     (TXTTAB),y
0002DAr 2  A5 28                lda     TXTTAB
0002DCr 2               .ifdef CONFIG_2
0002DCr 2  18           		clc
0002DDr 2               .endif
0002DDr 2  69 02                adc     #$02
0002DFr 2  85 2A                sta     VARTAB
0002E1r 2  A5 29                lda     TXTTAB+1
0002E3r 2  69 00                adc     #$00
0002E5r 2  85 2B                sta     VARTAB+1
0002E7r 2               ; ----------------------------------------------------------------------------
0002E7r 2               SETPTRS:
0002E7r 2  20 rr rr             jsr     STXTPT
0002EAr 2               .ifdef CONFIG_11A
0002EAr 2  A9 00                lda     #$00
0002ECr 2               
0002ECr 2               ; ----------------------------------------------------------------------------
0002ECr 2               ; "CLEAR" STATEMENT
0002ECr 2               ; ----------------------------------------------------------------------------
0002ECr 2               CLEAR:
0002ECr 2  D0 2D                bne     L256A
0002EEr 2               .endif
0002EEr 2               CLEARC:
0002EEr 2               .ifdef KBD
0002EEr 2                       lda     #<CONST_MEMSIZ
0002EEr 2                       ldy     #>CONST_MEMSIZ
0002EEr 2               .else
0002EEr 2  A5 34                lda     MEMSIZ
0002F0r 2  A4 35                ldy     MEMSIZ+1
0002F2r 2               .endif
0002F2r 2  85 30                sta     FRETOP
0002F4r 2  84 31                sty     FRETOP+1
0002F6r 2               .ifdef CONFIG_CBM_ALL
0002F6r 2  20 E7 FF             jsr     CLALL
0002F9r 2               .endif
0002F9r 2  A5 2A                lda     VARTAB
0002FBr 2  A4 2B                ldy     VARTAB+1
0002FDr 2  85 2C                sta     ARYTAB
0002FFr 2  84 2D                sty     ARYTAB+1
000301r 2  85 2E                sta     STREND
000303r 2  84 2F                sty     STREND+1
000305r 2  20 rr rr             jsr     RESTORE
000308r 2               ; ----------------------------------------------------------------------------
000308r 2               STKINI:
000308r 2  A2 16                ldx     #TEMPST
00030Ar 2  86 13                stx     TEMPPT
00030Cr 2  68                   pla
00030Dr 2               .ifdef CONFIG_2
00030Dr 2  A8           		tay
00030Er 2               .else
00030Er 2                       sta     STACK+STACK_TOP+1
00030Er 2               .endif
00030Er 2  68                   pla
00030Fr 2               .ifndef CONFIG_2
00030Fr 2                       sta     STACK+STACK_TOP+2
00030Fr 2               .endif
00030Fr 2  A2 FA                ldx     #STACK_TOP
000311r 2  9A                   txs
000312r 2               .ifdef CONFIG_2
000312r 2  48                   pha
000313r 2  98                   tya
000314r 2  48                   pha
000315r 2               .endif
000315r 2  A9 00                lda     #$00
000317r 2  85 3B                sta     OLDTEXT+1
000319r 2  85 0A                sta     SUBFLG
00031Br 2               L256A:
00031Br 2  60                   rts
00031Cr 2               
00031Cr 2               ; ----------------------------------------------------------------------------
00031Cr 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
00031Cr 2               ; ----------------------------------------------------------------------------
00031Cr 2               STXTPT:
00031Cr 2  18                   clc
00031Dr 2  A5 28                lda     TXTTAB
00031Fr 2  69 FF                adc     #$FF
000321r 2  85 77                sta     TXTPTR
000323r 2  A5 29                lda     TXTTAB+1
000325r 2  69 FF                adc     #$FF
000327r 2  85 78                sta     TXTPTR+1
000329r 2  60                   rts
00032Ar 2               
00032Ar 2               ; ----------------------------------------------------------------------------
00032Ar 2               .ifdef KBD
00032Ar 2               LE4C0:
00032Ar 2                       ldy     #<LE444
00032Ar 2                       ldx     #>LE444
00032Ar 2               LE4C4:
00032Ar 2                       jsr     LFFD6
00032Ar 2                       jsr     LFFED
00032Ar 2                       lda     $0504
00032Ar 2                       clc
00032Ar 2                       adc     #$08
00032Ar 2                       sta     $0504
00032Ar 2                       rts
00032Ar 2               
00032Ar 2               CMPJMPADRS:
00032Ar 2                       lda     1,x
00032Ar 2                       cmp     JMPADRS+2
00032Ar 2                       bne     LE4DE
00032Ar 2                       lda     0,x
00032Ar 2                       cmp     JMPADRS+1
00032Ar 2               LE4DE:
00032Ar 2                       rts
00032Ar 2               .endif
00032Ar 2               
00032Ar 2               ; ----------------------------------------------------------------------------
00032Ar 2               ; "LIST" STATEMENT
00032Ar 2               ; ----------------------------------------------------------------------------
00032Ar 2               LIST:
00032Ar 2               .ifdef KBD
00032Ar 2                       jsr     LE440
00032Ar 2                       bne     LE4DE
00032Ar 2                       pla
00032Ar 2                       pla
00032Ar 2               L25A6:
00032Ar 2                       jsr     CRDO
00032Ar 2               .else
00032Ar 2                   .ifdef AIM65
00032Ar 2                       pha
00032Ar 2                       lda     #$00
00032Ar 2               LB4BF:
00032Ar 2                       sta     INPUTFLG
00032Ar 2                       pla
00032Ar 2                   .endif
00032Ar 2                 .ifdef MICROTAN
00032Ar 2                       php
00032Ar 2                       jmp     LE21C ; patch
00032Ar 2               LC57E:
00032Ar 2                  .elseif .def(AIM65) || .def(SYM1)
00032Ar 2                       php
00032Ar 2                       jsr     LINGET
00032Ar 2               LC57E:
00032Ar 2                 .else
00032Ar 2  90 06                bcc     L2581
00032Cr 2  F0 04                beq     L2581
00032Er 2  C9 AB                cmp     #TOKEN_MINUS
000330r 2  D0 E9                bne     L256A
000332r 2               L2581:
000332r 2  20 rr rr             jsr     LINGET
000335r 2                 .endif
000335r 2  20 rr rr             jsr     FNDLIN
000338r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000338r 2                       plp
000338r 2                       beq     L2598
000338r 2                 .endif
000338r 2  20 76 00             jsr     CHRGOT
00033Br 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00033Br 2                       beq     L25A6
00033Br 2                 .else
00033Br 2  F0 0C                beq     L2598
00033Dr 2                 .endif
00033Dr 2  C9 AB                cmp     #TOKEN_MINUS
00033Fr 2  D0 8E                bne     L2520
000341r 2  20 70 00             jsr     CHRGET
000344r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000344r 2                       beq     L2598
000344r 2                       jsr     LINGET
000344r 2                       beq     L25A6
000344r 2                       rts
000344r 2                 .else
000344r 2  20 rr rr             jsr     LINGET
000347r 2  D0 86                bne     L2520
000349r 2                 .endif
000349r 2               L2598:
000349r 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
000349r 2  68                   pla
00034Ar 2  68                   pla
00034Br 2  A5 11                lda     LINNUM
00034Dr 2  05 12                ora     LINNUM+1
00034Fr 2  D0 06                bne     L25A6
000351r 2                 .endif
000351r 2  A9 FF                lda     #$FF
000353r 2  85 11                sta     LINNUM
000355r 2  85 12                sta     LINNUM+1
000357r 2               L25A6:
000357r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000357r 2                       pla
000357r 2                       pla
000357r 2                 .endif
000357r 2               L25A6X:
000357r 2               .endif
000357r 2  A0 01                ldy     #$01
000359r 2               .ifdef CONFIG_DATAFLG
000359r 2  84 09                sty     DATAFLG
00035Br 2               .endif
00035Br 2  B1 5C                lda     (LOWTRX),y
00035Dr 2  F0 43                beq     L25E5
00035Fr 2               .ifdef MICROTAN
00035Fr 2                       jmp     LE21F
00035Fr 2               LC5A9:
00035Fr 2               .else
00035Fr 2  20 E1 FF             jsr     ISCNTC
000362r 2               .endif
000362r 2               .ifndef KBD
000362r 2  20 rr rr             jsr     CRDO
000365r 2               .endif
000365r 2  C8                   iny
000366r 2  B1 5C                lda     (LOWTRX),y
000368r 2  AA                   tax
000369r 2  C8                   iny
00036Ar 2  B1 5C                lda     (LOWTRX),y
00036Cr 2  C5 12                cmp     LINNUM+1
00036Er 2  D0 04                bne     L25C1
000370r 2  E4 11                cpx     LINNUM
000372r 2  F0 02                beq     L25C3
000374r 2               L25C1:
000374r 2  B0 2C                bcs     L25E5
000376r 2               ; ---LIST ONE LINE----------------
000376r 2               L25C3:
000376r 2  84 46                sty     FORPNT
000378r 2  20 rr rr             jsr     LINPRT
00037Br 2  A9 20                lda     #$20
00037Dr 2               L25CA:
00037Dr 2  A4 46                ldy     FORPNT
00037Fr 2  29 7F                and     #$7F
000381r 2               L25CE:
000381r 2  20 rr rr             jsr     OUTDO
000384r 2               .ifdef CONFIG_DATAFLG
000384r 2  C9 22                cmp     #$22
000386r 2  D0 06                bne     LA519
000388r 2  A5 09                lda     DATAFLG
00038Ar 2  49 FF                eor     #$FF
00038Cr 2  85 09                sta     DATAFLG
00038Er 2               LA519:
00038Er 2               .endif
00038Er 2  C8                   iny
00038Fr 2               .ifdef CONFIG_11
00038Fr 2  F0 11                beq     L25E5
000391r 2               .endif
000391r 2  B1 5C                lda     (LOWTRX),y
000393r 2  D0 10                bne     L25E8
000395r 2  A8                   tay
000396r 2  B1 5C                lda     (LOWTRX),y
000398r 2  AA                   tax
000399r 2  C8                   iny
00039Ar 2  B1 5C                lda     (LOWTRX),y
00039Cr 2  86 5C                stx     LOWTRX
00039Er 2  85 5D                sta     LOWTRX+1
0003A0r 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
0003A0r 2                       bne     L25A6X
0003A0r 2               .else
0003A0r 2  D0 B5                bne     L25A6
0003A2r 2               .endif
0003A2r 2               L25E5:
0003A2r 2               .ifdef AIM65
0003A2r 2                       lda     INPUTFLG
0003A2r 2                       beq     L25E5a
0003A2r 2                       jsr     CRDO
0003A2r 2                       jsr     CRDO
0003A2r 2                       lda     #$1a
0003A2r 2                       jsr     OUTDO
0003A2r 2                       jsr     $e50a
0003A2r 2               L25E5a:
0003A2r 2               .endif
0003A2r 2  4C rr rr             jmp     RESTART
0003A5r 2               L25E8:
0003A5r 2  10 DA                bpl     L25CE
0003A7r 2               .ifdef CONFIG_DATAFLG
0003A7r 2  C9 FF                cmp     #$FF
0003A9r 2  F0 D6                beq     L25CE
0003ABr 2  24 09                bit     DATAFLG
0003ADr 2  30 D2                bmi     L25CE
0003AFr 2               .endif
0003AFr 2  38                   sec
0003B0r 2  E9 7F                sbc     #$7F
0003B2r 2  AA                   tax
0003B3r 2  84 46                sty     FORPNT
0003B5r 2  A0 FF                ldy     #$FF
0003B7r 2               L25F2:
0003B7r 2  CA                   dex
0003B8r 2  F0 08                beq     L25FD
0003BAr 2               L25F5:
0003BAr 2  C8                   iny
0003BBr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003BEr 2  10 FA                bpl     L25F5
0003C0r 2  30 F5                bmi     L25F2
0003C2r 2               L25FD:
0003C2r 2  C8                   iny
0003C3r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003C6r 2  30 B5                bmi     L25CA
0003C8r 2  20 rr rr             jsr     OUTDO
0003CBr 2  D0 F5                bne     L25FD	; always
0003CDr 2               
0003CDr 2               
0003CDr 1               .include "flow1.s"
0003CDr 2               .segment "CODE"
0003CDr 2               
0003CDr 2               ; ----------------------------------------------------------------------------
0003CDr 2               ; "FOR" STATEMENT
0003CDr 2               ;
0003CDr 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003CDr 2               ; 2 -- TXTPTR
0003CDr 2               ; 2 -- LINE NUMBER
0003CDr 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003CDr 2               ; 1 -- STEP SIGN
0003CDr 2               ; 5 -- STEP VALUE
0003CDr 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003CDr 2               ; 1 -- FOR TOKEN ($81)
0003CDr 2               ; ----------------------------------------------------------------------------
0003CDr 2               FOR:
0003CDr 2  A9 80                lda     #$80
0003CFr 2  85 0A                sta     SUBFLG
0003D1r 2  20 rr rr             jsr     LET
0003D4r 2  20 rr rr             jsr     GTFORPNT
0003D7r 2  D0 05                bne     L2619
0003D9r 2  8A                   txa
0003DAr 2  69 0F                adc     #FOR_STACK1
0003DCr 2  AA                   tax
0003DDr 2  9A                   txs
0003DEr 2               L2619:
0003DEr 2  68                   pla
0003DFr 2  68                   pla
0003E0r 2  A9 09                lda     #FOR_STACK2
0003E2r 2  20 rr rr             jsr     CHKMEM
0003E5r 2  20 rr rr             jsr     DATAN
0003E8r 2  18                   clc
0003E9r 2  98                   tya
0003EAr 2  65 77                adc     TXTPTR
0003ECr 2  48                   pha
0003EDr 2  A5 78                lda     TXTPTR+1
0003EFr 2  69 00                adc     #$00
0003F1r 2  48                   pha
0003F2r 2  A5 37                lda     CURLIN+1
0003F4r 2  48                   pha
0003F5r 2  A5 36                lda     CURLIN
0003F7r 2  48                   pha
0003F8r 2  A9 A4                lda     #TOKEN_TO
0003FAr 2  20 rr rr             jsr     SYNCHR
0003FDr 2  20 rr rr             jsr     CHKNUM
000400r 2  20 rr rr             jsr     FRMNUM
000403r 2  A5 63                lda     FACSIGN
000405r 2  09 7F                ora     #$7F
000407r 2  25 5F                and     FAC+1
000409r 2  85 5F                sta     FAC+1
00040Br 2  A9 rr                lda     #<STEP
00040Dr 2  A0 rr                ldy     #>STEP
00040Fr 2  85 1F                sta     INDEX
000411r 2  84 20                sty     INDEX+1
000413r 2  4C rr rr             jmp     FRM_STACK3
000416r 2               
000416r 2               ; ----------------------------------------------------------------------------
000416r 2               ; "STEP" PHRASE OF "FOR" STATEMENT
000416r 2               ; ----------------------------------------------------------------------------
000416r 2               STEP:
000416r 2  A9 rr                lda     #<CON_ONE
000418r 2  A0 rr                ldy     #>CON_ONE
00041Ar 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00041Dr 2  20 76 00             jsr     CHRGOT
000420r 2  C9 A9                cmp     #TOKEN_STEP
000422r 2  D0 06                bne     L2665
000424r 2  20 70 00             jsr     CHRGET
000427r 2  20 rr rr             jsr     FRMNUM
00042Ar 2               L2665:
00042Ar 2  20 rr rr             jsr     SIGN
00042Dr 2  20 rr rr             jsr     FRM_STACK2
000430r 2  A5 47                lda     FORPNT+1
000432r 2  48                   pha
000433r 2  A5 46                lda     FORPNT
000435r 2  48                   pha
000436r 2  A9 81                lda     #$81
000438r 2  48                   pha
000439r 2               
000439r 2               ; ----------------------------------------------------------------------------
000439r 2               ; PERFORM NEXT STATEMENT
000439r 2               ; ----------------------------------------------------------------------------
000439r 2               NEWSTT:
000439r 2  20 E1 FF             jsr     ISCNTC
00043Cr 2  A5 77                lda     TXTPTR
00043Er 2  A4 78                ldy     TXTPTR+1
000440r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000440r 2  C0 02                cpy     #>INPUTBUFFER
000442r 2                 .ifdef CBM2
000442r 2  EA                   nop
000443r 2                 .endif
000443r 2  F0 04                beq     LC6D4
000445r 2               .else
000445r 2               ; BUG on AppleSoft I,
000445r 2               ; fixed differently on AppleSoft II (ldx/inx)
000445r 2                       beq     L2683
000445r 2               .endif
000445r 2  85 3A                sta     OLDTEXT
000447r 2  84 3B                sty     OLDTEXT+1
000449r 2               LC6D4:
000449r 2  A0 00                ldy     #$00
00044Br 2               L2683:
00044Br 2  B1 77                lda     (TXTPTR),y
00044Dr 2               .ifndef CONFIG_11
00044Dr 2                       beq     LA5DC	; old: 1 cycle more on generic case
00044Dr 2                       cmp     #$3A
00044Dr 2                       beq     NEWSTT2
00044Dr 2               SYNERR1:
00044Dr 2                       jmp     SYNERR
00044Dr 2               LA5DC:
00044Dr 2               .else
00044Dr 2  D0 40                bne     COLON; new: 1 cycle more on ":" case
00044Fr 2               .endif
00044Fr 2  A0 02                ldy     #$02
000451r 2  B1 77                lda     (TXTPTR),y
000453r 2  18                   clc
000454r 2               .ifdef CONFIG_2
000454r 2  D0 03 4C rr          jeq     L2701
000458r 2  rr           
000459r 2               .else
000459r 2                       beq     L2701
000459r 2               .endif
000459r 2  C8                   iny
00045Ar 2  B1 77                lda     (TXTPTR),y
00045Cr 2  85 36                sta     CURLIN
00045Er 2  C8                   iny
00045Fr 2  B1 77                lda     (TXTPTR),y
000461r 2  85 37                sta     CURLIN+1
000463r 2  98                   tya
000464r 2  65 77                adc     TXTPTR
000466r 2  85 77                sta     TXTPTR
000468r 2  90 02                bcc     NEWSTT2
00046Ar 2  E6 78                inc     TXTPTR+1
00046Cr 2               NEWSTT2:
00046Cr 2  20 70 00             jsr     CHRGET
00046Fr 2  20 rr rr             jsr     EXECUTE_STATEMENT
000472r 2  4C rr rr             jmp     NEWSTT
000475r 2               
000475r 2               ; ----------------------------------------------------------------------------
000475r 2               ; EXECUTE A STATEMENT
000475r 2               ;
000475r 2               ; (A) IS FIRST CHAR OF STATEMENT
000475r 2               ; CARRY IS SET
000475r 2               ; ----------------------------------------------------------------------------
000475r 2               EXECUTE_STATEMENT:
000475r 2               .ifndef CONFIG_11A
000475r 2                       beq     RET1
000475r 2               .else
000475r 2  F0 3C                beq     RET2
000477r 2               .endif
000477r 2               .ifndef CONFIG_11
000477r 2                       sec
000477r 2               .endif
000477r 2               EXECUTE_STATEMENT1:
000477r 2  E9 80                sbc     #$80
000479r 2               .ifndef CONFIG_11
000479r 2                       jcc     LET	; old: 1 cycle more on instr.
000479r 2               .else
000479r 2  90 11                bcc     LET1; new: 1 cycle more on assignment
00047Br 2               .endif
00047Br 2  C9 23                cmp     #NUM_TOKENS
00047Dr 2               .ifdef CONFIG_2
00047Dr 2  B0 17                bcs     LC721
00047Fr 2               .else
00047Fr 2                       bcs     SYNERR1
00047Fr 2               .endif
00047Fr 2  0A                   asl     a
000480r 2  A8                   tay
000481r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
000484r 2  48                   pha
000485r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000488r 2  48                   pha
000489r 2  4C 70 00             jmp     CHRGET
00048Cr 2               
00048Cr 2               .ifdef CONFIG_11
00048Cr 2               LET1:
00048Cr 2  4C rr rr             jmp     LET
00048Fr 2               
00048Fr 2               COLON:
00048Fr 2  C9 3A                cmp     #$3A
000491r 2  F0 D9                beq     NEWSTT2
000493r 2               SYNERR1:
000493r 2  4C rr rr             jmp     SYNERR
000496r 2               .endif
000496r 2               
000496r 2               .ifdef CONFIG_2; GO TO
000496r 2               LC721:
000496r 2  C9 4B                cmp     #TOKEN_GO-$80
000498r 2  D0 F9                bne     SYNERR1
00049Ar 2  20 70 00             jsr     CHRGET
00049Dr 2  A9 A4                lda     #TOKEN_TO
00049Fr 2  20 rr rr             jsr     SYNCHR
0004A2r 2  4C rr rr             jmp     GOTO
0004A5r 2               .endif
0004A5r 2               
0004A5r 2               ; ----------------------------------------------------------------------------
0004A5r 2               ; "RESTORE" STATEMENT
0004A5r 2               ; ----------------------------------------------------------------------------
0004A5r 2               RESTORE:
0004A5r 2  38                   sec
0004A6r 2  A5 28                lda     TXTTAB
0004A8r 2  E9 01                sbc     #$01
0004AAr 2  A4 29                ldy     TXTTAB+1
0004ACr 2  B0 01                bcs     SETDA
0004AEr 2  88                   dey
0004AFr 2               SETDA:
0004AFr 2  85 3E                sta     DATPTR
0004B1r 2  84 3F                sty     DATPTR+1
0004B3r 2               RET2:
0004B3r 2  60                   rts
0004B4r 2               
0004B4r 2               .include "iscntc.s"
0004B4r 3               .segment "CODE"
0004B4r 3               ; ----------------------------------------------------------------------------
0004B4r 3               ; SEE IF CONTROL-C TYPED
0004B4r 3               ; ----------------------------------------------------------------------------
0004B4r 3               .ifndef CONFIG_CBM_ALL
0004B4r 3               .include "cbm_iscntc.s"
0004B4r 3               .endif
0004B4r 3               .ifdef KBD
0004B4r 3               .include "kbd_iscntc.s"
0004B4r 3               .endif
0004B4r 3               .ifdef OSI
0004B4r 3               .include "osi_iscntc.s"
0004B4r 3               .endif
0004B4r 3               .ifdef APPLE
0004B4r 3               .include "apple_iscntc.s"
0004B4r 3               .endif
0004B4r 3               .ifdef KIM
0004B4r 3               .include "kim_iscntc.s"
0004B4r 3               .endif
0004B4r 3               .ifdef MICROTAN
0004B4r 3               .include "microtan_iscntc.s"
0004B4r 3               .endif
0004B4r 3               .ifdef AIM65
0004B4r 3               .include "aim65_iscntc.s"
0004B4r 3               .endif
0004B4r 3               .ifdef SYM1
0004B4r 3               .include "sym1_iscntc.s"
0004B4r 3               .endif
0004B4r 3               .ifdef EATER
0004B4r 3               .include "eater_iscntc.s"
0004B4r 3               .endif
0004B4r 3               ;!!! runs into "STOP"
0004B4r 3               
0004B4r 2               ;!!! runs into "STOP"
0004B4r 2               ; ----------------------------------------------------------------------------
0004B4r 2               ; "STOP" STATEMENT
0004B4r 2               ; ----------------------------------------------------------------------------
0004B4r 2               STOP:
0004B4r 2  B0 01                bcs     END2
0004B6r 2               
0004B6r 2               ; ----------------------------------------------------------------------------
0004B6r 2               ; "END" STATEMENT
0004B6r 2               ; ----------------------------------------------------------------------------
0004B6r 2               END:
0004B6r 2  18                   clc
0004B7r 2               END2:
0004B7r 2  D0 40                bne     RET1
0004B9r 2  A5 77                lda     TXTPTR
0004BBr 2  A4 78                ldy     TXTPTR+1
0004BDr 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004BDr 2               ; BUG on AppleSoft I
0004BDr 2               ; fix exists on AppleSoft II
0004BDr 2               ; TXTPTR+1 will always be > 0
0004BDr 2  A6 37                ldx     CURLIN+1
0004BFr 2  E8                   inx
0004C0r 2               .endif
0004C0r 2  F0 0C                beq     END4
0004C2r 2  85 3A                sta     OLDTEXT
0004C4r 2  84 3B                sty     OLDTEXT+1
0004C6r 2               CONTROL_C_TYPED:
0004C6r 2  A5 36                lda     CURLIN
0004C8r 2  A4 37                ldy     CURLIN+1
0004CAr 2  85 38                sta     OLDLIN
0004CCr 2  84 39                sty     OLDLIN+1
0004CEr 2               END4:
0004CEr 2  68                   pla
0004CFr 2  68                   pla
0004D0r 2               L2701:
0004D0r 2  A9 rr                lda     #<QT_BREAK
0004D2r 2  A0 rr                ldy     #>QT_BREAK
0004D4r 2               .ifndef KBD
0004D4r 2  A2 00                ldx     #$00
0004D6r 2  86 0D                stx     Z14
0004D8r 2               .endif
0004D8r 2  90 03                bcc     L270E
0004DAr 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004DDr 2               L270E:
0004DDr 2  4C rr rr             jmp     RESTART
0004E0r 2               .ifdef KBD
0004E0r 2               LE664:
0004E0r 2                       tay
0004E0r 2                       jmp     SNGFLT
0004E0r 2               .endif
0004E0r 2               
0004E0r 2               ; ----------------------------------------------------------------------------
0004E0r 2               ; "CONT" COMMAND
0004E0r 2               ; ----------------------------------------------------------------------------
0004E0r 2               CONT:
0004E0r 2  D0 17                bne     RET1
0004E2r 2  A2 DB                ldx     #ERR_CANTCONT
0004E4r 2  A4 3B                ldy     OLDTEXT+1
0004E6r 2  D0 03                bne     L271C
0004E8r 2  4C rr rr             jmp     ERROR
0004EBr 2               L271C:
0004EBr 2  A5 3A                lda     OLDTEXT
0004EDr 2  85 77                sta     TXTPTR
0004EFr 2  84 78                sty     TXTPTR+1
0004F1r 2  A5 38                lda     OLDLIN
0004F3r 2  A4 39                ldy     OLDLIN+1
0004F5r 2  85 36                sta     CURLIN
0004F7r 2  84 37                sty     CURLIN+1
0004F9r 2               RET1:
0004F9r 2  60                   rts
0004FAr 2               
0004FAr 2               .ifdef KBD
0004FAr 2               PRT:
0004FAr 2                       jsr     GETBYT
0004FAr 2                       txa
0004FAr 2               ; not ROR bug safe
0004FAr 2                       ror     a
0004FAr 2                       ror     a
0004FAr 2                       ror     a
0004FAr 2                       sta     $8F
0004FAr 2                       rts
0004FAr 2               
0004FAr 2               LE68C:
0004FAr 2                       ldy     #$12
0004FAr 2               LE68E:
0004FAr 2                       lda     LEA30,y
0004FAr 2                       sta     $03A2,y
0004FAr 2                       dey
0004FAr 2                       bpl     LE68E
0004FAr 2                       rts
0004FAr 2               .endif
0004FAr 2               
0004FAr 2               .ifndef AIM65
0004FAr 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004FAr 2               ; CBM1 has the keyword removed,
0004FAr 2               ; but the code is still here
0004FAr 2               NULL:
0004FAr 2                       jsr     GETBYT
0004FAr 2                       bne     RET1
0004FAr 2                       inx
0004FAr 2                       cpx     #NULL_MAX
0004FAr 2                       bcs     L2739
0004FAr 2                       dex
0004FAr 2                       stx     Z15
0004FAr 2               L2738:
0004FAr 2                       rts
0004FAr 2               L2739:
0004FAr 2                       jmp     IQERR
0004FAr 2               .endif
0004FAr 2               .ifndef CONFIG_11A
0004FAr 2               CLEAR:
0004FAr 2                       bne     RET1
0004FAr 2                       jmp     CLEARC
0004FAr 2               .endif
0004FAr 2               .endif
0004FAr 2               
0004FAr 1               .include "loadsave.s"
0004FAr 2               .segment "CODE"
0004FAr 2               
0004FAr 2               .ifdef APPLE
0004FAr 2               .include "apple_loadsave.s"
0004FAr 2               .endif
0004FAr 2               .ifdef KIM
0004FAr 2               .include "kim_loadsave.s"
0004FAr 2               .endif
0004FAr 2               .ifdef MICROTAN
0004FAr 2               .include "microtan_loadsave.s"
0004FAr 2               .endif
0004FAr 2               .ifdef AIM65
0004FAr 2               .include "aim65_loadsave.s"
0004FAr 2               .endif
0004FAr 2               .ifdef SYM1
0004FAr 2               .include "sym1_loadsave.s"
0004FAr 2               .endif
0004FAr 2               
0004FAr 1               .include "flow2.s"
0004FAr 2               .segment "CODE"
0004FAr 2               ; ----------------------------------------------------------------------------
0004FAr 2               ; "RUN" COMMAND
0004FAr 2               ; ----------------------------------------------------------------------------
0004FAr 2               RUN:
0004FAr 2  D0 03                bne     L27CF
0004FCr 2  4C rr rr             jmp     SETPTRS
0004FFr 2               L27CF:
0004FFr 2  20 rr rr             jsr     CLEARC
000502r 2  4C rr rr             jmp     L27E9
000505r 2               
000505r 2               ; ----------------------------------------------------------------------------
000505r 2               ; "GOSUB" STATEMENT
000505r 2               ;
000505r 2               ; LEAVES 7 BYTES ON STACK:
000505r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
000505r 2               ; 2 -- TXTPTR
000505r 2               ; 2 -- LINE #
000505r 2               ; 1 -- GOSUB TOKEN
000505r 2               ; ----------------------------------------------------------------------------
000505r 2               GOSUB:
000505r 2  A9 03                lda     #$03
000507r 2  20 rr rr             jsr     CHKMEM
00050Ar 2  A5 78                lda     TXTPTR+1
00050Cr 2  48                   pha
00050Dr 2  A5 77                lda     TXTPTR
00050Fr 2  48                   pha
000510r 2  A5 37                lda     CURLIN+1
000512r 2  48                   pha
000513r 2  A5 36                lda     CURLIN
000515r 2  48                   pha
000516r 2  A9 8D                lda     #TOKEN_GOSUB
000518r 2  48                   pha
000519r 2               L27E9:
000519r 2  20 76 00             jsr     CHRGOT
00051Cr 2  20 rr rr             jsr     GOTO
00051Fr 2  4C rr rr             jmp     NEWSTT
000522r 2               
000522r 2               ; ----------------------------------------------------------------------------
000522r 2               ; "GOTO" STATEMENT
000522r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000522r 2               ; ----------------------------------------------------------------------------
000522r 2               GOTO:
000522r 2  20 rr rr             jsr     LINGET
000525r 2  20 rr rr             jsr     REMN
000528r 2  A5 37                lda     CURLIN+1
00052Ar 2  C5 12                cmp     LINNUM+1
00052Cr 2  B0 0B                bcs     L2809
00052Er 2  98                   tya
00052Fr 2  38                   sec
000530r 2  65 77                adc     TXTPTR
000532r 2  A6 78                ldx     TXTPTR+1
000534r 2  90 07                bcc     L280D
000536r 2  E8                   inx
000537r 2  B0 04                bcs     L280D
000539r 2               L2809:
000539r 2  A5 28                lda     TXTTAB
00053Br 2  A6 29                ldx     TXTTAB+1
00053Dr 2               L280D:
00053Dr 2               .ifdef KBD
00053Dr 2                       jsr     LF457
00053Dr 2                       bne     UNDERR
00053Dr 2               .else
00053Dr 2  20 rr rr             jsr     FL1
000540r 2  90 1E                bcc     UNDERR
000542r 2               .endif
000542r 2  A5 5C                lda     LOWTRX
000544r 2  E9 01                sbc     #$01
000546r 2  85 77                sta     TXTPTR
000548r 2  A5 5D                lda     LOWTRX+1
00054Ar 2  E9 00                sbc     #$00
00054Cr 2  85 78                sta     TXTPTR+1
00054Er 2               L281E:
00054Er 2  60                   rts
00054Fr 2               
00054Fr 2               ; ----------------------------------------------------------------------------
00054Fr 2               ; "POP" AND "RETURN" STATEMENTS
00054Fr 2               ; ----------------------------------------------------------------------------
00054Fr 2               POP:
00054Fr 2  D0 FD                bne     L281E
000551r 2  A9 FF                lda     #$FF
000553r 2               .ifdef CONFIG_2A
000553r 2  85 47                sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000555r 2               .else
000555r 2                       sta     FORPNT
000555r 2               .endif
000555r 2  20 rr rr             jsr     GTFORPNT
000558r 2  9A                   txs
000559r 2  C9 8D                cmp     #TOKEN_GOSUB
00055Br 2  F0 0B                beq     RETURN
00055Dr 2  A2 16                ldx     #ERR_NOGOSUB
00055Fr 2  2C                   .byte   $2C
000560r 2               UNDERR:
000560r 2  A2 5A                ldx     #ERR_UNDEFSTAT
000562r 2  4C rr rr             jmp     ERROR
000565r 2               ; ----------------------------------------------------------------------------
000565r 2               SYNERR2:
000565r 2  4C rr rr             jmp     SYNERR
000568r 2               ; ----------------------------------------------------------------------------
000568r 2               RETURN:
000568r 2  68                   pla
000569r 2  68                   pla
00056Ar 2  85 36                sta     CURLIN
00056Cr 2  68                   pla
00056Dr 2  85 37                sta     CURLIN+1
00056Fr 2  68                   pla
000570r 2  85 77                sta     TXTPTR
000572r 2  68                   pla
000573r 2  85 78                sta     TXTPTR+1
000575r 2               
000575r 2               ; ----------------------------------------------------------------------------
000575r 2               ; "DATA" STATEMENT
000575r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000575r 2               ; ----------------------------------------------------------------------------
000575r 2               DATA:
000575r 2  20 rr rr             jsr     DATAN
000578r 2               
000578r 2               ; ----------------------------------------------------------------------------
000578r 2               ; ADD (Y) TO TXTPTR
000578r 2               ; ----------------------------------------------------------------------------
000578r 2               ADDON:
000578r 2  98                   tya
000579r 2  18                   clc
00057Ar 2  65 77                adc     TXTPTR
00057Cr 2  85 77                sta     TXTPTR
00057Er 2  90 02                bcc     L2852
000580r 2  E6 78                inc     TXTPTR+1
000582r 2               L2852:
000582r 2  60                   rts
000583r 2               
000583r 2               ; ----------------------------------------------------------------------------
000583r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000583r 2               ; ----------------------------------------------------------------------------
000583r 2               DATAN:
000583r 2  A2 3A                ldx     #$3A
000585r 2  2C                   .byte   $2C
000586r 2               REMN:
000586r 2  A2 00                ldx     #$00
000588r 2  86 03                stx     CHARAC
00058Ar 2  A0 00                ldy     #$00
00058Cr 2  84 04                sty     ENDCHR
00058Er 2               L285E:
00058Er 2  A5 04                lda     ENDCHR
000590r 2  A6 03                ldx     CHARAC
000592r 2  85 03                sta     CHARAC
000594r 2  86 04                stx     ENDCHR
000596r 2               L2866:
000596r 2  B1 77                lda     (TXTPTR),y
000598r 2  F0 E8                beq     L2852
00059Ar 2  C5 04                cmp     ENDCHR
00059Cr 2  F0 E4                beq     L2852
00059Er 2  C8                   iny
00059Fr 2  C9 22                cmp     #$22
0005A1r 2               .ifndef CONFIG_11
0005A1r 2                       beq     L285E; old: swap & cont is faster
0005A1r 2                       bne     L2866
0005A1r 2               .else
0005A1r 2  D0 F3                bne     L2866; new: cont is faster
0005A3r 2  F0 E9                beq     L285E
0005A5r 2               .endif
0005A5r 2               
0005A5r 2               ; ----------------------------------------------------------------------------
0005A5r 2               ; "IF" STATEMENT
0005A5r 2               ; ----------------------------------------------------------------------------
0005A5r 2               IF:
0005A5r 2  20 rr rr             jsr     FRMEVL
0005A8r 2  20 76 00             jsr     CHRGOT
0005ABr 2  C9 89                cmp     #TOKEN_GOTO
0005ADr 2  F0 05                beq     L2884
0005AFr 2  A9 A7                lda     #TOKEN_THEN
0005B1r 2  20 rr rr             jsr     SYNCHR
0005B4r 2               L2884:
0005B4r 2  A5 5E                lda     FAC
0005B6r 2  D0 05                bne     L288D
0005B8r 2               
0005B8r 2               ; ----------------------------------------------------------------------------
0005B8r 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005B8r 2               ; ----------------------------------------------------------------------------
0005B8r 2               REM:
0005B8r 2  20 rr rr             jsr     REMN
0005BBr 2  F0 BB                beq     ADDON
0005BDr 2               L288D:
0005BDr 2  20 76 00             jsr     CHRGOT
0005C0r 2  B0 03                bcs     L2895
0005C2r 2  4C rr rr             jmp     GOTO
0005C5r 2               L2895:
0005C5r 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005C8r 2               
0005C8r 2               ; ----------------------------------------------------------------------------
0005C8r 2               ; "ON" STATEMENT
0005C8r 2               ;
0005C8r 2               ; ON <EXP> GOTO <LIST>
0005C8r 2               ; ON <EXP> GOSUB <LIST>
0005C8r 2               ; ----------------------------------------------------------------------------
0005C8r 2               ON:
0005C8r 2  20 rr rr             jsr     GETBYT
0005CBr 2  48                   pha
0005CCr 2  C9 8D                cmp     #TOKEN_GOSUB
0005CEr 2  F0 04                beq     L28A4
0005D0r 2               L28A0:
0005D0r 2  C9 89                cmp     #TOKEN_GOTO
0005D2r 2  D0 91                bne     SYNERR2
0005D4r 2               L28A4:
0005D4r 2  C6 62                dec     FAC_LAST
0005D6r 2  D0 04                bne     L28AC
0005D8r 2  68                   pla
0005D9r 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005DCr 2               L28AC:
0005DCr 2  20 70 00             jsr     CHRGET
0005DFr 2  20 rr rr             jsr     LINGET
0005E2r 2  C9 2C                cmp     #$2C
0005E4r 2  F0 EE                beq     L28A4
0005E6r 2  68                   pla
0005E7r 2               L28B7:
0005E7r 2  60                   rts
0005E8r 2               
0005E8r 1               .include "misc1.s"
0005E8r 2               .segment "CODE"
0005E8r 2               
0005E8r 2               ; ----------------------------------------------------------------------------
0005E8r 2               ; CONVERT LINE NUMBER
0005E8r 2               ; ----------------------------------------------------------------------------
0005E8r 2               LINGET:
0005E8r 2  A2 00                ldx     #$00
0005EAr 2  86 11                stx     LINNUM
0005ECr 2  86 12                stx     LINNUM+1
0005EEr 2               L28BE:
0005EEr 2  B0 F7                bcs     L28B7
0005F0r 2  E9 2F                sbc     #$2F
0005F2r 2  85 03                sta     CHARAC
0005F4r 2  A5 12                lda     LINNUM+1
0005F6r 2  85 1F                sta     INDEX
0005F8r 2  C9 19                cmp     #$19
0005FAr 2  B0 D4                bcs     L28A0
0005FCr 2               ; <<<<<DANGEROUS CODE>>>>>
0005FCr 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
0005FCr 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
0005FCr 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
0005FCr 2               ; FOR OTHER CALLS TO LINGET.
0005FCr 2               ;
0005FCr 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
0005FCr 2               ; THEN TYPE "GO TO 437761".
0005FCr 2               ;
0005FCr 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
0005FCr 2               ; THE PROBLEM.  ($AB00 - $ABFF)
0005FCr 2               ; <<<<<DANGEROUS CODE>>>>>
0005FCr 2  A5 11                lda     LINNUM
0005FEr 2  0A                   asl     a
0005FFr 2  26 1F                rol     INDEX
000601r 2  0A                   asl     a
000602r 2  26 1F                rol     INDEX
000604r 2  65 11                adc     LINNUM
000606r 2  85 11                sta     LINNUM
000608r 2  A5 1F                lda     INDEX
00060Ar 2  65 12                adc     LINNUM+1
00060Cr 2  85 12                sta     LINNUM+1
00060Er 2  06 11                asl     LINNUM
000610r 2  26 12                rol     LINNUM+1
000612r 2  A5 11                lda     LINNUM
000614r 2  65 03                adc     CHARAC
000616r 2  85 11                sta     LINNUM
000618r 2  90 02                bcc     L28EC
00061Ar 2  E6 12                inc     LINNUM+1
00061Cr 2               L28EC:
00061Cr 2  20 70 00             jsr     CHRGET
00061Fr 2  4C rr rr             jmp     L28BE
000622r 2               
000622r 2               ; ----------------------------------------------------------------------------
000622r 2               ; "LET" STATEMENT
000622r 2               ;
000622r 2               ; LET <VAR> = <EXP>
000622r 2               ; <VAR> = <EXP>
000622r 2               ; ----------------------------------------------------------------------------
000622r 2               LET:
000622r 2  20 rr rr             jsr     PTRGET
000625r 2  85 46                sta     FORPNT
000627r 2  84 47                sty     FORPNT+1
000629r 2  A9 B2                lda     #TOKEN_EQUAL
00062Br 2  20 rr rr             jsr     SYNCHR
00062Er 2               .ifndef CONFIG_SMALL
00062Er 2  A5 08                lda     VALTYP+1
000630r 2  48                   pha
000631r 2               .endif
000631r 2  A5 07                lda     VALTYP
000633r 2  48                   pha
000634r 2  20 rr rr             jsr     FRMEVL
000637r 2  68                   pla
000638r 2  2A                   rol     a
000639r 2  20 rr rr             jsr     CHKVAL
00063Cr 2  D0 18                bne     LETSTRING
00063Er 2               .ifndef CONFIG_SMALL
00063Er 2  68                   pla
00063Fr 2               LET2:
00063Fr 2  10 12                bpl     L2923
000641r 2  20 rr rr             jsr     ROUND_FAC
000644r 2  20 rr rr             jsr     AYINT
000647r 2  A0 00                ldy     #$00
000649r 2  A5 61                lda     FAC+3
00064Br 2  91 46                sta     (FORPNT),y
00064Dr 2  C8                   iny
00064Er 2  A5 62                lda     FAC+4
000650r 2  91 46                sta     (FORPNT),y
000652r 2  60                   rts
000653r 2               L2923:
000653r 2               .endif
000653r 2               
000653r 2               ; ----------------------------------------------------------------------------
000653r 2               ; REAL VARIABLE = EXPRESSION
000653r 2               ; ----------------------------------------------------------------------------
000653r 2  4C rr rr             jmp     SETFOR
000656r 2               LETSTRING:
000656r 2               .ifndef CONFIG_SMALL
000656r 2  68                   pla
000657r 2               .endif
000657r 2               
000657r 2               ; ----------------------------------------------------------------------------
000657r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
000657r 2               ; ----------------------------------------------------------------------------
000657r 2               PUTSTR:
000657r 2               .ifdef CONFIG_CBM_ALL
000657r 2  A4 47                ldy     FORPNT+1
000659r 2                 .ifdef CBM1
000659r 2                       cpy     #$D0	; TI$
000659r 2                 .else
000659r 2  C0 DE                cpy     #$DE
00065Br 2                 .endif
00065Br 2  D0 4F                bne     LC92B
00065Dr 2  20 rr rr             jsr     FREFAC
000660r 2  C9 06                cmp     #$06
000662r 2                 .ifdef CBM2
000662r 2  D0 40                bne     IQERR1
000664r 2                 .else
000664r 2                       jne     IQERR
000664r 2                 .endif
000664r 2  A0 00                ldy     #$00
000666r 2  84 5E                sty     FAC
000668r 2  84 63                sty     FACSIGN
00066Ar 2               LC8E8:
00066Ar 2  84 6E                sty     STRNG2
00066Cr 2  20 rr rr             jsr     LC91C
00066Fr 2  20 rr rr             jsr     MUL10
000672r 2  E6 6E                inc     STRNG2
000674r 2  A4 6E                ldy     STRNG2
000676r 2  20 rr rr             jsr     LC91C
000679r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00067Cr 2  AA                   tax
00067Dr 2  F0 05                beq     LC902
00067Fr 2  E8                   inx
000680r 2  8A                   txa
000681r 2  20 rr rr             jsr     LD9BF
000684r 2               LC902:
000684r 2  A4 6E                ldy     STRNG2
000686r 2  C8                   iny
000687r 2  C0 06                cpy     #$06
000689r 2  D0 DF                bne     LC8E8
00068Br 2  20 rr rr             jsr     MUL10
00068Er 2  20 rr rr             jsr     QINT
000691r 2  A2 02                ldx     #$02
000693r 2  78                   sei
000694r 2               LC912:
000694r 2  B5 60                lda     FAC+2,x
000696r 2  95 8D                sta     TISTR,x
000698r 2  CA                   dex
000699r 2  10 F9                bpl     LC912
00069Br 2  58                   cli
00069Cr 2  60                   rts
00069Dr 2               LC91C:
00069Dr 2  B1 1F                lda     (INDEX),y
00069Fr 2  20 7D 00             jsr     CHRGOT2
0006A2r 2  90 03                bcc     LC926
0006A4r 2               IQERR1:
0006A4r 2  4C rr rr             jmp     IQERR
0006A7r 2               LC926:
0006A7r 2  E9 2F                sbc     #$2F
0006A9r 2  4C rr rr             jmp     ADDACC
0006ACr 2               LC92B:
0006ACr 2               .endif
0006ACr 2  A0 02                ldy     #$02
0006AEr 2  B1 61                lda     (FAC_LAST-1),y
0006B0r 2  C5 31                cmp     FRETOP+1
0006B2r 2  90 17                bcc     L2946
0006B4r 2  D0 07                bne     L2938
0006B6r 2  88                   dey
0006B7r 2  B1 61                lda     (FAC_LAST-1),y
0006B9r 2  C5 30                cmp     FRETOP
0006BBr 2  90 0E                bcc     L2946
0006BDr 2               L2938:
0006BDr 2  A4 62                ldy     FAC_LAST
0006BFr 2  C4 2B                cpy     VARTAB+1
0006C1r 2  90 08                bcc     L2946
0006C3r 2  D0 0D                bne     L294D
0006C5r 2  A5 61                lda     FAC_LAST-1
0006C7r 2  C5 2A                cmp     VARTAB
0006C9r 2  B0 07                bcs     L294D
0006CBr 2               L2946:
0006CBr 2  A5 61                lda     FAC_LAST-1
0006CDr 2  A4 62                ldy     FAC_LAST
0006CFr 2  4C rr rr             jmp     L2963
0006D2r 2               L294D:
0006D2r 2  A0 00                ldy     #$00
0006D4r 2  B1 61                lda     (FAC_LAST-1),y
0006D6r 2  20 rr rr             jsr     STRINI
0006D9r 2  A5 4D                lda     DSCPTR
0006DBr 2  A4 4E                ldy     DSCPTR+1
0006DDr 2  85 6C                sta     STRNG1
0006DFr 2  84 6D                sty     STRNG1+1
0006E1r 2  20 rr rr             jsr     MOVINS
0006E4r 2  A9 5E                lda     #FAC
0006E6r 2  A0 00                ldy     #$00
0006E8r 2               L2963:
0006E8r 2  85 4D                sta     DSCPTR
0006EAr 2  84 4E                sty     DSCPTR+1
0006ECr 2  20 rr rr             jsr     FRETMS
0006EFr 2  A0 00                ldy     #$00
0006F1r 2  B1 4D                lda     (DSCPTR),y
0006F3r 2  91 46                sta     (FORPNT),y
0006F5r 2  C8                   iny
0006F6r 2  B1 4D                lda     (DSCPTR),y
0006F8r 2  91 46                sta     (FORPNT),y
0006FAr 2  C8                   iny
0006FBr 2  B1 4D                lda     (DSCPTR),y
0006FDr 2  91 46                sta     (FORPNT),y
0006FFr 2               RET5:
0006FFr 2  60                   rts
000700r 2               .ifdef AIM65
000700r 2               LB89D:
000700r 2                       cmp     #$21
000700r 2                       bne     RET5
000700r 2                       lda     #$80
000700r 2                       sta     PRIFLG
000700r 2                       jmp     CHRGET
000700r 2               .endif
000700r 2               
000700r 2               .ifdef CONFIG_FILE
000700r 2               PRINTH:
000700r 2  20 rr rr             jsr     CMD
000703r 2  4C rr rr             jmp     LCAD6
000706r 2               CMD:
000706r 2  20 rr rr             jsr     GETBYT
000709r 2  F0 05                beq     LC98F
00070Br 2  A9 2C                lda     #$2C
00070Dr 2  20 rr rr             jsr     SYNCHR
000710r 2               LC98F:
000710r 2  08                   php
000711r 2  20 C9 FF             jsr     CHKOUT
000714r 2  86 0E                stx     CURDVC
000716r 2  28                   plp
000717r 2  4C rr rr             jmp     PRINT
00071Ar 2               .endif
00071Ar 2               
00071Ar 2               
00071Ar 1               .include "print.s"
00071Ar 2               .segment "CODE"
00071Ar 2               
00071Ar 2               .ifdef AIM65
00071Ar 2               PRINT:
00071Ar 2                       lda     PRIFLG
00071Ar 2                       sta     ZBE
00071Ar 2                       jsr     L297E
00071Ar 2               LB8B1:
00071Ar 2                       lda     ZBE
00071Ar 2                       sta     PRIFLG
00071Ar 2                       rts
00071Ar 2               .endif
00071Ar 2               
00071Ar 2               PRSTRING:
00071Ar 2  20 rr rr             jsr     STRPRT
00071Dr 2               L297E:
00071Dr 2  20 76 00             jsr     CHRGOT
000720r 2               
000720r 2               ; ----------------------------------------------------------------------------
000720r 2               ; "PRINT" STATEMENT
000720r 2               ; ----------------------------------------------------------------------------
000720r 2               .ifndef AIM65
000720r 2               PRINT:
000720r 2               .endif
000720r 2  F0 35                beq     CRDO
000722r 2               PRINT2:
000722r 2  F0 3F                beq     L29DD
000724r 2               .ifdef AIM65
000724r 2                       jsr     LB89D
000724r 2                       beq     L29DD
000724r 2               .endif
000724r 2  C9 A3                cmp     #TOKEN_TAB
000726r 2  F0 49                beq     L29F5
000728r 2  C9 A6                cmp     #TOKEN_SPC
00072Ar 2               .ifdef CONFIG_2
00072Ar 2  18                   clc	; also AppleSoft II
00072Br 2               .endif
00072Br 2  F0 44                beq     L29F5
00072Dr 2  C9 2C                cmp     #','
00072Fr 2               ; Pre-KIM had no CLC. KIM added the CLC
00072Fr 2               ; here. Post-KIM moved the CLC up...
00072Fr 2               ; (makes no sense on KIM, liveness = 0)
00072Fr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
00072Fr 2                       clc
00072Fr 2               .endif
00072Fr 2  F0 33                beq     L29DE
000731r 2  C9 3B                cmp     #$3B
000733r 2  F0 51                beq     L2A0D
000735r 2  20 rr rr             jsr     FRMEVL
000738r 2  24 07                bit     VALTYP
00073Ar 2  30 DE                bmi     PRSTRING
00073Cr 2  20 rr rr             jsr     FOUT
00073Fr 2  20 rr rr             jsr     STRLIT
000742r 2               .ifndef CONFIG_NO_CR
000742r 2                       ldy     #$00
000742r 2                       lda     (FAC_LAST-1),y
000742r 2                       clc
000742r 2                       adc     POSX
000742r 2                 .ifdef KBD
000742r 2                       cmp     #$28
000742r 2                 .else
000742r 2                       cmp     Z17
000742r 2                 .endif
000742r 2                       bcc     L29B1
000742r 2                       jsr     CRDO
000742r 2               L29B1:
000742r 2               .endif
000742r 2  20 rr rr             jsr     STRPRT
000745r 2               .ifdef KBD
000745r 2                       jmp     L297E
000745r 2               .else
000745r 2  20 rr rr             jsr     OUTSP
000748r 2  D0 D3                bne     L297E ; branch always
00074Ar 2               .endif
00074Ar 2               
00074Ar 2               .ifdef KBD
00074Ar 2               ; PATCHES
00074Ar 2               LE86C:
00074Ar 2                       pla
00074Ar 2                       jmp     CONTROL_C_TYPED
00074Ar 2               LE870:
00074Ar 2                       jsr     GETBYT
00074Ar 2                       txa
00074Ar 2               LE874:
00074Ar 2                       beq     LE878
00074Ar 2                       bpl     LE8F2
00074Ar 2               LE878:
00074Ar 2                       jmp     IQERR
00074Ar 2               ; PATCHES
00074Ar 2               .endif
00074Ar 2               
00074Ar 2               
00074Ar 2               
00074Ar 2               .ifndef KBD
00074Ar 2               L29B9:
00074Ar 2                 .ifdef CBM2
00074Ar 2  A9 00                lda     #$00
00074Cr 2  9D 00 02             sta     INPUTBUFFER,x
00074Fr 2  A2 FF                ldx     #<(INPUTBUFFER-1)
000751r 2  A0 01                ldy     #>(INPUTBUFFER-1)
000753r 2                 .else
000753r 2                   .ifndef APPLE
000753r 2                       ldy     #$00
000753r 2                       sty     INPUTBUFFER,x
000753r 2                       ldx     #LINNUM+1
000753r 2                   .endif
000753r 2                   .if .def(MICROTAN) || .def(SYM1)
000753r 2                       bne     CRDO2
000753r 2               	.endif
000753r 2                 .endif
000753r 2                 .ifdef CONFIG_FILE
000753r 2  A5 0E                lda     CURDVC
000755r 2  D0 0C                bne     L29DD
000757r 2                 .endif
000757r 2               .endif
000757r 2               
000757r 2               
000757r 2               CRDO:
000757r 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
000757r 2                       lda     CURDVC
000757r 2                       bne     LC9D8
000757r 2                       sta     POSX
000757r 2               LC9D8:
000757r 2               .endif
000757r 2  A9 0D                lda     #CRLF_1
000759r 2               .ifndef CONFIG_CBM_ALL
000759r 2                       sta     POSX
000759r 2               .endif
000759r 2  20 rr rr             jsr     OUTDO
00075Cr 2               CRDO2:
00075Cr 2  A9 0A                lda     #CRLF_2
00075Er 2  20 rr rr             jsr     OUTDO
000761r 2               
000761r 2               PRINTNULLS:
000761r 2               .if .def(KBD) || .def(AIM65)
000761r 2                       lda     #$00
000761r 2                       sta     POSX
000761r 2                       eor     #$FF
000761r 2               .else
000761r 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
000761r 2                   .ifdef CONFIG_FILE
000761r 2                   ; Although there is no statement for it,
000761r 2                   ; CBM1 had NULL support and ignores
000761r 2                   ; it when not targeting the screen,
000761r 2                   ; CBM2 dropped it completely.
000761r 2                       lda     CURDVC
000761r 2                       bne     L29DD
000761r 2                   .endif
000761r 2                       txa
000761r 2                       pha
000761r 2                       ldx     Z15
000761r 2                       beq     L29D9
000761r 2                     .ifdef SYM1
000761r 2                       lda     #$FF
000761r 2                     .else
000761r 2                       lda     #$00
000761r 2                     .endif
000761r 2               L29D3:
000761r 2                       jsr     OUTDO
000761r 2                       dex
000761r 2                       bne     L29D3
000761r 2               L29D9:
000761r 2                       stx     POSX
000761r 2                       pla
000761r 2                       tax
000761r 2                 .else
000761r 2                   .ifndef CONFIG_2
000761r 2                       lda     #$00
000761r 2                       sta     POSX
000761r 2                   .endif
000761r 2  49 FF                eor     #$FF
000763r 2                 .endif
000763r 2               .endif
000763r 2               L29DD:
000763r 2  60                   rts
000764r 2               L29DE:
000764r 2  A5 C6                lda     POSX
000766r 2               .ifndef CONFIG_NO_CR
000766r 2                 .ifdef KBD
000766r 2                       cmp     #$1A
000766r 2                 .else
000766r 2                       cmp     Z18
000766r 2                 .endif
000766r 2                       bcc     L29EA
000766r 2                       jsr     CRDO
000766r 2                       jmp     L2A0D
000766r 2               L29EA:
000766r 2               .endif
000766r 2  38                   sec
000767r 2               L29EB:
000767r 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
000767r 2  E9 0A                sbc     #$0A
000769r 2               .else
000769r 2                 .ifdef KBD
000769r 2                       sbc     #$0D
000769r 2                 .else
000769r 2                       sbc     #$0E
000769r 2                 .endif
000769r 2               .endif
000769r 2  B0 FC                bcs     L29EB
00076Br 2  49 FF                eor     #$FF
00076Dr 2  69 01                adc     #$01
00076Fr 2  D0 10                bne     L2A08
000771r 2               L29F5:
000771r 2               .ifdef CONFIG_11A
000771r 2  08                   php
000772r 2               .else
000772r 2                       pha
000772r 2               .endif
000772r 2  20 rr rr             jsr     GTBYTC
000775r 2  C9 29                cmp     #')'
000777r 2               .ifdef CONFIG_11A
000777r 2                 .ifdef CONFIG_2
000777r 2  D0 5D                bne     SYNERR4
000779r 2                 .else
000779r 2                       jne     SYNERR
000779r 2                 .endif
000779r 2  28                   plp
00077Ar 2  90 06                bcc     L2A09
00077Cr 2               .else
00077Cr 2                 .ifdef CONFIG_11
00077Cr 2                       jne     SYNERR
00077Cr 2                 .else
00077Cr 2                       bne     SYNERR4
00077Cr 2                 .endif
00077Cr 2                       pla
00077Cr 2                       cmp     #TOKEN_TAB
00077Cr 2                 .ifdef CONFIG_11
00077Cr 2                       bne     L2A09
00077Cr 2                 .else
00077Cr 2                       bne     L2A0A
00077Cr 2                 .endif
00077Cr 2               .endif
00077Cr 2  8A                   txa
00077Dr 2  E5 C6                sbc     POSX
00077Fr 2  90 05                bcc     L2A0D
000781r 2               .ifndef CONFIG_11
000781r 2                       beq     L2A0D
000781r 2               .endif
000781r 2               L2A08:
000781r 2  AA                   tax
000782r 2               .ifdef CONFIG_11
000782r 2               L2A09:
000782r 2  E8                   inx
000783r 2               .endif
000783r 2               L2A0A:
000783r 2               .ifndef CONFIG_11
000783r 2                       jsr     OUTSP
000783r 2               .endif
000783r 2  CA                   dex
000784r 2               .ifndef CONFIG_11
000784r 2                       bne     L2A0A
000784r 2               .else
000784r 2  D0 06                bne     L2A13
000786r 2               .endif
000786r 2               L2A0D:
000786r 2  20 70 00             jsr     CHRGET
000789r 2  4C rr rr             jmp     PRINT2
00078Cr 2               .ifdef CONFIG_11
00078Cr 2               L2A13:
00078Cr 2  20 rr rr             jsr     OUTSP
00078Fr 2  D0 F2                bne     L2A0A
000791r 2               .endif
000791r 2               
000791r 2               ; ----------------------------------------------------------------------------
000791r 2               ; PRINT STRING AT (Y,A)
000791r 2               ; ----------------------------------------------------------------------------
000791r 2               STROUT:
000791r 2  20 rr rr             jsr     STRLIT
000794r 2               
000794r 2               ; ----------------------------------------------------------------------------
000794r 2               ; PRINT STRING AT (FACMO,FACLO)
000794r 2               ; ----------------------------------------------------------------------------
000794r 2               STRPRT:
000794r 2  20 rr rr             jsr     FREFAC
000797r 2  AA                   tax
000798r 2  A0 00                ldy     #$00
00079Ar 2  E8                   inx
00079Br 2               L2A22:
00079Br 2  CA                   dex
00079Cr 2  F0 C5                beq     L29DD
00079Er 2  B1 1F                lda     (INDEX),y
0007A0r 2  20 rr rr             jsr     OUTDO
0007A3r 2  C8                   iny
0007A4r 2  C9 0D                cmp     #$0D
0007A6r 2  D0 F3                bne     L2A22
0007A8r 2  20 rr rr             jsr     PRINTNULLS
0007ABr 2  4C rr rr             jmp     L2A22
0007AEr 2               ; ----------------------------------------------------------------------------
0007AEr 2               OUTSP:
0007AEr 2               .ifdef CONFIG_FILE
0007AEr 2                 .ifndef CBM1
0007AEr 2               ; on non-screen devices, print SPACE
0007AEr 2               ; instead of CRSR RIGHT
0007AEr 2  A5 0E                lda     CURDVC
0007B0r 2  F0 03                beq     LCA40
0007B2r 2  A9 20                lda     #$20
0007B4r 2  2C                   .byte   $2C
0007B5r 2               LCA40:
0007B5r 2                 .endif
0007B5r 2  A9 1D                lda     #$1D ; CRSR RIGHT
0007B7r 2               .else
0007B7r 2                       lda     #$20
0007B7r 2               .endif
0007B7r 2  2C                   .byte   $2C
0007B8r 2               OUTQUES:
0007B8r 2  A9 3F                lda     #$3F
0007BAr 2               
0007BAr 2               ; ----------------------------------------------------------------------------
0007BAr 2               ; PRINT CHAR FROM (A)
0007BAr 2               ; ----------------------------------------------------------------------------
0007BAr 2               OUTDO:
0007BAr 2               .ifndef KBD
0007BAr 2  24 0D                bit     Z14
0007BCr 2  30 03                bmi     L2A56
0007BEr 2               .endif
0007BEr 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007BEr 2               ; Commodore forgot to remove this in CBM1
0007BEr 2                       pha
0007BEr 2               .endif
0007BEr 2               .ifdef CBM1
0007BEr 2                       cmp     #$1D ; CRSR RIGHT
0007BEr 2                       beq     LCA6A
0007BEr 2                       cmp     #$9D ; CRSR LEFT
0007BEr 2                       beq     LCA5A
0007BEr 2                       cmp     #$14 ; DEL
0007BEr 2                       bne     LCA64
0007BEr 2               LCA5A:
0007BEr 2                       lda     POSX
0007BEr 2                       beq     L2A4E
0007BEr 2                       lda     CURDVC
0007BEr 2                       bne     L2A4E
0007BEr 2                       dec     POSX
0007BEr 2               LCA64:
0007BEr 2                       and     #$7F
0007BEr 2               .endif
0007BEr 2               .ifndef CBM2
0007BEr 2                       cmp     #$20
0007BEr 2                       bcc     L2A4E
0007BEr 2               .endif
0007BEr 2               LCA6A:
0007BEr 2               .ifdef CONFIG_CBM1_PATCHES
0007BEr 2                       lda     CURDVC
0007BEr 2                       jsr     PATCH6
0007BEr 2                       nop
0007BEr 2               .endif
0007BEr 2               .ifdef CONFIG_PRINT_CR
0007BEr 2                       lda     POSX
0007BEr 2                       cmp     Z17
0007BEr 2                       bne     L2A4C
0007BEr 2                 .ifdef AIM65
0007BEr 2                       lda #$00
0007BEr 2                       sta POSX
0007BEr 2                 .elseif .def(APPLE)
0007BEr 2                       nop ; PATCH!
0007BEr 2                       nop ; don't print CR
0007BEr 2                       nop
0007BEr 2                 .else
0007BEr 2                       jsr     CRDO
0007BEr 2                 .endif
0007BEr 2               L2A4C:
0007BEr 2               .endif
0007BEr 2               .ifndef CONFIG_CBM_ALL
0007BEr 2                       inc     POSX
0007BEr 2               .endif
0007BEr 2               L2A4E:
0007BEr 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007BEr 2               ; Commodore forgot to remove this in CBM1
0007BEr 2                       pla
0007BEr 2               .endif
0007BEr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007BEr 2                       sty     DIMFLG
0007BEr 2               .endif
0007BEr 2               .ifdef CONFIG_IO_MSB
0007BEr 2                       ora     #$80
0007BEr 2               .endif
0007BEr 2  20 D2 FF             jsr     MONCOUT
0007C1r 2               .ifdef CONFIG_IO_MSB
0007C1r 2                       and     #$7F
0007C1r 2               .endif
0007C1r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007C1r 2                       ldy     DIMFLG
0007C1r 2               .endif
0007C1r 2               .ifdef OSI
0007C1r 2                       nop
0007C1r 2                       nop
0007C1r 2                       nop
0007C1r 2                       nop
0007C1r 2               .endif
0007C1r 2               L2A56:
0007C1r 2  29 FF                and     #$FF
0007C3r 2               LE8F2:
0007C3r 2  60                   rts
0007C4r 2               
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               ; ???
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               .ifdef KBD
0007C4r 2               LE8F3:
0007C4r 2                       pha
0007C4r 2                       lda     $047F
0007C4r 2                       clc
0007C4r 2                       beq     LE900
0007C4r 2                       lda     #$00
0007C4r 2                       sta     $047F
0007C4r 2                       sec
0007C4r 2               LE900:
0007C4r 2                       pla
0007C4r 2                       rts
0007C4r 2               .endif
0007C4r 2               
0007C4r 1               .include "input.s"
0007C4r 2               .segment "CODE"
0007C4r 2               
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
0007C4r 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
0007C4r 2               ; BETWEEN INPUT, READ, AND GET
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               INPUTERR:
0007C4r 2  A5 0B                lda     INPUTFLG
0007C6r 2  F0 11                beq     RESPERR	; INPUT
0007C8r 2               .ifndef SYM1
0007C8r 2               .ifndef CONFIG_SMALL
0007C8r 2               .ifdef CONFIG_10A
0007C8r 2               ; without this, it treats GET errors
0007C8r 2               ; like READ errors
0007C8r 2  30 04                bmi     L2A63	; READ
0007CAr 2  A0 FF                ldy     #$FF	; GET
0007CCr 2  D0 04                bne     L2A67
0007CEr 2               L2A63:
0007CEr 2               .endif
0007CEr 2               .endif
0007CEr 2               .endif
0007CEr 2               .ifdef CONFIG_CBM1_PATCHES
0007CEr 2                       jsr     PATCH5
0007CEr 2               		nop
0007CEr 2               .else
0007CEr 2  A5 3C                lda     Z8C
0007D0r 2  A4 3D                ldy     Z8C+1
0007D2r 2               .endif
0007D2r 2               L2A67:
0007D2r 2  85 36                sta     CURLIN
0007D4r 2  84 37                sty     CURLIN+1
0007D6r 2               SYNERR4:
0007D6r 2  4C rr rr             jmp     SYNERR
0007D9r 2               RESPERR:
0007D9r 2               .ifdef CONFIG_FILE
0007D9r 2  A5 0E                lda     CURDVC
0007DBr 2  F0 05                beq     LCA8F
0007DDr 2  A2 BF                ldx     #ERR_BADDATA
0007DFr 2  4C rr rr             jmp     ERROR
0007E2r 2               LCA8F:
0007E2r 2               .endif
0007E2r 2  A9 rr                lda     #<ERRREENTRY
0007E4r 2  A0 rr                ldy     #>ERRREENTRY
0007E6r 2  20 rr rr             jsr     STROUT
0007E9r 2  A5 3A                lda     OLDTEXT
0007EBr 2  A4 3B                ldy     OLDTEXT+1
0007EDr 2  85 77                sta     TXTPTR
0007EFr 2  84 78                sty     TXTPTR+1
0007F1r 2               RTS20:
0007F1r 2  60                   rts
0007F2r 2               
0007F2r 2               ; ----------------------------------------------------------------------------
0007F2r 2               ; "GET" STATEMENT
0007F2r 2               ; ----------------------------------------------------------------------------
0007F2r 2               .ifndef CONFIG_SMALL
0007F2r 2               .ifndef SYM1
0007F2r 2               GET:
0007F2r 2  20 rr rr             jsr     ERRDIR
0007F5r 2               ; CBM: if GET#, then switch input
0007F5r 2               .ifdef CONFIG_FILE
0007F5r 2  C9 23                cmp     #'#'
0007F7r 2  D0 10                bne     LCAB6
0007F9r 2  20 70 00             jsr     CHRGET
0007FCr 2  20 rr rr             jsr     GETBYT
0007FFr 2  A9 2C                lda     #','
000801r 2  20 rr rr             jsr     SYNCHR
000804r 2  20 C6 FF             jsr     CHKIN
000807r 2  86 0E                stx     CURDVC
000809r 2               LCAB6:
000809r 2               .endif
000809r 2  A2 01                ldx     #<(INPUTBUFFER+1)
00080Br 2  A0 02                ldy     #>(INPUTBUFFER+1)
00080Dr 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
00080Dr 2  A9 00                lda     #$00
00080Fr 2  8D 01 02             sta     INPUTBUFFER+1
000812r 2               .else
000812r 2                       sty     INPUTBUFFER+1
000812r 2               .endif
000812r 2  A9 40                lda     #$40
000814r 2  20 rr rr             jsr     PROCESS_INPUT_LIST
000817r 2               ; CBM: if GET#, then switch input back
000817r 2               .ifdef CONFIG_FILE
000817r 2  A6 0E                ldx     CURDVC
000819r 2  D0 13                bne     LCAD8
00081Br 2               .endif
00081Br 2  60                   rts
00081Cr 2               .endif
00081Cr 2               .endif
00081Cr 2               
00081Cr 2               ; ----------------------------------------------------------------------------
00081Cr 2               ; "INPUT#" STATEMENT
00081Cr 2               ; ----------------------------------------------------------------------------
00081Cr 2               .ifdef CONFIG_FILE
00081Cr 2               INPUTH:
00081Cr 2  20 rr rr             jsr     GETBYT
00081Fr 2  A9 2C                lda     #$2C
000821r 2  20 rr rr             jsr     SYNCHR
000824r 2  20 C6 FF             jsr     CHKIN
000827r 2  86 0E                stx     CURDVC
000829r 2  20 rr rr             jsr     L2A9E
00082Cr 2               LCAD6:
00082Cr 2  A5 0E                lda     CURDVC
00082Er 2               LCAD8:
00082Er 2  20 CC FF             jsr     CLRCH
000831r 2  A2 00                ldx     #$00
000833r 2  86 0E                stx     CURDVC
000835r 2  60                   rts
000836r 2               LCAE0:
000836r 2               .endif
000836r 2               
000836r 2               .ifdef SYM1
000836r 2               LC9B0:
000836r 2                       jsr     OUTQUES	; '?'
000836r 2                       jsr     OUTSP
000836r 2                       jmp     L2A9E
000836r 2               .endif
000836r 2               ; ----------------------------------------------------------------------------
000836r 2               ; "INPUT" STATEMENT
000836r 2               ; ----------------------------------------------------------------------------
000836r 2               INPUT:
000836r 2               .ifndef KBD
000836r 2  46 0D                lsr     Z14
000838r 2               .endif
000838r 2               .ifdef AIM65
000838r 2                       lda     PRIFLG
000838r 2                       sta     ZBE
000838r 2                       jsr     LCFFA
000838r 2               .endif
000838r 2  C9 22                cmp     #$22
00083Ar 2               .ifdef SYM1
00083Ar 2                       bne     LC9B0
00083Ar 2               .else
00083Ar 2  D0 0B                bne     L2A9E
00083Cr 2               .endif
00083Cr 2  20 rr rr             jsr     STRTXT
00083Fr 2  A9 3B                lda     #$3B
000841r 2  20 rr rr             jsr     SYNCHR
000844r 2  20 rr rr             jsr     STRPRT
000847r 2               L2A9E:
000847r 2  20 rr rr             jsr     ERRDIR
00084Ar 2  A9 2C                lda     #$2C
00084Cr 2  8D FF 01             sta     INPUTBUFFER-1
00084Fr 2               LCAF8:
00084Fr 2               .ifdef APPLE
00084Fr 2                       jsr     INLINX
00084Fr 2               .elseif .def(SYM1)
00084Fr 2                       jsr     INLIN
00084Fr 2               .else
00084Fr 2  20 rr rr             jsr     NXIN
000852r 2               .endif
000852r 2               .ifdef KBD
000852r 2                       bmi     L2ABE
000852r 2               .else
000852r 2                 .ifdef CONFIG_FILE
000852r 2  A5 0E                lda     CURDVC
000854r 2  F0 0C                beq     LCB0C
000856r 2  A5 96                lda     Z96
000858r 2  29 02                and     #$02
00085Ar 2  F0 06                beq     LCB0C
00085Cr 2  20 rr rr             jsr     LCAD6
00085Fr 2  4C rr rr             jmp     DATA
000862r 2               LCB0C:
000862r 2                 .endif
000862r 2  AD 00 02             lda     INPUTBUFFER
000865r 2  D0 1C                bne     L2ABE
000867r 2                 .ifdef CONFIG_FILE
000867r 2  A5 0E                lda     CURDVC
000869r 2  D0 E4                bne     LCAF8
00086Br 2                 .endif
00086Br 2                 .ifdef CONFIG_CBM1_PATCHES
00086Br 2                       jmp     PATCH1
00086Br 2                 .else
00086Br 2  18                   clc
00086Cr 2  4C rr rr             jmp     CONTROL_C_TYPED
00086Fr 2                 .endif
00086Fr 2               .endif
00086Fr 2               
00086Fr 2               NXIN:
00086Fr 2               .ifdef KBD
00086Fr 2                       jsr     INLIN
00086Fr 2                       bmi     RTS20
00086Fr 2                       pla
00086Fr 2                       jmp     LE86C
00086Fr 2               .else
00086Fr 2                 .ifdef CONFIG_FILE
00086Fr 2  A5 0E                lda     CURDVC
000871r 2  D0 06                bne     LCB21
000873r 2                 .endif
000873r 2  20 rr rr             jsr     OUTQUES	; '?'
000876r 2  20 rr rr             jsr     OUTSP
000879r 2               LCB21:
000879r 2  4C rr rr             jmp     INLIN
00087Cr 2               .endif
00087Cr 2               
00087Cr 2               ; ----------------------------------------------------------------------------
00087Cr 2               ; "GETC" STATEMENT
00087Cr 2               ; ----------------------------------------------------------------------------
00087Cr 2               .ifdef KBD
00087Cr 2               GETC:
00087Cr 2                       jsr     CONINT
00087Cr 2                       jsr     LF43D
00087Cr 2                       jmp     LE664
00087Cr 2               .endif
00087Cr 2               
00087Cr 2               ; ----------------------------------------------------------------------------
00087Cr 2               ; "READ" STATEMENT
00087Cr 2               ; ----------------------------------------------------------------------------
00087Cr 2               READ:
00087Cr 2  A6 3E                ldx     DATPTR
00087Er 2  A4 3F                ldy     DATPTR+1
000880r 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
000880r 2               ; AppleSoft II, too
000880r 2  A9 98                lda     #$98	; READ
000882r 2  2C                   .byte   $2C
000883r 2               L2ABE:
000883r 2  A9 00                lda     #$00	; INPUT
000885r 2               .else
000885r 2                       .byte   $A9	; LDA #$98
000885r 2               L2ABE:
000885r 2                       tya
000885r 2               .endif
000885r 2               
000885r 2               ; ----------------------------------------------------------------------------
000885r 2               ; PROCESS INPUT LIST
000885r 2               ;
000885r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
000885r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
000885r 2               ; 				$40 FOR GET
000885r 2               ;				$98 FOR READ
000885r 2               ; ----------------------------------------------------------------------------
000885r 2               PROCESS_INPUT_LIST:
000885r 2  85 0B                sta     INPUTFLG
000887r 2  86 40                stx     INPTR
000889r 2  84 41                sty     INPTR+1
00088Br 2               PROCESS_INPUT_ITEM:
00088Br 2  20 rr rr             jsr     PTRGET
00088Er 2  85 46                sta     FORPNT
000890r 2  84 47                sty     FORPNT+1
000892r 2  A5 77                lda     TXTPTR
000894r 2  A4 78                ldy     TXTPTR+1
000896r 2  85 48                sta     TXPSV
000898r 2  84 49                sty     TXPSV+1
00089Ar 2  A6 40                ldx     INPTR
00089Cr 2  A4 41                ldy     INPTR+1
00089Er 2  86 77                stx     TXTPTR
0008A0r 2  84 78                sty     TXTPTR+1
0008A2r 2  20 76 00             jsr     CHRGOT
0008A5r 2  D0 20                bne     INSTART
0008A7r 2  24 0B                bit     INPUTFLG
0008A9r 2               .ifndef CONFIG_SMALL ; GET
0008A9r 2                .ifndef SYM1
0008A9r 2  50 0C                bvc     L2AF0
0008ABr 2                 .ifdef MICROTAN
0008ABr 2                       jsr     MONRDKEY2
0008ABr 2                 .elseif .def(AIM65)
0008ABr 2                       jsr     MONRDKEY2
0008ABr 2                 .else
0008ABr 2  20 E4 FF             jsr     MONRDKEY
0008AEr 2                 .endif
0008AEr 2                 .ifdef CONFIG_IO_MSB
0008AEr 2                       and     #$7F
0008AEr 2                 .endif
0008AEr 2  8D 00 02             sta     INPUTBUFFER
0008B1r 2               ; BUG: The beq/bne L2AF8 below is supposed
0008B1r 2               ; to be always taken. For this to happen,
0008B1r 2               ; the last load must be a 0 for beq
0008B1r 2               ; and != 0 for bne. The original Microsoft
0008B1r 2               ; code had ldx/ldy/bne here, which was only
0008B1r 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0008B1r 2               ; fixed it in CBMBASIC V1 by swapping the
0008B1r 2               ; ldx and the ldy. It was broken on KIM,
0008B1r 2               ; but okay on APPLE and CBM2, because
0008B1r 2               ; these used a non-ZP INPUTBUFFER.
0008B1r 2               ; Microsoft fixed this somewhere after KIM
0008B1r 2               ; and before MICROTAN, by using beq instead
0008B1r 2               ; of bne in the ZP case.
0008B1r 2                 .ifdef CBM1
0008B1r 2                       ldy     #>(INPUTBUFFER-1)
0008B1r 2                       ldx     #<(INPUTBUFFER-1)
0008B1r 2                 .else
0008B1r 2  A2 FF                ldx     #<(INPUTBUFFER-1)
0008B3r 2  A0 01                ldy     #>(INPUTBUFFER-1)
0008B5r 2                 .endif
0008B5r 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0008B5r 2                       beq     L2AF8	; always
0008B5r 2                 .else
0008B5r 2  D0 0C                bne     L2AF8	; always
0008B7r 2                 .endif
0008B7r 2               L2AF0:
0008B7r 2                .endif
0008B7r 2               .endif
0008B7r 2  30 75                bmi     FINDATA
0008B9r 2               .ifdef CONFIG_FILE
0008B9r 2  A5 0E                lda     CURDVC
0008BBr 2  D0 03                bne     LCB64
0008BDr 2               .endif
0008BDr 2               .ifdef KBD
0008BDr 2                       jsr     OUTQUESSP
0008BDr 2               .else
0008BDr 2  20 rr rr             jsr     OUTQUES
0008C0r 2               .endif
0008C0r 2               LCB64:
0008C0r 2  20 rr rr             jsr     NXIN
0008C3r 2               L2AF8:
0008C3r 2  86 77                stx     TXTPTR
0008C5r 2  84 78                sty     TXTPTR+1
0008C7r 2               
0008C7r 2               ; ----------------------------------------------------------------------------
0008C7r 2               INSTART:
0008C7r 2  20 70 00             jsr     CHRGET
0008CAr 2  24 07                bit     VALTYP
0008CCr 2  10 31                bpl     L2B34
0008CEr 2               .ifndef CONFIG_SMALL ; GET
0008CEr 2                .ifndef SYM1
0008CEr 2  24 0B                bit     INPUTFLG
0008D0r 2  50 09                bvc     L2B10
0008D2r 2                 .ifdef CONFIG_CBM1_PATCHES
0008D2r 2                       lda     #$00
0008D2r 2                       jsr     PATCH4
0008D2r 2                       nop
0008D2r 2                 .else
0008D2r 2  E8                   inx
0008D3r 2  86 77                stx     TXTPTR
0008D5r 2  A9 00                lda     #$00
0008D7r 2  85 03                sta     CHARAC
0008D9r 2  F0 0C                beq     L2B1C
0008DBr 2                 .endif
0008DBr 2               L2B10:
0008DBr 2                .endif
0008DBr 2               .endif
0008DBr 2  85 03                sta     CHARAC
0008DDr 2  C9 22                cmp     #$22
0008DFr 2  F0 07                beq     L2B1D
0008E1r 2  A9 3A                lda     #$3A
0008E3r 2  85 03                sta     CHARAC
0008E5r 2  A9 2C                lda     #$2C
0008E7r 2               L2B1C:
0008E7r 2  18                   clc
0008E8r 2               L2B1D:
0008E8r 2  85 04                sta     ENDCHR
0008EAr 2  A5 77                lda     TXTPTR
0008ECr 2  A4 78                ldy     TXTPTR+1
0008EEr 2  69 00                adc     #$00
0008F0r 2  90 01                bcc     L2B28
0008F2r 2  C8                   iny
0008F3r 2               L2B28:
0008F3r 2  20 rr rr             jsr     STRLT2
0008F6r 2  20 rr rr             jsr     POINT
0008F9r 2               .ifdef CONFIG_SMALL
0008F9r 2                       jsr     LETSTRING
0008F9r 2               .else
0008F9r 2  20 rr rr             jsr     PUTSTR
0008FCr 2               .endif
0008FCr 2  4C rr rr             jmp     INPUT_MORE
0008FFr 2               ; ----------------------------------------------------------------------------
0008FFr 2               L2B34:
0008FFr 2  20 rr rr             jsr     FIN
000902r 2               .ifdef CONFIG_SMALL
000902r 2                       jsr     SETFOR
000902r 2               .else
000902r 2  A5 08                lda     VALTYP+1
000904r 2  20 rr rr             jsr     LET2
000907r 2               .endif
000907r 2               ; ----------------------------------------------------------------------------
000907r 2               INPUT_MORE:
000907r 2  20 76 00             jsr     CHRGOT
00090Ar 2  F0 07                beq     L2B48
00090Cr 2  C9 2C                cmp     #$2C
00090Er 2  F0 03                beq     L2B48
000910r 2  4C rr rr             jmp     INPUTERR
000913r 2               L2B48:
000913r 2  A5 77                lda     TXTPTR
000915r 2  A4 78                ldy     TXTPTR+1
000917r 2  85 40                sta     INPTR
000919r 2  84 41                sty     INPTR+1
00091Br 2  A5 48                lda     TXPSV
00091Dr 2  A4 49                ldy     TXPSV+1
00091Fr 2  85 77                sta     TXTPTR
000921r 2  84 78                sty     TXTPTR+1
000923r 2  20 76 00             jsr     CHRGOT
000926r 2  F0 2C                beq     INPDONE
000928r 2  20 rr rr             jsr     CHKCOM
00092Br 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
00092Er 2               ; ----------------------------------------------------------------------------
00092Er 2               FINDATA:
00092Er 2  20 rr rr             jsr     DATAN
000931r 2  C8                   iny
000932r 2  AA                   tax
000933r 2  D0 12                bne     L2B7C
000935r 2  A2 2A                ldx     #ERR_NODATA
000937r 2  C8                   iny
000938r 2  B1 77                lda     (TXTPTR),y
00093Ar 2  F0 6D                beq     GERR
00093Cr 2  C8                   iny
00093Dr 2  B1 77                lda     (TXTPTR),y
00093Fr 2  85 3C                sta     Z8C
000941r 2  C8                   iny
000942r 2  B1 77                lda     (TXTPTR),y
000944r 2  C8                   iny
000945r 2  85 3D                sta     Z8C+1
000947r 2               L2B7C:
000947r 2  B1 77                lda     (TXTPTR),y
000949r 2  AA                   tax
00094Ar 2  20 rr rr             jsr     ADDON
00094Dr 2  E0 83                cpx     #$83
00094Fr 2  D0 DD                bne     FINDATA
000951r 2  4C rr rr             jmp     INSTART
000954r 2               ; ---NO MORE INPUT REQUESTED------
000954r 2               INPDONE:
000954r 2  A5 40                lda     INPTR
000956r 2  A4 41                ldy     INPTR+1
000958r 2  A6 0B                ldx     INPUTFLG
00095Ar 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
00095Ar 2                       beq     L2B94 ; INPUT
00095Ar 2               .else
00095Ar 2  10 03                bpl     L2B94; INPUT or GET
00095Cr 2               .endif
00095Cr 2  4C rr rr             jmp     SETDA
00095Fr 2               L2B94:
00095Fr 2  A0 00                ldy     #$00
000961r 2               .ifdef AIM65
000961r 2                       jsr     LB8B1
000961r 2               .endif
000961r 2  B1 40                lda     (INPTR),y
000963r 2  F0 0B                beq     L2BA1
000965r 2               .ifdef CONFIG_FILE
000965r 2  A5 0E                lda     CURDVC
000967r 2  D0 07                bne     L2BA1
000969r 2               .endif
000969r 2  A9 rr                lda     #<ERREXTRA
00096Br 2  A0 rr                ldy     #>ERREXTRA
00096Dr 2  4C rr rr             jmp     STROUT
000970r 2               L2BA1:
000970r 2  60                   rts
000971r 2               
000971r 2               ; ----------------------------------------------------------------------------
000971r 2               ERREXTRA:
000971r 2               .ifdef KBD
000971r 2                       .byte   "?Extra"
000971r 2               .else
000971r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
000975r 2  52 41 20 49  
000979r 2  47 4E 4F 52  
00097Fr 2               .endif
00097Fr 2  0D 0A 00             .byte   $0D,$0A,$00
000982r 2               ERRREENTRY:
000982r 2               .ifdef KBD
000982r 2                       .byte   "What?"
000982r 2               .else
000982r 2  3F 52 45 44          .byte   "?REDO FROM START"
000986r 2  4F 20 46 52  
00098Ar 2  4F 4D 20 53  
000992r 2               .endif
000992r 2  0D 0A 00             .byte   $0D,$0A,$00
000995r 2               .ifdef KBD
000995r 2               LEA30:
000995r 2                       .byte   "B"
000995r 2                       .byte   $FD
000995r 2                       .byte   "GsBASIC"
000995r 2                       .byte   $00,$1B,$0D,$13
000995r 2                       .byte   " BASIC"
000995r 2               .endif
000995r 2               
000995r 1               .include "eval.s"
000995r 2               .segment "CODE"
000995r 2               
000995r 2               ; ----------------------------------------------------------------------------
000995r 2               ; "NEXT" STATEMENT
000995r 2               ; ----------------------------------------------------------------------------
000995r 2               NEXT:
000995r 2  D0 04                bne     NEXT1
000997r 2  A0 00                ldy     #$00
000999r 2  F0 03                beq     NEXT2
00099Br 2               NEXT1:
00099Br 2  20 rr rr             jsr     PTRGET
00099Er 2               NEXT2:
00099Er 2  85 46                sta     FORPNT
0009A0r 2  84 47                sty     FORPNT+1
0009A2r 2  20 rr rr             jsr     GTFORPNT
0009A5r 2  F0 04                beq     NEXT3
0009A7r 2  A2 00                ldx     #$00
0009A9r 2               GERR:
0009A9r 2  F0 66                beq     JERROR
0009ABr 2               NEXT3:
0009ABr 2  9A                   txs
0009ACr 2               .ifndef CONFIG_2
0009ACr 2                       inx
0009ACr 2                       inx
0009ACr 2                       inx
0009ACr 2                       inx
0009ACr 2               .endif
0009ACr 2  8A                   txa
0009ADr 2               .ifdef CONFIG_2
0009ADr 2  18                   clc
0009AEr 2  69 04                adc     #$04
0009B0r 2  48                   pha
0009B1r 2  69 06                adc     #BYTES_FP+1
0009B3r 2  85 21                sta     DEST
0009B5r 2  68                   pla
0009B6r 2               .else
0009B6r 2                       inx
0009B6r 2                       inx
0009B6r 2                       inx
0009B6r 2                       inx
0009B6r 2                       inx
0009B6r 2               .ifndef CONFIG_SMALL
0009B6r 2                       inx
0009B6r 2               .endif
0009B6r 2                       stx     DEST
0009B6r 2               .endif
0009B6r 2  A0 01                ldy     #>STACK
0009B8r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0009BBr 2  BA                   tsx
0009BCr 2  BD 09 01             lda     STACK+BYTES_FP+4,x
0009BFr 2  85 63                sta     FACSIGN
0009C1r 2  A5 46                lda     FORPNT
0009C3r 2  A4 47                ldy     FORPNT+1
0009C5r 2  20 rr rr             jsr     FADD
0009C8r 2  20 rr rr             jsr     SETFOR
0009CBr 2  A0 01                ldy     #>STACK
0009CDr 2  20 rr rr             jsr     FCOMP2
0009D0r 2  BA                   tsx
0009D1r 2  38                   sec
0009D2r 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
0009D5r 2  F0 17                beq     L2C22
0009D7r 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
0009DAr 2  85 36                sta     CURLIN
0009DCr 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
0009DFr 2  85 37                sta     CURLIN+1
0009E1r 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
0009E4r 2  85 77                sta     TXTPTR
0009E6r 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
0009E9r 2  85 78                sta     TXTPTR+1
0009EBr 2               L2C1F:
0009EBr 2  4C rr rr             jmp     NEWSTT
0009EEr 2               L2C22:
0009EEr 2  8A                   txa
0009EFr 2  69 11                adc     #2*BYTES_FP+7
0009F1r 2  AA                   tax
0009F2r 2  9A                   txs
0009F3r 2  20 76 00             jsr     CHRGOT
0009F6r 2  C9 2C                cmp     #$2C
0009F8r 2  D0 F1                bne     L2C1F
0009FAr 2  20 70 00             jsr     CHRGET
0009FDr 2  20 rr rr             jsr     NEXT1
000A00r 2               
000A00r 2               ; ----------------------------------------------------------------------------
000A00r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000A00r 2               ; ----------------------------------------------------------------------------
000A00r 2               FRMNUM:
000A00r 2  20 rr rr             jsr     FRMEVL
000A03r 2               
000A03r 2               ; ----------------------------------------------------------------------------
000A03r 2               ; MAKE SURE (FAC) IS NUMERIC
000A03r 2               ; ----------------------------------------------------------------------------
000A03r 2               CHKNUM:
000A03r 2  18                   clc
000A04r 2  24                   .byte   $24
000A05r 2               
000A05r 2               ; ----------------------------------------------------------------------------
000A05r 2               ; MAKE SURE (FAC) IS STRING
000A05r 2               ; ----------------------------------------------------------------------------
000A05r 2               CHKSTR:
000A05r 2  38                   sec
000A06r 2               
000A06r 2               ; ----------------------------------------------------------------------------
000A06r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
000A06r 2               ; IF C=0, TYPE MUST BE NUMERIC
000A06r 2               ; IF C=1, TYPE MUST BE STRING
000A06r 2               ; ----------------------------------------------------------------------------
000A06r 2               CHKVAL:
000A06r 2  24 07                bit     VALTYP
000A08r 2  30 03                bmi     L2C41
000A0Ar 2  B0 03                bcs     L2C43
000A0Cr 2               L2C40:
000A0Cr 2  60                   rts
000A0Dr 2               L2C41:
000A0Dr 2  B0 FD                bcs     L2C40
000A0Fr 2               L2C43:
000A0Fr 2  A2 A3                ldx     #ERR_BADTYPE
000A11r 2               JERROR:
000A11r 2  4C rr rr             jmp     ERROR
000A14r 2               
000A14r 2               ; ----------------------------------------------------------------------------
000A14r 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
000A14r 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
000A14r 2               ; EXPRESSIONS.
000A14r 2               ; ----------------------------------------------------------------------------
000A14r 2               FRMEVL:
000A14r 2  A6 77                ldx     TXTPTR
000A16r 2  D0 02                bne     L2C4E
000A18r 2  C6 78                dec     TXTPTR+1
000A1Ar 2               L2C4E:
000A1Ar 2  C6 77                dec     TXTPTR
000A1Cr 2  A2 00                ldx     #$00
000A1Er 2  24                   .byte   $24
000A1Fr 2               FRMEVL1:
000A1Fr 2  48                   pha
000A20r 2  8A                   txa
000A21r 2  48                   pha
000A22r 2  A9 01                lda     #$01
000A24r 2  20 rr rr             jsr     CHKMEM
000A27r 2  20 rr rr             jsr     FRM_ELEMENT
000A2Ar 2  A9 00                lda     #$00
000A2Cr 2  85 4A                sta     CPRTYP
000A2Er 2               FRMEVL2:
000A2Er 2  20 76 00             jsr     CHRGOT
000A31r 2               L2C65:
000A31r 2  38                   sec
000A32r 2  E9 B1                sbc     #TOKEN_GREATER
000A34r 2  90 17                bcc     L2C81
000A36r 2  C9 03                cmp     #$03
000A38r 2  B0 13                bcs     L2C81
000A3Ar 2  C9 01                cmp     #$01
000A3Cr 2  2A                   rol     a
000A3Dr 2  49 01                eor     #$01
000A3Fr 2  45 4A                eor     CPRTYP
000A41r 2  C5 4A                cmp     CPRTYP
000A43r 2  90 61                bcc     SNTXERR
000A45r 2  85 4A                sta     CPRTYP
000A47r 2  20 70 00             jsr     CHRGET
000A4Ar 2  4C rr rr             jmp     L2C65
000A4Dr 2               L2C81:
000A4Dr 2  A6 4A                ldx     CPRTYP
000A4Fr 2  D0 2C                bne     FRM_RELATIONAL
000A51r 2  B0 7B                bcs     L2D02
000A53r 2  69 07                adc     #$07
000A55r 2  90 77                bcc     L2D02
000A57r 2  65 07                adc     VALTYP
000A59r 2  D0 03                bne     L2C92
000A5Br 2  4C rr rr             jmp     CAT
000A5Er 2               L2C92:
000A5Er 2  69 FF                adc     #$FF
000A60r 2  85 1F                sta     INDEX
000A62r 2  0A                   asl     a
000A63r 2  65 1F                adc     INDEX
000A65r 2  A8                   tay
000A66r 2               FRM_PRECEDENCE_TEST:
000A66r 2  68                   pla
000A67r 2  D9 rr rr             cmp     MATHTBL,y
000A6Ar 2  B0 67                bcs     FRM_PERFORM1
000A6Cr 2  20 rr rr             jsr     CHKNUM
000A6Fr 2               L2CA3:
000A6Fr 2  48                   pha
000A70r 2               L2CA4:
000A70r 2  20 rr rr             jsr     FRM_RECURSE
000A73r 2  68                   pla
000A74r 2  A4 48                ldy     LASTOP
000A76r 2  10 17                bpl     PREFNC
000A78r 2  AA                   tax
000A79r 2  F0 56                beq     GOEX
000A7Br 2  D0 5F                bne     FRM_PERFORM2
000A7Dr 2               
000A7Dr 2               ; ----------------------------------------------------------------------------
000A7Dr 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000A7Dr 2               ; ----------------------------------------------------------------------------
000A7Dr 2               FRM_RELATIONAL:
000A7Dr 2  46 07                lsr     VALTYP
000A7Fr 2  8A                   txa
000A80r 2  2A                   rol     a
000A81r 2  A6 77                ldx     TXTPTR
000A83r 2  D0 02                bne     L2CBB
000A85r 2  C6 78                dec     TXTPTR+1
000A87r 2               L2CBB:
000A87r 2  C6 77                dec     TXTPTR
000A89r 2  A0 1B                ldy     #$1B
000A8Br 2  85 4A                sta     CPRTYP
000A8Dr 2  D0 D7                bne     FRM_PRECEDENCE_TEST
000A8Fr 2               PREFNC:
000A8Fr 2  D9 rr rr             cmp     MATHTBL,y
000A92r 2  B0 48                bcs     FRM_PERFORM2
000A94r 2  90 D9                bcc     L2CA3
000A96r 2               
000A96r 2               ; ----------------------------------------------------------------------------
000A96r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000A96r 2               ; ANOTHER ONE
000A96r 2               ; ----------------------------------------------------------------------------
000A96r 2               FRM_RECURSE:
000A96r 2  B9 rr rr             lda     MATHTBL+2,y
000A99r 2  48                   pha
000A9Ar 2  B9 rr rr             lda     MATHTBL+1,y
000A9Dr 2  48                   pha
000A9Er 2  20 rr rr             jsr     FRM_STACK1
000AA1r 2  A5 4A                lda     CPRTYP
000AA3r 2  4C rr rr             jmp     FRMEVL1
000AA6r 2               SNTXERR:
000AA6r 2  4C rr rr             jmp     SYNERR
000AA9r 2               
000AA9r 2               ; ----------------------------------------------------------------------------
000AA9r 2               ; STACK (FAC)
000AA9r 2               ; THREE ENTRY POINTS:
000AA9r 2               ; 	1, FROM FRMEVL
000AA9r 2               ;	2, FROM "STEP"
000AA9r 2               ;	3, FROM "FOR"
000AA9r 2               ; ----------------------------------------------------------------------------
000AA9r 2               FRM_STACK1:
000AA9r 2  A5 63                lda     FACSIGN
000AABr 2  BE rr rr             ldx     MATHTBL,y
000AAEr 2               
000AAEr 2               ; ----------------------------------------------------------------------------
000AAEr 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000AAEr 2               ; ----------------------------------------------------------------------------
000AAEr 2               FRM_STACK2:
000AAEr 2  A8                   tay
000AAFr 2  68                   pla
000AB0r 2  85 1F                sta     INDEX
000AB2r 2               .ifndef CONFIG_2B
000AB2r 2  E6 1F                inc     INDEX ; bug: assumes not on page boundary
000AB4r 2               ; bug exists on AppleSoft II
000AB4r 2               .endif
000AB4r 2  68                   pla
000AB5r 2  85 20                sta     INDEX+1
000AB7r 2               .ifdef CONFIG_2B
000AB7r 2                       inc     INDEX
000AB7r 2                       bne     LEB69
000AB7r 2                       inc     INDEX+1
000AB7r 2               LEB69:
000AB7r 2               .endif
000AB7r 2  98                   tya
000AB8r 2  48                   pha
000AB9r 2               
000AB9r 2               ; ----------------------------------------------------------------------------
000AB9r 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000AB9r 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000AB9r 2               ; ----------------------------------------------------------------------------
000AB9r 2               FRM_STACK3:
000AB9r 2  20 rr rr             jsr     ROUND_FAC
000ABCr 2               .ifndef CONFIG_SMALL
000ABCr 2  A5 62                lda     FAC+4
000ABEr 2  48                   pha
000ABFr 2               .endif
000ABFr 2  A5 61                lda     FAC+3
000AC1r 2  48                   pha
000AC2r 2  A5 60                lda     FAC+2
000AC4r 2  48                   pha
000AC5r 2  A5 5F                lda     FAC+1
000AC7r 2  48                   pha
000AC8r 2  A5 5E                lda     FAC
000ACAr 2  48                   pha
000ACBr 2  6C 1F 00             jmp     (INDEX)
000ACEr 2               L2D02:
000ACEr 2  A0 FF                ldy     #$FF
000AD0r 2  68                   pla
000AD1r 2               GOEX:
000AD1r 2  F0 23                beq     EXIT
000AD3r 2               
000AD3r 2               ; ----------------------------------------------------------------------------
000AD3r 2               ; PERFORM STACKED OPERATION
000AD3r 2               ;
000AD3r 2               ; (A) = PRECEDENCE BYTE
000AD3r 2               ; STACK:  1 -- CPRMASK
000AD3r 2               ;	5 -- (ARG)
000AD3r 2               ;	2 -- ADDR OF PERFORMER
000AD3r 2               ; ----------------------------------------------------------------------------
000AD3r 2               FRM_PERFORM1:
000AD3r 2  C9 64                cmp     #$64
000AD5r 2  F0 03                beq     L2D0E
000AD7r 2  20 rr rr             jsr     CHKNUM
000ADAr 2               L2D0E:
000ADAr 2  84 48                sty     LASTOP
000ADCr 2               FRM_PERFORM2:
000ADCr 2  68                   pla
000ADDr 2  4A                   lsr     a
000ADEr 2  85 0C                sta     CPRMASK
000AE0r 2  68                   pla
000AE1r 2  85 66                sta     ARG
000AE3r 2  68                   pla
000AE4r 2  85 67                sta     ARG+1
000AE6r 2  68                   pla
000AE7r 2  85 68                sta     ARG+2
000AE9r 2  68                   pla
000AEAr 2  85 69                sta     ARG+3
000AECr 2  68                   pla
000AEDr 2               .ifndef CONFIG_SMALL
000AEDr 2  85 6A                sta     ARG+4
000AEFr 2  68                   pla
000AF0r 2               .endif
000AF0r 2  85 6B                sta     ARGSIGN
000AF2r 2  45 63                eor     FACSIGN
000AF4r 2  85 6C                sta     SGNCPR
000AF6r 2               EXIT:
000AF6r 2  A5 5E                lda     FAC
000AF8r 2  60                   rts
000AF9r 2               
000AF9r 2               ; ----------------------------------------------------------------------------
000AF9r 2               ; GET ELEMENT IN EXPRESSION
000AF9r 2               ;
000AF9r 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000AF9r 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000AF9r 2               ; ----------------------------------------------------------------------------
000AF9r 2               FRM_ELEMENT:
000AF9r 2  A9 00                lda     #$00
000AFBr 2  85 07                sta     VALTYP
000AFDr 2               L2D31:
000AFDr 2  20 70 00             jsr     CHRGET
000B00r 2  B0 03                bcs     L2D39
000B02r 2               L2D36:
000B02r 2  4C rr rr             jmp     FIN
000B05r 2               L2D39:
000B05r 2  20 rr rr             jsr     ISLETC
000B08r 2  B0 7A                bcs     FRM_VARIABLE
000B0Ar 2               .ifdef CONFIG_CBM_ALL
000B0Ar 2  C9 FF                cmp     #$FF
000B0Cr 2  D0 0F                bne     LCDC1
000B0Er 2  A9 rr                lda     #<CON_PI
000B10r 2  A0 rr                ldy     #>CON_PI
000B12r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000B15r 2  4C 70 00             jmp     CHRGET
000B18r 2               CON_PI:
000B18r 2  82 49 0F DA          .byte   $82,$49,$0f,$DA,$A1
000B1Cr 2  A1           
000B1Dr 2               LCDC1:
000B1Dr 2               .endif
000B1Dr 2  C9 2E                cmp     #$2E
000B1Fr 2  F0 E1                beq     L2D36
000B21r 2  C9 AB                cmp     #TOKEN_MINUS
000B23r 2  F0 58                beq     MIN
000B25r 2  C9 AA                cmp     #TOKEN_PLUS
000B27r 2  F0 D4                beq     L2D31
000B29r 2  C9 22                cmp     #$22
000B2Br 2  D0 0F                bne     NOT_
000B2Dr 2               
000B2Dr 2               ; ----------------------------------------------------------------------------
000B2Dr 2               ; STRING CONSTANT ELEMENT
000B2Dr 2               ;
000B2Dr 2               ; SET Y,A = (TXTPTR)+CARRY
000B2Dr 2               ; ----------------------------------------------------------------------------
000B2Dr 2               STRTXT:
000B2Dr 2  A5 77                lda     TXTPTR
000B2Fr 2  A4 78                ldy     TXTPTR+1
000B31r 2  69 00                adc     #$00
000B33r 2  90 01                bcc     L2D57
000B35r 2  C8                   iny
000B36r 2               L2D57:
000B36r 2  20 rr rr             jsr     STRLIT
000B39r 2  4C rr rr             jmp     POINT
000B3Cr 2               
000B3Cr 2               ; ----------------------------------------------------------------------------
000B3Cr 2               ; "NOT" FUNCTION
000B3Cr 2               ; IF FAC=0, RETURN FAC=1
000B3Cr 2               ; IF FAC<>0, RETURN FAC=0
000B3Cr 2               ; ----------------------------------------------------------------------------
000B3Cr 2               NOT_:
000B3Cr 2  C9 A8                cmp     #TOKEN_NOT
000B3Er 2  D0 13                bne     L2D74
000B40r 2  A0 18                ldy     #$18
000B42r 2  D0 3B                bne     EQUL
000B44r 2               
000B44r 2               ; ----------------------------------------------------------------------------
000B44r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000B44r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000B44r 2               ; ----------------------------------------------------------------------------
000B44r 2               EQUOP:
000B44r 2  20 rr rr             jsr     AYINT
000B47r 2  A5 62                lda     FAC_LAST
000B49r 2  49 FF                eor     #$FF
000B4Br 2  A8                   tay
000B4Cr 2  A5 61                lda     FAC_LAST-1
000B4Er 2  49 FF                eor     #$FF
000B50r 2  4C rr rr             jmp     GIVAYF
000B53r 2               L2D74:
000B53r 2               .ifdef SYM1
000B53r 2                       cmp     #TOKEN_USR
000B53r 2                       bne     LCC8A
000B53r 2                       jmp     LCDBD
000B53r 2               LCC8A:
000B53r 2                       cmp     #$26
000B53r 2                       bne     LCC91
000B53r 2                       jmp     LCDFE
000B53r 2               LCC91:
000B53r 2               .endif
000B53r 2  C9 A5                cmp     #TOKEN_FN
000B55r 2  D0 03                bne     L2D7B
000B57r 2  4C rr rr             jmp     L31F3
000B5Ar 2               L2D7B:
000B5Ar 2  C9 B4                cmp     #TOKEN_SGN
000B5Cr 2  90 03                bcc     PARCHK
000B5Er 2  4C rr rr             jmp     UNARY
000B61r 2               
000B61r 2               ; ----------------------------------------------------------------------------
000B61r 2               ; EVALUATE "(EXPRESSION)"
000B61r 2               ; ----------------------------------------------------------------------------
000B61r 2               PARCHK:
000B61r 2  20 rr rr             jsr     CHKOPN
000B64r 2  20 rr rr             jsr     FRMEVL
000B67r 2               CHKCLS:
000B67r 2  A9 29                lda     #$29
000B69r 2  2C                   .byte   $2C
000B6Ar 2               CHKOPN:
000B6Ar 2  A9 28                lda     #$28
000B6Cr 2  2C                   .byte   $2C
000B6Dr 2               CHKCOM:
000B6Dr 2  A9 2C                lda     #$2C
000B6Fr 2               
000B6Fr 2               ; ----------------------------------------------------------------------------
000B6Fr 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000B6Fr 2               ; ----------------------------------------------------------------------------
000B6Fr 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000B6Fr 2  A0 00                ldy     #$00
000B71r 2  D1 77                cmp     (TXTPTR),y
000B73r 2  D0 03                bne     SYNERR
000B75r 2  4C 70 00             jmp     CHRGET
000B78r 2               ; ----------------------------------------------------------------------------
000B78r 2               SYNERR:
000B78r 2  A2 10                ldx     #ERR_SYNTAX
000B7Ar 2  4C rr rr             jmp     ERROR
000B7Dr 2               ; ----------------------------------------------------------------------------
000B7Dr 2               MIN:
000B7Dr 2  A0 15                ldy     #$15
000B7Fr 2               EQUL:
000B7Fr 2  68                   pla
000B80r 2  68                   pla
000B81r 2  4C rr rr             jmp     L2CA4
000B84r 2               ; ----------------------------------------------------------------------------
000B84r 2               FRM_VARIABLE:
000B84r 2  20 rr rr             jsr     PTRGET
000B87r 2               FRM_VARIABLE_CALL	= *-1
000B87r 2  85 61                sta     FAC_LAST-1
000B89r 2  84 62                sty     FAC_LAST
000B8Br 2               .ifdef CONFIG_CBM_ALL
000B8Br 2  A5 42                lda     VARNAM
000B8Dr 2  A4 43                ldy     VARNAM+1
000B8Fr 2               .endif
000B8Fr 2  A6 07                ldx     VALTYP
000B91r 2  F0 25                beq     L2DB1
000B93r 2               .ifdef CONFIG_CBM_ALL
000B93r 2                 .ifdef CONFIG_CBM1_PATCHES
000B93r 2                       jmp     PATCH2
000B93r 2                       clc
000B93r 2               LCE3B:
000B93r 2                 .else
000B93r 2  A2 00                ldx     #$00
000B95r 2  86 6D                stx     STRNG1+1
000B97r 2  24 62                bit     FAC+4
000B99r 2  10 1C                bpl     LCE53
000B9Br 2  C9 54                cmp     #$54	; T
000B9Dr 2  D0 18                bne     LCE53
000B9Fr 2                 .endif
000B9Fr 2  C0 C9                cpy     #$C9	; I$
000BA1r 2  D0 14                bne     LCE53
000BA3r 2  20 rr rr             jsr     LCE76
000BA6r 2  84 5B                sty     EXPON
000BA8r 2  88                   dey
000BA9r 2  84 6E                sty     STRNG2
000BABr 2  A0 06                ldy     #$06
000BADr 2  84 5A                sty     INDX
000BAFr 2  A0 24                ldy     #$24
000BB1r 2  20 rr rr             jsr     LDD3A
000BB4r 2  4C rr rr             jmp     LD353
000BB7r 2               LCE53:
000BB7r 2               .endif
000BB7r 2               .ifdef CONFIG_2
000BB7r 2                 .ifndef CBM2
000BB7r 2               ; bugfix?
000BB7r 2               ; fixed on AppleSoft II, not on any CBM
000BB7r 2                       ldx     #$00
000BB7r 2                       stx     STRNG1+1
000BB7r 2                 .endif
000BB7r 2               .endif
000BB7r 2  60                   rts
000BB8r 2               L2DB1:
000BB8r 2               .ifndef CONFIG_SMALL
000BB8r 2  A6 08                ldx     VALTYP+1
000BBAr 2  10 0D                bpl     L2DC2
000BBCr 2  A0 00                ldy     #$00
000BBEr 2  B1 61                lda     (FAC+3),y
000BC0r 2  AA                   tax
000BC1r 2  C8                   iny
000BC2r 2  B1 61                lda     (FAC+3),y
000BC4r 2  A8                   tay
000BC5r 2  8A                   txa
000BC6r 2  4C rr rr             jmp     GIVAYF
000BC9r 2               L2DC2:
000BC9r 2               .endif
000BC9r 2               .ifdef CONFIG_CBM1_PATCHES
000BC9r 2                       jmp     PATCH3
000BC9r 2                       .byte   $19
000BC9r 2               .endif
000BC9r 2               .ifdef CBM2
000BC9r 2  24 62                bit     FAC+4
000BCBr 2  10 2A                bpl     LCE90
000BCDr 2  C9 54                cmp     #$54
000BCFr 2  D0 19                bne     LCE82
000BD1r 2               .endif
000BD1r 2               .ifndef CONFIG_CBM_ALL
000BD1r 2                       jmp     LOAD_FAC_FROM_YA
000BD1r 2               .endif
000BD1r 2               .ifdef CONFIG_CBM_ALL
000BD1r 2               LCE69:
000BD1r 2  C0 49                cpy     #$49
000BD3r 2               .ifdef CBM1
000BD3r 2                       bne     LCE82
000BD3r 2               .else
000BD3r 2  D0 22                bne     LCE90
000BD5r 2               .endif
000BD5r 2  20 rr rr             jsr     LCE76
000BD8r 2  98                   tya
000BD9r 2  A2 A0                ldx     #$A0
000BDBr 2  4C rr rr             jmp     LDB21
000BDEr 2               LCE76:
000BDEr 2               .ifdef CBM1
000BDEr 2                       lda     #$FE
000BDEr 2                       ldy     #$01
000BDEr 2               .else
000BDEr 2  A9 8B                lda     #$8B
000BE0r 2  A0 00                ldy     #$00
000BE2r 2               .endif
000BE2r 2  78                   sei
000BE3r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000BE6r 2  58                   cli
000BE7r 2  84 5F                sty     FAC+1
000BE9r 2  60                   rts
000BEAr 2               LCE82:
000BEAr 2  C9 53                cmp     #$53
000BECr 2  D0 09                bne     LCE90
000BEEr 2  C0 54                cpy     #$54
000BF0r 2  D0 05                bne     LCE90
000BF2r 2  A5 96                lda     Z96
000BF4r 2  4C rr rr             jmp     FLOAT
000BF7r 2               LCE90:
000BF7r 2  A5 61                lda     FAC+3
000BF9r 2  A4 62                ldy     FAC+4
000BFBr 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000BFEr 2               .endif
000BFEr 2               
000BFEr 2               ; ----------------------------------------------------------------------------
000BFEr 2               UNARY:
000BFEr 2  0A                   asl     a
000BFFr 2  48                   pha
000C00r 2  AA                   tax
000C01r 2  20 70 00             jsr     CHRGET
000C04r 2  E0 8F                cpx     #<(TOKEN_LEFTSTR*2-1)
000C06r 2  90 20                bcc     L2DEF
000C08r 2  20 rr rr             jsr     CHKOPN
000C0Br 2  20 rr rr             jsr     FRMEVL
000C0Er 2  20 rr rr             jsr     CHKCOM
000C11r 2  20 rr rr             jsr     CHKSTR
000C14r 2  68                   pla
000C15r 2  AA                   tax
000C16r 2  A5 62                lda     FAC_LAST
000C18r 2  48                   pha
000C19r 2  A5 61                lda     FAC_LAST-1
000C1Br 2  48                   pha
000C1Cr 2  8A                   txa
000C1Dr 2  48                   pha
000C1Er 2  20 rr rr             jsr     GETBYT
000C21r 2  68                   pla
000C22r 2  A8                   tay
000C23r 2  8A                   txa
000C24r 2  48                   pha
000C25r 2  4C rr rr             jmp     L2DF4
000C28r 2               L2DEF:
000C28r 2  20 rr rr             jsr     PARCHK
000C2Br 2  68                   pla
000C2Cr 2  A8                   tay
000C2Dr 2               L2DF4:
000C2Dr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000C30r 2  85 52                sta     JMPADRS+1
000C32r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000C35r 2  85 53                sta     JMPADRS+2
000C37r 2               .ifdef KBD
000C37r 2                       jsr     LF47D
000C37r 2               .else
000C37r 2  20 51 00             jsr     JMPADRS
000C3Ar 2               .endif
000C3Ar 2  4C rr rr             jmp     CHKNUM
000C3Dr 2               
000C3Dr 2               ; ----------------------------------------------------------------------------
000C3Dr 2               OR:
000C3Dr 2  A0 FF                ldy     #$FF
000C3Fr 2  2C                   .byte   $2C
000C40r 2               ; ----------------------------------------------------------------------------
000C40r 2               TAND:
000C40r 2  A0 00                ldy     #$00
000C42r 2  84 05                sty     EOLPNTR
000C44r 2  20 rr rr             jsr     AYINT
000C47r 2  A5 61                lda     FAC_LAST-1
000C49r 2  45 05                eor     EOLPNTR
000C4Br 2  85 03                sta     CHARAC
000C4Dr 2  A5 62                lda     FAC_LAST
000C4Fr 2  45 05                eor     EOLPNTR
000C51r 2  85 04                sta     ENDCHR
000C53r 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000C56r 2  20 rr rr             jsr     AYINT
000C59r 2  A5 62                lda     FAC_LAST
000C5Br 2  45 05                eor     EOLPNTR
000C5Dr 2  25 04                and     ENDCHR
000C5Fr 2  45 05                eor     EOLPNTR
000C61r 2  A8                   tay
000C62r 2  A5 61                lda     FAC_LAST-1
000C64r 2  45 05                eor     EOLPNTR
000C66r 2  25 03                and     CHARAC
000C68r 2  45 05                eor     EOLPNTR
000C6Ar 2  4C rr rr             jmp     GIVAYF
000C6Dr 2               
000C6Dr 2               ; ----------------------------------------------------------------------------
000C6Dr 2               ; PERFORM RELATIONAL OPERATIONS
000C6Dr 2               ; ----------------------------------------------------------------------------
000C6Dr 2               RELOPS:
000C6Dr 2  20 rr rr             jsr     CHKVAL
000C70r 2  B0 13                bcs     STRCMP
000C72r 2  A5 6B                lda     ARGSIGN
000C74r 2  09 7F                ora     #$7F
000C76r 2  25 67                and     ARG+1
000C78r 2  85 67                sta     ARG+1
000C7Ar 2  A9 66                lda     #<ARG
000C7Cr 2  A0 00                ldy     #$00
000C7Er 2  20 rr rr             jsr     FCOMP
000C81r 2  AA                   tax
000C82r 2  4C rr rr             jmp     NUMCMP
000C85r 2               
000C85r 2               ; ----------------------------------------------------------------------------
000C85r 2               ; STRING COMPARISON
000C85r 2               ; ----------------------------------------------------------------------------
000C85r 2               STRCMP:
000C85r 2  A9 00                lda     #$00
000C87r 2  85 07                sta     VALTYP
000C89r 2  C6 4A                dec     CPRTYP
000C8Br 2  20 rr rr             jsr     FREFAC
000C8Er 2  85 5E                sta     FAC
000C90r 2  86 5F                stx     FAC+1
000C92r 2  84 60                sty     FAC+2
000C94r 2  A5 69                lda     ARG_LAST-1
000C96r 2  A4 6A                ldy     ARG_LAST
000C98r 2  20 rr rr             jsr     FRETMP
000C9Br 2  86 69                stx     ARG_LAST-1
000C9Dr 2  84 6A                sty     ARG_LAST
000C9Fr 2  AA                   tax
000CA0r 2  38                   sec
000CA1r 2  E5 5E                sbc     FAC
000CA3r 2  F0 08                beq     L2E74
000CA5r 2  A9 01                lda     #$01
000CA7r 2  90 04                bcc     L2E74
000CA9r 2  A6 5E                ldx     FAC
000CABr 2  A9 FF                lda     #$FF
000CADr 2               L2E74:
000CADr 2  85 63                sta     FACSIGN
000CAFr 2  A0 FF                ldy     #$FF
000CB1r 2  E8                   inx
000CB2r 2               STRCMP1:
000CB2r 2  C8                   iny
000CB3r 2  CA                   dex
000CB4r 2  D0 07                bne     L2E84
000CB6r 2  A6 63                ldx     FACSIGN
000CB8r 2               NUMCMP:
000CB8r 2  30 0F                bmi     CMPDONE
000CBAr 2  18                   clc
000CBBr 2  90 0C                bcc     CMPDONE
000CBDr 2               L2E84:
000CBDr 2  B1 69                lda     (ARG_LAST-1),y
000CBFr 2  D1 5F                cmp     (FAC+1),y
000CC1r 2  F0 EF                beq     STRCMP1
000CC3r 2  A2 FF                ldx     #$FF
000CC5r 2  B0 02                bcs     CMPDONE
000CC7r 2  A2 01                ldx     #$01
000CC9r 2               CMPDONE:
000CC9r 2  E8                   inx
000CCAr 2  8A                   txa
000CCBr 2  2A                   rol     a
000CCCr 2  25 0C                and     CPRMASK
000CCEr 2  F0 02                beq     L2E99
000CD0r 2  A9 FF                lda     #$FF
000CD2r 2               L2E99:
000CD2r 2  4C rr rr             jmp     FLOAT
000CD5r 2               
000CD5r 2               .ifdef SYM1
000CD5r 2               LCDBD:
000CD5r 2                       jsr     CHRGET
000CD5r 2                       jsr     CHKOPN
000CD5r 2                       jsr     FRMEVL
000CD5r 2                       jsr     CHRGOT
000CD5r 2                       cmp     #$29
000CD5r 2                       beq     LCDF1
000CD5r 2                       jsr     AYINT
000CD5r 2                       lda     FAC+4
000CD5r 2                       ldy     FAC+3
000CD5r 2                       sta     USR+1
000CD5r 2                       sty     USR+2
000CD5r 2               LCDD8:
000CD5r 2                       jsr     CHKCOM
000CD5r 2                       jsr     FRMEVL
000CD5r 2                       jsr     CHRGOT
000CD5r 2                       cmp     #$29
000CD5r 2                       beq     LCDF1
000CD5r 2                       jsr     AYINT
000CD5r 2                       lda     FAC+3
000CD5r 2                       pha
000CD5r 2                       lda     FAC+4
000CD5r 2                       pha
000CD5r 2                       jmp     LCDD8
000CD5r 2               
000CD5r 2               LCDF1:
000CD5r 2                       jsr     CHRGET
000CD5r 2                       jsr     AYINT
000CD5r 2                       lda     FAC+3
000CD5r 2                       ldy     FAC+4
000CD5r 2                       jmp     USR
000CD5r 2               
000CD5r 2               LCDFE:
000CD5r 2                       lda     ZD4
000CD5r 2                       pha
000CD5r 2                       lda     ZD3
000CD5r 2                       pha
000CD5r 2                       jsr     CHRGET
000CD5r 2                       cmp     #$22
000CD5r 2                       bne     LCE49
000CD5r 2                       jsr     CHRGET
000CD5r 2                       jsr     LCE2B
000CD5r 2                       tax
000CD5r 2                       jsr     CHRGOT
000CD5r 2                       jsr     LCE2B
000CD5r 2                       pha
000CD5r 2                       jsr     CHRGOT
000CD5r 2                       cmp     #$22
000CD5r 2                       bne     LCE48
000CD5r 2                       jsr     CHRGET
000CD5r 2                       pla
000CD5r 2                       tay
000CD5r 2                       pla
000CD5r 2                       pla
000CD5r 2                       txa
000CD5r 2                       jmp     GIVAYF
000CD5r 2               
000CD5r 2               LCE2B:
000CD5r 2                       jsr     ASCNIB
000CD5r 2                       bcs     LCE47
000CD5r 2                       pha
000CD5r 2                       jsr     CHRGET
000CD5r 2                       jsr     ASCNIB
000CD5r 2                       sta     FAC+4
000CD5r 2                       bcs     LCE46
000CD5r 2                       jsr     CHRGET
000CD5r 2                       pla
000CD5r 2                       asl     a
000CD5r 2                       asl     a
000CD5r 2                       asl     a
000CD5r 2                       asl     a
000CD5r 2                       ora     FAC+4
000CD5r 2                       rts
000CD5r 2               
000CD5r 2               LCE46:
000CD5r 2                       pla
000CD5r 2               LCE47:
000CD5r 2                       pla
000CD5r 2               LCE48:
000CD5r 2                       pla
000CD5r 2               LCE49:
000CD5r 2                       pla
000CD5r 2                       sta     ZD3
000CD5r 2                       pla
000CD5r 2                       sta     ZD4
000CD5r 2                       jmp     ZERO_FAC
000CD5r 2               .endif
000CD5r 2               
000CD5r 1               .include "var.s"
000CD5r 2               .segment "CODE"
000CD5r 2               
000CD5r 2               ; ----------------------------------------------------------------------------
000CD5r 2               ; "DIM" STATEMENT
000CD5r 2               ; ----------------------------------------------------------------------------
000CD5r 2               NXDIM:
000CD5r 2  20 rr rr             jsr     CHKCOM
000CD8r 2               DIM:
000CD8r 2  AA                   tax
000CD9r 2  20 rr rr             jsr     PTRGET2
000CDCr 2  20 76 00             jsr     CHRGOT
000CDFr 2  D0 F4                bne     NXDIM
000CE1r 2  60                   rts
000CE2r 2               
000CE2r 2               ; ----------------------------------------------------------------------------
000CE2r 2               ; PTRGET -- GENERAL VARIABLE SCAN
000CE2r 2               ;
000CE2r 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000CE2r 2               ; VARTAB AND ARYTAB FOR THE NAME.
000CE2r 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000CE2r 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000CE2r 2               ;
000CE2r 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000CE2r 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000CE2r 2               ;		ELSE = 0
000CE2r 2               ;
000CE2r 2               ;	SUBFLG -- = $00
000CE2r 2               ;		= $40 IF CALLED FROM "GETARYPT"
000CE2r 2               ; ----------------------------------------------------------------------------
000CE2r 2               PTRGET:
000CE2r 2  A2 00                ldx     #$00
000CE4r 2  20 76 00             jsr     CHRGOT
000CE7r 2               PTRGET2:
000CE7r 2  86 06                stx     DIMFLG
000CE9r 2               PTRGET3:
000CE9r 2  85 42                sta     VARNAM
000CEBr 2  20 76 00             jsr     CHRGOT
000CEEr 2  20 rr rr             jsr     ISLETC
000CF1r 2  B0 03                bcs     NAMOK
000CF3r 2               SYNERR3:
000CF3r 2  4C rr rr             jmp     SYNERR
000CF6r 2               NAMOK:
000CF6r 2  A2 00                ldx     #$00
000CF8r 2  86 07                stx     VALTYP
000CFAr 2               .ifndef CONFIG_SMALL
000CFAr 2  86 08                stx     VALTYP+1
000CFCr 2               .endif
000CFCr 2  20 70 00             jsr     CHRGET
000CFFr 2  90 05                bcc     L2ECD
000D01r 2  20 rr rr             jsr     ISLETC
000D04r 2  90 0B                bcc     L2ED8
000D06r 2               L2ECD:
000D06r 2  AA                   tax
000D07r 2               L2ECE:
000D07r 2  20 70 00             jsr     CHRGET
000D0Ar 2  90 FB                bcc     L2ECE
000D0Cr 2  20 rr rr             jsr     ISLETC
000D0Fr 2  B0 F6                bcs     L2ECE
000D11r 2               L2ED8:
000D11r 2  C9 24                cmp     #$24
000D13r 2               .ifdef CONFIG_SMALL
000D13r 2                       bne     L2EF9
000D13r 2               .else
000D13r 2  D0 06                bne     L2EE2
000D15r 2               .endif
000D15r 2  A9 FF                lda     #$FF
000D17r 2  85 07                sta     VALTYP
000D19r 2               .ifndef CONFIG_SMALL
000D19r 2  D0 10                bne     L2EF2
000D1Br 2               L2EE2:
000D1Br 2  C9 25                cmp     #$25
000D1Dr 2  D0 13                bne     L2EF9
000D1Fr 2  A5 0A                lda     SUBFLG
000D21r 2  D0 D0                bne     SYNERR3
000D23r 2  A9 80                lda     #$80
000D25r 2  85 08                sta     VALTYP+1
000D27r 2  05 42                ora     VARNAM
000D29r 2  85 42                sta     VARNAM
000D2Br 2               L2EF2:
000D2Br 2               .endif
000D2Br 2  8A                   txa
000D2Cr 2  09 80                ora     #$80
000D2Er 2  AA                   tax
000D2Fr 2  20 70 00             jsr     CHRGET
000D32r 2               L2EF9:
000D32r 2  86 43                stx     VARNAM+1
000D34r 2  38                   sec
000D35r 2  05 0A                ora     SUBFLG
000D37r 2  E9 28                sbc     #$28
000D39r 2  D0 03                bne     L2F05
000D3Br 2  4C rr rr             jmp     ARRAY
000D3Er 2               L2F05:
000D3Er 2  A9 00                lda     #$00
000D40r 2  85 0A                sta     SUBFLG
000D42r 2  A5 2A                lda     VARTAB
000D44r 2  A6 2B                ldx     VARTAB+1
000D46r 2  A0 00                ldy     #$00
000D48r 2               L2F0F:
000D48r 2  86 5D                stx     LOWTR+1
000D4Ar 2               L2F11:
000D4Ar 2  85 5C                sta     LOWTR
000D4Cr 2  E4 2D                cpx     ARYTAB+1
000D4Er 2  D0 04                bne     L2F1B
000D50r 2  C5 2C                cmp     ARYTAB
000D52r 2  F0 22                beq     NAMENOTFOUND
000D54r 2               L2F1B:
000D54r 2  A5 42                lda     VARNAM
000D56r 2  D1 5C                cmp     (LOWTR),y
000D58r 2  D0 08                bne     L2F29
000D5Ar 2  A5 43                lda     VARNAM+1
000D5Cr 2  C8                   iny
000D5Dr 2  D1 5C                cmp     (LOWTR),y
000D5Fr 2  F0 7D                beq     SET_VARPNT_AND_YA
000D61r 2  88                   dey
000D62r 2               L2F29:
000D62r 2  18                   clc
000D63r 2  A5 5C                lda     LOWTR
000D65r 2  69 07                adc     #BYTES_PER_VARIABLE
000D67r 2  90 E1                bcc     L2F11
000D69r 2  E8                   inx
000D6Ar 2  D0 DC                bne     L2F0F
000D6Cr 2               
000D6Cr 2               ; ----------------------------------------------------------------------------
000D6Cr 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000D6Cr 2               ;
000D6Cr 2               ; RETURN CARRY = 1 IF A-Z
000D6Cr 2               ;	= 0 IF NOT
000D6Cr 2               ; ----------------------------------------------------------------------------
000D6Cr 2               ISLETC:
000D6Cr 2  C9 41                cmp     #$41
000D6Er 2  90 05                bcc     L2F3C
000D70r 2  E9 5B                sbc     #$5B
000D72r 2  38                   sec
000D73r 2  E9 A5                sbc     #$A5
000D75r 2               L2F3C:
000D75r 2  60                   rts
000D76r 2               
000D76r 2               ; ----------------------------------------------------------------------------
000D76r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000D76r 2               ; ----------------------------------------------------------------------------
000D76r 2               NAMENOTFOUND:
000D76r 2  68                   pla
000D77r 2  48                   pha
000D78r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000D7Ar 2  D0 05                bne     MAKENEWVARIABLE
000D7Cr 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000D7Cr 2                       tsx
000D7Cr 2                       lda     STACK+2,x
000D7Cr 2                       cmp     #>FRM_VARIABLE_CALL
000D7Cr 2                       bne     MAKENEWVARIABLE
000D7Cr 2               .endif
000D7Cr 2               LD015:
000D7Cr 2  A9 rr                lda     #<C_ZERO
000D7Er 2  A0 rr                ldy     #>C_ZERO
000D80r 2  60                   rts
000D81r 2               
000D81r 2               ; ----------------------------------------------------------------------------
000D81r 2               .ifndef CONFIG_2
000D81r 2               C_ZERO:
000D81r 2                       .byte   $00,$00
000D81r 2               .endif
000D81r 2               
000D81r 2               ; ----------------------------------------------------------------------------
000D81r 2               ; MAKE A NEW SIMPLE VARIABLE
000D81r 2               ;
000D81r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000D81r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000D81r 2               ; ----------------------------------------------------------------------------
000D81r 2               MAKENEWVARIABLE:
000D81r 2               .ifdef CONFIG_CBM_ALL
000D81r 2  A5 42                lda     VARNAM
000D83r 2  A4 43                ldy     VARNAM+1
000D85r 2  C9 54                cmp     #$54
000D87r 2  D0 0B                bne     LD02F
000D89r 2  C0 C9                cpy     #$C9
000D8Br 2  F0 EF                beq     LD015
000D8Dr 2  C0 49                cpy     #$49
000D8Fr 2  D0 03                bne     LD02F
000D91r 2               LD02C:
000D91r 2  4C rr rr             jmp     SYNERR
000D94r 2               LD02F:
000D94r 2  C9 53                cmp     #$53
000D96r 2  D0 04                bne     LD037
000D98r 2  C0 54                cpy     #$54
000D9Ar 2  F0 F5                beq     LD02C
000D9Cr 2               LD037:
000D9Cr 2               .endif
000D9Cr 2  A5 2C                lda     ARYTAB
000D9Er 2  A4 2D                ldy     ARYTAB+1
000DA0r 2  85 5C                sta     LOWTR
000DA2r 2  84 5D                sty     LOWTR+1
000DA4r 2  A5 2E                lda     STREND
000DA6r 2  A4 2F                ldy     STREND+1
000DA8r 2  85 57                sta     HIGHTR
000DAAr 2  84 58                sty     HIGHTR+1
000DACr 2  18                   clc
000DADr 2  69 07                adc     #BYTES_PER_VARIABLE
000DAFr 2  90 01                bcc     L2F68
000DB1r 2  C8                   iny
000DB2r 2               L2F68:
000DB2r 2  85 55                sta     HIGHDS
000DB4r 2  84 56                sty     HIGHDS+1
000DB6r 2  20 rr rr             jsr     BLTU
000DB9r 2  A5 55                lda     HIGHDS
000DBBr 2  A4 56                ldy     HIGHDS+1
000DBDr 2  C8                   iny
000DBEr 2  85 2C                sta     ARYTAB
000DC0r 2  84 2D                sty     ARYTAB+1
000DC2r 2  A0 00                ldy     #$00
000DC4r 2  A5 42                lda     VARNAM
000DC6r 2  91 5C                sta     (LOWTR),y
000DC8r 2  C8                   iny
000DC9r 2  A5 43                lda     VARNAM+1
000DCBr 2  91 5C                sta     (LOWTR),y
000DCDr 2  A9 00                lda     #$00
000DCFr 2  C8                   iny
000DD0r 2  91 5C                sta     (LOWTR),y
000DD2r 2  C8                   iny
000DD3r 2  91 5C                sta     (LOWTR),y
000DD5r 2  C8                   iny
000DD6r 2  91 5C                sta     (LOWTR),y
000DD8r 2  C8                   iny
000DD9r 2  91 5C                sta     (LOWTR),y
000DDBr 2               .ifndef CONFIG_SMALL
000DDBr 2  C8                   iny
000DDCr 2  91 5C                sta     (LOWTR),y
000DDEr 2               .endif
000DDEr 2               
000DDEr 2               ; ----------------------------------------------------------------------------
000DDEr 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000DDEr 2               ; ----------------------------------------------------------------------------
000DDEr 2               SET_VARPNT_AND_YA:
000DDEr 2  A5 5C                lda     LOWTR
000DE0r 2  18                   clc
000DE1r 2  69 02                adc     #$02
000DE3r 2  A4 5D                ldy     LOWTR+1
000DE5r 2  90 01                bcc     L2F9E
000DE7r 2  C8                   iny
000DE8r 2               L2F9E:
000DE8r 2  85 44                sta     VARPNT
000DEAr 2  84 45                sty     VARPNT+1
000DECr 2  60                   rts
000DEDr 2               
000DEDr 1               .include "array.s"
000DEDr 2               .segment "CODE"
000DEDr 2               
000DEDr 2               ; ----------------------------------------------------------------------------
000DEDr 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000DEDr 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000DEDr 2               ; ----------------------------------------------------------------------------
000DEDr 2               GETARY:
000DEDr 2  A5 05                lda     EOLPNTR
000DEFr 2  0A                   asl     a
000DF0r 2  69 05                adc     #$05
000DF2r 2  65 5C                adc     LOWTR
000DF4r 2  A4 5D                ldy     LOWTR+1
000DF6r 2  90 01                bcc     L2FAF
000DF8r 2  C8                   iny
000DF9r 2               L2FAF:
000DF9r 2  85 55                sta     HIGHDS
000DFBr 2  84 56                sty     HIGHDS+1
000DFDr 2  60                   rts
000DFEr 2               
000DFEr 2               ; ----------------------------------------------------------------------------
000DFEr 2               NEG32768:
000DFEr 2  90 80 00 00          .byte   $90,$80,$00,$00
000E02r 2               
000E02r 2               .ifdef CONFIG_2C
000E02r 2               		.byte	$00; bugfix: short number
000E02r 2               .endif
000E02r 2               
000E02r 2               ; ----------------------------------------------------------------------------
000E02r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000E02r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000E02r 2               ; IN FAC+3,4
000E02r 2               ; ----------------------------------------------------------------------------
000E02r 2               MAKINT:
000E02r 2  20 70 00             jsr     CHRGET
000E05r 2               .ifdef CONFIG_2
000E05r 2  20 rr rr             jsr     FRMEVL
000E08r 2               .else
000E08r 2                       jsr     FRMNUM
000E08r 2               .endif
000E08r 2               
000E08r 2               ; ----------------------------------------------------------------------------
000E08r 2               ; CONVERT FAC TO INTEGER
000E08r 2               ; MUST BE POSITIVE AND LESS THAN 32768
000E08r 2               ; ----------------------------------------------------------------------------
000E08r 2               MKINT:
000E08r 2               .ifdef CONFIG_2
000E08r 2  20 rr rr             jsr     CHKNUM
000E0Br 2               .endif
000E0Br 2  A5 63                lda     FACSIGN
000E0Dr 2  30 0D                bmi     MI1
000E0Fr 2               
000E0Fr 2               ; ----------------------------------------------------------------------------
000E0Fr 2               ; CONVERT FAC TO INTEGER
000E0Fr 2               ; MUST BE -32767 <= FAC <= 32767
000E0Fr 2               ; ----------------------------------------------------------------------------
000E0Fr 2               AYINT:
000E0Fr 2  A5 5E                lda     FAC
000E11r 2  C9 90                cmp     #$90
000E13r 2  90 09                bcc     MI2
000E15r 2  A9 rr                lda     #<NEG32768
000E17r 2  A0 rr                ldy     #>NEG32768
000E19r 2  20 rr rr             jsr     FCOMP
000E1Cr 2               MI1:
000E1Cr 2  D0 7A                bne     IQERR
000E1Er 2               MI2:
000E1Er 2  4C rr rr             jmp     QINT
000E21r 2               
000E21r 2               ; ----------------------------------------------------------------------------
000E21r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000E21r 2               ; ----------------------------------------------------------------------------
000E21r 2               ARRAY:
000E21r 2  A5 06                lda     DIMFLG
000E23r 2               .ifndef CONFIG_SMALL
000E23r 2  05 08                ora     VALTYP+1
000E25r 2               .endif
000E25r 2  48                   pha
000E26r 2  A5 07                lda     VALTYP
000E28r 2  48                   pha
000E29r 2  A0 00                ldy     #$00
000E2Br 2               L2FDE:
000E2Br 2  98                   tya
000E2Cr 2  48                   pha
000E2Dr 2  A5 43                lda     VARNAM+1
000E2Fr 2  48                   pha
000E30r 2  A5 42                lda     VARNAM
000E32r 2  48                   pha
000E33r 2  20 rr rr             jsr     MAKINT
000E36r 2  68                   pla
000E37r 2  85 42                sta     VARNAM
000E39r 2  68                   pla
000E3Ar 2  85 43                sta     VARNAM+1
000E3Cr 2  68                   pla
000E3Dr 2  A8                   tay
000E3Er 2  BA                   tsx
000E3Fr 2  BD 02 01             lda     STACK+2,x
000E42r 2  48                   pha
000E43r 2  BD 01 01             lda     STACK+1,x
000E46r 2  48                   pha
000E47r 2  A5 61                lda     FAC_LAST-1
000E49r 2  9D 02 01             sta     STACK+2,x
000E4Cr 2  A5 62                lda     FAC_LAST
000E4Er 2  9D 01 01             sta     STACK+1,x
000E51r 2  C8                   iny
000E52r 2  20 76 00             jsr     CHRGOT
000E55r 2  C9 2C                cmp     #$2C
000E57r 2  F0 D2                beq     L2FDE
000E59r 2  84 05                sty     EOLPNTR
000E5Br 2  20 rr rr             jsr     CHKCLS
000E5Er 2  68                   pla
000E5Fr 2  85 07                sta     VALTYP
000E61r 2  68                   pla
000E62r 2               .ifndef CONFIG_SMALL
000E62r 2  85 08                sta     VALTYP+1
000E64r 2  29 7F                and     #$7F
000E66r 2               .endif
000E66r 2  85 06                sta     DIMFLG
000E68r 2               ; ----------------------------------------------------------------------------
000E68r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000E68r 2               ; ----------------------------------------------------------------------------
000E68r 2  A6 2C                ldx     ARYTAB
000E6Ar 2  A5 2D                lda     ARYTAB+1
000E6Cr 2               L301F:
000E6Cr 2  86 5C                stx     LOWTR
000E6Er 2  85 5D                sta     LOWTR+1
000E70r 2  C5 2F                cmp     STREND+1
000E72r 2  D0 04                bne     L302B
000E74r 2  E4 2E                cpx     STREND
000E76r 2  F0 39                beq     MAKE_NEW_ARRAY
000E78r 2               L302B:
000E78r 2  A0 00                ldy     #$00
000E7Ar 2  B1 5C                lda     (LOWTR),y
000E7Cr 2  C8                   iny
000E7Dr 2  C5 42                cmp     VARNAM
000E7Fr 2  D0 06                bne     L303A
000E81r 2  A5 43                lda     VARNAM+1
000E83r 2  D1 5C                cmp     (LOWTR),y
000E85r 2  F0 16                beq     USE_OLD_ARRAY
000E87r 2               L303A:
000E87r 2  C8                   iny
000E88r 2  B1 5C                lda     (LOWTR),y
000E8Ar 2  18                   clc
000E8Br 2  65 5C                adc     LOWTR
000E8Dr 2  AA                   tax
000E8Er 2  C8                   iny
000E8Fr 2  B1 5C                lda     (LOWTR),y
000E91r 2  65 5D                adc     LOWTR+1
000E93r 2  90 D7                bcc     L301F
000E95r 2               
000E95r 2               ; ----------------------------------------------------------------------------
000E95r 2               ; ERROR:  BAD SUBSCRIPTS
000E95r 2               ; ----------------------------------------------------------------------------
000E95r 2               SUBERR:
000E95r 2  A2 6B                ldx     #ERR_BADSUBS
000E97r 2  2C                   .byte   $2C
000E98r 2               
000E98r 2               ; ----------------------------------------------------------------------------
000E98r 2               ; ERROR:  ILLEGAL QUANTITY
000E98r 2               ; ----------------------------------------------------------------------------
000E98r 2               IQERR:
000E98r 2  A2 35                ldx     #ERR_ILLQTY
000E9Ar 2               JER:
000E9Ar 2  4C rr rr             jmp     ERROR
000E9Dr 2               
000E9Dr 2               ; ----------------------------------------------------------------------------
000E9Dr 2               ; FOUND THE ARRAY
000E9Dr 2               ; ----------------------------------------------------------------------------
000E9Dr 2               USE_OLD_ARRAY:
000E9Dr 2  A2 78                ldx     #ERR_REDIMD
000E9Fr 2  A5 06                lda     DIMFLG
000EA1r 2  D0 F7                bne     JER
000EA3r 2  20 rr rr             jsr     GETARY
000EA6r 2  A5 05                lda     EOLPNTR
000EA8r 2  A0 04                ldy     #$04
000EAAr 2  D1 5C                cmp     (LOWTR),y
000EACr 2  D0 E7                bne     SUBERR
000EAEr 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000EB1r 2               
000EB1r 2               ; ----------------------------------------------------------------------------
000EB1r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000EB1r 2               ; ----------------------------------------------------------------------------
000EB1r 2               MAKE_NEW_ARRAY:
000EB1r 2  20 rr rr             jsr     GETARY
000EB4r 2  20 rr rr             jsr     REASON
000EB7r 2  A9 00                lda     #$00
000EB9r 2  A8                   tay
000EBAr 2  85 6F                sta     STRNG2+1
000EBCr 2  A2 05                ldx     #BYTES_PER_ELEMENT
000EBEr 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000EBEr 2                       stx     STRNG2
000EBEr 2               .endif
000EBEr 2  A5 42                lda     VARNAM
000EC0r 2  91 5C                sta     (LOWTR),y
000EC2r 2               .ifndef CONFIG_SMALL
000EC2r 2  10 01                bpl     L3078
000EC4r 2  CA                   dex
000EC5r 2               L3078:
000EC5r 2               .endif
000EC5r 2  C8                   iny
000EC6r 2  A5 43                lda     VARNAM+1
000EC8r 2  91 5C                sta     (LOWTR),y
000ECAr 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000ECAr 2  10 02                bpl     L3081
000ECCr 2  CA                   dex
000ECDr 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000ECDr 2  CA                   dex
000ECEr 2                 .endif
000ECEr 2               L3081:
000ECEr 2  86 6E                stx     STRNG2
000ED0r 2               .endif
000ED0r 2  A5 05                lda     EOLPNTR
000ED2r 2  C8                   iny
000ED3r 2  C8                   iny
000ED4r 2  C8                   iny
000ED5r 2  91 5C                sta     (LOWTR),y
000ED7r 2               L308A:
000ED7r 2  A2 0B                ldx     #$0B
000ED9r 2  A9 00                lda     #$00
000EDBr 2  24 06                bit     DIMFLG
000EDDr 2  50 08                bvc     L309A
000EDFr 2  68                   pla
000EE0r 2  18                   clc
000EE1r 2  69 01                adc     #$01
000EE3r 2  AA                   tax
000EE4r 2  68                   pla
000EE5r 2  69 00                adc     #$00
000EE7r 2               L309A:
000EE7r 2  C8                   iny
000EE8r 2  91 5C                sta     (LOWTR),y
000EEAr 2  C8                   iny
000EEBr 2  8A                   txa
000EECr 2  91 5C                sta     (LOWTR),y
000EEEr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000EF1r 2  86 6E                stx     STRNG2
000EF3r 2  85 6F                sta     STRNG2+1
000EF5r 2  A4 1F                ldy     INDEX
000EF7r 2  C6 05                dec     EOLPNTR
000EF9r 2  D0 DC                bne     L308A
000EFBr 2  65 56                adc     HIGHDS+1
000EFDr 2  B0 5D                bcs     GME
000EFFr 2  85 56                sta     HIGHDS+1
000F01r 2  A8                   tay
000F02r 2  8A                   txa
000F03r 2  65 55                adc     HIGHDS
000F05r 2  90 03                bcc     L30BD
000F07r 2  C8                   iny
000F08r 2  F0 52                beq     GME
000F0Ar 2               L30BD:
000F0Ar 2  20 rr rr             jsr     REASON
000F0Dr 2  85 2E                sta     STREND
000F0Fr 2  84 2F                sty     STREND+1
000F11r 2  A9 00                lda     #$00
000F13r 2  E6 6F                inc     STRNG2+1
000F15r 2  A4 6E                ldy     STRNG2
000F17r 2  F0 05                beq     L30D1
000F19r 2               L30CC:
000F19r 2  88                   dey
000F1Ar 2  91 55                sta     (HIGHDS),y
000F1Cr 2  D0 FB                bne     L30CC
000F1Er 2               L30D1:
000F1Er 2  C6 56                dec     HIGHDS+1
000F20r 2  C6 6F                dec     STRNG2+1
000F22r 2  D0 F5                bne     L30CC
000F24r 2  E6 56                inc     HIGHDS+1
000F26r 2  38                   sec
000F27r 2  A5 2E                lda     STREND
000F29r 2  E5 5C                sbc     LOWTR
000F2Br 2  A0 02                ldy     #$02
000F2Dr 2  91 5C                sta     (LOWTR),y
000F2Fr 2  A5 2F                lda     STREND+1
000F31r 2  C8                   iny
000F32r 2  E5 5D                sbc     LOWTR+1
000F34r 2  91 5C                sta     (LOWTR),y
000F36r 2  A5 06                lda     DIMFLG
000F38r 2  D0 62                bne     RTS9
000F3Ar 2  C8                   iny
000F3Br 2               
000F3Br 2               ; ----------------------------------------------------------------------------
000F3Br 2               ; FIND SPECIFIED ARRAY ELEMENT
000F3Br 2               ;
000F3Br 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000F3Br 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000F3Br 2               ; ----------------------------------------------------------------------------
000F3Br 2               FIND_ARRAY_ELEMENT:
000F3Br 2  B1 5C                lda     (LOWTR),y
000F3Dr 2  85 05                sta     EOLPNTR
000F3Fr 2  A9 00                lda     #$00
000F41r 2  85 6E                sta     STRNG2
000F43r 2               L30F6:
000F43r 2  85 6F                sta     STRNG2+1
000F45r 2  C8                   iny
000F46r 2  68                   pla
000F47r 2  AA                   tax
000F48r 2  85 61                sta     FAC_LAST-1
000F4Ar 2  68                   pla
000F4Br 2  85 62                sta     FAC_LAST
000F4Dr 2  D1 5C                cmp     (LOWTR),y
000F4Fr 2  90 0E                bcc     FAE2
000F51r 2  D0 06                bne     GSE
000F53r 2  C8                   iny
000F54r 2  8A                   txa
000F55r 2  D1 5C                cmp     (LOWTR),y
000F57r 2  90 07                bcc     FAE3
000F59r 2               ; ----------------------------------------------------------------------------
000F59r 2               GSE:
000F59r 2  4C rr rr             jmp     SUBERR
000F5Cr 2               GME:
000F5Cr 2  4C rr rr             jmp     MEMERR
000F5Fr 2               ; ----------------------------------------------------------------------------
000F5Fr 2               FAE2:
000F5Fr 2  C8                   iny
000F60r 2               FAE3:
000F60r 2  A5 6F                lda     STRNG2+1
000F62r 2  05 6E                ora     STRNG2
000F64r 2  18                   clc
000F65r 2  F0 0A                beq     L3124
000F67r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000F6Ar 2  8A                   txa
000F6Br 2  65 61                adc     FAC_LAST-1
000F6Dr 2  AA                   tax
000F6Er 2  98                   tya
000F6Fr 2  A4 1F                ldy     INDEX
000F71r 2               L3124:
000F71r 2  65 62                adc     FAC_LAST
000F73r 2  86 6E                stx     STRNG2
000F75r 2  C6 05                dec     EOLPNTR
000F77r 2  D0 CA                bne     L30F6
000F79r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000F79r 2                       asl     STRNG2
000F79r 2                       rol     a
000F79r 2                       bcs     GSE
000F79r 2                       asl     STRNG2
000F79r 2                       rol     a
000F79r 2                       bcs     GSE
000F79r 2                       tay
000F79r 2                       lda     STRNG2
000F79r 2               .else
000F79r 2                 .ifdef CONFIG_11A
000F79r 2  85 6F                sta     STRNG2+1
000F7Br 2                 .endif
000F7Br 2  A2 05                ldx     #BYTES_FP
000F7Dr 2                 .ifdef CONFIG_SMALL
000F7Dr 2                       lda     VARNAM+1
000F7Dr 2                 .else
000F7Dr 2  A5 42                lda     VARNAM
000F7Fr 2                 .endif
000F7Fr 2  10 01                bpl     L3135
000F81r 2  CA                   dex
000F82r 2               L3135:
000F82r 2                 .ifdef CONFIG_SMALL
000F82r 2                       stx     RESULT+1
000F82r 2                 .else
000F82r 2  A5 43                lda     VARNAM+1
000F84r 2  10 02                bpl     L313B
000F86r 2  CA                   dex
000F87r 2  CA                   dex
000F88r 2               L313B:
000F88r 2  86 25                stx     RESULT+2
000F8Ar 2                 .endif
000F8Ar 2  A9 00                lda     #$00
000F8Cr 2  20 rr rr             jsr     MULTIPLY_SUBS1
000F8Fr 2  8A                   txa
000F90r 2               .endif
000F90r 2  65 55                adc     HIGHDS
000F92r 2  85 44                sta     VARPNT
000F94r 2  98                   tya
000F95r 2  65 56                adc     HIGHDS+1
000F97r 2  85 45                sta     VARPNT+1
000F99r 2  A8                   tay
000F9Ar 2  A5 44                lda     VARPNT
000F9Cr 2               RTS9:
000F9Cr 2  60                   rts
000F9Dr 2               
000F9Dr 2               ; ----------------------------------------------------------------------------
000F9Dr 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000F9Dr 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000F9Dr 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000F9Dr 2               ; ----------------------------------------------------------------------------
000F9Dr 2               MULTIPLY_SUBSCRIPT:
000F9Dr 2  84 1F                sty     INDEX
000F9Fr 2  B1 5C                lda     (LOWTR),y
000FA1r 2  85 25                sta     RESULT_LAST-2
000FA3r 2  88                   dey
000FA4r 2  B1 5C                lda     (LOWTR),y
000FA6r 2               MULTIPLY_SUBS1:
000FA6r 2  85 26                sta     RESULT_LAST-1
000FA8r 2  A9 10                lda     #$10
000FAAr 2  85 5A                sta     INDX
000FACr 2  A2 00                ldx     #$00
000FAEr 2  A0 00                ldy     #$00
000FB0r 2               L3163:
000FB0r 2  8A                   txa
000FB1r 2  0A                   asl     a
000FB2r 2  AA                   tax
000FB3r 2  98                   tya
000FB4r 2  2A                   rol     a
000FB5r 2  A8                   tay
000FB6r 2  B0 A4                bcs     GME
000FB8r 2  06 6E                asl     STRNG2
000FBAr 2  26 6F                rol     STRNG2+1
000FBCr 2  90 0B                bcc     L317C
000FBEr 2  18                   clc
000FBFr 2  8A                   txa
000FC0r 2  65 25                adc     RESULT_LAST-2
000FC2r 2  AA                   tax
000FC3r 2  98                   tya
000FC4r 2  65 26                adc     RESULT_LAST-1
000FC6r 2  A8                   tay
000FC7r 2  B0 93                bcs     GME
000FC9r 2               L317C:
000FC9r 2  C6 5A                dec     INDX
000FCBr 2  D0 E3                bne     L3163
000FCDr 2  60                   rts
000FCEr 2               
000FCEr 2               
000FCEr 1               .include "misc2.s"
000FCEr 2               .segment "CODE"
000FCEr 2               
000FCEr 2               ; ----------------------------------------------------------------------------
000FCEr 2               ; "FRE" FUNCTION
000FCEr 2               ;
000FCEr 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000FCEr 2               ; ----------------------------------------------------------------------------
000FCEr 2               FRE:
000FCEr 2  A5 07                lda     VALTYP
000FD0r 2  F0 03                beq     L3188
000FD2r 2  20 rr rr             jsr     FREFAC
000FD5r 2               L3188:
000FD5r 2  20 rr rr             jsr     GARBAG
000FD8r 2  38                   sec
000FD9r 2  A5 30                lda     FRETOP
000FDBr 2  E5 2E                sbc     STREND
000FDDr 2  A8                   tay
000FDEr 2  A5 31                lda     FRETOP+1
000FE0r 2  E5 2F                sbc     STREND+1
000FE2r 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000FE2r 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000FE2r 2               
000FE2r 2               ; ----------------------------------------------------------------------------
000FE2r 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000FE2r 2               ; ----------------------------------------------------------------------------
000FE2r 2               GIVAYF:
000FE2r 2  A2 00                ldx     #$00
000FE4r 2  86 07                stx     VALTYP
000FE6r 2  85 5F                sta     FAC+1
000FE8r 2  84 60                sty     FAC+2
000FEAr 2  A2 90                ldx     #$90
000FECr 2  4C rr rr             jmp     FLOAT1
000FEFr 2               POS:
000FEFr 2  A4 C6                ldy     POSX
000FF1r 2               
000FF1r 2               ; ----------------------------------------------------------------------------
000FF1r 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000FF1r 2               ; ----------------------------------------------------------------------------
000FF1r 2               SNGFLT:
000FF1r 2  A9 00                lda     #$00
000FF3r 2  F0 ED                beq     GIVAYF
000FF5r 2               
000FF5r 2               ; ----------------------------------------------------------------------------
000FF5r 2               ; CHECK FOR DIRECT OR RUNNING MODE
000FF5r 2               ; GIVING ERROR IF DIRECT MODE
000FF5r 2               ; ----------------------------------------------------------------------------
000FF5r 2               ERRDIR:
000FF5r 2  A6 37                ldx     CURLIN+1
000FF7r 2  E8                   inx
000FF8r 2  D0 A2                bne     RTS9
000FFAr 2  A2 95                ldx     #ERR_ILLDIR
000FFCr 2               .ifdef CONFIG_2
000FFCr 2  2C                   .byte   $2C
000FFDr 2               LD288:
000FFDr 2  A2 E9                ldx     #ERR_UNDEFFN
000FFFr 2               .endif
000FFFr 2               L31AF:
000FFFr 2  4C rr rr             jmp     ERROR
001002r 2               DEF:
001002r 2  20 rr rr             jsr     FNC
001005r 2  20 rr rr             jsr     ERRDIR
001008r 2  20 rr rr             jsr     CHKOPN
00100Br 2  A9 80                lda     #$80
00100Dr 2  85 0A                sta     SUBFLG
00100Fr 2  20 rr rr             jsr     PTRGET
001012r 2  20 rr rr             jsr     CHKNUM
001015r 2  20 rr rr             jsr     CHKCLS
001018r 2  A9 B2                lda     #TOKEN_EQUAL
00101Ar 2  20 rr rr             jsr     SYNCHR
00101Dr 2               .ifndef CONFIG_SMALL
00101Dr 2  48                   pha
00101Er 2               .endif
00101Er 2  A5 45                lda     VARPNT+1
001020r 2  48                   pha
001021r 2  A5 44                lda     VARPNT
001023r 2  48                   pha
001024r 2  A5 78                lda     TXTPTR+1
001026r 2  48                   pha
001027r 2  A5 77                lda     TXTPTR
001029r 2  48                   pha
00102Ar 2  20 rr rr             jsr     DATA
00102Dr 2  4C rr rr             jmp     L3250
001030r 2               FNC:
001030r 2  A9 A5                lda     #TOKEN_FN
001032r 2  20 rr rr             jsr     SYNCHR
001035r 2  09 80                ora     #$80
001037r 2  85 0A                sta     SUBFLG
001039r 2  20 rr rr             jsr     PTRGET3
00103Cr 2  85 4B                sta     FNCNAM
00103Er 2  84 4C                sty     FNCNAM+1
001040r 2  4C rr rr             jmp     CHKNUM
001043r 2               L31F3:
001043r 2  20 rr rr             jsr     FNC
001046r 2  A5 4C                lda     FNCNAM+1
001048r 2  48                   pha
001049r 2  A5 4B                lda     FNCNAM
00104Br 2  48                   pha
00104Cr 2  20 rr rr             jsr     PARCHK
00104Fr 2  20 rr rr             jsr     CHKNUM
001052r 2  68                   pla
001053r 2  85 4B                sta     FNCNAM
001055r 2  68                   pla
001056r 2  85 4C                sta     FNCNAM+1
001058r 2  A0 02                ldy     #$02
00105Ar 2               .ifndef CONFIG_2
00105Ar 2                       ldx     #ERR_UNDEFFN
00105Ar 2               .endif
00105Ar 2  B1 4B                lda     (FNCNAM),y
00105Cr 2               .ifndef CONFIG_2
00105Cr 2                       beq     L31AF
00105Cr 2               .endif
00105Cr 2  85 44                sta     VARPNT
00105Er 2  AA                   tax
00105Fr 2  C8                   iny
001060r 2  B1 4B                lda     (FNCNAM),y
001062r 2               .ifdef CONFIG_2
001062r 2  F0 99                beq     LD288
001064r 2               .endif
001064r 2  85 45                sta     VARPNT+1
001066r 2               .ifndef CONFIG_SMALL
001066r 2  C8                   iny
001067r 2               .endif
001067r 2               L3219:
001067r 2  B1 44                lda     (VARPNT),y
001069r 2  48                   pha
00106Ar 2  88                   dey
00106Br 2  10 FA                bpl     L3219
00106Dr 2  A4 45                ldy     VARPNT+1
00106Fr 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001072r 2  A5 78                lda     TXTPTR+1
001074r 2  48                   pha
001075r 2  A5 77                lda     TXTPTR
001077r 2  48                   pha
001078r 2  B1 4B                lda     (FNCNAM),y
00107Ar 2  85 77                sta     TXTPTR
00107Cr 2  C8                   iny
00107Dr 2  B1 4B                lda     (FNCNAM),y
00107Fr 2  85 78                sta     TXTPTR+1
001081r 2  A5 45                lda     VARPNT+1
001083r 2  48                   pha
001084r 2  A5 44                lda     VARPNT
001086r 2  48                   pha
001087r 2  20 rr rr             jsr     FRMNUM
00108Ar 2  68                   pla
00108Br 2  85 4B                sta     FNCNAM
00108Dr 2  68                   pla
00108Er 2  85 4C                sta     FNCNAM+1
001090r 2  20 76 00             jsr     CHRGOT
001093r 2  F0 03                beq     L324A
001095r 2  4C rr rr             jmp     SYNERR
001098r 2               L324A:
001098r 2  68                   pla
001099r 2  85 77                sta     TXTPTR
00109Br 2  68                   pla
00109Cr 2  85 78                sta     TXTPTR+1
00109Er 2               L3250:
00109Er 2  A0 00                ldy     #$00
0010A0r 2  68                   pla
0010A1r 2  91 4B                sta     (FNCNAM),y
0010A3r 2  68                   pla
0010A4r 2  C8                   iny
0010A5r 2  91 4B                sta     (FNCNAM),y
0010A7r 2  68                   pla
0010A8r 2  C8                   iny
0010A9r 2  91 4B                sta     (FNCNAM),y
0010ABr 2  68                   pla
0010ACr 2  C8                   iny
0010ADr 2  91 4B                sta     (FNCNAM),y
0010AFr 2               .ifndef CONFIG_SMALL
0010AFr 2  68                   pla
0010B0r 2  C8                   iny
0010B1r 2  91 4B                sta     (FNCNAM),y
0010B3r 2               .endif
0010B3r 2  60                   rts
0010B4r 2               
0010B4r 1               .include "string.s"
0010B4r 2               .segment "CODE"
0010B4r 2               ; ----------------------------------------------------------------------------
0010B4r 2               ; "STR$" FUNCTION
0010B4r 2               ; ----------------------------------------------------------------------------
0010B4r 2               STR:
0010B4r 2  20 rr rr             jsr     CHKNUM
0010B7r 2  A0 00                ldy     #$00
0010B9r 2  20 rr rr             jsr     FOUT1
0010BCr 2  68                   pla
0010BDr 2  68                   pla
0010BEr 2               LD353:
0010BEr 2  A9 FF                lda     #<(STACK2-1)
0010C0r 2  A0 00                ldy     #>(STACK2-1)
0010C2r 2               .if STACK2 > $0100
0010C2r 2                       bne     STRLIT
0010C2r 2               .else
0010C2r 2  F0 12                beq     STRLIT
0010C4r 2               .endif
0010C4r 2               
0010C4r 2               ; ----------------------------------------------------------------------------
0010C4r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010C4r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
0010C4r 2               ; ----------------------------------------------------------------------------
0010C4r 2               STRINI:
0010C4r 2  A6 61                ldx     FAC_LAST-1
0010C6r 2  A4 62                ldy     FAC_LAST
0010C8r 2  86 4D                stx     DSCPTR
0010CAr 2  84 4E                sty     DSCPTR+1
0010CCr 2               
0010CCr 2               ; ----------------------------------------------------------------------------
0010CCr 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010CCr 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
0010CCr 2               ; ----------------------------------------------------------------------------
0010CCr 2               STRSPA:
0010CCr 2  20 rr rr             jsr     GETSPA
0010CFr 2  86 5F                stx     FAC+1
0010D1r 2  84 60                sty     FAC+2
0010D3r 2  85 5E                sta     FAC
0010D5r 2  60                   rts
0010D6r 2               
0010D6r 2               ; ----------------------------------------------------------------------------
0010D6r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010D6r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
0010D6r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010D6r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010D6r 2               ; ----------------------------------------------------------------------------
0010D6r 2               STRLIT:
0010D6r 2  A2 22                ldx     #$22
0010D8r 2  86 03                stx     CHARAC
0010DAr 2  86 04                stx     ENDCHR
0010DCr 2               
0010DCr 2               ; ----------------------------------------------------------------------------
0010DCr 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010DCr 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
0010DCr 2               ;
0010DCr 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010DCr 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010DCr 2               ; ----------------------------------------------------------------------------
0010DCr 2               STRLT2:
0010DCr 2  85 6C                sta     STRNG1
0010DEr 2  84 6D                sty     STRNG1+1
0010E0r 2  85 5F                sta     FAC+1
0010E2r 2  84 60                sty     FAC+2
0010E4r 2  A0 FF                ldy     #$FF
0010E6r 2               L3298:
0010E6r 2  C8                   iny
0010E7r 2  B1 6C                lda     (STRNG1),y
0010E9r 2  F0 0C                beq     L32A9
0010EBr 2  C5 03                cmp     CHARAC
0010EDr 2  F0 04                beq     L32A5
0010EFr 2  C5 04                cmp     ENDCHR
0010F1r 2  D0 F3                bne     L3298
0010F3r 2               L32A5:
0010F3r 2  C9 22                cmp     #$22
0010F5r 2  F0 01                beq     L32AA
0010F7r 2               L32A9:
0010F7r 2  18                   clc
0010F8r 2               L32AA:
0010F8r 2  84 5E                sty     FAC
0010FAr 2  98                   tya
0010FBr 2  65 6C                adc     STRNG1
0010FDr 2  85 6E                sta     STRNG2
0010FFr 2  A6 6D                ldx     STRNG1+1
001101r 2  90 01                bcc     L32B6
001103r 2  E8                   inx
001104r 2               L32B6:
001104r 2  86 6F                stx     STRNG2+1
001106r 2  A5 6D                lda     STRNG1+1
001108r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
001108r 2  F0 04                beq     LD399
00110Ar 2  C9 02                cmp     #>INPUTBUFFER
00110Cr 2               .elseif .def(AIM65)
00110Cr 2                       beq     LD399
00110Cr 2                       cmp     #$01
00110Cr 2               .endif
00110Cr 2  D0 0B                bne     PUTNEW
00110Er 2               LD399:
00110Er 2  98                   tya
00110Fr 2  20 rr rr             jsr     STRINI
001112r 2  A6 6C                ldx     STRNG1
001114r 2  A4 6D                ldy     STRNG1+1
001116r 2  20 rr rr             jsr     MOVSTR
001119r 2               
001119r 2               ; ----------------------------------------------------------------------------
001119r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
001119r 2               ;
001119r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
001119r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
001119r 2               ; ----------------------------------------------------------------------------
001119r 2               PUTNEW:
001119r 2  A6 13                ldx     TEMPPT
00111Br 2  E0 1F                cpx     #TEMPST+9
00111Dr 2  D0 05                bne     PUTEMP
00111Fr 2  A2 C8                ldx     #ERR_FRMCPX
001121r 2               JERR:
001121r 2  4C rr rr             jmp     ERROR
001124r 2               PUTEMP:
001124r 2  A5 5E                lda     FAC
001126r 2  95 00                sta     0,x
001128r 2  A5 5F                lda     FAC+1
00112Ar 2  95 01                sta     1,x
00112Cr 2  A5 60                lda     FAC+2
00112Er 2  95 02                sta     2,x
001130r 2  A0 00                ldy     #$00
001132r 2  86 61                stx     FAC_LAST-1
001134r 2  84 62                sty     FAC_LAST
001136r 2               .ifdef CONFIG_2
001136r 2  84 6D                sty     FACEXTENSION
001138r 2               .endif
001138r 2  88                   dey
001139r 2  84 07                sty     VALTYP
00113Br 2  86 14                stx     LASTPT
00113Dr 2  E8                   inx
00113Er 2  E8                   inx
00113Fr 2  E8                   inx
001140r 2  86 13                stx     TEMPPT
001142r 2  60                   rts
001143r 2               
001143r 2               ; ----------------------------------------------------------------------------
001143r 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
001143r 2               ; (A)=# BYTES SPACE TO MAKE
001143r 2               ;
001143r 2               ; RETURN WITH (A) SAME,
001143r 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
001143r 2               ; ----------------------------------------------------------------------------
001143r 2               GETSPA:
001143r 2  46 09                lsr     DATAFLG
001145r 2               L32F1:
001145r 2  48                   pha
001146r 2  49 FF                eor     #$FF
001148r 2  38                   sec
001149r 2  65 30                adc     FRETOP
00114Br 2  A4 31                ldy     FRETOP+1
00114Dr 2  B0 01                bcs     L32FC
00114Fr 2  88                   dey
001150r 2               L32FC:
001150r 2  C4 2F                cpy     STREND+1
001152r 2  90 11                bcc     L3311
001154r 2  D0 04                bne     L3306
001156r 2  C5 2E                cmp     STREND
001158r 2  90 0B                bcc     L3311
00115Ar 2               L3306:
00115Ar 2  85 30                sta     FRETOP
00115Cr 2  84 31                sty     FRETOP+1
00115Er 2  85 32                sta     FRESPC
001160r 2  84 33                sty     FRESPC+1
001162r 2  AA                   tax
001163r 2  68                   pla
001164r 2  60                   rts
001165r 2               L3311:
001165r 2  A2 4D                ldx     #ERR_MEMFULL
001167r 2  A5 09                lda     DATAFLG
001169r 2  30 B6                bmi     JERR
00116Br 2  20 rr rr             jsr     GARBAG
00116Er 2  A9 80                lda     #$80
001170r 2  85 09                sta     DATAFLG
001172r 2  68                   pla
001173r 2  D0 D0                bne     L32F1
001175r 2               
001175r 2               ; ----------------------------------------------------------------------------
001175r 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
001175r 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
001175r 2               ; BELOW STRING AREA DOWN TO STREND.
001175r 2               ; ----------------------------------------------------------------------------
001175r 2               GARBAG:
001175r 2               
001175r 2               .ifdef CONST_MEMSIZ
001175r 2                       ldx     #<CONST_MEMSIZ
001175r 2                       lda     #>CONST_MEMSIZ
001175r 2               .else
001175r 2  A6 34                ldx     MEMSIZ
001177r 2  A5 35                lda     MEMSIZ+1
001179r 2               .endif
001179r 2               FINDHIGHESTSTRING:
001179r 2  86 30                stx     FRETOP
00117Br 2  85 31                sta     FRETOP+1
00117Dr 2  A0 00                ldy     #$00
00117Fr 2  84 4C                sty     FNCNAM+1
001181r 2               .ifdef CONFIG_2
001181r 2  84 4B                sty     FNCNAM	; GC bugfix!
001183r 2               .endif
001183r 2  A5 2E                lda     STREND
001185r 2  A6 2F                ldx     STREND+1
001187r 2  85 5C                sta     LOWTR
001189r 2  86 5D                stx     LOWTR+1
00118Br 2  A9 16                lda     #TEMPST
00118Dr 2  A2 00                ldx     #$00
00118Fr 2  85 1F                sta     INDEX
001191r 2  86 20                stx     INDEX+1
001193r 2               L333D:
001193r 2  C5 13                cmp     TEMPPT
001195r 2  F0 05                beq     L3346
001197r 2  20 rr rr             jsr     CHECK_VARIABLE
00119Ar 2  F0 F7                beq     L333D
00119Cr 2               L3346:
00119Cr 2  A9 07                lda     #BYTES_PER_VARIABLE
00119Er 2  85 50                sta     DSCLEN
0011A0r 2  A5 2A                lda     VARTAB
0011A2r 2  A6 2B                ldx     VARTAB+1
0011A4r 2  85 1F                sta     INDEX
0011A6r 2  86 20                stx     INDEX+1
0011A8r 2               L3352:
0011A8r 2  E4 2D                cpx     ARYTAB+1
0011AAr 2  D0 04                bne     L335A
0011ACr 2  C5 2C                cmp     ARYTAB
0011AEr 2  F0 05                beq     L335F
0011B0r 2               L335A:
0011B0r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
0011B3r 2  F0 F3                beq     L3352
0011B5r 2               L335F:
0011B5r 2  85 55                sta     HIGHDS
0011B7r 2  86 56                stx     HIGHDS+1
0011B9r 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
0011BBr 2  85 50                sta     DSCLEN
0011BDr 2               L3367:
0011BDr 2  A5 55                lda     HIGHDS
0011BFr 2  A6 56                ldx     HIGHDS+1
0011C1r 2               L336B:
0011C1r 2  E4 2F                cpx     STREND+1
0011C3r 2  D0 07                bne     L3376
0011C5r 2  C5 2E                cmp     STREND
0011C7r 2  D0 03                bne     L3376
0011C9r 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
0011CCr 2               L3376:
0011CCr 2  85 1F                sta     INDEX
0011CEr 2  86 20                stx     INDEX+1
0011D0r 2               .ifdef CONFIG_SMALL
0011D0r 2                       ldy     #$01
0011D0r 2               .else
0011D0r 2  A0 00                ldy     #$00
0011D2r 2  B1 1F                lda     (INDEX),y
0011D4r 2  AA                   tax
0011D5r 2  C8                   iny
0011D6r 2               .endif
0011D6r 2  B1 1F                lda     (INDEX),y
0011D8r 2  08                   php
0011D9r 2  C8                   iny
0011DAr 2  B1 1F                lda     (INDEX),y
0011DCr 2  65 55                adc     HIGHDS
0011DEr 2  85 55                sta     HIGHDS
0011E0r 2  C8                   iny
0011E1r 2  B1 1F                lda     (INDEX),y
0011E3r 2  65 56                adc     HIGHDS+1
0011E5r 2  85 56                sta     HIGHDS+1
0011E7r 2  28                   plp
0011E8r 2  10 D3                bpl     L3367
0011EAr 2               .ifndef CONFIG_SMALL
0011EAr 2  8A                   txa
0011EBr 2  30 D0                bmi     L3367
0011EDr 2               .endif
0011EDr 2  C8                   iny
0011EEr 2  B1 1F                lda     (INDEX),y
0011F0r 2               .ifdef CONFIG_CBM1_PATCHES
0011F0r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
0011F0r 2               .else
0011F0r 2                 .ifdef CONFIG_11
0011F0r 2  A0 00                ldy     #$00	; GC bugfix
0011F2r 2                 .endif
0011F2r 2  0A                   asl     a
0011F3r 2  69 05                adc     #$05
0011F5r 2               .endif
0011F5r 2  65 1F                adc     INDEX
0011F7r 2  85 1F                sta     INDEX
0011F9r 2  90 02                bcc     L33A7
0011FBr 2  E6 20                inc     INDEX+1
0011FDr 2               L33A7:
0011FDr 2  A6 20                ldx     INDEX+1
0011FFr 2               L33A9:
0011FFr 2  E4 56                cpx     HIGHDS+1
001201r 2  D0 04                bne     L33B1
001203r 2  C5 55                cmp     HIGHDS
001205r 2  F0 BA                beq     L336B
001207r 2               L33B1:
001207r 2  20 rr rr             jsr     CHECK_VARIABLE
00120Ar 2  F0 F3                beq     L33A9
00120Cr 2               
00120Cr 2               ; ----------------------------------------------------------------------------
00120Cr 2               ; PROCESS A SIMPLE VARIABLE
00120Cr 2               ; ----------------------------------------------------------------------------
00120Cr 2               CHECK_SIMPLE_VARIABLE:
00120Cr 2               .ifndef CONFIG_SMALL
00120Cr 2  B1 1F                lda     (INDEX),y
00120Er 2  30 35                bmi     CHECK_BUMP
001210r 2               .endif
001210r 2  C8                   iny
001211r 2  B1 1F                lda     (INDEX),y
001213r 2  10 30                bpl     CHECK_BUMP
001215r 2  C8                   iny
001216r 2               
001216r 2               ; ----------------------------------------------------------------------------
001216r 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
001216r 2               ; ----------------------------------------------------------------------------
001216r 2               CHECK_VARIABLE:
001216r 2  B1 1F                lda     (INDEX),y
001218r 2  F0 2B                beq     CHECK_BUMP
00121Ar 2  C8                   iny
00121Br 2  B1 1F                lda     (INDEX),y
00121Dr 2  AA                   tax
00121Er 2  C8                   iny
00121Fr 2  B1 1F                lda     (INDEX),y
001221r 2  C5 31                cmp     FRETOP+1
001223r 2  90 06                bcc     L33D5
001225r 2  D0 1E                bne     CHECK_BUMP
001227r 2  E4 30                cpx     FRETOP
001229r 2  B0 1A                bcs     CHECK_BUMP
00122Br 2               L33D5:
00122Br 2  C5 5D                cmp     LOWTR+1
00122Dr 2  90 16                bcc     CHECK_BUMP
00122Fr 2  D0 04                bne     L33DF
001231r 2  E4 5C                cpx     LOWTR
001233r 2  90 10                bcc     CHECK_BUMP
001235r 2               L33DF:
001235r 2  86 5C                stx     LOWTR
001237r 2  85 5D                sta     LOWTR+1
001239r 2  A5 1F                lda     INDEX
00123Br 2  A6 20                ldx     INDEX+1
00123Dr 2  85 4B                sta     FNCNAM
00123Fr 2  86 4C                stx     FNCNAM+1
001241r 2  A5 50                lda     DSCLEN
001243r 2  85 52                sta     Z52
001245r 2               
001245r 2               ; ----------------------------------------------------------------------------
001245r 2               ; ADD (DSCLEN) TO PNTR IN INDEX
001245r 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
001245r 2               ; ----------------------------------------------------------------------------
001245r 2               CHECK_BUMP:
001245r 2  A5 50                lda     DSCLEN
001247r 2  18                   clc
001248r 2  65 1F                adc     INDEX
00124Ar 2  85 1F                sta     INDEX
00124Cr 2  90 02                bcc     L33FA
00124Er 2  E6 20                inc     INDEX+1
001250r 2               L33FA:
001250r 2  A6 20                ldx     INDEX+1
001252r 2  A0 00                ldy     #$00
001254r 2  60                   rts
001255r 2               
001255r 2               ; ----------------------------------------------------------------------------
001255r 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
001255r 2               ; TO TOP AND GO BACK FOR ANOTHER
001255r 2               ; ----------------------------------------------------------------------------
001255r 2               MOVE_HIGHEST_STRING_TO_TOP:
001255r 2               .ifdef CONFIG_2
001255r 2  A5 4C                lda     FNCNAM+1	; GC bugfix
001257r 2  05 4B                ora     FNCNAM
001259r 2               .else
001259r 2                       ldx     FNCNAM+1
001259r 2               .endif
001259r 2  F0 F5                beq     L33FA
00125Br 2  A5 52                lda     Z52
00125Dr 2               .ifndef CONFIG_10A
00125Dr 2                       sbc     #$03
00125Dr 2               .else
00125Dr 2  29 04                and     #$04
00125Fr 2               .endif
00125Fr 2  4A                   lsr     a
001260r 2  A8                   tay
001261r 2  85 52                sta     Z52
001263r 2  B1 4B                lda     (FNCNAM),y
001265r 2  65 5C                adc     LOWTR
001267r 2  85 57                sta     HIGHTR
001269r 2  A5 5D                lda     LOWTR+1
00126Br 2  69 00                adc     #$00
00126Dr 2  85 58                sta     HIGHTR+1
00126Fr 2  A5 30                lda     FRETOP
001271r 2  A6 31                ldx     FRETOP+1
001273r 2  85 55                sta     HIGHDS
001275r 2  86 56                stx     HIGHDS+1
001277r 2  20 rr rr             jsr     BLTU2
00127Ar 2  A4 52                ldy     Z52
00127Cr 2  C8                   iny
00127Dr 2  A5 55                lda     HIGHDS
00127Fr 2  91 4B                sta     (FNCNAM),y
001281r 2  AA                   tax
001282r 2  E6 56                inc     HIGHDS+1
001284r 2  A5 56                lda     HIGHDS+1
001286r 2  C8                   iny
001287r 2  91 4B                sta     (FNCNAM),y
001289r 2  4C rr rr             jmp     FINDHIGHESTSTRING
00128Cr 2               
00128Cr 2               ; ----------------------------------------------------------------------------
00128Cr 2               ; CONCATENATE TWO STRINGS
00128Cr 2               ; ----------------------------------------------------------------------------
00128Cr 2               CAT:
00128Cr 2  A5 62                lda     FAC_LAST
00128Er 2  48                   pha
00128Fr 2  A5 61                lda     FAC_LAST-1
001291r 2  48                   pha
001292r 2  20 rr rr             jsr     FRM_ELEMENT
001295r 2  20 rr rr             jsr     CHKSTR
001298r 2  68                   pla
001299r 2  85 6C                sta     STRNG1
00129Br 2  68                   pla
00129Cr 2  85 6D                sta     STRNG1+1
00129Er 2  A0 00                ldy     #$00
0012A0r 2  B1 6C                lda     (STRNG1),y
0012A2r 2  18                   clc
0012A3r 2  71 61                adc     (FAC_LAST-1),y
0012A5r 2  90 05                bcc     L3454
0012A7r 2  A2 B0                ldx     #ERR_STRLONG
0012A9r 2  4C rr rr             jmp     ERROR
0012ACr 2               L3454:
0012ACr 2  20 rr rr             jsr     STRINI
0012AFr 2  20 rr rr             jsr     MOVINS
0012B2r 2  A5 4D                lda     DSCPTR
0012B4r 2  A4 4E                ldy     DSCPTR+1
0012B6r 2  20 rr rr             jsr     FRETMP
0012B9r 2  20 rr rr             jsr     MOVSTR1
0012BCr 2  A5 6C                lda     STRNG1
0012BEr 2  A4 6D                ldy     STRNG1+1
0012C0r 2  20 rr rr             jsr     FRETMP
0012C3r 2  20 rr rr             jsr     PUTNEW
0012C6r 2  4C rr rr             jmp     FRMEVL2
0012C9r 2               
0012C9r 2               ; ----------------------------------------------------------------------------
0012C9r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
0012C9r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
0012C9r 2               ; ----------------------------------------------------------------------------
0012C9r 2               MOVINS:
0012C9r 2  A0 00                ldy     #$00
0012CBr 2  B1 6C                lda     (STRNG1),y
0012CDr 2  48                   pha
0012CEr 2  C8                   iny
0012CFr 2  B1 6C                lda     (STRNG1),y
0012D1r 2  AA                   tax
0012D2r 2  C8                   iny
0012D3r 2  B1 6C                lda     (STRNG1),y
0012D5r 2  A8                   tay
0012D6r 2  68                   pla
0012D7r 2               
0012D7r 2               ; ----------------------------------------------------------------------------
0012D7r 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
0012D7r 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
0012D7r 2               ; ----------------------------------------------------------------------------
0012D7r 2               MOVSTR:
0012D7r 2  86 1F                stx     INDEX
0012D9r 2  84 20                sty     INDEX+1
0012DBr 2               MOVSTR1:
0012DBr 2  A8                   tay
0012DCr 2  F0 0A                beq     L3490
0012DEr 2  48                   pha
0012DFr 2               L3487:
0012DFr 2  88                   dey
0012E0r 2  B1 1F                lda     (INDEX),y
0012E2r 2  91 32                sta     (FRESPC),y
0012E4r 2  98                   tya
0012E5r 2  D0 F8                bne     L3487
0012E7r 2  68                   pla
0012E8r 2               L3490:
0012E8r 2  18                   clc
0012E9r 2  65 32                adc     FRESPC
0012EBr 2  85 32                sta     FRESPC
0012EDr 2  90 02                bcc     L3499
0012EFr 2  E6 33                inc     FRESPC+1
0012F1r 2               L3499:
0012F1r 2  60                   rts
0012F2r 2               
0012F2r 2               ; ----------------------------------------------------------------------------
0012F2r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
0012F2r 2               ; ----------------------------------------------------------------------------
0012F2r 2               FRESTR:
0012F2r 2  20 rr rr             jsr     CHKSTR
0012F5r 2               
0012F5r 2               ; ----------------------------------------------------------------------------
0012F5r 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
0012F5r 2               ; A TEMPORARY STRING, RELEASE IT.
0012F5r 2               ; ----------------------------------------------------------------------------
0012F5r 2               FREFAC:
0012F5r 2  A5 61                lda     FAC_LAST-1
0012F7r 2  A4 62                ldy     FAC_LAST
0012F9r 2               
0012F9r 2               ; ----------------------------------------------------------------------------
0012F9r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
0012F9r 2               ; A TEMPORARY STRING, RELEASE IT.
0012F9r 2               ; ----------------------------------------------------------------------------
0012F9r 2               FRETMP:
0012F9r 2  85 1F                sta     INDEX
0012FBr 2  84 20                sty     INDEX+1
0012FDr 2  20 rr rr             jsr     FRETMS
001300r 2  08                   php
001301r 2  A0 00                ldy     #$00
001303r 2  B1 1F                lda     (INDEX),y
001305r 2  48                   pha
001306r 2  C8                   iny
001307r 2  B1 1F                lda     (INDEX),y
001309r 2  AA                   tax
00130Ar 2  C8                   iny
00130Br 2  B1 1F                lda     (INDEX),y
00130Dr 2  A8                   tay
00130Er 2  68                   pla
00130Fr 2  28                   plp
001310r 2  D0 13                bne     L34CD
001312r 2  C4 31                cpy     FRETOP+1
001314r 2  D0 0F                bne     L34CD
001316r 2  E4 30                cpx     FRETOP
001318r 2  D0 0B                bne     L34CD
00131Ar 2  48                   pha
00131Br 2  18                   clc
00131Cr 2  65 30                adc     FRETOP
00131Er 2  85 30                sta     FRETOP
001320r 2  90 02                bcc     L34CC
001322r 2  E6 31                inc     FRETOP+1
001324r 2               L34CC:
001324r 2  68                   pla
001325r 2               L34CD:
001325r 2  86 1F                stx     INDEX
001327r 2  84 20                sty     INDEX+1
001329r 2  60                   rts
00132Ar 2               
00132Ar 2               ; ----------------------------------------------------------------------------
00132Ar 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00132Ar 2               ; ----------------------------------------------------------------------------
00132Ar 2               FRETMS:
00132Ar 2               .ifdef KBD
00132Ar 2                       cpy     #$00
00132Ar 2               .else
00132Ar 2  C4 15                cpy     LASTPT+1
00132Cr 2               .endif
00132Cr 2  D0 0C                bne     L34E2
00132Er 2  C5 14                cmp     LASTPT
001330r 2  D0 08                bne     L34E2
001332r 2  85 13                sta     TEMPPT
001334r 2  E9 03                sbc     #$03
001336r 2  85 14                sta     LASTPT
001338r 2  A0 00                ldy     #$00
00133Ar 2               L34E2:
00133Ar 2  60                   rts
00133Br 2               
00133Br 2               ; ----------------------------------------------------------------------------
00133Br 2               ; "CHR$" FUNCTION
00133Br 2               ; ----------------------------------------------------------------------------
00133Br 2               CHRSTR:
00133Br 2  20 rr rr             jsr     CONINT
00133Er 2  8A                   txa
00133Fr 2  48                   pha
001340r 2  A9 01                lda     #$01
001342r 2  20 rr rr             jsr     STRSPA
001345r 2  68                   pla
001346r 2  A0 00                ldy     #$00
001348r 2  91 5F                sta     (FAC+1),y
00134Ar 2  68                   pla
00134Br 2  68                   pla
00134Cr 2  4C rr rr             jmp     PUTNEW
00134Fr 2               
00134Fr 2               ; ----------------------------------------------------------------------------
00134Fr 2               ; "LEFT$" FUNCTION
00134Fr 2               ; ----------------------------------------------------------------------------
00134Fr 2               LEFTSTR:
00134Fr 2  20 rr rr             jsr     SUBSTRING_SETUP
001352r 2  D1 4D                cmp     (DSCPTR),y
001354r 2  98                   tya
001355r 2               SUBSTRING1:
001355r 2  90 04                bcc     L3503
001357r 2  B1 4D                lda     (DSCPTR),y
001359r 2  AA                   tax
00135Ar 2  98                   tya
00135Br 2               L3503:
00135Br 2  48                   pha
00135Cr 2               SUBSTRING2:
00135Cr 2  8A                   txa
00135Dr 2               SUBSTRING3:
00135Dr 2  48                   pha
00135Er 2  20 rr rr             jsr     STRSPA
001361r 2  A5 4D                lda     DSCPTR
001363r 2  A4 4E                ldy     DSCPTR+1
001365r 2  20 rr rr             jsr     FRETMP
001368r 2  68                   pla
001369r 2  A8                   tay
00136Ar 2  68                   pla
00136Br 2  18                   clc
00136Cr 2  65 1F                adc     INDEX
00136Er 2  85 1F                sta     INDEX
001370r 2  90 02                bcc     L351C
001372r 2  E6 20                inc     INDEX+1
001374r 2               L351C:
001374r 2  98                   tya
001375r 2  20 rr rr             jsr     MOVSTR1
001378r 2  4C rr rr             jmp     PUTNEW
00137Br 2               
00137Br 2               ; ----------------------------------------------------------------------------
00137Br 2               ; "RIGHT$" FUNCTION
00137Br 2               ; ----------------------------------------------------------------------------
00137Br 2               RIGHTSTR:
00137Br 2  20 rr rr             jsr     SUBSTRING_SETUP
00137Er 2  18                   clc
00137Fr 2  F1 4D                sbc     (DSCPTR),y
001381r 2  49 FF                eor     #$FF
001383r 2  4C rr rr             jmp     SUBSTRING1
001386r 2               
001386r 2               ; ----------------------------------------------------------------------------
001386r 2               ; "MID$" FUNCTION
001386r 2               ; ----------------------------------------------------------------------------
001386r 2               MIDSTR:
001386r 2  A9 FF                lda     #$FF
001388r 2  85 62                sta     FAC_LAST
00138Ar 2  20 76 00             jsr     CHRGOT
00138Dr 2  C9 29                cmp     #$29
00138Fr 2  F0 06                beq     L353F
001391r 2  20 rr rr             jsr     CHKCOM
001394r 2  20 rr rr             jsr     GETBYT
001397r 2               L353F:
001397r 2  20 rr rr             jsr     SUBSTRING_SETUP
00139Ar 2               .ifdef CONFIG_2
00139Ar 2  F0 4B                beq     GOIQ
00139Cr 2               .endif
00139Cr 2  CA                   dex
00139Dr 2  8A                   txa
00139Er 2  48                   pha
00139Fr 2  18                   clc
0013A0r 2  A2 00                ldx     #$00
0013A2r 2  F1 4D                sbc     (DSCPTR),y
0013A4r 2  B0 B6                bcs     SUBSTRING2
0013A6r 2  49 FF                eor     #$FF
0013A8r 2  C5 62                cmp     FAC_LAST
0013AAr 2  90 B1                bcc     SUBSTRING3
0013ACr 2  A5 62                lda     FAC_LAST
0013AEr 2  B0 AD                bcs     SUBSTRING3
0013B0r 2               
0013B0r 2               ; ----------------------------------------------------------------------------
0013B0r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
0013B0r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
0013B0r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
0013B0r 2               ; ----------------------------------------------------------------------------
0013B0r 2               SUBSTRING_SETUP:
0013B0r 2  20 rr rr             jsr     CHKCLS
0013B3r 2  68                   pla
0013B4r 2               .ifndef CONFIG_11
0013B4r 2                       sta     JMPADRS+1
0013B4r 2                       pla
0013B4r 2                       sta     JMPADRS+2
0013B4r 2               .else
0013B4r 2  A8                   tay
0013B5r 2  68                   pla
0013B6r 2  85 52                sta     Z52
0013B8r 2               .endif
0013B8r 2  68                   pla
0013B9r 2  68                   pla
0013BAr 2  68                   pla
0013BBr 2  AA                   tax
0013BCr 2  68                   pla
0013BDr 2  85 4D                sta     DSCPTR
0013BFr 2  68                   pla
0013C0r 2  85 4E                sta     DSCPTR+1
0013C2r 2               .ifdef CONFIG_11
0013C2r 2  A5 52                lda     Z52
0013C4r 2  48                   pha
0013C5r 2  98                   tya
0013C6r 2  48                   pha
0013C7r 2               .endif
0013C7r 2  A0 00                ldy     #$00
0013C9r 2  8A                   txa
0013CAr 2               .ifndef CONFIG_2
0013CAr 2                       beq     GOIQ
0013CAr 2               .endif
0013CAr 2               .ifndef CONFIG_11
0013CAr 2                       inc     JMPADRS+1
0013CAr 2                       jmp     (JMPADRS+1)
0013CAr 2               .else
0013CAr 2  60                   rts
0013CBr 2               .endif
0013CBr 2               
0013CBr 2               ; ----------------------------------------------------------------------------
0013CBr 2               ; "LEN" FUNCTION
0013CBr 2               ; ----------------------------------------------------------------------------
0013CBr 2               LEN:
0013CBr 2  20 rr rr             jsr     GETSTR
0013CEr 2               SNGFLT1:
0013CEr 2  4C rr rr             jmp     SNGFLT
0013D1r 2               
0013D1r 2               ; ----------------------------------------------------------------------------
0013D1r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
0013D1r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
0013D1r 2               ; ----------------------------------------------------------------------------
0013D1r 2               GETSTR:
0013D1r 2  20 rr rr             jsr     FRESTR
0013D4r 2  A2 00                ldx     #$00
0013D6r 2  86 07                stx     VALTYP
0013D8r 2  A8                   tay
0013D9r 2  60                   rts
0013DAr 2               
0013DAr 2               ; ----------------------------------------------------------------------------
0013DAr 2               ; "ASC" FUNCTION
0013DAr 2               ; ----------------------------------------------------------------------------
0013DAr 2               ASC:
0013DAr 2  20 rr rr             jsr     GETSTR
0013DDr 2  F0 08                beq     GOIQ
0013DFr 2  A0 00                ldy     #$00
0013E1r 2  B1 1F                lda     (INDEX),y
0013E3r 2  A8                   tay
0013E4r 2               .ifndef CONFIG_11A
0013E4r 2                       jmp     SNGFLT1
0013E4r 2               .else
0013E4r 2  4C rr rr             jmp     SNGFLT
0013E7r 2               .endif
0013E7r 2               ; ----------------------------------------------------------------------------
0013E7r 2               GOIQ:
0013E7r 2  4C rr rr             jmp     IQERR
0013EAr 2               
0013EAr 2               ; ----------------------------------------------------------------------------
0013EAr 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
0013EAr 2               ; TO SINGLE BYTE IN X-REG
0013EAr 2               ; ----------------------------------------------------------------------------
0013EAr 2               GTBYTC:
0013EAr 2  20 70 00             jsr     CHRGET
0013EDr 2               
0013EDr 2               ; ----------------------------------------------------------------------------
0013EDr 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
0013EDr 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
0013EDr 2               ; ----------------------------------------------------------------------------
0013EDr 2               GETBYT:
0013EDr 2  20 rr rr             jsr     FRMNUM
0013F0r 2               
0013F0r 2               ; ----------------------------------------------------------------------------
0013F0r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
0013F0r 2               ; ----------------------------------------------------------------------------
0013F0r 2               CONINT:
0013F0r 2  20 rr rr             jsr     MKINT
0013F3r 2  A6 61                ldx     FAC_LAST-1
0013F5r 2  D0 F0                bne     GOIQ
0013F7r 2  A6 62                ldx     FAC_LAST
0013F9r 2  4C 76 00             jmp     CHRGOT
0013FCr 2               
0013FCr 2               ; ----------------------------------------------------------------------------
0013FCr 2               ; "VAL" FUNCTION
0013FCr 2               ; ----------------------------------------------------------------------------
0013FCr 2               VAL:
0013FCr 2  20 rr rr             jsr     GETSTR
0013FFr 2  D0 03                bne     L35AC
001401r 2  4C rr rr             jmp     ZERO_FAC
001404r 2               L35AC:
001404r 2  A6 77                ldx     TXTPTR
001406r 2  A4 78                ldy     TXTPTR+1
001408r 2  86 6E                stx     STRNG2
00140Ar 2  84 6F                sty     STRNG2+1
00140Cr 2  A6 1F                ldx     INDEX
00140Er 2  86 77                stx     TXTPTR
001410r 2  18                   clc
001411r 2  65 1F                adc     INDEX
001413r 2  85 21                sta     DEST
001415r 2  A6 20                ldx     INDEX+1
001417r 2  86 78                stx     TXTPTR+1
001419r 2  90 01                bcc     L35C4
00141Br 2  E8                   inx
00141Cr 2               L35C4:
00141Cr 2  86 22                stx     DEST+1
00141Er 2  A0 00                ldy     #$00
001420r 2  B1 21                lda     (DEST),y
001422r 2  48                   pha
001423r 2  A9 00                lda     #$00
001425r 2  91 21                sta     (DEST),y
001427r 2  20 76 00             jsr     CHRGOT
00142Ar 2  20 rr rr             jsr     FIN
00142Dr 2  68                   pla
00142Er 2  A0 00                ldy     #$00
001430r 2  91 21                sta     (DEST),y
001432r 2               
001432r 2               ; ----------------------------------------------------------------------------
001432r 2               ; COPY STRNG2 INTO TXTPTR
001432r 2               ; ----------------------------------------------------------------------------
001432r 2               POINT:
001432r 2  A6 6E                ldx     STRNG2
001434r 2  A4 6F                ldy     STRNG2+1
001436r 2  86 77                stx     TXTPTR
001438r 2  84 78                sty     TXTPTR+1
00143Ar 2  60                   rts
00143Br 2               
00143Br 2               
00143Br 1               .include "misc3.s"
00143Br 2               ; KBD specific patches
00143Br 2               
00143Br 2               .segment "CODE"
00143Br 2               
00143Br 2               .ifdef KBD
00143Br 2               VARTAB_MINUS_2_TO_AY:
00143Br 2                       lda     VARTAB
00143Br 2                       sec
00143Br 2                       sbc     #$02
00143Br 2                       ldy     VARTAB+1
00143Br 2                       bcs     LF42C
00143Br 2                       dey
00143Br 2               LF42C:
00143Br 2                       rts
00143Br 2               
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               GET_UPPER:
00143Br 2                       lda     INPUTBUFFERX,x
00143Br 2               LF430:
00143Br 2                       cmp     #'a'
00143Br 2                       bcc     LF43A
00143Br 2                       cmp     #'z'+1
00143Br 2                       bcs     LF43A
00143Br 2               LF438:
00143Br 2                       sbc     #$1F
00143Br 2               LF43A:
00143Br 2                       rts
00143Br 2               
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               GETLN:
00143Br 2                       ldx     #$5D
00143Br 2               LF43D:
00143Br 2                       txa
00143Br 2                       and     #$7F
00143Br 2                       cmp     $0340
00143Br 2                       beq     LF44D
00143Br 2                       sta     $0340
00143Br 2                       lda     #$03
00143Br 2                       jsr     LDE48
00143Br 2               LF44D:
00143Br 2                       jsr     LDE7F
00143Br 2                       bne     RTS4
00143Br 2                       cpx     #$80
00143Br 2                       bcc     LF44D
00143Br 2               RTS4:
00143Br 2                       rts
00143Br 2               
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               LF457:
00143Br 2                       lda     TXTTAB
00143Br 2                       ldx     TXTTAB+1
00143Br 2               LF45B:
00143Br 2                       sta     JMPADRS+1
00143Br 2                       stx     JMPADRS+2
00143Br 2                       ldy     #$01
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       beq     LF438
00143Br 2                       iny
00143Br 2                       iny
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       dey
00143Br 2                       cmp     LINNUM+1
00143Br 2                       bne     LF472
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       cmp     LINNUM
00143Br 2               LF472:
00143Br 2                       bcs     LF43A
00143Br 2                       dey
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       tax
00143Br 2                       dey
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       bcc     LF45B
00143Br 2               LF47D:
00143Br 2                       jmp     (JMPADRS+1)
00143Br 2               .endif
00143Br 2               
00143Br 1               .include "poke.s"
00143Br 2               .segment "CODE"
00143Br 2               
00143Br 2               .ifndef CONFIG_NO_POKE
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               ; EVALUATE "EXP1,EXP2"
00143Br 2               ;
00143Br 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00143Br 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               GTNUM:
00143Br 2  20 rr rr             jsr     FRMNUM
00143Er 2  20 rr rr             jsr     GETADR
001441r 2               
001441r 2               ; ----------------------------------------------------------------------------
001441r 2               ; EVALUATE ",EXPRESSION"
001441r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001441r 2               ; ----------------------------------------------------------------------------
001441r 2               COMBYTE:
001441r 2  20 rr rr             jsr     CHKCOM
001444r 2  4C rr rr             jmp     GETBYT
001447r 2               
001447r 2               ; ----------------------------------------------------------------------------
001447r 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
001447r 2               ; ----------------------------------------------------------------------------
001447r 2               GETADR:
001447r 2  A5 63                lda     FACSIGN
001449r 2                 .ifdef APPLE
001449r 2                       nop ; PATCH
001449r 2                       nop
001449r 2                 .else
001449r 2  30 9C                bmi     GOIQ
00144Br 2                 .endif
00144Br 2  A5 5E                lda     FAC
00144Dr 2  C9 91                cmp     #$91
00144Fr 2  B0 96                bcs     GOIQ
001451r 2  20 rr rr             jsr     QINT
001454r 2  A5 61                lda     FAC_LAST-1
001456r 2  A4 62                ldy     FAC_LAST
001458r 2  84 11                sty     LINNUM
00145Ar 2  85 12                sta     LINNUM+1
00145Cr 2  60                   rts
00145Dr 2               
00145Dr 2               ; ----------------------------------------------------------------------------
00145Dr 2               ; "PEEK" FUNCTION
00145Dr 2               ; ----------------------------------------------------------------------------
00145Dr 2               PEEK:
00145Dr 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
00145Dr 2  A5 12                lda     LINNUM+1
00145Fr 2  48                   pha
001460r 2  A5 11                lda     LINNUM
001462r 2  48                   pha
001463r 2               .endif
001463r 2  20 rr rr             jsr     GETADR
001466r 2  A0 00                ldy     #$00
001468r 2               .ifdef CBM1
001468r 2               ; disallow PEEK between $C000 and $DFFF
001468r 2                       cmp     #$C0
001468r 2                       bcc     LD6F3
001468r 2                       cmp     #$E1
001468r 2                       bcc     LD6F6
001468r 2               LD6F3:
001468r 2               .endif
001468r 2               .ifdef CBM2
001468r 2  EA           		nop ; patch that disables the compares above
001469r 2  EA           		nop
00146Ar 2  EA           		nop
00146Br 2  EA           		nop
00146Cr 2  EA           		nop
00146Dr 2  EA           		nop
00146Er 2  EA           		nop
00146Fr 2  EA           		nop
001470r 2               .endif
001470r 2  B1 11                lda     (LINNUM),y
001472r 2  A8                   tay
001473r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001473r 2  68                   pla
001474r 2  85 11                sta     LINNUM
001476r 2  68                   pla
001477r 2  85 12                sta     LINNUM+1
001479r 2               .endif
001479r 2               LD6F6:
001479r 2  4C rr rr             jmp     SNGFLT
00147Cr 2               
00147Cr 2               ; ----------------------------------------------------------------------------
00147Cr 2               ; "POKE" STATEMENT
00147Cr 2               ; ----------------------------------------------------------------------------
00147Cr 2               POKE:
00147Cr 2  20 rr rr             jsr     GTNUM
00147Fr 2  8A                   txa
001480r 2  A0 00                ldy     #$00
001482r 2  91 11                sta     (LINNUM),y
001484r 2  60                   rts
001485r 2               
001485r 2               ; ----------------------------------------------------------------------------
001485r 2               ; "WAIT" STATEMENT
001485r 2               ; ----------------------------------------------------------------------------
001485r 2               WAIT:
001485r 2  20 rr rr             jsr     GTNUM
001488r 2  86 46                stx     FORPNT
00148Ar 2  A2 00                ldx     #$00
00148Cr 2  20 76 00             jsr     CHRGOT
00148Fr 2               .ifdef CONFIG_EASTER_EGG
00148Fr 2  F0 29                beq     EASTER_EGG
001491r 2               .else
001491r 2                       beq     L3628
001491r 2               .endif
001491r 2  20 rr rr             jsr     COMBYTE
001494r 2               L3628:
001494r 2  86 47                stx     FORPNT+1
001496r 2  A0 00                ldy     #$00
001498r 2               L362C:
001498r 2  B1 11                lda     (LINNUM),y
00149Ar 2  45 47                eor     FORPNT+1
00149Cr 2  25 46                and     FORPNT
00149Er 2  F0 F8                beq     L362C
0014A0r 2               RTS3:
0014A0r 2  60                   rts
0014A1r 2               .endif
0014A1r 2               
0014A1r 1               .include "float.s"
0014A1r 2               .segment "CODE"
0014A1r 2               
0014A1r 2               TEMP1X = TEMP1+(5-BYTES_FP)
0014A1r 2               
0014A1r 2               ; ----------------------------------------------------------------------------
0014A1r 2               ; ADD 0.5 TO FAC
0014A1r 2               ; ----------------------------------------------------------------------------
0014A1r 2               FADDH:
0014A1r 2  A9 rr                lda     #<CON_HALF
0014A3r 2  A0 rr                ldy     #>CON_HALF
0014A5r 2  4C rr rr             jmp     FADD
0014A8r 2               
0014A8r 2               ; ----------------------------------------------------------------------------
0014A8r 2               ; FAC = (Y,A) - FAC
0014A8r 2               ; ----------------------------------------------------------------------------
0014A8r 2               FSUB:
0014A8r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0014ABr 2               
0014ABr 2               ; ----------------------------------------------------------------------------
0014ABr 2               ; FAC = ARG - FAC
0014ABr 2               ; ----------------------------------------------------------------------------
0014ABr 2               FSUBT:
0014ABr 2  A5 63                lda     FACSIGN
0014ADr 2  49 FF                eor     #$FF
0014AFr 2  85 63                sta     FACSIGN
0014B1r 2  45 6B                eor     ARGSIGN
0014B3r 2  85 6C                sta     SGNCPR
0014B5r 2  A5 5E                lda     FAC
0014B7r 2  4C rr rr             jmp     FADDT
0014BAr 2               
0014BAr 2               ; ----------------------------------------------------------------------------
0014BAr 2               ; Commodore BASIC V2 Easter Egg
0014BAr 2               ; ----------------------------------------------------------------------------
0014BAr 2               .ifdef CONFIG_EASTER_EGG
0014BAr 2               EASTER_EGG:
0014BAr 2  A5 11                lda     LINNUM
0014BCr 2  C9 66                cmp     #<6502
0014BEr 2  D0 D4                bne     L3628
0014C0r 2  A5 12                lda     LINNUM+1
0014C2r 2  E9 19                sbc     #>6502
0014C4r 2  D0 CE                bne     L3628
0014C6r 2  85 11                sta     LINNUM
0014C8r 2  A8                   tay
0014C9r 2  A9 80                lda     #$80
0014CBr 2  85 12                sta     LINNUM+1
0014CDr 2               LD758:
0014CDr 2  A2 0A                ldx     #$0A
0014CFr 2               LD75A:
0014CFr 2  BD rr rr             lda     MICROSOFT-1,x
0014D2r 2  29 3F                and     #$3F
0014D4r 2  91 11                sta     (LINNUM),y
0014D6r 2  C8                   iny
0014D7r 2  D0 02                bne     LD766
0014D9r 2  E6 12                inc     LINNUM+1
0014DBr 2               LD766:
0014DBr 2  CA                   dex
0014DCr 2  D0 F1                bne     LD75A
0014DEr 2  C6 46                dec     FORPNT
0014E0r 2  D0 EB                bne     LD758
0014E2r 2  60                   rts
0014E3r 2               .endif
0014E3r 2               
0014E3r 2               ; ----------------------------------------------------------------------------
0014E3r 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
0014E3r 2               ; ----------------------------------------------------------------------------
0014E3r 2               FADD1:
0014E3r 2  20 rr rr             jsr     SHIFT_RIGHT
0014E6r 2  90 3C                bcc     FADD3
0014E8r 2               
0014E8r 2               ; ----------------------------------------------------------------------------
0014E8r 2               ; FAC = (Y,A) + FAC
0014E8r 2               ; ----------------------------------------------------------------------------
0014E8r 2               FADD:
0014E8r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0014EBr 2               
0014EBr 2               ; ----------------------------------------------------------------------------
0014EBr 2               ; FAC = ARG + FAC
0014EBr 2               ; ----------------------------------------------------------------------------
0014EBr 2               FADDT:
0014EBr 2  D0 03                bne     L365B
0014EDr 2  4C rr rr             jmp     COPY_ARG_TO_FAC
0014F0r 2               L365B:
0014F0r 2  A6 6D                ldx     FACEXTENSION
0014F2r 2  86 53                stx     ARGEXTENSION
0014F4r 2  A2 66                ldx     #ARG
0014F6r 2  A5 66                lda     ARG
0014F8r 2               FADD2:
0014F8r 2  A8                   tay
0014F9r 2               .ifdef KBD
0014F9r 2                       beq     RTS4
0014F9r 2               .else
0014F9r 2  F0 A5                beq     RTS3
0014FBr 2               .endif
0014FBr 2  38                   sec
0014FCr 2  E5 5E                sbc     FAC
0014FEr 2  F0 24                beq     FADD3
001500r 2  90 12                bcc     L367F
001502r 2  84 5E                sty     FAC
001504r 2  A4 6B                ldy     ARGSIGN
001506r 2  84 63                sty     FACSIGN
001508r 2  49 FF                eor     #$FF
00150Ar 2  69 00                adc     #$00
00150Cr 2  A0 00                ldy     #$00
00150Er 2  84 53                sty     ARGEXTENSION
001510r 2  A2 5E                ldx     #FAC
001512r 2  D0 04                bne     L3683
001514r 2               L367F:
001514r 2  A0 00                ldy     #$00
001516r 2  84 6D                sty     FACEXTENSION
001518r 2               L3683:
001518r 2  C9 F9                cmp     #$F9
00151Ar 2  30 C7                bmi     FADD1
00151Cr 2  A8                   tay
00151Dr 2  A5 6D                lda     FACEXTENSION
00151Fr 2  56 01                lsr     1,x
001521r 2  20 rr rr             jsr     SHIFT_RIGHT4
001524r 2               FADD3:
001524r 2  24 6C                bit     SGNCPR
001526r 2  10 57                bpl     FADD4
001528r 2  A0 5E                ldy     #FAC
00152Ar 2  E0 66                cpx     #ARG
00152Cr 2  F0 02                beq     L369B
00152Er 2  A0 66                ldy     #ARG
001530r 2               L369B:
001530r 2  38                   sec
001531r 2  49 FF                eor     #$FF
001533r 2  65 53                adc     ARGEXTENSION
001535r 2  85 6D                sta     FACEXTENSION
001537r 2               .ifndef CONFIG_SMALL
001537r 2  B9 04 00             lda     4,y
00153Ar 2  F5 04                sbc     4,x
00153Cr 2  85 62                sta     FAC+4
00153Er 2               .endif
00153Er 2  B9 03 00             lda     3,y
001541r 2  F5 03                sbc     3,x
001543r 2  85 61                sta     FAC+3
001545r 2  B9 02 00             lda     2,y
001548r 2  F5 02                sbc     2,x
00154Ar 2  85 60                sta     FAC+2
00154Cr 2  B9 01 00             lda     1,y
00154Fr 2  F5 01                sbc     1,x
001551r 2  85 5F                sta     FAC+1
001553r 2               
001553r 2               ; ----------------------------------------------------------------------------
001553r 2               ; NORMALIZE VALUE IN FAC
001553r 2               ; ----------------------------------------------------------------------------
001553r 2               NORMALIZE_FAC1:
001553r 2  B0 03                bcs     NORMALIZE_FAC2
001555r 2  20 rr rr             jsr     COMPLEMENT_FAC
001558r 2               NORMALIZE_FAC2:
001558r 2  A0 00                ldy     #$00
00155Ar 2  98                   tya
00155Br 2  18                   clc
00155Cr 2               L36C7:
00155Cr 2  A6 5F                ldx     FAC+1
00155Er 2  D0 4A                bne     NORMALIZE_FAC4
001560r 2  A6 60                ldx     FAC+2
001562r 2  86 5F                stx     FAC+1
001564r 2  A6 61                ldx     FAC+3
001566r 2  86 60                stx     FAC+2
001568r 2               .ifdef CONFIG_SMALL
001568r 2                       ldx     FACEXTENSION
001568r 2                       stx     FAC+3
001568r 2               .else
001568r 2  A6 62                ldx     FAC+4
00156Ar 2  86 61                stx     FAC+3
00156Cr 2  A6 6D                ldx     FACEXTENSION
00156Er 2  86 62                stx     FAC+4
001570r 2               .endif
001570r 2  84 6D                sty     FACEXTENSION
001572r 2  69 08                adc     #$08
001574r 2               .ifdef CONFIG_2B
001574r 2               ; bugfix?
001574r 2               ; fix does not exist on AppleSoft 2
001574r 2                       cmp     #(MANTISSA_BYTES+1)*8
001574r 2               .else
001574r 2  C9 20                cmp     #MANTISSA_BYTES*8
001576r 2               .endif
001576r 2  D0 E4                bne     L36C7
001578r 2               
001578r 2               ; ----------------------------------------------------------------------------
001578r 2               ; SET FAC = 0
001578r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
001578r 2               ; ----------------------------------------------------------------------------
001578r 2               ZERO_FAC:
001578r 2  A9 00                lda     #$00
00157Ar 2               STA_IN_FAC_SIGN_AND_EXP:
00157Ar 2  85 5E                sta     FAC
00157Cr 2               STA_IN_FAC_SIGN:
00157Cr 2  85 63                sta     FACSIGN
00157Er 2  60                   rts
00157Fr 2               
00157Fr 2               ; ----------------------------------------------------------------------------
00157Fr 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00157Fr 2               ; ----------------------------------------------------------------------------
00157Fr 2               FADD4:
00157Fr 2  65 53                adc     ARGEXTENSION
001581r 2  85 6D                sta     FACEXTENSION
001583r 2               .ifndef CONFIG_SMALL
001583r 2  A5 62                lda     FAC+4
001585r 2  65 6A                adc     ARG+4
001587r 2  85 62                sta     FAC+4
001589r 2               .endif
001589r 2  A5 61                lda     FAC+3
00158Br 2  65 69                adc     ARG+3
00158Dr 2  85 61                sta     FAC+3
00158Fr 2  A5 60                lda     FAC+2
001591r 2  65 68                adc     ARG+2
001593r 2  85 60                sta     FAC+2
001595r 2  A5 5F                lda     FAC+1
001597r 2  65 67                adc     ARG+1
001599r 2  85 5F                sta     FAC+1
00159Br 2  4C rr rr             jmp     NORMALIZE_FAC5
00159Er 2               
00159Er 2               ; ----------------------------------------------------------------------------
00159Er 2               ; FINISH NORMALIZING FAC
00159Er 2               ; ----------------------------------------------------------------------------
00159Er 2               NORMALIZE_FAC3:
00159Er 2  69 01                adc     #$01
0015A0r 2  06 6D                asl     FACEXTENSION
0015A2r 2               .ifndef CONFIG_SMALL
0015A2r 2  26 62                rol     FAC+4
0015A4r 2               .endif
0015A4r 2  26 61                rol     FAC+3
0015A6r 2  26 60                rol     FAC+2
0015A8r 2  26 5F                rol     FAC+1
0015AAr 2               NORMALIZE_FAC4:
0015AAr 2  10 F2                bpl     NORMALIZE_FAC3
0015ACr 2  38                   sec
0015ADr 2  E5 5E                sbc     FAC
0015AFr 2  B0 C7                bcs     ZERO_FAC
0015B1r 2  49 FF                eor     #$FF
0015B3r 2  69 01                adc     #$01
0015B5r 2  85 5E                sta     FAC
0015B7r 2               NORMALIZE_FAC5:
0015B7r 2  90 0E                bcc     L3764
0015B9r 2               NORMALIZE_FAC6:
0015B9r 2  E6 5E                inc     FAC
0015BBr 2  F0 42                beq     OVERFLOW
0015BDr 2               .ifndef CONFIG_ROR_WORKAROUND
0015BDr 2  66 5F                ror     FAC+1
0015BFr 2  66 60                ror     FAC+2
0015C1r 2  66 61                ror     FAC+3
0015C3r 2                 .ifndef CONFIG_SMALL
0015C3r 2  66 62                ror     FAC+4
0015C5r 2                 .endif
0015C5r 2  66 6D                ror     FACEXTENSION
0015C7r 2               .else
0015C7r 2                       lda     #$00
0015C7r 2                       bcc     L372E
0015C7r 2                       lda     #$80
0015C7r 2               L372E:
0015C7r 2                       lsr     FAC+1
0015C7r 2                       ora     FAC+1
0015C7r 2                       sta     FAC+1
0015C7r 2                       lda     #$00
0015C7r 2                       bcc     L373A
0015C7r 2                       lda     #$80
0015C7r 2               L373A:
0015C7r 2                       lsr     FAC+2
0015C7r 2                       ora     FAC+2
0015C7r 2                       sta     FAC+2
0015C7r 2                       lda     #$00
0015C7r 2                       bcc     L3746
0015C7r 2                       lda     #$80
0015C7r 2               L3746:
0015C7r 2                       lsr     FAC+3
0015C7r 2                       ora     FAC+3
0015C7r 2                       sta     FAC+3
0015C7r 2                       lda     #$00
0015C7r 2                       bcc     L3752
0015C7r 2                       lda     #$80
0015C7r 2               L3752:
0015C7r 2                       lsr     FAC+4
0015C7r 2                       ora     FAC+4
0015C7r 2                       sta     FAC+4
0015C7r 2                       lda     #$00
0015C7r 2                       bcc     L375E
0015C7r 2                       lda     #$80
0015C7r 2               L375E:
0015C7r 2                       lsr     FACEXTENSION
0015C7r 2                       ora     FACEXTENSION
0015C7r 2                       sta     FACEXTENSION
0015C7r 2               .endif
0015C7r 2               L3764:
0015C7r 2  60                   rts
0015C8r 2               
0015C8r 2               ; ----------------------------------------------------------------------------
0015C8r 2               ; 2'S COMPLEMENT OF FAC
0015C8r 2               ; ----------------------------------------------------------------------------
0015C8r 2               COMPLEMENT_FAC:
0015C8r 2  A5 63                lda     FACSIGN
0015CAr 2  49 FF                eor     #$FF
0015CCr 2  85 63                sta     FACSIGN
0015CEr 2               
0015CEr 2               ; ----------------------------------------------------------------------------
0015CEr 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
0015CEr 2               ; ----------------------------------------------------------------------------
0015CEr 2               COMPLEMENT_FAC_MANTISSA:
0015CEr 2  A5 5F                lda     FAC+1
0015D0r 2  49 FF                eor     #$FF
0015D2r 2  85 5F                sta     FAC+1
0015D4r 2  A5 60                lda     FAC+2
0015D6r 2  49 FF                eor     #$FF
0015D8r 2  85 60                sta     FAC+2
0015DAr 2  A5 61                lda     FAC+3
0015DCr 2  49 FF                eor     #$FF
0015DEr 2  85 61                sta     FAC+3
0015E0r 2               .ifndef CONFIG_SMALL
0015E0r 2  A5 62                lda     FAC+4
0015E2r 2  49 FF                eor     #$FF
0015E4r 2  85 62                sta     FAC+4
0015E6r 2               .endif
0015E6r 2  A5 6D                lda     FACEXTENSION
0015E8r 2  49 FF                eor     #$FF
0015EAr 2  85 6D                sta     FACEXTENSION
0015ECr 2  E6 6D                inc     FACEXTENSION
0015EEr 2  D0 0E                bne     RTS12
0015F0r 2               
0015F0r 2               ; ----------------------------------------------------------------------------
0015F0r 2               ; INCREMENT FAC MANTISSA
0015F0r 2               ; ----------------------------------------------------------------------------
0015F0r 2               INCREMENT_FAC_MANTISSA:
0015F0r 2               .ifndef CONFIG_SMALL
0015F0r 2  E6 62                inc     FAC+4
0015F2r 2  D0 0A                bne     RTS12
0015F4r 2               .endif
0015F4r 2  E6 61                inc     FAC+3
0015F6r 2  D0 06                bne     RTS12
0015F8r 2  E6 60                inc     FAC+2
0015FAr 2  D0 02                bne     RTS12
0015FCr 2  E6 5F                inc     FAC+1
0015FEr 2               RTS12:
0015FEr 2  60                   rts
0015FFr 2               OVERFLOW:
0015FFr 2  A2 45                ldx     #ERR_OVERFLOW
001601r 2  4C rr rr             jmp     ERROR
001604r 2               
001604r 2               ; ----------------------------------------------------------------------------
001604r 2               ; SHIFT 1,X THRU 5,X RIGHT
001604r 2               ; (A) = NEGATIVE OF SHIFT COUNT
001604r 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
001604r 2               ;
001604r 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
001604r 2               ; ----------------------------------------------------------------------------
001604r 2               SHIFT_RIGHT1:
001604r 2  A2 22                ldx     #RESULT-1
001606r 2               SHIFT_RIGHT2:
001606r 2               .ifdef CONFIG_SMALL
001606r 2                       ldy     3,x
001606r 2               .else
001606r 2  B4 04                ldy     4,x
001608r 2               .endif
001608r 2  84 6D                sty     FACEXTENSION
00160Ar 2               .ifndef CONFIG_SMALL
00160Ar 2  B4 03                ldy     3,x
00160Cr 2  94 04                sty     4,x
00160Er 2               .endif
00160Er 2  B4 02                ldy     2,x
001610r 2  94 03                sty     3,x
001612r 2  B4 01                ldy     1,x
001614r 2  94 02                sty     2,x
001616r 2  A4 65                ldy     SHIFTSIGNEXT
001618r 2  94 01                sty     1,x
00161Ar 2               
00161Ar 2               ; ----------------------------------------------------------------------------
00161Ar 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
00161Ar 2               ; ----------------------------------------------------------------------------
00161Ar 2               SHIFT_RIGHT:
00161Ar 2  69 08                adc     #$08
00161Cr 2  30 E8                bmi     SHIFT_RIGHT2
00161Er 2  F0 E6                beq     SHIFT_RIGHT2
001620r 2  E9 08                sbc     #$08
001622r 2  A8                   tay
001623r 2  A5 6D                lda     FACEXTENSION
001625r 2  B0 14                bcs     SHIFT_RIGHT5
001627r 2               .ifndef CONFIG_ROR_WORKAROUND
001627r 2               LB588:
001627r 2  16 01                asl     1,x
001629r 2  90 02                bcc     LB58E
00162Br 2  F6 01                inc     1,x
00162Dr 2               LB58E:
00162Dr 2  76 01                ror     1,x
00162Fr 2  76 01                ror     1,x
001631r 2               
001631r 2               ; ----------------------------------------------------------------------------
001631r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
001631r 2               ; ----------------------------------------------------------------------------
001631r 2               SHIFT_RIGHT4:
001631r 2  76 02                ror     2,x
001633r 2  76 03                ror     3,x
001635r 2                 .ifndef CONFIG_SMALL
001635r 2  76 04                ror     4,x
001637r 2                 .endif
001637r 2  6A                   ror     a
001638r 2  C8                   iny
001639r 2  D0 EC                bne     LB588
00163Br 2               .else
00163Br 2               L37C4:
00163Br 2                       pha
00163Br 2                       lda     1,x
00163Br 2                       and     #$80
00163Br 2                       lsr     1,x
00163Br 2                       ora     1,x
00163Br 2                       sta     1,x
00163Br 2                       .byte   $24
00163Br 2               SHIFT_RIGHT4:
00163Br 2                       pha
00163Br 2                       lda     #$00
00163Br 2                       bcc     L37D7
00163Br 2                       lda     #$80
00163Br 2               L37D7:
00163Br 2                       lsr     2,x
00163Br 2                       ora     2,x
00163Br 2                       sta     2,x
00163Br 2                       lda     #$00
00163Br 2                       bcc     L37E3
00163Br 2                       lda     #$80
00163Br 2               L37E3:
00163Br 2                       lsr     3,x
00163Br 2                       ora     3,x
00163Br 2                       sta     3,x
00163Br 2                       lda     #$00
00163Br 2                       bcc     L37EF
00163Br 2                       lda     #$80
00163Br 2               L37EF:
00163Br 2                       lsr     4,x
00163Br 2                       ora     4,x
00163Br 2                       sta     4,x
00163Br 2                       pla
00163Br 2                       php
00163Br 2                       lsr     a
00163Br 2                       plp
00163Br 2                       bcc     L37FD
00163Br 2                       ora     #$80
00163Br 2               L37FD:
00163Br 2                       iny
00163Br 2                       bne     L37C4
00163Br 2               .endif
00163Br 2               SHIFT_RIGHT5:
00163Br 2  18                   clc
00163Cr 2  60                   rts
00163Dr 2               
00163Dr 2               ; ----------------------------------------------------------------------------
00163Dr 2               .ifdef CONFIG_SMALL
00163Dr 2               CON_ONE:
00163Dr 2                       .byte   $81,$00,$00,$00
00163Dr 2               POLY_LOG:
00163Dr 2               		.byte	$02
00163Dr 2               		.byte   $80,$19,$56,$62
00163Dr 2               		.byte   $80,$76,$22,$F3
00163Dr 2               		.byte   $82,$38,$AA,$40
00163Dr 2               CON_SQR_HALF:
00163Dr 2               		.byte   $80,$35,$04,$F3
00163Dr 2               CON_SQR_TWO:
00163Dr 2               		.byte   $81,$35,$04,$F3
00163Dr 2               CON_NEG_HALF:
00163Dr 2               		.byte   $80,$80,$00,$00
00163Dr 2               CON_LOG_TWO:
00163Dr 2               		.byte   $80,$31,$72,$18
00163Dr 2               .else
00163Dr 2               CON_ONE:
00163Dr 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001641r 2  00           
001642r 2               POLY_LOG:
001642r 2  03                   .byte   $03
001643r 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
001647r 2  79           
001648r 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
00164Cr 2  64           
00164Dr 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
001651r 2  16           
001652r 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
001656r 2  20           
001657r 2               CON_SQR_HALF:
001657r 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
00165Br 2  34           
00165Cr 2               CON_SQR_TWO:
00165Cr 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
001660r 2  34           
001661r 2               CON_NEG_HALF:
001661r 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
001665r 2  00           
001666r 2               CON_LOG_TWO:
001666r 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
00166Ar 2  F8           
00166Br 2               .endif
00166Br 2               
00166Br 2               ; ----------------------------------------------------------------------------
00166Br 2               ; "LOG" FUNCTION
00166Br 2               ; ----------------------------------------------------------------------------
00166Br 2               LOG:
00166Br 2  20 rr rr             jsr     SIGN
00166Er 2  F0 02                beq     GIQ
001670r 2  10 03                bpl     LOG2
001672r 2               GIQ:
001672r 2  4C rr rr             jmp     IQERR
001675r 2               LOG2:
001675r 2  A5 5E                lda     FAC
001677r 2  E9 7F                sbc     #$7F
001679r 2  48                   pha
00167Ar 2  A9 80                lda     #$80
00167Cr 2  85 5E                sta     FAC
00167Er 2  A9 rr                lda     #<CON_SQR_HALF
001680r 2  A0 rr                ldy     #>CON_SQR_HALF
001682r 2  20 rr rr             jsr     FADD
001685r 2  A9 rr                lda     #<CON_SQR_TWO
001687r 2  A0 rr                ldy     #>CON_SQR_TWO
001689r 2  20 rr rr             jsr     FDIV
00168Cr 2  A9 rr                lda     #<CON_ONE
00168Er 2  A0 rr                ldy     #>CON_ONE
001690r 2  20 rr rr             jsr     FSUB
001693r 2  A9 rr                lda     #<POLY_LOG
001695r 2  A0 rr                ldy     #>POLY_LOG
001697r 2  20 rr rr             jsr     POLYNOMIAL_ODD
00169Ar 2  A9 rr                lda     #<CON_NEG_HALF
00169Cr 2  A0 rr                ldy     #>CON_NEG_HALF
00169Er 2  20 rr rr             jsr     FADD
0016A1r 2  68                   pla
0016A2r 2  20 rr rr             jsr     ADDACC
0016A5r 2  A9 rr                lda     #<CON_LOG_TWO
0016A7r 2  A0 rr                ldy     #>CON_LOG_TWO
0016A9r 2               
0016A9r 2               ; ----------------------------------------------------------------------------
0016A9r 2               ; FAC = (Y,A) * FAC
0016A9r 2               ; ----------------------------------------------------------------------------
0016A9r 2               FMULT:
0016A9r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0016ACr 2               
0016ACr 2               ; ----------------------------------------------------------------------------
0016ACr 2               ; FAC = ARG * FAC
0016ACr 2               ; ----------------------------------------------------------------------------
0016ACr 2               FMULTT:
0016ACr 2               .ifndef CONFIG_11
0016ACr 2                       beq     L3903
0016ACr 2               .else
0016ACr 2  D0 03 4C rr          jeq     L3903
0016B0r 2  rr           
0016B1r 2               .endif
0016B1r 2  20 rr rr             jsr     ADD_EXPONENTS
0016B4r 2  A9 00                lda     #$00
0016B6r 2  85 23                sta     RESULT
0016B8r 2  85 24                sta     RESULT+1
0016BAr 2  85 25                sta     RESULT+2
0016BCr 2               .ifndef CONFIG_SMALL
0016BCr 2  85 26                sta     RESULT+3
0016BEr 2               .endif
0016BEr 2  A5 6D                lda     FACEXTENSION
0016C0r 2  20 rr rr             jsr     MULTIPLY1
0016C3r 2               .ifndef CONFIG_SMALL
0016C3r 2  A5 62                lda     FAC+4
0016C5r 2  20 rr rr             jsr     MULTIPLY1
0016C8r 2               .endif
0016C8r 2  A5 61                lda     FAC+3
0016CAr 2  20 rr rr             jsr     MULTIPLY1
0016CDr 2  A5 60                lda     FAC+2
0016CFr 2  20 rr rr             jsr     MULTIPLY1
0016D2r 2  A5 5F                lda     FAC+1
0016D4r 2  20 rr rr             jsr     MULTIPLY2
0016D7r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0016DAr 2               
0016DAr 2               ; ----------------------------------------------------------------------------
0016DAr 2               ; MULTIPLY ARG BY (A) INTO RESULT
0016DAr 2               ; ----------------------------------------------------------------------------
0016DAr 2               MULTIPLY1:
0016DAr 2  D0 03                bne     MULTIPLY2
0016DCr 2  4C rr rr             jmp     SHIFT_RIGHT1
0016DFr 2               MULTIPLY2:
0016DFr 2  4A                   lsr     a
0016E0r 2  09 80                ora     #$80
0016E2r 2               L38A7:
0016E2r 2  A8                   tay
0016E3r 2  90 19                bcc     L38C3
0016E5r 2  18                   clc
0016E6r 2               .ifndef CONFIG_SMALL
0016E6r 2  A5 26                lda     RESULT+3
0016E8r 2  65 6A                adc     ARG+4
0016EAr 2  85 26                sta     RESULT+3
0016ECr 2               .endif
0016ECr 2  A5 25                lda     RESULT+2
0016EEr 2  65 69                adc     ARG+3
0016F0r 2  85 25                sta     RESULT+2
0016F2r 2  A5 24                lda     RESULT+1
0016F4r 2  65 68                adc     ARG+2
0016F6r 2  85 24                sta     RESULT+1
0016F8r 2  A5 23                lda     RESULT
0016FAr 2  65 67                adc     ARG+1
0016FCr 2  85 23                sta     RESULT
0016FEr 2               L38C3:
0016FEr 2               .ifndef CONFIG_ROR_WORKAROUND
0016FEr 2  66 23                ror     RESULT
001700r 2  66 24                ror     RESULT+1
001702r 2               .ifdef APPLE_BAD_BYTE
001702r 2               ; this seems to be a bad byte in the dump
001702r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
001702r 2               .else
001702r 2  66 25                ror     RESULT+2
001704r 2               .endif
001704r 2               .ifndef CONFIG_SMALL
001704r 2  66 26                ror     RESULT+3
001706r 2               .endif
001706r 2  66 6D                ror     FACEXTENSION
001708r 2               .else
001708r 2                       lda     #$00
001708r 2                       bcc     L38C9
001708r 2                       lda     #$80
001708r 2               L38C9:
001708r 2                       lsr     RESULT
001708r 2                       ora     RESULT
001708r 2                       sta     RESULT
001708r 2                       lda     #$00
001708r 2                       bcc     L38D5
001708r 2                       lda     #$80
001708r 2               L38D5:
001708r 2                       lsr     RESULT+1
001708r 2                       ora     RESULT+1
001708r 2                       sta     RESULT+1
001708r 2                       lda     #$00
001708r 2                       bcc     L38E1
001708r 2                       lda     #$80
001708r 2               L38E1:
001708r 2                       lsr     RESULT+2
001708r 2                       ora     RESULT+2
001708r 2                       sta     RESULT+2
001708r 2                       lda     #$00
001708r 2                       bcc     L38ED
001708r 2                       lda     #$80
001708r 2               L38ED:
001708r 2                       lsr     RESULT+3
001708r 2                       ora     RESULT+3
001708r 2                       sta     RESULT+3
001708r 2                       lda     #$00
001708r 2                       bcc     L38F9
001708r 2                       lda     #$80
001708r 2               L38F9:
001708r 2                       lsr     FACEXTENSION
001708r 2                       ora     FACEXTENSION
001708r 2                       sta     FACEXTENSION
001708r 2               .endif
001708r 2  98                   tya
001709r 2  4A                   lsr     a
00170Ar 2  D0 D6                bne     L38A7
00170Cr 2               L3903:
00170Cr 2  60                   rts
00170Dr 2               
00170Dr 2               ; ----------------------------------------------------------------------------
00170Dr 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
00170Dr 2               ; ----------------------------------------------------------------------------
00170Dr 2               LOAD_ARG_FROM_YA:
00170Dr 2  85 1F                sta     INDEX
00170Fr 2  84 20                sty     INDEX+1
001711r 2  A0 04                ldy     #BYTES_FP-1
001713r 2               .ifndef CONFIG_SMALL
001713r 2  B1 1F                lda     (INDEX),y
001715r 2  85 6A                sta     ARG+4
001717r 2  88                   dey
001718r 2               .endif
001718r 2  B1 1F                lda     (INDEX),y
00171Ar 2  85 69                sta     ARG+3
00171Cr 2  88                   dey
00171Dr 2  B1 1F                lda     (INDEX),y
00171Fr 2  85 68                sta     ARG+2
001721r 2  88                   dey
001722r 2  B1 1F                lda     (INDEX),y
001724r 2  85 6B                sta     ARGSIGN
001726r 2  45 63                eor     FACSIGN
001728r 2  85 6C                sta     SGNCPR
00172Ar 2  A5 6B                lda     ARGSIGN
00172Cr 2  09 80                ora     #$80
00172Er 2  85 67                sta     ARG+1
001730r 2  88                   dey
001731r 2  B1 1F                lda     (INDEX),y
001733r 2  85 66                sta     ARG
001735r 2  A5 5E                lda     FAC
001737r 2  60                   rts
001738r 2               
001738r 2               ; ----------------------------------------------------------------------------
001738r 2               ; ADD EXPONENTS OF ARG AND FAC
001738r 2               ; (CALLED BY FMULT AND FDIV)
001738r 2               ;
001738r 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
001738r 2               ; ----------------------------------------------------------------------------
001738r 2               ADD_EXPONENTS:
001738r 2  A5 66                lda     ARG
00173Ar 2               ADD_EXPONENTS1:
00173Ar 2  F0 1F                beq     ZERO
00173Cr 2  18                   clc
00173Dr 2  65 5E                adc     FAC
00173Fr 2  90 04                bcc     L393C
001741r 2  30 1D                bmi     JOV
001743r 2  18                   clc
001744r 2  2C                   .byte   $2C
001745r 2               L393C:
001745r 2  10 14                bpl     ZERO
001747r 2  69 80                adc     #$80
001749r 2  85 5E                sta     FAC
00174Br 2  D0 03                bne     L3947
00174Dr 2  4C rr rr             jmp     STA_IN_FAC_SIGN
001750r 2               L3947:
001750r 2  A5 6C                lda     SGNCPR
001752r 2  85 63                sta     FACSIGN
001754r 2  60                   rts
001755r 2               
001755r 2               ; ----------------------------------------------------------------------------
001755r 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
001755r 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
001755r 2               ; CALLED FROM "EXP" FUNCTION
001755r 2               ; ----------------------------------------------------------------------------
001755r 2               OUTOFRNG:
001755r 2  A5 63                lda     FACSIGN
001757r 2  49 FF                eor     #$FF
001759r 2  30 05                bmi     JOV
00175Br 2               
00175Br 2               ; ----------------------------------------------------------------------------
00175Br 2               ; POP RETURN ADDRESS AND SET FAC=0
00175Br 2               ; ----------------------------------------------------------------------------
00175Br 2               ZERO:
00175Br 2  68                   pla
00175Cr 2  68                   pla
00175Dr 2  4C rr rr             jmp     ZERO_FAC
001760r 2               JOV:
001760r 2  4C rr rr             jmp     OVERFLOW
001763r 2               
001763r 2               ; ----------------------------------------------------------------------------
001763r 2               ; MULTIPLY FAC BY 10
001763r 2               ; ----------------------------------------------------------------------------
001763r 2               MUL10:
001763r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001766r 2  AA                   tax
001767r 2  F0 10                beq     L3970
001769r 2  18                   clc
00176Ar 2  69 02                adc     #$02
00176Cr 2  B0 F2                bcs     JOV
00176Er 2               LD9BF:
00176Er 2  A2 00                ldx     #$00
001770r 2  86 6C                stx     SGNCPR
001772r 2  20 rr rr             jsr     FADD2
001775r 2  E6 5E                inc     FAC
001777r 2  F0 E7                beq     JOV
001779r 2               L3970:
001779r 2  60                   rts
00177Ar 2               
00177Ar 2               ; ----------------------------------------------------------------------------
00177Ar 2               CONTEN:
00177Ar 2               .ifdef CONFIG_SMALL
00177Ar 2                       .byte   $84,$20,$00,$00
00177Ar 2               .else
00177Ar 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
00177Er 2  00           
00177Fr 2               .endif
00177Fr 2               
00177Fr 2               ; ----------------------------------------------------------------------------
00177Fr 2               ; DIVIDE FAC BY 10
00177Fr 2               ; ----------------------------------------------------------------------------
00177Fr 2               DIV10:
00177Fr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001782r 2  A9 rr                lda     #<CONTEN
001784r 2  A0 rr                ldy     #>CONTEN
001786r 2  A2 00                ldx     #$00
001788r 2               
001788r 2               ; ----------------------------------------------------------------------------
001788r 2               ; FAC = ARG / (Y,A)
001788r 2               ; ----------------------------------------------------------------------------
001788r 2               DIV:
001788r 2  86 6C                stx     SGNCPR
00178Ar 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00178Dr 2  4C rr rr             jmp     FDIVT
001790r 2               
001790r 2               ; ----------------------------------------------------------------------------
001790r 2               ; FAC = (Y,A) / FAC
001790r 2               ; ----------------------------------------------------------------------------
001790r 2               FDIV:
001790r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001793r 2               
001793r 2               ; ----------------------------------------------------------------------------
001793r 2               ; FAC = ARG / FAC
001793r 2               ; ----------------------------------------------------------------------------
001793r 2               FDIVT:
001793r 2  F0 76                beq     L3A02
001795r 2  20 rr rr             jsr     ROUND_FAC
001798r 2  A9 00                lda     #$00
00179Ar 2  38                   sec
00179Br 2  E5 5E                sbc     FAC
00179Dr 2  85 5E                sta     FAC
00179Fr 2  20 rr rr             jsr     ADD_EXPONENTS
0017A2r 2  E6 5E                inc     FAC
0017A4r 2  F0 BA                beq     JOV
0017A6r 2  A2 FC                ldx     #-MANTISSA_BYTES
0017A8r 2  A9 01                lda     #$01
0017AAr 2               L39A1:
0017AAr 2  A4 67                ldy     ARG+1
0017ACr 2  C4 5F                cpy     FAC+1
0017AEr 2  D0 10                bne     L39B7
0017B0r 2  A4 68                ldy     ARG+2
0017B2r 2  C4 60                cpy     FAC+2
0017B4r 2  D0 0A                bne     L39B7
0017B6r 2  A4 69                ldy     ARG+3
0017B8r 2  C4 61                cpy     FAC+3
0017BAr 2               .ifndef CONFIG_SMALL
0017BAr 2  D0 04                bne     L39B7
0017BCr 2  A4 6A                ldy     ARG+4
0017BEr 2  C4 62                cpy     FAC+4
0017C0r 2               .endif
0017C0r 2               L39B7:
0017C0r 2  08                   php
0017C1r 2  2A                   rol     a
0017C2r 2  90 09                bcc     L39C4
0017C4r 2  E8                   inx
0017C5r 2  95 26                sta     RESULT_LAST-1,x
0017C7r 2  F0 32                beq     L39F2
0017C9r 2  10 34                bpl     L39F6
0017CBr 2  A9 01                lda     #$01
0017CDr 2               L39C4:
0017CDr 2  28                   plp
0017CEr 2  B0 0E                bcs     L39D5
0017D0r 2               L39C7:
0017D0r 2  06 6A                asl     ARG_LAST
0017D2r 2               .ifndef CONFIG_SMALL
0017D2r 2  26 69                rol     ARG+3
0017D4r 2               .endif
0017D4r 2  26 68                rol     ARG+2
0017D6r 2  26 67                rol     ARG+1
0017D8r 2  B0 E6                bcs     L39B7
0017DAr 2  30 CE                bmi     L39A1
0017DCr 2  10 E2                bpl     L39B7
0017DEr 2               L39D5:
0017DEr 2  A8                   tay
0017DFr 2               .ifndef CONFIG_SMALL
0017DFr 2  A5 6A                lda     ARG+4
0017E1r 2  E5 62                sbc     FAC+4
0017E3r 2  85 6A                sta     ARG+4
0017E5r 2               .endif
0017E5r 2  A5 69                lda     ARG+3
0017E7r 2  E5 61                sbc     FAC+3
0017E9r 2  85 69                sta     ARG+3
0017EBr 2  A5 68                lda     ARG+2
0017EDr 2  E5 60                sbc     FAC+2
0017EFr 2  85 68                sta     ARG+2
0017F1r 2  A5 67                lda     ARG+1
0017F3r 2  E5 5F                sbc     FAC+1
0017F5r 2  85 67                sta     ARG+1
0017F7r 2  98                   tya
0017F8r 2  4C rr rr             jmp     L39C7
0017FBr 2               L39F2:
0017FBr 2  A9 40                lda     #$40
0017FDr 2  D0 CE                bne     L39C4
0017FFr 2               L39F6:
0017FFr 2  0A                   asl     a
001800r 2  0A                   asl     a
001801r 2  0A                   asl     a
001802r 2  0A                   asl     a
001803r 2  0A                   asl     a
001804r 2  0A                   asl     a
001805r 2  85 6D                sta     FACEXTENSION
001807r 2  28                   plp
001808r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
00180Br 2               L3A02:
00180Br 2  A2 85                ldx     #ERR_ZERODIV
00180Dr 2  4C rr rr             jmp     ERROR
001810r 2               
001810r 2               ; ----------------------------------------------------------------------------
001810r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
001810r 2               ; ----------------------------------------------------------------------------
001810r 2               COPY_RESULT_INTO_FAC:
001810r 2  A5 23                lda     RESULT
001812r 2  85 5F                sta     FAC+1
001814r 2  A5 24                lda     RESULT+1
001816r 2  85 60                sta     FAC+2
001818r 2  A5 25                lda     RESULT+2
00181Ar 2  85 61                sta     FAC+3
00181Cr 2               .ifndef CONFIG_SMALL
00181Cr 2  A5 26                lda     RESULT+3
00181Er 2  85 62                sta     FAC+4
001820r 2               .endif
001820r 2  4C rr rr             jmp     NORMALIZE_FAC2
001823r 2               
001823r 2               ; ----------------------------------------------------------------------------
001823r 2               ; UNPACK (Y,A) INTO FAC
001823r 2               ; ----------------------------------------------------------------------------
001823r 2               LOAD_FAC_FROM_YA:
001823r 2  85 1F                sta     INDEX
001825r 2  84 20                sty     INDEX+1
001827r 2  A0 04                ldy     #MANTISSA_BYTES
001829r 2               .ifndef CONFIG_SMALL
001829r 2  B1 1F                lda     (INDEX),y
00182Br 2  85 62                sta     FAC+4
00182Dr 2  88                   dey
00182Er 2               .endif
00182Er 2  B1 1F                lda     (INDEX),y
001830r 2  85 61                sta     FAC+3
001832r 2  88                   dey
001833r 2  B1 1F                lda     (INDEX),y
001835r 2  85 60                sta     FAC+2
001837r 2  88                   dey
001838r 2  B1 1F                lda     (INDEX),y
00183Ar 2  85 63                sta     FACSIGN
00183Cr 2  09 80                ora     #$80
00183Er 2  85 5F                sta     FAC+1
001840r 2  88                   dey
001841r 2  B1 1F                lda     (INDEX),y
001843r 2  85 5E                sta     FAC
001845r 2  84 6D                sty     FACEXTENSION
001847r 2  60                   rts
001848r 2               
001848r 2               ; ----------------------------------------------------------------------------
001848r 2               ; ROUND FAC, STORE IN TEMP2
001848r 2               ; ----------------------------------------------------------------------------
001848r 2               STORE_FAC_IN_TEMP2_ROUNDED:
001848r 2  A2 59                ldx     #TEMP2
00184Ar 2  2C                   .byte   $2C
00184Br 2               
00184Br 2               ; ----------------------------------------------------------------------------
00184Br 2               ; ROUND FAC, STORE IN TEMP1
00184Br 2               ; ----------------------------------------------------------------------------
00184Br 2               STORE_FAC_IN_TEMP1_ROUNDED:
00184Br 2  A2 54                ldx     #TEMP1X
00184Dr 2  A0 00                ldy     #$00
00184Fr 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
001851r 2               
001851r 2               ; ----------------------------------------------------------------------------
001851r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
001851r 2               ; ----------------------------------------------------------------------------
001851r 2               SETFOR:
001851r 2  A6 46                ldx     FORPNT
001853r 2  A4 47                ldy     FORPNT+1
001855r 2               
001855r 2               ; ----------------------------------------------------------------------------
001855r 2               ; ROUND FAC, AND STORE AT (Y,X)
001855r 2               ; ----------------------------------------------------------------------------
001855r 2               STORE_FAC_AT_YX_ROUNDED:
001855r 2  20 rr rr             jsr     ROUND_FAC
001858r 2  86 1F                stx     INDEX
00185Ar 2  84 20                sty     INDEX+1
00185Cr 2  A0 04                ldy     #MANTISSA_BYTES
00185Er 2               .ifndef CONFIG_SMALL
00185Er 2  A5 62                lda     FAC+4
001860r 2  91 1F                sta     (INDEX),y
001862r 2  88                   dey
001863r 2               .endif
001863r 2  A5 61                lda     FAC+3
001865r 2  91 1F                sta     (INDEX),y
001867r 2  88                   dey
001868r 2  A5 60                lda     FAC+2
00186Ar 2  91 1F                sta     (INDEX),y
00186Cr 2  88                   dey
00186Dr 2  A5 63                lda     FACSIGN
00186Fr 2  09 7F                ora     #$7F
001871r 2  25 5F                and     FAC+1
001873r 2  91 1F                sta     (INDEX),y
001875r 2  88                   dey
001876r 2  A5 5E                lda     FAC
001878r 2  91 1F                sta     (INDEX),y
00187Ar 2  84 6D                sty     FACEXTENSION
00187Cr 2  60                   rts
00187Dr 2               
00187Dr 2               ; ----------------------------------------------------------------------------
00187Dr 2               ; COPY ARG INTO FAC
00187Dr 2               ; ----------------------------------------------------------------------------
00187Dr 2               COPY_ARG_TO_FAC:
00187Dr 2  A5 6B                lda     ARGSIGN
00187Fr 2               MFA:
00187Fr 2  85 63                sta     FACSIGN
001881r 2  A2 05                ldx     #BYTES_FP
001883r 2               L3A7A:
001883r 2  B5 65                lda     SHIFTSIGNEXT,x
001885r 2  95 5D                sta     EXPSGN,x
001887r 2  CA                   dex
001888r 2  D0 F9                bne     L3A7A
00188Ar 2  86 6D                stx     FACEXTENSION
00188Cr 2  60                   rts
00188Dr 2               
00188Dr 2               ; ----------------------------------------------------------------------------
00188Dr 2               ; ROUND FAC AND COPY TO ARG
00188Dr 2               ; ----------------------------------------------------------------------------
00188Dr 2               COPY_FAC_TO_ARG_ROUNDED:
00188Dr 2  20 rr rr             jsr     ROUND_FAC
001890r 2               MAF:
001890r 2  A2 06                ldx     #BYTES_FP+1
001892r 2               L3A89:
001892r 2  B5 5D                lda     EXPSGN,x
001894r 2  95 65                sta     SHIFTSIGNEXT,x
001896r 2  CA                   dex
001897r 2  D0 F9                bne     L3A89
001899r 2  86 6D                stx     FACEXTENSION
00189Br 2               RTS14:
00189Br 2  60                   rts
00189Cr 2               
00189Cr 2               ; ----------------------------------------------------------------------------
00189Cr 2               ; ROUND FAC USING EXTENSION BYTE
00189Cr 2               ; ----------------------------------------------------------------------------
00189Cr 2               ROUND_FAC:
00189Cr 2  A5 5E                lda     FAC
00189Er 2  F0 FB                beq     RTS14
0018A0r 2  06 6D                asl     FACEXTENSION
0018A2r 2  90 F7                bcc     RTS14
0018A4r 2               
0018A4r 2               ; ----------------------------------------------------------------------------
0018A4r 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
0018A4r 2               ; ----------------------------------------------------------------------------
0018A4r 2               INCREMENT_MANTISSA:
0018A4r 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
0018A7r 2  D0 F2                bne     RTS14
0018A9r 2  4C rr rr             jmp     NORMALIZE_FAC6
0018ACr 2               
0018ACr 2               ; ----------------------------------------------------------------------------
0018ACr 2               ; TEST FAC FOR ZERO AND SIGN
0018ACr 2               ;
0018ACr 2               ; FAC > 0, RETURN +1
0018ACr 2               ; FAC = 0, RETURN  0
0018ACr 2               ; FAC < 0, RETURN -1
0018ACr 2               ; ----------------------------------------------------------------------------
0018ACr 2               SIGN:
0018ACr 2  A5 5E                lda     FAC
0018AEr 2  F0 09                beq     RTS15
0018B0r 2               L3AA7:
0018B0r 2  A5 63                lda     FACSIGN
0018B2r 2               SIGN2:
0018B2r 2  2A                   rol     a
0018B3r 2  A9 FF                lda     #$FF
0018B5r 2  B0 02                bcs     RTS15
0018B7r 2  A9 01                lda     #$01
0018B9r 2               RTS15:
0018B9r 2  60                   rts
0018BAr 2               
0018BAr 2               ; ----------------------------------------------------------------------------
0018BAr 2               ; "SGN" FUNCTION
0018BAr 2               ; ----------------------------------------------------------------------------
0018BAr 2               SGN:
0018BAr 2  20 rr rr             jsr     SIGN
0018BDr 2               
0018BDr 2               ; ----------------------------------------------------------------------------
0018BDr 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
0018BDr 2               ; ----------------------------------------------------------------------------
0018BDr 2               FLOAT:
0018BDr 2  85 5F                sta     FAC+1
0018BFr 2  A9 00                lda     #$00
0018C1r 2  85 60                sta     FAC+2
0018C3r 2  A2 88                ldx     #$88
0018C5r 2               
0018C5r 2               ; ----------------------------------------------------------------------------
0018C5r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
0018C5r 2               ; (X) = EXPONENT
0018C5r 2               ; ----------------------------------------------------------------------------
0018C5r 2               FLOAT1:
0018C5r 2  A5 5F                lda     FAC+1
0018C7r 2  49 FF                eor     #$FF
0018C9r 2  2A                   rol     a
0018CAr 2               
0018CAr 2               ; ----------------------------------------------------------------------------
0018CAr 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
0018CAr 2               ; (X) = EXPONENT
0018CAr 2               ; C=0 TO MAKE VALUE NEGATIVE
0018CAr 2               ; C=1 TO MAKE VALUE POSITIVE
0018CAr 2               ; ----------------------------------------------------------------------------
0018CAr 2               FLOAT2:
0018CAr 2  A9 00                lda     #$00
0018CCr 2               .ifndef CONFIG_SMALL
0018CCr 2  85 62                sta     FAC+4
0018CEr 2               .endif
0018CEr 2  85 61                sta     FAC+3
0018D0r 2               LDB21:
0018D0r 2  86 5E                stx     FAC
0018D2r 2  85 6D                sta     FACEXTENSION
0018D4r 2  85 63                sta     FACSIGN
0018D6r 2  4C rr rr             jmp     NORMALIZE_FAC1
0018D9r 2               
0018D9r 2               ; ----------------------------------------------------------------------------
0018D9r 2               ; "ABS" FUNCTION
0018D9r 2               ; ----------------------------------------------------------------------------
0018D9r 2               ABS:
0018D9r 2  46 63                lsr     FACSIGN
0018DBr 2  60                   rts
0018DCr 2               
0018DCr 2               ; ----------------------------------------------------------------------------
0018DCr 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
0018DCr 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
0018DCr 2               ; ----------------------------------------------------------------------------
0018DCr 2               FCOMP:
0018DCr 2  85 21                sta     DEST
0018DEr 2               
0018DEr 2               ; ----------------------------------------------------------------------------
0018DEr 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
0018DEr 2               ; "DEST" ALREADY SET UP
0018DEr 2               ; ----------------------------------------------------------------------------
0018DEr 2               FCOMP2:
0018DEr 2  84 22                sty     DEST+1
0018E0r 2  A0 00                ldy     #$00
0018E2r 2  B1 21                lda     (DEST),y
0018E4r 2  C8                   iny
0018E5r 2  AA                   tax
0018E6r 2  F0 C4                beq     SIGN
0018E8r 2  B1 21                lda     (DEST),y
0018EAr 2  45 63                eor     FACSIGN
0018ECr 2  30 C2                bmi     L3AA7
0018EEr 2  E4 5E                cpx     FAC
0018F0r 2  D0 21                bne     L3B0A
0018F2r 2  B1 21                lda     (DEST),y
0018F4r 2  09 80                ora     #$80
0018F6r 2  C5 5F                cmp     FAC+1
0018F8r 2  D0 19                bne     L3B0A
0018FAr 2  C8                   iny
0018FBr 2  B1 21                lda     (DEST),y
0018FDr 2  C5 60                cmp     FAC+2
0018FFr 2  D0 12                bne     L3B0A
001901r 2  C8                   iny
001902r 2               .ifndef CONFIG_SMALL
001902r 2  B1 21                lda     (DEST),y
001904r 2  C5 61                cmp     FAC+3
001906r 2  D0 0B                bne     L3B0A
001908r 2  C8                   iny
001909r 2               .endif
001909r 2  A9 7F                lda     #$7F
00190Br 2  C5 6D                cmp     FACEXTENSION
00190Dr 2  B1 21                lda     (DEST),y
00190Fr 2  E5 62                sbc     FAC_LAST
001911r 2  F0 28                beq     L3B32
001913r 2               L3B0A:
001913r 2  A5 63                lda     FACSIGN
001915r 2  90 02                bcc     L3B10
001917r 2  49 FF                eor     #$FF
001919r 2               L3B10:
001919r 2  4C rr rr             jmp     SIGN2
00191Cr 2               
00191Cr 2               ; ----------------------------------------------------------------------------
00191Cr 2               ; QUICK INTEGER FUNCTION
00191Cr 2               ;
00191Cr 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
00191Cr 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
00191Cr 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
00191Cr 2               ;
00191Cr 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
00191Cr 2               ; ----------------------------------------------------------------------------
00191Cr 2               QINT:
00191Cr 2  A5 5E                lda     FAC
00191Er 2  F0 4A                beq     QINT3
001920r 2  38                   sec
001921r 2  E9 A0                sbc     #120+8*BYTES_FP
001923r 2  24 63                bit     FACSIGN
001925r 2  10 09                bpl     L3B27
001927r 2  AA                   tax
001928r 2  A9 FF                lda     #$FF
00192Ar 2  85 65                sta     SHIFTSIGNEXT
00192Cr 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
00192Fr 2  8A                   txa
001930r 2               L3B27:
001930r 2  A2 5E                ldx     #FAC
001932r 2  C9 F9                cmp     #$F9
001934r 2  10 06                bpl     QINT2
001936r 2  20 rr rr             jsr     SHIFT_RIGHT
001939r 2  84 65                sty     SHIFTSIGNEXT
00193Br 2               L3B32:
00193Br 2  60                   rts
00193Cr 2               QINT2:
00193Cr 2  A8                   tay
00193Dr 2  A5 63                lda     FACSIGN
00193Fr 2  29 80                and     #$80
001941r 2  46 5F                lsr     FAC+1
001943r 2  05 5F                ora     FAC+1
001945r 2  85 5F                sta     FAC+1
001947r 2  20 rr rr             jsr     SHIFT_RIGHT4
00194Ar 2  84 65                sty     SHIFTSIGNEXT
00194Cr 2  60                   rts
00194Dr 2               
00194Dr 2               ; ----------------------------------------------------------------------------
00194Dr 2               ; "INT" FUNCTION
00194Dr 2               ;
00194Dr 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
00194Dr 2               ; AND THEN REFLOATS THE INTEGER.
00194Dr 2               ; ----------------------------------------------------------------------------
00194Dr 2               INT:
00194Dr 2  A5 5E                lda     FAC
00194Fr 2  C9 A0                cmp     #120+8*BYTES_FP
001951r 2  B0 20                bcs     RTS17
001953r 2  20 rr rr             jsr     QINT
001956r 2  84 6D                sty     FACEXTENSION
001958r 2  A5 63                lda     FACSIGN
00195Ar 2  84 63                sty     FACSIGN
00195Cr 2  49 80                eor     #$80
00195Er 2  2A                   rol     a
00195Fr 2  A9 A0                lda     #120+8*BYTES_FP
001961r 2  85 5E                sta     FAC
001963r 2  A5 62                lda     FAC_LAST
001965r 2  85 03                sta     CHARAC
001967r 2  4C rr rr             jmp     NORMALIZE_FAC1
00196Ar 2               QINT3:
00196Ar 2  85 5F                sta     FAC+1
00196Cr 2  85 60                sta     FAC+2
00196Er 2  85 61                sta     FAC+3
001970r 2               .ifndef CONFIG_SMALL
001970r 2  85 62                sta     FAC+4
001972r 2               .endif
001972r 2  A8                   tay
001973r 2               RTS17:
001973r 2  60                   rts
001974r 2               
001974r 2               ; ----------------------------------------------------------------------------
001974r 2               ; CONVERT STRING TO FP VALUE IN FAC
001974r 2               ;
001974r 2               ; STRING POINTED TO BY TXTPTR
001974r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
001974r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
001974r 2               ; ----------------------------------------------------------------------------
001974r 2               FIN:
001974r 2  A0 00                ldy     #$00
001976r 2  A2 0A                ldx     #SERLEN-TMPEXP
001978r 2               L3B6F:
001978r 2  94 5A                sty     TMPEXP,x
00197Ar 2  CA                   dex
00197Br 2  10 FB                bpl     L3B6F
00197Dr 2  90 0F                bcc     FIN2
00197Fr 2               .ifdef SYM1
00197Fr 2                       cmp     #$26
00197Fr 2                       bne     LDABB
00197Fr 2                       jmp     LCDFE
00197Fr 2               LDABB:
00197Fr 2               .endif
00197Fr 2  C9 2D                cmp     #$2D
001981r 2  D0 04                bne     L3B7E
001983r 2  86 64                stx     SERLEN
001985r 2  F0 04                beq     FIN1
001987r 2               L3B7E:
001987r 2  C9 2B                cmp     #$2B
001989r 2  D0 05                bne     FIN3
00198Br 2               FIN1:
00198Br 2  20 70 00             jsr     CHRGET
00198Er 2               FIN2:
00198Er 2  90 5B                bcc     FIN9
001990r 2               FIN3:
001990r 2  C9 2E                cmp     #$2E
001992r 2  F0 2E                beq     FIN10
001994r 2  C9 45                cmp     #$45
001996r 2  D0 30                bne     FIN7
001998r 2  20 70 00             jsr     CHRGET
00199Br 2  90 17                bcc     FIN5
00199Dr 2  C9 AB                cmp     #TOKEN_MINUS
00199Fr 2  F0 0E                beq     L3BA6
0019A1r 2  C9 2D                cmp     #$2D
0019A3r 2  F0 0A                beq     L3BA6
0019A5r 2  C9 AA                cmp     #TOKEN_PLUS
0019A7r 2  F0 08                beq     FIN4
0019A9r 2  C9 2B                cmp     #$2B
0019ABr 2  F0 04                beq     FIN4
0019ADr 2  D0 07                bne     FIN6
0019AFr 2               L3BA6:
0019AFr 2               .ifndef CONFIG_ROR_WORKAROUND
0019AFr 2  66 5D                ror     EXPSGN
0019B1r 2               .else
0019B1r 2                       lda     #$00
0019B1r 2                       bcc     L3BAC
0019B1r 2                       lda     #$80
0019B1r 2               L3BAC:
0019B1r 2                       lsr     EXPSGN
0019B1r 2                       ora     EXPSGN
0019B1r 2                       sta     EXPSGN
0019B1r 2               .endif
0019B1r 2               FIN4:
0019B1r 2  20 70 00             jsr     CHRGET
0019B4r 2               FIN5:
0019B4r 2  90 5C                bcc     GETEXP
0019B6r 2               FIN6:
0019B6r 2  24 5D                bit     EXPSGN
0019B8r 2  10 0E                bpl     FIN7
0019BAr 2  A9 00                lda     #$00
0019BCr 2  38                   sec
0019BDr 2  E5 5B                sbc     EXPON
0019BFr 2  4C rr rr             jmp     FIN8
0019C2r 2               
0019C2r 2               ; ----------------------------------------------------------------------------
0019C2r 2               ; FOUND A DECIMAL POINT
0019C2r 2               ; ----------------------------------------------------------------------------
0019C2r 2               FIN10:
0019C2r 2               .ifndef CONFIG_ROR_WORKAROUND
0019C2r 2  66 5C                ror     LOWTR
0019C4r 2               .else
0019C4r 2                       lda     #$00
0019C4r 2                       bcc     L3BC9
0019C4r 2                       lda     #$80
0019C4r 2               L3BC9:
0019C4r 2                       lsr     LOWTR
0019C4r 2                       ora     LOWTR
0019C4r 2                       sta     LOWTR
0019C4r 2               .endif
0019C4r 2  24 5C                bit     LOWTR
0019C6r 2  50 C3                bvc     FIN1
0019C8r 2               
0019C8r 2               ; ----------------------------------------------------------------------------
0019C8r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
0019C8r 2               ; ----------------------------------------------------------------------------
0019C8r 2               FIN7:
0019C8r 2  A5 5B                lda     EXPON
0019CAr 2               FIN8:
0019CAr 2  38                   sec
0019CBr 2  E5 5A                sbc     INDX
0019CDr 2  85 5B                sta     EXPON
0019CFr 2  F0 12                beq     L3BEE
0019D1r 2  10 09                bpl     L3BE7
0019D3r 2               L3BDE:
0019D3r 2  20 rr rr             jsr     DIV10
0019D6r 2  E6 5B                inc     EXPON
0019D8r 2  D0 F9                bne     L3BDE
0019DAr 2  F0 07                beq     L3BEE
0019DCr 2               L3BE7:
0019DCr 2  20 rr rr             jsr     MUL10
0019DFr 2  C6 5B                dec     EXPON
0019E1r 2  D0 F9                bne     L3BE7
0019E3r 2               L3BEE:
0019E3r 2  A5 64                lda     SERLEN
0019E5r 2  30 01                bmi     L3BF3
0019E7r 2  60                   rts
0019E8r 2               L3BF3:
0019E8r 2  4C rr rr             jmp     NEGOP
0019EBr 2               
0019EBr 2               ; ----------------------------------------------------------------------------
0019EBr 2               ; ACCUMULATE A DIGIT INTO FAC
0019EBr 2               ; ----------------------------------------------------------------------------
0019EBr 2               FIN9:
0019EBr 2  48                   pha
0019ECr 2  24 5C                bit     LOWTR
0019EEr 2  10 02                bpl     L3BFD
0019F0r 2  E6 5A                inc     INDX
0019F2r 2               L3BFD:
0019F2r 2  20 rr rr             jsr     MUL10
0019F5r 2  68                   pla
0019F6r 2  38                   sec
0019F7r 2  E9 30                sbc     #$30
0019F9r 2  20 rr rr             jsr     ADDACC
0019FCr 2  4C rr rr             jmp     FIN1
0019FFr 2               
0019FFr 2               ; ----------------------------------------------------------------------------
0019FFr 2               ; ADD (A) TO FAC
0019FFr 2               ; ----------------------------------------------------------------------------
0019FFr 2               ADDACC:
0019FFr 2  48                   pha
001A00r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A03r 2  68                   pla
001A04r 2  20 rr rr             jsr     FLOAT
001A07r 2  A5 6B                lda     ARGSIGN
001A09r 2  45 63                eor     FACSIGN
001A0Br 2  85 6C                sta     SGNCPR
001A0Dr 2  A6 5E                ldx     FAC
001A0Fr 2  4C rr rr             jmp     FADDT
001A12r 2               
001A12r 2               ; ----------------------------------------------------------------------------
001A12r 2               ; ACCUMULATE DIGIT OF EXPONENT
001A12r 2               ; ----------------------------------------------------------------------------
001A12r 2               GETEXP:
001A12r 2  A5 5B                lda     EXPON
001A14r 2  C9 0A                cmp     #MAX_EXPON
001A16r 2  90 09                bcc     L3C2C
001A18r 2               .ifdef CONFIG_10A
001A18r 2  A9 64                lda     #$64
001A1Ar 2               .endif
001A1Ar 2  24 5D                bit     EXPSGN
001A1Cr 2               .ifdef CONFIG_10A
001A1Cr 2  30 11                bmi     L3C3A
001A1Er 2               .else
001A1Er 2                       bmi     LDC70
001A1Er 2               .endif
001A1Er 2  4C rr rr             jmp     OVERFLOW
001A21r 2               LDC70:
001A21r 2               .ifndef CONFIG_10A
001A21r 2                       lda     #$0B
001A21r 2               .endif
001A21r 2               L3C2C:
001A21r 2  0A                   asl     a
001A22r 2  0A                   asl     a
001A23r 2  18                   clc
001A24r 2  65 5B                adc     EXPON
001A26r 2  0A                   asl     a
001A27r 2  18                   clc
001A28r 2  A0 00                ldy     #$00
001A2Ar 2  71 77                adc     (TXTPTR),y
001A2Cr 2  38                   sec
001A2Dr 2  E9 30                sbc     #$30
001A2Fr 2               L3C3A:
001A2Fr 2  85 5B                sta     EXPON
001A31r 2  4C rr rr             jmp     FIN4
001A34r 2               
001A34r 2               ; ----------------------------------------------------------------------------
001A34r 2               .ifdef CONFIG_SMALL
001A34r 2               ; these values are /1000 of what the labels say
001A34r 2               CON_99999999_9:
001A34r 2                       .byte   $91,$43,$4F,$F8
001A34r 2               CON_999999999:
001A34r 2               		.byte   $94,$74,$23,$F7
001A34r 2               CON_BILLION:
001A34r 2                       .byte   $94,$74,$24,$00
001A34r 2               .else
001A34r 2               CON_99999999_9:
001A34r 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
001A38r 2  FD           
001A39r 2               CON_999999999:
001A39r 2               .ifndef CONFIG_10A
001A39r 2                       .byte   $9E,$6E,$6B,$27,$FE
001A39r 2               .else
001A39r 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FD
001A3Dr 2  FD           
001A3Er 2               .endif
001A3Er 2               CON_BILLION:
001A3Er 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
001A42r 2  00           
001A43r 2               .endif
001A43r 2               
001A43r 2               ; ----------------------------------------------------------------------------
001A43r 2               ; PRINT "IN <LINE #>"
001A43r 2               ; ----------------------------------------------------------------------------
001A43r 2               INPRT:
001A43r 2               .ifdef KBD
001A43r 2                       jsr     LFE0B
001A43r 2                       .byte	" in"
001A43r 2                       .byte	0
001A43r 2               .else
001A43r 2  A9 rr                lda     #<QT_IN
001A45r 2  A0 rr                ldy     #>QT_IN
001A47r 2  20 rr rr             jsr     GOSTROUT2
001A4Ar 2               .endif
001A4Ar 2  A5 37                lda     CURLIN+1
001A4Cr 2  A6 36                ldx     CURLIN
001A4Er 2               
001A4Er 2               ; ----------------------------------------------------------------------------
001A4Er 2               ; PRINT A,X AS DECIMAL INTEGER
001A4Er 2               ; ----------------------------------------------------------------------------
001A4Er 2               LINPRT:
001A4Er 2  85 5F                sta     FAC+1
001A50r 2  86 60                stx     FAC+2
001A52r 2  A2 90                ldx     #$90
001A54r 2  38                   sec
001A55r 2  20 rr rr             jsr     FLOAT2
001A58r 2  20 rr rr             jsr     FOUT
001A5Br 2               GOSTROUT2:
001A5Br 2  4C rr rr             jmp     STROUT
001A5Er 2               
001A5Er 2               ; ----------------------------------------------------------------------------
001A5Er 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
001A5Er 2               ; RETURN WITH (Y,A) POINTING AT STRING
001A5Er 2               ; ----------------------------------------------------------------------------
001A5Er 2               FOUT:
001A5Er 2  A0 01                ldy     #$01
001A60r 2               
001A60r 2               ; ----------------------------------------------------------------------------
001A60r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
001A60r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
001A60r 2               ; (THIS IS USED AS A FLAG)
001A60r 2               ; ----------------------------------------------------------------------------
001A60r 2               FOUT1:
001A60r 2  A9 20                lda     #$20
001A62r 2  24 63                bit     FACSIGN
001A64r 2  10 02                bpl     L3C73
001A66r 2  A9 2D                lda     #$2D
001A68r 2               L3C73:
001A68r 2  99 FF 00             sta     STACK2-1,y
001A6Br 2  85 63                sta     FACSIGN
001A6Dr 2  84 6E                sty     STRNG2
001A6Fr 2  C8                   iny
001A70r 2  A9 30                lda     #$30
001A72r 2  A6 5E                ldx     FAC
001A74r 2  D0 03                bne     L3C84
001A76r 2  4C rr rr             jmp     FOUT4
001A79r 2               L3C84:
001A79r 2  A9 00                lda     #$00
001A7Br 2  E0 80                cpx     #$80
001A7Dr 2  F0 02                beq     L3C8C
001A7Fr 2  B0 09                bcs     L3C95
001A81r 2               L3C8C:
001A81r 2  A9 rr                lda     #<CON_BILLION
001A83r 2  A0 rr                ldy     #>CON_BILLION
001A85r 2  20 rr rr             jsr     FMULT
001A88r 2               .ifdef CONFIG_SMALL
001A88r 2                       lda     #-6 ; exponent adjustment
001A88r 2               .else
001A88r 2  A9 F7                lda     #-9
001A8Ar 2               .endif
001A8Ar 2               L3C95:
001A8Ar 2  85 5A                sta     INDX
001A8Cr 2               ; ----------------------------------------------------------------------------
001A8Cr 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
001A8Cr 2               ; ----------------------------------------------------------------------------
001A8Cr 2               L3C97:
001A8Cr 2  A9 rr                lda     #<CON_999999999
001A8Er 2  A0 rr                ldy     #>CON_999999999
001A90r 2  20 rr rr             jsr     FCOMP
001A93r 2  F0 1E                beq     L3CBE
001A95r 2  10 12                bpl     L3CB4
001A97r 2               L3CA2:
001A97r 2  A9 rr                lda     #<CON_99999999_9
001A99r 2  A0 rr                ldy     #>CON_99999999_9
001A9Br 2  20 rr rr             jsr     FCOMP
001A9Er 2  F0 02                beq     L3CAD
001AA0r 2  10 0E                bpl     L3CBB
001AA2r 2               L3CAD:
001AA2r 2  20 rr rr             jsr     MUL10
001AA5r 2  C6 5A                dec     INDX
001AA7r 2  D0 EE                bne     L3CA2
001AA9r 2               L3CB4:
001AA9r 2  20 rr rr             jsr     DIV10
001AACr 2  E6 5A                inc     INDX
001AAEr 2  D0 DC                bne     L3C97
001AB0r 2               L3CBB:
001AB0r 2  20 rr rr             jsr     FADDH
001AB3r 2               L3CBE:
001AB3r 2  20 rr rr             jsr     QINT
001AB6r 2               ; ----------------------------------------------------------------------------
001AB6r 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001AB6r 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001AB6r 2               ;
001AB6r 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001AB6r 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001AB6r 2               ; ----------------------------------------------------------------------------
001AB6r 2  A2 01                ldx     #$01
001AB8r 2  A5 5A                lda     INDX
001ABAr 2  18                   clc
001ABBr 2  69 0A                adc     #3*BYTES_FP-5
001ABDr 2  30 09                bmi     L3CD3
001ABFr 2  C9 0B                cmp     #3*BYTES_FP-4
001AC1r 2  B0 06                bcs     L3CD4
001AC3r 2  69 FF                adc     #$FF
001AC5r 2  AA                   tax
001AC6r 2  A9 02                lda     #$02
001AC8r 2               L3CD3:
001AC8r 2  38                   sec
001AC9r 2               L3CD4:
001AC9r 2  E9 02                sbc     #$02
001ACBr 2  85 5B                sta     EXPON
001ACDr 2  86 5A                stx     INDX
001ACFr 2  8A                   txa
001AD0r 2  F0 02                beq     L3CDF
001AD2r 2  10 13                bpl     L3CF2
001AD4r 2               L3CDF:
001AD4r 2  A4 6E                ldy     STRNG2
001AD6r 2  A9 2E                lda     #$2E
001AD8r 2  C8                   iny
001AD9r 2  99 FF 00             sta     STACK2-1,y
001ADCr 2  8A                   txa
001ADDr 2  F0 06                beq     L3CF0
001ADFr 2  A9 30                lda     #$30
001AE1r 2  C8                   iny
001AE2r 2  99 FF 00             sta     STACK2-1,y
001AE5r 2               L3CF0:
001AE5r 2  84 6E                sty     STRNG2
001AE7r 2               ; ----------------------------------------------------------------------------
001AE7r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001AE7r 2               ; ----------------------------------------------------------------------------
001AE7r 2               L3CF2:
001AE7r 2  A0 00                ldy     #$00
001AE9r 2               LDD3A:
001AE9r 2  A2 80                ldx     #$80
001AEBr 2               L3CF6:
001AEBr 2  A5 62                lda     FAC_LAST
001AEDr 2  18                   clc
001AEEr 2               .ifndef CONFIG_SMALL
001AEEr 2  79 rr rr             adc     DECTBL+3,y
001AF1r 2  85 62                sta     FAC+4
001AF3r 2  A5 61                lda     FAC+3
001AF5r 2               .endif
001AF5r 2  79 rr rr             adc     DECTBL+2,y
001AF8r 2  85 61                sta     FAC+3
001AFAr 2  A5 60                lda     FAC+2
001AFCr 2  79 rr rr             adc     DECTBL+1,y
001AFFr 2  85 60                sta     FAC+2
001B01r 2  A5 5F                lda     FAC+1
001B03r 2  79 rr rr             adc     DECTBL,y
001B06r 2  85 5F                sta     FAC+1
001B08r 2  E8                   inx
001B09r 2  B0 04                bcs     L3D1A
001B0Br 2  10 DE                bpl     L3CF6
001B0Dr 2  30 02                bmi     L3D1C
001B0Fr 2               L3D1A:
001B0Fr 2  30 DA                bmi     L3CF6
001B11r 2               L3D1C:
001B11r 2  8A                   txa
001B12r 2  90 04                bcc     L3D23
001B14r 2  49 FF                eor     #$FF
001B16r 2  69 0A                adc     #$0A
001B18r 2               L3D23:
001B18r 2  69 2F                adc     #$2F
001B1Ar 2  C8                   iny
001B1Br 2  C8                   iny
001B1Cr 2  C8                   iny
001B1Dr 2               .ifndef CONFIG_SMALL
001B1Dr 2  C8                   iny
001B1Er 2               .endif
001B1Er 2  84 44                sty     VARPNT
001B20r 2  A4 6E                ldy     STRNG2
001B22r 2  C8                   iny
001B23r 2  AA                   tax
001B24r 2  29 7F                and     #$7F
001B26r 2  99 FF 00             sta     STACK2-1,y
001B29r 2  C6 5A                dec     INDX
001B2Br 2  D0 06                bne     L3D3E
001B2Dr 2  A9 2E                lda     #$2E
001B2Fr 2  C8                   iny
001B30r 2  99 FF 00             sta     STACK2-1,y
001B33r 2               L3D3E:
001B33r 2  84 6E                sty     STRNG2
001B35r 2  A4 44                ldy     VARPNT
001B37r 2  8A                   txa
001B38r 2  49 FF                eor     #$FF
001B3Ar 2  29 80                and     #$80
001B3Cr 2  AA                   tax
001B3Dr 2  C0 24                cpy     #DECTBL_END-DECTBL
001B3Fr 2               .ifdef CONFIG_CBM_ALL
001B3Fr 2  F0 04                beq     LDD96
001B41r 2  C0 3C                cpy     #$3C ; XXX
001B43r 2               .endif
001B43r 2  D0 A6                bne     L3CF6
001B45r 2               ; ----------------------------------------------------------------------------
001B45r 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
001B45r 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
001B45r 2               ; DECIMAL POINT.
001B45r 2               ; ----------------------------------------------------------------------------
001B45r 2               LDD96:
001B45r 2  A4 6E                ldy     STRNG2
001B47r 2               L3D4E:
001B47r 2  B9 FF 00             lda     STACK2-1,y
001B4Ar 2  88                   dey
001B4Br 2  C9 30                cmp     #$30
001B4Dr 2  F0 F8                beq     L3D4E
001B4Fr 2  C9 2E                cmp     #$2E
001B51r 2  F0 01                beq     L3D5B
001B53r 2  C8                   iny
001B54r 2               L3D5B:
001B54r 2  A9 2B                lda     #$2B
001B56r 2  A6 5B                ldx     EXPON
001B58r 2  F0 2E                beq     L3D8F
001B5Ar 2  10 08                bpl     L3D6B
001B5Cr 2  A9 00                lda     #$00
001B5Er 2  38                   sec
001B5Fr 2  E5 5B                sbc     EXPON
001B61r 2  AA                   tax
001B62r 2  A9 2D                lda     #$2D
001B64r 2               L3D6B:
001B64r 2  99 01 01             sta     STACK2+1,y
001B67r 2  A9 45                lda     #$45
001B69r 2  99 00 01             sta     STACK2,y
001B6Cr 2  8A                   txa
001B6Dr 2  A2 2F                ldx     #$2F
001B6Fr 2  38                   sec
001B70r 2               L3D77:
001B70r 2  E8                   inx
001B71r 2  E9 0A                sbc     #$0A
001B73r 2  B0 FB                bcs     L3D77
001B75r 2  69 3A                adc     #$3A
001B77r 2  99 03 01             sta     STACK2+3,y
001B7Ar 2  8A                   txa
001B7Br 2  99 02 01             sta     STACK2+2,y
001B7Er 2  A9 00                lda     #$00
001B80r 2  99 04 01             sta     STACK2+4,y
001B83r 2  F0 08                beq     L3D94
001B85r 2               FOUT4:
001B85r 2  99 FF 00             sta     STACK2-1,y
001B88r 2               L3D8F:
001B88r 2  A9 00                lda     #$00
001B8Ar 2  99 00 01             sta     STACK2,y
001B8Dr 2               L3D94:
001B8Dr 2  A9 00                lda     #<STACK2
001B8Fr 2  A0 01                ldy     #>STACK2
001B91r 2  60                   rts
001B92r 2               
001B92r 2               ; ----------------------------------------------------------------------------
001B92r 2               CON_HALF:
001B92r 2               .ifdef CONFIG_SMALL
001B92r 2                       .byte   $80,$00,$00,$00
001B92r 2               .else
001B92r 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
001B96r 2  00           
001B97r 2               .endif
001B97r 2               
001B97r 2               ; ----------------------------------------------------------------------------
001B97r 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001B97r 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001B97r 2               ; ----------------------------------------------------------------------------
001B97r 2               DECTBL:
001B97r 2               .ifdef CONFIG_SMALL
001B97r 2                       .byte   $FE,$79,$60 ; -100000
001B97r 2               		.byte	$00,$27,$10 ; 10000
001B97r 2               		.byte	$FF,$FC,$18 ; -1000
001B97r 2               		.byte	$00,$00,$64 ; 100
001B97r 2               		.byte	$FF,$FF,$F6 ; -10
001B97r 2               		.byte	$00,$00,$01 ; 1
001B97r 2               .else
001B97r 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
001B9Br 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
001B9Fr 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001BA3r 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001BA7r 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001BABr 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001BAFr 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001BB3r 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001BB7r 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001BBBr 2               .endif
001BBBr 2               DECTBL_END:
001BBBr 2               .ifdef CONFIG_CBM_ALL
001BBBr 2  FF DF 0A 80  		.byte	$FF,$DF,$0A,$80 ; TI$
001BBFr 2  00 03 4B C0  		.byte	$00,$03,$4B,$C0
001BC3r 2  FF FF 73 60  		.byte	$FF,$FF,$73,$60
001BC7r 2  00 00 0E 10  		.byte	$00,$00,$0E,$10
001BCBr 2  FF FF FD A8  		.byte	$FF,$FF,$FD,$A8
001BCFr 2  00 00 00 3C  		.byte	$00,$00,$00,$3C
001BD3r 2               .endif
001BD3r 2               .ifdef CONFIG_2
001BD3r 2               C_ZERO = CON_HALF + 2
001BD3r 2               .endif
001BD3r 2               
001BD3r 2               ; ----------------------------------------------------------------------------
001BD3r 2               ; "SQR" FUNCTION
001BD3r 2               ; ----------------------------------------------------------------------------
001BD3r 2               SQR:
001BD3r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001BD6r 2  A9 rr                lda     #<CON_HALF
001BD8r 2  A0 rr                ldy     #>CON_HALF
001BDAr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001BDDr 2               
001BDDr 2               ; ----------------------------------------------------------------------------
001BDDr 2               ; EXPONENTIATION OPERATION
001BDDr 2               ;
001BDDr 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001BDDr 2               ; ----------------------------------------------------------------------------
001BDDr 2               FPWRT:
001BDDr 2  F0 70                beq     EXP
001BDFr 2  A5 66                lda     ARG
001BE1r 2  D0 03                bne     L3DD5
001BE3r 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001BE6r 2               L3DD5:
001BE6r 2  A2 4B                ldx     #TEMP3
001BE8r 2  A0 00                ldy     #$00
001BEAr 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001BEDr 2  A5 6B                lda     ARGSIGN
001BEFr 2  10 0F                bpl     L3DEF
001BF1r 2  20 rr rr             jsr     INT
001BF4r 2  A9 4B                lda     #TEMP3
001BF6r 2  A0 00                ldy     #$00
001BF8r 2  20 rr rr             jsr     FCOMP
001BFBr 2  D0 03                bne     L3DEF
001BFDr 2  98                   tya
001BFEr 2  A4 03                ldy     CHARAC
001C00r 2               L3DEF:
001C00r 2  20 rr rr             jsr     MFA
001C03r 2  98                   tya
001C04r 2  48                   pha
001C05r 2  20 rr rr             jsr     LOG
001C08r 2  A9 4B                lda     #TEMP3
001C0Ar 2  A0 00                ldy     #$00
001C0Cr 2  20 rr rr             jsr     FMULT
001C0Fr 2  20 rr rr             jsr     EXP
001C12r 2  68                   pla
001C13r 2  4A                   lsr     a
001C14r 2  90 0A                bcc     L3E0F
001C16r 2               
001C16r 2               ; ----------------------------------------------------------------------------
001C16r 2               ; NEGATE VALUE IN FAC
001C16r 2               ; ----------------------------------------------------------------------------
001C16r 2               NEGOP:
001C16r 2  A5 5E                lda     FAC
001C18r 2  F0 06                beq     L3E0F
001C1Ar 2  A5 63                lda     FACSIGN
001C1Cr 2  49 FF                eor     #$FF
001C1Er 2  85 63                sta     FACSIGN
001C20r 2               L3E0F:
001C20r 2  60                   rts
001C21r 2               
001C21r 2               ; ----------------------------------------------------------------------------
001C21r 2               .ifdef CONFIG_SMALL
001C21r 2               CON_LOG_E:
001C21r 2                       .byte   $81,$38,$AA,$3B
001C21r 2               POLY_EXP:
001C21r 2               		.byte	$06
001C21r 2               		.byte	$74,$63,$90,$8C
001C21r 2               		.byte	$77,$23,$0C,$AB
001C21r 2               		.byte	$7A,$1E,$94,$00
001C21r 2               		.byte	$7C,$63,$42,$80
001C21r 2               		.byte	$7E,$75,$FE,$D0
001C21r 2               		.byte	$80,$31,$72,$15
001C21r 2               		.byte	$81,$00,$00,$00
001C21r 2               .else
001C21r 2               CON_LOG_E:
001C21r 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001C25r 2  29           
001C26r 2               POLY_EXP:
001C26r 2  07                   .byte   $07
001C27r 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001C2Br 2  56           
001C2Cr 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001C30r 2  1B           
001C31r 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001C35r 2  85           
001C36r 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001C3Ar 2  2A           
001C3Br 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001C3Fr 2  0A           
001C40r 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001C44r 2  C6           
001C45r 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001C49r 2  10           
001C4Ar 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001C4Er 2  00           
001C4Fr 2               .endif
001C4Fr 2               
001C4Fr 2               ; ----------------------------------------------------------------------------
001C4Fr 2               ; "EXP" FUNCTION
001C4Fr 2               ;
001C4Fr 2               ; FAC = E ^ FAC
001C4Fr 2               ; ----------------------------------------------------------------------------
001C4Fr 2               EXP:
001C4Fr 2  A9 rr                lda     #<CON_LOG_E
001C51r 2  A0 rr                ldy     #>CON_LOG_E
001C53r 2  20 rr rr             jsr     FMULT
001C56r 2  A5 6D                lda     FACEXTENSION
001C58r 2  69 50                adc     #$50
001C5Ar 2  90 03                bcc     L3E4E
001C5Cr 2  20 rr rr             jsr     INCREMENT_MANTISSA
001C5Fr 2               L3E4E:
001C5Fr 2  85 53                sta     ARGEXTENSION
001C61r 2  20 rr rr             jsr     MAF
001C64r 2  A5 5E                lda     FAC
001C66r 2  C9 88                cmp     #$88
001C68r 2  90 03                bcc     L3E5C
001C6Ar 2               L3E59:
001C6Ar 2  20 rr rr             jsr     OUTOFRNG
001C6Dr 2               L3E5C:
001C6Dr 2  20 rr rr             jsr     INT
001C70r 2  A5 03                lda     CHARAC
001C72r 2  18                   clc
001C73r 2  69 81                adc     #$81
001C75r 2  F0 F3                beq     L3E59
001C77r 2  38                   sec
001C78r 2  E9 01                sbc     #$01
001C7Ar 2  48                   pha
001C7Br 2  A2 05                ldx     #BYTES_FP
001C7Dr 2               L3E6C:
001C7Dr 2  B5 66                lda     ARG,x
001C7Fr 2  B4 5E                ldy     FAC,x
001C81r 2  95 5E                sta     FAC,x
001C83r 2  94 66                sty     ARG,x
001C85r 2  CA                   dex
001C86r 2  10 F5                bpl     L3E6C
001C88r 2  A5 53                lda     ARGEXTENSION
001C8Ar 2  85 6D                sta     FACEXTENSION
001C8Cr 2  20 rr rr             jsr     FSUBT
001C8Fr 2  20 rr rr             jsr     NEGOP
001C92r 2  A9 rr                lda     #<POLY_EXP
001C94r 2  A0 rr                ldy     #>POLY_EXP
001C96r 2  20 rr rr             jsr     POLYNOMIAL
001C99r 2  A9 00                lda     #$00
001C9Br 2  85 6C                sta     SGNCPR
001C9Dr 2  68                   pla
001C9Er 2  20 rr rr             jsr     ADD_EXPONENTS1
001CA1r 2  60                   rts
001CA2r 2               
001CA2r 2               ; ----------------------------------------------------------------------------
001CA2r 2               ; ODD POLYNOMIAL SUBROUTINE
001CA2r 2               ;
001CA2r 2               ; F(X) = X * P(X^2)
001CA2r 2               ;
001CA2r 2               ; WHERE:  X IS VALUE IN FAC
001CA2r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001CA2r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001CA2r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001CA2r 2               ;
001CA2r 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001CA2r 2               ; ----------------------------------------------------------------------------
001CA2r 2               POLYNOMIAL_ODD:
001CA2r 2  85 6E                sta     STRNG2
001CA4r 2  84 6F                sty     STRNG2+1
001CA6r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001CA9r 2  A9 54                lda     #TEMP1X
001CABr 2  20 rr rr             jsr     FMULT
001CAEr 2  20 rr rr             jsr     SERMAIN
001CB1r 2  A9 54                lda     #TEMP1X
001CB3r 2  A0 00                ldy     #$00
001CB5r 2  4C rr rr             jmp     FMULT
001CB8r 2               
001CB8r 2               ; ----------------------------------------------------------------------------
001CB8r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001CB8r 2               ;
001CB8r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001CB8r 2               ;
001CB8r 2               ; WHERE:  X IS VALUE IN FAC
001CB8r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001CB8r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001CB8r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001CB8r 2               ; ----------------------------------------------------------------------------
001CB8r 2               POLYNOMIAL:
001CB8r 2  85 6E                sta     STRNG2
001CBAr 2  84 6F                sty     STRNG2+1
001CBCr 2               SERMAIN:
001CBCr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001CBFr 2  B1 6E                lda     (STRNG2),y
001CC1r 2  85 64                sta     SERLEN
001CC3r 2  A4 6E                ldy     STRNG2
001CC5r 2  C8                   iny
001CC6r 2  98                   tya
001CC7r 2  D0 02                bne     L3EBA
001CC9r 2  E6 6F                inc     STRNG2+1
001CCBr 2               L3EBA:
001CCBr 2  85 6E                sta     STRNG2
001CCDr 2  A4 6F                ldy     STRNG2+1
001CCFr 2               L3EBE:
001CCFr 2  20 rr rr             jsr     FMULT
001CD2r 2  A5 6E                lda     STRNG2
001CD4r 2  A4 6F                ldy     STRNG2+1
001CD6r 2  18                   clc
001CD7r 2  69 05                adc     #BYTES_FP
001CD9r 2  90 01                bcc     L3ECB
001CDBr 2  C8                   iny
001CDCr 2               L3ECB:
001CDCr 2  85 6E                sta     STRNG2
001CDEr 2  84 6F                sty     STRNG2+1
001CE0r 2  20 rr rr             jsr     FADD
001CE3r 2  A9 59                lda     #TEMP2
001CE5r 2  A0 00                ldy     #$00
001CE7r 2  C6 64                dec     SERLEN
001CE9r 2  D0 E4                bne     L3EBE
001CEBr 2               RTS19:
001CEBr 2  60                   rts
001CECr 2               
001CECr 1               .include "chrget.s"
001CECr 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 77                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 78                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001CECr 2               
001CECr 2               ; ----------------------------------------------------------------------------
001CECr 2               ; "RND" FUNCTION
001CECr 2               ; ----------------------------------------------------------------------------
001CECr 2               
001CECr 2               .ifdef KBD
001CECr 2               RND:
001CECr 2                       ldx     #$10
001CECr 2                       jsr     SIGN
001CECr 2                       beq     LFC26
001CECr 2                       bmi     LFC10
001CECr 2                       lda     RNDSEED
001CECr 2                       ldy     RNDSEED+1
001CECr 2               LFBFA:
001CECr 2                       sta     FAC+2
001CECr 2                       sty     FAC+1
001CECr 2               LFBFE:
001CECr 2                       asl     a
001CECr 2                       asl     a
001CECr 2                       eor     FAC+2
001CECr 2                       asl     a
001CECr 2                       eor     FAC+1
001CECr 2                       asl     a
001CECr 2                       asl     a
001CECr 2                       asl     a
001CECr 2                       asl     a
001CECr 2                       eor     FAC+1
001CECr 2                       asl     a
001CECr 2                       rol     FAC+2
001CECr 2                       rol     FAC+1
001CECr 2               LFC10:
001CECr 2                       lda     FAC+2
001CECr 2                       dex
001CECr 2                       bne     LFBFE
001CECr 2                       sta     RNDSEED
001CECr 2                       sta     FAC+3
001CECr 2                       lda     FAC+1
001CECr 2                       sta     RNDSEED+1
001CECr 2                       lda     #$80
001CECr 2                       sta     FAC
001CECr 2                       stx     FACSIGN
001CECr 2                       jmp     NORMALIZE_FAC2
001CECr 2               LFC26:
001CECr 2                       ldy     $03CA
001CECr 2                       lda     $03C7
001CECr 2                       ora     #$01
001CECr 2               GOMOVMF:
001CECr 2                       bne     LFBFA
001CECr 2                       .byte   $F0
001CECr 2               .else
001CECr 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001CECr 2               ; (non CONFIG_SMALL)
001CECr 2               CONRND1:
001CECr 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001CF0r 2               CONRND2:
001CF0r 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001CF4r 2               RND:
001CF4r 2  20 rr rr             jsr     SIGN
001CF7r 2               .ifdef CONFIG_CBM_ALL
001CF7r 2  30 2E                bmi     L3F01
001CF9r 2  D0 17                bne     LDF63
001CFBr 2  AD 44 E8             lda     ENTROPY
001CFEr 2  85 5F                sta     FAC+1
001D00r 2  AD 48 E8             lda     ENTROPY+4
001D03r 2  85 60                sta     FAC+2
001D05r 2  AD 45 E8             lda     ENTROPY+1
001D08r 2  85 61                sta     FAC+3
001D0Ar 2  AD 49 E8             lda     ENTROPY+5
001D0Dr 2  85 62                sta     FAC+4
001D0Fr 2  4C rr rr             jmp     LDF88
001D12r 2               LDF63:
001D12r 2               .else
001D12r 2                       tax
001D12r 2                       bmi     L3F01
001D12r 2               .endif
001D12r 2  A9 88                lda     #<RNDSEED
001D14r 2  A0 00                ldy     #>RNDSEED
001D16r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001D19r 2               .ifndef CONFIG_CBM_ALL
001D19r 2                       txa
001D19r 2                       beq     RTS19
001D19r 2               .endif
001D19r 2  A9 rr                lda     #<CONRND1
001D1Br 2  A0 rr                ldy     #>CONRND1
001D1Dr 2  20 rr rr             jsr     FMULT
001D20r 2  A9 rr                lda     #<CONRND2
001D22r 2  A0 rr                ldy     #>CONRND2
001D24r 2  20 rr rr             jsr     FADD
001D27r 2               L3F01:
001D27r 2  A6 62                ldx     FAC_LAST
001D29r 2  A5 5F                lda     FAC+1
001D2Br 2  85 62                sta     FAC_LAST
001D2Dr 2  86 5F                stx     FAC+1
001D2Fr 2               .ifdef CONFIG_CBM_ALL
001D2Fr 2  A6 60                ldx     FAC+2
001D31r 2  A5 61                lda     FAC+3
001D33r 2  85 60                sta     FAC+2
001D35r 2  86 61                stx     FAC+3
001D37r 2               LDF88:
001D37r 2               .endif
001D37r 2  A9 00                lda     #$00
001D39r 2  85 63                sta     FACSIGN
001D3Br 2  A5 5E                lda     FAC
001D3Dr 2  85 6D                sta     FACEXTENSION
001D3Fr 2  A9 80                lda     #$80
001D41r 2  85 5E                sta     FAC
001D43r 2  20 rr rr             jsr     NORMALIZE_FAC2
001D46r 2  A2 88                ldx     #<RNDSEED
001D48r 2  A0 00                ldy     #>RNDSEED
001D4Ar 2               GOMOVMF:
001D4Ar 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001D4Dr 2               .endif
001D4Dr 2               
001D4Dr 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$58
00001Cr 2  58           
00001Dr 2                   .else
00001Dr 2                       .byte   $80,$4F,$C7,$52,$59
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001D4Dr 2               
001D4Dr 2               .ifndef SYM1
001D4Dr 2               SIN_COS_TAN_ATN:
001D4Dr 2               ; ----------------------------------------------------------------------------
001D4Dr 2               ; "COS" FUNCTION
001D4Dr 2               ; ----------------------------------------------------------------------------
001D4Dr 2               COS:
001D4Dr 2  A9 rr                lda     #<CON_PI_HALF
001D4Fr 2  A0 rr                ldy     #>CON_PI_HALF
001D51r 2  20 rr rr             jsr     FADD
001D54r 2               
001D54r 2               ; ----------------------------------------------------------------------------
001D54r 2               ; "SIN" FUNCTION
001D54r 2               ; ----------------------------------------------------------------------------
001D54r 2               SIN:
001D54r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001D57r 2  A9 rr                lda     #<CON_PI_DOUB
001D59r 2  A0 rr                ldy     #>CON_PI_DOUB
001D5Br 2  A6 6B                ldx     ARGSIGN
001D5Dr 2  20 rr rr             jsr     DIV
001D60r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001D63r 2  20 rr rr             jsr     INT
001D66r 2  A9 00                lda     #$00
001D68r 2  85 6C                sta     STRNG1
001D6Ar 2  20 rr rr             jsr     FSUBT
001D6Dr 2               ; ----------------------------------------------------------------------------
001D6Dr 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001D6Dr 2               ;
001D6Dr 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001D6Dr 2               ;
001D6Dr 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001D6Dr 2               ; ----------------------------------------------------------------------------
001D6Dr 2  A9 rr                lda     #<QUARTER
001D6Fr 2  A0 rr                ldy     #>QUARTER
001D71r 2  20 rr rr             jsr     FSUB
001D74r 2  A5 63                lda     FACSIGN
001D76r 2  48                   pha
001D77r 2  10 0D                bpl     SIN1
001D79r 2  20 rr rr             jsr     FADDH
001D7Cr 2  A5 63                lda     FACSIGN
001D7Er 2  30 09                bmi     L3F5B
001D80r 2  A5 0C                lda     CPRMASK
001D82r 2  49 FF                eor     #$FF
001D84r 2  85 0C                sta     CPRMASK
001D86r 2               ; ----------------------------------------------------------------------------
001D86r 2               ; IF FALL THRU, RANGE IS 0...1/2
001D86r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001D86r 2               ; ----------------------------------------------------------------------------
001D86r 2               SIN1:
001D86r 2  20 rr rr             jsr     NEGOP
001D89r 2               ; ----------------------------------------------------------------------------
001D89r 2               ; IF FALL THRU, RANGE IS -1/2...0
001D89r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001D89r 2               ; ----------------------------------------------------------------------------
001D89r 2               L3F5B:
001D89r 2  A9 rr                lda     #<QUARTER
001D8Br 2  A0 rr                ldy     #>QUARTER
001D8Dr 2  20 rr rr             jsr     FADD
001D90r 2  68                   pla
001D91r 2  10 03                bpl     L3F68
001D93r 2  20 rr rr             jsr     NEGOP
001D96r 2               L3F68:
001D96r 2  A9 rr                lda     #<POLY_SIN
001D98r 2  A0 rr                ldy     #>POLY_SIN
001D9Ar 2  4C rr rr             jmp     POLYNOMIAL_ODD
001D9Dr 2               
001D9Dr 2               ; ----------------------------------------------------------------------------
001D9Dr 2               ; "TAN" FUNCTION
001D9Dr 2               ;
001D9Dr 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001D9Dr 2               ; ----------------------------------------------------------------------------
001D9Dr 2               TAN:
001D9Dr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001DA0r 2  A9 00                lda     #$00
001DA2r 2  85 0C                sta     CPRMASK
001DA4r 2  20 rr rr             jsr     SIN
001DA7r 2  A2 4B                ldx     #TEMP3
001DA9r 2  A0 00                ldy     #$00
001DABr 2  20 rr rr             jsr     GOMOVMF
001DAEr 2  A9 54                lda     #TEMP1+(5-BYTES_FP)
001DB0r 2  A0 00                ldy     #$00
001DB2r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001DB5r 2  A9 00                lda     #$00
001DB7r 2  85 63                sta     FACSIGN
001DB9r 2  A5 0C                lda     CPRMASK
001DBBr 2  20 rr rr             jsr     TAN1
001DBEr 2  A9 4B                lda     #TEMP3
001DC0r 2  A0 00                ldy     #$00
001DC2r 2  4C rr rr             jmp     FDIV
001DC5r 2               TAN1:
001DC5r 2  48                   pha
001DC6r 2  4C rr rr             jmp     SIN1
001DC9r 2               
001DC9r 2               ; ----------------------------------------------------------------------------
001DC9r 2               .ifdef CONFIG_SMALL
001DC9r 2               CON_PI_HALF:
001DC9r 2                       .byte   $81,$49,$0F,$DB
001DC9r 2               CON_PI_DOUB:
001DC9r 2                       .byte   $83,$49,$0F,$DB
001DC9r 2               QUARTER:
001DC9r 2                       .byte   $7F,$00,$00,$00
001DC9r 2               POLY_SIN:
001DC9r 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001DC9r 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001DC9r 2                       .byte   $E1,$83,$49,$0F,$DB
001DC9r 2               .else
001DC9r 2               CON_PI_HALF:
001DC9r 2  81 49 0F DA          .byte   $81,$49,$0F,$DA,$A2
001DCDr 2  A2           
001DCEr 2               CON_PI_DOUB:
001DCEr 2  83 49 0F DA          .byte   $83,$49,$0F,$DA,$A2
001DD2r 2  A2           
001DD3r 2               QUARTER:
001DD3r 2  7F 00 00 00          .byte   $7F,$00,$00,$00,$00
001DD7r 2  00           
001DD8r 2               POLY_SIN:
001DD8r 2  05 84 E6 1A          .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001DDCr 2  2D 1B 86 28  
001DE0r 2  07 FB F8 87          .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001DE4r 2  99 68 89 01  
001DE8r 2  87 23 35 DF          .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001DECr 2  E1 86 A5 5D  
001DF0r 2  E7 28 83 49          .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001DF4r 2  0F DA A2     
001DF7r 2                 .ifndef CONFIG_11
001DF7r 2               ; no easter egg text before BASIC 1.1
001DF7r 2                 .elseif !.def(CONFIG_2A)
001DF7r 2               ; ASCII encoded easter egg
001DF7r 2               MICROSOFT:
001DF7r 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001DF7r 2                       .byte   $CE,$CA
001DF7r 2                 .else
001DF7r 2               ; PET encoded easter egg text since CBM2
001DF7r 2               MICROSOFT:
001DF7r 2  A1 54 46 8F          .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001DFBr 2  13 8F 52 43  
001DFFr 2  89 CD                .byte   $89,$CD
001E01r 2                 .endif
001E01r 2               .endif
001E01r 2               
001E01r 2               .ifndef AIM65
001E01r 2               ; ----------------------------------------------------------------------------
001E01r 2               ; "ATN" FUNCTION
001E01r 2               ; ----------------------------------------------------------------------------
001E01r 2               ATN:
001E01r 2  A5 63                lda     FACSIGN
001E03r 2  48                   pha
001E04r 2  10 03                bpl     L3FDB
001E06r 2  20 rr rr             jsr     NEGOP
001E09r 2               L3FDB:
001E09r 2  A5 5E                lda     FAC
001E0Br 2  48                   pha
001E0Cr 2  C9 81                cmp     #$81
001E0Er 2  90 07                bcc     L3FE9
001E10r 2  A9 rr                lda     #<CON_ONE
001E12r 2  A0 rr                ldy     #>CON_ONE
001E14r 2  20 rr rr             jsr     FDIV
001E17r 2               ; ----------------------------------------------------------------------------
001E17r 2               ; 0 <= X <= 1
001E17r 2               ; 0 <= ATN(X) <= PI/8
001E17r 2               ; ----------------------------------------------------------------------------
001E17r 2               L3FE9:
001E17r 2  A9 rr                lda     #<POLY_ATN
001E19r 2  A0 rr                ldy     #>POLY_ATN
001E1Br 2  20 rr rr             jsr     POLYNOMIAL_ODD
001E1Er 2  68                   pla
001E1Fr 2  C9 81                cmp     #$81
001E21r 2  90 07                bcc     L3FFC
001E23r 2  A9 rr                lda     #<CON_PI_HALF
001E25r 2  A0 rr                ldy     #>CON_PI_HALF
001E27r 2  20 rr rr             jsr     FSUB
001E2Ar 2               L3FFC:
001E2Ar 2  68                   pla
001E2Br 2  10 03                bpl     L4002
001E2Dr 2  4C rr rr             jmp     NEGOP
001E30r 2               L4002:
001E30r 2  60                   rts
001E31r 2               
001E31r 2               ; ----------------------------------------------------------------------------
001E31r 2               POLY_ATN:
001E31r 2               .ifdef CONFIG_SMALL
001E31r 2                       .byte   $08
001E31r 2               		.byte	$78,$3A,$C5,$37
001E31r 2               		.byte	$7B,$83,$A2,$5C
001E31r 2               		.byte	$7C,$2E,$DD,$4D
001E31r 2               		.byte	$7D,$99,$B0,$1E
001E31r 2               		.byte	$7D,$59,$ED,$24
001E31r 2               		.byte	$7E,$91,$72,$00
001E31r 2               		.byte	$7E,$4C,$B9,$73
001E31r 2               		.byte	$7F,$AA,$AA,$53
001E31r 2               		.byte	$81,$00,$00,$00
001E31r 2               .else
001E31r 2  0B                   .byte   $0B
001E32r 2  76 B3 83 BD  		.byte	$76,$B3,$83,$BD,$D3
001E36r 2  D3           
001E37r 2  79 1E F4 A6  		.byte	$79,$1E,$F4,$A6,$F5
001E3Br 2  F5           
001E3Cr 2  7B 83 FC B0  		.byte	$7B,$83,$FC,$B0,$10
001E40r 2  10           
001E41r 2  7C 0C 1F 67          .byte   $7C,$0C,$1F,$67,$CA
001E45r 2  CA           
001E46r 2  7C DE 53 CB  		.byte	$7C,$DE,$53,$CB,$C1
001E4Ar 2  C1           
001E4Br 2  7D 14 64 70  		.byte	$7D,$14,$64,$70,$4C
001E4Fr 2  4C           
001E50r 2  7D B7 EA 51  		.byte	$7D,$B7,$EA,$51,$7A
001E54r 2  7A           
001E55r 2  7D 63 30 88  		.byte	$7D,$63,$30,$88,$7E
001E59r 2  7E           
001E5Ar 2  7E 92 44 99  		.byte	$7E,$92,$44,$99,$3A
001E5Er 2  3A           
001E5Fr 2  7E 4C CC 91  		.byte	$7E,$4C,$CC,$91,$C7
001E63r 2  C7           
001E64r 2  7F AA AA AA  		.byte	$7F,$AA,$AA,$AA,$13
001E68r 2  13           
001E69r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001E6Dr 2  00           
001E6Er 2               .endif
001E6Er 2               
001E6Er 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001E6Er 2               		.byte	$00 ; XXX
001E6Er 2               .endif
001E6Er 2               .endif
001E6Er 2               .endif
001E6Er 2               
001E6Er 1               .include "init.s"
001E6Er 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2                   .ifndef AIM65
000000r 2                     .ifndef SYM1
000000r 2                       lda     #<QT_WRITTEN_BY
000000r 2                       ldy     #>QT_WRITTEN_BY
000000r 2                       jsr     STROUT
000000r 2                     .endif
000000r 2                   .endif
000000r 2                 .endif
000000r 2               .endif
000000r 2               COLD_START:
000000r 2               .ifdef SYM1
000000r 2                       jsr     ACCESS
000000r 2               .endif
000000r 2               .ifdef KBD
000000r 2                       lda     #<LFD81
000000r 2                       sta     $03A0
000000r 2                       lda     #>LFD81
000000r 2                       sta     $03A1
000000r 2                       lda     #$20
000000r 2                       sta     $0480
000000r 2                       lda     $0352
000000r 2                       sta     $04
000000r 2                       lda     $0353
000000r 2                       sta     $05
000000r 2               .else
000000r 2                 .ifndef CBM2
000000r 2                       ldx     #$FF
000000r 2                       stx     CURLIN+1
000000r 2                 .endif
000000r 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
000000r 2  A2 FB                ldx     #$FB
000002r 2                 .elseif .def(AIM65)
000002r 2                       ldx     #$FE
000002r 2                 .endif
000002r 2  9A                   txs
000003r 2                 .ifndef CONFIG_CBM_ALL
000003r 2                       lda     #<COLD_START
000003r 2                       ldy     #>COLD_START
000003r 2                       sta     GORESTART+1
000003r 2                       sty     GORESTART+2
000003r 2                   .ifndef AIM65
000003r 2                       sta     GOSTROUT+1
000003r 2                       sty     GOSTROUT+2
000003r 2                       lda     #<AYINT
000003r 2                       ldy     #>AYINT
000003r 2                       sta     GOAYINT
000003r 2                       sty     GOAYINT+1
000003r 2                       lda     #<GIVAYF
000003r 2                       ldy     #>GIVAYF
000003r 2                       sta     GOGIVEAYF
000003r 2                       sty     GOGIVEAYF+1
000003r 2                   .endif
000003r 2                 .endif
000003r 2  A9 4C                lda     #$4C
000005r 2                 .ifdef CONFIG_CBM_ALL
000005r 2  85 51                sta     JMPADRS
000007r 2                 .endif
000007r 2  85 00                sta     GORESTART
000009r 2                 .ifdef AIM65
000009r 2                       sta     JMPADRS
000009r 2                       sta     ATN
000009r 2                       sta     GOSTROUT
000009r 2                 .else
000009r 2                 .ifndef CONFIG_CBM_ALL
000009r 2                       sta     GOSTROUT
000009r 2                       sta     JMPADRS
000009r 2                 .endif
000009r 2                 .ifdef SYM1
000009r 2                       sta     USR1
000009r 2                       sta     USR3
000009r 2                       sta     USR2
000009r 2                 .endif
000009r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000009r 2                       sta     USR
000009r 2                 .endif
000009r 2                 .endif
000009r 2               
000009r 2                 .ifndef CONFIG_RAM
000009r 2                   .ifdef APPLE
000009r 2                         lda     #<USR_FUNC
000009r 2                         ldy     #>USR_FUNC
000009r 2                   .else
000009r 2  A9 rr                  lda     #<IQERR
00000Br 2  A0 rr                  ldy     #>IQERR
00000Dr 2                   .endif
00000Dr 2                   .ifdef AIM65
00000Dr 2                         sta     ATN+1
00000Dr 2                         sty     ATN+2
00000Dr 2                         sta     GOSTROUT+1
00000Dr 2                         sty     GOSTROUT+2
00000Dr 2                   .else
00000Dr 2  85 01                  sta     USR+1
00000Fr 2  84 02                  sty     USR+2
000011r 2                     .ifdef SYM1
000011r 2                         sta     USR1+1
000011r 2                         sty     USR1+2
000011r 2                         lda     #<DUMPT
000011r 2                         ldy     #>DUMPT
000011r 2                         sta     USR2+1
000011r 2                         sty     USR2+2
000011r 2                         lda     #<L8C78
000011r 2                         ldy     #>L8C78
000011r 2                         sta     USR3+1
000011r 2                         sty     USR3+2
000011r 2                     .endif
000011r 2                   .endif
000011r 2                 .endif
000011r 2                 .ifndef CBM1
000011r 2  A9 28                lda     #WIDTH
000013r 2  85 0F                sta     Z17
000015r 2  A9 1E                lda     #WIDTH2
000017r 2  85 10                sta     Z18
000019r 2                 .endif
000019r 2                 .ifdef EATER
000019r 2                       jsr     LCDINIT
000019r 2                 .endif
000019r 2               .endif
000019r 2               
000019r 2               ; All non-CONFIG_SMALL versions of BASIC have
000019r 2               ; the same bug here: While the number of bytes
000019r 2               ; to be copied is correct for CONFIG_SMALL,
000019r 2               ; it is one byte short on non-CONFIG_SMALL:
000019r 2               ; It seems the "ldx" value below has been
000019r 2               ; hardcoded. So on these configurations,
000019r 2               ; the last byte of GENERIC_RNDSEED, which
000019r 2               ; is 5 bytes instead of 4, does not get copied -
000019r 2               ; which is nothing major, because it is just
000019r 2               ; the least significant 8 bits of the mantissa
000019r 2               ; of the random number seed.
000019r 2               ; KBD added three bytes to CHRGET and removed
000019r 2               ; the random number seed, but only adjusted
000019r 2               ; the number of bytes by adding 3 - this
000019r 2               ; copies four bytes too many, which is no
000019r 2               ; problem.
000019r 2               .ifdef CONFIG_SMALL
000019r 2                 .ifdef KBD
000019r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000019r 2                 .else
000019r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000019r 2                 .endif
000019r 2               .else
000019r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
00001Br 2               .endif
00001Br 2               L4098:
00001Br 2  BD rr rr             lda     GENERIC_CHRGET-1,x
00001Er 2  95 6F                sta     CHRGET-1,x
000020r 2  CA                   dex
000021r 2  D0 F8                bne     L4098
000023r 2               .ifdef CONFIG_2
000023r 2  A9 03                lda     #$03
000025r 2  85 50                sta     DSCLEN
000027r 2               .endif
000027r 2               .ifndef KBD
000027r 2  8A                   txa
000028r 2  85 65                sta     SHIFTSIGNEXT
00002Ar 2                 .ifdef CONFIG_CBM_ALL
00002Ar 2  85 0E                sta     CURDVC
00002Cr 2                 .endif
00002Cr 2  85 15                sta     LASTPT+1
00002Er 2                 .ifndef AIM65
00002Er 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
00002Er 2                       sta     Z15
00002Er 2                 .endif
00002Er 2                 .endif
00002Er 2                 .ifndef CONFIG_11
00002Er 2                       sta     POSX
00002Er 2                 .endif
00002Er 2  48                   pha
00002Fr 2  85 0D                sta     Z14
000031r 2                 .ifndef CBM2
000031r 2                  .ifndef AIM65
000031r 2                  .ifndef SYM1
000031r 2                   .ifndef MICROTAN
000031r 2                       lda     #$03
000031r 2                       sta     DSCLEN
000031r 2                   .endif
000031r 2                  .endif
000031r 2                  .endif
000031r 2                   .ifndef CONFIG_11
000031r 2                       lda     #$2C
000031r 2                       sta     LINNUM+1
000031r 2                   .endif
000031r 2                       jsr     CRDO
000031r 2                 .endif
000031r 2                 .ifdef CBM2
000031r 2  E8                   inx
000032r 2  8E FD 01             stx     INPUTBUFFER-3
000035r 2  8E FC 01             stx     INPUTBUFFER-4
000038r 2                 .endif
000038r 2                 .ifdef APPLE
000038r 2                       lda     #$01
000038r 2                       sta     INPUTBUFFER-3
000038r 2                       sta     INPUTBUFFER-4
000038r 2                 .endif
000038r 2  A2 16                ldx     #TEMPST
00003Ar 2  86 13                stx     TEMPPT
00003Cr 2               .ifndef CONFIG_CBM_ALL
00003Cr 2                       lda     #<QT_MEMORY_SIZE
00003Cr 2                       ldy     #>QT_MEMORY_SIZE
00003Cr 2                       jsr     STROUT
00003Cr 2                 .ifdef APPLE
00003Cr 2                       jsr     INLINX
00003Cr 2                 .else
00003Cr 2                       jsr     NXIN
00003Cr 2                 .endif
00003Cr 2                       stx     TXTPTR
00003Cr 2                       sty     TXTPTR+1
00003Cr 2                       jsr     CHRGET
00003Cr 2                 .ifndef AIM65
00003Cr 2                   .ifndef SYM1
00003Cr 2                       cmp     #$41
00003Cr 2                       beq     PR_WRITTEN_BY
00003Cr 2                   .endif
00003Cr 2                 .endif
00003Cr 2                       tay
00003Cr 2                       bne     L40EE
00003Cr 2               .endif
00003Cr 2               .ifndef CBM2
00003Cr 2                       lda     #<RAMSTART2
00003Cr 2               .endif
00003Cr 2  A0 04                ldy     #>RAMSTART2
00003Er 2               .ifdef CONFIG_2
00003Er 2  85 28                sta     TXTTAB
000040r 2  84 29                sty     TXTTAB+1
000042r 2               .endif
000042r 2  85 11                sta     LINNUM
000044r 2  84 12                sty     LINNUM+1
000046r 2               .ifdef CBM2
000046r 2  A8           		tay
000047r 2               .else
000047r 2                       ldy     #$00
000047r 2               .endif
000047r 2               L40D7:
000047r 2  E6 11                inc     LINNUM
000049r 2  D0 04                bne     L40DD
00004Br 2  E6 12                inc     LINNUM+1
00004Dr 2               .ifdef CBM1
00004Dr 2               ; CBM: hard RAM top limit is $8000
00004Dr 2                       lda     LINNUM+1
00004Dr 2                       cmp     #$80
00004Dr 2                       beq     L40FA
00004Dr 2               .endif
00004Dr 2               .ifdef CBM2
00004Dr 2               ; optimized version of the CBM1 code
00004Dr 2  30 0F                bmi     L40FA
00004Fr 2               .endif
00004Fr 2               .if .def(AIM65)
00004Fr 2               ; AIM65: hard RAM top limit is $A000
00004Fr 2                       lda     LINNUM+1
00004Fr 2                       cmp     #$A0
00004Fr 2                       beq     L40FA
00004Fr 2               .endif
00004Fr 2               L40DD:
00004Fr 2               .ifdef CONFIG_2
00004Fr 2  A9 55                lda     #$55 ; 01010101 / 10101010
000051r 2               .else
000051r 2                       lda     #$92 ; 10010010 / 00100100
000051r 2               .endif
000051r 2  91 11                sta     (LINNUM),y
000053r 2  D1 11                cmp     (LINNUM),y
000055r 2  D0 07                bne     L40FA
000057r 2  0A                   asl     a
000058r 2  91 11                sta     (LINNUM),y
00005Ar 2  D1 11                cmp     (LINNUM),y
00005Cr 2               .ifdef CONFIG_CBM_ALL
00005Cr 2  F0 E9                beq     L40D7
00005Er 2               .else
00005Er 2                 .ifndef CONFIG_11
00005Er 2                       beq     L40D7; old: faster
00005Er 2                       bne     L40FA
00005Er 2                 .else
00005Er 2                       bne     L40FA; new: slower
00005Er 2                       beq     L40D7
00005Er 2                 .endif
00005Er 2               L40EE:
00005Er 2                       jsr     CHRGOT
00005Er 2                       jsr     LINGET
00005Er 2                       tay
00005Er 2                       beq     L40FA
00005Er 2                       jmp     SYNERR
00005Er 2               .endif
00005Er 2               L40FA:
00005Er 2  A5 11                lda     LINNUM
000060r 2  A4 12                ldy     LINNUM+1
000062r 2  85 34                sta     MEMSIZ
000064r 2  84 35                sty     MEMSIZ+1
000066r 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
000066r 2  85 30                sta     FRETOP
000068r 2  84 31                sty     FRETOP+1
00006Ar 2               .endif
00006Ar 2               L4106:
00006Ar 2               .ifndef CONFIG_CBM_ALL
00006Ar 2                 .ifdef APPLE
00006Ar 2                       lda     #$FF
00006Ar 2                       jmp     L2829
00006Ar 2                       .word	STROUT ; PATCH!
00006Ar 2                       jsr     NXIN
00006Ar 2                 .else
00006Ar 2                       lda     #<QT_TERMINAL_WIDTH
00006Ar 2                       ldy     #>QT_TERMINAL_WIDTH
00006Ar 2                       jsr     STROUT
00006Ar 2                       jsr     NXIN
00006Ar 2                 .endif
00006Ar 2                       stx     TXTPTR
00006Ar 2                       sty     TXTPTR+1
00006Ar 2                       jsr     CHRGET
00006Ar 2                       tay
00006Ar 2                       beq     L4136
00006Ar 2                       jsr     LINGET
00006Ar 2                       lda     LINNUM+1
00006Ar 2                       bne     L4106
00006Ar 2                       lda     LINNUM
00006Ar 2                       cmp     #$10
00006Ar 2                       bcc     L4106
00006Ar 2               L2829:
00006Ar 2                       sta     Z17
00006Ar 2               L4129:
00006Ar 2                 .ifdef AIM65
00006Ar 2                       sbc     #$0A
00006Ar 2                 .else
00006Ar 2                       sbc     #$0E
00006Ar 2                 .endif
00006Ar 2                       bcs     L4129
00006Ar 2                       eor     #$FF
00006Ar 2                 .ifdef AIM65
00006Ar 2                       sbc     #$08
00006Ar 2                 .else
00006Ar 2                       sbc     #$0C
00006Ar 2                 .endif
00006Ar 2                       clc
00006Ar 2                       adc     Z17
00006Ar 2                       sta     Z18
00006Ar 2               .endif
00006Ar 2               L4136:
00006Ar 2               .ifdef CONFIG_RAM
00006Ar 2                       lda     #<QT_WANT
00006Ar 2                       ldy     #>QT_WANT
00006Ar 2                       jsr     STROUT
00006Ar 2                       jsr     NXIN
00006Ar 2                       stx     TXTPTR
00006Ar 2                       sty     TXTPTR+1
00006Ar 2                       jsr     CHRGET
00006Ar 2                       ldx     #<RAMSTART1
00006Ar 2                       ldy     #>RAMSTART1
00006Ar 2                       cmp     #'Y'
00006Ar 2                       beq     L4183
00006Ar 2                       cmp     #'A'
00006Ar 2                       beq     L4157
00006Ar 2                       cmp     #'N'
00006Ar 2                       bne     L4136
00006Ar 2               L4157:
00006Ar 2                       ldx     #<IQERR
00006Ar 2                       ldy     #>IQERR
00006Ar 2                       stx     UNFNC_ATN
00006Ar 2                       sty     UNFNC_ATN+1
00006Ar 2                       ldx     #<ATN	; overwrite starting
00006Ar 2                       ldy     #>ATN	; with ATN
00006Ar 2                       cmp     #'A'
00006Ar 2                       beq     L4183
00006Ar 2                       ldx     #<IQERR
00006Ar 2                       ldy     #>IQERR
00006Ar 2                       stx     UNFNC_COS
00006Ar 2                       sty     UNFNC_COS+1
00006Ar 2                       stx     UNFNC_TAN
00006Ar 2                       sty     UNFNC_TAN+1
00006Ar 2                       stx     UNFNC_SIN
00006Ar 2                       sty     UNFNC_SIN+1
00006Ar 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
00006Ar 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
00006Ar 2               L4183:
00006Ar 2               .else
00006Ar 2  A2 00                ldx     #<RAMSTART2
00006Cr 2  A0 04                ldy     #>RAMSTART2
00006Er 2               .endif
00006Er 2  86 28                stx     TXTTAB
000070r 2  84 29                sty     TXTTAB+1
000072r 2  A0 00                ldy     #$00
000074r 2  98                   tya
000075r 2  91 28                sta     (TXTTAB),y
000077r 2  E6 28                inc     TXTTAB
000079r 2               .ifndef CBM2
000079r 2                       bne     L4192
000079r 2                       inc     TXTTAB+1
000079r 2               L4192:
000079r 2               .endif
000079r 2               .if CONFIG_SCRTCH_ORDER = 1
000079r 2                       jsr     SCRTCH
000079r 2               .endif
000079r 2  A5 28                lda     TXTTAB
00007Br 2  A4 29                ldy     TXTTAB+1
00007Dr 2  20 rr rr             jsr     REASON
000080r 2               .ifdef CBM2
000080r 2  A9 rr                lda     #<QT_BASIC
000082r 2  A0 rr                ldy     #>QT_BASIC
000084r 2  20 rr rr             jsr     STROUT
000087r 2               .else
000087r 2                       jsr     CRDO
000087r 2               .endif
000087r 2  A5 34                lda     MEMSIZ
000089r 2  38                   sec
00008Ar 2  E5 28                sbc     TXTTAB
00008Cr 2  AA                   tax
00008Dr 2  A5 35                lda     MEMSIZ+1
00008Fr 2  E5 29                sbc     TXTTAB+1
000091r 2  20 rr rr             jsr     LINPRT
000094r 2  A9 rr                lda     #<QT_BYTES_FREE
000096r 2  A0 rr                ldy     #>QT_BYTES_FREE
000098r 2  20 rr rr             jsr     STROUT
00009Br 2               .if CONFIG_SCRTCH_ORDER = 2
00009Br 2  20 rr rr             jsr     SCRTCH
00009Er 2               .endif
00009Er 2               .ifdef CONFIG_CBM_ALL
00009Er 2  4C rr rr             jmp     RESTART
0000A1r 2               .elseif .def(AIM65)
0000A1r 2                       lda     #<CRDO
0000A1r 2                       ldy     #>CRDO
0000A1r 2                       sta     GORESTART+1
0000A1r 2                       sty     GORESTART+2
0000A1r 2                       jmp     RESTART
0000A1r 2               .else
0000A1r 2                       lda     #<STROUT
0000A1r 2                       ldy     #>STROUT
0000A1r 2                       sta     GOSTROUT+1
0000A1r 2                       sty     GOSTROUT+2
0000A1r 2                 .if CONFIG_SCRTCH_ORDER = 3
0000A1r 2                        jsr     SCRTCH
0000A1r 2                 .endif
0000A1r 2                       lda     #<RESTART
0000A1r 2                       ldy     #>RESTART
0000A1r 2                       sta     GORESTART+1
0000A1r 2                       sty     GORESTART+2
0000A1r 2                       jmp     (GORESTART+1)
0000A1r 2               .endif
0000A1r 2               
0000A1r 2                 .if .def(CONFIG_RAM) || .def(OSI)
0000A1r 2               ; OSI is compiled for ROM, but includes
0000A1r 2               ; this unused string
0000A1r 2               QT_WANT:
0000A1r 2                       .byte   "WANT SIN-COS-TAN-ATN"
0000A1r 2                       .byte   0
0000A1r 2                 .endif
0000A1r 2               QT_WRITTEN_BY:
0000A1r 2                 .ifndef CONFIG_CBM_ALL
0000A1r 2                 .if !(.def(AIM65) || .def(SYM1))
0000A1r 2                   .ifdef APPLE
0000A1r 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
0000A1r 2               		.byte	CR,0
0000A1r 2                   .else
0000A1r 2                       .byte   CR,LF,$0C ; FORM FEED
0000A1r 2                     .ifndef CONFIG_11
0000A1r 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
0000A1r 2                     .else
0000A1r 2                       .byte   "WRITTEN BY WEILAND & GATES"
0000A1r 2                     .endif
0000A1r 2                       .byte   CR,LF,0
0000A1r 2                   .endif
0000A1r 2                  .endif
0000A1r 2               QT_MEMORY_SIZE:
0000A1r 2                       .byte   "MEMORY SIZE"
0000A1r 2                       .byte   0
0000A1r 2               QT_TERMINAL_WIDTH:
0000A1r 2                   .if !(.def(AIM65) || .def(SYM1))
0000A1r 2                       .byte   "TERMINAL "
0000A1r 2                   .endif
0000A1r 2                       .byte   "WIDTH"
0000A1r 2                       .byte   0
0000A1r 2                 .endif
0000A1r 2               QT_BYTES_FREE:
0000A1r 2  20 42 59 54          .byte   " BYTES FREE"
0000A5r 2  45 53 20 46  
0000A9r 2  52 45 45     
0000ACr 2                 .ifdef CBM1
0000ACr 2                 .elseif .def(CBM2)
0000ACr 2  0D 00                .byte   CR,0
0000AEr 2                 .elseif .def(APPLE)
0000AEr 2                       .byte   0
0000AEr 2                 .else
0000AEr 2                       .byte   CR,LF,CR,LF
0000AEr 2                 .endif
0000AEr 2               QT_BASIC:
0000AEr 2                 .ifdef OSI
0000AEr 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
0000AEr 2                 .endif
0000AEr 2                 .ifdef KIM
0000AEr 2                       .byte   "MOS TECH 6502 BASIC V1.1"
0000AEr 2                 .endif
0000AEr 2                 .ifdef MICROTAN
0000AEr 2                       .byte   "MICROTAN BASIC"
0000AEr 2                 .endif
0000AEr 2                 .ifdef AIM65
0000AEr 2                       .byte   "  AIM 65 BASIC V1.1"
0000AEr 2                 .endif
0000AEr 2                 .ifdef SYM1
0000AEr 2                       .byte   "BASIC V1.1"
0000AEr 2                 .endif
0000AEr 2                 .ifdef CBM1
0000AEr 2                       .byte   $13 ; HOME
0000AEr 2                       .byte   "*** COMMODORE BASIC ***"
0000AEr 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
0000AEr 2                 .endif
0000AEr 2                 .ifdef CBM2
0000AEr 2  23 23 23 20          .byte   "### COMMODORE BASIC ###"
0000B2r 2  43 4F 4D 4D  
0000B6r 2  4F 44 4F 52  
0000C5r 2  0D 0D 00             .byte   CR,CR,0
0000C8r 2                 .endif
0000C8r 2                 .ifdef APPLE
0000C8r 2                       .byte   LF,CR,LF
0000C8r 2               		.byte	"APPLE BASIC V1.1"
0000C8r 2                 .endif
0000C8r 2                 .ifndef CONFIG_CBM_ALL
0000C8r 2                       .byte   CR,LF
0000C8r 2                   .ifdef MICROTAN
0000C8r 2                       .byte   "(C) 1980 MICROSOFT"
0000C8r 2                   .elseif .def(AIM65)
0000C8r 2                       .byte   0
0000C8r 2                       .byte   "(C) 1978 MICROSOFT"
0000C8r 2                   .elseif .def(SYM1)
0000C8r 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
0000C8r 2                   .else
0000C8r 2                       .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
0000C8r 2                   .endif
0000C8r 2                       .byte   CR,LF
0000C8r 2                     .ifndef AIM65
0000C8r 2                       .byte   0
0000C8r 2                     .endif
0000C8r 2                 .endif
0000C8r 2               .endif
0000C8r 2               
0000C8r 1               .include "extra.s"
0000C8r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef MICROTAN
000000r 2               .include "microtan_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef AIM65
000000r 2               .include "aim65_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef SYM1
000000r 2                       .byte   0,0,0
000000r 2               .endif
000000r 2               
000000r 2               .ifdef EATER
000000r 2               .include "bios.s"
000000r 2               .endif
000000r 2               
000000r 1               .include "lcd.s"
000000r 2               .segment "CODE"
001E6Er 2               .ifdef EATER
001E6Er 2               PORTB = $6000
001E6Er 2               DDRB = $6002
001E6Er 2               E  = %01000000
001E6Er 2               RW = %00100000
001E6Er 2               RS = %00010000
001E6Er 2               
001E6Er 2               lcd_wait:
001E6Er 2                 pha
001E6Er 2                 lda #%11110000  ; LCD data is input
001E6Er 2                 sta DDRB
001E6Er 2               lcdbusy:
001E6Er 2                 lda #RW
001E6Er 2                 sta PORTB
001E6Er 2                 lda #(RW | E)
001E6Er 2                 sta PORTB
001E6Er 2                 lda PORTB       ; Read high nibble
001E6Er 2                 pha             ; and put on stack since it has the busy flag
001E6Er 2                 lda #RW
001E6Er 2                 sta PORTB
001E6Er 2                 lda #(RW | E)
001E6Er 2                 sta PORTB
001E6Er 2                 lda PORTB       ; Read low nibble
001E6Er 2                 pla             ; Get high nibble off stack
001E6Er 2                 and #%00001000
001E6Er 2                 bne lcdbusy
001E6Er 2               
001E6Er 2                 lda #RW
001E6Er 2                 sta PORTB
001E6Er 2                 lda #%11111111  ; LCD data is output
001E6Er 2                 sta DDRB
001E6Er 2                 pla
001E6Er 2                 rts
001E6Er 2               
001E6Er 2               LCDINIT:
001E6Er 2                 lda #$ff ; Set all pins on port B to output
001E6Er 2                 sta DDRB
001E6Er 2               
001E6Er 2                 lda #%00000011 ; Set 8-bit mode
001E6Er 2                 sta PORTB
001E6Er 2                 ora #E
001E6Er 2                 sta PORTB
001E6Er 2                 and #%00001111
001E6Er 2                 sta PORTB
001E6Er 2               
001E6Er 2                 lda #%00000011 ; Set 8-bit mode
001E6Er 2                 sta PORTB
001E6Er 2                 ora #E
001E6Er 2                 sta PORTB
001E6Er 2                 and #%00001111
001E6Er 2                 sta PORTB
001E6Er 2               
001E6Er 2                 lda #%00000011 ; Set 8-bit mode
001E6Er 2                 sta PORTB
001E6Er 2                 ora #E
001E6Er 2                 sta PORTB
001E6Er 2                 and #%00001111
001E6Er 2                 sta PORTB
001E6Er 2               
001E6Er 2                 ; Okay, now we're really in 8-bit mode.
001E6Er 2                 ; Command to get to 4-bit mode ought to work now
001E6Er 2                 lda #%00000010 ; Set 4-bit mode
001E6Er 2                 sta PORTB
001E6Er 2                 ora #E
001E6Er 2                 sta PORTB
001E6Er 2                 and #%00001111
001E6Er 2                 sta PORTB
001E6Er 2               
001E6Er 2                 lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
001E6Er 2                 jsr lcd_instruction
001E6Er 2                 lda #%00001110 ; Display on; cursor on; blink off
001E6Er 2                 jsr lcd_instruction
001E6Er 2                 lda #%00000110 ; Increment and shift cursor; don't shift display
001E6Er 2                 jsr lcd_instruction
001E6Er 2                 lda #%00000001 ; Clear display
001E6Er 2                 jsr lcd_instruction
001E6Er 2                 rts
001E6Er 2               
001E6Er 2               
001E6Er 2               LCDCMD:
001E6Er 2                 jsr GETBYT
001E6Er 2                 txa
001E6Er 2               lcd_instruction:
001E6Er 2                 jsr lcd_wait
001E6Er 2                 pha
001E6Er 2                 lsr
001E6Er 2                 lsr
001E6Er 2                 lsr
001E6Er 2                 lsr            ; Send high 4 bits
001E6Er 2                 sta PORTB
001E6Er 2                 ora #E         ; Set E bit to send instruction
001E6Er 2                 sta PORTB
001E6Er 2                 eor #E         ; Clear E bit
001E6Er 2                 sta PORTB
001E6Er 2                 pla
001E6Er 2                 and #%00001111 ; Send low 4 bits
001E6Er 2                 sta PORTB
001E6Er 2                 ora #E         ; Set E bit to send instruction
001E6Er 2                 sta PORTB
001E6Er 2                 eor #E         ; Clear E bit
001E6Er 2                 sta PORTB
001E6Er 2                 rts
001E6Er 2               
001E6Er 2               LCDPRINT:
001E6Er 2                 jsr GETBYT
001E6Er 2                 txa
001E6Er 2                 jsr lcd_wait
001E6Er 2                 pha
001E6Er 2                 lsr
001E6Er 2                 lsr
001E6Er 2                 lsr
001E6Er 2                 lsr             ; Send high 4 bits
001E6Er 2                 ora #RS         ; Set RS
001E6Er 2                 sta PORTB
001E6Er 2                 ora #E          ; Set E bit to send instruction
001E6Er 2                 sta PORTB
001E6Er 2                 eor #E          ; Clear E bit
001E6Er 2                 sta PORTB
001E6Er 2                 pla
001E6Er 2                 and #%00001111  ; Send low 4 bits
001E6Er 2                 ora #RS         ; Set RS
001E6Er 2                 sta PORTB
001E6Er 2                 ora #E          ; Set E bit to send instruction
001E6Er 2                 sta PORTB
001E6Er 2                 eor #E          ; Clear E bit
001E6Er 2                 sta PORTB
001E6Er 2                 rts
001E6Er 2               
001E6Er 2               .endif
001E6Er 2               
001E6Er 1               
