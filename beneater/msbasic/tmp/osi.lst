ca65 V2.19 - Git 3dfe03300
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 3               ; configuration
000000r 3               CONFIG_10A := 1
000000r 3               
000000r 3               CONFIG_DATAFLG := 1
000000r 3               CONFIG_NULL := 1
000000r 3               CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_SCRTCH_ORDER := 3
000000r 3               CONFIG_SMALL := 1
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $0D
000000r 3               ZP_START3 = $5B
000000r 3               ZP_START4 = $65
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR             := $000A
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $FC
000000r 3               SPACE_FOR_GOSUB := $33
000000r 3               NULL_MAX		:= $0A
000000r 3               WIDTH			:= 72
000000r 3               WIDTH2			:= 56
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2		:= $0300
000000r 3               
000000r 3               ; magic memory locations
000000r 3               L0200           := $0200
000000r 3               
000000r 3               ; monitor functions
000000r 3               MONRDKEY        := $FFEB
000000r 3               MONCOUT         := $FFEE
000000r 3               MONISCNTC       := $FFF1
000000r 3               LOAD            := $FFF4
000000r 3               SAVE            := $FFF7
000000r 3               
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(eater)
000000r 2               EATER := 1
000000r 2               .include "defines_eater.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
00000D  2               Z15:
00000D  2  xx           	.res 1
00000E  2               .ifndef POSX; allow override
00000E  2               POSX:
00000E  2               .endif
00000E  2  xx           	.res 1
00000F  2               .ifndef Z17; allow override
00000F  2               Z17:
00000F  2               .endif
00000F  2  xx           	.res 1
000010  2               .ifndef Z18; allow override
000010  2               Z18:
000010  2               .endif
000010  2  xx           	.res 1
000011  2               LINNUM:
000011  2               .ifndef TXPSV; allow override
000011  2               TXPSV:
000011  2               .endif
000011  2  xx xx        	.res 2
000013  2               .ifndef INPUTBUFFER; allow override
000013  2               INPUTBUFFER:
000013  2               .endif
000013  2               
000013  2               .org ZP_START3
00005B  2               
00005B  2               CHARAC:
00005B  2  xx           	.res 1
00005C  2               ENDCHR:
00005C  2  xx           	.res 1
00005D  2               EOLPNTR:
00005D  2  xx           	.res 1
00005E  2               DIMFLG:
00005E  2  xx           	.res 1
00005F  2               VALTYP:
00005F  2               .ifdef CONFIG_SMALL
00005F  2  xx           	.res 1
000060  2               .else
000060  2               	.res 2
000060  2               .endif
000060  2               DATAFLG:
000060  2  xx           	.res 1
000061  2               SUBFLG:
000061  2  xx           	.res 1
000062  2               INPUTFLG:
000062  2  xx           	.res 1
000063  2               CPRMASK:
000063  2  xx           	.res 1
000064  2               Z14:
000064  2  xx           	.res 1
000065  2               
000065  2               .org ZP_START4
000065  2               
000065  2               TEMPPT:
000065  2  xx           	.res 1
000066  2               LASTPT:
000066  2  xx xx        	.res 2
000068  2               TEMPST:
000068  2  xx xx xx xx  	.res 9
00006C  2  xx xx xx xx  
000070  2  xx           
000071  2               INDEX:
000071  2  xx xx        	.res 2
000073  2               DEST:
000073  2  xx xx        	.res 2
000075  2               RESULT:
000075  2  xx xx xx xx  	.res BYTES_FP
000079  2               RESULT_LAST = RESULT + BYTES_FP-1
000079  2               TXTTAB:
000079  2  xx xx        	.res 2
00007B  2               VARTAB:
00007B  2  xx xx        	.res 2
00007D  2               ARYTAB:
00007D  2  xx xx        	.res 2
00007F  2               STREND:
00007F  2  xx xx        	.res 2
000081  2               FRETOP:
000081  2  xx xx        	.res 2
000083  2               FRESPC:
000083  2  xx xx        	.res 2
000085  2               MEMSIZ:
000085  2  xx xx        	.res 2
000087  2               CURLIN:
000087  2  xx xx        	.res 2
000089  2               OLDLIN:
000089  2  xx xx        	.res 2
00008B  2               OLDTEXT:
00008B  2  xx xx        	.res 2
00008D  2               Z8C:
00008D  2  xx xx        	.res 2
00008F  2               DATPTR:
00008F  2  xx xx        	.res 2
000091  2               INPTR:
000091  2  xx xx        	.res 2
000093  2               VARNAM:
000093  2  xx xx        	.res 2
000095  2               VARPNT:
000095  2  xx xx        	.res 2
000097  2               FORPNT:
000097  2  xx xx        	.res 2
000099  2               LASTOP:
000099  2  xx xx        	.res 2
00009B  2               CPRTYP:
00009B  2  xx           	.res 1
00009C  2               FNCNAM:
00009C  2               TEMP3:
00009C  2  xx xx        	.res 2
00009E  2               DSCPTR:
00009E  2               .ifdef CONFIG_SMALL
00009E  2  xx xx        		.res 2
0000A0  2               .else
0000A0  2               		.res 3
0000A0  2               .endif
0000A0  2               DSCLEN:
0000A0  2  xx xx        	.res 2
0000A2  2               .ifndef JMPADRS ; allow override
0000A2  2               JMPADRS			:= DSCLEN + 1
0000A2  2               .endif
0000A2  2               Z52:
0000A2  2  xx           	.res 1
0000A3  2               ARGEXTENSION:
0000A3  2               .ifndef CONFIG_SMALL
0000A3  2               	.res 1
0000A3  2               .endif
0000A3  2               TEMP1:
0000A3  2  xx           	.res 1
0000A4  2               HIGHDS:
0000A4  2  xx xx        	.res 2
0000A6  2               HIGHTR:
0000A6  2  xx xx        	.res 2
0000A8  2               .ifndef CONFIG_SMALL
0000A8  2               TEMP2:
0000A8  2               	.res 1
0000A8  2               .endif
0000A8  2               INDX:
0000A8  2               TMPEXP:
0000A8  2               .ifdef CONFIG_SMALL
0000A8  2               TEMP2:
0000A8  2               .endif
0000A8  2  xx           	.res 1
0000A9  2               EXPON:
0000A9  2  xx           	.res 1
0000AA  2               LOWTR:
0000AA  2               .ifndef LOWTRX ; allow override
0000AA  2               LOWTRX:
0000AA  2               .endif
0000AA  2  xx           	.res 1
0000AB  2               EXPSGN:
0000AB  2  xx           	.res 1
0000AC  2               FAC:
0000AC  2  xx xx xx xx  	.res BYTES_FP
0000B0  2               FAC_LAST = FAC + BYTES_FP-1
0000B0  2               FACSIGN:
0000B0  2  xx           	.res 1
0000B1  2               SERLEN:
0000B1  2  xx           	.res 1
0000B2  2               SHIFTSIGNEXT:
0000B2  2  xx           	.res 1
0000B3  2               ARG:
0000B3  2  xx xx xx xx  	.res BYTES_FP
0000B7  2               ARG_LAST = ARG + BYTES_FP-1
0000B7  2               ARGSIGN:
0000B7  2  xx           	.res 1
0000B8  2               STRNG1:
0000B8  2  xx xx        	.res 2
0000BA  2               SGNCPR = STRNG1
0000BA  2               FACEXTENSION = STRNG1+1
0000BA  2               STRNG2:
0000BA  2  xx xx        	.res 2
0000BC  2               .ifdef AIM65
0000BC  2               ATN:
0000BC  2               	.res 3
0000BC  2               ZBE:
0000BC  2               	.res 1
0000BC  2               .endif
0000BC  2               .ifdef SYM1
0000BC  2               USR1:
0000BC  2               	.res 3
0000BC  2               USR2:
0000BC  2               	.res 3
0000BC  2               USR3:
0000BC  2               	.res 3
0000BC  2               .endif
0000BC  2               CHRGET:
0000BC  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000BC  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000BC  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000BC  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000BC  2               
0000BC  2               
0000BC  2               
0000BC  1               
0000BC  1               .include "header.s"
0000BC  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2                       jmp     COLD_START
000000r 2                       jmp     RESTART
000000r 2                       .word   AYINT,GIVAYF
000000r 2               .endif
000000r 2               .ifdef SYM1
000000r 2                       jmp     PR_WRITTEN_BY
000000r 2               .endif
000000r 2               .ifdef EATER
000000r 2                       jmp COLD_START
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2               		keyword_rts "PLT", PLT
000007r 2               .else
000007r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Br 2  D4 xx        
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Er 2               .else
00000Er 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000012r 2  CD xx        
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2  rr rr 4E 55  		keyword_rts "NULL", NULL
000015r 2  4C CC xx     
000012r 2               .endif
000012r 2               .ifdef KBD
000012r 2               		keyword_rts "PLOD", PLOD
000012r 2               		keyword_rts "PSAV", PSAV
000012r 2               		keyword_rts "VLOD", VLOD
000012r 2               		keyword_rts "VSAV", VSAV
000012r 2               .endif
000012r 2               .ifndef CONFIG_NO_POKE
000012r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000016r 2  49 D4 xx     
000013r 2               .endif
000013r 2               .ifndef KBD
000013r 2  F3 FF 4C 4F  		keyword_rts "LOAD", LOAD
000017r 2  41 C4 xx     
000014r 2  F6 FF 53 41  		keyword_rts "SAVE", SAVE
000018r 2  56 C5 xx     
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2               		keyword_rts "VERIFY", VERIFY
000015r 2               .endif
000015r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000019r 2  C6 xx        
000016r 2               .ifdef KBD
000016r 2               		keyword_rts "SLOD", SLOD
000016r 2               .endif
000016r 2               .ifndef CONFIG_NO_POKE
000016r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Ar 2  4B C5 xx     
000017r 2               .endif
000017r 2               .ifdef CONFIG_FILE
000017r 2               		keyword_rts "PRINT#", PRINTH
000017r 2               .endif
000017r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Br 2  49 4E D4 xx  
000018r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Cr 2  4E D4 xx     
000019r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Dr 2  53 D4 xx     
00001Ar 2               .ifdef CONFIG_CBM_ALL
00001Ar 2               		keyword_rts "CLR", CLEAR
00001Ar 2               .else
00001Ar 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Er 2  45 41 D2 xx  
00001Br 2               .endif
00001Br 2               .ifdef CONFIG_FILE
00001Br 2               		keyword_rts "CMD", CMD
00001Br 2               		keyword_rts "SYS", SYS
00001Br 2               		keyword_rts "OPEN", OPEN
00001Br 2               		keyword_rts "CLOSE", CLOSE
00001Br 2               .endif
00001Br 2               .ifndef CONFIG_SMALL
00001Br 2               		keyword_rts "GET", GET
00001Br 2               .endif
00001Br 2               .ifdef KBD
00001Br 2               		keyword_rts "PRT", PRT
00001Br 2               .endif
00001Br 2  rr rr 4E 45  		keyword_rts "NEW", NEW
00001Fr 2  D7 xx        
00001Cr 2               .ifdef EATER
00001Cr 2               		keyword_rts "LCDCMD", LCDCMD
00001Cr 2               		keyword_rts "LCDPRINT", LCDPRINT
00001Cr 2               .endif
00001Cr 2               
00001Cr 2               		count_tokens
00001Cr 2               
00001Cr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000020r 2  xx           
00001Dr 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Er 2  46 CE xx     		keyword	"FN", TOKEN_FN
00001Fr 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000023r 2  xx           
000020r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000024r 2  xx           
000021r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000022r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000026r 2  xx           
000023r 2  AB xx        		keyword	"+", TOKEN_PLUS
000024r 2  AD xx        		keyword	"-", TOKEN_MINUS
000025r 2  AA xx        		keyword	"*"
000026r 2  AF xx        		keyword	"/"
000027r 2               .ifdef KBD
000027r 2               		keyword	"#"
000027r 2               .else
000027r 2  DE xx        		keyword	"^"
000028r 2               .endif
000028r 2  41 4E C4 xx  		keyword	"AND"
000029r 2  4F D2 xx     		keyword	"OR"
00002Ar 2  BE xx        		keyword	">", TOKEN_GREATER
00002Br 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Cr 2  BC xx        		keyword	"<"
00002Dr 2               
00002Dr 2                       .segment "VECTORS"
000038r 2               UNFNC:
000038r 2               
000038r 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Cr 2  CE xx        
00002Er 2  rr rr 49 4E  		keyword_addr "INT", INT
000032r 2  D4 xx        
00002Fr 2  rr rr 41 42  		keyword_addr "ABS", ABS
000033r 2  D3 xx        
000030r 2               .ifdef KBD
000030r 2               		keyword_addr "VER", VER
000030r 2               .endif
000030r 2               .ifndef CONFIG_NO_POKE
000030r 2                 .ifdef CONFIG_RAM
000030r 2               		keyword_addr "USR", IQERR
000030r 2                 .else
000030r 2  0A 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
000034r 2  D2 xx        
000031r 2                 .endif
000031r 2               .endif
000031r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000035r 2  C5 xx        
000032r 2  rr rr 50 4F  		keyword_addr "POS", POS
000036r 2  D3 xx        
000033r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000037r 2  D2 xx        
000034r 2  rr rr 52 4E  		keyword_addr "RND", RND
000038r 2  C4 xx        
000035r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
000039r 2  C7 xx        
000036r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Ar 2  D0 xx        
000037r 2               .segment "VECTORS"
00004Cr 2               UNFNC_COS:
00004Cr 2  rr rr 43 4F  		keyword_addr "COS", COS
000050r 2  D3 xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_SIN:
00004Er 2  rr rr 53 49  		keyword_addr "SIN", SIN
000052r 2  CE xx        
000039r 2               .segment "VECTORS"
000050r 2               UNFNC_TAN:
000050r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000054r 2  CE xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_ATN:
000052r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000056r 2  CE xx        
00003Br 2               .ifdef KBD
00003Br 2               		keyword_addr "GETC", GETC
00003Br 2               .endif
00003Br 2               .ifndef CONFIG_NO_POKE
00003Br 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
00003Fr 2  45 CB xx     
00003Cr 2               .endif
00003Cr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000040r 2  CE xx        
00003Dr 2  rr rr 53 54  		keyword_addr "STR$", STR
000041r 2  52 A4 xx     
00003Er 2  rr rr 56 41  		keyword_addr "VAL", VAL
000042r 2  CC xx        
00003Fr 2  rr rr 41 53  		keyword_addr "ASC", ASC
000043r 2  C3 xx        
000040r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000044r 2  52 A4 xx     
000041r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000045r 2  46 54 A4 xx  
000042r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000046r 2  47 48 54 A4  
00004Ar 2  xx           
000043r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000047r 2  44 A4 xx     
000044r 2               .ifdef CONFIG_2
000044r 2               		keyword	"GO", TOKEN_GO
000044r 2               .endif
000044r 2                       .segment "KEYWORDS"
0000DFr 2  00           		.byte   0
0000E0r 2               
0000E0r 2                       .segment "VECTORS"
000066r 2               MATHTBL:
000066r 2  79                   .byte   $79
000067r 2  rr rr                .word   FADDT-1
000069r 2  79                   .byte   $79
00006Ar 2  rr rr                .word   FSUBT-1
00006Cr 2  7B                   .byte   $7B
00006Dr 2  rr rr                .word   FMULTT-1
00006Fr 2  7B                   .byte   $7B
000070r 2  rr rr                .word   FDIVT-1
000072r 2  7F                   .byte   $7F
000073r 2  rr rr                .word   FPWRT-1
000075r 2  50                   .byte   $50
000076r 2  rr rr                .word   TAND-1
000078r 2  46                   .byte   $46
000079r 2  rr rr                .word   OR-1
00007Br 2  7D                   .byte   $7D
00007Cr 2  rr rr                .word   NEGOP-1
00007Er 2  5A                   .byte   $5A
00007Fr 2  rr rr                .word   EQUOP-1
000081r 2  64                   .byte   $64
000082r 2  rr rr                .word   RELOPS-1
000084r 2               
000084r 1               .include "error.s"
000084r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2  4E C6        define_error ERR_NOFOR, "NF"
000002r 2  53 CE        define_error ERR_SYNTAX, "SN"
000004r 2  52 C7        define_error ERR_NOGOSUB, "RG"
000006r 2  4F C4        define_error ERR_NODATA, "OD"
000008r 2  46 C3        define_error ERR_ILLQTY, "FC"
00000Ar 2  4F D6        define_error ERR_OVERFLOW, "OV"
00000Cr 2  4F CD        define_error ERR_MEMFULL, "OM"
00000Er 2  55 D3        define_error ERR_UNDEFSTAT, "US"
000010r 2  42 D3        define_error ERR_BADSUBS, "BS"
000012r 2  44 C4        define_error ERR_REDIMD, "DD"
000014r 2  2F B0        define_error ERR_ZERODIV, "/0"
000016r 2  49 C4        define_error ERR_ILLDIR, "ID"
000018r 2  54 CD        define_error ERR_BADTYPE, "TM"
00001Ar 2  4C D3        define_error ERR_STRLONG, "LS"
00001Cr 2  53 D4        define_error ERR_FRMCPX, "ST"
00001Er 2  43 CE        define_error ERR_CANTCONT, "CN"
000020r 2  55 C6        define_error ERR_UNDEFFN, "UF"
000022r 2               .else
000022r 2               define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000022r 2               define_error ERR_SYNTAX, "SYNTAX"
000022r 2               define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
000022r 2               define_error ERR_NODATA, "OUT OF DATA"
000022r 2               define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000022r 2               .ifdef CBM1
000022r 2               	.byte 0,0,0,0,0
000022r 2               .endif
000022r 2               define_error ERR_OVERFLOW, "OVERFLOW"
000022r 2               define_error ERR_MEMFULL, "OUT OF MEMORY"
000022r 2               define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
000022r 2               define_error ERR_BADSUBS, "BAD SUBSCRIPT"
000022r 2               define_error ERR_REDIMD, "REDIM'D ARRAY"
000022r 2               define_error ERR_ZERODIV, "DIVISION BY ZERO"
000022r 2               define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000022r 2               define_error ERR_BADTYPE, "TYPE MISMATCH"
000022r 2               define_error ERR_STRLONG, "STRING TOO LONG"
000022r 2               .ifdef CONFIG_FILE
000022r 2                 .ifdef CBM1
000022r 2               define_error ERR_BADDATA, "BAD DATA"
000022r 2                 .else
000022r 2               define_error ERR_BADDATA, "FILE DATA"
000022r 2                 .endif
000022r 2               .endif
000022r 2               define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
000022r 2               define_error ERR_CANTCONT, "CAN'T CONTINUE"
000022r 2               define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
000022r 2               .endif
000022r 2               
000022r 1               .include "message.s"
000022r 2               ; global messages: "error", "in", "ready", "break"
000022r 2               
000022r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2                       .byte   CR,0,0,"K",CR,LF
00000Cr 2                   .else
00000Cr 2  0D 0A 4F 4B  		.byte   CR,LF,"OK",CR,LF
000010r 2  0D 0A        
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2                .endif
000013r 2               .endif
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN) || .def(AIM65)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 98                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 97                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 98                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 97                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 10                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 7F                sta     STREND
00004Er 2  84 80                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 A6                lda     HIGHTR
000053r 2  E5 AA                sbc     LOWTR
000055r 2  85 71                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 A7                lda     HIGHTR+1
00005Ar 2  E5 AB                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 A6                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 71                sbc     INDEX
000066r 2  85 A6                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 A7                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 A4                lda     HIGHDS
00006Fr 2  E5 71                sbc     INDEX
000071r 2  85 A4                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 A5                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 A6                lda     (HIGHTR),y
00007Br 2  91 A4                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 A6                lda     (HIGHTR),y
000082r 2  91 A4                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 A7                dec     HIGHTR+1
000086r 2  C6 A5                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 33                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 71                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 71                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 82                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 81                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 08                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 A3                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F8                ldx     #TEMP1-FAC+1
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 AC                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 82                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 81                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 0C                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 64                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL_ERROR
0000D3r 2                       pha
0000D3r 2                       and     #$7F
0000D3r 2               .endif
0000D3r 2  20 rr rr             jsr     OUTDO
0000D6r 2               .ifdef CONFIG_SMALL_ERROR
0000D6r 2  BD rr rr             lda     ERROR_MESSAGES+1,x
0000D9r 2                 .ifdef KBD
0000D9r 2                       and     #$7F
0000D9r 2                 .endif
0000D9r 2  20 rr rr             jsr     OUTDO
0000DCr 2               .else
0000DCr 2                       inx
0000DCr 2                       pla
0000DCr 2                       bpl     L2329
0000DCr 2               .endif
0000DCr 2  20 rr rr             jsr     STKINI
0000DFr 2  A9 rr                lda     #<QT_ERROR
0000E1r 2  A0 rr                ldy     #>QT_ERROR
0000E3r 2               
0000E3r 2               ; ----------------------------------------------------------------------------
0000E3r 2               ; PRINT STRING AT (Y,A)
0000E3r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E3r 2               ; FALL INTO WARM RESTART
0000E3r 2               ; ----------------------------------------------------------------------------
0000E3r 2               PRINT_ERROR_LINNUM:
0000E3r 2  20 rr rr             jsr     STROUT
0000E6r 2  A4 88                ldy     CURLIN+1
0000E8r 2  C8                   iny
0000E9r 2  F0 03                beq     RESTART
0000EBr 2  20 rr rr             jsr     INPRT
0000EEr 2               
0000EEr 2               ; ----------------------------------------------------------------------------
0000EEr 2               ; WARM RESTART ENTRY
0000EEr 2               ; ----------------------------------------------------------------------------
0000EEr 2               RESTART:
0000EEr 2               .ifdef KBD
0000EEr 2                       jsr     CRDO
0000EEr 2                       nop
0000EEr 2               L2351X:
0000EEr 2                       jsr     OKPRT
0000EEr 2               L2351:
0000EEr 2                       jsr     INLIN
0000EEr 2               LE28E:
0000EEr 2                       bpl     RESTART
0000EEr 2               .else
0000EEr 2  46 64                lsr     Z14
0000F0r 2                .ifndef AIM65
0000F0r 2  A9 rr                lda     #<QT_OK
0000F2r 2  A0 rr                ldy     #>QT_OK
0000F4r 2                 .ifdef CONFIG_CBM_ALL
0000F4r 2                       jsr     STROUT
0000F4r 2                 .else
0000F4r 2  20 03 00             jsr     GOSTROUT
0000F7r 2                 .endif
0000F7r 2                .else
0000F7r 2                       jsr     GORESTART
0000F7r 2                .endif
0000F7r 2               L2351:
0000F7r 2  20 rr rr             jsr     INLIN
0000FAr 2               .endif
0000FAr 2  86 C3                stx     TXTPTR
0000FCr 2  84 C4                sty     TXTPTR+1
0000FEr 2  20 BC 00             jsr     CHRGET
000101r 2               .ifdef CONFIG_11
000101r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000101r 2               ; and ':' - a line starting with ':' in
000101r 2               ; direct mode gets ignored
000101r 2                       tax
000101r 2               .endif
000101r 2               .ifdef KBD
000101r 2                       beq     L2351X
000101r 2               .else
000101r 2  F0 F4                beq     L2351
000103r 2               .endif
000103r 2  A2 FF                ldx     #$FF
000105r 2  86 88                stx     CURLIN+1
000107r 2  90 06                bcc     NUMBERED_LINE
000109r 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Cr 2  4C rr rr             jmp     NEWSTT2
00010Fr 2               
00010Fr 2               ; ----------------------------------------------------------------------------
00010Fr 2               ; HANDLE NUMBERED LINE
00010Fr 2               ; ----------------------------------------------------------------------------
00010Fr 2               NUMBERED_LINE:
00010Fr 2  20 rr rr             jsr     LINGET
000112r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000115r 2  84 5D                sty     EOLPNTR
000117r 2               .ifdef KBD
000117r 2                       jsr     FNDLIN2
000117r 2                       lda     JMPADRS+1
000117r 2                       sta     LOWTR
000117r 2                       sta     Z96
000117r 2                       lda     JMPADRS+2
000117r 2                       sta     LOWTR+1
000117r 2                       sta     Z96+1
000117r 2                       lda     LINNUM
000117r 2                       sta     L06FE
000117r 2                       lda     LINNUM+1
000117r 2                       sta     L06FE+1
000117r 2                       inc     LINNUM
000117r 2                       bne     LE2D2
000117r 2                       inc     LINNUM+1
000117r 2                       bne     LE2D2
000117r 2                       jmp     SYNERR
000117r 2               LE2D2:
000117r 2                       jsr     LF457
000117r 2                       ldx     #Z96
000117r 2                       jsr     CMPJMPADRS
000117r 2                       bcs     LE2FD
000117r 2               LE2DC:
000117r 2                       ldx     #$00
000117r 2                       lda     (JMPADRS+1,x)
000117r 2                       sta     (Z96,x)
000117r 2                       inc     JMPADRS+1
000117r 2                       bne     LE2E8
000117r 2                       inc     JMPADRS+2
000117r 2               LE2E8:
000117r 2                       inc     Z96
000117r 2                       bne     LE2EE
000117r 2                       inc     Z96+1
000117r 2               LE2EE:
000117r 2                       ldx     #VARTAB
000117r 2                       jsr     CMPJMPADRS
000117r 2                       bne     LE2DC
000117r 2                       lda     Z96
000117r 2                       sta     VARTAB
000117r 2                       lda     Z96+1
000117r 2                       sta     VARTAB+1
000117r 2               LE2FD:
000117r 2                       jsr     SETPTRS
000117r 2                       jsr     LE33D
000117r 2                       lda     INPUTBUFFER
000117r 2               LE306:
000117r 2                       beq     LE28E
000117r 2                       cmp     #$A5
000117r 2                       beq     LE306
000117r 2                       clc
000117r 2               .else
000117r 2  20 rr rr             jsr     FNDLIN
00011Ar 2  90 44                bcc     PUT_NEW_LINE
00011Cr 2  A0 01                ldy     #$01
00011Er 2  B1 AA                lda     (LOWTR),y
000120r 2  85 72                sta     INDEX+1
000122r 2  A5 7B                lda     VARTAB
000124r 2  85 71                sta     INDEX
000126r 2  A5 AB                lda     LOWTR+1
000128r 2  85 74                sta     DEST+1
00012Ar 2  A5 AA                lda     LOWTR
00012Cr 2  88                   dey
00012Dr 2  F1 AA                sbc     (LOWTR),y
00012Fr 2  18                   clc
000130r 2  65 7B                adc     VARTAB
000132r 2  85 7B                sta     VARTAB
000134r 2  85 73                sta     DEST
000136r 2  A5 7C                lda     VARTAB+1
000138r 2  69 FF                adc     #$FF
00013Ar 2  85 7C                sta     VARTAB+1
00013Cr 2  E5 AB                sbc     LOWTR+1
00013Er 2  AA                   tax
00013Fr 2  38                   sec
000140r 2  A5 AA                lda     LOWTR
000142r 2  E5 7B                sbc     VARTAB
000144r 2  A8                   tay
000145r 2  B0 03                bcs     L23A5
000147r 2  E8                   inx
000148r 2  C6 74                dec     DEST+1
00014Ar 2               L23A5:
00014Ar 2  18                   clc
00014Br 2  65 71                adc     INDEX
00014Dr 2  90 03                bcc     L23AD
00014Fr 2  C6 72                dec     INDEX+1
000151r 2  18                   clc
000152r 2               L23AD:
000152r 2  B1 71                lda     (INDEX),y
000154r 2  91 73                sta     (DEST),y
000156r 2  C8                   iny
000157r 2  D0 F9                bne     L23AD
000159r 2  E6 72                inc     INDEX+1
00015Br 2  E6 74                inc     DEST+1
00015Dr 2  CA                   dex
00015Er 2  D0 F2                bne     L23AD
000160r 2               .endif
000160r 2               ; ----------------------------------------------------------------------------
000160r 2               PUT_NEW_LINE:
000160r 2               .ifndef KBD
000160r 2                 .ifdef CONFIG_2
000160r 2                       jsr     SETPTRS
000160r 2                       jsr     LE33D
000160r 2                       lda     INPUTBUFFER
000160r 2                       beq     L2351
000160r 2                       clc
000160r 2                 .else
000160r 2  A5 13                lda     INPUTBUFFER
000162r 2  F0 2F                beq     FIX_LINKS
000164r 2  A5 85                lda     MEMSIZ
000166r 2  A4 86                ldy     MEMSIZ+1
000168r 2  85 81                sta     FRETOP
00016Ar 2  84 82                sty     FRETOP+1
00016Cr 2                 .endif
00016Cr 2               .endif
00016Cr 2  A5 7B                lda     VARTAB
00016Er 2  85 A6                sta     HIGHTR
000170r 2  65 5D                adc     EOLPNTR
000172r 2  85 A4                sta     HIGHDS
000174r 2  A4 7C                ldy     VARTAB+1
000176r 2  84 A7                sty     HIGHTR+1
000178r 2  90 01                bcc     L23D6
00017Ar 2  C8                   iny
00017Br 2               L23D6:
00017Br 2  84 A5                sty     HIGHDS+1
00017Dr 2  20 rr rr             jsr     BLTU
000180r 2               .ifdef CONFIG_INPUTBUFFER_0200
000180r 2                       lda     LINNUM
000180r 2                       ldy     LINNUM+1
000180r 2                       sta     INPUTBUFFER-2
000180r 2                       sty     INPUTBUFFER-1
000180r 2               .endif
000180r 2  A5 7F                lda     STREND
000182r 2  A4 80                ldy     STREND+1
000184r 2  85 7B                sta     VARTAB
000186r 2  84 7C                sty     VARTAB+1
000188r 2  A4 5D                ldy     EOLPNTR
00018Ar 2  88                   dey
00018Br 2               ; ---COPY LINE INTO PROGRAM-------
00018Br 2               L23E6:
00018Br 2  B9 0F 00             lda     INPUTBUFFER-4,y
00018Er 2  91 AA                sta     (LOWTR),y
000190r 2  88                   dey
000191r 2  10 F8                bpl     L23E6
000193r 2               
000193r 2               ; ----------------------------------------------------------------------------
000193r 2               ; CLEAR ALL VARIABLES
000193r 2               ; RE-ESTABLISH ALL FORWARD LINKS
000193r 2               ; ----------------------------------------------------------------------------
000193r 2               FIX_LINKS:
000193r 2  20 rr rr             jsr     SETPTRS
000196r 2               .ifdef CONFIG_2
000196r 2                       jsr     LE33D
000196r 2                       jmp     L2351
000196r 2               LE33D:
000196r 2               .endif
000196r 2  A5 79                lda     TXTTAB
000198r 2  A4 7A                ldy     TXTTAB+1
00019Ar 2  85 71                sta     INDEX
00019Cr 2  84 72                sty     INDEX+1
00019Er 2  18                   clc
00019Fr 2               L23FA:
00019Fr 2  A0 01                ldy     #$01
0001A1r 2  B1 71                lda     (INDEX),y
0001A3r 2               .ifdef CONFIG_2
0001A3r 2                       beq     RET3
0001A3r 2               .else
0001A3r 2  D0 03 4C rr          jeq     L2351
0001A7r 2  rr           
0001A8r 2               .endif
0001A8r 2  A0 04                ldy     #$04
0001AAr 2               L2405:
0001AAr 2  C8                   iny
0001ABr 2  B1 71                lda     (INDEX),y
0001ADr 2  D0 FB                bne     L2405
0001AFr 2  C8                   iny
0001B0r 2  98                   tya
0001B1r 2  65 71                adc     INDEX
0001B3r 2  AA                   tax
0001B4r 2  A0 00                ldy     #$00
0001B6r 2  91 71                sta     (INDEX),y
0001B8r 2  A5 72                lda     INDEX+1
0001BAr 2  69 00                adc     #$00
0001BCr 2  C8                   iny
0001BDr 2  91 71                sta     (INDEX),y
0001BFr 2  86 71                stx     INDEX
0001C1r 2  85 72                sta     INDEX+1
0001C3r 2  90 DA                bcc     L23FA	; always
0001C5r 2               
0001C5r 2               ; ----------------------------------------------------------------------------
0001C5r 2               .ifdef KBD
0001C5r 2               .include "kbd_loadsave.s"
0001C5r 2               .endif
0001C5r 2               
0001C5r 2               .ifdef CONFIG_2
0001C5r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001C5r 2               RET3:
0001C5r 2               		rts
0001C5r 2               .endif
0001C5r 2               
0001C5r 2               .include "inline.s"
0001C5r 3               .segment "CODE"
0001C5r 3               
0001C5r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001C5r 3               L2420:
0001C5r 3                 .ifdef OSI
0001C5r 3  20 rr rr             jsr     OUTDO
0001C8r 3                 .endif
0001C8r 3  CA                   dex
0001C9r 3                 .ifdef AIM65
0001C9r 3                       bmi     L2423
0001C9r 3                       jsr     PSLS
0001C9r 3                       jmp     INLIN2
0001C9r 3               LB35F:
0001C9r 3                       jsr     OUTDO
0001C9r 3                 .else
0001C9r 3  10 08                bpl     INLIN2
0001CBr 3                 .endif
0001CBr 3               L2423:
0001CBr 3                 .ifdef OSI
0001CBr 3  20 rr rr             jsr     OUTDO
0001CEr 3                 .endif
0001CEr 3  20 rr rr             jsr     CRDO
0001D1r 3               .endif
0001D1r 3               
0001D1r 3               ; ----------------------------------------------------------------------------
0001D1r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001D1r 3               ; ----------------------------------------------------------------------------
0001D1r 3               .ifndef KBD
0001D1r 3               INLIN:
0001D1r 3                 .ifdef APPLE
0001D1r 3                       ldx     #$DD
0001D1r 3               INLIN1:
0001D1r 3                       stx     $33
0001D1r 3                       jsr     L2900
0001D1r 3                       cpx     #$EF
0001D1r 3                       bcs     L0C32
0001D1r 3                       ldx     #$EF
0001D1r 3               L0C32:
0001D1r 3                       lda     #$00
0001D1r 3                       sta     INPUTBUFFER,x
0001D1r 3                       ldx     #<INPUTBUFFER-1
0001D1r 3                       ldy     #>INPUTBUFFER-1
0001D1r 3                       rts
0001D1r 3                 .endif
0001D1r 3               
0001D1r 3                 .ifndef APPLE
0001D1r 3  A2 00                ldx     #$00
0001D3r 3               INLIN2:
0001D3r 3  20 rr rr             jsr     GETLN
0001D6r 3                   .ifdef AIM65
0001D6r 3                       cmp     #$1A
0001D6r 3                       bne     INLINAIM
0001D6r 3                       jsr     DU13
0001D6r 3                       jmp     INLIN
0001D6r 3               INLINAIM:
0001D6r 3                   .endif
0001D6r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001D6r 3  C9 07                cmp     #$07
0001D8r 3  F0 14                beq     L2443
0001DAr 3                   .endif
0001DAr 3  C9 0D                cmp     #$0D
0001DCr 3  F0 1F                beq     L2453
0001DEr 3                   .ifndef CONFIG_NO_LINE_EDITING
0001DEr 3  C9 20                cmp     #$20
0001E0r 3                     .ifdef AIM65
0001E0r 3                       bcc     L244E
0001E0r 3                     .else
0001E0r 3  90 F1                bcc     INLIN2
0001E2r 3                     .endif
0001E2r 3                     .ifdef MICROTAN
0001E2r 3                       cmp     #$80
0001E2r 3                     .else
0001E2r 3                       .ifdef AIM65
0001E2r 3                       cmp     #$7F
0001E2r 3                       beq     L2420
0001E2r 3                       .endif
0001E2r 3  C9 7D                cmp     #$7D
0001E4r 3                     .endif
0001E4r 3  B0 ED                bcs     INLIN2
0001E6r 3  C9 40                cmp     #$40 ; @
0001E8r 3                     .ifdef AIM65
0001E8r 3                       beq     LB35F
0001E8r 3                     .else
0001E8r 3  F0 E1                beq     L2423
0001EAr 3                     .ifdef MICROTAN
0001EAr 3                       cmp     #$7F ; DEL
0001EAr 3                     .else
0001EAr 3  C9 5F                cmp     #$5F ; _
0001ECr 3                     .endif
0001ECr 3  F0 D7                beq     L2420
0001EEr 3                     .endif
0001EEr 3               L2443:
0001EEr 3                     .ifdef MICROTAN
0001EEr 3                       cpx     #$4F
0001EEr 3                     .else
0001EEr 3  E0 47                cpx     #$47
0001F0r 3                     .endif
0001F0r 3  B0 04                bcs     L244C
0001F2r 3                   .endif
0001F2r 3  95 13                sta     INPUTBUFFER,x
0001F4r 3  E8                   inx
0001F5r 3                   .if .def(OSI) || .def(AIM65)
0001F5r 3  2C                   .byte   $2C
0001F6r 3                   .else
0001F6r 3                       bne     INLIN2
0001F6r 3                   .endif
0001F6r 3               L244C:
0001F6r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001F6r 3  A9 07                lda     #$07 ; BEL
0001F8r 3               L244E:
0001F8r 3  20 rr rr             jsr     OUTDO
0001FBr 3  D0 D6                bne     INLIN2
0001FDr 3                   .endif
0001FDr 3               L2453:
0001FDr 3  4C rr rr             jmp     L29B9
000200r 3                 .endif
000200r 3               .endif
000200r 3               
000200r 3               .ifndef KBD
000200r 3                 .ifndef APPLE
000200r 3               GETLN:
000200r 3                   .ifdef CONFIG_FILE
000200r 3                       jsr     CHRIN
000200r 3                       ldy     CURDVC
000200r 3                       bne     L2465
000200r 3                   .else
000200r 3  20 EB FF             jsr     MONRDKEY
000203r 3                   .endif
000203r 3                   .ifdef OSI
000203r 3  EA                   nop
000204r 3  EA                   nop
000205r 3  EA                   nop
000206r 3  EA                   nop
000207r 3  EA                   nop
000208r 3  EA                   nop
000209r 3  EA                   nop
00020Ar 3  EA                   nop
00020Br 3  EA                   nop
00020Cr 3  EA                   nop
00020Dr 3  EA                   nop
00020Er 3  EA                   nop
00020Fr 3  EA                   nop
000210r 3  EA                   nop
000211r 3  29 7F                and     #$7F
000213r 3                   .endif
000213r 3                 .endif
000213r 3                 .ifdef APPLE
000213r 3               RDKEY:
000213r 3                       jsr     LFD0C
000213r 3                       and     #$7F
000213r 3                 .endif
000213r 3                   .ifdef SYM1
000213r 3                       cmp     #$14
000213r 3                   .else
000213r 3  C9 0F                cmp     #$0F
000215r 3                   .endif
000215r 3  D0 08                bne     L2465
000217r 3  48                   pha
000218r 3  A5 64                lda     Z14
00021Ar 3  49 FF                eor     #$FF
00021Cr 3  85 64                sta     Z14
00021Er 3  68                   pla
00021Fr 3               L2465:
00021Fr 3  60                   rts
000220r 3               .endif
000220r 3               
000220r 2               
000220r 2               ; ----------------------------------------------------------------------------
000220r 2               ; TOKENIZE THE INPUT LINE
000220r 2               ; ----------------------------------------------------------------------------
000220r 2               PARSE_INPUT_LINE:
000220r 2  A6 C3                ldx     TXTPTR
000222r 2  A0 04                ldy     #$04
000224r 2  84 60                sty     DATAFLG
000226r 2               L246C:
000226r 2  BD 00 00             lda     INPUTBUFFERX,x
000229r 2               .ifdef CONFIG_CBM_ALL
000229r 2                       bpl     LC49E
000229r 2                       cmp     #$FF
000229r 2                       beq     L24AC
000229r 2                       inx
000229r 2                       bne     L246C
000229r 2               LC49E:
000229r 2               .endif
000229r 2  C9 20                cmp     #$20
00022Br 2  F0 3B                beq     L24AC
00022Dr 2  85 5C                sta     ENDCHR
00022Fr 2  C9 22                cmp     #$22
000231r 2  F0 5A                beq     L24D0
000233r 2  24 60                bit     DATAFLG
000235r 2  70 31                bvs     L24AC
000237r 2  C9 3F                cmp     #$3F
000239r 2  D0 04                bne     L2484
00023Br 2  A9 97                lda     #TOKEN_PRINT
00023Dr 2  D0 29                bne     L24AC
00023Fr 2               L2484:
00023Fr 2  C9 30                cmp     #$30
000241r 2  90 04                bcc     L248C
000243r 2  C9 3C                cmp     #$3C
000245r 2  90 21                bcc     L24AC
000247r 2               ; ----------------------------------------------------------------------------
000247r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000247r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000247r 2               ; ----------------------------------------------------------------------------
000247r 2               L248C:
000247r 2  84 BA                sty     STRNG2
000249r 2  A0 00                ldy     #$00
00024Br 2  84 5D                sty     EOLPNTR
00024Dr 2  88                   dey
00024Er 2  86 C3                stx     TXTPTR
000250r 2  CA                   dex
000251r 2               L2496:
000251r 2  C8                   iny
000252r 2               L2497:
000252r 2  E8                   inx
000253r 2               L2498:
000253r 2               .ifdef KBD
000253r 2                       jsr     GET_UPPER
000253r 2               .else
000253r 2  BD 00 00             lda     INPUTBUFFERX,x
000256r 2                 .ifndef CONFIG_2
000256r 2  C9 20                cmp     #$20
000258r 2  F0 F8                beq     L2497
00025Ar 2                 .endif
00025Ar 2               .endif
00025Ar 2  38                   sec
00025Br 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
00025Er 2  F0 F1                beq     L2496
000260r 2  C9 80                cmp     #$80
000262r 2  D0 30                bne     L24D7
000264r 2  05 5D                ora     EOLPNTR
000266r 2               ; ----------------------------------------------------------------------------
000266r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000266r 2               ; ----------------------------------------------------------------------------
000266r 2               L24AA:
000266r 2  A4 BA                ldy     STRNG2
000268r 2               L24AC:
000268r 2  E8                   inx
000269r 2  C8                   iny
00026Ar 2  99 0E 00             sta     INPUTBUFFER-5,y
00026Dr 2  B9 0E 00             lda     INPUTBUFFER-5,y
000270r 2  F0 36                beq     L24EA
000272r 2  38                   sec
000273r 2  E9 3A                sbc     #$3A
000275r 2  F0 04                beq     L24BF
000277r 2  C9 49                cmp     #$49
000279r 2  D0 02                bne     L24C1
00027Br 2               L24BF:
00027Br 2  85 60                sta     DATAFLG
00027Dr 2               L24C1:
00027Dr 2  38                   sec
00027Er 2  E9 54                sbc     #TOKEN_REM-':'
000280r 2  D0 A4                bne     L246C
000282r 2  85 5C                sta     ENDCHR
000284r 2               ; ----------------------------------------------------------------------------
000284r 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
000284r 2               ; BY COPYING CHARS UP TO ENDCHR.
000284r 2               ; ----------------------------------------------------------------------------
000284r 2               L24C8:
000284r 2  BD 00 00             lda     INPUTBUFFERX,x
000287r 2  F0 DF                beq     L24AC
000289r 2  C5 5C                cmp     ENDCHR
00028Br 2  F0 DB                beq     L24AC
00028Dr 2               L24D0:
00028Dr 2  C8                   iny
00028Er 2  99 0E 00             sta     INPUTBUFFER-5,y
000291r 2  E8                   inx
000292r 2  D0 F0                bne     L24C8
000294r 2               ; ----------------------------------------------------------------------------
000294r 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
000294r 2               ; ----------------------------------------------------------------------------
000294r 2               L24D7:
000294r 2  A6 C3                ldx     TXTPTR
000296r 2  E6 5D                inc     EOLPNTR
000298r 2               L24DB:
000298r 2  C8                   iny
000299r 2  B9 rr rr             lda     MATHTBL+28+1,y
00029Cr 2  10 FA                bpl     L24DB
00029Er 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0002A1r 2  D0 B0                bne     L2498
0002A3r 2  BD 00 00             lda     INPUTBUFFERX,x
0002A6r 2  10 BE                bpl     L24AA
0002A8r 2               ; ---END OF LINE------------------
0002A8r 2               L24EA:
0002A8r 2  99 10 00             sta     INPUTBUFFER-3,y
0002ABr 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
0002ABr 2                       dec     TXTPTR+1
0002ABr 2               .endif
0002ABr 2  A9 12                lda     #<INPUTBUFFER-1
0002ADr 2  85 C3                sta     TXTPTR
0002AFr 2  60                   rts
0002B0r 2               
0002B0r 2               ; ----------------------------------------------------------------------------
0002B0r 2               ; SEARCH FOR LINE
0002B0r 2               ;
0002B0r 2               ; (LINNUM) = LINE # TO FIND
0002B0r 2               ; IF NOT FOUND:  CARRY = 0
0002B0r 2               ;	LOWTR POINTS AT NEXT LINE
0002B0r 2               ; IF FOUND:      CARRY = 1
0002B0r 2               ;	LOWTR POINTS AT LINE
0002B0r 2               ; ----------------------------------------------------------------------------
0002B0r 2               FNDLIN:
0002B0r 2               .ifdef KBD
0002B0r 2                       jsr     CHRGET
0002B0r 2                       jmp     LE444
0002B0r 2               LE440:
0002B0r 2                       php
0002B0r 2                       jsr     LINGET
0002B0r 2               LE444:
0002B0r 2                       jsr     LF457
0002B0r 2                       ldx     #$FF
0002B0r 2                       plp
0002B0r 2                       beq     LE464
0002B0r 2                       jsr     CHRGOT
0002B0r 2                       beq     L2520
0002B0r 2                       cmp     #$A5
0002B0r 2                       bne     L2520
0002B0r 2                       jsr     CHRGET
0002B0r 2                       beq     LE464
0002B0r 2                       bcs     LE461
0002B0r 2                       jsr     LINGET
0002B0r 2                       beq     L2520
0002B0r 2               LE461:
0002B0r 2                       jmp     SYNERR
0002B0r 2               LE464:
0002B0r 2                       stx     LINNUM
0002B0r 2                       stx     LINNUM+1
0002B0r 2               .else
0002B0r 2  A5 79                lda     TXTTAB
0002B2r 2  A6 7A                ldx     TXTTAB+1
0002B4r 2               FL1:
0002B4r 2  A0 01                ldy     #$01
0002B6r 2  85 AA                sta     LOWTR
0002B8r 2  86 AB                stx     LOWTR+1
0002BAr 2  B1 AA                lda     (LOWTR),y
0002BCr 2  F0 1F                beq     L251F
0002BEr 2  C8                   iny
0002BFr 2  C8                   iny
0002C0r 2  A5 12                lda     LINNUM+1
0002C2r 2  D1 AA                cmp     (LOWTR),y
0002C4r 2  90 18                bcc     L2520
0002C6r 2  F0 03                beq     L250D
0002C8r 2  88                   dey
0002C9r 2  D0 09                bne     L2516
0002CBr 2               L250D:
0002CBr 2  A5 11                lda     LINNUM
0002CDr 2  88                   dey
0002CEr 2  D1 AA                cmp     (LOWTR),y
0002D0r 2  90 0C                bcc     L2520
0002D2r 2  F0 0A                beq     L2520
0002D4r 2               L2516:
0002D4r 2  88                   dey
0002D5r 2  B1 AA                lda     (LOWTR),y
0002D7r 2  AA                   tax
0002D8r 2  88                   dey
0002D9r 2  B1 AA                lda     (LOWTR),y
0002DBr 2  B0 D7                bcs     FL1
0002DDr 2               L251F:
0002DDr 2  18                   clc
0002DEr 2               .endif
0002DEr 2               L2520:
0002DEr 2  60                   rts
0002DFr 2               
0002DFr 2               ; ----------------------------------------------------------------------------
0002DFr 2               ; "NEW" STATEMENT
0002DFr 2               ; ----------------------------------------------------------------------------
0002DFr 2               NEW:
0002DFr 2  D0 FD                bne     L2520
0002E1r 2               SCRTCH:
0002E1r 2  A9 00                lda     #$00
0002E3r 2  A8                   tay
0002E4r 2  91 79                sta     (TXTTAB),y
0002E6r 2  C8                   iny
0002E7r 2  91 79                sta     (TXTTAB),y
0002E9r 2  A5 79                lda     TXTTAB
0002EBr 2               .ifdef CONFIG_2
0002EBr 2               		clc
0002EBr 2               .endif
0002EBr 2  69 02                adc     #$02
0002EDr 2  85 7B                sta     VARTAB
0002EFr 2  A5 7A                lda     TXTTAB+1
0002F1r 2  69 00                adc     #$00
0002F3r 2  85 7C                sta     VARTAB+1
0002F5r 2               ; ----------------------------------------------------------------------------
0002F5r 2               SETPTRS:
0002F5r 2  20 rr rr             jsr     STXTPT
0002F8r 2               .ifdef CONFIG_11A
0002F8r 2                       lda     #$00
0002F8r 2               
0002F8r 2               ; ----------------------------------------------------------------------------
0002F8r 2               ; "CLEAR" STATEMENT
0002F8r 2               ; ----------------------------------------------------------------------------
0002F8r 2               CLEAR:
0002F8r 2                       bne     L256A
0002F8r 2               .endif
0002F8r 2               CLEARC:
0002F8r 2               .ifdef KBD
0002F8r 2                       lda     #<CONST_MEMSIZ
0002F8r 2                       ldy     #>CONST_MEMSIZ
0002F8r 2               .else
0002F8r 2  A5 85                lda     MEMSIZ
0002FAr 2  A4 86                ldy     MEMSIZ+1
0002FCr 2               .endif
0002FCr 2  85 81                sta     FRETOP
0002FEr 2  84 82                sty     FRETOP+1
000300r 2               .ifdef CONFIG_CBM_ALL
000300r 2                       jsr     CLALL
000300r 2               .endif
000300r 2  A5 7B                lda     VARTAB
000302r 2  A4 7C                ldy     VARTAB+1
000304r 2  85 7D                sta     ARYTAB
000306r 2  84 7E                sty     ARYTAB+1
000308r 2  85 7F                sta     STREND
00030Ar 2  84 80                sty     STREND+1
00030Cr 2  20 rr rr             jsr     RESTORE
00030Fr 2               ; ----------------------------------------------------------------------------
00030Fr 2               STKINI:
00030Fr 2  A2 68                ldx     #TEMPST
000311r 2  86 65                stx     TEMPPT
000313r 2  68                   pla
000314r 2               .ifdef CONFIG_2
000314r 2               		tay
000314r 2               .else
000314r 2  8D FD 01             sta     STACK+STACK_TOP+1
000317r 2               .endif
000317r 2  68                   pla
000318r 2               .ifndef CONFIG_2
000318r 2  8D FE 01             sta     STACK+STACK_TOP+2
00031Br 2               .endif
00031Br 2  A2 FC                ldx     #STACK_TOP
00031Dr 2  9A                   txs
00031Er 2               .ifdef CONFIG_2
00031Er 2                       pha
00031Er 2                       tya
00031Er 2                       pha
00031Er 2               .endif
00031Er 2  A9 00                lda     #$00
000320r 2  85 8C                sta     OLDTEXT+1
000322r 2  85 61                sta     SUBFLG
000324r 2               L256A:
000324r 2  60                   rts
000325r 2               
000325r 2               ; ----------------------------------------------------------------------------
000325r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000325r 2               ; ----------------------------------------------------------------------------
000325r 2               STXTPT:
000325r 2  18                   clc
000326r 2  A5 79                lda     TXTTAB
000328r 2  69 FF                adc     #$FF
00032Ar 2  85 C3                sta     TXTPTR
00032Cr 2  A5 7A                lda     TXTTAB+1
00032Er 2  69 FF                adc     #$FF
000330r 2  85 C4                sta     TXTPTR+1
000332r 2  60                   rts
000333r 2               
000333r 2               ; ----------------------------------------------------------------------------
000333r 2               .ifdef KBD
000333r 2               LE4C0:
000333r 2                       ldy     #<LE444
000333r 2                       ldx     #>LE444
000333r 2               LE4C4:
000333r 2                       jsr     LFFD6
000333r 2                       jsr     LFFED
000333r 2                       lda     $0504
000333r 2                       clc
000333r 2                       adc     #$08
000333r 2                       sta     $0504
000333r 2                       rts
000333r 2               
000333r 2               CMPJMPADRS:
000333r 2                       lda     1,x
000333r 2                       cmp     JMPADRS+2
000333r 2                       bne     LE4DE
000333r 2                       lda     0,x
000333r 2                       cmp     JMPADRS+1
000333r 2               LE4DE:
000333r 2                       rts
000333r 2               .endif
000333r 2               
000333r 2               ; ----------------------------------------------------------------------------
000333r 2               ; "LIST" STATEMENT
000333r 2               ; ----------------------------------------------------------------------------
000333r 2               LIST:
000333r 2               .ifdef KBD
000333r 2                       jsr     LE440
000333r 2                       bne     LE4DE
000333r 2                       pla
000333r 2                       pla
000333r 2               L25A6:
000333r 2                       jsr     CRDO
000333r 2               .else
000333r 2                   .ifdef AIM65
000333r 2                       pha
000333r 2                       lda     #$00
000333r 2               LB4BF:
000333r 2                       sta     INPUTFLG
000333r 2                       pla
000333r 2                   .endif
000333r 2                 .ifdef MICROTAN
000333r 2                       php
000333r 2                       jmp     LE21C ; patch
000333r 2               LC57E:
000333r 2                  .elseif .def(AIM65) || .def(SYM1)
000333r 2                       php
000333r 2                       jsr     LINGET
000333r 2               LC57E:
000333r 2                 .else
000333r 2  90 06                bcc     L2581
000335r 2  F0 04                beq     L2581
000337r 2  C9 A4                cmp     #TOKEN_MINUS
000339r 2  D0 E9                bne     L256A
00033Br 2               L2581:
00033Br 2  20 rr rr             jsr     LINGET
00033Er 2                 .endif
00033Er 2  20 rr rr             jsr     FNDLIN
000341r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000341r 2                       plp
000341r 2                       beq     L2598
000341r 2                 .endif
000341r 2  20 C2 00             jsr     CHRGOT
000344r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000344r 2                       beq     L25A6
000344r 2                 .else
000344r 2  F0 0C                beq     L2598
000346r 2                 .endif
000346r 2  C9 A4                cmp     #TOKEN_MINUS
000348r 2  D0 94                bne     L2520
00034Ar 2  20 BC 00             jsr     CHRGET
00034Dr 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00034Dr 2                       beq     L2598
00034Dr 2                       jsr     LINGET
00034Dr 2                       beq     L25A6
00034Dr 2                       rts
00034Dr 2                 .else
00034Dr 2  20 rr rr             jsr     LINGET
000350r 2  D0 8C                bne     L2520
000352r 2                 .endif
000352r 2               L2598:
000352r 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
000352r 2  68                   pla
000353r 2  68                   pla
000354r 2  A5 11                lda     LINNUM
000356r 2  05 12                ora     LINNUM+1
000358r 2  D0 06                bne     L25A6
00035Ar 2                 .endif
00035Ar 2  A9 FF                lda     #$FF
00035Cr 2  85 11                sta     LINNUM
00035Er 2  85 12                sta     LINNUM+1
000360r 2               L25A6:
000360r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000360r 2                       pla
000360r 2                       pla
000360r 2                 .endif
000360r 2               L25A6X:
000360r 2               .endif
000360r 2  A0 01                ldy     #$01
000362r 2               .ifdef CONFIG_DATAFLG
000362r 2  84 60                sty     DATAFLG
000364r 2               .endif
000364r 2  B1 AA                lda     (LOWTRX),y
000366r 2  F0 41                beq     L25E5
000368r 2               .ifdef MICROTAN
000368r 2                       jmp     LE21F
000368r 2               LC5A9:
000368r 2               .else
000368r 2  20 rr rr             jsr     ISCNTC
00036Br 2               .endif
00036Br 2               .ifndef KBD
00036Br 2  20 rr rr             jsr     CRDO
00036Er 2               .endif
00036Er 2  C8                   iny
00036Fr 2  B1 AA                lda     (LOWTRX),y
000371r 2  AA                   tax
000372r 2  C8                   iny
000373r 2  B1 AA                lda     (LOWTRX),y
000375r 2  C5 12                cmp     LINNUM+1
000377r 2  D0 04                bne     L25C1
000379r 2  E4 11                cpx     LINNUM
00037Br 2  F0 02                beq     L25C3
00037Dr 2               L25C1:
00037Dr 2  B0 2A                bcs     L25E5
00037Fr 2               ; ---LIST ONE LINE----------------
00037Fr 2               L25C3:
00037Fr 2  84 97                sty     FORPNT
000381r 2  20 rr rr             jsr     LINPRT
000384r 2  A9 20                lda     #$20
000386r 2               L25CA:
000386r 2  A4 97                ldy     FORPNT
000388r 2  29 7F                and     #$7F
00038Ar 2               L25CE:
00038Ar 2  20 rr rr             jsr     OUTDO
00038Dr 2               .ifdef CONFIG_DATAFLG
00038Dr 2  C9 22                cmp     #$22
00038Fr 2  D0 06                bne     LA519
000391r 2  A5 60                lda     DATAFLG
000393r 2  49 FF                eor     #$FF
000395r 2  85 60                sta     DATAFLG
000397r 2               LA519:
000397r 2               .endif
000397r 2  C8                   iny
000398r 2               .ifdef CONFIG_11
000398r 2                       beq     L25E5
000398r 2               .endif
000398r 2  B1 AA                lda     (LOWTRX),y
00039Ar 2  D0 10                bne     L25E8
00039Cr 2  A8                   tay
00039Dr 2  B1 AA                lda     (LOWTRX),y
00039Fr 2  AA                   tax
0003A0r 2  C8                   iny
0003A1r 2  B1 AA                lda     (LOWTRX),y
0003A3r 2  86 AA                stx     LOWTRX
0003A5r 2  85 AB                sta     LOWTRX+1
0003A7r 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
0003A7r 2                       bne     L25A6X
0003A7r 2               .else
0003A7r 2  D0 B7                bne     L25A6
0003A9r 2               .endif
0003A9r 2               L25E5:
0003A9r 2               .ifdef AIM65
0003A9r 2                       lda     INPUTFLG
0003A9r 2                       beq     L25E5a
0003A9r 2                       jsr     CRDO
0003A9r 2                       jsr     CRDO
0003A9r 2                       lda     #$1a
0003A9r 2                       jsr     OUTDO
0003A9r 2                       jsr     $e50a
0003A9r 2               L25E5a:
0003A9r 2               .endif
0003A9r 2  4C rr rr             jmp     RESTART
0003ACr 2               L25E8:
0003ACr 2  10 DC                bpl     L25CE
0003AEr 2               .ifdef CONFIG_DATAFLG
0003AEr 2  C9 FF                cmp     #$FF
0003B0r 2  F0 D8                beq     L25CE
0003B2r 2  24 60                bit     DATAFLG
0003B4r 2  30 D4                bmi     L25CE
0003B6r 2               .endif
0003B6r 2  38                   sec
0003B7r 2  E9 7F                sbc     #$7F
0003B9r 2  AA                   tax
0003BAr 2  84 97                sty     FORPNT
0003BCr 2  A0 FF                ldy     #$FF
0003BEr 2               L25F2:
0003BEr 2  CA                   dex
0003BFr 2  F0 08                beq     L25FD
0003C1r 2               L25F5:
0003C1r 2  C8                   iny
0003C2r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003C5r 2  10 FA                bpl     L25F5
0003C7r 2  30 F5                bmi     L25F2
0003C9r 2               L25FD:
0003C9r 2  C8                   iny
0003CAr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003CDr 2  30 B7                bmi     L25CA
0003CFr 2  20 rr rr             jsr     OUTDO
0003D2r 2  D0 F5                bne     L25FD	; always
0003D4r 2               
0003D4r 2               
0003D4r 1               .include "flow1.s"
0003D4r 2               .segment "CODE"
0003D4r 2               
0003D4r 2               ; ----------------------------------------------------------------------------
0003D4r 2               ; "FOR" STATEMENT
0003D4r 2               ;
0003D4r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003D4r 2               ; 2 -- TXTPTR
0003D4r 2               ; 2 -- LINE NUMBER
0003D4r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003D4r 2               ; 1 -- STEP SIGN
0003D4r 2               ; 5 -- STEP VALUE
0003D4r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003D4r 2               ; 1 -- FOR TOKEN ($81)
0003D4r 2               ; ----------------------------------------------------------------------------
0003D4r 2               FOR:
0003D4r 2  A9 80                lda     #$80
0003D6r 2  85 61                sta     SUBFLG
0003D8r 2  20 rr rr             jsr     LET
0003DBr 2  20 rr rr             jsr     GTFORPNT
0003DEr 2  D0 05                bne     L2619
0003E0r 2  8A                   txa
0003E1r 2  69 0D                adc     #FOR_STACK1
0003E3r 2  AA                   tax
0003E4r 2  9A                   txs
0003E5r 2               L2619:
0003E5r 2  68                   pla
0003E6r 2  68                   pla
0003E7r 2  A9 08                lda     #FOR_STACK2
0003E9r 2  20 rr rr             jsr     CHKMEM
0003ECr 2  20 rr rr             jsr     DATAN
0003EFr 2  18                   clc
0003F0r 2  98                   tya
0003F1r 2  65 C3                adc     TXTPTR
0003F3r 2  48                   pha
0003F4r 2  A5 C4                lda     TXTPTR+1
0003F6r 2  69 00                adc     #$00
0003F8r 2  48                   pha
0003F9r 2  A5 88                lda     CURLIN+1
0003FBr 2  48                   pha
0003FCr 2  A5 87                lda     CURLIN
0003FEr 2  48                   pha
0003FFr 2  A9 9D                lda     #TOKEN_TO
000401r 2  20 rr rr             jsr     SYNCHR
000404r 2  20 rr rr             jsr     CHKNUM
000407r 2  20 rr rr             jsr     FRMNUM
00040Ar 2  A5 B0                lda     FACSIGN
00040Cr 2  09 7F                ora     #$7F
00040Er 2  25 AD                and     FAC+1
000410r 2  85 AD                sta     FAC+1
000412r 2  A9 rr                lda     #<STEP
000414r 2  A0 rr                ldy     #>STEP
000416r 2  85 71                sta     INDEX
000418r 2  84 72                sty     INDEX+1
00041Ar 2  4C rr rr             jmp     FRM_STACK3
00041Dr 2               
00041Dr 2               ; ----------------------------------------------------------------------------
00041Dr 2               ; "STEP" PHRASE OF "FOR" STATEMENT
00041Dr 2               ; ----------------------------------------------------------------------------
00041Dr 2               STEP:
00041Dr 2  A9 rr                lda     #<CON_ONE
00041Fr 2  A0 rr                ldy     #>CON_ONE
000421r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000424r 2  20 C2 00             jsr     CHRGOT
000427r 2  C9 A2                cmp     #TOKEN_STEP
000429r 2  D0 06                bne     L2665
00042Br 2  20 BC 00             jsr     CHRGET
00042Er 2  20 rr rr             jsr     FRMNUM
000431r 2               L2665:
000431r 2  20 rr rr             jsr     SIGN
000434r 2  20 rr rr             jsr     FRM_STACK2
000437r 2  A5 98                lda     FORPNT+1
000439r 2  48                   pha
00043Ar 2  A5 97                lda     FORPNT
00043Cr 2  48                   pha
00043Dr 2  A9 81                lda     #$81
00043Fr 2  48                   pha
000440r 2               
000440r 2               ; ----------------------------------------------------------------------------
000440r 2               ; PERFORM NEXT STATEMENT
000440r 2               ; ----------------------------------------------------------------------------
000440r 2               NEWSTT:
000440r 2  20 rr rr             jsr     ISCNTC
000443r 2  A5 C3                lda     TXTPTR
000445r 2  A4 C4                ldy     TXTPTR+1
000447r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000447r 2                       cpy     #>INPUTBUFFER
000447r 2                 .ifdef CBM2
000447r 2                       nop
000447r 2                 .endif
000447r 2                       beq     LC6D4
000447r 2               .else
000447r 2               ; BUG on AppleSoft I,
000447r 2               ; fixed differently on AppleSoft II (ldx/inx)
000447r 2  F0 06                beq     L2683
000449r 2               .endif
000449r 2  85 8B                sta     OLDTEXT
00044Br 2  84 8C                sty     OLDTEXT+1
00044Dr 2               LC6D4:
00044Dr 2  A0 00                ldy     #$00
00044Fr 2               L2683:
00044Fr 2  B1 C3                lda     (TXTPTR),y
000451r 2               .ifndef CONFIG_11
000451r 2  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
000453r 2  C9 3A                cmp     #$3A
000455r 2  F0 1D                beq     NEWSTT2
000457r 2               SYNERR1:
000457r 2  4C rr rr             jmp     SYNERR
00045Ar 2               LA5DC:
00045Ar 2               .else
00045Ar 2                       bne     COLON; new: 1 cycle more on ":" case
00045Ar 2               .endif
00045Ar 2  A0 02                ldy     #$02
00045Cr 2  B1 C3                lda     (TXTPTR),y
00045Er 2  18                   clc
00045Fr 2               .ifdef CONFIG_2
00045Fr 2                       jeq     L2701
00045Fr 2               .else
00045Fr 2  F0 6E                beq     L2701
000461r 2               .endif
000461r 2  C8                   iny
000462r 2  B1 C3                lda     (TXTPTR),y
000464r 2  85 87                sta     CURLIN
000466r 2  C8                   iny
000467r 2  B1 C3                lda     (TXTPTR),y
000469r 2  85 88                sta     CURLIN+1
00046Br 2  98                   tya
00046Cr 2  65 C3                adc     TXTPTR
00046Er 2  85 C3                sta     TXTPTR
000470r 2  90 02                bcc     NEWSTT2
000472r 2  E6 C4                inc     TXTPTR+1
000474r 2               NEWSTT2:
000474r 2  20 BC 00             jsr     CHRGET
000477r 2  20 rr rr             jsr     EXECUTE_STATEMENT
00047Ar 2  4C rr rr             jmp     NEWSTT
00047Dr 2               
00047Dr 2               ; ----------------------------------------------------------------------------
00047Dr 2               ; EXECUTE A STATEMENT
00047Dr 2               ;
00047Dr 2               ; (A) IS FIRST CHAR OF STATEMENT
00047Dr 2               ; CARRY IS SET
00047Dr 2               ; ----------------------------------------------------------------------------
00047Dr 2               EXECUTE_STATEMENT:
00047Dr 2               .ifndef CONFIG_11A
00047Dr 2  F0 79                beq     RET1
00047Fr 2               .else
00047Fr 2                       beq     RET2
00047Fr 2               .endif
00047Fr 2               .ifndef CONFIG_11
00047Fr 2  38                   sec
000480r 2               .endif
000480r 2               EXECUTE_STATEMENT1:
000480r 2  E9 80                sbc     #$80
000482r 2               .ifndef CONFIG_11
000482r 2  B0 03 4C rr          jcc     LET	; old: 1 cycle more on instr.
000486r 2  rr           
000487r 2               .else
000487r 2                       bcc     LET1; new: 1 cycle more on assignment
000487r 2               .endif
000487r 2  C9 1C                cmp     #NUM_TOKENS
000489r 2               .ifdef CONFIG_2
000489r 2                       bcs     LC721
000489r 2               .else
000489r 2  B0 CC                bcs     SYNERR1
00048Br 2               .endif
00048Br 2  0A                   asl     a
00048Cr 2  A8                   tay
00048Dr 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
000490r 2  48                   pha
000491r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000494r 2  48                   pha
000495r 2  4C BC 00             jmp     CHRGET
000498r 2               
000498r 2               .ifdef CONFIG_11
000498r 2               LET1:
000498r 2                       jmp     LET
000498r 2               
000498r 2               COLON:
000498r 2                       cmp     #$3A
000498r 2                       beq     NEWSTT2
000498r 2               SYNERR1:
000498r 2                       jmp     SYNERR
000498r 2               .endif
000498r 2               
000498r 2               .ifdef CONFIG_2; GO TO
000498r 2               LC721:
000498r 2                       cmp     #TOKEN_GO-$80
000498r 2                       bne     SYNERR1
000498r 2                       jsr     CHRGET
000498r 2                       lda     #TOKEN_TO
000498r 2                       jsr     SYNCHR
000498r 2                       jmp     GOTO
000498r 2               .endif
000498r 2               
000498r 2               ; ----------------------------------------------------------------------------
000498r 2               ; "RESTORE" STATEMENT
000498r 2               ; ----------------------------------------------------------------------------
000498r 2               RESTORE:
000498r 2  38                   sec
000499r 2  A5 79                lda     TXTTAB
00049Br 2  E9 01                sbc     #$01
00049Dr 2  A4 7A                ldy     TXTTAB+1
00049Fr 2  B0 01                bcs     SETDA
0004A1r 2  88                   dey
0004A2r 2               SETDA:
0004A2r 2  85 8F                sta     DATPTR
0004A4r 2  84 90                sty     DATPTR+1
0004A6r 2               RET2:
0004A6r 2  60                   rts
0004A7r 2               
0004A7r 2               .include "iscntc.s"
0004A7r 3               .segment "CODE"
0004A7r 3               ; ----------------------------------------------------------------------------
0004A7r 3               ; SEE IF CONTROL-C TYPED
0004A7r 3               ; ----------------------------------------------------------------------------
0004A7r 3               .ifndef CONFIG_CBM_ALL
0004A7r 3               .include "cbm_iscntc.s"
0004A7r 4               ; nothing - ISCNTC is a KERNAL function
0004A7r 4               
0004A7r 3               .endif
0004A7r 3               .ifdef KBD
0004A7r 3               .include "kbd_iscntc.s"
0004A7r 3               .endif
0004A7r 3               .ifdef OSI
0004A7r 3               .include "osi_iscntc.s"
0004A7r 4               .segment "CODE"
0004A7r 4               ISCNTC:
0004A7r 4  4C F1 FF             jmp     MONISCNTC
0004AAr 4  EA                   nop
0004ABr 4  EA                   nop
0004ACr 4  EA                   nop
0004ADr 4  EA                   nop
0004AEr 4  4A                   lsr     a
0004AFr 4  90 F5                bcc     RET2
0004B1r 4  20 rr rr             jsr     GETLN
0004B4r 4  C9 03                cmp     #$03
0004B6r 4               ;!!! *used*to* run into "STOP"
0004B6r 4               
0004B6r 3               .endif
0004B6r 3               .ifdef APPLE
0004B6r 3               .include "apple_iscntc.s"
0004B6r 3               .endif
0004B6r 3               .ifdef KIM
0004B6r 3               .include "kim_iscntc.s"
0004B6r 3               .endif
0004B6r 3               .ifdef MICROTAN
0004B6r 3               .include "microtan_iscntc.s"
0004B6r 3               .endif
0004B6r 3               .ifdef AIM65
0004B6r 3               .include "aim65_iscntc.s"
0004B6r 3               .endif
0004B6r 3               .ifdef SYM1
0004B6r 3               .include "sym1_iscntc.s"
0004B6r 3               .endif
0004B6r 3               .ifdef EATER
0004B6r 3               .include "eater_iscntc.s"
0004B6r 3               .endif
0004B6r 3               ;!!! runs into "STOP"
0004B6r 3               
0004B6r 2               ;!!! runs into "STOP"
0004B6r 2               ; ----------------------------------------------------------------------------
0004B6r 2               ; "STOP" STATEMENT
0004B6r 2               ; ----------------------------------------------------------------------------
0004B6r 2               STOP:
0004B6r 2  B0 01                bcs     END2
0004B8r 2               
0004B8r 2               ; ----------------------------------------------------------------------------
0004B8r 2               ; "END" STATEMENT
0004B8r 2               ; ----------------------------------------------------------------------------
0004B8r 2               END:
0004B8r 2  18                   clc
0004B9r 2               END2:
0004B9r 2  D0 3D                bne     RET1
0004BBr 2  A5 C3                lda     TXTPTR
0004BDr 2  A4 C4                ldy     TXTPTR+1
0004BFr 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
0004BFr 2               ; BUG on AppleSoft I
0004BFr 2               ; fix exists on AppleSoft II
0004BFr 2               ; TXTPTR+1 will always be > 0
0004BFr 2                       ldx     CURLIN+1
0004BFr 2                       inx
0004BFr 2               .endif
0004BFr 2  F0 0C                beq     END4
0004C1r 2  85 8B                sta     OLDTEXT
0004C3r 2  84 8C                sty     OLDTEXT+1
0004C5r 2               CONTROL_C_TYPED:
0004C5r 2  A5 87                lda     CURLIN
0004C7r 2  A4 88                ldy     CURLIN+1
0004C9r 2  85 89                sta     OLDLIN
0004CBr 2  84 8A                sty     OLDLIN+1
0004CDr 2               END4:
0004CDr 2  68                   pla
0004CEr 2  68                   pla
0004CFr 2               L2701:
0004CFr 2  A9 rr                lda     #<QT_BREAK
0004D1r 2  A0 rr                ldy     #>QT_BREAK
0004D3r 2               .ifndef KBD
0004D3r 2  A2 00                ldx     #$00
0004D5r 2  86 64                stx     Z14
0004D7r 2               .endif
0004D7r 2  90 03                bcc     L270E
0004D9r 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004DCr 2               L270E:
0004DCr 2  4C rr rr             jmp     RESTART
0004DFr 2               .ifdef KBD
0004DFr 2               LE664:
0004DFr 2                       tay
0004DFr 2                       jmp     SNGFLT
0004DFr 2               .endif
0004DFr 2               
0004DFr 2               ; ----------------------------------------------------------------------------
0004DFr 2               ; "CONT" COMMAND
0004DFr 2               ; ----------------------------------------------------------------------------
0004DFr 2               CONT:
0004DFr 2  D0 17                bne     RET1
0004E1r 2  A2 1E                ldx     #ERR_CANTCONT
0004E3r 2  A4 8C                ldy     OLDTEXT+1
0004E5r 2  D0 03                bne     L271C
0004E7r 2  4C rr rr             jmp     ERROR
0004EAr 2               L271C:
0004EAr 2  A5 8B                lda     OLDTEXT
0004ECr 2  85 C3                sta     TXTPTR
0004EEr 2  84 C4                sty     TXTPTR+1
0004F0r 2  A5 89                lda     OLDLIN
0004F2r 2  A4 8A                ldy     OLDLIN+1
0004F4r 2  85 87                sta     CURLIN
0004F6r 2  84 88                sty     CURLIN+1
0004F8r 2               RET1:
0004F8r 2  60                   rts
0004F9r 2               
0004F9r 2               .ifdef KBD
0004F9r 2               PRT:
0004F9r 2                       jsr     GETBYT
0004F9r 2                       txa
0004F9r 2               ; not ROR bug safe
0004F9r 2                       ror     a
0004F9r 2                       ror     a
0004F9r 2                       ror     a
0004F9r 2                       sta     $8F
0004F9r 2                       rts
0004F9r 2               
0004F9r 2               LE68C:
0004F9r 2                       ldy     #$12
0004F9r 2               LE68E:
0004F9r 2                       lda     LEA30,y
0004F9r 2                       sta     $03A2,y
0004F9r 2                       dey
0004F9r 2                       bpl     LE68E
0004F9r 2                       rts
0004F9r 2               .endif
0004F9r 2               
0004F9r 2               .ifndef AIM65
0004F9r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004F9r 2               ; CBM1 has the keyword removed,
0004F9r 2               ; but the code is still here
0004F9r 2               NULL:
0004F9r 2  20 rr rr             jsr     GETBYT
0004FCr 2  D0 FA                bne     RET1
0004FEr 2  E8                   inx
0004FFr 2  E0 0A                cpx     #NULL_MAX
000501r 2  B0 04                bcs     L2739
000503r 2  CA                   dex
000504r 2  86 0D                stx     Z15
000506r 2               L2738:
000506r 2  60                   rts
000507r 2               L2739:
000507r 2  4C rr rr             jmp     IQERR
00050Ar 2               .endif
00050Ar 2               .ifndef CONFIG_11A
00050Ar 2               CLEAR:
00050Ar 2  D0 EC                bne     RET1
00050Cr 2  4C rr rr             jmp     CLEARC
00050Fr 2               .endif
00050Fr 2               .endif
00050Fr 2               
00050Fr 1               .include "loadsave.s"
00050Fr 2               .segment "CODE"
00050Fr 2               
00050Fr 2               .ifdef APPLE
00050Fr 2               .include "apple_loadsave.s"
00050Fr 2               .endif
00050Fr 2               .ifdef KIM
00050Fr 2               .include "kim_loadsave.s"
00050Fr 2               .endif
00050Fr 2               .ifdef MICROTAN
00050Fr 2               .include "microtan_loadsave.s"
00050Fr 2               .endif
00050Fr 2               .ifdef AIM65
00050Fr 2               .include "aim65_loadsave.s"
00050Fr 2               .endif
00050Fr 2               .ifdef SYM1
00050Fr 2               .include "sym1_loadsave.s"
00050Fr 2               .endif
00050Fr 2               
00050Fr 1               .include "flow2.s"
00050Fr 2               .segment "CODE"
00050Fr 2               ; ----------------------------------------------------------------------------
00050Fr 2               ; "RUN" COMMAND
00050Fr 2               ; ----------------------------------------------------------------------------
00050Fr 2               RUN:
00050Fr 2  D0 03                bne     L27CF
000511r 2  4C rr rr             jmp     SETPTRS
000514r 2               L27CF:
000514r 2  20 rr rr             jsr     CLEARC
000517r 2  4C rr rr             jmp     L27E9
00051Ar 2               
00051Ar 2               ; ----------------------------------------------------------------------------
00051Ar 2               ; "GOSUB" STATEMENT
00051Ar 2               ;
00051Ar 2               ; LEAVES 7 BYTES ON STACK:
00051Ar 2               ; 2 -- RETURN ADDRESS (NEWSTT)
00051Ar 2               ; 2 -- TXTPTR
00051Ar 2               ; 2 -- LINE #
00051Ar 2               ; 1 -- GOSUB TOKEN
00051Ar 2               ; ----------------------------------------------------------------------------
00051Ar 2               GOSUB:
00051Ar 2  A9 03                lda     #$03
00051Cr 2  20 rr rr             jsr     CHKMEM
00051Fr 2  A5 C4                lda     TXTPTR+1
000521r 2  48                   pha
000522r 2  A5 C3                lda     TXTPTR
000524r 2  48                   pha
000525r 2  A5 88                lda     CURLIN+1
000527r 2  48                   pha
000528r 2  A5 87                lda     CURLIN
00052Ar 2  48                   pha
00052Br 2  A9 8C                lda     #TOKEN_GOSUB
00052Dr 2  48                   pha
00052Er 2               L27E9:
00052Er 2  20 C2 00             jsr     CHRGOT
000531r 2  20 rr rr             jsr     GOTO
000534r 2  4C rr rr             jmp     NEWSTT
000537r 2               
000537r 2               ; ----------------------------------------------------------------------------
000537r 2               ; "GOTO" STATEMENT
000537r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000537r 2               ; ----------------------------------------------------------------------------
000537r 2               GOTO:
000537r 2  20 rr rr             jsr     LINGET
00053Ar 2  20 rr rr             jsr     REMN
00053Dr 2  A5 88                lda     CURLIN+1
00053Fr 2  C5 12                cmp     LINNUM+1
000541r 2  B0 0B                bcs     L2809
000543r 2  98                   tya
000544r 2  38                   sec
000545r 2  65 C3                adc     TXTPTR
000547r 2  A6 C4                ldx     TXTPTR+1
000549r 2  90 07                bcc     L280D
00054Br 2  E8                   inx
00054Cr 2  B0 04                bcs     L280D
00054Er 2               L2809:
00054Er 2  A5 79                lda     TXTTAB
000550r 2  A6 7A                ldx     TXTTAB+1
000552r 2               L280D:
000552r 2               .ifdef KBD
000552r 2                       jsr     LF457
000552r 2                       bne     UNDERR
000552r 2               .else
000552r 2  20 rr rr             jsr     FL1
000555r 2  90 1E                bcc     UNDERR
000557r 2               .endif
000557r 2  A5 AA                lda     LOWTRX
000559r 2  E9 01                sbc     #$01
00055Br 2  85 C3                sta     TXTPTR
00055Dr 2  A5 AB                lda     LOWTRX+1
00055Fr 2  E9 00                sbc     #$00
000561r 2  85 C4                sta     TXTPTR+1
000563r 2               L281E:
000563r 2  60                   rts
000564r 2               
000564r 2               ; ----------------------------------------------------------------------------
000564r 2               ; "POP" AND "RETURN" STATEMENTS
000564r 2               ; ----------------------------------------------------------------------------
000564r 2               POP:
000564r 2  D0 FD                bne     L281E
000566r 2  A9 FF                lda     #$FF
000568r 2               .ifdef CONFIG_2A
000568r 2                       sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000568r 2               .else
000568r 2  85 97                sta     FORPNT
00056Ar 2               .endif
00056Ar 2  20 rr rr             jsr     GTFORPNT
00056Dr 2  9A                   txs
00056Er 2  C9 8C                cmp     #TOKEN_GOSUB
000570r 2  F0 0B                beq     RETURN
000572r 2  A2 04                ldx     #ERR_NOGOSUB
000574r 2  2C                   .byte   $2C
000575r 2               UNDERR:
000575r 2  A2 0E                ldx     #ERR_UNDEFSTAT
000577r 2  4C rr rr             jmp     ERROR
00057Ar 2               ; ----------------------------------------------------------------------------
00057Ar 2               SYNERR2:
00057Ar 2  4C rr rr             jmp     SYNERR
00057Dr 2               ; ----------------------------------------------------------------------------
00057Dr 2               RETURN:
00057Dr 2  68                   pla
00057Er 2  68                   pla
00057Fr 2  85 87                sta     CURLIN
000581r 2  68                   pla
000582r 2  85 88                sta     CURLIN+1
000584r 2  68                   pla
000585r 2  85 C3                sta     TXTPTR
000587r 2  68                   pla
000588r 2  85 C4                sta     TXTPTR+1
00058Ar 2               
00058Ar 2               ; ----------------------------------------------------------------------------
00058Ar 2               ; "DATA" STATEMENT
00058Ar 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00058Ar 2               ; ----------------------------------------------------------------------------
00058Ar 2               DATA:
00058Ar 2  20 rr rr             jsr     DATAN
00058Dr 2               
00058Dr 2               ; ----------------------------------------------------------------------------
00058Dr 2               ; ADD (Y) TO TXTPTR
00058Dr 2               ; ----------------------------------------------------------------------------
00058Dr 2               ADDON:
00058Dr 2  98                   tya
00058Er 2  18                   clc
00058Fr 2  65 C3                adc     TXTPTR
000591r 2  85 C3                sta     TXTPTR
000593r 2  90 02                bcc     L2852
000595r 2  E6 C4                inc     TXTPTR+1
000597r 2               L2852:
000597r 2  60                   rts
000598r 2               
000598r 2               ; ----------------------------------------------------------------------------
000598r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000598r 2               ; ----------------------------------------------------------------------------
000598r 2               DATAN:
000598r 2  A2 3A                ldx     #$3A
00059Ar 2  2C                   .byte   $2C
00059Br 2               REMN:
00059Br 2  A2 00                ldx     #$00
00059Dr 2  86 5B                stx     CHARAC
00059Fr 2  A0 00                ldy     #$00
0005A1r 2  84 5C                sty     ENDCHR
0005A3r 2               L285E:
0005A3r 2  A5 5C                lda     ENDCHR
0005A5r 2  A6 5B                ldx     CHARAC
0005A7r 2  85 5B                sta     CHARAC
0005A9r 2  86 5C                stx     ENDCHR
0005ABr 2               L2866:
0005ABr 2  B1 C3                lda     (TXTPTR),y
0005ADr 2  F0 E8                beq     L2852
0005AFr 2  C5 5C                cmp     ENDCHR
0005B1r 2  F0 E4                beq     L2852
0005B3r 2  C8                   iny
0005B4r 2  C9 22                cmp     #$22
0005B6r 2               .ifndef CONFIG_11
0005B6r 2  F0 EB                beq     L285E; old: swap & cont is faster
0005B8r 2  D0 F1                bne     L2866
0005BAr 2               .else
0005BAr 2                       bne     L2866; new: cont is faster
0005BAr 2                       beq     L285E
0005BAr 2               .endif
0005BAr 2               
0005BAr 2               ; ----------------------------------------------------------------------------
0005BAr 2               ; "IF" STATEMENT
0005BAr 2               ; ----------------------------------------------------------------------------
0005BAr 2               IF:
0005BAr 2  20 rr rr             jsr     FRMEVL
0005BDr 2  20 C2 00             jsr     CHRGOT
0005C0r 2  C9 88                cmp     #TOKEN_GOTO
0005C2r 2  F0 05                beq     L2884
0005C4r 2  A9 A0                lda     #TOKEN_THEN
0005C6r 2  20 rr rr             jsr     SYNCHR
0005C9r 2               L2884:
0005C9r 2  A5 AC                lda     FAC
0005CBr 2  D0 05                bne     L288D
0005CDr 2               
0005CDr 2               ; ----------------------------------------------------------------------------
0005CDr 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005CDr 2               ; ----------------------------------------------------------------------------
0005CDr 2               REM:
0005CDr 2  20 rr rr             jsr     REMN
0005D0r 2  F0 BB                beq     ADDON
0005D2r 2               L288D:
0005D2r 2  20 C2 00             jsr     CHRGOT
0005D5r 2  B0 03                bcs     L2895
0005D7r 2  4C rr rr             jmp     GOTO
0005DAr 2               L2895:
0005DAr 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005DDr 2               
0005DDr 2               ; ----------------------------------------------------------------------------
0005DDr 2               ; "ON" STATEMENT
0005DDr 2               ;
0005DDr 2               ; ON <EXP> GOTO <LIST>
0005DDr 2               ; ON <EXP> GOSUB <LIST>
0005DDr 2               ; ----------------------------------------------------------------------------
0005DDr 2               ON:
0005DDr 2  20 rr rr             jsr     GETBYT
0005E0r 2  48                   pha
0005E1r 2  C9 8C                cmp     #TOKEN_GOSUB
0005E3r 2  F0 04                beq     L28A4
0005E5r 2               L28A0:
0005E5r 2  C9 88                cmp     #TOKEN_GOTO
0005E7r 2  D0 91                bne     SYNERR2
0005E9r 2               L28A4:
0005E9r 2  C6 AF                dec     FAC_LAST
0005EBr 2  D0 04                bne     L28AC
0005EDr 2  68                   pla
0005EEr 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005F1r 2               L28AC:
0005F1r 2  20 BC 00             jsr     CHRGET
0005F4r 2  20 rr rr             jsr     LINGET
0005F7r 2  C9 2C                cmp     #$2C
0005F9r 2  F0 EE                beq     L28A4
0005FBr 2  68                   pla
0005FCr 2               L28B7:
0005FCr 2  60                   rts
0005FDr 2               
0005FDr 1               .include "misc1.s"
0005FDr 2               .segment "CODE"
0005FDr 2               
0005FDr 2               ; ----------------------------------------------------------------------------
0005FDr 2               ; CONVERT LINE NUMBER
0005FDr 2               ; ----------------------------------------------------------------------------
0005FDr 2               LINGET:
0005FDr 2  A2 00                ldx     #$00
0005FFr 2  86 11                stx     LINNUM
000601r 2  86 12                stx     LINNUM+1
000603r 2               L28BE:
000603r 2  B0 F7                bcs     L28B7
000605r 2  E9 2F                sbc     #$2F
000607r 2  85 5B                sta     CHARAC
000609r 2  A5 12                lda     LINNUM+1
00060Br 2  85 71                sta     INDEX
00060Dr 2  C9 19                cmp     #$19
00060Fr 2  B0 D4                bcs     L28A0
000611r 2               ; <<<<<DANGEROUS CODE>>>>>
000611r 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
000611r 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
000611r 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
000611r 2               ; FOR OTHER CALLS TO LINGET.
000611r 2               ;
000611r 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
000611r 2               ; THEN TYPE "GO TO 437761".
000611r 2               ;
000611r 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
000611r 2               ; THE PROBLEM.  ($AB00 - $ABFF)
000611r 2               ; <<<<<DANGEROUS CODE>>>>>
000611r 2  A5 11                lda     LINNUM
000613r 2  0A                   asl     a
000614r 2  26 71                rol     INDEX
000616r 2  0A                   asl     a
000617r 2  26 71                rol     INDEX
000619r 2  65 11                adc     LINNUM
00061Br 2  85 11                sta     LINNUM
00061Dr 2  A5 71                lda     INDEX
00061Fr 2  65 12                adc     LINNUM+1
000621r 2  85 12                sta     LINNUM+1
000623r 2  06 11                asl     LINNUM
000625r 2  26 12                rol     LINNUM+1
000627r 2  A5 11                lda     LINNUM
000629r 2  65 5B                adc     CHARAC
00062Br 2  85 11                sta     LINNUM
00062Dr 2  90 02                bcc     L28EC
00062Fr 2  E6 12                inc     LINNUM+1
000631r 2               L28EC:
000631r 2  20 BC 00             jsr     CHRGET
000634r 2  4C rr rr             jmp     L28BE
000637r 2               
000637r 2               ; ----------------------------------------------------------------------------
000637r 2               ; "LET" STATEMENT
000637r 2               ;
000637r 2               ; LET <VAR> = <EXP>
000637r 2               ; <VAR> = <EXP>
000637r 2               ; ----------------------------------------------------------------------------
000637r 2               LET:
000637r 2  20 rr rr             jsr     PTRGET
00063Ar 2  85 97                sta     FORPNT
00063Cr 2  84 98                sty     FORPNT+1
00063Er 2  A9 AB                lda     #TOKEN_EQUAL
000640r 2  20 rr rr             jsr     SYNCHR
000643r 2               .ifndef CONFIG_SMALL
000643r 2                       lda     VALTYP+1
000643r 2                       pha
000643r 2               .endif
000643r 2  A5 5F                lda     VALTYP
000645r 2  48                   pha
000646r 2  20 rr rr             jsr     FRMEVL
000649r 2  68                   pla
00064Ar 2  2A                   rol     a
00064Br 2  20 rr rr             jsr     CHKVAL
00064Er 2  D0 03                bne     LETSTRING
000650r 2               .ifndef CONFIG_SMALL
000650r 2                       pla
000650r 2               LET2:
000650r 2                       bpl     L2923
000650r 2                       jsr     ROUND_FAC
000650r 2                       jsr     AYINT
000650r 2                       ldy     #$00
000650r 2                       lda     FAC+3
000650r 2                       sta     (FORPNT),y
000650r 2                       iny
000650r 2                       lda     FAC+4
000650r 2                       sta     (FORPNT),y
000650r 2                       rts
000650r 2               L2923:
000650r 2               .endif
000650r 2               
000650r 2               ; ----------------------------------------------------------------------------
000650r 2               ; REAL VARIABLE = EXPRESSION
000650r 2               ; ----------------------------------------------------------------------------
000650r 2  4C rr rr             jmp     SETFOR
000653r 2               LETSTRING:
000653r 2               .ifndef CONFIG_SMALL
000653r 2                       pla
000653r 2               .endif
000653r 2               
000653r 2               ; ----------------------------------------------------------------------------
000653r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
000653r 2               ; ----------------------------------------------------------------------------
000653r 2               PUTSTR:
000653r 2               .ifdef CONFIG_CBM_ALL
000653r 2                       ldy     FORPNT+1
000653r 2                 .ifdef CBM1
000653r 2                       cpy     #$D0	; TI$
000653r 2                 .else
000653r 2                       cpy     #$DE
000653r 2                 .endif
000653r 2                       bne     LC92B
000653r 2                       jsr     FREFAC
000653r 2                       cmp     #$06
000653r 2                 .ifdef CBM2
000653r 2                       bne     IQERR1
000653r 2                 .else
000653r 2                       jne     IQERR
000653r 2                 .endif
000653r 2                       ldy     #$00
000653r 2                       sty     FAC
000653r 2                       sty     FACSIGN
000653r 2               LC8E8:
000653r 2                       sty     STRNG2
000653r 2                       jsr     LC91C
000653r 2                       jsr     MUL10
000653r 2                       inc     STRNG2
000653r 2                       ldy     STRNG2
000653r 2                       jsr     LC91C
000653r 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
000653r 2                       tax
000653r 2                       beq     LC902
000653r 2                       inx
000653r 2                       txa
000653r 2                       jsr     LD9BF
000653r 2               LC902:
000653r 2                       ldy     STRNG2
000653r 2                       iny
000653r 2                       cpy     #$06
000653r 2                       bne     LC8E8
000653r 2                       jsr     MUL10
000653r 2                       jsr     QINT
000653r 2                       ldx     #$02
000653r 2                       sei
000653r 2               LC912:
000653r 2                       lda     FAC+2,x
000653r 2                       sta     TISTR,x
000653r 2                       dex
000653r 2                       bpl     LC912
000653r 2                       cli
000653r 2                       rts
000653r 2               LC91C:
000653r 2                       lda     (INDEX),y
000653r 2                       jsr     CHRGOT2
000653r 2                       bcc     LC926
000653r 2               IQERR1:
000653r 2                       jmp     IQERR
000653r 2               LC926:
000653r 2                       sbc     #$2F
000653r 2                       jmp     ADDACC
000653r 2               LC92B:
000653r 2               .endif
000653r 2  A0 02                ldy     #$02
000655r 2  B1 AE                lda     (FAC_LAST-1),y
000657r 2  C5 82                cmp     FRETOP+1
000659r 2  90 17                bcc     L2946
00065Br 2  D0 07                bne     L2938
00065Dr 2  88                   dey
00065Er 2  B1 AE                lda     (FAC_LAST-1),y
000660r 2  C5 81                cmp     FRETOP
000662r 2  90 0E                bcc     L2946
000664r 2               L2938:
000664r 2  A4 AF                ldy     FAC_LAST
000666r 2  C4 7C                cpy     VARTAB+1
000668r 2  90 08                bcc     L2946
00066Ar 2  D0 0D                bne     L294D
00066Cr 2  A5 AE                lda     FAC_LAST-1
00066Er 2  C5 7B                cmp     VARTAB
000670r 2  B0 07                bcs     L294D
000672r 2               L2946:
000672r 2  A5 AE                lda     FAC_LAST-1
000674r 2  A4 AF                ldy     FAC_LAST
000676r 2  4C rr rr             jmp     L2963
000679r 2               L294D:
000679r 2  A0 00                ldy     #$00
00067Br 2  B1 AE                lda     (FAC_LAST-1),y
00067Dr 2  20 rr rr             jsr     STRINI
000680r 2  A5 9E                lda     DSCPTR
000682r 2  A4 9F                ldy     DSCPTR+1
000684r 2  85 B8                sta     STRNG1
000686r 2  84 B9                sty     STRNG1+1
000688r 2  20 rr rr             jsr     MOVINS
00068Br 2  A9 AC                lda     #FAC
00068Dr 2  A0 00                ldy     #$00
00068Fr 2               L2963:
00068Fr 2  85 9E                sta     DSCPTR
000691r 2  84 9F                sty     DSCPTR+1
000693r 2  20 rr rr             jsr     FRETMS
000696r 2  A0 00                ldy     #$00
000698r 2  B1 9E                lda     (DSCPTR),y
00069Ar 2  91 97                sta     (FORPNT),y
00069Cr 2  C8                   iny
00069Dr 2  B1 9E                lda     (DSCPTR),y
00069Fr 2  91 97                sta     (FORPNT),y
0006A1r 2  C8                   iny
0006A2r 2  B1 9E                lda     (DSCPTR),y
0006A4r 2  91 97                sta     (FORPNT),y
0006A6r 2               RET5:
0006A6r 2  60                   rts
0006A7r 2               .ifdef AIM65
0006A7r 2               LB89D:
0006A7r 2                       cmp     #$21
0006A7r 2                       bne     RET5
0006A7r 2                       lda     #$80
0006A7r 2                       sta     PRIFLG
0006A7r 2                       jmp     CHRGET
0006A7r 2               .endif
0006A7r 2               
0006A7r 2               .ifdef CONFIG_FILE
0006A7r 2               PRINTH:
0006A7r 2                       jsr     CMD
0006A7r 2                       jmp     LCAD6
0006A7r 2               CMD:
0006A7r 2                       jsr     GETBYT
0006A7r 2                       beq     LC98F
0006A7r 2                       lda     #$2C
0006A7r 2                       jsr     SYNCHR
0006A7r 2               LC98F:
0006A7r 2                       php
0006A7r 2                       jsr     CHKOUT
0006A7r 2                       stx     CURDVC
0006A7r 2                       plp
0006A7r 2                       jmp     PRINT
0006A7r 2               .endif
0006A7r 2               
0006A7r 2               
0006A7r 1               .include "print.s"
0006A7r 2               .segment "CODE"
0006A7r 2               
0006A7r 2               .ifdef AIM65
0006A7r 2               PRINT:
0006A7r 2                       lda     PRIFLG
0006A7r 2                       sta     ZBE
0006A7r 2                       jsr     L297E
0006A7r 2               LB8B1:
0006A7r 2                       lda     ZBE
0006A7r 2                       sta     PRIFLG
0006A7r 2                       rts
0006A7r 2               .endif
0006A7r 2               
0006A7r 2               PRSTRING:
0006A7r 2  20 rr rr             jsr     STRPRT
0006AAr 2               L297E:
0006AAr 2  20 C2 00             jsr     CHRGOT
0006ADr 2               
0006ADr 2               ; ----------------------------------------------------------------------------
0006ADr 2               ; "PRINT" STATEMENT
0006ADr 2               ; ----------------------------------------------------------------------------
0006ADr 2               .ifndef AIM65
0006ADr 2               PRINT:
0006ADr 2               .endif
0006ADr 2  F0 3B                beq     CRDO
0006AFr 2               PRINT2:
0006AFr 2  F0 57                beq     L29DD
0006B1r 2               .ifdef AIM65
0006B1r 2                       jsr     LB89D
0006B1r 2                       beq     L29DD
0006B1r 2               .endif
0006B1r 2  C9 9C                cmp     #TOKEN_TAB
0006B3r 2  F0 6B                beq     L29F5
0006B5r 2  C9 9F                cmp     #TOKEN_SPC
0006B7r 2               .ifdef CONFIG_2
0006B7r 2                       clc	; also AppleSoft II
0006B7r 2               .endif
0006B7r 2  F0 67                beq     L29F5
0006B9r 2  C9 2C                cmp     #','
0006BBr 2               ; Pre-KIM had no CLC. KIM added the CLC
0006BBr 2               ; here. Post-KIM moved the CLC up...
0006BBr 2               ; (makes no sense on KIM, liveness = 0)
0006BBr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
0006BBr 2                       clc
0006BBr 2               .endif
0006BBr 2  F0 4C                beq     L29DE
0006BDr 2  C9 3B                cmp     #$3B
0006BFr 2  F0 7A                beq     L2A0D
0006C1r 2  20 rr rr             jsr     FRMEVL
0006C4r 2  24 5F                bit     VALTYP
0006C6r 2  30 DF                bmi     PRSTRING
0006C8r 2  20 rr rr             jsr     FOUT
0006CBr 2  20 rr rr             jsr     STRLIT
0006CEr 2               .ifndef CONFIG_NO_CR
0006CEr 2  A0 00                ldy     #$00
0006D0r 2  B1 AE                lda     (FAC_LAST-1),y
0006D2r 2  18                   clc
0006D3r 2  65 0E                adc     POSX
0006D5r 2                 .ifdef KBD
0006D5r 2                       cmp     #$28
0006D5r 2                 .else
0006D5r 2  C5 0F                cmp     Z17
0006D7r 2                 .endif
0006D7r 2  90 03                bcc     L29B1
0006D9r 2  20 rr rr             jsr     CRDO
0006DCr 2               L29B1:
0006DCr 2               .endif
0006DCr 2  20 rr rr             jsr     STRPRT
0006DFr 2               .ifdef KBD
0006DFr 2                       jmp     L297E
0006DFr 2               .else
0006DFr 2  20 rr rr             jsr     OUTSP
0006E2r 2  D0 C6                bne     L297E ; branch always
0006E4r 2               .endif
0006E4r 2               
0006E4r 2               .ifdef KBD
0006E4r 2               ; PATCHES
0006E4r 2               LE86C:
0006E4r 2                       pla
0006E4r 2                       jmp     CONTROL_C_TYPED
0006E4r 2               LE870:
0006E4r 2                       jsr     GETBYT
0006E4r 2                       txa
0006E4r 2               LE874:
0006E4r 2                       beq     LE878
0006E4r 2                       bpl     LE8F2
0006E4r 2               LE878:
0006E4r 2                       jmp     IQERR
0006E4r 2               ; PATCHES
0006E4r 2               .endif
0006E4r 2               
0006E4r 2               
0006E4r 2               
0006E4r 2               .ifndef KBD
0006E4r 2               L29B9:
0006E4r 2                 .ifdef CBM2
0006E4r 2                       lda     #$00
0006E4r 2                       sta     INPUTBUFFER,x
0006E4r 2                       ldx     #<(INPUTBUFFER-1)
0006E4r 2                       ldy     #>(INPUTBUFFER-1)
0006E4r 2                 .else
0006E4r 2                   .ifndef APPLE
0006E4r 2  A0 00                ldy     #$00
0006E6r 2  94 13                sty     INPUTBUFFER,x
0006E8r 2  A2 12                ldx     #LINNUM+1
0006EAr 2                   .endif
0006EAr 2                   .if .def(MICROTAN) || .def(SYM1)
0006EAr 2                       bne     CRDO2
0006EAr 2               	.endif
0006EAr 2                 .endif
0006EAr 2                 .ifdef CONFIG_FILE
0006EAr 2                       lda     CURDVC
0006EAr 2                       bne     L29DD
0006EAr 2                 .endif
0006EAr 2               .endif
0006EAr 2               
0006EAr 2               
0006EAr 2               CRDO:
0006EAr 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
0006EAr 2                       lda     CURDVC
0006EAr 2                       bne     LC9D8
0006EAr 2                       sta     POSX
0006EAr 2               LC9D8:
0006EAr 2               .endif
0006EAr 2  A9 0D                lda     #CRLF_1
0006ECr 2               .ifndef CONFIG_CBM_ALL
0006ECr 2  85 0E                sta     POSX
0006EEr 2               .endif
0006EEr 2  20 rr rr             jsr     OUTDO
0006F1r 2               CRDO2:
0006F1r 2  A9 0A                lda     #CRLF_2
0006F3r 2  20 rr rr             jsr     OUTDO
0006F6r 2               
0006F6r 2               PRINTNULLS:
0006F6r 2               .if .def(KBD) || .def(AIM65)
0006F6r 2                       lda     #$00
0006F6r 2                       sta     POSX
0006F6r 2                       eor     #$FF
0006F6r 2               .else
0006F6r 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0006F6r 2                   .ifdef CONFIG_FILE
0006F6r 2                   ; Although there is no statement for it,
0006F6r 2                   ; CBM1 had NULL support and ignores
0006F6r 2                   ; it when not targeting the screen,
0006F6r 2                   ; CBM2 dropped it completely.
0006F6r 2                       lda     CURDVC
0006F6r 2                       bne     L29DD
0006F6r 2                   .endif
0006F6r 2  8A                   txa
0006F7r 2  48                   pha
0006F8r 2  A6 0D                ldx     Z15
0006FAr 2  F0 08                beq     L29D9
0006FCr 2                     .ifdef SYM1
0006FCr 2                       lda     #$FF
0006FCr 2                     .else
0006FCr 2  A9 00                lda     #$00
0006FEr 2                     .endif
0006FEr 2               L29D3:
0006FEr 2  20 rr rr             jsr     OUTDO
000701r 2  CA                   dex
000702r 2  D0 FA                bne     L29D3
000704r 2               L29D9:
000704r 2  86 0E                stx     POSX
000706r 2  68                   pla
000707r 2  AA                   tax
000708r 2                 .else
000708r 2                   .ifndef CONFIG_2
000708r 2                       lda     #$00
000708r 2                       sta     POSX
000708r 2                   .endif
000708r 2                       eor     #$FF
000708r 2                 .endif
000708r 2               .endif
000708r 2               L29DD:
000708r 2  60                   rts
000709r 2               L29DE:
000709r 2  A5 0E                lda     POSX
00070Br 2               .ifndef CONFIG_NO_CR
00070Br 2                 .ifdef KBD
00070Br 2                       cmp     #$1A
00070Br 2                 .else
00070Br 2  C5 10                cmp     Z18
00070Dr 2                 .endif
00070Dr 2  90 06                bcc     L29EA
00070Fr 2  20 rr rr             jsr     CRDO
000712r 2  4C rr rr             jmp     L2A0D
000715r 2               L29EA:
000715r 2               .endif
000715r 2  38                   sec
000716r 2               L29EB:
000716r 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
000716r 2                       sbc     #$0A
000716r 2               .else
000716r 2                 .ifdef KBD
000716r 2                       sbc     #$0D
000716r 2                 .else
000716r 2  E9 0E                sbc     #$0E
000718r 2                 .endif
000718r 2               .endif
000718r 2  B0 FC                bcs     L29EB
00071Ar 2  49 FF                eor     #$FF
00071Cr 2  69 01                adc     #$01
00071Er 2  D0 14                bne     L2A08
000720r 2               L29F5:
000720r 2               .ifdef CONFIG_11A
000720r 2                       php
000720r 2               .else
000720r 2  48                   pha
000721r 2               .endif
000721r 2  20 rr rr             jsr     GTBYTC
000724r 2  C9 29                cmp     #')'
000726r 2               .ifdef CONFIG_11A
000726r 2                 .ifdef CONFIG_2
000726r 2                       bne     SYNERR4
000726r 2                 .else
000726r 2                       jne     SYNERR
000726r 2                 .endif
000726r 2                       plp
000726r 2                       bcc     L2A09
000726r 2               .else
000726r 2                 .ifdef CONFIG_11
000726r 2                       jne     SYNERR
000726r 2                 .else
000726r 2  D0 66                bne     SYNERR4
000728r 2                 .endif
000728r 2  68                   pla
000729r 2  C9 9C                cmp     #TOKEN_TAB
00072Br 2                 .ifdef CONFIG_11
00072Br 2                       bne     L2A09
00072Br 2                 .else
00072Br 2  D0 08                bne     L2A0A
00072Dr 2                 .endif
00072Dr 2               .endif
00072Dr 2  8A                   txa
00072Er 2  E5 0E                sbc     POSX
000730r 2  90 09                bcc     L2A0D
000732r 2               .ifndef CONFIG_11
000732r 2  F0 07                beq     L2A0D
000734r 2               .endif
000734r 2               L2A08:
000734r 2  AA                   tax
000735r 2               .ifdef CONFIG_11
000735r 2               L2A09:
000735r 2                       inx
000735r 2               .endif
000735r 2               L2A0A:
000735r 2               .ifndef CONFIG_11
000735r 2  20 rr rr             jsr     OUTSP
000738r 2               .endif
000738r 2  CA                   dex
000739r 2               .ifndef CONFIG_11
000739r 2  D0 FA                bne     L2A0A
00073Br 2               .else
00073Br 2                       bne     L2A13
00073Br 2               .endif
00073Br 2               L2A0D:
00073Br 2  20 BC 00             jsr     CHRGET
00073Er 2  4C rr rr             jmp     PRINT2
000741r 2               .ifdef CONFIG_11
000741r 2               L2A13:
000741r 2                       jsr     OUTSP
000741r 2                       bne     L2A0A
000741r 2               .endif
000741r 2               
000741r 2               ; ----------------------------------------------------------------------------
000741r 2               ; PRINT STRING AT (Y,A)
000741r 2               ; ----------------------------------------------------------------------------
000741r 2               STROUT:
000741r 2  20 rr rr             jsr     STRLIT
000744r 2               
000744r 2               ; ----------------------------------------------------------------------------
000744r 2               ; PRINT STRING AT (FACMO,FACLO)
000744r 2               ; ----------------------------------------------------------------------------
000744r 2               STRPRT:
000744r 2  20 rr rr             jsr     FREFAC
000747r 2  AA                   tax
000748r 2  A0 00                ldy     #$00
00074Ar 2  E8                   inx
00074Br 2               L2A22:
00074Br 2  CA                   dex
00074Cr 2  F0 BA                beq     L29DD
00074Er 2  B1 71                lda     (INDEX),y
000750r 2  20 rr rr             jsr     OUTDO
000753r 2  C8                   iny
000754r 2  C9 0D                cmp     #$0D
000756r 2  D0 F3                bne     L2A22
000758r 2  20 rr rr             jsr     PRINTNULLS
00075Br 2  4C rr rr             jmp     L2A22
00075Er 2               ; ----------------------------------------------------------------------------
00075Er 2               OUTSP:
00075Er 2               .ifdef CONFIG_FILE
00075Er 2                 .ifndef CBM1
00075Er 2               ; on non-screen devices, print SPACE
00075Er 2               ; instead of CRSR RIGHT
00075Er 2                       lda     CURDVC
00075Er 2                       beq     LCA40
00075Er 2                       lda     #$20
00075Er 2                       .byte   $2C
00075Er 2               LCA40:
00075Er 2                 .endif
00075Er 2                       lda     #$1D ; CRSR RIGHT
00075Er 2               .else
00075Er 2  A9 20                lda     #$20
000760r 2               .endif
000760r 2  2C                   .byte   $2C
000761r 2               OUTQUES:
000761r 2  A9 3F                lda     #$3F
000763r 2               
000763r 2               ; ----------------------------------------------------------------------------
000763r 2               ; PRINT CHAR FROM (A)
000763r 2               ; ----------------------------------------------------------------------------
000763r 2               OUTDO:
000763r 2               .ifndef KBD
000763r 2  24 64                bit     Z14
000765r 2  30 18                bmi     L2A56
000767r 2               .endif
000767r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000767r 2               ; Commodore forgot to remove this in CBM1
000767r 2  48                   pha
000768r 2               .endif
000768r 2               .ifdef CBM1
000768r 2                       cmp     #$1D ; CRSR RIGHT
000768r 2                       beq     LCA6A
000768r 2                       cmp     #$9D ; CRSR LEFT
000768r 2                       beq     LCA5A
000768r 2                       cmp     #$14 ; DEL
000768r 2                       bne     LCA64
000768r 2               LCA5A:
000768r 2                       lda     POSX
000768r 2                       beq     L2A4E
000768r 2                       lda     CURDVC
000768r 2                       bne     L2A4E
000768r 2                       dec     POSX
000768r 2               LCA64:
000768r 2                       and     #$7F
000768r 2               .endif
000768r 2               .ifndef CBM2
000768r 2  C9 20                cmp     #$20
00076Ar 2  90 0B                bcc     L2A4E
00076Cr 2               .endif
00076Cr 2               LCA6A:
00076Cr 2               .ifdef CONFIG_CBM1_PATCHES
00076Cr 2                       lda     CURDVC
00076Cr 2                       jsr     PATCH6
00076Cr 2                       nop
00076Cr 2               .endif
00076Cr 2               .ifdef CONFIG_PRINT_CR
00076Cr 2  A5 0E                lda     POSX
00076Er 2  C5 0F                cmp     Z17
000770r 2  D0 03                bne     L2A4C
000772r 2                 .ifdef AIM65
000772r 2                       lda #$00
000772r 2                       sta POSX
000772r 2                 .elseif .def(APPLE)
000772r 2                       nop ; PATCH!
000772r 2                       nop ; don't print CR
000772r 2                       nop
000772r 2                 .else
000772r 2  20 rr rr             jsr     CRDO
000775r 2                 .endif
000775r 2               L2A4C:
000775r 2               .endif
000775r 2               .ifndef CONFIG_CBM_ALL
000775r 2  E6 0E                inc     POSX
000777r 2               .endif
000777r 2               L2A4E:
000777r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000777r 2               ; Commodore forgot to remove this in CBM1
000777r 2  68                   pla
000778r 2               .endif
000778r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000778r 2                       sty     DIMFLG
000778r 2               .endif
000778r 2               .ifdef CONFIG_IO_MSB
000778r 2                       ora     #$80
000778r 2               .endif
000778r 2  20 EE FF             jsr     MONCOUT
00077Br 2               .ifdef CONFIG_IO_MSB
00077Br 2                       and     #$7F
00077Br 2               .endif
00077Br 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
00077Br 2                       ldy     DIMFLG
00077Br 2               .endif
00077Br 2               .ifdef OSI
00077Br 2  EA                   nop
00077Cr 2  EA                   nop
00077Dr 2  EA                   nop
00077Er 2  EA                   nop
00077Fr 2               .endif
00077Fr 2               L2A56:
00077Fr 2  29 FF                and     #$FF
000781r 2               LE8F2:
000781r 2  60                   rts
000782r 2               
000782r 2               ; ----------------------------------------------------------------------------
000782r 2               ; ???
000782r 2               ; ----------------------------------------------------------------------------
000782r 2               .ifdef KBD
000782r 2               LE8F3:
000782r 2                       pha
000782r 2                       lda     $047F
000782r 2                       clc
000782r 2                       beq     LE900
000782r 2                       lda     #$00
000782r 2                       sta     $047F
000782r 2                       sec
000782r 2               LE900:
000782r 2                       pla
000782r 2                       rts
000782r 2               .endif
000782r 2               
000782r 1               .include "input.s"
000782r 2               .segment "CODE"
000782r 2               
000782r 2               ; ----------------------------------------------------------------------------
000782r 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
000782r 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
000782r 2               ; BETWEEN INPUT, READ, AND GET
000782r 2               ; ----------------------------------------------------------------------------
000782r 2               INPUTERR:
000782r 2  A5 62                lda     INPUTFLG
000784r 2  F0 0B                beq     RESPERR	; INPUT
000786r 2               .ifndef SYM1
000786r 2               .ifndef CONFIG_SMALL
000786r 2               .ifdef CONFIG_10A
000786r 2               ; without this, it treats GET errors
000786r 2               ; like READ errors
000786r 2                       bmi     L2A63	; READ
000786r 2                       ldy     #$FF	; GET
000786r 2                       bne     L2A67
000786r 2               L2A63:
000786r 2               .endif
000786r 2               .endif
000786r 2               .endif
000786r 2               .ifdef CONFIG_CBM1_PATCHES
000786r 2                       jsr     PATCH5
000786r 2               		nop
000786r 2               .else
000786r 2  A5 8D                lda     Z8C
000788r 2  A4 8E                ldy     Z8C+1
00078Ar 2               .endif
00078Ar 2               L2A67:
00078Ar 2  85 87                sta     CURLIN
00078Cr 2  84 88                sty     CURLIN+1
00078Er 2               SYNERR4:
00078Er 2  4C rr rr             jmp     SYNERR
000791r 2               RESPERR:
000791r 2               .ifdef CONFIG_FILE
000791r 2                       lda     CURDVC
000791r 2                       beq     LCA8F
000791r 2                       ldx     #ERR_BADDATA
000791r 2                       jmp     ERROR
000791r 2               LCA8F:
000791r 2               .endif
000791r 2  A9 rr                lda     #<ERRREENTRY
000793r 2  A0 rr                ldy     #>ERRREENTRY
000795r 2  20 rr rr             jsr     STROUT
000798r 2  A5 8B                lda     OLDTEXT
00079Ar 2  A4 8C                ldy     OLDTEXT+1
00079Cr 2  85 C3                sta     TXTPTR
00079Er 2  84 C4                sty     TXTPTR+1
0007A0r 2               RTS20:
0007A0r 2  60                   rts
0007A1r 2               
0007A1r 2               ; ----------------------------------------------------------------------------
0007A1r 2               ; "GET" STATEMENT
0007A1r 2               ; ----------------------------------------------------------------------------
0007A1r 2               .ifndef CONFIG_SMALL
0007A1r 2               .ifndef SYM1
0007A1r 2               GET:
0007A1r 2                       jsr     ERRDIR
0007A1r 2               ; CBM: if GET#, then switch input
0007A1r 2               .ifdef CONFIG_FILE
0007A1r 2                       cmp     #'#'
0007A1r 2                       bne     LCAB6
0007A1r 2                       jsr     CHRGET
0007A1r 2                       jsr     GETBYT
0007A1r 2                       lda     #','
0007A1r 2                       jsr     SYNCHR
0007A1r 2                       jsr     CHKIN
0007A1r 2                       stx     CURDVC
0007A1r 2               LCAB6:
0007A1r 2               .endif
0007A1r 2                       ldx     #<(INPUTBUFFER+1)
0007A1r 2                       ldy     #>(INPUTBUFFER+1)
0007A1r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
0007A1r 2                       lda     #$00
0007A1r 2                       sta     INPUTBUFFER+1
0007A1r 2               .else
0007A1r 2                       sty     INPUTBUFFER+1
0007A1r 2               .endif
0007A1r 2                       lda     #$40
0007A1r 2                       jsr     PROCESS_INPUT_LIST
0007A1r 2               ; CBM: if GET#, then switch input back
0007A1r 2               .ifdef CONFIG_FILE
0007A1r 2                       ldx     CURDVC
0007A1r 2                       bne     LCAD8
0007A1r 2               .endif
0007A1r 2                       rts
0007A1r 2               .endif
0007A1r 2               .endif
0007A1r 2               
0007A1r 2               ; ----------------------------------------------------------------------------
0007A1r 2               ; "INPUT#" STATEMENT
0007A1r 2               ; ----------------------------------------------------------------------------
0007A1r 2               .ifdef CONFIG_FILE
0007A1r 2               INPUTH:
0007A1r 2                       jsr     GETBYT
0007A1r 2                       lda     #$2C
0007A1r 2                       jsr     SYNCHR
0007A1r 2                       jsr     CHKIN
0007A1r 2                       stx     CURDVC
0007A1r 2                       jsr     L2A9E
0007A1r 2               LCAD6:
0007A1r 2                       lda     CURDVC
0007A1r 2               LCAD8:
0007A1r 2                       jsr     CLRCH
0007A1r 2                       ldx     #$00
0007A1r 2                       stx     CURDVC
0007A1r 2                       rts
0007A1r 2               LCAE0:
0007A1r 2               .endif
0007A1r 2               
0007A1r 2               .ifdef SYM1
0007A1r 2               LC9B0:
0007A1r 2                       jsr     OUTQUES	; '?'
0007A1r 2                       jsr     OUTSP
0007A1r 2                       jmp     L2A9E
0007A1r 2               .endif
0007A1r 2               ; ----------------------------------------------------------------------------
0007A1r 2               ; "INPUT" STATEMENT
0007A1r 2               ; ----------------------------------------------------------------------------
0007A1r 2               INPUT:
0007A1r 2               .ifndef KBD
0007A1r 2  46 64                lsr     Z14
0007A3r 2               .endif
0007A3r 2               .ifdef AIM65
0007A3r 2                       lda     PRIFLG
0007A3r 2                       sta     ZBE
0007A3r 2                       jsr     LCFFA
0007A3r 2               .endif
0007A3r 2  C9 22                cmp     #$22
0007A5r 2               .ifdef SYM1
0007A5r 2                       bne     LC9B0
0007A5r 2               .else
0007A5r 2  D0 0B                bne     L2A9E
0007A7r 2               .endif
0007A7r 2  20 rr rr             jsr     STRTXT
0007AAr 2  A9 3B                lda     #$3B
0007ACr 2  20 rr rr             jsr     SYNCHR
0007AFr 2  20 rr rr             jsr     STRPRT
0007B2r 2               L2A9E:
0007B2r 2  20 rr rr             jsr     ERRDIR
0007B5r 2  A9 2C                lda     #$2C
0007B7r 2  85 12                sta     INPUTBUFFER-1
0007B9r 2               LCAF8:
0007B9r 2               .ifdef APPLE
0007B9r 2                       jsr     INLINX
0007B9r 2               .elseif .def(SYM1)
0007B9r 2                       jsr     INLIN
0007B9r 2               .else
0007B9r 2  20 rr rr             jsr     NXIN
0007BCr 2               .endif
0007BCr 2               .ifdef KBD
0007BCr 2                       bmi     L2ABE
0007BCr 2               .else
0007BCr 2                 .ifdef CONFIG_FILE
0007BCr 2                       lda     CURDVC
0007BCr 2                       beq     LCB0C
0007BCr 2                       lda     Z96
0007BCr 2                       and     #$02
0007BCr 2                       beq     LCB0C
0007BCr 2                       jsr     LCAD6
0007BCr 2                       jmp     DATA
0007BCr 2               LCB0C:
0007BCr 2                 .endif
0007BCr 2  A5 13                lda     INPUTBUFFER
0007BEr 2  D0 12                bne     L2ABE
0007C0r 2                 .ifdef CONFIG_FILE
0007C0r 2                       lda     CURDVC
0007C0r 2                       bne     LCAF8
0007C0r 2                 .endif
0007C0r 2                 .ifdef CONFIG_CBM1_PATCHES
0007C0r 2                       jmp     PATCH1
0007C0r 2                 .else
0007C0r 2  18                   clc
0007C1r 2  4C rr rr             jmp     CONTROL_C_TYPED
0007C4r 2                 .endif
0007C4r 2               .endif
0007C4r 2               
0007C4r 2               NXIN:
0007C4r 2               .ifdef KBD
0007C4r 2                       jsr     INLIN
0007C4r 2                       bmi     RTS20
0007C4r 2                       pla
0007C4r 2                       jmp     LE86C
0007C4r 2               .else
0007C4r 2                 .ifdef CONFIG_FILE
0007C4r 2                       lda     CURDVC
0007C4r 2                       bne     LCB21
0007C4r 2                 .endif
0007C4r 2  20 rr rr             jsr     OUTQUES	; '?'
0007C7r 2  20 rr rr             jsr     OUTSP
0007CAr 2               LCB21:
0007CAr 2  4C rr rr             jmp     INLIN
0007CDr 2               .endif
0007CDr 2               
0007CDr 2               ; ----------------------------------------------------------------------------
0007CDr 2               ; "GETC" STATEMENT
0007CDr 2               ; ----------------------------------------------------------------------------
0007CDr 2               .ifdef KBD
0007CDr 2               GETC:
0007CDr 2                       jsr     CONINT
0007CDr 2                       jsr     LF43D
0007CDr 2                       jmp     LE664
0007CDr 2               .endif
0007CDr 2               
0007CDr 2               ; ----------------------------------------------------------------------------
0007CDr 2               ; "READ" STATEMENT
0007CDr 2               ; ----------------------------------------------------------------------------
0007CDr 2               READ:
0007CDr 2  A6 8F                ldx     DATPTR
0007CFr 2  A4 90                ldy     DATPTR+1
0007D1r 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
0007D1r 2               ; AppleSoft II, too
0007D1r 2                       lda     #$98	; READ
0007D1r 2                       .byte   $2C
0007D1r 2               L2ABE:
0007D1r 2                       lda     #$00	; INPUT
0007D1r 2               .else
0007D1r 2  A9                   .byte   $A9	; LDA #$98
0007D2r 2               L2ABE:
0007D2r 2  98                   tya
0007D3r 2               .endif
0007D3r 2               
0007D3r 2               ; ----------------------------------------------------------------------------
0007D3r 2               ; PROCESS INPUT LIST
0007D3r 2               ;
0007D3r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
0007D3r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
0007D3r 2               ; 				$40 FOR GET
0007D3r 2               ;				$98 FOR READ
0007D3r 2               ; ----------------------------------------------------------------------------
0007D3r 2               PROCESS_INPUT_LIST:
0007D3r 2  85 62                sta     INPUTFLG
0007D5r 2  86 91                stx     INPTR
0007D7r 2  84 92                sty     INPTR+1
0007D9r 2               PROCESS_INPUT_ITEM:
0007D9r 2  20 rr rr             jsr     PTRGET
0007DCr 2  85 97                sta     FORPNT
0007DEr 2  84 98                sty     FORPNT+1
0007E0r 2  A5 C3                lda     TXTPTR
0007E2r 2  A4 C4                ldy     TXTPTR+1
0007E4r 2  85 11                sta     TXPSV
0007E6r 2  84 12                sty     TXPSV+1
0007E8r 2  A6 91                ldx     INPTR
0007EAr 2  A4 92                ldy     INPTR+1
0007ECr 2  86 C3                stx     TXTPTR
0007EEr 2  84 C4                sty     TXTPTR+1
0007F0r 2  20 C2 00             jsr     CHRGOT
0007F3r 2  D0 0E                bne     INSTART
0007F5r 2  24 62                bit     INPUTFLG
0007F7r 2               .ifndef CONFIG_SMALL ; GET
0007F7r 2                .ifndef SYM1
0007F7r 2                       bvc     L2AF0
0007F7r 2                 .ifdef MICROTAN
0007F7r 2                       jsr     MONRDKEY2
0007F7r 2                 .elseif .def(AIM65)
0007F7r 2                       jsr     MONRDKEY2
0007F7r 2                 .else
0007F7r 2                       jsr     MONRDKEY
0007F7r 2                 .endif
0007F7r 2                 .ifdef CONFIG_IO_MSB
0007F7r 2                       and     #$7F
0007F7r 2                 .endif
0007F7r 2                       sta     INPUTBUFFER
0007F7r 2               ; BUG: The beq/bne L2AF8 below is supposed
0007F7r 2               ; to be always taken. For this to happen,
0007F7r 2               ; the last load must be a 0 for beq
0007F7r 2               ; and != 0 for bne. The original Microsoft
0007F7r 2               ; code had ldx/ldy/bne here, which was only
0007F7r 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0007F7r 2               ; fixed it in CBMBASIC V1 by swapping the
0007F7r 2               ; ldx and the ldy. It was broken on KIM,
0007F7r 2               ; but okay on APPLE and CBM2, because
0007F7r 2               ; these used a non-ZP INPUTBUFFER.
0007F7r 2               ; Microsoft fixed this somewhere after KIM
0007F7r 2               ; and before MICROTAN, by using beq instead
0007F7r 2               ; of bne in the ZP case.
0007F7r 2                 .ifdef CBM1
0007F7r 2                       ldy     #>(INPUTBUFFER-1)
0007F7r 2                       ldx     #<(INPUTBUFFER-1)
0007F7r 2                 .else
0007F7r 2                       ldx     #<(INPUTBUFFER-1)
0007F7r 2                       ldy     #>(INPUTBUFFER-1)
0007F7r 2                 .endif
0007F7r 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0007F7r 2                       beq     L2AF8	; always
0007F7r 2                 .else
0007F7r 2                       bne     L2AF8	; always
0007F7r 2                 .endif
0007F7r 2               L2AF0:
0007F7r 2                .endif
0007F7r 2               .endif
0007F7r 2  30 62                bmi     FINDATA
0007F9r 2               .ifdef CONFIG_FILE
0007F9r 2                       lda     CURDVC
0007F9r 2                       bne     LCB64
0007F9r 2               .endif
0007F9r 2               .ifdef KBD
0007F9r 2                       jsr     OUTQUESSP
0007F9r 2               .else
0007F9r 2  20 rr rr             jsr     OUTQUES
0007FCr 2               .endif
0007FCr 2               LCB64:
0007FCr 2  20 rr rr             jsr     NXIN
0007FFr 2               L2AF8:
0007FFr 2  86 C3                stx     TXTPTR
000801r 2  84 C4                sty     TXTPTR+1
000803r 2               
000803r 2               ; ----------------------------------------------------------------------------
000803r 2               INSTART:
000803r 2  20 BC 00             jsr     CHRGET
000806r 2  24 5F                bit     VALTYP
000808r 2  10 24                bpl     L2B34
00080Ar 2               .ifndef CONFIG_SMALL ; GET
00080Ar 2                .ifndef SYM1
00080Ar 2                       bit     INPUTFLG
00080Ar 2                       bvc     L2B10
00080Ar 2                 .ifdef CONFIG_CBM1_PATCHES
00080Ar 2                       lda     #$00
00080Ar 2                       jsr     PATCH4
00080Ar 2                       nop
00080Ar 2                 .else
00080Ar 2                       inx
00080Ar 2                       stx     TXTPTR
00080Ar 2                       lda     #$00
00080Ar 2                       sta     CHARAC
00080Ar 2                       beq     L2B1C
00080Ar 2                 .endif
00080Ar 2               L2B10:
00080Ar 2                .endif
00080Ar 2               .endif
00080Ar 2  85 5B                sta     CHARAC
00080Cr 2  C9 22                cmp     #$22
00080Er 2  F0 07                beq     L2B1D
000810r 2  A9 3A                lda     #$3A
000812r 2  85 5B                sta     CHARAC
000814r 2  A9 2C                lda     #$2C
000816r 2               L2B1C:
000816r 2  18                   clc
000817r 2               L2B1D:
000817r 2  85 5C                sta     ENDCHR
000819r 2  A5 C3                lda     TXTPTR
00081Br 2  A4 C4                ldy     TXTPTR+1
00081Dr 2  69 00                adc     #$00
00081Fr 2  90 01                bcc     L2B28
000821r 2  C8                   iny
000822r 2               L2B28:
000822r 2  20 rr rr             jsr     STRLT2
000825r 2  20 rr rr             jsr     POINT
000828r 2               .ifdef CONFIG_SMALL
000828r 2  20 rr rr             jsr     LETSTRING
00082Br 2               .else
00082Br 2                       jsr     PUTSTR
00082Br 2               .endif
00082Br 2  4C rr rr             jmp     INPUT_MORE
00082Er 2               ; ----------------------------------------------------------------------------
00082Er 2               L2B34:
00082Er 2  20 rr rr             jsr     FIN
000831r 2               .ifdef CONFIG_SMALL
000831r 2  20 rr rr             jsr     SETFOR
000834r 2               .else
000834r 2                       lda     VALTYP+1
000834r 2                       jsr     LET2
000834r 2               .endif
000834r 2               ; ----------------------------------------------------------------------------
000834r 2               INPUT_MORE:
000834r 2  20 C2 00             jsr     CHRGOT
000837r 2  F0 07                beq     L2B48
000839r 2  C9 2C                cmp     #$2C
00083Br 2  F0 03                beq     L2B48
00083Dr 2  4C rr rr             jmp     INPUTERR
000840r 2               L2B48:
000840r 2  A5 C3                lda     TXTPTR
000842r 2  A4 C4                ldy     TXTPTR+1
000844r 2  85 91                sta     INPTR
000846r 2  84 92                sty     INPTR+1
000848r 2  A5 11                lda     TXPSV
00084Ar 2  A4 12                ldy     TXPSV+1
00084Cr 2  85 C3                sta     TXTPTR
00084Er 2  84 C4                sty     TXTPTR+1
000850r 2  20 C2 00             jsr     CHRGOT
000853r 2  F0 2C                beq     INPDONE
000855r 2  20 rr rr             jsr     CHKCOM
000858r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
00085Br 2               ; ----------------------------------------------------------------------------
00085Br 2               FINDATA:
00085Br 2  20 rr rr             jsr     DATAN
00085Er 2  C8                   iny
00085Fr 2  AA                   tax
000860r 2  D0 12                bne     L2B7C
000862r 2  A2 06                ldx     #ERR_NODATA
000864r 2  C8                   iny
000865r 2  B1 C3                lda     (TXTPTR),y
000867r 2  F0 69                beq     GERR
000869r 2  C8                   iny
00086Ar 2  B1 C3                lda     (TXTPTR),y
00086Cr 2  85 8D                sta     Z8C
00086Er 2  C8                   iny
00086Fr 2  B1 C3                lda     (TXTPTR),y
000871r 2  C8                   iny
000872r 2  85 8E                sta     Z8C+1
000874r 2               L2B7C:
000874r 2  B1 C3                lda     (TXTPTR),y
000876r 2  AA                   tax
000877r 2  20 rr rr             jsr     ADDON
00087Ar 2  E0 83                cpx     #$83
00087Cr 2  D0 DD                bne     FINDATA
00087Er 2  4C rr rr             jmp     INSTART
000881r 2               ; ---NO MORE INPUT REQUESTED------
000881r 2               INPDONE:
000881r 2  A5 91                lda     INPTR
000883r 2  A4 92                ldy     INPTR+1
000885r 2  A6 62                ldx     INPUTFLG
000887r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000887r 2  F0 03                beq     L2B94 ; INPUT
000889r 2               .else
000889r 2                       bpl     L2B94; INPUT or GET
000889r 2               .endif
000889r 2  4C rr rr             jmp     SETDA
00088Cr 2               L2B94:
00088Cr 2  A0 00                ldy     #$00
00088Er 2               .ifdef AIM65
00088Er 2                       jsr     LB8B1
00088Er 2               .endif
00088Er 2  B1 91                lda     (INPTR),y
000890r 2  F0 07                beq     L2BA1
000892r 2               .ifdef CONFIG_FILE
000892r 2                       lda     CURDVC
000892r 2                       bne     L2BA1
000892r 2               .endif
000892r 2  A9 rr                lda     #<ERREXTRA
000894r 2  A0 rr                ldy     #>ERREXTRA
000896r 2  4C rr rr             jmp     STROUT
000899r 2               L2BA1:
000899r 2  60                   rts
00089Ar 2               
00089Ar 2               ; ----------------------------------------------------------------------------
00089Ar 2               ERREXTRA:
00089Ar 2               .ifdef KBD
00089Ar 2                       .byte   "?Extra"
00089Ar 2               .else
00089Ar 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
00089Er 2  52 41 20 49  
0008A2r 2  47 4E 4F 52  
0008A8r 2               .endif
0008A8r 2  0D 0A 00             .byte   $0D,$0A,$00
0008ABr 2               ERRREENTRY:
0008ABr 2               .ifdef KBD
0008ABr 2                       .byte   "What?"
0008ABr 2               .else
0008ABr 2  3F 52 45 44          .byte   "?REDO FROM START"
0008AFr 2  4F 20 46 52  
0008B3r 2  4F 4D 20 53  
0008BBr 2               .endif
0008BBr 2  0D 0A 00             .byte   $0D,$0A,$00
0008BEr 2               .ifdef KBD
0008BEr 2               LEA30:
0008BEr 2                       .byte   "B"
0008BEr 2                       .byte   $FD
0008BEr 2                       .byte   "GsBASIC"
0008BEr 2                       .byte   $00,$1B,$0D,$13
0008BEr 2                       .byte   " BASIC"
0008BEr 2               .endif
0008BEr 2               
0008BEr 1               .include "eval.s"
0008BEr 2               .segment "CODE"
0008BEr 2               
0008BEr 2               ; ----------------------------------------------------------------------------
0008BEr 2               ; "NEXT" STATEMENT
0008BEr 2               ; ----------------------------------------------------------------------------
0008BEr 2               NEXT:
0008BEr 2  D0 04                bne     NEXT1
0008C0r 2  A0 00                ldy     #$00
0008C2r 2  F0 03                beq     NEXT2
0008C4r 2               NEXT1:
0008C4r 2  20 rr rr             jsr     PTRGET
0008C7r 2               NEXT2:
0008C7r 2  85 97                sta     FORPNT
0008C9r 2  84 98                sty     FORPNT+1
0008CBr 2  20 rr rr             jsr     GTFORPNT
0008CEr 2  F0 04                beq     NEXT3
0008D0r 2  A2 00                ldx     #$00
0008D2r 2               GERR:
0008D2r 2  F0 68                beq     JERROR
0008D4r 2               NEXT3:
0008D4r 2  9A                   txs
0008D5r 2               .ifndef CONFIG_2
0008D5r 2  E8                   inx
0008D6r 2  E8                   inx
0008D7r 2  E8                   inx
0008D8r 2  E8                   inx
0008D9r 2               .endif
0008D9r 2  8A                   txa
0008DAr 2               .ifdef CONFIG_2
0008DAr 2                       clc
0008DAr 2                       adc     #$04
0008DAr 2                       pha
0008DAr 2                       adc     #BYTES_FP+1
0008DAr 2                       sta     DEST
0008DAr 2                       pla
0008DAr 2               .else
0008DAr 2  E8                   inx
0008DBr 2  E8                   inx
0008DCr 2  E8                   inx
0008DDr 2  E8                   inx
0008DEr 2  E8                   inx
0008DFr 2               .ifndef CONFIG_SMALL
0008DFr 2                       inx
0008DFr 2               .endif
0008DFr 2  86 73                stx     DEST
0008E1r 2               .endif
0008E1r 2  A0 01                ldy     #>STACK
0008E3r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0008E6r 2  BA                   tsx
0008E7r 2  BD 08 01             lda     STACK+BYTES_FP+4,x
0008EAr 2  85 B0                sta     FACSIGN
0008ECr 2  A5 97                lda     FORPNT
0008EEr 2  A4 98                ldy     FORPNT+1
0008F0r 2  20 rr rr             jsr     FADD
0008F3r 2  20 rr rr             jsr     SETFOR
0008F6r 2  A0 01                ldy     #>STACK
0008F8r 2  20 rr rr             jsr     FCOMP2
0008FBr 2  BA                   tsx
0008FCr 2  38                   sec
0008FDr 2  FD 08 01             sbc     STACK+BYTES_FP+4,x
000900r 2  F0 17                beq     L2C22
000902r 2  BD 0D 01             lda     STACK+2*BYTES_FP+5,x
000905r 2  85 87                sta     CURLIN
000907r 2  BD 0E 01             lda     STACK+2*BYTES_FP+6,x
00090Ar 2  85 88                sta     CURLIN+1
00090Cr 2  BD 10 01             lda     STACK+2*BYTES_FP+8,x
00090Fr 2  85 C3                sta     TXTPTR
000911r 2  BD 0F 01             lda     STACK+2*BYTES_FP+7,x
000914r 2  85 C4                sta     TXTPTR+1
000916r 2               L2C1F:
000916r 2  4C rr rr             jmp     NEWSTT
000919r 2               L2C22:
000919r 2  8A                   txa
00091Ar 2  69 0F                adc     #2*BYTES_FP+7
00091Cr 2  AA                   tax
00091Dr 2  9A                   txs
00091Er 2  20 C2 00             jsr     CHRGOT
000921r 2  C9 2C                cmp     #$2C
000923r 2  D0 F1                bne     L2C1F
000925r 2  20 BC 00             jsr     CHRGET
000928r 2  20 rr rr             jsr     NEXT1
00092Br 2               
00092Br 2               ; ----------------------------------------------------------------------------
00092Br 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
00092Br 2               ; ----------------------------------------------------------------------------
00092Br 2               FRMNUM:
00092Br 2  20 rr rr             jsr     FRMEVL
00092Er 2               
00092Er 2               ; ----------------------------------------------------------------------------
00092Er 2               ; MAKE SURE (FAC) IS NUMERIC
00092Er 2               ; ----------------------------------------------------------------------------
00092Er 2               CHKNUM:
00092Er 2  18                   clc
00092Fr 2  24                   .byte   $24
000930r 2               
000930r 2               ; ----------------------------------------------------------------------------
000930r 2               ; MAKE SURE (FAC) IS STRING
000930r 2               ; ----------------------------------------------------------------------------
000930r 2               CHKSTR:
000930r 2  38                   sec
000931r 2               
000931r 2               ; ----------------------------------------------------------------------------
000931r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
000931r 2               ; IF C=0, TYPE MUST BE NUMERIC
000931r 2               ; IF C=1, TYPE MUST BE STRING
000931r 2               ; ----------------------------------------------------------------------------
000931r 2               CHKVAL:
000931r 2  24 5F                bit     VALTYP
000933r 2  30 03                bmi     L2C41
000935r 2  B0 03                bcs     L2C43
000937r 2               L2C40:
000937r 2  60                   rts
000938r 2               L2C41:
000938r 2  B0 FD                bcs     L2C40
00093Ar 2               L2C43:
00093Ar 2  A2 18                ldx     #ERR_BADTYPE
00093Cr 2               JERROR:
00093Cr 2  4C rr rr             jmp     ERROR
00093Fr 2               
00093Fr 2               ; ----------------------------------------------------------------------------
00093Fr 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
00093Fr 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
00093Fr 2               ; EXPRESSIONS.
00093Fr 2               ; ----------------------------------------------------------------------------
00093Fr 2               FRMEVL:
00093Fr 2  A6 C3                ldx     TXTPTR
000941r 2  D0 02                bne     L2C4E
000943r 2  C6 C4                dec     TXTPTR+1
000945r 2               L2C4E:
000945r 2  C6 C3                dec     TXTPTR
000947r 2  A2 00                ldx     #$00
000949r 2  24                   .byte   $24
00094Ar 2               FRMEVL1:
00094Ar 2  48                   pha
00094Br 2  8A                   txa
00094Cr 2  48                   pha
00094Dr 2  A9 01                lda     #$01
00094Fr 2  20 rr rr             jsr     CHKMEM
000952r 2  20 rr rr             jsr     FRM_ELEMENT
000955r 2  A9 00                lda     #$00
000957r 2  85 9B                sta     CPRTYP
000959r 2               FRMEVL2:
000959r 2  20 C2 00             jsr     CHRGOT
00095Cr 2               L2C65:
00095Cr 2  38                   sec
00095Dr 2  E9 AA                sbc     #TOKEN_GREATER
00095Fr 2  90 17                bcc     L2C81
000961r 2  C9 03                cmp     #$03
000963r 2  B0 13                bcs     L2C81
000965r 2  C9 01                cmp     #$01
000967r 2  2A                   rol     a
000968r 2  49 01                eor     #$01
00096Ar 2  45 9B                eor     CPRTYP
00096Cr 2  C5 9B                cmp     CPRTYP
00096Er 2  90 61                bcc     SNTXERR
000970r 2  85 9B                sta     CPRTYP
000972r 2  20 BC 00             jsr     CHRGET
000975r 2  4C rr rr             jmp     L2C65
000978r 2               L2C81:
000978r 2  A6 9B                ldx     CPRTYP
00097Ar 2  D0 2C                bne     FRM_RELATIONAL
00097Cr 2  B0 78                bcs     L2D02
00097Er 2  69 07                adc     #$07
000980r 2  90 74                bcc     L2D02
000982r 2  65 5F                adc     VALTYP
000984r 2  D0 03                bne     L2C92
000986r 2  4C rr rr             jmp     CAT
000989r 2               L2C92:
000989r 2  69 FF                adc     #$FF
00098Br 2  85 71                sta     INDEX
00098Dr 2  0A                   asl     a
00098Er 2  65 71                adc     INDEX
000990r 2  A8                   tay
000991r 2               FRM_PRECEDENCE_TEST:
000991r 2  68                   pla
000992r 2  D9 rr rr             cmp     MATHTBL,y
000995r 2  B0 64                bcs     FRM_PERFORM1
000997r 2  20 rr rr             jsr     CHKNUM
00099Ar 2               L2CA3:
00099Ar 2  48                   pha
00099Br 2               L2CA4:
00099Br 2  20 rr rr             jsr     FRM_RECURSE
00099Er 2  68                   pla
00099Fr 2  A4 99                ldy     LASTOP
0009A1r 2  10 17                bpl     PREFNC
0009A3r 2  AA                   tax
0009A4r 2  F0 53                beq     GOEX
0009A6r 2  D0 5C                bne     FRM_PERFORM2
0009A8r 2               
0009A8r 2               ; ----------------------------------------------------------------------------
0009A8r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
0009A8r 2               ; ----------------------------------------------------------------------------
0009A8r 2               FRM_RELATIONAL:
0009A8r 2  46 5F                lsr     VALTYP
0009AAr 2  8A                   txa
0009ABr 2  2A                   rol     a
0009ACr 2  A6 C3                ldx     TXTPTR
0009AEr 2  D0 02                bne     L2CBB
0009B0r 2  C6 C4                dec     TXTPTR+1
0009B2r 2               L2CBB:
0009B2r 2  C6 C3                dec     TXTPTR
0009B4r 2  A0 1B                ldy     #$1B
0009B6r 2  85 9B                sta     CPRTYP
0009B8r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
0009BAr 2               PREFNC:
0009BAr 2  D9 rr rr             cmp     MATHTBL,y
0009BDr 2  B0 45                bcs     FRM_PERFORM2
0009BFr 2  90 D9                bcc     L2CA3
0009C1r 2               
0009C1r 2               ; ----------------------------------------------------------------------------
0009C1r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
0009C1r 2               ; ANOTHER ONE
0009C1r 2               ; ----------------------------------------------------------------------------
0009C1r 2               FRM_RECURSE:
0009C1r 2  B9 rr rr             lda     MATHTBL+2,y
0009C4r 2  48                   pha
0009C5r 2  B9 rr rr             lda     MATHTBL+1,y
0009C8r 2  48                   pha
0009C9r 2  20 rr rr             jsr     FRM_STACK1
0009CCr 2  A5 9B                lda     CPRTYP
0009CEr 2  4C rr rr             jmp     FRMEVL1
0009D1r 2               SNTXERR:
0009D1r 2  4C rr rr             jmp     SYNERR
0009D4r 2               
0009D4r 2               ; ----------------------------------------------------------------------------
0009D4r 2               ; STACK (FAC)
0009D4r 2               ; THREE ENTRY POINTS:
0009D4r 2               ; 	1, FROM FRMEVL
0009D4r 2               ;	2, FROM "STEP"
0009D4r 2               ;	3, FROM "FOR"
0009D4r 2               ; ----------------------------------------------------------------------------
0009D4r 2               FRM_STACK1:
0009D4r 2  A5 B0                lda     FACSIGN
0009D6r 2  BE rr rr             ldx     MATHTBL,y
0009D9r 2               
0009D9r 2               ; ----------------------------------------------------------------------------
0009D9r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
0009D9r 2               ; ----------------------------------------------------------------------------
0009D9r 2               FRM_STACK2:
0009D9r 2  A8                   tay
0009DAr 2  68                   pla
0009DBr 2  85 71                sta     INDEX
0009DDr 2               .ifndef CONFIG_2B
0009DDr 2  E6 71                inc     INDEX ; bug: assumes not on page boundary
0009DFr 2               ; bug exists on AppleSoft II
0009DFr 2               .endif
0009DFr 2  68                   pla
0009E0r 2  85 72                sta     INDEX+1
0009E2r 2               .ifdef CONFIG_2B
0009E2r 2                       inc     INDEX
0009E2r 2                       bne     LEB69
0009E2r 2                       inc     INDEX+1
0009E2r 2               LEB69:
0009E2r 2               .endif
0009E2r 2  98                   tya
0009E3r 2  48                   pha
0009E4r 2               
0009E4r 2               ; ----------------------------------------------------------------------------
0009E4r 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
0009E4r 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
0009E4r 2               ; ----------------------------------------------------------------------------
0009E4r 2               FRM_STACK3:
0009E4r 2  20 rr rr             jsr     ROUND_FAC
0009E7r 2               .ifndef CONFIG_SMALL
0009E7r 2                       lda     FAC+4
0009E7r 2                       pha
0009E7r 2               .endif
0009E7r 2  A5 AF                lda     FAC+3
0009E9r 2  48                   pha
0009EAr 2  A5 AE                lda     FAC+2
0009ECr 2  48                   pha
0009EDr 2  A5 AD                lda     FAC+1
0009EFr 2  48                   pha
0009F0r 2  A5 AC                lda     FAC
0009F2r 2  48                   pha
0009F3r 2  6C 71 00             jmp     (INDEX)
0009F6r 2               L2D02:
0009F6r 2  A0 FF                ldy     #$FF
0009F8r 2  68                   pla
0009F9r 2               GOEX:
0009F9r 2  F0 20                beq     EXIT
0009FBr 2               
0009FBr 2               ; ----------------------------------------------------------------------------
0009FBr 2               ; PERFORM STACKED OPERATION
0009FBr 2               ;
0009FBr 2               ; (A) = PRECEDENCE BYTE
0009FBr 2               ; STACK:  1 -- CPRMASK
0009FBr 2               ;	5 -- (ARG)
0009FBr 2               ;	2 -- ADDR OF PERFORMER
0009FBr 2               ; ----------------------------------------------------------------------------
0009FBr 2               FRM_PERFORM1:
0009FBr 2  C9 64                cmp     #$64
0009FDr 2  F0 03                beq     L2D0E
0009FFr 2  20 rr rr             jsr     CHKNUM
000A02r 2               L2D0E:
000A02r 2  84 99                sty     LASTOP
000A04r 2               FRM_PERFORM2:
000A04r 2  68                   pla
000A05r 2  4A                   lsr     a
000A06r 2  85 63                sta     CPRMASK
000A08r 2  68                   pla
000A09r 2  85 B3                sta     ARG
000A0Br 2  68                   pla
000A0Cr 2  85 B4                sta     ARG+1
000A0Er 2  68                   pla
000A0Fr 2  85 B5                sta     ARG+2
000A11r 2  68                   pla
000A12r 2  85 B6                sta     ARG+3
000A14r 2  68                   pla
000A15r 2               .ifndef CONFIG_SMALL
000A15r 2                       sta     ARG+4
000A15r 2                       pla
000A15r 2               .endif
000A15r 2  85 B7                sta     ARGSIGN
000A17r 2  45 B0                eor     FACSIGN
000A19r 2  85 B8                sta     SGNCPR
000A1Br 2               EXIT:
000A1Br 2  A5 AC                lda     FAC
000A1Dr 2  60                   rts
000A1Er 2               
000A1Er 2               ; ----------------------------------------------------------------------------
000A1Er 2               ; GET ELEMENT IN EXPRESSION
000A1Er 2               ;
000A1Er 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000A1Er 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000A1Er 2               ; ----------------------------------------------------------------------------
000A1Er 2               FRM_ELEMENT:
000A1Er 2  A9 00                lda     #$00
000A20r 2  85 5F                sta     VALTYP
000A22r 2               L2D31:
000A22r 2  20 BC 00             jsr     CHRGET
000A25r 2  B0 03                bcs     L2D39
000A27r 2               L2D36:
000A27r 2  4C rr rr             jmp     FIN
000A2Ar 2               L2D39:
000A2Ar 2  20 rr rr             jsr     ISLETC
000A2Dr 2  B0 67                bcs     FRM_VARIABLE
000A2Fr 2               .ifdef CONFIG_CBM_ALL
000A2Fr 2                       cmp     #$FF
000A2Fr 2                       bne     LCDC1
000A2Fr 2                       lda     #<CON_PI
000A2Fr 2                       ldy     #>CON_PI
000A2Fr 2                       jsr     LOAD_FAC_FROM_YA
000A2Fr 2                       jmp     CHRGET
000A2Fr 2               CON_PI:
000A2Fr 2                       .byte   $82,$49,$0f,$DA,$A1
000A2Fr 2               LCDC1:
000A2Fr 2               .endif
000A2Fr 2  C9 2E                cmp     #$2E
000A31r 2  F0 F4                beq     L2D36
000A33r 2  C9 A4                cmp     #TOKEN_MINUS
000A35r 2  F0 58                beq     MIN
000A37r 2  C9 A3                cmp     #TOKEN_PLUS
000A39r 2  F0 E7                beq     L2D31
000A3Br 2  C9 22                cmp     #$22
000A3Dr 2  D0 0F                bne     NOT_
000A3Fr 2               
000A3Fr 2               ; ----------------------------------------------------------------------------
000A3Fr 2               ; STRING CONSTANT ELEMENT
000A3Fr 2               ;
000A3Fr 2               ; SET Y,A = (TXTPTR)+CARRY
000A3Fr 2               ; ----------------------------------------------------------------------------
000A3Fr 2               STRTXT:
000A3Fr 2  A5 C3                lda     TXTPTR
000A41r 2  A4 C4                ldy     TXTPTR+1
000A43r 2  69 00                adc     #$00
000A45r 2  90 01                bcc     L2D57
000A47r 2  C8                   iny
000A48r 2               L2D57:
000A48r 2  20 rr rr             jsr     STRLIT
000A4Br 2  4C rr rr             jmp     POINT
000A4Er 2               
000A4Er 2               ; ----------------------------------------------------------------------------
000A4Er 2               ; "NOT" FUNCTION
000A4Er 2               ; IF FAC=0, RETURN FAC=1
000A4Er 2               ; IF FAC<>0, RETURN FAC=0
000A4Er 2               ; ----------------------------------------------------------------------------
000A4Er 2               NOT_:
000A4Er 2  C9 A1                cmp     #TOKEN_NOT
000A50r 2  D0 13                bne     L2D74
000A52r 2  A0 18                ldy     #$18
000A54r 2  D0 3B                bne     EQUL
000A56r 2               
000A56r 2               ; ----------------------------------------------------------------------------
000A56r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000A56r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000A56r 2               ; ----------------------------------------------------------------------------
000A56r 2               EQUOP:
000A56r 2  20 rr rr             jsr     AYINT
000A59r 2  A5 AF                lda     FAC_LAST
000A5Br 2  49 FF                eor     #$FF
000A5Dr 2  A8                   tay
000A5Er 2  A5 AE                lda     FAC_LAST-1
000A60r 2  49 FF                eor     #$FF
000A62r 2  4C rr rr             jmp     GIVAYF
000A65r 2               L2D74:
000A65r 2               .ifdef SYM1
000A65r 2                       cmp     #TOKEN_USR
000A65r 2                       bne     LCC8A
000A65r 2                       jmp     LCDBD
000A65r 2               LCC8A:
000A65r 2                       cmp     #$26
000A65r 2                       bne     LCC91
000A65r 2                       jmp     LCDFE
000A65r 2               LCC91:
000A65r 2               .endif
000A65r 2  C9 9E                cmp     #TOKEN_FN
000A67r 2  D0 03                bne     L2D7B
000A69r 2  4C rr rr             jmp     L31F3
000A6Cr 2               L2D7B:
000A6Cr 2  C9 AD                cmp     #TOKEN_SGN
000A6Er 2  90 03                bcc     PARCHK
000A70r 2  4C rr rr             jmp     UNARY
000A73r 2               
000A73r 2               ; ----------------------------------------------------------------------------
000A73r 2               ; EVALUATE "(EXPRESSION)"
000A73r 2               ; ----------------------------------------------------------------------------
000A73r 2               PARCHK:
000A73r 2  20 rr rr             jsr     CHKOPN
000A76r 2  20 rr rr             jsr     FRMEVL
000A79r 2               CHKCLS:
000A79r 2  A9 29                lda     #$29
000A7Br 2  2C                   .byte   $2C
000A7Cr 2               CHKOPN:
000A7Cr 2  A9 28                lda     #$28
000A7Er 2  2C                   .byte   $2C
000A7Fr 2               CHKCOM:
000A7Fr 2  A9 2C                lda     #$2C
000A81r 2               
000A81r 2               ; ----------------------------------------------------------------------------
000A81r 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000A81r 2               ; ----------------------------------------------------------------------------
000A81r 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000A81r 2  A0 00                ldy     #$00
000A83r 2  D1 C3                cmp     (TXTPTR),y
000A85r 2  D0 03                bne     SYNERR
000A87r 2  4C BC 00             jmp     CHRGET
000A8Ar 2               ; ----------------------------------------------------------------------------
000A8Ar 2               SYNERR:
000A8Ar 2  A2 02                ldx     #ERR_SYNTAX
000A8Cr 2  4C rr rr             jmp     ERROR
000A8Fr 2               ; ----------------------------------------------------------------------------
000A8Fr 2               MIN:
000A8Fr 2  A0 15                ldy     #$15
000A91r 2               EQUL:
000A91r 2  68                   pla
000A92r 2  68                   pla
000A93r 2  4C rr rr             jmp     L2CA4
000A96r 2               ; ----------------------------------------------------------------------------
000A96r 2               FRM_VARIABLE:
000A96r 2  20 rr rr             jsr     PTRGET
000A99r 2               FRM_VARIABLE_CALL	= *-1
000A99r 2  85 AE                sta     FAC_LAST-1
000A9Br 2  84 AF                sty     FAC_LAST
000A9Dr 2               .ifdef CONFIG_CBM_ALL
000A9Dr 2                       lda     VARNAM
000A9Dr 2                       ldy     VARNAM+1
000A9Dr 2               .endif
000A9Dr 2  A6 5F                ldx     VALTYP
000A9Fr 2  F0 01                beq     L2DB1
000AA1r 2               .ifdef CONFIG_CBM_ALL
000AA1r 2                 .ifdef CONFIG_CBM1_PATCHES
000AA1r 2                       jmp     PATCH2
000AA1r 2                       clc
000AA1r 2               LCE3B:
000AA1r 2                 .else
000AA1r 2                       ldx     #$00
000AA1r 2                       stx     STRNG1+1
000AA1r 2                       bit     FAC+4
000AA1r 2                       bpl     LCE53
000AA1r 2                       cmp     #$54	; T
000AA1r 2                       bne     LCE53
000AA1r 2                 .endif
000AA1r 2                       cpy     #$C9	; I$
000AA1r 2                       bne     LCE53
000AA1r 2                       jsr     LCE76
000AA1r 2                       sty     EXPON
000AA1r 2                       dey
000AA1r 2                       sty     STRNG2
000AA1r 2                       ldy     #$06
000AA1r 2                       sty     INDX
000AA1r 2                       ldy     #$24
000AA1r 2                       jsr     LDD3A
000AA1r 2                       jmp     LD353
000AA1r 2               LCE53:
000AA1r 2               .endif
000AA1r 2               .ifdef CONFIG_2
000AA1r 2                 .ifndef CBM2
000AA1r 2               ; bugfix?
000AA1r 2               ; fixed on AppleSoft II, not on any CBM
000AA1r 2                       ldx     #$00
000AA1r 2                       stx     STRNG1+1
000AA1r 2                 .endif
000AA1r 2               .endif
000AA1r 2  60                   rts
000AA2r 2               L2DB1:
000AA2r 2               .ifndef CONFIG_SMALL
000AA2r 2                       ldx     VALTYP+1
000AA2r 2                       bpl     L2DC2
000AA2r 2                       ldy     #$00
000AA2r 2                       lda     (FAC+3),y
000AA2r 2                       tax
000AA2r 2                       iny
000AA2r 2                       lda     (FAC+3),y
000AA2r 2                       tay
000AA2r 2                       txa
000AA2r 2                       jmp     GIVAYF
000AA2r 2               L2DC2:
000AA2r 2               .endif
000AA2r 2               .ifdef CONFIG_CBM1_PATCHES
000AA2r 2                       jmp     PATCH3
000AA2r 2                       .byte   $19
000AA2r 2               .endif
000AA2r 2               .ifdef CBM2
000AA2r 2                       bit     FAC+4
000AA2r 2                       bpl     LCE90
000AA2r 2                       cmp     #$54
000AA2r 2                       bne     LCE82
000AA2r 2               .endif
000AA2r 2               .ifndef CONFIG_CBM_ALL
000AA2r 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000AA5r 2               .endif
000AA5r 2               .ifdef CONFIG_CBM_ALL
000AA5r 2               LCE69:
000AA5r 2                       cpy     #$49
000AA5r 2               .ifdef CBM1
000AA5r 2                       bne     LCE82
000AA5r 2               .else
000AA5r 2                       bne     LCE90
000AA5r 2               .endif
000AA5r 2                       jsr     LCE76
000AA5r 2                       tya
000AA5r 2                       ldx     #$A0
000AA5r 2                       jmp     LDB21
000AA5r 2               LCE76:
000AA5r 2               .ifdef CBM1
000AA5r 2                       lda     #$FE
000AA5r 2                       ldy     #$01
000AA5r 2               .else
000AA5r 2                       lda     #$8B
000AA5r 2                       ldy     #$00
000AA5r 2               .endif
000AA5r 2                       sei
000AA5r 2                       jsr     LOAD_FAC_FROM_YA
000AA5r 2                       cli
000AA5r 2                       sty     FAC+1
000AA5r 2                       rts
000AA5r 2               LCE82:
000AA5r 2                       cmp     #$53
000AA5r 2                       bne     LCE90
000AA5r 2                       cpy     #$54
000AA5r 2                       bne     LCE90
000AA5r 2                       lda     Z96
000AA5r 2                       jmp     FLOAT
000AA5r 2               LCE90:
000AA5r 2                       lda     FAC+3
000AA5r 2                       ldy     FAC+4
000AA5r 2                       jmp     LOAD_FAC_FROM_YA
000AA5r 2               .endif
000AA5r 2               
000AA5r 2               ; ----------------------------------------------------------------------------
000AA5r 2               UNARY:
000AA5r 2  0A                   asl     a
000AA6r 2  48                   pha
000AA7r 2  AA                   tax
000AA8r 2  20 BC 00             jsr     CHRGET
000AABr 2  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
000AADr 2  90 20                bcc     L2DEF
000AAFr 2  20 rr rr             jsr     CHKOPN
000AB2r 2  20 rr rr             jsr     FRMEVL
000AB5r 2  20 rr rr             jsr     CHKCOM
000AB8r 2  20 rr rr             jsr     CHKSTR
000ABBr 2  68                   pla
000ABCr 2  AA                   tax
000ABDr 2  A5 AF                lda     FAC_LAST
000ABFr 2  48                   pha
000AC0r 2  A5 AE                lda     FAC_LAST-1
000AC2r 2  48                   pha
000AC3r 2  8A                   txa
000AC4r 2  48                   pha
000AC5r 2  20 rr rr             jsr     GETBYT
000AC8r 2  68                   pla
000AC9r 2  A8                   tay
000ACAr 2  8A                   txa
000ACBr 2  48                   pha
000ACCr 2  4C rr rr             jmp     L2DF4
000ACFr 2               L2DEF:
000ACFr 2  20 rr rr             jsr     PARCHK
000AD2r 2  68                   pla
000AD3r 2  A8                   tay
000AD4r 2               L2DF4:
000AD4r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000AD7r 2  85 A2                sta     JMPADRS+1
000AD9r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000ADCr 2  85 A3                sta     JMPADRS+2
000ADEr 2               .ifdef KBD
000ADEr 2                       jsr     LF47D
000ADEr 2               .else
000ADEr 2  20 A1 00             jsr     JMPADRS
000AE1r 2               .endif
000AE1r 2  4C rr rr             jmp     CHKNUM
000AE4r 2               
000AE4r 2               ; ----------------------------------------------------------------------------
000AE4r 2               OR:
000AE4r 2  A0 FF                ldy     #$FF
000AE6r 2  2C                   .byte   $2C
000AE7r 2               ; ----------------------------------------------------------------------------
000AE7r 2               TAND:
000AE7r 2  A0 00                ldy     #$00
000AE9r 2  84 5D                sty     EOLPNTR
000AEBr 2  20 rr rr             jsr     AYINT
000AEEr 2  A5 AE                lda     FAC_LAST-1
000AF0r 2  45 5D                eor     EOLPNTR
000AF2r 2  85 5B                sta     CHARAC
000AF4r 2  A5 AF                lda     FAC_LAST
000AF6r 2  45 5D                eor     EOLPNTR
000AF8r 2  85 5C                sta     ENDCHR
000AFAr 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000AFDr 2  20 rr rr             jsr     AYINT
000B00r 2  A5 AF                lda     FAC_LAST
000B02r 2  45 5D                eor     EOLPNTR
000B04r 2  25 5C                and     ENDCHR
000B06r 2  45 5D                eor     EOLPNTR
000B08r 2  A8                   tay
000B09r 2  A5 AE                lda     FAC_LAST-1
000B0Br 2  45 5D                eor     EOLPNTR
000B0Dr 2  25 5B                and     CHARAC
000B0Fr 2  45 5D                eor     EOLPNTR
000B11r 2  4C rr rr             jmp     GIVAYF
000B14r 2               
000B14r 2               ; ----------------------------------------------------------------------------
000B14r 2               ; PERFORM RELATIONAL OPERATIONS
000B14r 2               ; ----------------------------------------------------------------------------
000B14r 2               RELOPS:
000B14r 2  20 rr rr             jsr     CHKVAL
000B17r 2  B0 13                bcs     STRCMP
000B19r 2  A5 B7                lda     ARGSIGN
000B1Br 2  09 7F                ora     #$7F
000B1Dr 2  25 B4                and     ARG+1
000B1Fr 2  85 B4                sta     ARG+1
000B21r 2  A9 B3                lda     #<ARG
000B23r 2  A0 00                ldy     #$00
000B25r 2  20 rr rr             jsr     FCOMP
000B28r 2  AA                   tax
000B29r 2  4C rr rr             jmp     NUMCMP
000B2Cr 2               
000B2Cr 2               ; ----------------------------------------------------------------------------
000B2Cr 2               ; STRING COMPARISON
000B2Cr 2               ; ----------------------------------------------------------------------------
000B2Cr 2               STRCMP:
000B2Cr 2  A9 00                lda     #$00
000B2Er 2  85 5F                sta     VALTYP
000B30r 2  C6 9B                dec     CPRTYP
000B32r 2  20 rr rr             jsr     FREFAC
000B35r 2  85 AC                sta     FAC
000B37r 2  86 AD                stx     FAC+1
000B39r 2  84 AE                sty     FAC+2
000B3Br 2  A5 B5                lda     ARG_LAST-1
000B3Dr 2  A4 B6                ldy     ARG_LAST
000B3Fr 2  20 rr rr             jsr     FRETMP
000B42r 2  86 B5                stx     ARG_LAST-1
000B44r 2  84 B6                sty     ARG_LAST
000B46r 2  AA                   tax
000B47r 2  38                   sec
000B48r 2  E5 AC                sbc     FAC
000B4Ar 2  F0 08                beq     L2E74
000B4Cr 2  A9 01                lda     #$01
000B4Er 2  90 04                bcc     L2E74
000B50r 2  A6 AC                ldx     FAC
000B52r 2  A9 FF                lda     #$FF
000B54r 2               L2E74:
000B54r 2  85 B0                sta     FACSIGN
000B56r 2  A0 FF                ldy     #$FF
000B58r 2  E8                   inx
000B59r 2               STRCMP1:
000B59r 2  C8                   iny
000B5Ar 2  CA                   dex
000B5Br 2  D0 07                bne     L2E84
000B5Dr 2  A6 B0                ldx     FACSIGN
000B5Fr 2               NUMCMP:
000B5Fr 2  30 0F                bmi     CMPDONE
000B61r 2  18                   clc
000B62r 2  90 0C                bcc     CMPDONE
000B64r 2               L2E84:
000B64r 2  B1 B5                lda     (ARG_LAST-1),y
000B66r 2  D1 AD                cmp     (FAC+1),y
000B68r 2  F0 EF                beq     STRCMP1
000B6Ar 2  A2 FF                ldx     #$FF
000B6Cr 2  B0 02                bcs     CMPDONE
000B6Er 2  A2 01                ldx     #$01
000B70r 2               CMPDONE:
000B70r 2  E8                   inx
000B71r 2  8A                   txa
000B72r 2  2A                   rol     a
000B73r 2  25 63                and     CPRMASK
000B75r 2  F0 02                beq     L2E99
000B77r 2  A9 FF                lda     #$FF
000B79r 2               L2E99:
000B79r 2  4C rr rr             jmp     FLOAT
000B7Cr 2               
000B7Cr 2               .ifdef SYM1
000B7Cr 2               LCDBD:
000B7Cr 2                       jsr     CHRGET
000B7Cr 2                       jsr     CHKOPN
000B7Cr 2                       jsr     FRMEVL
000B7Cr 2                       jsr     CHRGOT
000B7Cr 2                       cmp     #$29
000B7Cr 2                       beq     LCDF1
000B7Cr 2                       jsr     AYINT
000B7Cr 2                       lda     FAC+4
000B7Cr 2                       ldy     FAC+3
000B7Cr 2                       sta     USR+1
000B7Cr 2                       sty     USR+2
000B7Cr 2               LCDD8:
000B7Cr 2                       jsr     CHKCOM
000B7Cr 2                       jsr     FRMEVL
000B7Cr 2                       jsr     CHRGOT
000B7Cr 2                       cmp     #$29
000B7Cr 2                       beq     LCDF1
000B7Cr 2                       jsr     AYINT
000B7Cr 2                       lda     FAC+3
000B7Cr 2                       pha
000B7Cr 2                       lda     FAC+4
000B7Cr 2                       pha
000B7Cr 2                       jmp     LCDD8
000B7Cr 2               
000B7Cr 2               LCDF1:
000B7Cr 2                       jsr     CHRGET
000B7Cr 2                       jsr     AYINT
000B7Cr 2                       lda     FAC+3
000B7Cr 2                       ldy     FAC+4
000B7Cr 2                       jmp     USR
000B7Cr 2               
000B7Cr 2               LCDFE:
000B7Cr 2                       lda     ZD4
000B7Cr 2                       pha
000B7Cr 2                       lda     ZD3
000B7Cr 2                       pha
000B7Cr 2                       jsr     CHRGET
000B7Cr 2                       cmp     #$22
000B7Cr 2                       bne     LCE49
000B7Cr 2                       jsr     CHRGET
000B7Cr 2                       jsr     LCE2B
000B7Cr 2                       tax
000B7Cr 2                       jsr     CHRGOT
000B7Cr 2                       jsr     LCE2B
000B7Cr 2                       pha
000B7Cr 2                       jsr     CHRGOT
000B7Cr 2                       cmp     #$22
000B7Cr 2                       bne     LCE48
000B7Cr 2                       jsr     CHRGET
000B7Cr 2                       pla
000B7Cr 2                       tay
000B7Cr 2                       pla
000B7Cr 2                       pla
000B7Cr 2                       txa
000B7Cr 2                       jmp     GIVAYF
000B7Cr 2               
000B7Cr 2               LCE2B:
000B7Cr 2                       jsr     ASCNIB
000B7Cr 2                       bcs     LCE47
000B7Cr 2                       pha
000B7Cr 2                       jsr     CHRGET
000B7Cr 2                       jsr     ASCNIB
000B7Cr 2                       sta     FAC+4
000B7Cr 2                       bcs     LCE46
000B7Cr 2                       jsr     CHRGET
000B7Cr 2                       pla
000B7Cr 2                       asl     a
000B7Cr 2                       asl     a
000B7Cr 2                       asl     a
000B7Cr 2                       asl     a
000B7Cr 2                       ora     FAC+4
000B7Cr 2                       rts
000B7Cr 2               
000B7Cr 2               LCE46:
000B7Cr 2                       pla
000B7Cr 2               LCE47:
000B7Cr 2                       pla
000B7Cr 2               LCE48:
000B7Cr 2                       pla
000B7Cr 2               LCE49:
000B7Cr 2                       pla
000B7Cr 2                       sta     ZD3
000B7Cr 2                       pla
000B7Cr 2                       sta     ZD4
000B7Cr 2                       jmp     ZERO_FAC
000B7Cr 2               .endif
000B7Cr 2               
000B7Cr 1               .include "var.s"
000B7Cr 2               .segment "CODE"
000B7Cr 2               
000B7Cr 2               ; ----------------------------------------------------------------------------
000B7Cr 2               ; "DIM" STATEMENT
000B7Cr 2               ; ----------------------------------------------------------------------------
000B7Cr 2               NXDIM:
000B7Cr 2  20 rr rr             jsr     CHKCOM
000B7Fr 2               DIM:
000B7Fr 2  AA                   tax
000B80r 2  20 rr rr             jsr     PTRGET2
000B83r 2  20 C2 00             jsr     CHRGOT
000B86r 2  D0 F4                bne     NXDIM
000B88r 2  60                   rts
000B89r 2               
000B89r 2               ; ----------------------------------------------------------------------------
000B89r 2               ; PTRGET -- GENERAL VARIABLE SCAN
000B89r 2               ;
000B89r 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000B89r 2               ; VARTAB AND ARYTAB FOR THE NAME.
000B89r 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000B89r 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000B89r 2               ;
000B89r 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000B89r 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000B89r 2               ;		ELSE = 0
000B89r 2               ;
000B89r 2               ;	SUBFLG -- = $00
000B89r 2               ;		= $40 IF CALLED FROM "GETARYPT"
000B89r 2               ; ----------------------------------------------------------------------------
000B89r 2               PTRGET:
000B89r 2  A2 00                ldx     #$00
000B8Br 2  20 C2 00             jsr     CHRGOT
000B8Er 2               PTRGET2:
000B8Er 2  86 5E                stx     DIMFLG
000B90r 2               PTRGET3:
000B90r 2  85 93                sta     VARNAM
000B92r 2  20 C2 00             jsr     CHRGOT
000B95r 2  20 rr rr             jsr     ISLETC
000B98r 2  B0 03                bcs     NAMOK
000B9Ar 2               SYNERR3:
000B9Ar 2  4C rr rr             jmp     SYNERR
000B9Dr 2               NAMOK:
000B9Dr 2  A2 00                ldx     #$00
000B9Fr 2  86 5F                stx     VALTYP
000BA1r 2               .ifndef CONFIG_SMALL
000BA1r 2                       stx     VALTYP+1
000BA1r 2               .endif
000BA1r 2  20 BC 00             jsr     CHRGET
000BA4r 2  90 05                bcc     L2ECD
000BA6r 2  20 rr rr             jsr     ISLETC
000BA9r 2  90 0B                bcc     L2ED8
000BABr 2               L2ECD:
000BABr 2  AA                   tax
000BACr 2               L2ECE:
000BACr 2  20 BC 00             jsr     CHRGET
000BAFr 2  90 FB                bcc     L2ECE
000BB1r 2  20 rr rr             jsr     ISLETC
000BB4r 2  B0 F6                bcs     L2ECE
000BB6r 2               L2ED8:
000BB6r 2  C9 24                cmp     #$24
000BB8r 2               .ifdef CONFIG_SMALL
000BB8r 2  D0 0B                bne     L2EF9
000BBAr 2               .else
000BBAr 2                       bne     L2EE2
000BBAr 2               .endif
000BBAr 2  A9 FF                lda     #$FF
000BBCr 2  85 5F                sta     VALTYP
000BBEr 2               .ifndef CONFIG_SMALL
000BBEr 2                       bne     L2EF2
000BBEr 2               L2EE2:
000BBEr 2                       cmp     #$25
000BBEr 2                       bne     L2EF9
000BBEr 2                       lda     SUBFLG
000BBEr 2                       bne     SYNERR3
000BBEr 2                       lda     #$80
000BBEr 2                       sta     VALTYP+1
000BBEr 2                       ora     VARNAM
000BBEr 2                       sta     VARNAM
000BBEr 2               L2EF2:
000BBEr 2               .endif
000BBEr 2  8A                   txa
000BBFr 2  09 80                ora     #$80
000BC1r 2  AA                   tax
000BC2r 2  20 BC 00             jsr     CHRGET
000BC5r 2               L2EF9:
000BC5r 2  86 94                stx     VARNAM+1
000BC7r 2  38                   sec
000BC8r 2  05 61                ora     SUBFLG
000BCAr 2  E9 28                sbc     #$28
000BCCr 2  D0 03                bne     L2F05
000BCEr 2  4C rr rr             jmp     ARRAY
000BD1r 2               L2F05:
000BD1r 2  A9 00                lda     #$00
000BD3r 2  85 61                sta     SUBFLG
000BD5r 2  A5 7B                lda     VARTAB
000BD7r 2  A6 7C                ldx     VARTAB+1
000BD9r 2  A0 00                ldy     #$00
000BDBr 2               L2F0F:
000BDBr 2  86 AB                stx     LOWTR+1
000BDDr 2               L2F11:
000BDDr 2  85 AA                sta     LOWTR
000BDFr 2  E4 7E                cpx     ARYTAB+1
000BE1r 2  D0 04                bne     L2F1B
000BE3r 2  C5 7D                cmp     ARYTAB
000BE5r 2  F0 22                beq     NAMENOTFOUND
000BE7r 2               L2F1B:
000BE7r 2  A5 93                lda     VARNAM
000BE9r 2  D1 AA                cmp     (LOWTR),y
000BEBr 2  D0 08                bne     L2F29
000BEDr 2  A5 94                lda     VARNAM+1
000BEFr 2  C8                   iny
000BF0r 2  D1 AA                cmp     (LOWTR),y
000BF2r 2  F0 61                beq     SET_VARPNT_AND_YA
000BF4r 2  88                   dey
000BF5r 2               L2F29:
000BF5r 2  18                   clc
000BF6r 2  A5 AA                lda     LOWTR
000BF8r 2  69 06                adc     #BYTES_PER_VARIABLE
000BFAr 2  90 E1                bcc     L2F11
000BFCr 2  E8                   inx
000BFDr 2  D0 DC                bne     L2F0F
000BFFr 2               
000BFFr 2               ; ----------------------------------------------------------------------------
000BFFr 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000BFFr 2               ;
000BFFr 2               ; RETURN CARRY = 1 IF A-Z
000BFFr 2               ;	= 0 IF NOT
000BFFr 2               ; ----------------------------------------------------------------------------
000BFFr 2               ISLETC:
000BFFr 2  C9 41                cmp     #$41
000C01r 2  90 05                bcc     L2F3C
000C03r 2  E9 5B                sbc     #$5B
000C05r 2  38                   sec
000C06r 2  E9 A5                sbc     #$A5
000C08r 2               L2F3C:
000C08r 2  60                   rts
000C09r 2               
000C09r 2               ; ----------------------------------------------------------------------------
000C09r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000C09r 2               ; ----------------------------------------------------------------------------
000C09r 2               NAMENOTFOUND:
000C09r 2  68                   pla
000C0Ar 2  48                   pha
000C0Br 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000C0Dr 2  D0 07                bne     MAKENEWVARIABLE
000C0Fr 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000C0Fr 2                       tsx
000C0Fr 2                       lda     STACK+2,x
000C0Fr 2                       cmp     #>FRM_VARIABLE_CALL
000C0Fr 2                       bne     MAKENEWVARIABLE
000C0Fr 2               .endif
000C0Fr 2               LD015:
000C0Fr 2  A9 rr                lda     #<C_ZERO
000C11r 2  A0 rr                ldy     #>C_ZERO
000C13r 2  60                   rts
000C14r 2               
000C14r 2               ; ----------------------------------------------------------------------------
000C14r 2               .ifndef CONFIG_2
000C14r 2               C_ZERO:
000C14r 2  00 00                .byte   $00,$00
000C16r 2               .endif
000C16r 2               
000C16r 2               ; ----------------------------------------------------------------------------
000C16r 2               ; MAKE A NEW SIMPLE VARIABLE
000C16r 2               ;
000C16r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000C16r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000C16r 2               ; ----------------------------------------------------------------------------
000C16r 2               MAKENEWVARIABLE:
000C16r 2               .ifdef CONFIG_CBM_ALL
000C16r 2                       lda     VARNAM
000C16r 2                       ldy     VARNAM+1
000C16r 2                       cmp     #$54
000C16r 2                       bne     LD02F
000C16r 2                       cpy     #$C9
000C16r 2                       beq     LD015
000C16r 2                       cpy     #$49
000C16r 2                       bne     LD02F
000C16r 2               LD02C:
000C16r 2                       jmp     SYNERR
000C16r 2               LD02F:
000C16r 2                       cmp     #$53
000C16r 2                       bne     LD037
000C16r 2                       cpy     #$54
000C16r 2                       beq     LD02C
000C16r 2               LD037:
000C16r 2               .endif
000C16r 2  A5 7D                lda     ARYTAB
000C18r 2  A4 7E                ldy     ARYTAB+1
000C1Ar 2  85 AA                sta     LOWTR
000C1Cr 2  84 AB                sty     LOWTR+1
000C1Er 2  A5 7F                lda     STREND
000C20r 2  A4 80                ldy     STREND+1
000C22r 2  85 A6                sta     HIGHTR
000C24r 2  84 A7                sty     HIGHTR+1
000C26r 2  18                   clc
000C27r 2  69 06                adc     #BYTES_PER_VARIABLE
000C29r 2  90 01                bcc     L2F68
000C2Br 2  C8                   iny
000C2Cr 2               L2F68:
000C2Cr 2  85 A4                sta     HIGHDS
000C2Er 2  84 A5                sty     HIGHDS+1
000C30r 2  20 rr rr             jsr     BLTU
000C33r 2  A5 A4                lda     HIGHDS
000C35r 2  A4 A5                ldy     HIGHDS+1
000C37r 2  C8                   iny
000C38r 2  85 7D                sta     ARYTAB
000C3Ar 2  84 7E                sty     ARYTAB+1
000C3Cr 2  A0 00                ldy     #$00
000C3Er 2  A5 93                lda     VARNAM
000C40r 2  91 AA                sta     (LOWTR),y
000C42r 2  C8                   iny
000C43r 2  A5 94                lda     VARNAM+1
000C45r 2  91 AA                sta     (LOWTR),y
000C47r 2  A9 00                lda     #$00
000C49r 2  C8                   iny
000C4Ar 2  91 AA                sta     (LOWTR),y
000C4Cr 2  C8                   iny
000C4Dr 2  91 AA                sta     (LOWTR),y
000C4Fr 2  C8                   iny
000C50r 2  91 AA                sta     (LOWTR),y
000C52r 2  C8                   iny
000C53r 2  91 AA                sta     (LOWTR),y
000C55r 2               .ifndef CONFIG_SMALL
000C55r 2                       iny
000C55r 2                       sta     (LOWTR),y
000C55r 2               .endif
000C55r 2               
000C55r 2               ; ----------------------------------------------------------------------------
000C55r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000C55r 2               ; ----------------------------------------------------------------------------
000C55r 2               SET_VARPNT_AND_YA:
000C55r 2  A5 AA                lda     LOWTR
000C57r 2  18                   clc
000C58r 2  69 02                adc     #$02
000C5Ar 2  A4 AB                ldy     LOWTR+1
000C5Cr 2  90 01                bcc     L2F9E
000C5Er 2  C8                   iny
000C5Fr 2               L2F9E:
000C5Fr 2  85 95                sta     VARPNT
000C61r 2  84 96                sty     VARPNT+1
000C63r 2  60                   rts
000C64r 2               
000C64r 1               .include "array.s"
000C64r 2               .segment "CODE"
000C64r 2               
000C64r 2               ; ----------------------------------------------------------------------------
000C64r 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000C64r 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000C64r 2               ; ----------------------------------------------------------------------------
000C64r 2               GETARY:
000C64r 2  A5 5D                lda     EOLPNTR
000C66r 2  0A                   asl     a
000C67r 2  69 05                adc     #$05
000C69r 2  65 AA                adc     LOWTR
000C6Br 2  A4 AB                ldy     LOWTR+1
000C6Dr 2  90 01                bcc     L2FAF
000C6Fr 2  C8                   iny
000C70r 2               L2FAF:
000C70r 2  85 A4                sta     HIGHDS
000C72r 2  84 A5                sty     HIGHDS+1
000C74r 2  60                   rts
000C75r 2               
000C75r 2               ; ----------------------------------------------------------------------------
000C75r 2               NEG32768:
000C75r 2  90 80 00 00          .byte   $90,$80,$00,$00
000C79r 2               
000C79r 2               .ifdef CONFIG_2C
000C79r 2               		.byte	$00; bugfix: short number
000C79r 2               .endif
000C79r 2               
000C79r 2               ; ----------------------------------------------------------------------------
000C79r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000C79r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000C79r 2               ; IN FAC+3,4
000C79r 2               ; ----------------------------------------------------------------------------
000C79r 2               MAKINT:
000C79r 2  20 BC 00             jsr     CHRGET
000C7Cr 2               .ifdef CONFIG_2
000C7Cr 2                       jsr     FRMEVL
000C7Cr 2               .else
000C7Cr 2  20 rr rr             jsr     FRMNUM
000C7Fr 2               .endif
000C7Fr 2               
000C7Fr 2               ; ----------------------------------------------------------------------------
000C7Fr 2               ; CONVERT FAC TO INTEGER
000C7Fr 2               ; MUST BE POSITIVE AND LESS THAN 32768
000C7Fr 2               ; ----------------------------------------------------------------------------
000C7Fr 2               MKINT:
000C7Fr 2               .ifdef CONFIG_2
000C7Fr 2                       jsr     CHKNUM
000C7Fr 2               .endif
000C7Fr 2  A5 B0                lda     FACSIGN
000C81r 2  30 0D                bmi     MI1
000C83r 2               
000C83r 2               ; ----------------------------------------------------------------------------
000C83r 2               ; CONVERT FAC TO INTEGER
000C83r 2               ; MUST BE -32767 <= FAC <= 32767
000C83r 2               ; ----------------------------------------------------------------------------
000C83r 2               AYINT:
000C83r 2  A5 AC                lda     FAC
000C85r 2  C9 90                cmp     #$90
000C87r 2  90 09                bcc     MI2
000C89r 2  A9 rr                lda     #<NEG32768
000C8Br 2  A0 rr                ldy     #>NEG32768
000C8Dr 2  20 rr rr             jsr     FCOMP
000C90r 2               MI1:
000C90r 2  D0 74                bne     IQERR
000C92r 2               MI2:
000C92r 2  4C rr rr             jmp     QINT
000C95r 2               
000C95r 2               ; ----------------------------------------------------------------------------
000C95r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000C95r 2               ; ----------------------------------------------------------------------------
000C95r 2               ARRAY:
000C95r 2  A5 5E                lda     DIMFLG
000C97r 2               .ifndef CONFIG_SMALL
000C97r 2                       ora     VALTYP+1
000C97r 2               .endif
000C97r 2  48                   pha
000C98r 2  A5 5F                lda     VALTYP
000C9Ar 2  48                   pha
000C9Br 2  A0 00                ldy     #$00
000C9Dr 2               L2FDE:
000C9Dr 2  98                   tya
000C9Er 2  48                   pha
000C9Fr 2  A5 94                lda     VARNAM+1
000CA1r 2  48                   pha
000CA2r 2  A5 93                lda     VARNAM
000CA4r 2  48                   pha
000CA5r 2  20 rr rr             jsr     MAKINT
000CA8r 2  68                   pla
000CA9r 2  85 93                sta     VARNAM
000CABr 2  68                   pla
000CACr 2  85 94                sta     VARNAM+1
000CAEr 2  68                   pla
000CAFr 2  A8                   tay
000CB0r 2  BA                   tsx
000CB1r 2  BD 02 01             lda     STACK+2,x
000CB4r 2  48                   pha
000CB5r 2  BD 01 01             lda     STACK+1,x
000CB8r 2  48                   pha
000CB9r 2  A5 AE                lda     FAC_LAST-1
000CBBr 2  9D 02 01             sta     STACK+2,x
000CBEr 2  A5 AF                lda     FAC_LAST
000CC0r 2  9D 01 01             sta     STACK+1,x
000CC3r 2  C8                   iny
000CC4r 2  20 C2 00             jsr     CHRGOT
000CC7r 2  C9 2C                cmp     #$2C
000CC9r 2  F0 D2                beq     L2FDE
000CCBr 2  84 5D                sty     EOLPNTR
000CCDr 2  20 rr rr             jsr     CHKCLS
000CD0r 2  68                   pla
000CD1r 2  85 5F                sta     VALTYP
000CD3r 2  68                   pla
000CD4r 2               .ifndef CONFIG_SMALL
000CD4r 2                       sta     VALTYP+1
000CD4r 2                       and     #$7F
000CD4r 2               .endif
000CD4r 2  85 5E                sta     DIMFLG
000CD6r 2               ; ----------------------------------------------------------------------------
000CD6r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000CD6r 2               ; ----------------------------------------------------------------------------
000CD6r 2  A6 7D                ldx     ARYTAB
000CD8r 2  A5 7E                lda     ARYTAB+1
000CDAr 2               L301F:
000CDAr 2  86 AA                stx     LOWTR
000CDCr 2  85 AB                sta     LOWTR+1
000CDEr 2  C5 80                cmp     STREND+1
000CE0r 2  D0 04                bne     L302B
000CE2r 2  E4 7F                cpx     STREND
000CE4r 2  F0 39                beq     MAKE_NEW_ARRAY
000CE6r 2               L302B:
000CE6r 2  A0 00                ldy     #$00
000CE8r 2  B1 AA                lda     (LOWTR),y
000CEAr 2  C8                   iny
000CEBr 2  C5 93                cmp     VARNAM
000CEDr 2  D0 06                bne     L303A
000CEFr 2  A5 94                lda     VARNAM+1
000CF1r 2  D1 AA                cmp     (LOWTR),y
000CF3r 2  F0 16                beq     USE_OLD_ARRAY
000CF5r 2               L303A:
000CF5r 2  C8                   iny
000CF6r 2  B1 AA                lda     (LOWTR),y
000CF8r 2  18                   clc
000CF9r 2  65 AA                adc     LOWTR
000CFBr 2  AA                   tax
000CFCr 2  C8                   iny
000CFDr 2  B1 AA                lda     (LOWTR),y
000CFFr 2  65 AB                adc     LOWTR+1
000D01r 2  90 D7                bcc     L301F
000D03r 2               
000D03r 2               ; ----------------------------------------------------------------------------
000D03r 2               ; ERROR:  BAD SUBSCRIPTS
000D03r 2               ; ----------------------------------------------------------------------------
000D03r 2               SUBERR:
000D03r 2  A2 10                ldx     #ERR_BADSUBS
000D05r 2  2C                   .byte   $2C
000D06r 2               
000D06r 2               ; ----------------------------------------------------------------------------
000D06r 2               ; ERROR:  ILLEGAL QUANTITY
000D06r 2               ; ----------------------------------------------------------------------------
000D06r 2               IQERR:
000D06r 2  A2 08                ldx     #ERR_ILLQTY
000D08r 2               JER:
000D08r 2  4C rr rr             jmp     ERROR
000D0Br 2               
000D0Br 2               ; ----------------------------------------------------------------------------
000D0Br 2               ; FOUND THE ARRAY
000D0Br 2               ; ----------------------------------------------------------------------------
000D0Br 2               USE_OLD_ARRAY:
000D0Br 2  A2 12                ldx     #ERR_REDIMD
000D0Dr 2  A5 5E                lda     DIMFLG
000D0Fr 2  D0 F7                bne     JER
000D11r 2  20 rr rr             jsr     GETARY
000D14r 2  A5 5D                lda     EOLPNTR
000D16r 2  A0 04                ldy     #$04
000D18r 2  D1 AA                cmp     (LOWTR),y
000D1Ar 2  D0 E7                bne     SUBERR
000D1Cr 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000D1Fr 2               
000D1Fr 2               ; ----------------------------------------------------------------------------
000D1Fr 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000D1Fr 2               ; ----------------------------------------------------------------------------
000D1Fr 2               MAKE_NEW_ARRAY:
000D1Fr 2  20 rr rr             jsr     GETARY
000D22r 2  20 rr rr             jsr     REASON
000D25r 2  A9 00                lda     #$00
000D27r 2  A8                   tay
000D28r 2  85 BB                sta     STRNG2+1
000D2Ar 2  A2 04                ldx     #BYTES_PER_ELEMENT
000D2Cr 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000D2Cr 2  86 BA                stx     STRNG2
000D2Er 2               .endif
000D2Er 2  A5 93                lda     VARNAM
000D30r 2  91 AA                sta     (LOWTR),y
000D32r 2               .ifndef CONFIG_SMALL
000D32r 2                       bpl     L3078
000D32r 2                       dex
000D32r 2               L3078:
000D32r 2               .endif
000D32r 2  C8                   iny
000D33r 2  A5 94                lda     VARNAM+1
000D35r 2  91 AA                sta     (LOWTR),y
000D37r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000D37r 2                       bpl     L3081
000D37r 2                       dex
000D37r 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000D37r 2                       dex
000D37r 2                 .endif
000D37r 2               L3081:
000D37r 2                       stx     STRNG2
000D37r 2               .endif
000D37r 2  A5 5D                lda     EOLPNTR
000D39r 2  C8                   iny
000D3Ar 2  C8                   iny
000D3Br 2  C8                   iny
000D3Cr 2  91 AA                sta     (LOWTR),y
000D3Er 2               L308A:
000D3Er 2  A2 0B                ldx     #$0B
000D40r 2  A9 00                lda     #$00
000D42r 2  24 5E                bit     DIMFLG
000D44r 2  50 08                bvc     L309A
000D46r 2  68                   pla
000D47r 2  18                   clc
000D48r 2  69 01                adc     #$01
000D4Ar 2  AA                   tax
000D4Br 2  68                   pla
000D4Cr 2  69 00                adc     #$00
000D4Er 2               L309A:
000D4Er 2  C8                   iny
000D4Fr 2  91 AA                sta     (LOWTR),y
000D51r 2  C8                   iny
000D52r 2  8A                   txa
000D53r 2  91 AA                sta     (LOWTR),y
000D55r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000D58r 2  86 BA                stx     STRNG2
000D5Ar 2  85 BB                sta     STRNG2+1
000D5Cr 2  A4 71                ldy     INDEX
000D5Er 2  C6 5D                dec     EOLPNTR
000D60r 2  D0 DC                bne     L308A
000D62r 2  65 A5                adc     HIGHDS+1
000D64r 2  B0 5D                bcs     GME
000D66r 2  85 A5                sta     HIGHDS+1
000D68r 2  A8                   tay
000D69r 2  8A                   txa
000D6Ar 2  65 A4                adc     HIGHDS
000D6Cr 2  90 03                bcc     L30BD
000D6Er 2  C8                   iny
000D6Fr 2  F0 52                beq     GME
000D71r 2               L30BD:
000D71r 2  20 rr rr             jsr     REASON
000D74r 2  85 7F                sta     STREND
000D76r 2  84 80                sty     STREND+1
000D78r 2  A9 00                lda     #$00
000D7Ar 2  E6 BB                inc     STRNG2+1
000D7Cr 2  A4 BA                ldy     STRNG2
000D7Er 2  F0 05                beq     L30D1
000D80r 2               L30CC:
000D80r 2  88                   dey
000D81r 2  91 A4                sta     (HIGHDS),y
000D83r 2  D0 FB                bne     L30CC
000D85r 2               L30D1:
000D85r 2  C6 A5                dec     HIGHDS+1
000D87r 2  C6 BB                dec     STRNG2+1
000D89r 2  D0 F5                bne     L30CC
000D8Br 2  E6 A5                inc     HIGHDS+1
000D8Dr 2  38                   sec
000D8Er 2  A5 7F                lda     STREND
000D90r 2  E5 AA                sbc     LOWTR
000D92r 2  A0 02                ldy     #$02
000D94r 2  91 AA                sta     (LOWTR),y
000D96r 2  A5 80                lda     STREND+1
000D98r 2  C8                   iny
000D99r 2  E5 AB                sbc     LOWTR+1
000D9Br 2  91 AA                sta     (LOWTR),y
000D9Dr 2  A5 5E                lda     DIMFLG
000D9Fr 2  D0 58                bne     RTS9
000DA1r 2  C8                   iny
000DA2r 2               
000DA2r 2               ; ----------------------------------------------------------------------------
000DA2r 2               ; FIND SPECIFIED ARRAY ELEMENT
000DA2r 2               ;
000DA2r 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000DA2r 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000DA2r 2               ; ----------------------------------------------------------------------------
000DA2r 2               FIND_ARRAY_ELEMENT:
000DA2r 2  B1 AA                lda     (LOWTR),y
000DA4r 2  85 5D                sta     EOLPNTR
000DA6r 2  A9 00                lda     #$00
000DA8r 2  85 BA                sta     STRNG2
000DAAr 2               L30F6:
000DAAr 2  85 BB                sta     STRNG2+1
000DACr 2  C8                   iny
000DADr 2  68                   pla
000DAEr 2  AA                   tax
000DAFr 2  85 AE                sta     FAC_LAST-1
000DB1r 2  68                   pla
000DB2r 2  85 AF                sta     FAC_LAST
000DB4r 2  D1 AA                cmp     (LOWTR),y
000DB6r 2  90 0E                bcc     FAE2
000DB8r 2  D0 06                bne     GSE
000DBAr 2  C8                   iny
000DBBr 2  8A                   txa
000DBCr 2  D1 AA                cmp     (LOWTR),y
000DBEr 2  90 07                bcc     FAE3
000DC0r 2               ; ----------------------------------------------------------------------------
000DC0r 2               GSE:
000DC0r 2  4C rr rr             jmp     SUBERR
000DC3r 2               GME:
000DC3r 2  4C rr rr             jmp     MEMERR
000DC6r 2               ; ----------------------------------------------------------------------------
000DC6r 2               FAE2:
000DC6r 2  C8                   iny
000DC7r 2               FAE3:
000DC7r 2  A5 BB                lda     STRNG2+1
000DC9r 2  05 BA                ora     STRNG2
000DCBr 2  18                   clc
000DCCr 2  F0 0A                beq     L3124
000DCEr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000DD1r 2  8A                   txa
000DD2r 2  65 AE                adc     FAC_LAST-1
000DD4r 2  AA                   tax
000DD5r 2  98                   tya
000DD6r 2  A4 71                ldy     INDEX
000DD8r 2               L3124:
000DD8r 2  65 AF                adc     FAC_LAST
000DDAr 2  86 BA                stx     STRNG2
000DDCr 2  C6 5D                dec     EOLPNTR
000DDEr 2  D0 CA                bne     L30F6
000DE0r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000DE0r 2  06 BA                asl     STRNG2
000DE2r 2  2A                   rol     a
000DE3r 2  B0 DB                bcs     GSE
000DE5r 2  06 BA                asl     STRNG2
000DE7r 2  2A                   rol     a
000DE8r 2  B0 D6                bcs     GSE
000DEAr 2  A8                   tay
000DEBr 2  A5 BA                lda     STRNG2
000DEDr 2               .else
000DEDr 2                 .ifdef CONFIG_11A
000DEDr 2                       sta     STRNG2+1
000DEDr 2                 .endif
000DEDr 2                       ldx     #BYTES_FP
000DEDr 2                 .ifdef CONFIG_SMALL
000DEDr 2                       lda     VARNAM+1
000DEDr 2                 .else
000DEDr 2                       lda     VARNAM
000DEDr 2                 .endif
000DEDr 2                       bpl     L3135
000DEDr 2                       dex
000DEDr 2               L3135:
000DEDr 2                 .ifdef CONFIG_SMALL
000DEDr 2                       stx     RESULT+1
000DEDr 2                 .else
000DEDr 2                       lda     VARNAM+1
000DEDr 2                       bpl     L313B
000DEDr 2                       dex
000DEDr 2                       dex
000DEDr 2               L313B:
000DEDr 2                       stx     RESULT+2
000DEDr 2                 .endif
000DEDr 2                       lda     #$00
000DEDr 2                       jsr     MULTIPLY_SUBS1
000DEDr 2                       txa
000DEDr 2               .endif
000DEDr 2  65 A4                adc     HIGHDS
000DEFr 2  85 95                sta     VARPNT
000DF1r 2  98                   tya
000DF2r 2  65 A5                adc     HIGHDS+1
000DF4r 2  85 96                sta     VARPNT+1
000DF6r 2  A8                   tay
000DF7r 2  A5 95                lda     VARPNT
000DF9r 2               RTS9:
000DF9r 2  60                   rts
000DFAr 2               
000DFAr 2               ; ----------------------------------------------------------------------------
000DFAr 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000DFAr 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000DFAr 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000DFAr 2               ; ----------------------------------------------------------------------------
000DFAr 2               MULTIPLY_SUBSCRIPT:
000DFAr 2  84 71                sty     INDEX
000DFCr 2  B1 AA                lda     (LOWTR),y
000DFEr 2  85 76                sta     RESULT_LAST-2
000E00r 2  88                   dey
000E01r 2  B1 AA                lda     (LOWTR),y
000E03r 2               MULTIPLY_SUBS1:
000E03r 2  85 77                sta     RESULT_LAST-1
000E05r 2  A9 10                lda     #$10
000E07r 2  85 A8                sta     INDX
000E09r 2  A2 00                ldx     #$00
000E0Br 2  A0 00                ldy     #$00
000E0Dr 2               L3163:
000E0Dr 2  8A                   txa
000E0Er 2  0A                   asl     a
000E0Fr 2  AA                   tax
000E10r 2  98                   tya
000E11r 2  2A                   rol     a
000E12r 2  A8                   tay
000E13r 2  B0 AE                bcs     GME
000E15r 2  06 BA                asl     STRNG2
000E17r 2  26 BB                rol     STRNG2+1
000E19r 2  90 0B                bcc     L317C
000E1Br 2  18                   clc
000E1Cr 2  8A                   txa
000E1Dr 2  65 76                adc     RESULT_LAST-2
000E1Fr 2  AA                   tax
000E20r 2  98                   tya
000E21r 2  65 77                adc     RESULT_LAST-1
000E23r 2  A8                   tay
000E24r 2  B0 9D                bcs     GME
000E26r 2               L317C:
000E26r 2  C6 A8                dec     INDX
000E28r 2  D0 E3                bne     L3163
000E2Ar 2  60                   rts
000E2Br 2               
000E2Br 2               
000E2Br 1               .include "misc2.s"
000E2Br 2               .segment "CODE"
000E2Br 2               
000E2Br 2               ; ----------------------------------------------------------------------------
000E2Br 2               ; "FRE" FUNCTION
000E2Br 2               ;
000E2Br 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000E2Br 2               ; ----------------------------------------------------------------------------
000E2Br 2               FRE:
000E2Br 2  A5 5F                lda     VALTYP
000E2Dr 2  F0 03                beq     L3188
000E2Fr 2  20 rr rr             jsr     FREFAC
000E32r 2               L3188:
000E32r 2  20 rr rr             jsr     GARBAG
000E35r 2  38                   sec
000E36r 2  A5 81                lda     FRETOP
000E38r 2  E5 7F                sbc     STREND
000E3Ar 2  A8                   tay
000E3Br 2  A5 82                lda     FRETOP+1
000E3Dr 2  E5 80                sbc     STREND+1
000E3Fr 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000E3Fr 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000E3Fr 2               
000E3Fr 2               ; ----------------------------------------------------------------------------
000E3Fr 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000E3Fr 2               ; ----------------------------------------------------------------------------
000E3Fr 2               GIVAYF:
000E3Fr 2  A2 00                ldx     #$00
000E41r 2  86 5F                stx     VALTYP
000E43r 2  85 AD                sta     FAC+1
000E45r 2  84 AE                sty     FAC+2
000E47r 2  A2 90                ldx     #$90
000E49r 2  4C rr rr             jmp     FLOAT1
000E4Cr 2               POS:
000E4Cr 2  A4 0E                ldy     POSX
000E4Er 2               
000E4Er 2               ; ----------------------------------------------------------------------------
000E4Er 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000E4Er 2               ; ----------------------------------------------------------------------------
000E4Er 2               SNGFLT:
000E4Er 2  A9 00                lda     #$00
000E50r 2  F0 ED                beq     GIVAYF
000E52r 2               
000E52r 2               ; ----------------------------------------------------------------------------
000E52r 2               ; CHECK FOR DIRECT OR RUNNING MODE
000E52r 2               ; GIVING ERROR IF DIRECT MODE
000E52r 2               ; ----------------------------------------------------------------------------
000E52r 2               ERRDIR:
000E52r 2  A6 88                ldx     CURLIN+1
000E54r 2  E8                   inx
000E55r 2  D0 A2                bne     RTS9
000E57r 2  A2 16                ldx     #ERR_ILLDIR
000E59r 2               .ifdef CONFIG_2
000E59r 2                       .byte   $2C
000E59r 2               LD288:
000E59r 2                       ldx     #ERR_UNDEFFN
000E59r 2               .endif
000E59r 2               L31AF:
000E59r 2  4C rr rr             jmp     ERROR
000E5Cr 2               DEF:
000E5Cr 2  20 rr rr             jsr     FNC
000E5Fr 2  20 rr rr             jsr     ERRDIR
000E62r 2  20 rr rr             jsr     CHKOPN
000E65r 2  A9 80                lda     #$80
000E67r 2  85 61                sta     SUBFLG
000E69r 2  20 rr rr             jsr     PTRGET
000E6Cr 2  20 rr rr             jsr     CHKNUM
000E6Fr 2  20 rr rr             jsr     CHKCLS
000E72r 2  A9 AB                lda     #TOKEN_EQUAL
000E74r 2  20 rr rr             jsr     SYNCHR
000E77r 2               .ifndef CONFIG_SMALL
000E77r 2                       pha
000E77r 2               .endif
000E77r 2  A5 96                lda     VARPNT+1
000E79r 2  48                   pha
000E7Ar 2  A5 95                lda     VARPNT
000E7Cr 2  48                   pha
000E7Dr 2  A5 C4                lda     TXTPTR+1
000E7Fr 2  48                   pha
000E80r 2  A5 C3                lda     TXTPTR
000E82r 2  48                   pha
000E83r 2  20 rr rr             jsr     DATA
000E86r 2  4C rr rr             jmp     L3250
000E89r 2               FNC:
000E89r 2  A9 9E                lda     #TOKEN_FN
000E8Br 2  20 rr rr             jsr     SYNCHR
000E8Er 2  09 80                ora     #$80
000E90r 2  85 61                sta     SUBFLG
000E92r 2  20 rr rr             jsr     PTRGET3
000E95r 2  85 9C                sta     FNCNAM
000E97r 2  84 9D                sty     FNCNAM+1
000E99r 2  4C rr rr             jmp     CHKNUM
000E9Cr 2               L31F3:
000E9Cr 2  20 rr rr             jsr     FNC
000E9Fr 2  A5 9D                lda     FNCNAM+1
000EA1r 2  48                   pha
000EA2r 2  A5 9C                lda     FNCNAM
000EA4r 2  48                   pha
000EA5r 2  20 rr rr             jsr     PARCHK
000EA8r 2  20 rr rr             jsr     CHKNUM
000EABr 2  68                   pla
000EACr 2  85 9C                sta     FNCNAM
000EAEr 2  68                   pla
000EAFr 2  85 9D                sta     FNCNAM+1
000EB1r 2  A0 02                ldy     #$02
000EB3r 2               .ifndef CONFIG_2
000EB3r 2  A2 20                ldx     #ERR_UNDEFFN
000EB5r 2               .endif
000EB5r 2  B1 9C                lda     (FNCNAM),y
000EB7r 2               .ifndef CONFIG_2
000EB7r 2  F0 A0                beq     L31AF
000EB9r 2               .endif
000EB9r 2  85 95                sta     VARPNT
000EBBr 2  AA                   tax
000EBCr 2  C8                   iny
000EBDr 2  B1 9C                lda     (FNCNAM),y
000EBFr 2               .ifdef CONFIG_2
000EBFr 2                       beq     LD288
000EBFr 2               .endif
000EBFr 2  85 96                sta     VARPNT+1
000EC1r 2               .ifndef CONFIG_SMALL
000EC1r 2                       iny
000EC1r 2               .endif
000EC1r 2               L3219:
000EC1r 2  B1 95                lda     (VARPNT),y
000EC3r 2  48                   pha
000EC4r 2  88                   dey
000EC5r 2  10 FA                bpl     L3219
000EC7r 2  A4 96                ldy     VARPNT+1
000EC9r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000ECCr 2  A5 C4                lda     TXTPTR+1
000ECEr 2  48                   pha
000ECFr 2  A5 C3                lda     TXTPTR
000ED1r 2  48                   pha
000ED2r 2  B1 9C                lda     (FNCNAM),y
000ED4r 2  85 C3                sta     TXTPTR
000ED6r 2  C8                   iny
000ED7r 2  B1 9C                lda     (FNCNAM),y
000ED9r 2  85 C4                sta     TXTPTR+1
000EDBr 2  A5 96                lda     VARPNT+1
000EDDr 2  48                   pha
000EDEr 2  A5 95                lda     VARPNT
000EE0r 2  48                   pha
000EE1r 2  20 rr rr             jsr     FRMNUM
000EE4r 2  68                   pla
000EE5r 2  85 9C                sta     FNCNAM
000EE7r 2  68                   pla
000EE8r 2  85 9D                sta     FNCNAM+1
000EEAr 2  20 C2 00             jsr     CHRGOT
000EEDr 2  F0 03                beq     L324A
000EEFr 2  4C rr rr             jmp     SYNERR
000EF2r 2               L324A:
000EF2r 2  68                   pla
000EF3r 2  85 C3                sta     TXTPTR
000EF5r 2  68                   pla
000EF6r 2  85 C4                sta     TXTPTR+1
000EF8r 2               L3250:
000EF8r 2  A0 00                ldy     #$00
000EFAr 2  68                   pla
000EFBr 2  91 9C                sta     (FNCNAM),y
000EFDr 2  68                   pla
000EFEr 2  C8                   iny
000EFFr 2  91 9C                sta     (FNCNAM),y
000F01r 2  68                   pla
000F02r 2  C8                   iny
000F03r 2  91 9C                sta     (FNCNAM),y
000F05r 2  68                   pla
000F06r 2  C8                   iny
000F07r 2  91 9C                sta     (FNCNAM),y
000F09r 2               .ifndef CONFIG_SMALL
000F09r 2                       pla
000F09r 2                       iny
000F09r 2                       sta     (FNCNAM),y
000F09r 2               .endif
000F09r 2  60                   rts
000F0Ar 2               
000F0Ar 1               .include "string.s"
000F0Ar 2               .segment "CODE"
000F0Ar 2               ; ----------------------------------------------------------------------------
000F0Ar 2               ; "STR$" FUNCTION
000F0Ar 2               ; ----------------------------------------------------------------------------
000F0Ar 2               STR:
000F0Ar 2  20 rr rr             jsr     CHKNUM
000F0Dr 2  A0 00                ldy     #$00
000F0Fr 2  20 rr rr             jsr     FOUT1
000F12r 2  68                   pla
000F13r 2  68                   pla
000F14r 2               LD353:
000F14r 2  A9 FF                lda     #<(STACK2-1)
000F16r 2  A0 00                ldy     #>(STACK2-1)
000F18r 2               .if STACK2 > $0100
000F18r 2                       bne     STRLIT
000F18r 2               .else
000F18r 2  F0 12                beq     STRLIT
000F1Ar 2               .endif
000F1Ar 2               
000F1Ar 2               ; ----------------------------------------------------------------------------
000F1Ar 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F1Ar 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000F1Ar 2               ; ----------------------------------------------------------------------------
000F1Ar 2               STRINI:
000F1Ar 2  A6 AE                ldx     FAC_LAST-1
000F1Cr 2  A4 AF                ldy     FAC_LAST
000F1Er 2  86 9E                stx     DSCPTR
000F20r 2  84 9F                sty     DSCPTR+1
000F22r 2               
000F22r 2               ; ----------------------------------------------------------------------------
000F22r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000F22r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000F22r 2               ; ----------------------------------------------------------------------------
000F22r 2               STRSPA:
000F22r 2  20 rr rr             jsr     GETSPA
000F25r 2  86 AD                stx     FAC+1
000F27r 2  84 AE                sty     FAC+2
000F29r 2  85 AC                sta     FAC
000F2Br 2  60                   rts
000F2Cr 2               
000F2Cr 2               ; ----------------------------------------------------------------------------
000F2Cr 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F2Cr 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000F2Cr 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F2Cr 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F2Cr 2               ; ----------------------------------------------------------------------------
000F2Cr 2               STRLIT:
000F2Cr 2  A2 22                ldx     #$22
000F2Er 2  86 5B                stx     CHARAC
000F30r 2  86 5C                stx     ENDCHR
000F32r 2               
000F32r 2               ; ----------------------------------------------------------------------------
000F32r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000F32r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000F32r 2               ;
000F32r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000F32r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000F32r 2               ; ----------------------------------------------------------------------------
000F32r 2               STRLT2:
000F32r 2  85 B8                sta     STRNG1
000F34r 2  84 B9                sty     STRNG1+1
000F36r 2  85 AD                sta     FAC+1
000F38r 2  84 AE                sty     FAC+2
000F3Ar 2  A0 FF                ldy     #$FF
000F3Cr 2               L3298:
000F3Cr 2  C8                   iny
000F3Dr 2  B1 B8                lda     (STRNG1),y
000F3Fr 2  F0 0C                beq     L32A9
000F41r 2  C5 5B                cmp     CHARAC
000F43r 2  F0 04                beq     L32A5
000F45r 2  C5 5C                cmp     ENDCHR
000F47r 2  D0 F3                bne     L3298
000F49r 2               L32A5:
000F49r 2  C9 22                cmp     #$22
000F4Br 2  F0 01                beq     L32AA
000F4Dr 2               L32A9:
000F4Dr 2  18                   clc
000F4Er 2               L32AA:
000F4Er 2  84 AC                sty     FAC
000F50r 2  98                   tya
000F51r 2  65 B8                adc     STRNG1
000F53r 2  85 BA                sta     STRNG2
000F55r 2  A6 B9                ldx     STRNG1+1
000F57r 2  90 01                bcc     L32B6
000F59r 2  E8                   inx
000F5Ar 2               L32B6:
000F5Ar 2  86 BB                stx     STRNG2+1
000F5Cr 2  A5 B9                lda     STRNG1+1
000F5Er 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000F5Er 2                       beq     LD399
000F5Er 2                       cmp     #>INPUTBUFFER
000F5Er 2               .elseif .def(AIM65)
000F5Er 2                       beq     LD399
000F5Er 2                       cmp     #$01
000F5Er 2               .endif
000F5Er 2  D0 0B                bne     PUTNEW
000F60r 2               LD399:
000F60r 2  98                   tya
000F61r 2  20 rr rr             jsr     STRINI
000F64r 2  A6 B8                ldx     STRNG1
000F66r 2  A4 B9                ldy     STRNG1+1
000F68r 2  20 rr rr             jsr     MOVSTR
000F6Br 2               
000F6Br 2               ; ----------------------------------------------------------------------------
000F6Br 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
000F6Br 2               ;
000F6Br 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
000F6Br 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
000F6Br 2               ; ----------------------------------------------------------------------------
000F6Br 2               PUTNEW:
000F6Br 2  A6 65                ldx     TEMPPT
000F6Dr 2  E0 71                cpx     #TEMPST+9
000F6Fr 2  D0 05                bne     PUTEMP
000F71r 2  A2 1C                ldx     #ERR_FRMCPX
000F73r 2               JERR:
000F73r 2  4C rr rr             jmp     ERROR
000F76r 2               PUTEMP:
000F76r 2  A5 AC                lda     FAC
000F78r 2  95 00                sta     0,x
000F7Ar 2  A5 AD                lda     FAC+1
000F7Cr 2  95 01                sta     1,x
000F7Er 2  A5 AE                lda     FAC+2
000F80r 2  95 02                sta     2,x
000F82r 2  A0 00                ldy     #$00
000F84r 2  86 AE                stx     FAC_LAST-1
000F86r 2  84 AF                sty     FAC_LAST
000F88r 2               .ifdef CONFIG_2
000F88r 2                       sty     FACEXTENSION
000F88r 2               .endif
000F88r 2  88                   dey
000F89r 2  84 5F                sty     VALTYP
000F8Br 2  86 66                stx     LASTPT
000F8Dr 2  E8                   inx
000F8Er 2  E8                   inx
000F8Fr 2  E8                   inx
000F90r 2  86 65                stx     TEMPPT
000F92r 2  60                   rts
000F93r 2               
000F93r 2               ; ----------------------------------------------------------------------------
000F93r 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
000F93r 2               ; (A)=# BYTES SPACE TO MAKE
000F93r 2               ;
000F93r 2               ; RETURN WITH (A) SAME,
000F93r 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
000F93r 2               ; ----------------------------------------------------------------------------
000F93r 2               GETSPA:
000F93r 2  46 60                lsr     DATAFLG
000F95r 2               L32F1:
000F95r 2  48                   pha
000F96r 2  49 FF                eor     #$FF
000F98r 2  38                   sec
000F99r 2  65 81                adc     FRETOP
000F9Br 2  A4 82                ldy     FRETOP+1
000F9Dr 2  B0 01                bcs     L32FC
000F9Fr 2  88                   dey
000FA0r 2               L32FC:
000FA0r 2  C4 80                cpy     STREND+1
000FA2r 2  90 11                bcc     L3311
000FA4r 2  D0 04                bne     L3306
000FA6r 2  C5 7F                cmp     STREND
000FA8r 2  90 0B                bcc     L3311
000FAAr 2               L3306:
000FAAr 2  85 81                sta     FRETOP
000FACr 2  84 82                sty     FRETOP+1
000FAEr 2  85 83                sta     FRESPC
000FB0r 2  84 84                sty     FRESPC+1
000FB2r 2  AA                   tax
000FB3r 2  68                   pla
000FB4r 2  60                   rts
000FB5r 2               L3311:
000FB5r 2  A2 0C                ldx     #ERR_MEMFULL
000FB7r 2  A5 60                lda     DATAFLG
000FB9r 2  30 B8                bmi     JERR
000FBBr 2  20 rr rr             jsr     GARBAG
000FBEr 2  A9 80                lda     #$80
000FC0r 2  85 60                sta     DATAFLG
000FC2r 2  68                   pla
000FC3r 2  D0 D0                bne     L32F1
000FC5r 2               
000FC5r 2               ; ----------------------------------------------------------------------------
000FC5r 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
000FC5r 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
000FC5r 2               ; BELOW STRING AREA DOWN TO STREND.
000FC5r 2               ; ----------------------------------------------------------------------------
000FC5r 2               GARBAG:
000FC5r 2               
000FC5r 2               .ifdef CONST_MEMSIZ
000FC5r 2                       ldx     #<CONST_MEMSIZ
000FC5r 2                       lda     #>CONST_MEMSIZ
000FC5r 2               .else
000FC5r 2  A6 85                ldx     MEMSIZ
000FC7r 2  A5 86                lda     MEMSIZ+1
000FC9r 2               .endif
000FC9r 2               FINDHIGHESTSTRING:
000FC9r 2  86 81                stx     FRETOP
000FCBr 2  85 82                sta     FRETOP+1
000FCDr 2  A0 00                ldy     #$00
000FCFr 2  84 9D                sty     FNCNAM+1
000FD1r 2               .ifdef CONFIG_2
000FD1r 2                       sty     FNCNAM	; GC bugfix!
000FD1r 2               .endif
000FD1r 2  A5 7F                lda     STREND
000FD3r 2  A6 80                ldx     STREND+1
000FD5r 2  85 AA                sta     LOWTR
000FD7r 2  86 AB                stx     LOWTR+1
000FD9r 2  A9 68                lda     #TEMPST
000FDBr 2  A2 00                ldx     #$00
000FDDr 2  85 71                sta     INDEX
000FDFr 2  86 72                stx     INDEX+1
000FE1r 2               L333D:
000FE1r 2  C5 65                cmp     TEMPPT
000FE3r 2  F0 05                beq     L3346
000FE5r 2  20 rr rr             jsr     CHECK_VARIABLE
000FE8r 2  F0 F7                beq     L333D
000FEAr 2               L3346:
000FEAr 2  A9 06                lda     #BYTES_PER_VARIABLE
000FECr 2  85 A0                sta     DSCLEN
000FEEr 2  A5 7B                lda     VARTAB
000FF0r 2  A6 7C                ldx     VARTAB+1
000FF2r 2  85 71                sta     INDEX
000FF4r 2  86 72                stx     INDEX+1
000FF6r 2               L3352:
000FF6r 2  E4 7E                cpx     ARYTAB+1
000FF8r 2  D0 04                bne     L335A
000FFAr 2  C5 7D                cmp     ARYTAB
000FFCr 2  F0 05                beq     L335F
000FFEr 2               L335A:
000FFEr 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
001001r 2  F0 F3                beq     L3352
001003r 2               L335F:
001003r 2  85 A4                sta     HIGHDS
001005r 2  86 A5                stx     HIGHDS+1
001007r 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
001009r 2  85 A0                sta     DSCLEN
00100Br 2               L3367:
00100Br 2  A5 A4                lda     HIGHDS
00100Dr 2  A6 A5                ldx     HIGHDS+1
00100Fr 2               L336B:
00100Fr 2  E4 80                cpx     STREND+1
001011r 2  D0 07                bne     L3376
001013r 2  C5 7F                cmp     STREND
001015r 2  D0 03                bne     L3376
001017r 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
00101Ar 2               L3376:
00101Ar 2  85 71                sta     INDEX
00101Cr 2  86 72                stx     INDEX+1
00101Er 2               .ifdef CONFIG_SMALL
00101Er 2  A0 01                ldy     #$01
001020r 2               .else
001020r 2                       ldy     #$00
001020r 2                       lda     (INDEX),y
001020r 2                       tax
001020r 2                       iny
001020r 2               .endif
001020r 2  B1 71                lda     (INDEX),y
001022r 2  08                   php
001023r 2  C8                   iny
001024r 2  B1 71                lda     (INDEX),y
001026r 2  65 A4                adc     HIGHDS
001028r 2  85 A4                sta     HIGHDS
00102Ar 2  C8                   iny
00102Br 2  B1 71                lda     (INDEX),y
00102Dr 2  65 A5                adc     HIGHDS+1
00102Fr 2  85 A5                sta     HIGHDS+1
001031r 2  28                   plp
001032r 2  10 D7                bpl     L3367
001034r 2               .ifndef CONFIG_SMALL
001034r 2                       txa
001034r 2                       bmi     L3367
001034r 2               .endif
001034r 2  C8                   iny
001035r 2  B1 71                lda     (INDEX),y
001037r 2               .ifdef CONFIG_CBM1_PATCHES
001037r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
001037r 2               .else
001037r 2                 .ifdef CONFIG_11
001037r 2                       ldy     #$00	; GC bugfix
001037r 2                 .endif
001037r 2  0A                   asl     a
001038r 2  69 05                adc     #$05
00103Ar 2               .endif
00103Ar 2  65 71                adc     INDEX
00103Cr 2  85 71                sta     INDEX
00103Er 2  90 02                bcc     L33A7
001040r 2  E6 72                inc     INDEX+1
001042r 2               L33A7:
001042r 2  A6 72                ldx     INDEX+1
001044r 2               L33A9:
001044r 2  E4 A5                cpx     HIGHDS+1
001046r 2  D0 04                bne     L33B1
001048r 2  C5 A4                cmp     HIGHDS
00104Ar 2  F0 C3                beq     L336B
00104Cr 2               L33B1:
00104Cr 2  20 rr rr             jsr     CHECK_VARIABLE
00104Fr 2  F0 F3                beq     L33A9
001051r 2               
001051r 2               ; ----------------------------------------------------------------------------
001051r 2               ; PROCESS A SIMPLE VARIABLE
001051r 2               ; ----------------------------------------------------------------------------
001051r 2               CHECK_SIMPLE_VARIABLE:
001051r 2               .ifndef CONFIG_SMALL
001051r 2                       lda     (INDEX),y
001051r 2                       bmi     CHECK_BUMP
001051r 2               .endif
001051r 2  C8                   iny
001052r 2  B1 71                lda     (INDEX),y
001054r 2  10 30                bpl     CHECK_BUMP
001056r 2  C8                   iny
001057r 2               
001057r 2               ; ----------------------------------------------------------------------------
001057r 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
001057r 2               ; ----------------------------------------------------------------------------
001057r 2               CHECK_VARIABLE:
001057r 2  B1 71                lda     (INDEX),y
001059r 2  F0 2B                beq     CHECK_BUMP
00105Br 2  C8                   iny
00105Cr 2  B1 71                lda     (INDEX),y
00105Er 2  AA                   tax
00105Fr 2  C8                   iny
001060r 2  B1 71                lda     (INDEX),y
001062r 2  C5 82                cmp     FRETOP+1
001064r 2  90 06                bcc     L33D5
001066r 2  D0 1E                bne     CHECK_BUMP
001068r 2  E4 81                cpx     FRETOP
00106Ar 2  B0 1A                bcs     CHECK_BUMP
00106Cr 2               L33D5:
00106Cr 2  C5 AB                cmp     LOWTR+1
00106Er 2  90 16                bcc     CHECK_BUMP
001070r 2  D0 04                bne     L33DF
001072r 2  E4 AA                cpx     LOWTR
001074r 2  90 10                bcc     CHECK_BUMP
001076r 2               L33DF:
001076r 2  86 AA                stx     LOWTR
001078r 2  85 AB                sta     LOWTR+1
00107Ar 2  A5 71                lda     INDEX
00107Cr 2  A6 72                ldx     INDEX+1
00107Er 2  85 9C                sta     FNCNAM
001080r 2  86 9D                stx     FNCNAM+1
001082r 2  A5 A0                lda     DSCLEN
001084r 2  85 A2                sta     Z52
001086r 2               
001086r 2               ; ----------------------------------------------------------------------------
001086r 2               ; ADD (DSCLEN) TO PNTR IN INDEX
001086r 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
001086r 2               ; ----------------------------------------------------------------------------
001086r 2               CHECK_BUMP:
001086r 2  A5 A0                lda     DSCLEN
001088r 2  18                   clc
001089r 2  65 71                adc     INDEX
00108Br 2  85 71                sta     INDEX
00108Dr 2  90 02                bcc     L33FA
00108Fr 2  E6 72                inc     INDEX+1
001091r 2               L33FA:
001091r 2  A6 72                ldx     INDEX+1
001093r 2  A0 00                ldy     #$00
001095r 2  60                   rts
001096r 2               
001096r 2               ; ----------------------------------------------------------------------------
001096r 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
001096r 2               ; TO TOP AND GO BACK FOR ANOTHER
001096r 2               ; ----------------------------------------------------------------------------
001096r 2               MOVE_HIGHEST_STRING_TO_TOP:
001096r 2               .ifdef CONFIG_2
001096r 2                       lda     FNCNAM+1	; GC bugfix
001096r 2                       ora     FNCNAM
001096r 2               .else
001096r 2  A6 9D                ldx     FNCNAM+1
001098r 2               .endif
001098r 2  F0 F7                beq     L33FA
00109Ar 2  A5 A2                lda     Z52
00109Cr 2               .ifndef CONFIG_10A
00109Cr 2                       sbc     #$03
00109Cr 2               .else
00109Cr 2  29 04                and     #$04
00109Er 2               .endif
00109Er 2  4A                   lsr     a
00109Fr 2  A8                   tay
0010A0r 2  85 A2                sta     Z52
0010A2r 2  B1 9C                lda     (FNCNAM),y
0010A4r 2  65 AA                adc     LOWTR
0010A6r 2  85 A6                sta     HIGHTR
0010A8r 2  A5 AB                lda     LOWTR+1
0010AAr 2  69 00                adc     #$00
0010ACr 2  85 A7                sta     HIGHTR+1
0010AEr 2  A5 81                lda     FRETOP
0010B0r 2  A6 82                ldx     FRETOP+1
0010B2r 2  85 A4                sta     HIGHDS
0010B4r 2  86 A5                stx     HIGHDS+1
0010B6r 2  20 rr rr             jsr     BLTU2
0010B9r 2  A4 A2                ldy     Z52
0010BBr 2  C8                   iny
0010BCr 2  A5 A4                lda     HIGHDS
0010BEr 2  91 9C                sta     (FNCNAM),y
0010C0r 2  AA                   tax
0010C1r 2  E6 A5                inc     HIGHDS+1
0010C3r 2  A5 A5                lda     HIGHDS+1
0010C5r 2  C8                   iny
0010C6r 2  91 9C                sta     (FNCNAM),y
0010C8r 2  4C rr rr             jmp     FINDHIGHESTSTRING
0010CBr 2               
0010CBr 2               ; ----------------------------------------------------------------------------
0010CBr 2               ; CONCATENATE TWO STRINGS
0010CBr 2               ; ----------------------------------------------------------------------------
0010CBr 2               CAT:
0010CBr 2  A5 AF                lda     FAC_LAST
0010CDr 2  48                   pha
0010CEr 2  A5 AE                lda     FAC_LAST-1
0010D0r 2  48                   pha
0010D1r 2  20 rr rr             jsr     FRM_ELEMENT
0010D4r 2  20 rr rr             jsr     CHKSTR
0010D7r 2  68                   pla
0010D8r 2  85 B8                sta     STRNG1
0010DAr 2  68                   pla
0010DBr 2  85 B9                sta     STRNG1+1
0010DDr 2  A0 00                ldy     #$00
0010DFr 2  B1 B8                lda     (STRNG1),y
0010E1r 2  18                   clc
0010E2r 2  71 AE                adc     (FAC_LAST-1),y
0010E4r 2  90 05                bcc     L3454
0010E6r 2  A2 1A                ldx     #ERR_STRLONG
0010E8r 2  4C rr rr             jmp     ERROR
0010EBr 2               L3454:
0010EBr 2  20 rr rr             jsr     STRINI
0010EEr 2  20 rr rr             jsr     MOVINS
0010F1r 2  A5 9E                lda     DSCPTR
0010F3r 2  A4 9F                ldy     DSCPTR+1
0010F5r 2  20 rr rr             jsr     FRETMP
0010F8r 2  20 rr rr             jsr     MOVSTR1
0010FBr 2  A5 B8                lda     STRNG1
0010FDr 2  A4 B9                ldy     STRNG1+1
0010FFr 2  20 rr rr             jsr     FRETMP
001102r 2  20 rr rr             jsr     PUTNEW
001105r 2  4C rr rr             jmp     FRMEVL2
001108r 2               
001108r 2               ; ----------------------------------------------------------------------------
001108r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
001108r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
001108r 2               ; ----------------------------------------------------------------------------
001108r 2               MOVINS:
001108r 2  A0 00                ldy     #$00
00110Ar 2  B1 B8                lda     (STRNG1),y
00110Cr 2  48                   pha
00110Dr 2  C8                   iny
00110Er 2  B1 B8                lda     (STRNG1),y
001110r 2  AA                   tax
001111r 2  C8                   iny
001112r 2  B1 B8                lda     (STRNG1),y
001114r 2  A8                   tay
001115r 2  68                   pla
001116r 2               
001116r 2               ; ----------------------------------------------------------------------------
001116r 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
001116r 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
001116r 2               ; ----------------------------------------------------------------------------
001116r 2               MOVSTR:
001116r 2  86 71                stx     INDEX
001118r 2  84 72                sty     INDEX+1
00111Ar 2               MOVSTR1:
00111Ar 2  A8                   tay
00111Br 2  F0 0A                beq     L3490
00111Dr 2  48                   pha
00111Er 2               L3487:
00111Er 2  88                   dey
00111Fr 2  B1 71                lda     (INDEX),y
001121r 2  91 83                sta     (FRESPC),y
001123r 2  98                   tya
001124r 2  D0 F8                bne     L3487
001126r 2  68                   pla
001127r 2               L3490:
001127r 2  18                   clc
001128r 2  65 83                adc     FRESPC
00112Ar 2  85 83                sta     FRESPC
00112Cr 2  90 02                bcc     L3499
00112Er 2  E6 84                inc     FRESPC+1
001130r 2               L3499:
001130r 2  60                   rts
001131r 2               
001131r 2               ; ----------------------------------------------------------------------------
001131r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
001131r 2               ; ----------------------------------------------------------------------------
001131r 2               FRESTR:
001131r 2  20 rr rr             jsr     CHKSTR
001134r 2               
001134r 2               ; ----------------------------------------------------------------------------
001134r 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
001134r 2               ; A TEMPORARY STRING, RELEASE IT.
001134r 2               ; ----------------------------------------------------------------------------
001134r 2               FREFAC:
001134r 2  A5 AE                lda     FAC_LAST-1
001136r 2  A4 AF                ldy     FAC_LAST
001138r 2               
001138r 2               ; ----------------------------------------------------------------------------
001138r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
001138r 2               ; A TEMPORARY STRING, RELEASE IT.
001138r 2               ; ----------------------------------------------------------------------------
001138r 2               FRETMP:
001138r 2  85 71                sta     INDEX
00113Ar 2  84 72                sty     INDEX+1
00113Cr 2  20 rr rr             jsr     FRETMS
00113Fr 2  08                   php
001140r 2  A0 00                ldy     #$00
001142r 2  B1 71                lda     (INDEX),y
001144r 2  48                   pha
001145r 2  C8                   iny
001146r 2  B1 71                lda     (INDEX),y
001148r 2  AA                   tax
001149r 2  C8                   iny
00114Ar 2  B1 71                lda     (INDEX),y
00114Cr 2  A8                   tay
00114Dr 2  68                   pla
00114Er 2  28                   plp
00114Fr 2  D0 13                bne     L34CD
001151r 2  C4 82                cpy     FRETOP+1
001153r 2  D0 0F                bne     L34CD
001155r 2  E4 81                cpx     FRETOP
001157r 2  D0 0B                bne     L34CD
001159r 2  48                   pha
00115Ar 2  18                   clc
00115Br 2  65 81                adc     FRETOP
00115Dr 2  85 81                sta     FRETOP
00115Fr 2  90 02                bcc     L34CC
001161r 2  E6 82                inc     FRETOP+1
001163r 2               L34CC:
001163r 2  68                   pla
001164r 2               L34CD:
001164r 2  86 71                stx     INDEX
001166r 2  84 72                sty     INDEX+1
001168r 2  60                   rts
001169r 2               
001169r 2               ; ----------------------------------------------------------------------------
001169r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001169r 2               ; ----------------------------------------------------------------------------
001169r 2               FRETMS:
001169r 2               .ifdef KBD
001169r 2                       cpy     #$00
001169r 2               .else
001169r 2  C4 67                cpy     LASTPT+1
00116Br 2               .endif
00116Br 2  D0 0C                bne     L34E2
00116Dr 2  C5 66                cmp     LASTPT
00116Fr 2  D0 08                bne     L34E2
001171r 2  85 65                sta     TEMPPT
001173r 2  E9 03                sbc     #$03
001175r 2  85 66                sta     LASTPT
001177r 2  A0 00                ldy     #$00
001179r 2               L34E2:
001179r 2  60                   rts
00117Ar 2               
00117Ar 2               ; ----------------------------------------------------------------------------
00117Ar 2               ; "CHR$" FUNCTION
00117Ar 2               ; ----------------------------------------------------------------------------
00117Ar 2               CHRSTR:
00117Ar 2  20 rr rr             jsr     CONINT
00117Dr 2  8A                   txa
00117Er 2  48                   pha
00117Fr 2  A9 01                lda     #$01
001181r 2  20 rr rr             jsr     STRSPA
001184r 2  68                   pla
001185r 2  A0 00                ldy     #$00
001187r 2  91 AD                sta     (FAC+1),y
001189r 2  68                   pla
00118Ar 2  68                   pla
00118Br 2  4C rr rr             jmp     PUTNEW
00118Er 2               
00118Er 2               ; ----------------------------------------------------------------------------
00118Er 2               ; "LEFT$" FUNCTION
00118Er 2               ; ----------------------------------------------------------------------------
00118Er 2               LEFTSTR:
00118Er 2  20 rr rr             jsr     SUBSTRING_SETUP
001191r 2  D1 9E                cmp     (DSCPTR),y
001193r 2  98                   tya
001194r 2               SUBSTRING1:
001194r 2  90 04                bcc     L3503
001196r 2  B1 9E                lda     (DSCPTR),y
001198r 2  AA                   tax
001199r 2  98                   tya
00119Ar 2               L3503:
00119Ar 2  48                   pha
00119Br 2               SUBSTRING2:
00119Br 2  8A                   txa
00119Cr 2               SUBSTRING3:
00119Cr 2  48                   pha
00119Dr 2  20 rr rr             jsr     STRSPA
0011A0r 2  A5 9E                lda     DSCPTR
0011A2r 2  A4 9F                ldy     DSCPTR+1
0011A4r 2  20 rr rr             jsr     FRETMP
0011A7r 2  68                   pla
0011A8r 2  A8                   tay
0011A9r 2  68                   pla
0011AAr 2  18                   clc
0011ABr 2  65 71                adc     INDEX
0011ADr 2  85 71                sta     INDEX
0011AFr 2  90 02                bcc     L351C
0011B1r 2  E6 72                inc     INDEX+1
0011B3r 2               L351C:
0011B3r 2  98                   tya
0011B4r 2  20 rr rr             jsr     MOVSTR1
0011B7r 2  4C rr rr             jmp     PUTNEW
0011BAr 2               
0011BAr 2               ; ----------------------------------------------------------------------------
0011BAr 2               ; "RIGHT$" FUNCTION
0011BAr 2               ; ----------------------------------------------------------------------------
0011BAr 2               RIGHTSTR:
0011BAr 2  20 rr rr             jsr     SUBSTRING_SETUP
0011BDr 2  18                   clc
0011BEr 2  F1 9E                sbc     (DSCPTR),y
0011C0r 2  49 FF                eor     #$FF
0011C2r 2  4C rr rr             jmp     SUBSTRING1
0011C5r 2               
0011C5r 2               ; ----------------------------------------------------------------------------
0011C5r 2               ; "MID$" FUNCTION
0011C5r 2               ; ----------------------------------------------------------------------------
0011C5r 2               MIDSTR:
0011C5r 2  A9 FF                lda     #$FF
0011C7r 2  85 AF                sta     FAC_LAST
0011C9r 2  20 C2 00             jsr     CHRGOT
0011CCr 2  C9 29                cmp     #$29
0011CEr 2  F0 06                beq     L353F
0011D0r 2  20 rr rr             jsr     CHKCOM
0011D3r 2  20 rr rr             jsr     GETBYT
0011D6r 2               L353F:
0011D6r 2  20 rr rr             jsr     SUBSTRING_SETUP
0011D9r 2               .ifdef CONFIG_2
0011D9r 2                       beq     GOIQ
0011D9r 2               .endif
0011D9r 2  CA                   dex
0011DAr 2  8A                   txa
0011DBr 2  48                   pha
0011DCr 2  18                   clc
0011DDr 2  A2 00                ldx     #$00
0011DFr 2  F1 9E                sbc     (DSCPTR),y
0011E1r 2  B0 B8                bcs     SUBSTRING2
0011E3r 2  49 FF                eor     #$FF
0011E5r 2  C5 AF                cmp     FAC_LAST
0011E7r 2  90 B3                bcc     SUBSTRING3
0011E9r 2  A5 AF                lda     FAC_LAST
0011EBr 2  B0 AF                bcs     SUBSTRING3
0011EDr 2               
0011EDr 2               ; ----------------------------------------------------------------------------
0011EDr 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
0011EDr 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
0011EDr 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
0011EDr 2               ; ----------------------------------------------------------------------------
0011EDr 2               SUBSTRING_SETUP:
0011EDr 2  20 rr rr             jsr     CHKCLS
0011F0r 2  68                   pla
0011F1r 2               .ifndef CONFIG_11
0011F1r 2  85 A2                sta     JMPADRS+1
0011F3r 2  68                   pla
0011F4r 2  85 A3                sta     JMPADRS+2
0011F6r 2               .else
0011F6r 2                       tay
0011F6r 2                       pla
0011F6r 2                       sta     Z52
0011F6r 2               .endif
0011F6r 2  68                   pla
0011F7r 2  68                   pla
0011F8r 2  68                   pla
0011F9r 2  AA                   tax
0011FAr 2  68                   pla
0011FBr 2  85 9E                sta     DSCPTR
0011FDr 2  68                   pla
0011FEr 2  85 9F                sta     DSCPTR+1
001200r 2               .ifdef CONFIG_11
001200r 2                       lda     Z52
001200r 2                       pha
001200r 2                       tya
001200r 2                       pha
001200r 2               .endif
001200r 2  A0 00                ldy     #$00
001202r 2  8A                   txa
001203r 2               .ifndef CONFIG_2
001203r 2  F0 21                beq     GOIQ
001205r 2               .endif
001205r 2               .ifndef CONFIG_11
001205r 2  E6 A2                inc     JMPADRS+1
001207r 2  6C A2 00             jmp     (JMPADRS+1)
00120Ar 2               .else
00120Ar 2                       rts
00120Ar 2               .endif
00120Ar 2               
00120Ar 2               ; ----------------------------------------------------------------------------
00120Ar 2               ; "LEN" FUNCTION
00120Ar 2               ; ----------------------------------------------------------------------------
00120Ar 2               LEN:
00120Ar 2  20 rr rr             jsr     GETSTR
00120Dr 2               SNGFLT1:
00120Dr 2  4C rr rr             jmp     SNGFLT
001210r 2               
001210r 2               ; ----------------------------------------------------------------------------
001210r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
001210r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
001210r 2               ; ----------------------------------------------------------------------------
001210r 2               GETSTR:
001210r 2  20 rr rr             jsr     FRESTR
001213r 2  A2 00                ldx     #$00
001215r 2  86 5F                stx     VALTYP
001217r 2  A8                   tay
001218r 2  60                   rts
001219r 2               
001219r 2               ; ----------------------------------------------------------------------------
001219r 2               ; "ASC" FUNCTION
001219r 2               ; ----------------------------------------------------------------------------
001219r 2               ASC:
001219r 2  20 rr rr             jsr     GETSTR
00121Cr 2  F0 08                beq     GOIQ
00121Er 2  A0 00                ldy     #$00
001220r 2  B1 71                lda     (INDEX),y
001222r 2  A8                   tay
001223r 2               .ifndef CONFIG_11A
001223r 2  4C rr rr             jmp     SNGFLT1
001226r 2               .else
001226r 2                       jmp     SNGFLT
001226r 2               .endif
001226r 2               ; ----------------------------------------------------------------------------
001226r 2               GOIQ:
001226r 2  4C rr rr             jmp     IQERR
001229r 2               
001229r 2               ; ----------------------------------------------------------------------------
001229r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
001229r 2               ; TO SINGLE BYTE IN X-REG
001229r 2               ; ----------------------------------------------------------------------------
001229r 2               GTBYTC:
001229r 2  20 BC 00             jsr     CHRGET
00122Cr 2               
00122Cr 2               ; ----------------------------------------------------------------------------
00122Cr 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
00122Cr 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
00122Cr 2               ; ----------------------------------------------------------------------------
00122Cr 2               GETBYT:
00122Cr 2  20 rr rr             jsr     FRMNUM
00122Fr 2               
00122Fr 2               ; ----------------------------------------------------------------------------
00122Fr 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
00122Fr 2               ; ----------------------------------------------------------------------------
00122Fr 2               CONINT:
00122Fr 2  20 rr rr             jsr     MKINT
001232r 2  A6 AE                ldx     FAC_LAST-1
001234r 2  D0 F0                bne     GOIQ
001236r 2  A6 AF                ldx     FAC_LAST
001238r 2  4C C2 00             jmp     CHRGOT
00123Br 2               
00123Br 2               ; ----------------------------------------------------------------------------
00123Br 2               ; "VAL" FUNCTION
00123Br 2               ; ----------------------------------------------------------------------------
00123Br 2               VAL:
00123Br 2  20 rr rr             jsr     GETSTR
00123Er 2  D0 03                bne     L35AC
001240r 2  4C rr rr             jmp     ZERO_FAC
001243r 2               L35AC:
001243r 2  A6 C3                ldx     TXTPTR
001245r 2  A4 C4                ldy     TXTPTR+1
001247r 2  86 BA                stx     STRNG2
001249r 2  84 BB                sty     STRNG2+1
00124Br 2  A6 71                ldx     INDEX
00124Dr 2  86 C3                stx     TXTPTR
00124Fr 2  18                   clc
001250r 2  65 71                adc     INDEX
001252r 2  85 73                sta     DEST
001254r 2  A6 72                ldx     INDEX+1
001256r 2  86 C4                stx     TXTPTR+1
001258r 2  90 01                bcc     L35C4
00125Ar 2  E8                   inx
00125Br 2               L35C4:
00125Br 2  86 74                stx     DEST+1
00125Dr 2  A0 00                ldy     #$00
00125Fr 2  B1 73                lda     (DEST),y
001261r 2  48                   pha
001262r 2  A9 00                lda     #$00
001264r 2  91 73                sta     (DEST),y
001266r 2  20 C2 00             jsr     CHRGOT
001269r 2  20 rr rr             jsr     FIN
00126Cr 2  68                   pla
00126Dr 2  A0 00                ldy     #$00
00126Fr 2  91 73                sta     (DEST),y
001271r 2               
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               ; COPY STRNG2 INTO TXTPTR
001271r 2               ; ----------------------------------------------------------------------------
001271r 2               POINT:
001271r 2  A6 BA                ldx     STRNG2
001273r 2  A4 BB                ldy     STRNG2+1
001275r 2  86 C3                stx     TXTPTR
001277r 2  84 C4                sty     TXTPTR+1
001279r 2  60                   rts
00127Ar 2               
00127Ar 2               
00127Ar 1               .include "misc3.s"
00127Ar 2               ; KBD specific patches
00127Ar 2               
00127Ar 2               .segment "CODE"
00127Ar 2               
00127Ar 2               .ifdef KBD
00127Ar 2               VARTAB_MINUS_2_TO_AY:
00127Ar 2                       lda     VARTAB
00127Ar 2                       sec
00127Ar 2                       sbc     #$02
00127Ar 2                       ldy     VARTAB+1
00127Ar 2                       bcs     LF42C
00127Ar 2                       dey
00127Ar 2               LF42C:
00127Ar 2                       rts
00127Ar 2               
00127Ar 2               ; ----------------------------------------------------------------------------
00127Ar 2               GET_UPPER:
00127Ar 2                       lda     INPUTBUFFERX,x
00127Ar 2               LF430:
00127Ar 2                       cmp     #'a'
00127Ar 2                       bcc     LF43A
00127Ar 2                       cmp     #'z'+1
00127Ar 2                       bcs     LF43A
00127Ar 2               LF438:
00127Ar 2                       sbc     #$1F
00127Ar 2               LF43A:
00127Ar 2                       rts
00127Ar 2               
00127Ar 2               ; ----------------------------------------------------------------------------
00127Ar 2               GETLN:
00127Ar 2                       ldx     #$5D
00127Ar 2               LF43D:
00127Ar 2                       txa
00127Ar 2                       and     #$7F
00127Ar 2                       cmp     $0340
00127Ar 2                       beq     LF44D
00127Ar 2                       sta     $0340
00127Ar 2                       lda     #$03
00127Ar 2                       jsr     LDE48
00127Ar 2               LF44D:
00127Ar 2                       jsr     LDE7F
00127Ar 2                       bne     RTS4
00127Ar 2                       cpx     #$80
00127Ar 2                       bcc     LF44D
00127Ar 2               RTS4:
00127Ar 2                       rts
00127Ar 2               
00127Ar 2               ; ----------------------------------------------------------------------------
00127Ar 2               LF457:
00127Ar 2                       lda     TXTTAB
00127Ar 2                       ldx     TXTTAB+1
00127Ar 2               LF45B:
00127Ar 2                       sta     JMPADRS+1
00127Ar 2                       stx     JMPADRS+2
00127Ar 2                       ldy     #$01
00127Ar 2                       lda     (JMPADRS+1),y
00127Ar 2                       beq     LF438
00127Ar 2                       iny
00127Ar 2                       iny
00127Ar 2                       lda     (JMPADRS+1),y
00127Ar 2                       dey
00127Ar 2                       cmp     LINNUM+1
00127Ar 2                       bne     LF472
00127Ar 2                       lda     (JMPADRS+1),y
00127Ar 2                       cmp     LINNUM
00127Ar 2               LF472:
00127Ar 2                       bcs     LF43A
00127Ar 2                       dey
00127Ar 2                       lda     (JMPADRS+1),y
00127Ar 2                       tax
00127Ar 2                       dey
00127Ar 2                       lda     (JMPADRS+1),y
00127Ar 2                       bcc     LF45B
00127Ar 2               LF47D:
00127Ar 2                       jmp     (JMPADRS+1)
00127Ar 2               .endif
00127Ar 2               
00127Ar 1               .include "poke.s"
00127Ar 2               .segment "CODE"
00127Ar 2               
00127Ar 2               .ifndef CONFIG_NO_POKE
00127Ar 2               ; ----------------------------------------------------------------------------
00127Ar 2               ; EVALUATE "EXP1,EXP2"
00127Ar 2               ;
00127Ar 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00127Ar 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00127Ar 2               ; ----------------------------------------------------------------------------
00127Ar 2               GTNUM:
00127Ar 2  20 rr rr             jsr     FRMNUM
00127Dr 2  20 rr rr             jsr     GETADR
001280r 2               
001280r 2               ; ----------------------------------------------------------------------------
001280r 2               ; EVALUATE ",EXPRESSION"
001280r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001280r 2               ; ----------------------------------------------------------------------------
001280r 2               COMBYTE:
001280r 2  20 rr rr             jsr     CHKCOM
001283r 2  4C rr rr             jmp     GETBYT
001286r 2               
001286r 2               ; ----------------------------------------------------------------------------
001286r 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
001286r 2               ; ----------------------------------------------------------------------------
001286r 2               GETADR:
001286r 2  A5 B0                lda     FACSIGN
001288r 2                 .ifdef APPLE
001288r 2                       nop ; PATCH
001288r 2                       nop
001288r 2                 .else
001288r 2  30 9C                bmi     GOIQ
00128Ar 2                 .endif
00128Ar 2  A5 AC                lda     FAC
00128Cr 2  C9 91                cmp     #$91
00128Er 2  B0 96                bcs     GOIQ
001290r 2  20 rr rr             jsr     QINT
001293r 2  A5 AE                lda     FAC_LAST-1
001295r 2  A4 AF                ldy     FAC_LAST
001297r 2  84 11                sty     LINNUM
001299r 2  85 12                sta     LINNUM+1
00129Br 2  60                   rts
00129Cr 2               
00129Cr 2               ; ----------------------------------------------------------------------------
00129Cr 2               ; "PEEK" FUNCTION
00129Cr 2               ; ----------------------------------------------------------------------------
00129Cr 2               PEEK:
00129Cr 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
00129Cr 2                       lda     LINNUM+1
00129Cr 2                       pha
00129Cr 2                       lda     LINNUM
00129Cr 2                       pha
00129Cr 2               .endif
00129Cr 2  20 rr rr             jsr     GETADR
00129Fr 2  A0 00                ldy     #$00
0012A1r 2               .ifdef CBM1
0012A1r 2               ; disallow PEEK between $C000 and $DFFF
0012A1r 2                       cmp     #$C0
0012A1r 2                       bcc     LD6F3
0012A1r 2                       cmp     #$E1
0012A1r 2                       bcc     LD6F6
0012A1r 2               LD6F3:
0012A1r 2               .endif
0012A1r 2               .ifdef CBM2
0012A1r 2               		nop ; patch that disables the compares above
0012A1r 2               		nop
0012A1r 2               		nop
0012A1r 2               		nop
0012A1r 2               		nop
0012A1r 2               		nop
0012A1r 2               		nop
0012A1r 2               		nop
0012A1r 2               .endif
0012A1r 2  B1 11                lda     (LINNUM),y
0012A3r 2  A8                   tay
0012A4r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
0012A4r 2                       pla
0012A4r 2                       sta     LINNUM
0012A4r 2                       pla
0012A4r 2                       sta     LINNUM+1
0012A4r 2               .endif
0012A4r 2               LD6F6:
0012A4r 2  4C rr rr             jmp     SNGFLT
0012A7r 2               
0012A7r 2               ; ----------------------------------------------------------------------------
0012A7r 2               ; "POKE" STATEMENT
0012A7r 2               ; ----------------------------------------------------------------------------
0012A7r 2               POKE:
0012A7r 2  20 rr rr             jsr     GTNUM
0012AAr 2  8A                   txa
0012ABr 2  A0 00                ldy     #$00
0012ADr 2  91 11                sta     (LINNUM),y
0012AFr 2  60                   rts
0012B0r 2               
0012B0r 2               ; ----------------------------------------------------------------------------
0012B0r 2               ; "WAIT" STATEMENT
0012B0r 2               ; ----------------------------------------------------------------------------
0012B0r 2               WAIT:
0012B0r 2  20 rr rr             jsr     GTNUM
0012B3r 2  86 97                stx     FORPNT
0012B5r 2  A2 00                ldx     #$00
0012B7r 2  20 C2 00             jsr     CHRGOT
0012BAr 2               .ifdef CONFIG_EASTER_EGG
0012BAr 2                       beq     EASTER_EGG
0012BAr 2               .else
0012BAr 2  F0 03                beq     L3628
0012BCr 2               .endif
0012BCr 2  20 rr rr             jsr     COMBYTE
0012BFr 2               L3628:
0012BFr 2  86 98                stx     FORPNT+1
0012C1r 2  A0 00                ldy     #$00
0012C3r 2               L362C:
0012C3r 2  B1 11                lda     (LINNUM),y
0012C5r 2  45 98                eor     FORPNT+1
0012C7r 2  25 97                and     FORPNT
0012C9r 2  F0 F8                beq     L362C
0012CBr 2               RTS3:
0012CBr 2  60                   rts
0012CCr 2               .endif
0012CCr 2               
0012CCr 1               .include "float.s"
0012CCr 2               .segment "CODE"
0012CCr 2               
0012CCr 2               TEMP1X = TEMP1+(5-BYTES_FP)
0012CCr 2               
0012CCr 2               ; ----------------------------------------------------------------------------
0012CCr 2               ; ADD 0.5 TO FAC
0012CCr 2               ; ----------------------------------------------------------------------------
0012CCr 2               FADDH:
0012CCr 2  A9 rr                lda     #<CON_HALF
0012CEr 2  A0 rr                ldy     #>CON_HALF
0012D0r 2  4C rr rr             jmp     FADD
0012D3r 2               
0012D3r 2               ; ----------------------------------------------------------------------------
0012D3r 2               ; FAC = (Y,A) - FAC
0012D3r 2               ; ----------------------------------------------------------------------------
0012D3r 2               FSUB:
0012D3r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012D6r 2               
0012D6r 2               ; ----------------------------------------------------------------------------
0012D6r 2               ; FAC = ARG - FAC
0012D6r 2               ; ----------------------------------------------------------------------------
0012D6r 2               FSUBT:
0012D6r 2  A5 B0                lda     FACSIGN
0012D8r 2  49 FF                eor     #$FF
0012DAr 2  85 B0                sta     FACSIGN
0012DCr 2  45 B7                eor     ARGSIGN
0012DEr 2  85 B8                sta     SGNCPR
0012E0r 2  A5 AC                lda     FAC
0012E2r 2  4C rr rr             jmp     FADDT
0012E5r 2               
0012E5r 2               ; ----------------------------------------------------------------------------
0012E5r 2               ; Commodore BASIC V2 Easter Egg
0012E5r 2               ; ----------------------------------------------------------------------------
0012E5r 2               .ifdef CONFIG_EASTER_EGG
0012E5r 2               EASTER_EGG:
0012E5r 2                       lda     LINNUM
0012E5r 2                       cmp     #<6502
0012E5r 2                       bne     L3628
0012E5r 2                       lda     LINNUM+1
0012E5r 2                       sbc     #>6502
0012E5r 2                       bne     L3628
0012E5r 2                       sta     LINNUM
0012E5r 2                       tay
0012E5r 2                       lda     #$80
0012E5r 2                       sta     LINNUM+1
0012E5r 2               LD758:
0012E5r 2                       ldx     #$0A
0012E5r 2               LD75A:
0012E5r 2                       lda     MICROSOFT-1,x
0012E5r 2                       and     #$3F
0012E5r 2                       sta     (LINNUM),y
0012E5r 2                       iny
0012E5r 2                       bne     LD766
0012E5r 2                       inc     LINNUM+1
0012E5r 2               LD766:
0012E5r 2                       dex
0012E5r 2                       bne     LD75A
0012E5r 2                       dec     FORPNT
0012E5r 2                       bne     LD758
0012E5r 2                       rts
0012E5r 2               .endif
0012E5r 2               
0012E5r 2               ; ----------------------------------------------------------------------------
0012E5r 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
0012E5r 2               ; ----------------------------------------------------------------------------
0012E5r 2               FADD1:
0012E5r 2  20 rr rr             jsr     SHIFT_RIGHT
0012E8r 2  90 3C                bcc     FADD3
0012EAr 2               
0012EAr 2               ; ----------------------------------------------------------------------------
0012EAr 2               ; FAC = (Y,A) + FAC
0012EAr 2               ; ----------------------------------------------------------------------------
0012EAr 2               FADD:
0012EAr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0012EDr 2               
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               ; FAC = ARG + FAC
0012EDr 2               ; ----------------------------------------------------------------------------
0012EDr 2               FADDT:
0012EDr 2  D0 03                bne     L365B
0012EFr 2  4C rr rr             jmp     COPY_ARG_TO_FAC
0012F2r 2               L365B:
0012F2r 2  A6 B9                ldx     FACEXTENSION
0012F4r 2  86 A3                stx     ARGEXTENSION
0012F6r 2  A2 B3                ldx     #ARG
0012F8r 2  A5 B3                lda     ARG
0012FAr 2               FADD2:
0012FAr 2  A8                   tay
0012FBr 2               .ifdef KBD
0012FBr 2                       beq     RTS4
0012FBr 2               .else
0012FBr 2  F0 CE                beq     RTS3
0012FDr 2               .endif
0012FDr 2  38                   sec
0012FEr 2  E5 AC                sbc     FAC
001300r 2  F0 24                beq     FADD3
001302r 2  90 12                bcc     L367F
001304r 2  84 AC                sty     FAC
001306r 2  A4 B7                ldy     ARGSIGN
001308r 2  84 B0                sty     FACSIGN
00130Ar 2  49 FF                eor     #$FF
00130Cr 2  69 00                adc     #$00
00130Er 2  A0 00                ldy     #$00
001310r 2  84 A3                sty     ARGEXTENSION
001312r 2  A2 AC                ldx     #FAC
001314r 2  D0 04                bne     L3683
001316r 2               L367F:
001316r 2  A0 00                ldy     #$00
001318r 2  84 B9                sty     FACEXTENSION
00131Ar 2               L3683:
00131Ar 2  C9 F9                cmp     #$F9
00131Cr 2  30 C7                bmi     FADD1
00131Er 2  A8                   tay
00131Fr 2  A5 B9                lda     FACEXTENSION
001321r 2  56 01                lsr     1,x
001323r 2  20 rr rr             jsr     SHIFT_RIGHT4
001326r 2               FADD3:
001326r 2  24 B8                bit     SGNCPR
001328r 2  10 4C                bpl     FADD4
00132Ar 2  A0 AC                ldy     #FAC
00132Cr 2  E0 B3                cpx     #ARG
00132Er 2  F0 02                beq     L369B
001330r 2  A0 B3                ldy     #ARG
001332r 2               L369B:
001332r 2  38                   sec
001333r 2  49 FF                eor     #$FF
001335r 2  65 A3                adc     ARGEXTENSION
001337r 2  85 B9                sta     FACEXTENSION
001339r 2               .ifndef CONFIG_SMALL
001339r 2                       lda     4,y
001339r 2                       sbc     4,x
001339r 2                       sta     FAC+4
001339r 2               .endif
001339r 2  B9 03 00             lda     3,y
00133Cr 2  F5 03                sbc     3,x
00133Er 2  85 AF                sta     FAC+3
001340r 2  B9 02 00             lda     2,y
001343r 2  F5 02                sbc     2,x
001345r 2  85 AE                sta     FAC+2
001347r 2  B9 01 00             lda     1,y
00134Ar 2  F5 01                sbc     1,x
00134Cr 2  85 AD                sta     FAC+1
00134Er 2               
00134Er 2               ; ----------------------------------------------------------------------------
00134Er 2               ; NORMALIZE VALUE IN FAC
00134Er 2               ; ----------------------------------------------------------------------------
00134Er 2               NORMALIZE_FAC1:
00134Er 2  B0 03                bcs     NORMALIZE_FAC2
001350r 2  20 rr rr             jsr     COMPLEMENT_FAC
001353r 2               NORMALIZE_FAC2:
001353r 2  A0 00                ldy     #$00
001355r 2  98                   tya
001356r 2  18                   clc
001357r 2               L36C7:
001357r 2  A6 AD                ldx     FAC+1
001359r 2  D0 3E                bne     NORMALIZE_FAC4
00135Br 2  A6 AE                ldx     FAC+2
00135Dr 2  86 AD                stx     FAC+1
00135Fr 2  A6 AF                ldx     FAC+3
001361r 2  86 AE                stx     FAC+2
001363r 2               .ifdef CONFIG_SMALL
001363r 2  A6 B9                ldx     FACEXTENSION
001365r 2  86 AF                stx     FAC+3
001367r 2               .else
001367r 2                       ldx     FAC+4
001367r 2                       stx     FAC+3
001367r 2                       ldx     FACEXTENSION
001367r 2                       stx     FAC+4
001367r 2               .endif
001367r 2  84 B9                sty     FACEXTENSION
001369r 2  69 08                adc     #$08
00136Br 2               .ifdef CONFIG_2B
00136Br 2               ; bugfix?
00136Br 2               ; fix does not exist on AppleSoft 2
00136Br 2                       cmp     #(MANTISSA_BYTES+1)*8
00136Br 2               .else
00136Br 2  C9 18                cmp     #MANTISSA_BYTES*8
00136Dr 2               .endif
00136Dr 2  D0 E8                bne     L36C7
00136Fr 2               
00136Fr 2               ; ----------------------------------------------------------------------------
00136Fr 2               ; SET FAC = 0
00136Fr 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
00136Fr 2               ; ----------------------------------------------------------------------------
00136Fr 2               ZERO_FAC:
00136Fr 2  A9 00                lda     #$00
001371r 2               STA_IN_FAC_SIGN_AND_EXP:
001371r 2  85 AC                sta     FAC
001373r 2               STA_IN_FAC_SIGN:
001373r 2  85 B0                sta     FACSIGN
001375r 2  60                   rts
001376r 2               
001376r 2               ; ----------------------------------------------------------------------------
001376r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
001376r 2               ; ----------------------------------------------------------------------------
001376r 2               FADD4:
001376r 2  65 A3                adc     ARGEXTENSION
001378r 2  85 B9                sta     FACEXTENSION
00137Ar 2               .ifndef CONFIG_SMALL
00137Ar 2                       lda     FAC+4
00137Ar 2                       adc     ARG+4
00137Ar 2                       sta     FAC+4
00137Ar 2               .endif
00137Ar 2  A5 AF                lda     FAC+3
00137Cr 2  65 B6                adc     ARG+3
00137Er 2  85 AF                sta     FAC+3
001380r 2  A5 AE                lda     FAC+2
001382r 2  65 B5                adc     ARG+2
001384r 2  85 AE                sta     FAC+2
001386r 2  A5 AD                lda     FAC+1
001388r 2  65 B4                adc     ARG+1
00138Ar 2  85 AD                sta     FAC+1
00138Cr 2  4C rr rr             jmp     NORMALIZE_FAC5
00138Fr 2               
00138Fr 2               ; ----------------------------------------------------------------------------
00138Fr 2               ; FINISH NORMALIZING FAC
00138Fr 2               ; ----------------------------------------------------------------------------
00138Fr 2               NORMALIZE_FAC3:
00138Fr 2  69 01                adc     #$01
001391r 2  06 B9                asl     FACEXTENSION
001393r 2               .ifndef CONFIG_SMALL
001393r 2                       rol     FAC+4
001393r 2               .endif
001393r 2  26 AF                rol     FAC+3
001395r 2  26 AE                rol     FAC+2
001397r 2  26 AD                rol     FAC+1
001399r 2               NORMALIZE_FAC4:
001399r 2  10 F4                bpl     NORMALIZE_FAC3
00139Br 2  38                   sec
00139Cr 2  E5 AC                sbc     FAC
00139Er 2  B0 CF                bcs     ZERO_FAC
0013A0r 2  49 FF                eor     #$FF
0013A2r 2  69 01                adc     #$01
0013A4r 2  85 AC                sta     FAC
0013A6r 2               NORMALIZE_FAC5:
0013A6r 2  90 0C                bcc     L3764
0013A8r 2               NORMALIZE_FAC6:
0013A8r 2  E6 AC                inc     FAC
0013AAr 2  F0 36                beq     OVERFLOW
0013ACr 2               .ifndef CONFIG_ROR_WORKAROUND
0013ACr 2  66 AD                ror     FAC+1
0013AEr 2  66 AE                ror     FAC+2
0013B0r 2  66 AF                ror     FAC+3
0013B2r 2                 .ifndef CONFIG_SMALL
0013B2r 2                       ror     FAC+4
0013B2r 2                 .endif
0013B2r 2  66 B9                ror     FACEXTENSION
0013B4r 2               .else
0013B4r 2                       lda     #$00
0013B4r 2                       bcc     L372E
0013B4r 2                       lda     #$80
0013B4r 2               L372E:
0013B4r 2                       lsr     FAC+1
0013B4r 2                       ora     FAC+1
0013B4r 2                       sta     FAC+1
0013B4r 2                       lda     #$00
0013B4r 2                       bcc     L373A
0013B4r 2                       lda     #$80
0013B4r 2               L373A:
0013B4r 2                       lsr     FAC+2
0013B4r 2                       ora     FAC+2
0013B4r 2                       sta     FAC+2
0013B4r 2                       lda     #$00
0013B4r 2                       bcc     L3746
0013B4r 2                       lda     #$80
0013B4r 2               L3746:
0013B4r 2                       lsr     FAC+3
0013B4r 2                       ora     FAC+3
0013B4r 2                       sta     FAC+3
0013B4r 2                       lda     #$00
0013B4r 2                       bcc     L3752
0013B4r 2                       lda     #$80
0013B4r 2               L3752:
0013B4r 2                       lsr     FAC+4
0013B4r 2                       ora     FAC+4
0013B4r 2                       sta     FAC+4
0013B4r 2                       lda     #$00
0013B4r 2                       bcc     L375E
0013B4r 2                       lda     #$80
0013B4r 2               L375E:
0013B4r 2                       lsr     FACEXTENSION
0013B4r 2                       ora     FACEXTENSION
0013B4r 2                       sta     FACEXTENSION
0013B4r 2               .endif
0013B4r 2               L3764:
0013B4r 2  60                   rts
0013B5r 2               
0013B5r 2               ; ----------------------------------------------------------------------------
0013B5r 2               ; 2'S COMPLEMENT OF FAC
0013B5r 2               ; ----------------------------------------------------------------------------
0013B5r 2               COMPLEMENT_FAC:
0013B5r 2  A5 B0                lda     FACSIGN
0013B7r 2  49 FF                eor     #$FF
0013B9r 2  85 B0                sta     FACSIGN
0013BBr 2               
0013BBr 2               ; ----------------------------------------------------------------------------
0013BBr 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
0013BBr 2               ; ----------------------------------------------------------------------------
0013BBr 2               COMPLEMENT_FAC_MANTISSA:
0013BBr 2  A5 AD                lda     FAC+1
0013BDr 2  49 FF                eor     #$FF
0013BFr 2  85 AD                sta     FAC+1
0013C1r 2  A5 AE                lda     FAC+2
0013C3r 2  49 FF                eor     #$FF
0013C5r 2  85 AE                sta     FAC+2
0013C7r 2  A5 AF                lda     FAC+3
0013C9r 2  49 FF                eor     #$FF
0013CBr 2  85 AF                sta     FAC+3
0013CDr 2               .ifndef CONFIG_SMALL
0013CDr 2                       lda     FAC+4
0013CDr 2                       eor     #$FF
0013CDr 2                       sta     FAC+4
0013CDr 2               .endif
0013CDr 2  A5 B9                lda     FACEXTENSION
0013CFr 2  49 FF                eor     #$FF
0013D1r 2  85 B9                sta     FACEXTENSION
0013D3r 2  E6 B9                inc     FACEXTENSION
0013D5r 2  D0 0A                bne     RTS12
0013D7r 2               
0013D7r 2               ; ----------------------------------------------------------------------------
0013D7r 2               ; INCREMENT FAC MANTISSA
0013D7r 2               ; ----------------------------------------------------------------------------
0013D7r 2               INCREMENT_FAC_MANTISSA:
0013D7r 2               .ifndef CONFIG_SMALL
0013D7r 2                       inc     FAC+4
0013D7r 2                       bne     RTS12
0013D7r 2               .endif
0013D7r 2  E6 AF                inc     FAC+3
0013D9r 2  D0 06                bne     RTS12
0013DBr 2  E6 AE                inc     FAC+2
0013DDr 2  D0 02                bne     RTS12
0013DFr 2  E6 AD                inc     FAC+1
0013E1r 2               RTS12:
0013E1r 2  60                   rts
0013E2r 2               OVERFLOW:
0013E2r 2  A2 0A                ldx     #ERR_OVERFLOW
0013E4r 2  4C rr rr             jmp     ERROR
0013E7r 2               
0013E7r 2               ; ----------------------------------------------------------------------------
0013E7r 2               ; SHIFT 1,X THRU 5,X RIGHT
0013E7r 2               ; (A) = NEGATIVE OF SHIFT COUNT
0013E7r 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
0013E7r 2               ;
0013E7r 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
0013E7r 2               ; ----------------------------------------------------------------------------
0013E7r 2               SHIFT_RIGHT1:
0013E7r 2  A2 74                ldx     #RESULT-1
0013E9r 2               SHIFT_RIGHT2:
0013E9r 2               .ifdef CONFIG_SMALL
0013E9r 2  B4 03                ldy     3,x
0013EBr 2               .else
0013EBr 2                       ldy     4,x
0013EBr 2               .endif
0013EBr 2  84 B9                sty     FACEXTENSION
0013EDr 2               .ifndef CONFIG_SMALL
0013EDr 2                       ldy     3,x
0013EDr 2                       sty     4,x
0013EDr 2               .endif
0013EDr 2  B4 02                ldy     2,x
0013EFr 2  94 03                sty     3,x
0013F1r 2  B4 01                ldy     1,x
0013F3r 2  94 02                sty     2,x
0013F5r 2  A4 B2                ldy     SHIFTSIGNEXT
0013F7r 2  94 01                sty     1,x
0013F9r 2               
0013F9r 2               ; ----------------------------------------------------------------------------
0013F9r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0013F9r 2               ; ----------------------------------------------------------------------------
0013F9r 2               SHIFT_RIGHT:
0013F9r 2  69 08                adc     #$08
0013FBr 2  30 EC                bmi     SHIFT_RIGHT2
0013FDr 2  F0 EA                beq     SHIFT_RIGHT2
0013FFr 2  E9 08                sbc     #$08
001401r 2  A8                   tay
001402r 2  A5 B9                lda     FACEXTENSION
001404r 2  B0 12                bcs     SHIFT_RIGHT5
001406r 2               .ifndef CONFIG_ROR_WORKAROUND
001406r 2               LB588:
001406r 2  16 01                asl     1,x
001408r 2  90 02                bcc     LB58E
00140Ar 2  F6 01                inc     1,x
00140Cr 2               LB58E:
00140Cr 2  76 01                ror     1,x
00140Er 2  76 01                ror     1,x
001410r 2               
001410r 2               ; ----------------------------------------------------------------------------
001410r 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
001410r 2               ; ----------------------------------------------------------------------------
001410r 2               SHIFT_RIGHT4:
001410r 2  76 02                ror     2,x
001412r 2  76 03                ror     3,x
001414r 2                 .ifndef CONFIG_SMALL
001414r 2                       ror     4,x
001414r 2                 .endif
001414r 2  6A                   ror     a
001415r 2  C8                   iny
001416r 2  D0 EE                bne     LB588
001418r 2               .else
001418r 2               L37C4:
001418r 2                       pha
001418r 2                       lda     1,x
001418r 2                       and     #$80
001418r 2                       lsr     1,x
001418r 2                       ora     1,x
001418r 2                       sta     1,x
001418r 2                       .byte   $24
001418r 2               SHIFT_RIGHT4:
001418r 2                       pha
001418r 2                       lda     #$00
001418r 2                       bcc     L37D7
001418r 2                       lda     #$80
001418r 2               L37D7:
001418r 2                       lsr     2,x
001418r 2                       ora     2,x
001418r 2                       sta     2,x
001418r 2                       lda     #$00
001418r 2                       bcc     L37E3
001418r 2                       lda     #$80
001418r 2               L37E3:
001418r 2                       lsr     3,x
001418r 2                       ora     3,x
001418r 2                       sta     3,x
001418r 2                       lda     #$00
001418r 2                       bcc     L37EF
001418r 2                       lda     #$80
001418r 2               L37EF:
001418r 2                       lsr     4,x
001418r 2                       ora     4,x
001418r 2                       sta     4,x
001418r 2                       pla
001418r 2                       php
001418r 2                       lsr     a
001418r 2                       plp
001418r 2                       bcc     L37FD
001418r 2                       ora     #$80
001418r 2               L37FD:
001418r 2                       iny
001418r 2                       bne     L37C4
001418r 2               .endif
001418r 2               SHIFT_RIGHT5:
001418r 2  18                   clc
001419r 2  60                   rts
00141Ar 2               
00141Ar 2               ; ----------------------------------------------------------------------------
00141Ar 2               .ifdef CONFIG_SMALL
00141Ar 2               CON_ONE:
00141Ar 2  81 00 00 00          .byte   $81,$00,$00,$00
00141Er 2               POLY_LOG:
00141Er 2  02           		.byte	$02
00141Fr 2  80 19 56 62  		.byte   $80,$19,$56,$62
001423r 2  80 76 22 F3  		.byte   $80,$76,$22,$F3
001427r 2  82 38 AA 40  		.byte   $82,$38,$AA,$40
00142Br 2               CON_SQR_HALF:
00142Br 2  80 35 04 F3  		.byte   $80,$35,$04,$F3
00142Fr 2               CON_SQR_TWO:
00142Fr 2  81 35 04 F3  		.byte   $81,$35,$04,$F3
001433r 2               CON_NEG_HALF:
001433r 2  80 80 00 00  		.byte   $80,$80,$00,$00
001437r 2               CON_LOG_TWO:
001437r 2  80 31 72 18  		.byte   $80,$31,$72,$18
00143Br 2               .else
00143Br 2               CON_ONE:
00143Br 2                       .byte   $81,$00,$00,$00,$00
00143Br 2               POLY_LOG:
00143Br 2                       .byte   $03
00143Br 2               		.byte   $7F,$5E,$56,$CB,$79
00143Br 2               		.byte   $80,$13,$9B,$0B,$64
00143Br 2               		.byte   $80,$76,$38,$93,$16
00143Br 2                       .byte   $82,$38,$AA,$3B,$20
00143Br 2               CON_SQR_HALF:
00143Br 2                       .byte   $80,$35,$04,$F3,$34
00143Br 2               CON_SQR_TWO:
00143Br 2                       .byte   $81,$35,$04,$F3,$34
00143Br 2               CON_NEG_HALF:
00143Br 2                       .byte   $80,$80,$00,$00,$00
00143Br 2               CON_LOG_TWO:
00143Br 2                       .byte   $80,$31,$72,$17,$F8
00143Br 2               .endif
00143Br 2               
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               ; "LOG" FUNCTION
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               LOG:
00143Br 2  20 rr rr             jsr     SIGN
00143Er 2  F0 02                beq     GIQ
001440r 2  10 03                bpl     LOG2
001442r 2               GIQ:
001442r 2  4C rr rr             jmp     IQERR
001445r 2               LOG2:
001445r 2  A5 AC                lda     FAC
001447r 2  E9 7F                sbc     #$7F
001449r 2  48                   pha
00144Ar 2  A9 80                lda     #$80
00144Cr 2  85 AC                sta     FAC
00144Er 2  A9 rr                lda     #<CON_SQR_HALF
001450r 2  A0 rr                ldy     #>CON_SQR_HALF
001452r 2  20 rr rr             jsr     FADD
001455r 2  A9 rr                lda     #<CON_SQR_TWO
001457r 2  A0 rr                ldy     #>CON_SQR_TWO
001459r 2  20 rr rr             jsr     FDIV
00145Cr 2  A9 rr                lda     #<CON_ONE
00145Er 2  A0 rr                ldy     #>CON_ONE
001460r 2  20 rr rr             jsr     FSUB
001463r 2  A9 rr                lda     #<POLY_LOG
001465r 2  A0 rr                ldy     #>POLY_LOG
001467r 2  20 rr rr             jsr     POLYNOMIAL_ODD
00146Ar 2  A9 rr                lda     #<CON_NEG_HALF
00146Cr 2  A0 rr                ldy     #>CON_NEG_HALF
00146Er 2  20 rr rr             jsr     FADD
001471r 2  68                   pla
001472r 2  20 rr rr             jsr     ADDACC
001475r 2  A9 rr                lda     #<CON_LOG_TWO
001477r 2  A0 rr                ldy     #>CON_LOG_TWO
001479r 2               
001479r 2               ; ----------------------------------------------------------------------------
001479r 2               ; FAC = (Y,A) * FAC
001479r 2               ; ----------------------------------------------------------------------------
001479r 2               FMULT:
001479r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00147Cr 2               
00147Cr 2               ; ----------------------------------------------------------------------------
00147Cr 2               ; FAC = ARG * FAC
00147Cr 2               ; ----------------------------------------------------------------------------
00147Cr 2               FMULTT:
00147Cr 2               .ifndef CONFIG_11
00147Cr 2  F0 4C                beq     L3903
00147Er 2               .else
00147Er 2                       jeq     L3903
00147Er 2               .endif
00147Er 2  20 rr rr             jsr     ADD_EXPONENTS
001481r 2  A9 00                lda     #$00
001483r 2  85 75                sta     RESULT
001485r 2  85 76                sta     RESULT+1
001487r 2  85 77                sta     RESULT+2
001489r 2               .ifndef CONFIG_SMALL
001489r 2                       sta     RESULT+3
001489r 2               .endif
001489r 2  A5 B9                lda     FACEXTENSION
00148Br 2  20 rr rr             jsr     MULTIPLY1
00148Er 2               .ifndef CONFIG_SMALL
00148Er 2                       lda     FAC+4
00148Er 2                       jsr     MULTIPLY1
00148Er 2               .endif
00148Er 2  A5 AF                lda     FAC+3
001490r 2  20 rr rr             jsr     MULTIPLY1
001493r 2  A5 AE                lda     FAC+2
001495r 2  20 rr rr             jsr     MULTIPLY1
001498r 2  A5 AD                lda     FAC+1
00149Ar 2  20 rr rr             jsr     MULTIPLY2
00149Dr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0014A0r 2               
0014A0r 2               ; ----------------------------------------------------------------------------
0014A0r 2               ; MULTIPLY ARG BY (A) INTO RESULT
0014A0r 2               ; ----------------------------------------------------------------------------
0014A0r 2               MULTIPLY1:
0014A0r 2  D0 03                bne     MULTIPLY2
0014A2r 2  4C rr rr             jmp     SHIFT_RIGHT1
0014A5r 2               MULTIPLY2:
0014A5r 2  4A                   lsr     a
0014A6r 2  09 80                ora     #$80
0014A8r 2               L38A7:
0014A8r 2  A8                   tay
0014A9r 2  90 13                bcc     L38C3
0014ABr 2  18                   clc
0014ACr 2               .ifndef CONFIG_SMALL
0014ACr 2                       lda     RESULT+3
0014ACr 2                       adc     ARG+4
0014ACr 2                       sta     RESULT+3
0014ACr 2               .endif
0014ACr 2  A5 77                lda     RESULT+2
0014AEr 2  65 B6                adc     ARG+3
0014B0r 2  85 77                sta     RESULT+2
0014B2r 2  A5 76                lda     RESULT+1
0014B4r 2  65 B5                adc     ARG+2
0014B6r 2  85 76                sta     RESULT+1
0014B8r 2  A5 75                lda     RESULT
0014BAr 2  65 B4                adc     ARG+1
0014BCr 2  85 75                sta     RESULT
0014BEr 2               L38C3:
0014BEr 2               .ifndef CONFIG_ROR_WORKAROUND
0014BEr 2  66 75                ror     RESULT
0014C0r 2  66 76                ror     RESULT+1
0014C2r 2               .ifdef APPLE_BAD_BYTE
0014C2r 2               ; this seems to be a bad byte in the dump
0014C2r 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
0014C2r 2               .else
0014C2r 2  66 77                ror     RESULT+2
0014C4r 2               .endif
0014C4r 2               .ifndef CONFIG_SMALL
0014C4r 2                       ror     RESULT+3
0014C4r 2               .endif
0014C4r 2  66 B9                ror     FACEXTENSION
0014C6r 2               .else
0014C6r 2                       lda     #$00
0014C6r 2                       bcc     L38C9
0014C6r 2                       lda     #$80
0014C6r 2               L38C9:
0014C6r 2                       lsr     RESULT
0014C6r 2                       ora     RESULT
0014C6r 2                       sta     RESULT
0014C6r 2                       lda     #$00
0014C6r 2                       bcc     L38D5
0014C6r 2                       lda     #$80
0014C6r 2               L38D5:
0014C6r 2                       lsr     RESULT+1
0014C6r 2                       ora     RESULT+1
0014C6r 2                       sta     RESULT+1
0014C6r 2                       lda     #$00
0014C6r 2                       bcc     L38E1
0014C6r 2                       lda     #$80
0014C6r 2               L38E1:
0014C6r 2                       lsr     RESULT+2
0014C6r 2                       ora     RESULT+2
0014C6r 2                       sta     RESULT+2
0014C6r 2                       lda     #$00
0014C6r 2                       bcc     L38ED
0014C6r 2                       lda     #$80
0014C6r 2               L38ED:
0014C6r 2                       lsr     RESULT+3
0014C6r 2                       ora     RESULT+3
0014C6r 2                       sta     RESULT+3
0014C6r 2                       lda     #$00
0014C6r 2                       bcc     L38F9
0014C6r 2                       lda     #$80
0014C6r 2               L38F9:
0014C6r 2                       lsr     FACEXTENSION
0014C6r 2                       ora     FACEXTENSION
0014C6r 2                       sta     FACEXTENSION
0014C6r 2               .endif
0014C6r 2  98                   tya
0014C7r 2  4A                   lsr     a
0014C8r 2  D0 DE                bne     L38A7
0014CAr 2               L3903:
0014CAr 2  60                   rts
0014CBr 2               
0014CBr 2               ; ----------------------------------------------------------------------------
0014CBr 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0014CBr 2               ; ----------------------------------------------------------------------------
0014CBr 2               LOAD_ARG_FROM_YA:
0014CBr 2  85 71                sta     INDEX
0014CDr 2  84 72                sty     INDEX+1
0014CFr 2  A0 03                ldy     #BYTES_FP-1
0014D1r 2               .ifndef CONFIG_SMALL
0014D1r 2                       lda     (INDEX),y
0014D1r 2                       sta     ARG+4
0014D1r 2                       dey
0014D1r 2               .endif
0014D1r 2  B1 71                lda     (INDEX),y
0014D3r 2  85 B6                sta     ARG+3
0014D5r 2  88                   dey
0014D6r 2  B1 71                lda     (INDEX),y
0014D8r 2  85 B5                sta     ARG+2
0014DAr 2  88                   dey
0014DBr 2  B1 71                lda     (INDEX),y
0014DDr 2  85 B7                sta     ARGSIGN
0014DFr 2  45 B0                eor     FACSIGN
0014E1r 2  85 B8                sta     SGNCPR
0014E3r 2  A5 B7                lda     ARGSIGN
0014E5r 2  09 80                ora     #$80
0014E7r 2  85 B4                sta     ARG+1
0014E9r 2  88                   dey
0014EAr 2  B1 71                lda     (INDEX),y
0014ECr 2  85 B3                sta     ARG
0014EEr 2  A5 AC                lda     FAC
0014F0r 2  60                   rts
0014F1r 2               
0014F1r 2               ; ----------------------------------------------------------------------------
0014F1r 2               ; ADD EXPONENTS OF ARG AND FAC
0014F1r 2               ; (CALLED BY FMULT AND FDIV)
0014F1r 2               ;
0014F1r 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0014F1r 2               ; ----------------------------------------------------------------------------
0014F1r 2               ADD_EXPONENTS:
0014F1r 2  A5 B3                lda     ARG
0014F3r 2               ADD_EXPONENTS1:
0014F3r 2  F0 1F                beq     ZERO
0014F5r 2  18                   clc
0014F6r 2  65 AC                adc     FAC
0014F8r 2  90 04                bcc     L393C
0014FAr 2  30 1D                bmi     JOV
0014FCr 2  18                   clc
0014FDr 2  2C                   .byte   $2C
0014FEr 2               L393C:
0014FEr 2  10 14                bpl     ZERO
001500r 2  69 80                adc     #$80
001502r 2  85 AC                sta     FAC
001504r 2  D0 03                bne     L3947
001506r 2  4C rr rr             jmp     STA_IN_FAC_SIGN
001509r 2               L3947:
001509r 2  A5 B8                lda     SGNCPR
00150Br 2  85 B0                sta     FACSIGN
00150Dr 2  60                   rts
00150Er 2               
00150Er 2               ; ----------------------------------------------------------------------------
00150Er 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00150Er 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00150Er 2               ; CALLED FROM "EXP" FUNCTION
00150Er 2               ; ----------------------------------------------------------------------------
00150Er 2               OUTOFRNG:
00150Er 2  A5 B0                lda     FACSIGN
001510r 2  49 FF                eor     #$FF
001512r 2  30 05                bmi     JOV
001514r 2               
001514r 2               ; ----------------------------------------------------------------------------
001514r 2               ; POP RETURN ADDRESS AND SET FAC=0
001514r 2               ; ----------------------------------------------------------------------------
001514r 2               ZERO:
001514r 2  68                   pla
001515r 2  68                   pla
001516r 2  4C rr rr             jmp     ZERO_FAC
001519r 2               JOV:
001519r 2  4C rr rr             jmp     OVERFLOW
00151Cr 2               
00151Cr 2               ; ----------------------------------------------------------------------------
00151Cr 2               ; MULTIPLY FAC BY 10
00151Cr 2               ; ----------------------------------------------------------------------------
00151Cr 2               MUL10:
00151Cr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00151Fr 2  AA                   tax
001520r 2  F0 10                beq     L3970
001522r 2  18                   clc
001523r 2  69 02                adc     #$02
001525r 2  B0 F2                bcs     JOV
001527r 2               LD9BF:
001527r 2  A2 00                ldx     #$00
001529r 2  86 B8                stx     SGNCPR
00152Br 2  20 rr rr             jsr     FADD2
00152Er 2  E6 AC                inc     FAC
001530r 2  F0 E7                beq     JOV
001532r 2               L3970:
001532r 2  60                   rts
001533r 2               
001533r 2               ; ----------------------------------------------------------------------------
001533r 2               CONTEN:
001533r 2               .ifdef CONFIG_SMALL
001533r 2  84 20 00 00          .byte   $84,$20,$00,$00
001537r 2               .else
001537r 2                       .byte   $84,$20,$00,$00,$00
001537r 2               .endif
001537r 2               
001537r 2               ; ----------------------------------------------------------------------------
001537r 2               ; DIVIDE FAC BY 10
001537r 2               ; ----------------------------------------------------------------------------
001537r 2               DIV10:
001537r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00153Ar 2  A9 rr                lda     #<CONTEN
00153Cr 2  A0 rr                ldy     #>CONTEN
00153Er 2  A2 00                ldx     #$00
001540r 2               
001540r 2               ; ----------------------------------------------------------------------------
001540r 2               ; FAC = ARG / (Y,A)
001540r 2               ; ----------------------------------------------------------------------------
001540r 2               DIV:
001540r 2  86 B8                stx     SGNCPR
001542r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001545r 2  4C rr rr             jmp     FDIVT
001548r 2               
001548r 2               ; ----------------------------------------------------------------------------
001548r 2               ; FAC = (Y,A) / FAC
001548r 2               ; ----------------------------------------------------------------------------
001548r 2               FDIV:
001548r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00154Br 2               
00154Br 2               ; ----------------------------------------------------------------------------
00154Br 2               ; FAC = ARG / FAC
00154Br 2               ; ----------------------------------------------------------------------------
00154Br 2               FDIVT:
00154Br 2  F0 68                beq     L3A02
00154Dr 2  20 rr rr             jsr     ROUND_FAC
001550r 2  A9 00                lda     #$00
001552r 2  38                   sec
001553r 2  E5 AC                sbc     FAC
001555r 2  85 AC                sta     FAC
001557r 2  20 rr rr             jsr     ADD_EXPONENTS
00155Ar 2  E6 AC                inc     FAC
00155Cr 2  F0 BB                beq     JOV
00155Er 2  A2 FD                ldx     #-MANTISSA_BYTES
001560r 2  A9 01                lda     #$01
001562r 2               L39A1:
001562r 2  A4 B4                ldy     ARG+1
001564r 2  C4 AD                cpy     FAC+1
001566r 2  D0 0A                bne     L39B7
001568r 2  A4 B5                ldy     ARG+2
00156Ar 2  C4 AE                cpy     FAC+2
00156Cr 2  D0 04                bne     L39B7
00156Er 2  A4 B6                ldy     ARG+3
001570r 2  C4 AF                cpy     FAC+3
001572r 2               .ifndef CONFIG_SMALL
001572r 2                       bne     L39B7
001572r 2                       ldy     ARG+4
001572r 2                       cpy     FAC+4
001572r 2               .endif
001572r 2               L39B7:
001572r 2  08                   php
001573r 2  2A                   rol     a
001574r 2  90 09                bcc     L39C4
001576r 2  E8                   inx
001577r 2  95 77                sta     RESULT_LAST-1,x
001579r 2  F0 2A                beq     L39F2
00157Br 2  10 2C                bpl     L39F6
00157Dr 2  A9 01                lda     #$01
00157Fr 2               L39C4:
00157Fr 2  28                   plp
001580r 2  B0 0C                bcs     L39D5
001582r 2               L39C7:
001582r 2  06 B6                asl     ARG_LAST
001584r 2               .ifndef CONFIG_SMALL
001584r 2                       rol     ARG+3
001584r 2               .endif
001584r 2  26 B5                rol     ARG+2
001586r 2  26 B4                rol     ARG+1
001588r 2  B0 E8                bcs     L39B7
00158Ar 2  30 D6                bmi     L39A1
00158Cr 2  10 E4                bpl     L39B7
00158Er 2               L39D5:
00158Er 2  A8                   tay
00158Fr 2               .ifndef CONFIG_SMALL
00158Fr 2                       lda     ARG+4
00158Fr 2                       sbc     FAC+4
00158Fr 2                       sta     ARG+4
00158Fr 2               .endif
00158Fr 2  A5 B6                lda     ARG+3
001591r 2  E5 AF                sbc     FAC+3
001593r 2  85 B6                sta     ARG+3
001595r 2  A5 B5                lda     ARG+2
001597r 2  E5 AE                sbc     FAC+2
001599r 2  85 B5                sta     ARG+2
00159Br 2  A5 B4                lda     ARG+1
00159Dr 2  E5 AD                sbc     FAC+1
00159Fr 2  85 B4                sta     ARG+1
0015A1r 2  98                   tya
0015A2r 2  4C rr rr             jmp     L39C7
0015A5r 2               L39F2:
0015A5r 2  A9 40                lda     #$40
0015A7r 2  D0 D6                bne     L39C4
0015A9r 2               L39F6:
0015A9r 2  0A                   asl     a
0015AAr 2  0A                   asl     a
0015ABr 2  0A                   asl     a
0015ACr 2  0A                   asl     a
0015ADr 2  0A                   asl     a
0015AEr 2  0A                   asl     a
0015AFr 2  85 B9                sta     FACEXTENSION
0015B1r 2  28                   plp
0015B2r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0015B5r 2               L3A02:
0015B5r 2  A2 14                ldx     #ERR_ZERODIV
0015B7r 2  4C rr rr             jmp     ERROR
0015BAr 2               
0015BAr 2               ; ----------------------------------------------------------------------------
0015BAr 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0015BAr 2               ; ----------------------------------------------------------------------------
0015BAr 2               COPY_RESULT_INTO_FAC:
0015BAr 2  A5 75                lda     RESULT
0015BCr 2  85 AD                sta     FAC+1
0015BEr 2  A5 76                lda     RESULT+1
0015C0r 2  85 AE                sta     FAC+2
0015C2r 2  A5 77                lda     RESULT+2
0015C4r 2  85 AF                sta     FAC+3
0015C6r 2               .ifndef CONFIG_SMALL
0015C6r 2                       lda     RESULT+3
0015C6r 2                       sta     FAC+4
0015C6r 2               .endif
0015C6r 2  4C rr rr             jmp     NORMALIZE_FAC2
0015C9r 2               
0015C9r 2               ; ----------------------------------------------------------------------------
0015C9r 2               ; UNPACK (Y,A) INTO FAC
0015C9r 2               ; ----------------------------------------------------------------------------
0015C9r 2               LOAD_FAC_FROM_YA:
0015C9r 2  85 71                sta     INDEX
0015CBr 2  84 72                sty     INDEX+1
0015CDr 2  A0 03                ldy     #MANTISSA_BYTES
0015CFr 2               .ifndef CONFIG_SMALL
0015CFr 2                       lda     (INDEX),y
0015CFr 2                       sta     FAC+4
0015CFr 2                       dey
0015CFr 2               .endif
0015CFr 2  B1 71                lda     (INDEX),y
0015D1r 2  85 AF                sta     FAC+3
0015D3r 2  88                   dey
0015D4r 2  B1 71                lda     (INDEX),y
0015D6r 2  85 AE                sta     FAC+2
0015D8r 2  88                   dey
0015D9r 2  B1 71                lda     (INDEX),y
0015DBr 2  85 B0                sta     FACSIGN
0015DDr 2  09 80                ora     #$80
0015DFr 2  85 AD                sta     FAC+1
0015E1r 2  88                   dey
0015E2r 2  B1 71                lda     (INDEX),y
0015E4r 2  85 AC                sta     FAC
0015E6r 2  84 B9                sty     FACEXTENSION
0015E8r 2  60                   rts
0015E9r 2               
0015E9r 2               ; ----------------------------------------------------------------------------
0015E9r 2               ; ROUND FAC, STORE IN TEMP2
0015E9r 2               ; ----------------------------------------------------------------------------
0015E9r 2               STORE_FAC_IN_TEMP2_ROUNDED:
0015E9r 2  A2 A8                ldx     #TEMP2
0015EBr 2  2C                   .byte   $2C
0015ECr 2               
0015ECr 2               ; ----------------------------------------------------------------------------
0015ECr 2               ; ROUND FAC, STORE IN TEMP1
0015ECr 2               ; ----------------------------------------------------------------------------
0015ECr 2               STORE_FAC_IN_TEMP1_ROUNDED:
0015ECr 2  A2 A4                ldx     #TEMP1X
0015EEr 2  A0 00                ldy     #$00
0015F0r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0015F2r 2               
0015F2r 2               ; ----------------------------------------------------------------------------
0015F2r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0015F2r 2               ; ----------------------------------------------------------------------------
0015F2r 2               SETFOR:
0015F2r 2  A6 97                ldx     FORPNT
0015F4r 2  A4 98                ldy     FORPNT+1
0015F6r 2               
0015F6r 2               ; ----------------------------------------------------------------------------
0015F6r 2               ; ROUND FAC, AND STORE AT (Y,X)
0015F6r 2               ; ----------------------------------------------------------------------------
0015F6r 2               STORE_FAC_AT_YX_ROUNDED:
0015F6r 2  20 rr rr             jsr     ROUND_FAC
0015F9r 2  86 71                stx     INDEX
0015FBr 2  84 72                sty     INDEX+1
0015FDr 2  A0 03                ldy     #MANTISSA_BYTES
0015FFr 2               .ifndef CONFIG_SMALL
0015FFr 2                       lda     FAC+4
0015FFr 2                       sta     (INDEX),y
0015FFr 2                       dey
0015FFr 2               .endif
0015FFr 2  A5 AF                lda     FAC+3
001601r 2  91 71                sta     (INDEX),y
001603r 2  88                   dey
001604r 2  A5 AE                lda     FAC+2
001606r 2  91 71                sta     (INDEX),y
001608r 2  88                   dey
001609r 2  A5 B0                lda     FACSIGN
00160Br 2  09 7F                ora     #$7F
00160Dr 2  25 AD                and     FAC+1
00160Fr 2  91 71                sta     (INDEX),y
001611r 2  88                   dey
001612r 2  A5 AC                lda     FAC
001614r 2  91 71                sta     (INDEX),y
001616r 2  84 B9                sty     FACEXTENSION
001618r 2  60                   rts
001619r 2               
001619r 2               ; ----------------------------------------------------------------------------
001619r 2               ; COPY ARG INTO FAC
001619r 2               ; ----------------------------------------------------------------------------
001619r 2               COPY_ARG_TO_FAC:
001619r 2  A5 B7                lda     ARGSIGN
00161Br 2               MFA:
00161Br 2  85 B0                sta     FACSIGN
00161Dr 2  A2 04                ldx     #BYTES_FP
00161Fr 2               L3A7A:
00161Fr 2  B5 B2                lda     SHIFTSIGNEXT,x
001621r 2  95 AB                sta     EXPSGN,x
001623r 2  CA                   dex
001624r 2  D0 F9                bne     L3A7A
001626r 2  86 B9                stx     FACEXTENSION
001628r 2  60                   rts
001629r 2               
001629r 2               ; ----------------------------------------------------------------------------
001629r 2               ; ROUND FAC AND COPY TO ARG
001629r 2               ; ----------------------------------------------------------------------------
001629r 2               COPY_FAC_TO_ARG_ROUNDED:
001629r 2  20 rr rr             jsr     ROUND_FAC
00162Cr 2               MAF:
00162Cr 2  A2 05                ldx     #BYTES_FP+1
00162Er 2               L3A89:
00162Er 2  B5 AB                lda     EXPSGN,x
001630r 2  95 B2                sta     SHIFTSIGNEXT,x
001632r 2  CA                   dex
001633r 2  D0 F9                bne     L3A89
001635r 2  86 B9                stx     FACEXTENSION
001637r 2               RTS14:
001637r 2  60                   rts
001638r 2               
001638r 2               ; ----------------------------------------------------------------------------
001638r 2               ; ROUND FAC USING EXTENSION BYTE
001638r 2               ; ----------------------------------------------------------------------------
001638r 2               ROUND_FAC:
001638r 2  A5 AC                lda     FAC
00163Ar 2  F0 FB                beq     RTS14
00163Cr 2  06 B9                asl     FACEXTENSION
00163Er 2  90 F7                bcc     RTS14
001640r 2               
001640r 2               ; ----------------------------------------------------------------------------
001640r 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
001640r 2               ; ----------------------------------------------------------------------------
001640r 2               INCREMENT_MANTISSA:
001640r 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
001643r 2  D0 F2                bne     RTS14
001645r 2  4C rr rr             jmp     NORMALIZE_FAC6
001648r 2               
001648r 2               ; ----------------------------------------------------------------------------
001648r 2               ; TEST FAC FOR ZERO AND SIGN
001648r 2               ;
001648r 2               ; FAC > 0, RETURN +1
001648r 2               ; FAC = 0, RETURN  0
001648r 2               ; FAC < 0, RETURN -1
001648r 2               ; ----------------------------------------------------------------------------
001648r 2               SIGN:
001648r 2  A5 AC                lda     FAC
00164Ar 2  F0 09                beq     RTS15
00164Cr 2               L3AA7:
00164Cr 2  A5 B0                lda     FACSIGN
00164Er 2               SIGN2:
00164Er 2  2A                   rol     a
00164Fr 2  A9 FF                lda     #$FF
001651r 2  B0 02                bcs     RTS15
001653r 2  A9 01                lda     #$01
001655r 2               RTS15:
001655r 2  60                   rts
001656r 2               
001656r 2               ; ----------------------------------------------------------------------------
001656r 2               ; "SGN" FUNCTION
001656r 2               ; ----------------------------------------------------------------------------
001656r 2               SGN:
001656r 2  20 rr rr             jsr     SIGN
001659r 2               
001659r 2               ; ----------------------------------------------------------------------------
001659r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001659r 2               ; ----------------------------------------------------------------------------
001659r 2               FLOAT:
001659r 2  85 AD                sta     FAC+1
00165Br 2  A9 00                lda     #$00
00165Dr 2  85 AE                sta     FAC+2
00165Fr 2  A2 88                ldx     #$88
001661r 2               
001661r 2               ; ----------------------------------------------------------------------------
001661r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001661r 2               ; (X) = EXPONENT
001661r 2               ; ----------------------------------------------------------------------------
001661r 2               FLOAT1:
001661r 2  A5 AD                lda     FAC+1
001663r 2  49 FF                eor     #$FF
001665r 2  2A                   rol     a
001666r 2               
001666r 2               ; ----------------------------------------------------------------------------
001666r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001666r 2               ; (X) = EXPONENT
001666r 2               ; C=0 TO MAKE VALUE NEGATIVE
001666r 2               ; C=1 TO MAKE VALUE POSITIVE
001666r 2               ; ----------------------------------------------------------------------------
001666r 2               FLOAT2:
001666r 2  A9 00                lda     #$00
001668r 2               .ifndef CONFIG_SMALL
001668r 2                       sta     FAC+4
001668r 2               .endif
001668r 2  85 AF                sta     FAC+3
00166Ar 2               LDB21:
00166Ar 2  86 AC                stx     FAC
00166Cr 2  85 B9                sta     FACEXTENSION
00166Er 2  85 B0                sta     FACSIGN
001670r 2  4C rr rr             jmp     NORMALIZE_FAC1
001673r 2               
001673r 2               ; ----------------------------------------------------------------------------
001673r 2               ; "ABS" FUNCTION
001673r 2               ; ----------------------------------------------------------------------------
001673r 2               ABS:
001673r 2  46 B0                lsr     FACSIGN
001675r 2  60                   rts
001676r 2               
001676r 2               ; ----------------------------------------------------------------------------
001676r 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
001676r 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001676r 2               ; ----------------------------------------------------------------------------
001676r 2               FCOMP:
001676r 2  85 73                sta     DEST
001678r 2               
001678r 2               ; ----------------------------------------------------------------------------
001678r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001678r 2               ; "DEST" ALREADY SET UP
001678r 2               ; ----------------------------------------------------------------------------
001678r 2               FCOMP2:
001678r 2  84 74                sty     DEST+1
00167Ar 2  A0 00                ldy     #$00
00167Cr 2  B1 73                lda     (DEST),y
00167Er 2  C8                   iny
00167Fr 2  AA                   tax
001680r 2  F0 C6                beq     SIGN
001682r 2  B1 73                lda     (DEST),y
001684r 2  45 B0                eor     FACSIGN
001686r 2  30 C4                bmi     L3AA7
001688r 2  E4 AC                cpx     FAC
00168Ar 2  D0 1A                bne     L3B0A
00168Cr 2  B1 73                lda     (DEST),y
00168Er 2  09 80                ora     #$80
001690r 2  C5 AD                cmp     FAC+1
001692r 2  D0 12                bne     L3B0A
001694r 2  C8                   iny
001695r 2  B1 73                lda     (DEST),y
001697r 2  C5 AE                cmp     FAC+2
001699r 2  D0 0B                bne     L3B0A
00169Br 2  C8                   iny
00169Cr 2               .ifndef CONFIG_SMALL
00169Cr 2                       lda     (DEST),y
00169Cr 2                       cmp     FAC+3
00169Cr 2                       bne     L3B0A
00169Cr 2                       iny
00169Cr 2               .endif
00169Cr 2  A9 7F                lda     #$7F
00169Er 2  C5 B9                cmp     FACEXTENSION
0016A0r 2  B1 73                lda     (DEST),y
0016A2r 2  E5 AF                sbc     FAC_LAST
0016A4r 2  F0 28                beq     L3B32
0016A6r 2               L3B0A:
0016A6r 2  A5 B0                lda     FACSIGN
0016A8r 2  90 02                bcc     L3B10
0016AAr 2  49 FF                eor     #$FF
0016ACr 2               L3B10:
0016ACr 2  4C rr rr             jmp     SIGN2
0016AFr 2               
0016AFr 2               ; ----------------------------------------------------------------------------
0016AFr 2               ; QUICK INTEGER FUNCTION
0016AFr 2               ;
0016AFr 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0016AFr 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0016AFr 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0016AFr 2               ;
0016AFr 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0016AFr 2               ; ----------------------------------------------------------------------------
0016AFr 2               QINT:
0016AFr 2  A5 AC                lda     FAC
0016B1r 2  F0 4A                beq     QINT3
0016B3r 2  38                   sec
0016B4r 2  E9 98                sbc     #120+8*BYTES_FP
0016B6r 2  24 B0                bit     FACSIGN
0016B8r 2  10 09                bpl     L3B27
0016BAr 2  AA                   tax
0016BBr 2  A9 FF                lda     #$FF
0016BDr 2  85 B2                sta     SHIFTSIGNEXT
0016BFr 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0016C2r 2  8A                   txa
0016C3r 2               L3B27:
0016C3r 2  A2 AC                ldx     #FAC
0016C5r 2  C9 F9                cmp     #$F9
0016C7r 2  10 06                bpl     QINT2
0016C9r 2  20 rr rr             jsr     SHIFT_RIGHT
0016CCr 2  84 B2                sty     SHIFTSIGNEXT
0016CEr 2               L3B32:
0016CEr 2  60                   rts
0016CFr 2               QINT2:
0016CFr 2  A8                   tay
0016D0r 2  A5 B0                lda     FACSIGN
0016D2r 2  29 80                and     #$80
0016D4r 2  46 AD                lsr     FAC+1
0016D6r 2  05 AD                ora     FAC+1
0016D8r 2  85 AD                sta     FAC+1
0016DAr 2  20 rr rr             jsr     SHIFT_RIGHT4
0016DDr 2  84 B2                sty     SHIFTSIGNEXT
0016DFr 2  60                   rts
0016E0r 2               
0016E0r 2               ; ----------------------------------------------------------------------------
0016E0r 2               ; "INT" FUNCTION
0016E0r 2               ;
0016E0r 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0016E0r 2               ; AND THEN REFLOATS THE INTEGER.
0016E0r 2               ; ----------------------------------------------------------------------------
0016E0r 2               INT:
0016E0r 2  A5 AC                lda     FAC
0016E2r 2  C9 98                cmp     #120+8*BYTES_FP
0016E4r 2  B0 1E                bcs     RTS17
0016E6r 2  20 rr rr             jsr     QINT
0016E9r 2  84 B9                sty     FACEXTENSION
0016EBr 2  A5 B0                lda     FACSIGN
0016EDr 2  84 B0                sty     FACSIGN
0016EFr 2  49 80                eor     #$80
0016F1r 2  2A                   rol     a
0016F2r 2  A9 98                lda     #120+8*BYTES_FP
0016F4r 2  85 AC                sta     FAC
0016F6r 2  A5 AF                lda     FAC_LAST
0016F8r 2  85 5B                sta     CHARAC
0016FAr 2  4C rr rr             jmp     NORMALIZE_FAC1
0016FDr 2               QINT3:
0016FDr 2  85 AD                sta     FAC+1
0016FFr 2  85 AE                sta     FAC+2
001701r 2  85 AF                sta     FAC+3
001703r 2               .ifndef CONFIG_SMALL
001703r 2                       sta     FAC+4
001703r 2               .endif
001703r 2  A8                   tay
001704r 2               RTS17:
001704r 2  60                   rts
001705r 2               
001705r 2               ; ----------------------------------------------------------------------------
001705r 2               ; CONVERT STRING TO FP VALUE IN FAC
001705r 2               ;
001705r 2               ; STRING POINTED TO BY TXTPTR
001705r 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
001705r 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
001705r 2               ; ----------------------------------------------------------------------------
001705r 2               FIN:
001705r 2  A0 00                ldy     #$00
001707r 2  A2 09                ldx     #SERLEN-TMPEXP
001709r 2               L3B6F:
001709r 2  94 A8                sty     TMPEXP,x
00170Br 2  CA                   dex
00170Cr 2  10 FB                bpl     L3B6F
00170Er 2  90 0F                bcc     FIN2
001710r 2               .ifdef SYM1
001710r 2                       cmp     #$26
001710r 2                       bne     LDABB
001710r 2                       jmp     LCDFE
001710r 2               LDABB:
001710r 2               .endif
001710r 2  C9 2D                cmp     #$2D
001712r 2  D0 04                bne     L3B7E
001714r 2  86 B1                stx     SERLEN
001716r 2  F0 04                beq     FIN1
001718r 2               L3B7E:
001718r 2  C9 2B                cmp     #$2B
00171Ar 2  D0 05                bne     FIN3
00171Cr 2               FIN1:
00171Cr 2  20 BC 00             jsr     CHRGET
00171Fr 2               FIN2:
00171Fr 2  90 5B                bcc     FIN9
001721r 2               FIN3:
001721r 2  C9 2E                cmp     #$2E
001723r 2  F0 2E                beq     FIN10
001725r 2  C9 45                cmp     #$45
001727r 2  D0 30                bne     FIN7
001729r 2  20 BC 00             jsr     CHRGET
00172Cr 2  90 17                bcc     FIN5
00172Er 2  C9 A4                cmp     #TOKEN_MINUS
001730r 2  F0 0E                beq     L3BA6
001732r 2  C9 2D                cmp     #$2D
001734r 2  F0 0A                beq     L3BA6
001736r 2  C9 A3                cmp     #TOKEN_PLUS
001738r 2  F0 08                beq     FIN4
00173Ar 2  C9 2B                cmp     #$2B
00173Cr 2  F0 04                beq     FIN4
00173Er 2  D0 07                bne     FIN6
001740r 2               L3BA6:
001740r 2               .ifndef CONFIG_ROR_WORKAROUND
001740r 2  66 AB                ror     EXPSGN
001742r 2               .else
001742r 2                       lda     #$00
001742r 2                       bcc     L3BAC
001742r 2                       lda     #$80
001742r 2               L3BAC:
001742r 2                       lsr     EXPSGN
001742r 2                       ora     EXPSGN
001742r 2                       sta     EXPSGN
001742r 2               .endif
001742r 2               FIN4:
001742r 2  20 BC 00             jsr     CHRGET
001745r 2               FIN5:
001745r 2  90 5C                bcc     GETEXP
001747r 2               FIN6:
001747r 2  24 AB                bit     EXPSGN
001749r 2  10 0E                bpl     FIN7
00174Br 2  A9 00                lda     #$00
00174Dr 2  38                   sec
00174Er 2  E5 A9                sbc     EXPON
001750r 2  4C rr rr             jmp     FIN8
001753r 2               
001753r 2               ; ----------------------------------------------------------------------------
001753r 2               ; FOUND A DECIMAL POINT
001753r 2               ; ----------------------------------------------------------------------------
001753r 2               FIN10:
001753r 2               .ifndef CONFIG_ROR_WORKAROUND
001753r 2  66 AA                ror     LOWTR
001755r 2               .else
001755r 2                       lda     #$00
001755r 2                       bcc     L3BC9
001755r 2                       lda     #$80
001755r 2               L3BC9:
001755r 2                       lsr     LOWTR
001755r 2                       ora     LOWTR
001755r 2                       sta     LOWTR
001755r 2               .endif
001755r 2  24 AA                bit     LOWTR
001757r 2  50 C3                bvc     FIN1
001759r 2               
001759r 2               ; ----------------------------------------------------------------------------
001759r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001759r 2               ; ----------------------------------------------------------------------------
001759r 2               FIN7:
001759r 2  A5 A9                lda     EXPON
00175Br 2               FIN8:
00175Br 2  38                   sec
00175Cr 2  E5 A8                sbc     INDX
00175Er 2  85 A9                sta     EXPON
001760r 2  F0 12                beq     L3BEE
001762r 2  10 09                bpl     L3BE7
001764r 2               L3BDE:
001764r 2  20 rr rr             jsr     DIV10
001767r 2  E6 A9                inc     EXPON
001769r 2  D0 F9                bne     L3BDE
00176Br 2  F0 07                beq     L3BEE
00176Dr 2               L3BE7:
00176Dr 2  20 rr rr             jsr     MUL10
001770r 2  C6 A9                dec     EXPON
001772r 2  D0 F9                bne     L3BE7
001774r 2               L3BEE:
001774r 2  A5 B1                lda     SERLEN
001776r 2  30 01                bmi     L3BF3
001778r 2  60                   rts
001779r 2               L3BF3:
001779r 2  4C rr rr             jmp     NEGOP
00177Cr 2               
00177Cr 2               ; ----------------------------------------------------------------------------
00177Cr 2               ; ACCUMULATE A DIGIT INTO FAC
00177Cr 2               ; ----------------------------------------------------------------------------
00177Cr 2               FIN9:
00177Cr 2  48                   pha
00177Dr 2  24 AA                bit     LOWTR
00177Fr 2  10 02                bpl     L3BFD
001781r 2  E6 A8                inc     INDX
001783r 2               L3BFD:
001783r 2  20 rr rr             jsr     MUL10
001786r 2  68                   pla
001787r 2  38                   sec
001788r 2  E9 30                sbc     #$30
00178Ar 2  20 rr rr             jsr     ADDACC
00178Dr 2  4C rr rr             jmp     FIN1
001790r 2               
001790r 2               ; ----------------------------------------------------------------------------
001790r 2               ; ADD (A) TO FAC
001790r 2               ; ----------------------------------------------------------------------------
001790r 2               ADDACC:
001790r 2  48                   pha
001791r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001794r 2  68                   pla
001795r 2  20 rr rr             jsr     FLOAT
001798r 2  A5 B7                lda     ARGSIGN
00179Ar 2  45 B0                eor     FACSIGN
00179Cr 2  85 B8                sta     SGNCPR
00179Er 2  A6 AC                ldx     FAC
0017A0r 2  4C rr rr             jmp     FADDT
0017A3r 2               
0017A3r 2               ; ----------------------------------------------------------------------------
0017A3r 2               ; ACCUMULATE DIGIT OF EXPONENT
0017A3r 2               ; ----------------------------------------------------------------------------
0017A3r 2               GETEXP:
0017A3r 2  A5 A9                lda     EXPON
0017A5r 2  C9 0A                cmp     #MAX_EXPON
0017A7r 2  90 09                bcc     L3C2C
0017A9r 2               .ifdef CONFIG_10A
0017A9r 2  A9 64                lda     #$64
0017ABr 2               .endif
0017ABr 2  24 AB                bit     EXPSGN
0017ADr 2               .ifdef CONFIG_10A
0017ADr 2  30 11                bmi     L3C3A
0017AFr 2               .else
0017AFr 2                       bmi     LDC70
0017AFr 2               .endif
0017AFr 2  4C rr rr             jmp     OVERFLOW
0017B2r 2               LDC70:
0017B2r 2               .ifndef CONFIG_10A
0017B2r 2                       lda     #$0B
0017B2r 2               .endif
0017B2r 2               L3C2C:
0017B2r 2  0A                   asl     a
0017B3r 2  0A                   asl     a
0017B4r 2  18                   clc
0017B5r 2  65 A9                adc     EXPON
0017B7r 2  0A                   asl     a
0017B8r 2  18                   clc
0017B9r 2  A0 00                ldy     #$00
0017BBr 2  71 C3                adc     (TXTPTR),y
0017BDr 2  38                   sec
0017BEr 2  E9 30                sbc     #$30
0017C0r 2               L3C3A:
0017C0r 2  85 A9                sta     EXPON
0017C2r 2  4C rr rr             jmp     FIN4
0017C5r 2               
0017C5r 2               ; ----------------------------------------------------------------------------
0017C5r 2               .ifdef CONFIG_SMALL
0017C5r 2               ; these values are /1000 of what the labels say
0017C5r 2               CON_99999999_9:
0017C5r 2  91 43 4F F8          .byte   $91,$43,$4F,$F8
0017C9r 2               CON_999999999:
0017C9r 2  94 74 23 F7  		.byte   $94,$74,$23,$F7
0017CDr 2               CON_BILLION:
0017CDr 2  94 74 24 00          .byte   $94,$74,$24,$00
0017D1r 2               .else
0017D1r 2               CON_99999999_9:
0017D1r 2                       .byte   $9B,$3E,$BC,$1F,$FD
0017D1r 2               CON_999999999:
0017D1r 2               .ifndef CONFIG_10A
0017D1r 2                       .byte   $9E,$6E,$6B,$27,$FE
0017D1r 2               .else
0017D1r 2                       .byte   $9E,$6E,$6B,$27,$FD
0017D1r 2               .endif
0017D1r 2               CON_BILLION:
0017D1r 2                       .byte   $9E,$6E,$6B,$28,$00
0017D1r 2               .endif
0017D1r 2               
0017D1r 2               ; ----------------------------------------------------------------------------
0017D1r 2               ; PRINT "IN <LINE #>"
0017D1r 2               ; ----------------------------------------------------------------------------
0017D1r 2               INPRT:
0017D1r 2               .ifdef KBD
0017D1r 2                       jsr     LFE0B
0017D1r 2                       .byte	" in"
0017D1r 2                       .byte	0
0017D1r 2               .else
0017D1r 2  A9 rr                lda     #<QT_IN
0017D3r 2  A0 rr                ldy     #>QT_IN
0017D5r 2  20 rr rr             jsr     GOSTROUT2
0017D8r 2               .endif
0017D8r 2  A5 88                lda     CURLIN+1
0017DAr 2  A6 87                ldx     CURLIN
0017DCr 2               
0017DCr 2               ; ----------------------------------------------------------------------------
0017DCr 2               ; PRINT A,X AS DECIMAL INTEGER
0017DCr 2               ; ----------------------------------------------------------------------------
0017DCr 2               LINPRT:
0017DCr 2  85 AD                sta     FAC+1
0017DEr 2  86 AE                stx     FAC+2
0017E0r 2  A2 90                ldx     #$90
0017E2r 2  38                   sec
0017E3r 2  20 rr rr             jsr     FLOAT2
0017E6r 2  20 rr rr             jsr     FOUT
0017E9r 2               GOSTROUT2:
0017E9r 2  4C rr rr             jmp     STROUT
0017ECr 2               
0017ECr 2               ; ----------------------------------------------------------------------------
0017ECr 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
0017ECr 2               ; RETURN WITH (Y,A) POINTING AT STRING
0017ECr 2               ; ----------------------------------------------------------------------------
0017ECr 2               FOUT:
0017ECr 2  A0 01                ldy     #$01
0017EEr 2               
0017EEr 2               ; ----------------------------------------------------------------------------
0017EEr 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
0017EEr 2               ; SO THAT RESULT STRING STARTS AT STACK-1
0017EEr 2               ; (THIS IS USED AS A FLAG)
0017EEr 2               ; ----------------------------------------------------------------------------
0017EEr 2               FOUT1:
0017EEr 2  A9 20                lda     #$20
0017F0r 2  24 B0                bit     FACSIGN
0017F2r 2  10 02                bpl     L3C73
0017F4r 2  A9 2D                lda     #$2D
0017F6r 2               L3C73:
0017F6r 2  99 FF 00             sta     STACK2-1,y
0017F9r 2  85 B0                sta     FACSIGN
0017FBr 2  84 BA                sty     STRNG2
0017FDr 2  C8                   iny
0017FEr 2  A9 30                lda     #$30
001800r 2  A6 AC                ldx     FAC
001802r 2  D0 03                bne     L3C84
001804r 2  4C rr rr             jmp     FOUT4
001807r 2               L3C84:
001807r 2  A9 00                lda     #$00
001809r 2  E0 80                cpx     #$80
00180Br 2  F0 02                beq     L3C8C
00180Dr 2  B0 09                bcs     L3C95
00180Fr 2               L3C8C:
00180Fr 2  A9 rr                lda     #<CON_BILLION
001811r 2  A0 rr                ldy     #>CON_BILLION
001813r 2  20 rr rr             jsr     FMULT
001816r 2               .ifdef CONFIG_SMALL
001816r 2  A9 FA                lda     #-6 ; exponent adjustment
001818r 2               .else
001818r 2                       lda     #-9
001818r 2               .endif
001818r 2               L3C95:
001818r 2  85 A8                sta     INDX
00181Ar 2               ; ----------------------------------------------------------------------------
00181Ar 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
00181Ar 2               ; ----------------------------------------------------------------------------
00181Ar 2               L3C97:
00181Ar 2  A9 rr                lda     #<CON_999999999
00181Cr 2  A0 rr                ldy     #>CON_999999999
00181Er 2  20 rr rr             jsr     FCOMP
001821r 2  F0 1E                beq     L3CBE
001823r 2  10 12                bpl     L3CB4
001825r 2               L3CA2:
001825r 2  A9 rr                lda     #<CON_99999999_9
001827r 2  A0 rr                ldy     #>CON_99999999_9
001829r 2  20 rr rr             jsr     FCOMP
00182Cr 2  F0 02                beq     L3CAD
00182Er 2  10 0E                bpl     L3CBB
001830r 2               L3CAD:
001830r 2  20 rr rr             jsr     MUL10
001833r 2  C6 A8                dec     INDX
001835r 2  D0 EE                bne     L3CA2
001837r 2               L3CB4:
001837r 2  20 rr rr             jsr     DIV10
00183Ar 2  E6 A8                inc     INDX
00183Cr 2  D0 DC                bne     L3C97
00183Er 2               L3CBB:
00183Er 2  20 rr rr             jsr     FADDH
001841r 2               L3CBE:
001841r 2  20 rr rr             jsr     QINT
001844r 2               ; ----------------------------------------------------------------------------
001844r 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001844r 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001844r 2               ;
001844r 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001844r 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001844r 2               ; ----------------------------------------------------------------------------
001844r 2  A2 01                ldx     #$01
001846r 2  A5 A8                lda     INDX
001848r 2  18                   clc
001849r 2  69 07                adc     #3*BYTES_FP-5
00184Br 2  30 09                bmi     L3CD3
00184Dr 2  C9 08                cmp     #3*BYTES_FP-4
00184Fr 2  B0 06                bcs     L3CD4
001851r 2  69 FF                adc     #$FF
001853r 2  AA                   tax
001854r 2  A9 02                lda     #$02
001856r 2               L3CD3:
001856r 2  38                   sec
001857r 2               L3CD4:
001857r 2  E9 02                sbc     #$02
001859r 2  85 A9                sta     EXPON
00185Br 2  86 A8                stx     INDX
00185Dr 2  8A                   txa
00185Er 2  F0 02                beq     L3CDF
001860r 2  10 13                bpl     L3CF2
001862r 2               L3CDF:
001862r 2  A4 BA                ldy     STRNG2
001864r 2  A9 2E                lda     #$2E
001866r 2  C8                   iny
001867r 2  99 FF 00             sta     STACK2-1,y
00186Ar 2  8A                   txa
00186Br 2  F0 06                beq     L3CF0
00186Dr 2  A9 30                lda     #$30
00186Fr 2  C8                   iny
001870r 2  99 FF 00             sta     STACK2-1,y
001873r 2               L3CF0:
001873r 2  84 BA                sty     STRNG2
001875r 2               ; ----------------------------------------------------------------------------
001875r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001875r 2               ; ----------------------------------------------------------------------------
001875r 2               L3CF2:
001875r 2  A0 00                ldy     #$00
001877r 2               LDD3A:
001877r 2  A2 80                ldx     #$80
001879r 2               L3CF6:
001879r 2  A5 AF                lda     FAC_LAST
00187Br 2  18                   clc
00187Cr 2               .ifndef CONFIG_SMALL
00187Cr 2                       adc     DECTBL+3,y
00187Cr 2                       sta     FAC+4
00187Cr 2                       lda     FAC+3
00187Cr 2               .endif
00187Cr 2  79 rr rr             adc     DECTBL+2,y
00187Fr 2  85 AF                sta     FAC+3
001881r 2  A5 AE                lda     FAC+2
001883r 2  79 rr rr             adc     DECTBL+1,y
001886r 2  85 AE                sta     FAC+2
001888r 2  A5 AD                lda     FAC+1
00188Ar 2  79 rr rr             adc     DECTBL,y
00188Dr 2  85 AD                sta     FAC+1
00188Fr 2  E8                   inx
001890r 2  B0 04                bcs     L3D1A
001892r 2  10 E5                bpl     L3CF6
001894r 2  30 02                bmi     L3D1C
001896r 2               L3D1A:
001896r 2  30 E1                bmi     L3CF6
001898r 2               L3D1C:
001898r 2  8A                   txa
001899r 2  90 04                bcc     L3D23
00189Br 2  49 FF                eor     #$FF
00189Dr 2  69 0A                adc     #$0A
00189Fr 2               L3D23:
00189Fr 2  69 2F                adc     #$2F
0018A1r 2  C8                   iny
0018A2r 2  C8                   iny
0018A3r 2  C8                   iny
0018A4r 2               .ifndef CONFIG_SMALL
0018A4r 2                       iny
0018A4r 2               .endif
0018A4r 2  84 95                sty     VARPNT
0018A6r 2  A4 BA                ldy     STRNG2
0018A8r 2  C8                   iny
0018A9r 2  AA                   tax
0018AAr 2  29 7F                and     #$7F
0018ACr 2  99 FF 00             sta     STACK2-1,y
0018AFr 2  C6 A8                dec     INDX
0018B1r 2  D0 06                bne     L3D3E
0018B3r 2  A9 2E                lda     #$2E
0018B5r 2  C8                   iny
0018B6r 2  99 FF 00             sta     STACK2-1,y
0018B9r 2               L3D3E:
0018B9r 2  84 BA                sty     STRNG2
0018BBr 2  A4 95                ldy     VARPNT
0018BDr 2  8A                   txa
0018BEr 2  49 FF                eor     #$FF
0018C0r 2  29 80                and     #$80
0018C2r 2  AA                   tax
0018C3r 2  C0 12                cpy     #DECTBL_END-DECTBL
0018C5r 2               .ifdef CONFIG_CBM_ALL
0018C5r 2                       beq     LDD96
0018C5r 2                       cpy     #$3C ; XXX
0018C5r 2               .endif
0018C5r 2  D0 B2                bne     L3CF6
0018C7r 2               ; ----------------------------------------------------------------------------
0018C7r 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0018C7r 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0018C7r 2               ; DECIMAL POINT.
0018C7r 2               ; ----------------------------------------------------------------------------
0018C7r 2               LDD96:
0018C7r 2  A4 BA                ldy     STRNG2
0018C9r 2               L3D4E:
0018C9r 2  B9 FF 00             lda     STACK2-1,y
0018CCr 2  88                   dey
0018CDr 2  C9 30                cmp     #$30
0018CFr 2  F0 F8                beq     L3D4E
0018D1r 2  C9 2E                cmp     #$2E
0018D3r 2  F0 01                beq     L3D5B
0018D5r 2  C8                   iny
0018D6r 2               L3D5B:
0018D6r 2  A9 2B                lda     #$2B
0018D8r 2  A6 A9                ldx     EXPON
0018DAr 2  F0 2E                beq     L3D8F
0018DCr 2  10 08                bpl     L3D6B
0018DEr 2  A9 00                lda     #$00
0018E0r 2  38                   sec
0018E1r 2  E5 A9                sbc     EXPON
0018E3r 2  AA                   tax
0018E4r 2  A9 2D                lda     #$2D
0018E6r 2               L3D6B:
0018E6r 2  99 01 01             sta     STACK2+1,y
0018E9r 2  A9 45                lda     #$45
0018EBr 2  99 00 01             sta     STACK2,y
0018EEr 2  8A                   txa
0018EFr 2  A2 2F                ldx     #$2F
0018F1r 2  38                   sec
0018F2r 2               L3D77:
0018F2r 2  E8                   inx
0018F3r 2  E9 0A                sbc     #$0A
0018F5r 2  B0 FB                bcs     L3D77
0018F7r 2  69 3A                adc     #$3A
0018F9r 2  99 03 01             sta     STACK2+3,y
0018FCr 2  8A                   txa
0018FDr 2  99 02 01             sta     STACK2+2,y
001900r 2  A9 00                lda     #$00
001902r 2  99 04 01             sta     STACK2+4,y
001905r 2  F0 08                beq     L3D94
001907r 2               FOUT4:
001907r 2  99 FF 00             sta     STACK2-1,y
00190Ar 2               L3D8F:
00190Ar 2  A9 00                lda     #$00
00190Cr 2  99 00 01             sta     STACK2,y
00190Fr 2               L3D94:
00190Fr 2  A9 00                lda     #<STACK2
001911r 2  A0 01                ldy     #>STACK2
001913r 2  60                   rts
001914r 2               
001914r 2               ; ----------------------------------------------------------------------------
001914r 2               CON_HALF:
001914r 2               .ifdef CONFIG_SMALL
001914r 2  80 00 00 00          .byte   $80,$00,$00,$00
001918r 2               .else
001918r 2                       .byte   $80,$00,$00,$00,$00
001918r 2               .endif
001918r 2               
001918r 2               ; ----------------------------------------------------------------------------
001918r 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001918r 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001918r 2               ; ----------------------------------------------------------------------------
001918r 2               DECTBL:
001918r 2               .ifdef CONFIG_SMALL
001918r 2  FE 79 60             .byte   $FE,$79,$60 ; -100000
00191Br 2  00 27 10     		.byte	$00,$27,$10 ; 10000
00191Er 2  FF FC 18     		.byte	$FF,$FC,$18 ; -1000
001921r 2  00 00 64     		.byte	$00,$00,$64 ; 100
001924r 2  FF FF F6     		.byte	$FF,$FF,$F6 ; -10
001927r 2  00 00 01     		.byte	$00,$00,$01 ; 1
00192Ar 2               .else
00192Ar 2               		.byte	$FA,$0A,$1F,$00	; -100000000
00192Ar 2               		.byte	$00,$98,$96,$80	; 10000000
00192Ar 2               		.byte	$FF,$F0,$BD,$C0	; -1000000
00192Ar 2               		.byte	$00,$01,$86,$A0	; 100000
00192Ar 2               		.byte	$FF,$FF,$D8,$F0	; -10000
00192Ar 2               		.byte   $00,$00,$03,$E8	; 1000
00192Ar 2               		.byte	$FF,$FF,$FF,$9C	; -100
00192Ar 2               		.byte   $00,$00,$00,$0A	; 10
00192Ar 2               		.byte	$FF,$FF,$FF,$FF	; -1
00192Ar 2               .endif
00192Ar 2               DECTBL_END:
00192Ar 2               .ifdef CONFIG_CBM_ALL
00192Ar 2               		.byte	$FF,$DF,$0A,$80 ; TI$
00192Ar 2               		.byte	$00,$03,$4B,$C0
00192Ar 2               		.byte	$FF,$FF,$73,$60
00192Ar 2               		.byte	$00,$00,$0E,$10
00192Ar 2               		.byte	$FF,$FF,$FD,$A8
00192Ar 2               		.byte	$00,$00,$00,$3C
00192Ar 2               .endif
00192Ar 2               .ifdef CONFIG_2
00192Ar 2               C_ZERO = CON_HALF + 2
00192Ar 2               .endif
00192Ar 2               
00192Ar 2               ; ----------------------------------------------------------------------------
00192Ar 2               ; "SQR" FUNCTION
00192Ar 2               ; ----------------------------------------------------------------------------
00192Ar 2               SQR:
00192Ar 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00192Dr 2  A9 rr                lda     #<CON_HALF
00192Fr 2  A0 rr                ldy     #>CON_HALF
001931r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001934r 2               
001934r 2               ; ----------------------------------------------------------------------------
001934r 2               ; EXPONENTIATION OPERATION
001934r 2               ;
001934r 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001934r 2               ; ----------------------------------------------------------------------------
001934r 2               FPWRT:
001934r 2  F0 63                beq     EXP
001936r 2  A5 B3                lda     ARG
001938r 2  D0 03                bne     L3DD5
00193Ar 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
00193Dr 2               L3DD5:
00193Dr 2  A2 9C                ldx     #TEMP3
00193Fr 2  A0 00                ldy     #$00
001941r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001944r 2  A5 B7                lda     ARGSIGN
001946r 2  10 0F                bpl     L3DEF
001948r 2  20 rr rr             jsr     INT
00194Br 2  A9 9C                lda     #TEMP3
00194Dr 2  A0 00                ldy     #$00
00194Fr 2  20 rr rr             jsr     FCOMP
001952r 2  D0 03                bne     L3DEF
001954r 2  98                   tya
001955r 2  A4 5B                ldy     CHARAC
001957r 2               L3DEF:
001957r 2  20 rr rr             jsr     MFA
00195Ar 2  98                   tya
00195Br 2  48                   pha
00195Cr 2  20 rr rr             jsr     LOG
00195Fr 2  A9 9C                lda     #TEMP3
001961r 2  A0 00                ldy     #$00
001963r 2  20 rr rr             jsr     FMULT
001966r 2  20 rr rr             jsr     EXP
001969r 2  68                   pla
00196Ar 2  4A                   lsr     a
00196Br 2  90 0A                bcc     L3E0F
00196Dr 2               
00196Dr 2               ; ----------------------------------------------------------------------------
00196Dr 2               ; NEGATE VALUE IN FAC
00196Dr 2               ; ----------------------------------------------------------------------------
00196Dr 2               NEGOP:
00196Dr 2  A5 AC                lda     FAC
00196Fr 2  F0 06                beq     L3E0F
001971r 2  A5 B0                lda     FACSIGN
001973r 2  49 FF                eor     #$FF
001975r 2  85 B0                sta     FACSIGN
001977r 2               L3E0F:
001977r 2  60                   rts
001978r 2               
001978r 2               ; ----------------------------------------------------------------------------
001978r 2               .ifdef CONFIG_SMALL
001978r 2               CON_LOG_E:
001978r 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B
00197Cr 2               POLY_EXP:
00197Cr 2  06           		.byte	$06
00197Dr 2  74 63 90 8C  		.byte	$74,$63,$90,$8C
001981r 2  77 23 0C AB  		.byte	$77,$23,$0C,$AB
001985r 2  7A 1E 94 00  		.byte	$7A,$1E,$94,$00
001989r 2  7C 63 42 80  		.byte	$7C,$63,$42,$80
00198Dr 2  7E 75 FE D0  		.byte	$7E,$75,$FE,$D0
001991r 2  80 31 72 15  		.byte	$80,$31,$72,$15
001995r 2  81 00 00 00  		.byte	$81,$00,$00,$00
001999r 2               .else
001999r 2               CON_LOG_E:
001999r 2                       .byte   $81,$38,$AA,$3B,$29
001999r 2               POLY_EXP:
001999r 2                       .byte   $07
001999r 2               		.byte	$71,$34,$58,$3E,$56
001999r 2               		.byte	$74,$16,$7E,$B3,$1B
001999r 2               		.byte	$77,$2F,$EE,$E3,$85
001999r 2                       .byte   $7A,$1D,$84,$1C,$2A
001999r 2               		.byte	$7C,$63,$59,$58,$0A
001999r 2               		.byte	$7E,$75,$FD,$E7,$C6
001999r 2               		.byte	$80,$31,$72,$18,$10
001999r 2               		.byte	$81,$00,$00,$00,$00
001999r 2               .endif
001999r 2               
001999r 2               ; ----------------------------------------------------------------------------
001999r 2               ; "EXP" FUNCTION
001999r 2               ;
001999r 2               ; FAC = E ^ FAC
001999r 2               ; ----------------------------------------------------------------------------
001999r 2               EXP:
001999r 2  A9 rr                lda     #<CON_LOG_E
00199Br 2  A0 rr                ldy     #>CON_LOG_E
00199Dr 2  20 rr rr             jsr     FMULT
0019A0r 2  A5 B9                lda     FACEXTENSION
0019A2r 2  69 50                adc     #$50
0019A4r 2  90 03                bcc     L3E4E
0019A6r 2  20 rr rr             jsr     INCREMENT_MANTISSA
0019A9r 2               L3E4E:
0019A9r 2  85 A3                sta     ARGEXTENSION
0019ABr 2  20 rr rr             jsr     MAF
0019AEr 2  A5 AC                lda     FAC
0019B0r 2  C9 88                cmp     #$88
0019B2r 2  90 03                bcc     L3E5C
0019B4r 2               L3E59:
0019B4r 2  20 rr rr             jsr     OUTOFRNG
0019B7r 2               L3E5C:
0019B7r 2  20 rr rr             jsr     INT
0019BAr 2  A5 5B                lda     CHARAC
0019BCr 2  18                   clc
0019BDr 2  69 81                adc     #$81
0019BFr 2  F0 F3                beq     L3E59
0019C1r 2  38                   sec
0019C2r 2  E9 01                sbc     #$01
0019C4r 2  48                   pha
0019C5r 2  A2 04                ldx     #BYTES_FP
0019C7r 2               L3E6C:
0019C7r 2  B5 B3                lda     ARG,x
0019C9r 2  B4 AC                ldy     FAC,x
0019CBr 2  95 AC                sta     FAC,x
0019CDr 2  94 B3                sty     ARG,x
0019CFr 2  CA                   dex
0019D0r 2  10 F5                bpl     L3E6C
0019D2r 2  A5 A3                lda     ARGEXTENSION
0019D4r 2  85 B9                sta     FACEXTENSION
0019D6r 2  20 rr rr             jsr     FSUBT
0019D9r 2  20 rr rr             jsr     NEGOP
0019DCr 2  A9 rr                lda     #<POLY_EXP
0019DEr 2  A0 rr                ldy     #>POLY_EXP
0019E0r 2  20 rr rr             jsr     POLYNOMIAL
0019E3r 2  A9 00                lda     #$00
0019E5r 2  85 B8                sta     SGNCPR
0019E7r 2  68                   pla
0019E8r 2  20 rr rr             jsr     ADD_EXPONENTS1
0019EBr 2  60                   rts
0019ECr 2               
0019ECr 2               ; ----------------------------------------------------------------------------
0019ECr 2               ; ODD POLYNOMIAL SUBROUTINE
0019ECr 2               ;
0019ECr 2               ; F(X) = X * P(X^2)
0019ECr 2               ;
0019ECr 2               ; WHERE:  X IS VALUE IN FAC
0019ECr 2               ;	Y,A POINTS AT COEFFICIENT TABLE
0019ECr 2               ;	FIRST BYTE OF COEFF. TABLE IS N
0019ECr 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
0019ECr 2               ;
0019ECr 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
0019ECr 2               ; ----------------------------------------------------------------------------
0019ECr 2               POLYNOMIAL_ODD:
0019ECr 2  85 BA                sta     STRNG2
0019EEr 2  84 BB                sty     STRNG2+1
0019F0r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
0019F3r 2  A9 A4                lda     #TEMP1X
0019F5r 2  20 rr rr             jsr     FMULT
0019F8r 2  20 rr rr             jsr     SERMAIN
0019FBr 2  A9 A4                lda     #TEMP1X
0019FDr 2  A0 00                ldy     #$00
0019FFr 2  4C rr rr             jmp     FMULT
001A02r 2               
001A02r 2               ; ----------------------------------------------------------------------------
001A02r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001A02r 2               ;
001A02r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001A02r 2               ;
001A02r 2               ; WHERE:  X IS VALUE IN FAC
001A02r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001A02r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001A02r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001A02r 2               ; ----------------------------------------------------------------------------
001A02r 2               POLYNOMIAL:
001A02r 2  85 BA                sta     STRNG2
001A04r 2  84 BB                sty     STRNG2+1
001A06r 2               SERMAIN:
001A06r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001A09r 2  B1 BA                lda     (STRNG2),y
001A0Br 2  85 B1                sta     SERLEN
001A0Dr 2  A4 BA                ldy     STRNG2
001A0Fr 2  C8                   iny
001A10r 2  98                   tya
001A11r 2  D0 02                bne     L3EBA
001A13r 2  E6 BB                inc     STRNG2+1
001A15r 2               L3EBA:
001A15r 2  85 BA                sta     STRNG2
001A17r 2  A4 BB                ldy     STRNG2+1
001A19r 2               L3EBE:
001A19r 2  20 rr rr             jsr     FMULT
001A1Cr 2  A5 BA                lda     STRNG2
001A1Er 2  A4 BB                ldy     STRNG2+1
001A20r 2  18                   clc
001A21r 2  69 04                adc     #BYTES_FP
001A23r 2  90 01                bcc     L3ECB
001A25r 2  C8                   iny
001A26r 2               L3ECB:
001A26r 2  85 BA                sta     STRNG2
001A28r 2  84 BB                sty     STRNG2+1
001A2Ar 2  20 rr rr             jsr     FADD
001A2Dr 2  A9 A8                lda     #TEMP2
001A2Fr 2  A0 00                ldy     #$00
001A31r 2  C6 B1                dec     SERLEN
001A33r 2  D0 E4                bne     L3EBE
001A35r 2               RTS19:
001A35r 2  60                   rts
001A36r 2               
001A36r 1               .include "chrget.s"
001A36r 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 C3                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 C4                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001A36r 2               
001A36r 2               ; ----------------------------------------------------------------------------
001A36r 2               ; "RND" FUNCTION
001A36r 2               ; ----------------------------------------------------------------------------
001A36r 2               
001A36r 2               .ifdef KBD
001A36r 2               RND:
001A36r 2                       ldx     #$10
001A36r 2                       jsr     SIGN
001A36r 2                       beq     LFC26
001A36r 2                       bmi     LFC10
001A36r 2                       lda     RNDSEED
001A36r 2                       ldy     RNDSEED+1
001A36r 2               LFBFA:
001A36r 2                       sta     FAC+2
001A36r 2                       sty     FAC+1
001A36r 2               LFBFE:
001A36r 2                       asl     a
001A36r 2                       asl     a
001A36r 2                       eor     FAC+2
001A36r 2                       asl     a
001A36r 2                       eor     FAC+1
001A36r 2                       asl     a
001A36r 2                       asl     a
001A36r 2                       asl     a
001A36r 2                       asl     a
001A36r 2                       eor     FAC+1
001A36r 2                       asl     a
001A36r 2                       rol     FAC+2
001A36r 2                       rol     FAC+1
001A36r 2               LFC10:
001A36r 2                       lda     FAC+2
001A36r 2                       dex
001A36r 2                       bne     LFBFE
001A36r 2                       sta     RNDSEED
001A36r 2                       sta     FAC+3
001A36r 2                       lda     FAC+1
001A36r 2                       sta     RNDSEED+1
001A36r 2                       lda     #$80
001A36r 2                       sta     FAC
001A36r 2                       stx     FACSIGN
001A36r 2                       jmp     NORMALIZE_FAC2
001A36r 2               LFC26:
001A36r 2                       ldy     $03CA
001A36r 2                       lda     $03C7
001A36r 2                       ora     #$01
001A36r 2               GOMOVMF:
001A36r 2                       bne     LFBFA
001A36r 2                       .byte   $F0
001A36r 2               .else
001A36r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001A36r 2               ; (non CONFIG_SMALL)
001A36r 2               CONRND1:
001A36r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001A3Ar 2               CONRND2:
001A3Ar 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001A3Er 2               RND:
001A3Er 2  20 rr rr             jsr     SIGN
001A41r 2               .ifdef CONFIG_CBM_ALL
001A41r 2                       bmi     L3F01
001A41r 2                       bne     LDF63
001A41r 2                       lda     ENTROPY
001A41r 2                       sta     FAC+1
001A41r 2                       lda     ENTROPY+4
001A41r 2                       sta     FAC+2
001A41r 2                       lda     ENTROPY+1
001A41r 2                       sta     FAC+3
001A41r 2                       lda     ENTROPY+5
001A41r 2                       sta     FAC+4
001A41r 2                       jmp     LDF88
001A41r 2               LDF63:
001A41r 2               .else
001A41r 2  AA                   tax
001A42r 2  30 18                bmi     L3F01
001A44r 2               .endif
001A44r 2  A9 D4                lda     #<RNDSEED
001A46r 2  A0 00                ldy     #>RNDSEED
001A48r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001A4Br 2               .ifndef CONFIG_CBM_ALL
001A4Br 2  8A                   txa
001A4Cr 2  F0 E7                beq     RTS19
001A4Er 2               .endif
001A4Er 2  A9 rr                lda     #<CONRND1
001A50r 2  A0 rr                ldy     #>CONRND1
001A52r 2  20 rr rr             jsr     FMULT
001A55r 2  A9 rr                lda     #<CONRND2
001A57r 2  A0 rr                ldy     #>CONRND2
001A59r 2  20 rr rr             jsr     FADD
001A5Cr 2               L3F01:
001A5Cr 2  A6 AF                ldx     FAC_LAST
001A5Er 2  A5 AD                lda     FAC+1
001A60r 2  85 AF                sta     FAC_LAST
001A62r 2  86 AD                stx     FAC+1
001A64r 2               .ifdef CONFIG_CBM_ALL
001A64r 2                       ldx     FAC+2
001A64r 2                       lda     FAC+3
001A64r 2                       sta     FAC+2
001A64r 2                       stx     FAC+3
001A64r 2               LDF88:
001A64r 2               .endif
001A64r 2  A9 00                lda     #$00
001A66r 2  85 B0                sta     FACSIGN
001A68r 2  A5 AC                lda     FAC
001A6Ar 2  85 B9                sta     FACEXTENSION
001A6Cr 2  A9 80                lda     #$80
001A6Er 2  85 AC                sta     FAC
001A70r 2  20 rr rr             jsr     NORMALIZE_FAC2
001A73r 2  A2 D4                ldx     #<RNDSEED
001A75r 2  A0 00                ldy     #>RNDSEED
001A77r 2               GOMOVMF:
001A77r 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001A7Ar 2               .endif
001A7Ar 2               
001A7Ar 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52
00001Cr 2                 .else
00001Cr 2                   .ifdef CONFIG_11
00001Cr 2                       .byte   $80,$4F,$C7,$52,$58
00001Cr 2                   .else
00001Cr 2                       .byte   $80,$4F,$C7,$52,$59
00001Cr 2                   .endif
00001Cr 2                 .endif
00001Cr 2               .endif
00001Cr 2               GENERIC_CHRGET_END:
00001Cr 2               
00001Cr 1               .include "trig.s"
00001Cr 2               .segment "CODE"
001A7Ar 2               
001A7Ar 2               .ifndef SYM1
001A7Ar 2               SIN_COS_TAN_ATN:
001A7Ar 2               ; ----------------------------------------------------------------------------
001A7Ar 2               ; "COS" FUNCTION
001A7Ar 2               ; ----------------------------------------------------------------------------
001A7Ar 2               COS:
001A7Ar 2  A9 rr                lda     #<CON_PI_HALF
001A7Cr 2  A0 rr                ldy     #>CON_PI_HALF
001A7Er 2  20 rr rr             jsr     FADD
001A81r 2               
001A81r 2               ; ----------------------------------------------------------------------------
001A81r 2               ; "SIN" FUNCTION
001A81r 2               ; ----------------------------------------------------------------------------
001A81r 2               SIN:
001A81r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A84r 2  A9 rr                lda     #<CON_PI_DOUB
001A86r 2  A0 rr                ldy     #>CON_PI_DOUB
001A88r 2  A6 B7                ldx     ARGSIGN
001A8Ar 2  20 rr rr             jsr     DIV
001A8Dr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A90r 2  20 rr rr             jsr     INT
001A93r 2  A9 00                lda     #$00
001A95r 2  85 B8                sta     STRNG1
001A97r 2  20 rr rr             jsr     FSUBT
001A9Ar 2               ; ----------------------------------------------------------------------------
001A9Ar 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001A9Ar 2               ;
001A9Ar 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001A9Ar 2               ;
001A9Ar 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001A9Ar 2               ; ----------------------------------------------------------------------------
001A9Ar 2  A9 rr                lda     #<QUARTER
001A9Cr 2  A0 rr                ldy     #>QUARTER
001A9Er 2  20 rr rr             jsr     FSUB
001AA1r 2  A5 B0                lda     FACSIGN
001AA3r 2  48                   pha
001AA4r 2  10 0D                bpl     SIN1
001AA6r 2  20 rr rr             jsr     FADDH
001AA9r 2  A5 B0                lda     FACSIGN
001AABr 2  30 09                bmi     L3F5B
001AADr 2  A5 63                lda     CPRMASK
001AAFr 2  49 FF                eor     #$FF
001AB1r 2  85 63                sta     CPRMASK
001AB3r 2               ; ----------------------------------------------------------------------------
001AB3r 2               ; IF FALL THRU, RANGE IS 0...1/2
001AB3r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001AB3r 2               ; ----------------------------------------------------------------------------
001AB3r 2               SIN1:
001AB3r 2  20 rr rr             jsr     NEGOP
001AB6r 2               ; ----------------------------------------------------------------------------
001AB6r 2               ; IF FALL THRU, RANGE IS -1/2...0
001AB6r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001AB6r 2               ; ----------------------------------------------------------------------------
001AB6r 2               L3F5B:
001AB6r 2  A9 rr                lda     #<QUARTER
001AB8r 2  A0 rr                ldy     #>QUARTER
001ABAr 2  20 rr rr             jsr     FADD
001ABDr 2  68                   pla
001ABEr 2  10 03                bpl     L3F68
001AC0r 2  20 rr rr             jsr     NEGOP
001AC3r 2               L3F68:
001AC3r 2  A9 rr                lda     #<POLY_SIN
001AC5r 2  A0 rr                ldy     #>POLY_SIN
001AC7r 2  4C rr rr             jmp     POLYNOMIAL_ODD
001ACAr 2               
001ACAr 2               ; ----------------------------------------------------------------------------
001ACAr 2               ; "TAN" FUNCTION
001ACAr 2               ;
001ACAr 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001ACAr 2               ; ----------------------------------------------------------------------------
001ACAr 2               TAN:
001ACAr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001ACDr 2  A9 00                lda     #$00
001ACFr 2  85 63                sta     CPRMASK
001AD1r 2  20 rr rr             jsr     SIN
001AD4r 2  A2 9C                ldx     #TEMP3
001AD6r 2  A0 00                ldy     #$00
001AD8r 2  20 rr rr             jsr     GOMOVMF
001ADBr 2  A9 A4                lda     #TEMP1+(5-BYTES_FP)
001ADDr 2  A0 00                ldy     #$00
001ADFr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001AE2r 2  A9 00                lda     #$00
001AE4r 2  85 B0                sta     FACSIGN
001AE6r 2  A5 63                lda     CPRMASK
001AE8r 2  20 rr rr             jsr     TAN1
001AEBr 2  A9 9C                lda     #TEMP3
001AEDr 2  A0 00                ldy     #$00
001AEFr 2  4C rr rr             jmp     FDIV
001AF2r 2               TAN1:
001AF2r 2  48                   pha
001AF3r 2  4C rr rr             jmp     SIN1
001AF6r 2               
001AF6r 2               ; ----------------------------------------------------------------------------
001AF6r 2               .ifdef CONFIG_SMALL
001AF6r 2               CON_PI_HALF:
001AF6r 2  81 49 0F DB          .byte   $81,$49,$0F,$DB
001AFAr 2               CON_PI_DOUB:
001AFAr 2  83 49 0F DB          .byte   $83,$49,$0F,$DB
001AFEr 2               QUARTER:
001AFEr 2  7F 00 00 00          .byte   $7F,$00,$00,$00
001B02r 2               POLY_SIN:
001B02r 2  04 86 1E D7          .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001B06r 2  FB 87 99 26  
001B0Ar 2  65 87 23 34          .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001B0Er 2  58 86 A5 5D  
001B12r 2  E1 83 49 0F          .byte   $E1,$83,$49,$0F,$DB
001B16r 2  DB           
001B17r 2               .else
001B17r 2               CON_PI_HALF:
001B17r 2                       .byte   $81,$49,$0F,$DA,$A2
001B17r 2               CON_PI_DOUB:
001B17r 2                       .byte   $83,$49,$0F,$DA,$A2
001B17r 2               QUARTER:
001B17r 2                       .byte   $7F,$00,$00,$00,$00
001B17r 2               POLY_SIN:
001B17r 2                       .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001B17r 2                       .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001B17r 2                       .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001B17r 2                       .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001B17r 2                 .ifndef CONFIG_11
001B17r 2               ; no easter egg text before BASIC 1.1
001B17r 2                 .elseif !.def(CONFIG_2A)
001B17r 2               ; ASCII encoded easter egg
001B17r 2               MICROSOFT:
001B17r 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001B17r 2                       .byte   $CE,$CA
001B17r 2                 .else
001B17r 2               ; PET encoded easter egg text since CBM2
001B17r 2               MICROSOFT:
001B17r 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001B17r 2                       .byte   $89,$CD
001B17r 2                 .endif
001B17r 2               .endif
001B17r 2               
001B17r 2               .ifndef AIM65
001B17r 2               ; ----------------------------------------------------------------------------
001B17r 2               ; "ATN" FUNCTION
001B17r 2               ; ----------------------------------------------------------------------------
001B17r 2               ATN:
001B17r 2  A5 B0                lda     FACSIGN
001B19r 2  48                   pha
001B1Ar 2  10 03                bpl     L3FDB
001B1Cr 2  20 rr rr             jsr     NEGOP
001B1Fr 2               L3FDB:
001B1Fr 2  A5 AC                lda     FAC
001B21r 2  48                   pha
001B22r 2  C9 81                cmp     #$81
001B24r 2  90 07                bcc     L3FE9
001B26r 2  A9 rr                lda     #<CON_ONE
001B28r 2  A0 rr                ldy     #>CON_ONE
001B2Ar 2  20 rr rr             jsr     FDIV
001B2Dr 2               ; ----------------------------------------------------------------------------
001B2Dr 2               ; 0 <= X <= 1
001B2Dr 2               ; 0 <= ATN(X) <= PI/8
001B2Dr 2               ; ----------------------------------------------------------------------------
001B2Dr 2               L3FE9:
001B2Dr 2  A9 rr                lda     #<POLY_ATN
001B2Fr 2  A0 rr                ldy     #>POLY_ATN
001B31r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001B34r 2  68                   pla
001B35r 2  C9 81                cmp     #$81
001B37r 2  90 07                bcc     L3FFC
001B39r 2  A9 rr                lda     #<CON_PI_HALF
001B3Br 2  A0 rr                ldy     #>CON_PI_HALF
001B3Dr 2  20 rr rr             jsr     FSUB
001B40r 2               L3FFC:
001B40r 2  68                   pla
001B41r 2  10 03                bpl     L4002
001B43r 2  4C rr rr             jmp     NEGOP
001B46r 2               L4002:
001B46r 2  60                   rts
001B47r 2               
001B47r 2               ; ----------------------------------------------------------------------------
001B47r 2               POLY_ATN:
001B47r 2               .ifdef CONFIG_SMALL
001B47r 2  08                   .byte   $08
001B48r 2  78 3A C5 37  		.byte	$78,$3A,$C5,$37
001B4Cr 2  7B 83 A2 5C  		.byte	$7B,$83,$A2,$5C
001B50r 2  7C 2E DD 4D  		.byte	$7C,$2E,$DD,$4D
001B54r 2  7D 99 B0 1E  		.byte	$7D,$99,$B0,$1E
001B58r 2  7D 59 ED 24  		.byte	$7D,$59,$ED,$24
001B5Cr 2  7E 91 72 00  		.byte	$7E,$91,$72,$00
001B60r 2  7E 4C B9 73  		.byte	$7E,$4C,$B9,$73
001B64r 2  7F AA AA 53  		.byte	$7F,$AA,$AA,$53
001B68r 2  81 00 00 00  		.byte	$81,$00,$00,$00
001B6Cr 2               .else
001B6Cr 2                       .byte   $0B
001B6Cr 2               		.byte	$76,$B3,$83,$BD,$D3
001B6Cr 2               		.byte	$79,$1E,$F4,$A6,$F5
001B6Cr 2               		.byte	$7B,$83,$FC,$B0,$10
001B6Cr 2                       .byte   $7C,$0C,$1F,$67,$CA
001B6Cr 2               		.byte	$7C,$DE,$53,$CB,$C1
001B6Cr 2               		.byte	$7D,$14,$64,$70,$4C
001B6Cr 2               		.byte	$7D,$B7,$EA,$51,$7A
001B6Cr 2               		.byte	$7D,$63,$30,$88,$7E
001B6Cr 2               		.byte	$7E,$92,$44,$99,$3A
001B6Cr 2               		.byte	$7E,$4C,$CC,$91,$C7
001B6Cr 2               		.byte	$7F,$AA,$AA,$AA,$13
001B6Cr 2                       .byte   $81,$00,$00,$00,$00
001B6Cr 2               .endif
001B6Cr 2               
001B6Cr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001B6Cr 2               		.byte	$00 ; XXX
001B6Cr 2               .endif
001B6Cr 2               .endif
001B6Cr 2               .endif
001B6Cr 2               
001B6Cr 1               .include "init.s"
001B6Cr 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2                   .ifndef AIM65
000000r 2                     .ifndef SYM1
000000r 2  A9 rr                lda     #<QT_WRITTEN_BY
000002r 2  A0 rr                ldy     #>QT_WRITTEN_BY
000004r 2  20 rr rr             jsr     STROUT
000007r 2                     .endif
000007r 2                   .endif
000007r 2                 .endif
000007r 2               .endif
000007r 2               COLD_START:
000007r 2               .ifdef SYM1
000007r 2                       jsr     ACCESS
000007r 2               .endif
000007r 2               .ifdef KBD
000007r 2                       lda     #<LFD81
000007r 2                       sta     $03A0
000007r 2                       lda     #>LFD81
000007r 2                       sta     $03A1
000007r 2                       lda     #$20
000007r 2                       sta     $0480
000007r 2                       lda     $0352
000007r 2                       sta     $04
000007r 2                       lda     $0353
000007r 2                       sta     $05
000007r 2               .else
000007r 2                 .ifndef CBM2
000007r 2  A2 FF                ldx     #$FF
000009r 2  86 88                stx     CURLIN+1
00000Br 2                 .endif
00000Br 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
00000Br 2                       ldx     #$FB
00000Br 2                 .elseif .def(AIM65)
00000Br 2                       ldx     #$FE
00000Br 2                 .endif
00000Br 2  9A                   txs
00000Cr 2                 .ifndef CONFIG_CBM_ALL
00000Cr 2  A9 rr                lda     #<COLD_START
00000Er 2  A0 rr                ldy     #>COLD_START
000010r 2  85 01                sta     GORESTART+1
000012r 2  84 02                sty     GORESTART+2
000014r 2                   .ifndef AIM65
000014r 2  85 04                sta     GOSTROUT+1
000016r 2  84 05                sty     GOSTROUT+2
000018r 2  A9 rr                lda     #<AYINT
00001Ar 2  A0 rr                ldy     #>AYINT
00001Cr 2  85 06                sta     GOAYINT
00001Er 2  84 07                sty     GOAYINT+1
000020r 2  A9 rr                lda     #<GIVAYF
000022r 2  A0 rr                ldy     #>GIVAYF
000024r 2  85 08                sta     GOGIVEAYF
000026r 2  84 09                sty     GOGIVEAYF+1
000028r 2                   .endif
000028r 2                 .endif
000028r 2  A9 4C                lda     #$4C
00002Ar 2                 .ifdef CONFIG_CBM_ALL
00002Ar 2                       sta     JMPADRS
00002Ar 2                 .endif
00002Ar 2  85 00                sta     GORESTART
00002Cr 2                 .ifdef AIM65
00002Cr 2                       sta     JMPADRS
00002Cr 2                       sta     ATN
00002Cr 2                       sta     GOSTROUT
00002Cr 2                 .else
00002Cr 2                 .ifndef CONFIG_CBM_ALL
00002Cr 2  85 03                sta     GOSTROUT
00002Er 2  85 A1                sta     JMPADRS
000030r 2                 .endif
000030r 2                 .ifdef SYM1
000030r 2                       sta     USR1
000030r 2                       sta     USR3
000030r 2                       sta     USR2
000030r 2                 .endif
000030r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000030r 2  85 0A                sta     USR
000032r 2                 .endif
000032r 2                 .endif
000032r 2               
000032r 2                 .ifndef CONFIG_RAM
000032r 2                   .ifdef APPLE
000032r 2                         lda     #<USR_FUNC
000032r 2                         ldy     #>USR_FUNC
000032r 2                   .else
000032r 2  A9 rr                  lda     #<IQERR
000034r 2  A0 rr                  ldy     #>IQERR
000036r 2                   .endif
000036r 2                   .ifdef AIM65
000036r 2                         sta     ATN+1
000036r 2                         sty     ATN+2
000036r 2                         sta     GOSTROUT+1
000036r 2                         sty     GOSTROUT+2
000036r 2                   .else
000036r 2  85 0B                  sta     USR+1
000038r 2  84 0C                  sty     USR+2
00003Ar 2                     .ifdef SYM1
00003Ar 2                         sta     USR1+1
00003Ar 2                         sty     USR1+2
00003Ar 2                         lda     #<DUMPT
00003Ar 2                         ldy     #>DUMPT
00003Ar 2                         sta     USR2+1
00003Ar 2                         sty     USR2+2
00003Ar 2                         lda     #<L8C78
00003Ar 2                         ldy     #>L8C78
00003Ar 2                         sta     USR3+1
00003Ar 2                         sty     USR3+2
00003Ar 2                     .endif
00003Ar 2                   .endif
00003Ar 2                 .endif
00003Ar 2                 .ifndef CBM1
00003Ar 2  A9 48                lda     #WIDTH
00003Cr 2  85 0F                sta     Z17
00003Er 2  A9 38                lda     #WIDTH2
000040r 2  85 10                sta     Z18
000042r 2                 .endif
000042r 2                 .ifdef EATER
000042r 2                       jsr     LCDINIT
000042r 2                 .endif
000042r 2               .endif
000042r 2               
000042r 2               ; All non-CONFIG_SMALL versions of BASIC have
000042r 2               ; the same bug here: While the number of bytes
000042r 2               ; to be copied is correct for CONFIG_SMALL,
000042r 2               ; it is one byte short on non-CONFIG_SMALL:
000042r 2               ; It seems the "ldx" value below has been
000042r 2               ; hardcoded. So on these configurations,
000042r 2               ; the last byte of GENERIC_RNDSEED, which
000042r 2               ; is 5 bytes instead of 4, does not get copied -
000042r 2               ; which is nothing major, because it is just
000042r 2               ; the least significant 8 bits of the mantissa
000042r 2               ; of the random number seed.
000042r 2               ; KBD added three bytes to CHRGET and removed
000042r 2               ; the random number seed, but only adjusted
000042r 2               ; the number of bytes by adding 3 - this
000042r 2               ; copies four bytes too many, which is no
000042r 2               ; problem.
000042r 2               .ifdef CONFIG_SMALL
000042r 2                 .ifdef KBD
000042r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000042r 2                 .else
000042r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000044r 2                 .endif
000044r 2               .else
000044r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
000044r 2               .endif
000044r 2               L4098:
000044r 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000047r 2  95 BB                sta     CHRGET-1,x
000049r 2  CA                   dex
00004Ar 2  D0 F8                bne     L4098
00004Cr 2               .ifdef CONFIG_2
00004Cr 2                       lda     #$03
00004Cr 2                       sta     DSCLEN
00004Cr 2               .endif
00004Cr 2               .ifndef KBD
00004Cr 2  8A                   txa
00004Dr 2  85 B2                sta     SHIFTSIGNEXT
00004Fr 2                 .ifdef CONFIG_CBM_ALL
00004Fr 2                       sta     CURDVC
00004Fr 2                 .endif
00004Fr 2  85 67                sta     LASTPT+1
000051r 2                 .ifndef AIM65
000051r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000051r 2  85 0D                sta     Z15
000053r 2                 .endif
000053r 2                 .endif
000053r 2                 .ifndef CONFIG_11
000053r 2  85 0E                sta     POSX
000055r 2                 .endif
000055r 2  48                   pha
000056r 2  85 64                sta     Z14
000058r 2                 .ifndef CBM2
000058r 2                  .ifndef AIM65
000058r 2                  .ifndef SYM1
000058r 2                   .ifndef MICROTAN
000058r 2  A9 03                lda     #$03
00005Ar 2  85 A0                sta     DSCLEN
00005Cr 2                   .endif
00005Cr 2                  .endif
00005Cr 2                  .endif
00005Cr 2                   .ifndef CONFIG_11
00005Cr 2  A9 2C                lda     #$2C
00005Er 2  85 12                sta     LINNUM+1
000060r 2                   .endif
000060r 2  20 rr rr             jsr     CRDO
000063r 2                 .endif
000063r 2                 .ifdef CBM2
000063r 2                       inx
000063r 2                       stx     INPUTBUFFER-3
000063r 2                       stx     INPUTBUFFER-4
000063r 2                 .endif
000063r 2                 .ifdef APPLE
000063r 2                       lda     #$01
000063r 2                       sta     INPUTBUFFER-3
000063r 2                       sta     INPUTBUFFER-4
000063r 2                 .endif
000063r 2  A2 68                ldx     #TEMPST
000065r 2  86 65                stx     TEMPPT
000067r 2               .ifndef CONFIG_CBM_ALL
000067r 2  A9 rr                lda     #<QT_MEMORY_SIZE
000069r 2  A0 rr                ldy     #>QT_MEMORY_SIZE
00006Br 2  20 rr rr             jsr     STROUT
00006Er 2                 .ifdef APPLE
00006Er 2                       jsr     INLINX
00006Er 2                 .else
00006Er 2  20 rr rr             jsr     NXIN
000071r 2                 .endif
000071r 2  86 C3                stx     TXTPTR
000073r 2  84 C4                sty     TXTPTR+1
000075r 2  20 BC 00             jsr     CHRGET
000078r 2                 .ifndef AIM65
000078r 2                   .ifndef SYM1
000078r 2  C9 41                cmp     #$41
00007Ar 2  F0 84                beq     PR_WRITTEN_BY
00007Cr 2                   .endif
00007Cr 2                 .endif
00007Cr 2  A8                   tay
00007Dr 2  D0 21                bne     L40EE
00007Fr 2               .endif
00007Fr 2               .ifndef CBM2
00007Fr 2  A9 00                lda     #<RAMSTART2
000081r 2               .endif
000081r 2  A0 03                ldy     #>RAMSTART2
000083r 2               .ifdef CONFIG_2
000083r 2                       sta     TXTTAB
000083r 2                       sty     TXTTAB+1
000083r 2               .endif
000083r 2  85 11                sta     LINNUM
000085r 2  84 12                sty     LINNUM+1
000087r 2               .ifdef CBM2
000087r 2               		tay
000087r 2               .else
000087r 2  A0 00                ldy     #$00
000089r 2               .endif
000089r 2               L40D7:
000089r 2  E6 11                inc     LINNUM
00008Br 2  D0 02                bne     L40DD
00008Dr 2  E6 12                inc     LINNUM+1
00008Fr 2               .ifdef CBM1
00008Fr 2               ; CBM: hard RAM top limit is $8000
00008Fr 2                       lda     LINNUM+1
00008Fr 2                       cmp     #$80
00008Fr 2                       beq     L40FA
00008Fr 2               .endif
00008Fr 2               .ifdef CBM2
00008Fr 2               ; optimized version of the CBM1 code
00008Fr 2                       bmi     L40FA
00008Fr 2               .endif
00008Fr 2               .if .def(AIM65)
00008Fr 2               ; AIM65: hard RAM top limit is $A000
00008Fr 2                       lda     LINNUM+1
00008Fr 2                       cmp     #$A0
00008Fr 2                       beq     L40FA
00008Fr 2               .endif
00008Fr 2               L40DD:
00008Fr 2               .ifdef CONFIG_2
00008Fr 2                       lda     #$55 ; 01010101 / 10101010
00008Fr 2               .else
00008Fr 2  A9 92                lda     #$92 ; 10010010 / 00100100
000091r 2               .endif
000091r 2  91 11                sta     (LINNUM),y
000093r 2  D1 11                cmp     (LINNUM),y
000095r 2  D0 15                bne     L40FA
000097r 2  0A                   asl     a
000098r 2  91 11                sta     (LINNUM),y
00009Ar 2  D1 11                cmp     (LINNUM),y
00009Cr 2               .ifdef CONFIG_CBM_ALL
00009Cr 2                       beq     L40D7
00009Cr 2               .else
00009Cr 2                 .ifndef CONFIG_11
00009Cr 2  F0 EB                beq     L40D7; old: faster
00009Er 2  D0 0C                bne     L40FA
0000A0r 2                 .else
0000A0r 2                       bne     L40FA; new: slower
0000A0r 2                       beq     L40D7
0000A0r 2                 .endif
0000A0r 2               L40EE:
0000A0r 2  20 C2 00             jsr     CHRGOT
0000A3r 2  20 rr rr             jsr     LINGET
0000A6r 2  A8                   tay
0000A7r 2  F0 03                beq     L40FA
0000A9r 2  4C rr rr             jmp     SYNERR
0000ACr 2               .endif
0000ACr 2               L40FA:
0000ACr 2  A5 11                lda     LINNUM
0000AEr 2  A4 12                ldy     LINNUM+1
0000B0r 2  85 85                sta     MEMSIZ
0000B2r 2  84 86                sty     MEMSIZ+1
0000B4r 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
0000B4r 2  85 81                sta     FRETOP
0000B6r 2  84 82                sty     FRETOP+1
0000B8r 2               .endif
0000B8r 2               L4106:
0000B8r 2               .ifndef CONFIG_CBM_ALL
0000B8r 2                 .ifdef APPLE
0000B8r 2                       lda     #$FF
0000B8r 2                       jmp     L2829
0000B8r 2                       .word	STROUT ; PATCH!
0000B8r 2                       jsr     NXIN
0000B8r 2                 .else
0000B8r 2  A9 rr                lda     #<QT_TERMINAL_WIDTH
0000BAr 2  A0 rr                ldy     #>QT_TERMINAL_WIDTH
0000BCr 2  20 rr rr             jsr     STROUT
0000BFr 2  20 rr rr             jsr     NXIN
0000C2r 2                 .endif
0000C2r 2  86 C3                stx     TXTPTR
0000C4r 2  84 C4                sty     TXTPTR+1
0000C6r 2  20 BC 00             jsr     CHRGET
0000C9r 2  A8                   tay
0000CAr 2  F0 1C                beq     L4136
0000CCr 2  20 rr rr             jsr     LINGET
0000CFr 2  A5 12                lda     LINNUM+1
0000D1r 2  D0 E5                bne     L4106
0000D3r 2  A5 11                lda     LINNUM
0000D5r 2  C9 10                cmp     #$10
0000D7r 2  90 DF                bcc     L4106
0000D9r 2               L2829:
0000D9r 2  85 0F                sta     Z17
0000DBr 2               L4129:
0000DBr 2                 .ifdef AIM65
0000DBr 2                       sbc     #$0A
0000DBr 2                 .else
0000DBr 2  E9 0E                sbc     #$0E
0000DDr 2                 .endif
0000DDr 2  B0 FC                bcs     L4129
0000DFr 2  49 FF                eor     #$FF
0000E1r 2                 .ifdef AIM65
0000E1r 2                       sbc     #$08
0000E1r 2                 .else
0000E1r 2  E9 0C                sbc     #$0C
0000E3r 2                 .endif
0000E3r 2  18                   clc
0000E4r 2  65 0F                adc     Z17
0000E6r 2  85 10                sta     Z18
0000E8r 2               .endif
0000E8r 2               L4136:
0000E8r 2               .ifdef CONFIG_RAM
0000E8r 2                       lda     #<QT_WANT
0000E8r 2                       ldy     #>QT_WANT
0000E8r 2                       jsr     STROUT
0000E8r 2                       jsr     NXIN
0000E8r 2                       stx     TXTPTR
0000E8r 2                       sty     TXTPTR+1
0000E8r 2                       jsr     CHRGET
0000E8r 2                       ldx     #<RAMSTART1
0000E8r 2                       ldy     #>RAMSTART1
0000E8r 2                       cmp     #'Y'
0000E8r 2                       beq     L4183
0000E8r 2                       cmp     #'A'
0000E8r 2                       beq     L4157
0000E8r 2                       cmp     #'N'
0000E8r 2                       bne     L4136
0000E8r 2               L4157:
0000E8r 2                       ldx     #<IQERR
0000E8r 2                       ldy     #>IQERR
0000E8r 2                       stx     UNFNC_ATN
0000E8r 2                       sty     UNFNC_ATN+1
0000E8r 2                       ldx     #<ATN	; overwrite starting
0000E8r 2                       ldy     #>ATN	; with ATN
0000E8r 2                       cmp     #'A'
0000E8r 2                       beq     L4183
0000E8r 2                       ldx     #<IQERR
0000E8r 2                       ldy     #>IQERR
0000E8r 2                       stx     UNFNC_COS
0000E8r 2                       sty     UNFNC_COS+1
0000E8r 2                       stx     UNFNC_TAN
0000E8r 2                       sty     UNFNC_TAN+1
0000E8r 2                       stx     UNFNC_SIN
0000E8r 2                       sty     UNFNC_SIN+1
0000E8r 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000E8r 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000E8r 2               L4183:
0000E8r 2               .else
0000E8r 2  A2 00                ldx     #<RAMSTART2
0000EAr 2  A0 03                ldy     #>RAMSTART2
0000ECr 2               .endif
0000ECr 2  86 79                stx     TXTTAB
0000EEr 2  84 7A                sty     TXTTAB+1
0000F0r 2  A0 00                ldy     #$00
0000F2r 2  98                   tya
0000F3r 2  91 79                sta     (TXTTAB),y
0000F5r 2  E6 79                inc     TXTTAB
0000F7r 2               .ifndef CBM2
0000F7r 2  D0 02                bne     L4192
0000F9r 2  E6 7A                inc     TXTTAB+1
0000FBr 2               L4192:
0000FBr 2               .endif
0000FBr 2               .if CONFIG_SCRTCH_ORDER = 1
0000FBr 2                       jsr     SCRTCH
0000FBr 2               .endif
0000FBr 2  A5 79                lda     TXTTAB
0000FDr 2  A4 7A                ldy     TXTTAB+1
0000FFr 2  20 rr rr             jsr     REASON
000102r 2               .ifdef CBM2
000102r 2                       lda     #<QT_BASIC
000102r 2                       ldy     #>QT_BASIC
000102r 2                       jsr     STROUT
000102r 2               .else
000102r 2  20 rr rr             jsr     CRDO
000105r 2               .endif
000105r 2  A5 85                lda     MEMSIZ
000107r 2  38                   sec
000108r 2  E5 79                sbc     TXTTAB
00010Ar 2  AA                   tax
00010Br 2  A5 86                lda     MEMSIZ+1
00010Dr 2  E5 7A                sbc     TXTTAB+1
00010Fr 2  20 rr rr             jsr     LINPRT
000112r 2  A9 rr                lda     #<QT_BYTES_FREE
000114r 2  A0 rr                ldy     #>QT_BYTES_FREE
000116r 2  20 rr rr             jsr     STROUT
000119r 2               .if CONFIG_SCRTCH_ORDER = 2
000119r 2                       jsr     SCRTCH
000119r 2               .endif
000119r 2               .ifdef CONFIG_CBM_ALL
000119r 2                       jmp     RESTART
000119r 2               .elseif .def(AIM65)
000119r 2                       lda     #<CRDO
000119r 2                       ldy     #>CRDO
000119r 2                       sta     GORESTART+1
000119r 2                       sty     GORESTART+2
000119r 2                       jmp     RESTART
000119r 2               .else
000119r 2  A9 rr                lda     #<STROUT
00011Br 2  A0 rr                ldy     #>STROUT
00011Dr 2  85 04                sta     GOSTROUT+1
00011Fr 2  84 05                sty     GOSTROUT+2
000121r 2                 .if CONFIG_SCRTCH_ORDER = 3
000121r 2  20 rr rr              jsr     SCRTCH
000124r 2                 .endif
000124r 2  A9 rr                lda     #<RESTART
000126r 2  A0 rr                ldy     #>RESTART
000128r 2  85 01                sta     GORESTART+1
00012Ar 2  84 02                sty     GORESTART+2
00012Cr 2  6C 01 00             jmp     (GORESTART+1)
00012Fr 2               .endif
00012Fr 2               
00012Fr 2                 .if .def(CONFIG_RAM) || .def(OSI)
00012Fr 2               ; OSI is compiled for ROM, but includes
00012Fr 2               ; this unused string
00012Fr 2               QT_WANT:
00012Fr 2  57 41 4E 54          .byte   "WANT SIN-COS-TAN-ATN"
000133r 2  20 53 49 4E  
000137r 2  2D 43 4F 53  
000143r 2  00                   .byte   0
000144r 2                 .endif
000144r 2               QT_WRITTEN_BY:
000144r 2                 .ifndef CONFIG_CBM_ALL
000144r 2                 .if !(.def(AIM65) || .def(SYM1))
000144r 2                   .ifdef APPLE
000144r 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
000144r 2               		.byte	CR,0
000144r 2                   .else
000144r 2  0D 0A 0C             .byte   CR,LF,$0C ; FORM FEED
000147r 2                     .ifndef CONFIG_11
000147r 2  57 52 49 54          .byte   "WRITTEN BY RICHARD W. WEILAND."
00014Br 2  54 45 4E 20  
00014Fr 2  42 59 20 52  
000165r 2                     .else
000165r 2                       .byte   "WRITTEN BY WEILAND & GATES"
000165r 2                     .endif
000165r 2  0D 0A 00             .byte   CR,LF,0
000168r 2                   .endif
000168r 2                  .endif
000168r 2               QT_MEMORY_SIZE:
000168r 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
00016Cr 2  52 59 20 53  
000170r 2  49 5A 45     
000173r 2  00                   .byte   0
000174r 2               QT_TERMINAL_WIDTH:
000174r 2                   .if !(.def(AIM65) || .def(SYM1))
000174r 2  54 45 52 4D          .byte   "TERMINAL "
000178r 2  49 4E 41 4C  
00017Cr 2  20           
00017Dr 2                   .endif
00017Dr 2  57 49 44 54          .byte   "WIDTH"
000181r 2  48           
000182r 2  00                   .byte   0
000183r 2                 .endif
000183r 2               QT_BYTES_FREE:
000183r 2  20 42 59 54          .byte   " BYTES FREE"
000187r 2  45 53 20 46  
00018Br 2  52 45 45     
00018Er 2                 .ifdef CBM1
00018Er 2                 .elseif .def(CBM2)
00018Er 2                       .byte   CR,0
00018Er 2                 .elseif .def(APPLE)
00018Er 2                       .byte   0
00018Er 2                 .else
00018Er 2  0D 0A 0D 0A          .byte   CR,LF,CR,LF
000192r 2                 .endif
000192r 2               QT_BASIC:
000192r 2                 .ifdef OSI
000192r 2  4F 53 49 20          .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
000196r 2  36 35 30 32  
00019Ar 2  20 42 41 53  
0001B4r 2                 .endif
0001B4r 2                 .ifdef KIM
0001B4r 2                       .byte   "MOS TECH 6502 BASIC V1.1"
0001B4r 2                 .endif
0001B4r 2                 .ifdef MICROTAN
0001B4r 2                       .byte   "MICROTAN BASIC"
0001B4r 2                 .endif
0001B4r 2                 .ifdef AIM65
0001B4r 2                       .byte   "  AIM 65 BASIC V1.1"
0001B4r 2                 .endif
0001B4r 2                 .ifdef SYM1
0001B4r 2                       .byte   "BASIC V1.1"
0001B4r 2                 .endif
0001B4r 2                 .ifdef CBM1
0001B4r 2                       .byte   $13 ; HOME
0001B4r 2                       .byte   "*** COMMODORE BASIC ***"
0001B4r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
0001B4r 2                 .endif
0001B4r 2                 .ifdef CBM2
0001B4r 2                       .byte   "### COMMODORE BASIC ###"
0001B4r 2                       .byte   CR,CR,0
0001B4r 2                 .endif
0001B4r 2                 .ifdef APPLE
0001B4r 2                       .byte   LF,CR,LF
0001B4r 2               		.byte	"APPLE BASIC V1.1"
0001B4r 2                 .endif
0001B4r 2                 .ifndef CONFIG_CBM_ALL
0001B4r 2  0D 0A                .byte   CR,LF
0001B6r 2                   .ifdef MICROTAN
0001B6r 2                       .byte   "(C) 1980 MICROSOFT"
0001B6r 2                   .elseif .def(AIM65)
0001B6r 2                       .byte   0
0001B6r 2                       .byte   "(C) 1978 MICROSOFT"
0001B6r 2                   .elseif .def(SYM1)
0001B6r 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
0001B6r 2                   .else
0001B6r 2  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
0001BAr 2  52 49 47 48  
0001BEr 2  54 20 31 39  
0001D5r 2                   .endif
0001D5r 2  0D 0A                .byte   CR,LF
0001D7r 2                     .ifndef AIM65
0001D7r 2  00                   .byte   0
0001D8r 2                     .endif
0001D8r 2                 .endif
0001D8r 2               .endif
0001D8r 2               
0001D8r 1               .include "extra.s"
0001D8r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef MICROTAN
000000r 2               .include "microtan_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef AIM65
000000r 2               .include "aim65_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef SYM1
000000r 2                       .byte   0,0,0
000000r 2               .endif
000000r 2               
000000r 2               .ifdef EATER
000000r 2               .include "bios.s"
000000r 2               .endif
000000r 2               
000000r 1               .include "lcd.s"
000000r 2               .segment "CODE"
001B6Cr 2               .ifdef EATER
001B6Cr 2               PORTB = $6000
001B6Cr 2               DDRB = $6002
001B6Cr 2               E  = %01000000
001B6Cr 2               RW = %00100000
001B6Cr 2               RS = %00010000
001B6Cr 2               
001B6Cr 2               lcd_wait:
001B6Cr 2                 pha
001B6Cr 2                 lda #%11110000  ; LCD data is input
001B6Cr 2                 sta DDRB
001B6Cr 2               lcdbusy:
001B6Cr 2                 lda #RW
001B6Cr 2                 sta PORTB
001B6Cr 2                 lda #(RW | E)
001B6Cr 2                 sta PORTB
001B6Cr 2                 lda PORTB       ; Read high nibble
001B6Cr 2                 pha             ; and put on stack since it has the busy flag
001B6Cr 2                 lda #RW
001B6Cr 2                 sta PORTB
001B6Cr 2                 lda #(RW | E)
001B6Cr 2                 sta PORTB
001B6Cr 2                 lda PORTB       ; Read low nibble
001B6Cr 2                 pla             ; Get high nibble off stack
001B6Cr 2                 and #%00001000
001B6Cr 2                 bne lcdbusy
001B6Cr 2               
001B6Cr 2                 lda #RW
001B6Cr 2                 sta PORTB
001B6Cr 2                 lda #%11111111  ; LCD data is output
001B6Cr 2                 sta DDRB
001B6Cr 2                 pla
001B6Cr 2                 rts
001B6Cr 2               
001B6Cr 2               LCDINIT:
001B6Cr 2                 lda #$ff ; Set all pins on port B to output
001B6Cr 2                 sta DDRB
001B6Cr 2               
001B6Cr 2                 lda #%00000011 ; Set 8-bit mode
001B6Cr 2                 sta PORTB
001B6Cr 2                 ora #E
001B6Cr 2                 sta PORTB
001B6Cr 2                 and #%00001111
001B6Cr 2                 sta PORTB
001B6Cr 2               
001B6Cr 2                 lda #%00000011 ; Set 8-bit mode
001B6Cr 2                 sta PORTB
001B6Cr 2                 ora #E
001B6Cr 2                 sta PORTB
001B6Cr 2                 and #%00001111
001B6Cr 2                 sta PORTB
001B6Cr 2               
001B6Cr 2                 lda #%00000011 ; Set 8-bit mode
001B6Cr 2                 sta PORTB
001B6Cr 2                 ora #E
001B6Cr 2                 sta PORTB
001B6Cr 2                 and #%00001111
001B6Cr 2                 sta PORTB
001B6Cr 2               
001B6Cr 2                 ; Okay, now we're really in 8-bit mode.
001B6Cr 2                 ; Command to get to 4-bit mode ought to work now
001B6Cr 2                 lda #%00000010 ; Set 4-bit mode
001B6Cr 2                 sta PORTB
001B6Cr 2                 ora #E
001B6Cr 2                 sta PORTB
001B6Cr 2                 and #%00001111
001B6Cr 2                 sta PORTB
001B6Cr 2               
001B6Cr 2                 lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
001B6Cr 2                 jsr lcd_instruction
001B6Cr 2                 lda #%00001110 ; Display on; cursor on; blink off
001B6Cr 2                 jsr lcd_instruction
001B6Cr 2                 lda #%00000110 ; Increment and shift cursor; don't shift display
001B6Cr 2                 jsr lcd_instruction
001B6Cr 2                 lda #%00000001 ; Clear display
001B6Cr 2                 jsr lcd_instruction
001B6Cr 2                 rts
001B6Cr 2               
001B6Cr 2               
001B6Cr 2               LCDCMD:
001B6Cr 2                 jsr GETBYT
001B6Cr 2                 txa
001B6Cr 2               lcd_instruction:
001B6Cr 2                 jsr lcd_wait
001B6Cr 2                 pha
001B6Cr 2                 lsr
001B6Cr 2                 lsr
001B6Cr 2                 lsr
001B6Cr 2                 lsr            ; Send high 4 bits
001B6Cr 2                 sta PORTB
001B6Cr 2                 ora #E         ; Set E bit to send instruction
001B6Cr 2                 sta PORTB
001B6Cr 2                 eor #E         ; Clear E bit
001B6Cr 2                 sta PORTB
001B6Cr 2                 pla
001B6Cr 2                 and #%00001111 ; Send low 4 bits
001B6Cr 2                 sta PORTB
001B6Cr 2                 ora #E         ; Set E bit to send instruction
001B6Cr 2                 sta PORTB
001B6Cr 2                 eor #E         ; Clear E bit
001B6Cr 2                 sta PORTB
001B6Cr 2                 rts
001B6Cr 2               
001B6Cr 2               LCDPRINT:
001B6Cr 2                 jsr GETBYT
001B6Cr 2                 txa
001B6Cr 2                 jsr lcd_wait
001B6Cr 2                 pha
001B6Cr 2                 lsr
001B6Cr 2                 lsr
001B6Cr 2                 lsr
001B6Cr 2                 lsr             ; Send high 4 bits
001B6Cr 2                 ora #RS         ; Set RS
001B6Cr 2                 sta PORTB
001B6Cr 2                 ora #E          ; Set E bit to send instruction
001B6Cr 2                 sta PORTB
001B6Cr 2                 eor #E          ; Clear E bit
001B6Cr 2                 sta PORTB
001B6Cr 2                 pla
001B6Cr 2                 and #%00001111  ; Send low 4 bits
001B6Cr 2                 ora #RS         ; Set RS
001B6Cr 2                 sta PORTB
001B6Cr 2                 ora #E          ; Set E bit to send instruction
001B6Cr 2                 sta PORTB
001B6Cr 2                 eor #E          ; Clear E bit
001B6Cr 2                 sta PORTB
001B6Cr 2                 rts
001B6Cr 2               
001B6Cr 2               .endif
001B6Cr 2               
001B6Cr 1               
