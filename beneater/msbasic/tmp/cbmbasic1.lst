ca65 V2.19 - Git 3dfe03300
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 3               ; configuration
000000r 3               ; oldest known version, no CONFIG_n
000000r 3               
000000r 3               CONFIG_CBM_ALL := 1
000000r 3               CONFIG_CBM1_PATCHES := 1 ; ** don't turn off! **
000000r 3               
000000r 3               CONFIG_DATAFLG := 1
000000r 3               CONFIG_FILE := 1; support PRINT#, INPUT#, GET#, CMD
000000r 3               CONFIG_NO_CR := 1; terminal doesn't need explicit CRs on line ends
000000r 3               CONFIG_NO_LINE_EDITING := 1; support for "@", "_", BEL etc.
000000r 3               CONFIG_PRINTNULLS := 1; whether PRINTNULLS does anything
000000r 3               CONFIG_SCRTCH_ORDER := 2
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $04
000000r 3               ZP_START3 = $5A
000000r 3               ZP_START4 = $65
000000r 3               
000000r 3               ; extra ZP variables
000000r 3               CURDVC			:= $0003
000000r 3               TISTR			:= $0200
000000r 3               Z96				:= $020C
000000r 3               USR				:= GORESTART
000000r 3               
000000r 3               ; constants
000000r 3               SPACE_FOR_GOSUB := $36
000000r 3               STACK_TOP		:= $FC
000000r 3               NULL_MAX		:= $0A
000000r 3               MAX_EXPON		:= 12 ; XXX override
000000r 3               
000000r 3               RAMSTART2		:= $0400
000000r 3               
000000r 3               ; magic memory locations
000000r 3               ENTROPY = $9044
000000r 3               
000000r 3               ; monitor functions
000000r 3               OPEN	:= $FFC0
000000r 3               CLOSE	:= $FFC3
000000r 3               CHKIN	:= $FFC6
000000r 3               CHKOUT	:= $FFC9
000000r 3               CLRCH	:= $FFCC
000000r 3               CHRIN	:= $FFCF
000000r 3               CHROUT	:= $FFD2
000000r 3               LOAD	:= $FFD5
000000r 3               SAVE	:= $FFD8
000000r 3               VERIFY	:= $FFDB
000000r 3               SYS		:= $FFDE
000000r 3               ISCNTC	:= $FFE1
000000r 3               GETIN	:= $FFE4
000000r 3               CLALL	:= $FFE7
000000r 3               LE7F3	:= $E7F3; for CBM1
000000r 3               MONCOUT	:= CHROUT
000000r 3               MONRDKEY := GETIN
000000r 3               
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(eater)
000000r 2               EATER := 1
000000r 2               .include "defines_eater.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
000004  2               Z15:
000004  2  xx           	.res 1
000005  2               .ifndef POSX; allow override
000005  2               POSX:
000005  2               .endif
000005  2  xx           	.res 1
000006  2               .ifndef Z17; allow override
000006  2               Z17:
000006  2               .endif
000006  2  xx           	.res 1
000007  2               .ifndef Z18; allow override
000007  2               Z18:
000007  2               .endif
000007  2  xx           	.res 1
000008  2               LINNUM:
000008  2               .ifndef TXPSV; allow override
000008  2               TXPSV:
000008  2               .endif
000008  2  xx xx        	.res 2
00000A  2               .ifndef INPUTBUFFER; allow override
00000A  2               INPUTBUFFER:
00000A  2               .endif
00000A  2               
00000A  2               .org ZP_START3
00005A  2               
00005A  2               CHARAC:
00005A  2  xx           	.res 1
00005B  2               ENDCHR:
00005B  2  xx           	.res 1
00005C  2               EOLPNTR:
00005C  2  xx           	.res 1
00005D  2               DIMFLG:
00005D  2  xx           	.res 1
00005E  2               VALTYP:
00005E  2               .ifdef CONFIG_SMALL
00005E  2               	.res 1
00005E  2               .else
00005E  2  xx xx        	.res 2
000060  2               .endif
000060  2               DATAFLG:
000060  2  xx           	.res 1
000061  2               SUBFLG:
000061  2  xx           	.res 1
000062  2               INPUTFLG:
000062  2  xx           	.res 1
000063  2               CPRMASK:
000063  2  xx           	.res 1
000064  2               Z14:
000064  2  xx           	.res 1
000065  2               
000065  2               .org ZP_START4
000065  2               
000065  2               TEMPPT:
000065  2  xx           	.res 1
000066  2               LASTPT:
000066  2  xx xx        	.res 2
000068  2               TEMPST:
000068  2  xx xx xx xx  	.res 9
00006C  2  xx xx xx xx  
000070  2  xx           
000071  2               INDEX:
000071  2  xx xx        	.res 2
000073  2               DEST:
000073  2  xx xx        	.res 2
000075  2               RESULT:
000075  2  xx xx xx xx  	.res BYTES_FP
000079  2  xx           
00007A  2               RESULT_LAST = RESULT + BYTES_FP-1
00007A  2               TXTTAB:
00007A  2  xx xx        	.res 2
00007C  2               VARTAB:
00007C  2  xx xx        	.res 2
00007E  2               ARYTAB:
00007E  2  xx xx        	.res 2
000080  2               STREND:
000080  2  xx xx        	.res 2
000082  2               FRETOP:
000082  2  xx xx        	.res 2
000084  2               FRESPC:
000084  2  xx xx        	.res 2
000086  2               MEMSIZ:
000086  2  xx xx        	.res 2
000088  2               CURLIN:
000088  2  xx xx        	.res 2
00008A  2               OLDLIN:
00008A  2  xx xx        	.res 2
00008C  2               OLDTEXT:
00008C  2  xx xx        	.res 2
00008E  2               Z8C:
00008E  2  xx xx        	.res 2
000090  2               DATPTR:
000090  2  xx xx        	.res 2
000092  2               INPTR:
000092  2  xx xx        	.res 2
000094  2               VARNAM:
000094  2  xx xx        	.res 2
000096  2               VARPNT:
000096  2  xx xx        	.res 2
000098  2               FORPNT:
000098  2  xx xx        	.res 2
00009A  2               LASTOP:
00009A  2  xx xx        	.res 2
00009C  2               CPRTYP:
00009C  2  xx           	.res 1
00009D  2               FNCNAM:
00009D  2               TEMP3:
00009D  2  xx xx        	.res 2
00009F  2               DSCPTR:
00009F  2               .ifdef CONFIG_SMALL
00009F  2               		.res 2
00009F  2               .else
00009F  2  xx xx xx     		.res 3
0000A2  2               .endif
0000A2  2               DSCLEN:
0000A2  2  xx xx        	.res 2
0000A4  2               .ifndef JMPADRS ; allow override
0000A4  2               JMPADRS			:= DSCLEN + 1
0000A4  2               .endif
0000A4  2               Z52:
0000A4  2  xx           	.res 1
0000A5  2               ARGEXTENSION:
0000A5  2               .ifndef CONFIG_SMALL
0000A5  2  xx           	.res 1
0000A6  2               .endif
0000A6  2               TEMP1:
0000A6  2  xx           	.res 1
0000A7  2               HIGHDS:
0000A7  2  xx xx        	.res 2
0000A9  2               HIGHTR:
0000A9  2  xx xx        	.res 2
0000AB  2               .ifndef CONFIG_SMALL
0000AB  2               TEMP2:
0000AB  2  xx           	.res 1
0000AC  2               .endif
0000AC  2               INDX:
0000AC  2               TMPEXP:
0000AC  2               .ifdef CONFIG_SMALL
0000AC  2               TEMP2:
0000AC  2               .endif
0000AC  2  xx           	.res 1
0000AD  2               EXPON:
0000AD  2  xx           	.res 1
0000AE  2               LOWTR:
0000AE  2               .ifndef LOWTRX ; allow override
0000AE  2               LOWTRX:
0000AE  2               .endif
0000AE  2  xx           	.res 1
0000AF  2               EXPSGN:
0000AF  2  xx           	.res 1
0000B0  2               FAC:
0000B0  2  xx xx xx xx  	.res BYTES_FP
0000B4  2  xx           
0000B5  2               FAC_LAST = FAC + BYTES_FP-1
0000B5  2               FACSIGN:
0000B5  2  xx           	.res 1
0000B6  2               SERLEN:
0000B6  2  xx           	.res 1
0000B7  2               SHIFTSIGNEXT:
0000B7  2  xx           	.res 1
0000B8  2               ARG:
0000B8  2  xx xx xx xx  	.res BYTES_FP
0000BC  2  xx           
0000BD  2               ARG_LAST = ARG + BYTES_FP-1
0000BD  2               ARGSIGN:
0000BD  2  xx           	.res 1
0000BE  2               STRNG1:
0000BE  2  xx xx        	.res 2
0000C0  2               SGNCPR = STRNG1
0000C0  2               FACEXTENSION = STRNG1+1
0000C0  2               STRNG2:
0000C0  2  xx xx        	.res 2
0000C2  2               .ifdef AIM65
0000C2  2               ATN:
0000C2  2               	.res 3
0000C2  2               ZBE:
0000C2  2               	.res 1
0000C2  2               .endif
0000C2  2               .ifdef SYM1
0000C2  2               USR1:
0000C2  2               	.res 3
0000C2  2               USR2:
0000C2  2               	.res 3
0000C2  2               USR3:
0000C2  2               	.res 3
0000C2  2               .endif
0000C2  2               CHRGET:
0000C2  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000C2  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000C2  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000C2  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000C2  2               
0000C2  2               
0000C2  2               
0000C2  1               
0000C2  1               .include "header.s"
0000C2  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2                       jmp     COLD_START
000000r 2                       jmp     RESTART
000000r 2                       .word   AYINT,GIVAYF
000000r 2               .endif
000000r 2               .ifdef SYM1
000000r 2                       jmp     PR_WRITTEN_BY
000000r 2               .endif
000000r 2               .ifdef EATER
000000r 2                       jmp COLD_START
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2  rr rr 49 4E  		keyword_rts "INPUT#", INPUTH
000008r 2  50 55 54 A3  
00000Cr 2  xx           
000005r 2               .endif
000005r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000009r 2  50 55 D4 xx  
000006r 2  rr rr 44 49  		keyword_rts "DIM", DIM
00000Ar 2  CD xx        
000007r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Br 2  41 C4 xx     
000008r 2               .ifdef APPLE
000008r 2               		keyword_rts "PLT", PLT
000008r 2               .else
000008r 2  rr rr 4C 45  		keyword_rts "LET", LET
00000Cr 2  D4 xx        
000009r 2               .endif
000009r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Dr 2  54 CF xx     
00000Ar 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Er 2  CE xx        
00000Br 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Fr 2  xx           
00000Cr 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
000010r 2  53 54 4F 52  
000014r 2  C5 xx        
00000Dr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000011r 2  53 55 C2 xx  
00000Er 2  rr rr 52 45  		keyword_rts "RETURN", POP
000012r 2  54 55 52 CE  
000016r 2  xx           
00000Fr 2               .ifdef APPLE
00000Fr 2               		keyword_rts "TEX", TEX, TOKEN_REM
00000Fr 2               .else
00000Fr 2  rr rr 52 45  		keyword_rts "REM", REM, TOKEN_REM
000013r 2  CD xx        
000010r 2               .endif
000010r 2  rr rr 53 54  		keyword_rts "STOP", STOP
000014r 2  4F D0 xx     
000011r 2  rr rr 4F CE  		keyword_rts "ON", ON
000015r 2  xx           
000012r 2               .ifdef CONFIG_NULL
000012r 2               		keyword_rts "NULL", NULL
000012r 2               .endif
000012r 2               .ifdef KBD
000012r 2               		keyword_rts "PLOD", PLOD
000012r 2               		keyword_rts "PSAV", PSAV
000012r 2               		keyword_rts "VLOD", VLOD
000012r 2               		keyword_rts "VSAV", VSAV
000012r 2               .endif
000012r 2               .ifndef CONFIG_NO_POKE
000012r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000016r 2  49 D4 xx     
000013r 2               .endif
000013r 2               .ifndef KBD
000013r 2  D4 FF 4C 4F  		keyword_rts "LOAD", LOAD
000017r 2  41 C4 xx     
000014r 2  D7 FF 53 41  		keyword_rts "SAVE", SAVE
000018r 2  56 C5 xx     
000015r 2               .endif
000015r 2               .ifdef CONFIG_CBM_ALL
000015r 2  DA FF 56 45  		keyword_rts "VERIFY", VERIFY
000019r 2  52 49 46 D9  
00001Dr 2  xx           
000016r 2               .endif
000016r 2  rr rr 44 45  		keyword_rts "DEF", DEF
00001Ar 2  C6 xx        
000017r 2               .ifdef KBD
000017r 2               		keyword_rts "SLOD", SLOD
000017r 2               .endif
000017r 2               .ifndef CONFIG_NO_POKE
000017r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
00001Br 2  4B C5 xx     
000018r 2               .endif
000018r 2               .ifdef CONFIG_FILE
000018r 2  rr rr 50 52  		keyword_rts "PRINT#", PRINTH
00001Cr 2  49 4E 54 A3  
000020r 2  xx           
000019r 2               .endif
000019r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Dr 2  49 4E D4 xx  
00001Ar 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Er 2  4E D4 xx     
00001Br 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Fr 2  53 D4 xx     
00001Cr 2               .ifdef CONFIG_CBM_ALL
00001Cr 2  rr rr 43 4C  		keyword_rts "CLR", CLEAR
000020r 2  D2 xx        
00001Dr 2               .else
00001Dr 2               		keyword_rts "CLEAR", CLEAR
00001Dr 2               .endif
00001Dr 2               .ifdef CONFIG_FILE
00001Dr 2  rr rr 43 4D  		keyword_rts "CMD", CMD
000021r 2  C4 xx        
00001Er 2  DD FF 53 59  		keyword_rts "SYS", SYS
000022r 2  D3 xx        
00001Fr 2  BF FF 4F 50  		keyword_rts "OPEN", OPEN
000023r 2  45 CE xx     
000020r 2  C2 FF 43 4C  		keyword_rts "CLOSE", CLOSE
000024r 2  4F 53 C5 xx  
000021r 2               .endif
000021r 2               .ifndef CONFIG_SMALL
000021r 2  rr rr 47 45  		keyword_rts "GET", GET
000025r 2  D4 xx        
000022r 2               .endif
000022r 2               .ifdef KBD
000022r 2               		keyword_rts "PRT", PRT
000022r 2               .endif
000022r 2  rr rr 4E 45  		keyword_rts "NEW", NEW
000026r 2  D7 xx        
000023r 2               .ifdef EATER
000023r 2               		keyword_rts "LCDCMD", LCDCMD
000023r 2               		keyword_rts "LCDPRINT", LCDPRINT
000023r 2               .endif
000023r 2               
000023r 2               		count_tokens
000023r 2               
000023r 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000027r 2  xx           
000024r 2  54 CF xx     		keyword	"TO", TOKEN_TO
000025r 2  46 CE xx     		keyword	"FN", TOKEN_FN
000026r 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
00002Ar 2  xx           
000027r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
00002Br 2  xx           
000028r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000029r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
00002Dr 2  xx           
00002Ar 2  AB xx        		keyword	"+", TOKEN_PLUS
00002Br 2  AD xx        		keyword	"-", TOKEN_MINUS
00002Cr 2  AA xx        		keyword	"*"
00002Dr 2  AF xx        		keyword	"/"
00002Er 2               .ifdef KBD
00002Er 2               		keyword	"#"
00002Er 2               .else
00002Er 2  DE xx        		keyword	"^"
00002Fr 2               .endif
00002Fr 2  41 4E C4 xx  		keyword	"AND"
000030r 2  4F D2 xx     		keyword	"OR"
000031r 2  BE xx        		keyword	">", TOKEN_GREATER
000032r 2  BD xx        		keyword	"=", TOKEN_EQUAL
000033r 2  BC xx        		keyword	"<"
000034r 2               
000034r 2                       .segment "VECTORS"
000046r 2               UNFNC:
000046r 2               
000046r 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00004Ar 2  CE xx        
000035r 2  rr rr 49 4E  		keyword_addr "INT", INT
000039r 2  D4 xx        
000036r 2  rr rr 41 42  		keyword_addr "ABS", ABS
00003Ar 2  D3 xx        
000037r 2               .ifdef KBD
000037r 2               		keyword_addr "VER", VER
000037r 2               .endif
000037r 2               .ifndef CONFIG_NO_POKE
000037r 2                 .ifdef CONFIG_RAM
000037r 2               		keyword_addr "USR", IQERR
000037r 2                 .else
000037r 2  00 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
00003Br 2  D2 xx        
000038r 2                 .endif
000038r 2               .endif
000038r 2  rr rr 46 52  		keyword_addr "FRE", FRE
00003Cr 2  C5 xx        
000039r 2  rr rr 50 4F  		keyword_addr "POS", POS
00003Dr 2  D3 xx        
00003Ar 2  rr rr 53 51  		keyword_addr "SQR", SQR
00003Er 2  D2 xx        
00003Br 2  rr rr 52 4E  		keyword_addr "RND", RND
00003Fr 2  C4 xx        
00003Cr 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
000040r 2  C7 xx        
00003Dr 2  rr rr 45 58  		keyword_addr "EXP", EXP
000041r 2  D0 xx        
00003Er 2               .segment "VECTORS"
00005Ar 2               UNFNC_COS:
00005Ar 2  rr rr 43 4F  		keyword_addr "COS", COS
00005Er 2  D3 xx        
00003Fr 2               .segment "VECTORS"
00005Cr 2               UNFNC_SIN:
00005Cr 2  rr rr 53 49  		keyword_addr "SIN", SIN
000060r 2  CE xx        
000040r 2               .segment "VECTORS"
00005Er 2               UNFNC_TAN:
00005Er 2  rr rr 54 41  		keyword_addr "TAN", TAN
000062r 2  CE xx        
000041r 2               .segment "VECTORS"
000060r 2               UNFNC_ATN:
000060r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000064r 2  CE xx        
000042r 2               .ifdef KBD
000042r 2               		keyword_addr "GETC", GETC
000042r 2               .endif
000042r 2               .ifndef CONFIG_NO_POKE
000042r 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
000046r 2  45 CB xx     
000043r 2               .endif
000043r 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000047r 2  CE xx        
000044r 2  rr rr 53 54  		keyword_addr "STR$", STR
000048r 2  52 A4 xx     
000045r 2  rr rr 56 41  		keyword_addr "VAL", VAL
000049r 2  CC xx        
000046r 2  rr rr 41 53  		keyword_addr "ASC", ASC
00004Ar 2  C3 xx        
000047r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
00004Br 2  52 A4 xx     
000048r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
00004Cr 2  46 54 A4 xx  
000049r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
00004Dr 2  47 48 54 A4  
000051r 2  xx           
00004Ar 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
00004Er 2  44 A4 xx     
00004Br 2               .ifdef CONFIG_2
00004Br 2               		keyword	"GO", TOKEN_GO
00004Br 2               .endif
00004Br 2                       .segment "KEYWORDS"
0000FDr 2  00           		.byte   0
0000FEr 2               
0000FEr 2                       .segment "VECTORS"
000074r 2               MATHTBL:
000074r 2  79                   .byte   $79
000075r 2  rr rr                .word   FADDT-1
000077r 2  79                   .byte   $79
000078r 2  rr rr                .word   FSUBT-1
00007Ar 2  7B                   .byte   $7B
00007Br 2  rr rr                .word   FMULTT-1
00007Dr 2  7B                   .byte   $7B
00007Er 2  rr rr                .word   FDIVT-1
000080r 2  7F                   .byte   $7F
000081r 2  rr rr                .word   FPWRT-1
000083r 2  50                   .byte   $50
000084r 2  rr rr                .word   TAND-1
000086r 2  46                   .byte   $46
000087r 2  rr rr                .word   OR-1
000089r 2  7D                   .byte   $7D
00008Ar 2  rr rr                .word   NEGOP-1
00008Cr 2  5A                   .byte   $5A
00008Dr 2  rr rr                .word   EQUOP-1
00008Fr 2  64                   .byte   $64
000090r 2  rr rr                .word   RELOPS-1
000092r 2               
000092r 1               .include "error.s"
000092r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2               define_error ERR_NOFOR, "NF"
000000r 2               define_error ERR_SYNTAX, "SN"
000000r 2               define_error ERR_NOGOSUB, "RG"
000000r 2               define_error ERR_NODATA, "OD"
000000r 2               define_error ERR_ILLQTY, "FC"
000000r 2               define_error ERR_OVERFLOW, "OV"
000000r 2               define_error ERR_MEMFULL, "OM"
000000r 2               define_error ERR_UNDEFSTAT, "US"
000000r 2               define_error ERR_BADSUBS, "BS"
000000r 2               define_error ERR_REDIMD, "DD"
000000r 2               define_error ERR_ZERODIV, "/0"
000000r 2               define_error ERR_ILLDIR, "ID"
000000r 2               define_error ERR_BADTYPE, "TM"
000000r 2               define_error ERR_STRLONG, "LS"
000000r 2               define_error ERR_FRMCPX, "ST"
000000r 2               define_error ERR_CANTCONT, "CN"
000000r 2               define_error ERR_UNDEFFN, "UF"
000000r 2               .else
000000r 2  4E 45 58 54  define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000004r 2  20 57 49 54  
000008r 2  48 4F 55 54  
000010r 2  53 59 4E 54  define_error ERR_SYNTAX, "SYNTAX"
000014r 2  41 D8        
000016r 2  52 45 54 55  define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
00001Ar 2  52 4E 20 57  
00001Er 2  49 54 48 4F  
00002Ar 2  4F 55 54 20  define_error ERR_NODATA, "OUT OF DATA"
00002Er 2  4F 46 20 44  
000032r 2  41 54 C1     
000035r 2  49 4C 4C 45  define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000039r 2  47 41 4C 20  
00003Dr 2  51 55 41 4E  
000045r 2               .ifdef CBM1
000045r 2  00 00 00 00  	.byte 0,0,0,0,0
000049r 2  00           
00004Ar 2               .endif
00004Ar 2  4F 56 45 52  define_error ERR_OVERFLOW, "OVERFLOW"
00004Er 2  46 4C 4F D7  
000052r 2  4F 55 54 20  define_error ERR_MEMFULL, "OUT OF MEMORY"
000056r 2  4F 46 20 4D  
00005Ar 2  45 4D 4F 52  
00005Fr 2  55 4E 44 45  define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
000063r 2  46 27 44 20  
000067r 2  53 54 41 54  
000070r 2  42 41 44 20  define_error ERR_BADSUBS, "BAD SUBSCRIPT"
000074r 2  53 55 42 53  
000078r 2  43 52 49 50  
00007Dr 2  52 45 44 49  define_error ERR_REDIMD, "REDIM'D ARRAY"
000081r 2  4D 27 44 20  
000085r 2  41 52 52 41  
00008Ar 2  44 49 56 49  define_error ERR_ZERODIV, "DIVISION BY ZERO"
00008Er 2  53 49 4F 4E  
000092r 2  20 42 59 20  
00009Ar 2  49 4C 4C 45  define_error ERR_ILLDIR, "ILLEGAL DIRECT"
00009Er 2  47 41 4C 20  
0000A2r 2  44 49 52 45  
0000A8r 2  54 59 50 45  define_error ERR_BADTYPE, "TYPE MISMATCH"
0000ACr 2  20 4D 49 53  
0000B0r 2  4D 41 54 43  
0000B5r 2  53 54 52 49  define_error ERR_STRLONG, "STRING TOO LONG"
0000B9r 2  4E 47 20 54  
0000BDr 2  4F 4F 20 4C  
0000C4r 2               .ifdef CONFIG_FILE
0000C4r 2                 .ifdef CBM1
0000C4r 2  42 41 44 20  define_error ERR_BADDATA, "BAD DATA"
0000C8r 2  44 41 54 C1  
0000CCr 2                 .else
0000CCr 2               define_error ERR_BADDATA, "FILE DATA"
0000CCr 2                 .endif
0000CCr 2               .endif
0000CCr 2  46 4F 52 4D  define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
0000D0r 2  55 4C 41 20  
0000D4r 2  54 4F 4F 20  
0000DFr 2  43 41 4E 27  define_error ERR_CANTCONT, "CAN'T CONTINUE"
0000E3r 2  54 20 43 4F  
0000E7r 2  4E 54 49 4E  
0000EDr 2  55 4E 44 45  define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
0000F1r 2  46 27 44 20  
0000F5r 2  46 55 4E 43  
0000FDr 2               .endif
0000FDr 2               
0000FDr 1               .include "message.s"
0000FDr 2               ; global messages: "error", "in", "ready", "break"
0000FDr 2               
0000FDr 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2                       .byte   " ERR"
000000r 2               		.byte	$07,$07
000000r 2                 .else
000000r 2  20 45 52 52          .byte   " ERROR"
000004r 2  4F 52        
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2  0D 0A 52 45  		.byte   CR,LF,"READY.",CR,LF
000010r 2  41 44 59 2E  
000014r 2  0D 0A        
000016r 2                 .else
000016r 2                   .ifdef APPLE
000016r 2               		; binary patch!
000016r 2                       .byte   CR,0,0,"K",CR,LF
000016r 2                   .else
000016r 2               		.byte   CR,LF,"OK",CR,LF
000016r 2                   .endif
000016r 2                 .endif
000016r 2  00           		.byte	0
000017r 2                .endif
000017r 2               .endif
000017r 2               QT_BREAK:
000017r 2               
000017r 2               .ifdef KBD
000017r 2               		.byte	CR,LF," Brk"
000017r 2                       .byte   0
000017r 2                       .byte   $54,$D0 ; ???
000017r 2               .elseif .def(MICROTAN) || .def(AIM65)
000017r 2               		.byte CR,LF," BREAK"
000017r 2                       .byte   0
000017r 2               .else
000017r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
00001Br 2  45 41 4B     
00001Er 2  00                   .byte   0
00001Fr 2               .endif
00001Fr 2               
00001Fr 1               .include "memory.s"
00001Fr 2               ; generic stack and memory management code
00001Fr 2               ; this code is identical across all versions of
00001Fr 2               ; BASIC
00001Fr 2               
00001Fr 2               .segment "CODE"
00001Fr 2               
00001Fr 2               ; ----------------------------------------------------------------------------
00001Fr 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Fr 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Fr 2               ;
00001Fr 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Fr 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Fr 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Fr 2               ;
00001Fr 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Fr 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Fr 2               ;
00001Fr 2               ;	.EQ. IF FOUND
00001Fr 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Fr 2               ; ----------------------------------------------------------------------------
00001Fr 2               GTFORPNT:
00001Fr 2  BA                   tsx
000020r 2  E8                   inx
000021r 2  E8                   inx
000022r 2  E8                   inx
000023r 2  E8                   inx
000024r 2               L2279:
000024r 2  BD 01 01             lda     STACK+1,x
000027r 2  C9 81                cmp     #$81
000029r 2  D0 21                bne     L22A1
00002Br 2  A5 99                lda     FORPNT+1
00002Dr 2  D0 0A                bne     L228E
00002Fr 2  BD 02 01             lda     STACK+2,x
000032r 2  85 98                sta     FORPNT
000034r 2  BD 03 01             lda     STACK+3,x
000037r 2  85 99                sta     FORPNT+1
000039r 2               L228E:
000039r 2  DD 03 01             cmp     STACK+3,x
00003Cr 2  D0 07                bne     L229A
00003Er 2  A5 98                lda     FORPNT
000040r 2  DD 02 01             cmp     STACK+2,x
000043r 2  F0 07                beq     L22A1
000045r 2               L229A:
000045r 2  8A                   txa
000046r 2  18                   clc
000047r 2  69 12                adc     #BYTES_PER_FRAME
000049r 2  AA                   tax
00004Ar 2  D0 D8                bne     L2279
00004Cr 2               L22A1:
00004Cr 2  60                   rts
00004Dr 2               
00004Dr 2               ; ----------------------------------------------------------------------------
00004Dr 2               ; MOVE BLOCK OF MEMORY UP
00004Dr 2               ;
00004Dr 2               ; ON ENTRY:
00004Dr 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
00004Dr 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
00004Dr 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
00004Dr 2               ; ----------------------------------------------------------------------------
00004Dr 2               BLTU:
00004Dr 2  20 rr rr             jsr     REASON
000050r 2  85 80                sta     STREND
000052r 2  84 81                sty     STREND+1
000054r 2               BLTU2:
000054r 2  38                   sec
000055r 2  A5 A9                lda     HIGHTR
000057r 2  E5 AE                sbc     LOWTR
000059r 2  85 71                sta     INDEX
00005Br 2  A8                   tay
00005Cr 2  A5 AA                lda     HIGHTR+1
00005Er 2  E5 AF                sbc     LOWTR+1
000060r 2  AA                   tax
000061r 2  E8                   inx
000062r 2  98                   tya
000063r 2  F0 23                beq     L22DD
000065r 2  A5 A9                lda     HIGHTR
000067r 2  38                   sec
000068r 2  E5 71                sbc     INDEX
00006Ar 2  85 A9                sta     HIGHTR
00006Cr 2  B0 03                bcs     L22C6
00006Er 2  C6 AA                dec     HIGHTR+1
000070r 2  38                   sec
000071r 2               L22C6:
000071r 2  A5 A7                lda     HIGHDS
000073r 2  E5 71                sbc     INDEX
000075r 2  85 A7                sta     HIGHDS
000077r 2  B0 08                bcs     L22D6
000079r 2  C6 A8                dec     HIGHDS+1
00007Br 2  90 04                bcc     L22D6
00007Dr 2               L22D2:
00007Dr 2  B1 A9                lda     (HIGHTR),y
00007Fr 2  91 A7                sta     (HIGHDS),y
000081r 2               L22D6:
000081r 2  88                   dey
000082r 2  D0 F9                bne     L22D2
000084r 2  B1 A9                lda     (HIGHTR),y
000086r 2  91 A7                sta     (HIGHDS),y
000088r 2               L22DD:
000088r 2  C6 AA                dec     HIGHTR+1
00008Ar 2  C6 A8                dec     HIGHDS+1
00008Cr 2  CA                   dex
00008Dr 2  D0 F2                bne     L22D6
00008Fr 2  60                   rts
000090r 2               
000090r 2               ; ----------------------------------------------------------------------------
000090r 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
000090r 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
000090r 2               ; ----------------------------------------------------------------------------
000090r 2               CHKMEM:
000090r 2  0A                   asl     a
000091r 2  69 36                adc     #SPACE_FOR_GOSUB
000093r 2  B0 35                bcs     MEMERR
000095r 2  85 71                sta     INDEX
000097r 2  BA                   tsx
000098r 2  E4 71                cpx     INDEX
00009Ar 2  90 2E                bcc     MEMERR
00009Cr 2  60                   rts
00009Dr 2               
00009Dr 2               ; ----------------------------------------------------------------------------
00009Dr 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
00009Dr 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
00009Dr 2               ; ----------------------------------------------------------------------------
00009Dr 2               REASON:
00009Dr 2  C4 83                cpy     FRETOP+1
00009Fr 2  90 28                bcc     L231E
0000A1r 2  D0 04                bne     L22FC
0000A3r 2  C5 82                cmp     FRETOP
0000A5r 2  90 22                bcc     L231E
0000A7r 2               L22FC:
0000A7r 2  48                   pha
0000A8r 2  A2 09                ldx     #FAC-TEMP1-1
0000AAr 2  98                   tya
0000ABr 2               L2300:
0000ABr 2  48                   pha
0000ACr 2  B5 A6                lda     TEMP1,x
0000AEr 2  CA                   dex
0000AFr 2  10 FA                bpl     L2300
0000B1r 2  20 rr rr             jsr     GARBAG
0000B4r 2  A2 F7                ldx     #TEMP1-FAC+1
0000B6r 2               L230B:
0000B6r 2  68                   pla
0000B7r 2  95 B0                sta     FAC,x
0000B9r 2  E8                   inx
0000BAr 2  30 FA                bmi     L230B
0000BCr 2  68                   pla
0000BDr 2  A8                   tay
0000BEr 2  68                   pla
0000BFr 2  C4 83                cpy     FRETOP+1
0000C1r 2  90 06                bcc     L231E
0000C3r 2  D0 05                bne     MEMERR
0000C5r 2  C5 82                cmp     FRETOP
0000C7r 2  B0 01                bcs     MEMERR
0000C9r 2               L231E:
0000C9r 2  60                   rts
0000CAr 2               
0000CAr 1               .include "program.s"
0000CAr 2               ; error
0000CAr 2               ; line input, line editing
0000CAr 2               ; tokenize
0000CAr 2               ; detokenize
0000CAr 2               ; BASIC program memory management
0000CAr 2               
0000CAr 2               ; MICROTAN has some nonstandard extension to LIST here
0000CAr 2               
0000CAr 2               .segment "CODE"
0000CAr 2               
0000CAr 2               MEMERR:
0000CAr 2  A2 52                ldx     #ERR_MEMFULL
0000CCr 2               
0000CCr 2               ; ----------------------------------------------------------------------------
0000CCr 2               ; HANDLE AN ERROR
0000CCr 2               ;
0000CCr 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000CCr 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000CCr 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000CCr 2               ; ----------------------------------------------------------------------------
0000CCr 2               ERROR:
0000CCr 2  46 64                lsr     Z14
0000CEr 2               .ifdef CONFIG_FILE
0000CEr 2  A5 03                lda     CURDVC    ; output
0000D0r 2  F0 07                beq     LC366     ; is screen
0000D2r 2  20 CC FF             jsr     CLRCH     ; otherwise redirect output back to screen
0000D5r 2  A9 00                lda     #$00
0000D7r 2  85 03                sta     CURDVC
0000D9r 2               LC366:
0000D9r 2               .endif
0000D9r 2  20 rr rr             jsr     CRDO
0000DCr 2  20 rr rr             jsr     OUTQUES
0000DFr 2               L2329:
0000DFr 2  BD rr rr             lda     ERROR_MESSAGES,x
0000E2r 2               .ifndef CONFIG_SMALL_ERROR
0000E2r 2  48                   pha
0000E3r 2  29 7F                and     #$7F
0000E5r 2               .endif
0000E5r 2  20 rr rr             jsr     OUTDO
0000E8r 2               .ifdef CONFIG_SMALL_ERROR
0000E8r 2                       lda     ERROR_MESSAGES+1,x
0000E8r 2                 .ifdef KBD
0000E8r 2                       and     #$7F
0000E8r 2                 .endif
0000E8r 2                       jsr     OUTDO
0000E8r 2               .else
0000E8r 2  E8                   inx
0000E9r 2  68                   pla
0000EAr 2  10 F3                bpl     L2329
0000ECr 2               .endif
0000ECr 2  20 rr rr             jsr     STKINI
0000EFr 2  A9 rr                lda     #<QT_ERROR
0000F1r 2  A0 rr                ldy     #>QT_ERROR
0000F3r 2               
0000F3r 2               ; ----------------------------------------------------------------------------
0000F3r 2               ; PRINT STRING AT (Y,A)
0000F3r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000F3r 2               ; FALL INTO WARM RESTART
0000F3r 2               ; ----------------------------------------------------------------------------
0000F3r 2               PRINT_ERROR_LINNUM:
0000F3r 2  20 rr rr             jsr     STROUT
0000F6r 2  A4 89                ldy     CURLIN+1
0000F8r 2  C8                   iny
0000F9r 2  F0 03                beq     RESTART
0000FBr 2  20 rr rr             jsr     INPRT
0000FEr 2               
0000FEr 2               ; ----------------------------------------------------------------------------
0000FEr 2               ; WARM RESTART ENTRY
0000FEr 2               ; ----------------------------------------------------------------------------
0000FEr 2               RESTART:
0000FEr 2               .ifdef KBD
0000FEr 2                       jsr     CRDO
0000FEr 2                       nop
0000FEr 2               L2351X:
0000FEr 2                       jsr     OKPRT
0000FEr 2               L2351:
0000FEr 2                       jsr     INLIN
0000FEr 2               LE28E:
0000FEr 2                       bpl     RESTART
0000FEr 2               .else
0000FEr 2  46 64                lsr     Z14
000100r 2                .ifndef AIM65
000100r 2  A9 rr                lda     #<QT_OK
000102r 2  A0 rr                ldy     #>QT_OK
000104r 2                 .ifdef CONFIG_CBM_ALL
000104r 2  20 rr rr             jsr     STROUT
000107r 2                 .else
000107r 2                       jsr     GOSTROUT
000107r 2                 .endif
000107r 2                .else
000107r 2                       jsr     GORESTART
000107r 2                .endif
000107r 2               L2351:
000107r 2  20 rr rr             jsr     INLIN
00010Ar 2               .endif
00010Ar 2  86 C9                stx     TXTPTR
00010Cr 2  84 CA                sty     TXTPTR+1
00010Er 2  20 C2 00             jsr     CHRGET
000111r 2               .ifdef CONFIG_11
000111r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000111r 2               ; and ':' - a line starting with ':' in
000111r 2               ; direct mode gets ignored
000111r 2                       tax
000111r 2               .endif
000111r 2               .ifdef KBD
000111r 2                       beq     L2351X
000111r 2               .else
000111r 2  F0 F4                beq     L2351
000113r 2               .endif
000113r 2  A2 FF                ldx     #$FF
000115r 2  86 89                stx     CURLIN+1
000117r 2  90 06                bcc     NUMBERED_LINE
000119r 2  20 rr rr             jsr     PARSE_INPUT_LINE
00011Cr 2  4C rr rr             jmp     NEWSTT2
00011Fr 2               
00011Fr 2               ; ----------------------------------------------------------------------------
00011Fr 2               ; HANDLE NUMBERED LINE
00011Fr 2               ; ----------------------------------------------------------------------------
00011Fr 2               NUMBERED_LINE:
00011Fr 2  20 rr rr             jsr     LINGET
000122r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000125r 2  84 5C                sty     EOLPNTR
000127r 2               .ifdef KBD
000127r 2                       jsr     FNDLIN2
000127r 2                       lda     JMPADRS+1
000127r 2                       sta     LOWTR
000127r 2                       sta     Z96
000127r 2                       lda     JMPADRS+2
000127r 2                       sta     LOWTR+1
000127r 2                       sta     Z96+1
000127r 2                       lda     LINNUM
000127r 2                       sta     L06FE
000127r 2                       lda     LINNUM+1
000127r 2                       sta     L06FE+1
000127r 2                       inc     LINNUM
000127r 2                       bne     LE2D2
000127r 2                       inc     LINNUM+1
000127r 2                       bne     LE2D2
000127r 2                       jmp     SYNERR
000127r 2               LE2D2:
000127r 2                       jsr     LF457
000127r 2                       ldx     #Z96
000127r 2                       jsr     CMPJMPADRS
000127r 2                       bcs     LE2FD
000127r 2               LE2DC:
000127r 2                       ldx     #$00
000127r 2                       lda     (JMPADRS+1,x)
000127r 2                       sta     (Z96,x)
000127r 2                       inc     JMPADRS+1
000127r 2                       bne     LE2E8
000127r 2                       inc     JMPADRS+2
000127r 2               LE2E8:
000127r 2                       inc     Z96
000127r 2                       bne     LE2EE
000127r 2                       inc     Z96+1
000127r 2               LE2EE:
000127r 2                       ldx     #VARTAB
000127r 2                       jsr     CMPJMPADRS
000127r 2                       bne     LE2DC
000127r 2                       lda     Z96
000127r 2                       sta     VARTAB
000127r 2                       lda     Z96+1
000127r 2                       sta     VARTAB+1
000127r 2               LE2FD:
000127r 2                       jsr     SETPTRS
000127r 2                       jsr     LE33D
000127r 2                       lda     INPUTBUFFER
000127r 2               LE306:
000127r 2                       beq     LE28E
000127r 2                       cmp     #$A5
000127r 2                       beq     LE306
000127r 2                       clc
000127r 2               .else
000127r 2  20 rr rr             jsr     FNDLIN
00012Ar 2  90 44                bcc     PUT_NEW_LINE
00012Cr 2  A0 01                ldy     #$01
00012Er 2  B1 AE                lda     (LOWTR),y
000130r 2  85 72                sta     INDEX+1
000132r 2  A5 7C                lda     VARTAB
000134r 2  85 71                sta     INDEX
000136r 2  A5 AF                lda     LOWTR+1
000138r 2  85 74                sta     DEST+1
00013Ar 2  A5 AE                lda     LOWTR
00013Cr 2  88                   dey
00013Dr 2  F1 AE                sbc     (LOWTR),y
00013Fr 2  18                   clc
000140r 2  65 7C                adc     VARTAB
000142r 2  85 7C                sta     VARTAB
000144r 2  85 73                sta     DEST
000146r 2  A5 7D                lda     VARTAB+1
000148r 2  69 FF                adc     #$FF
00014Ar 2  85 7D                sta     VARTAB+1
00014Cr 2  E5 AF                sbc     LOWTR+1
00014Er 2  AA                   tax
00014Fr 2  38                   sec
000150r 2  A5 AE                lda     LOWTR
000152r 2  E5 7C                sbc     VARTAB
000154r 2  A8                   tay
000155r 2  B0 03                bcs     L23A5
000157r 2  E8                   inx
000158r 2  C6 74                dec     DEST+1
00015Ar 2               L23A5:
00015Ar 2  18                   clc
00015Br 2  65 71                adc     INDEX
00015Dr 2  90 03                bcc     L23AD
00015Fr 2  C6 72                dec     INDEX+1
000161r 2  18                   clc
000162r 2               L23AD:
000162r 2  B1 71                lda     (INDEX),y
000164r 2  91 73                sta     (DEST),y
000166r 2  C8                   iny
000167r 2  D0 F9                bne     L23AD
000169r 2  E6 72                inc     INDEX+1
00016Br 2  E6 74                inc     DEST+1
00016Dr 2  CA                   dex
00016Er 2  D0 F2                bne     L23AD
000170r 2               .endif
000170r 2               ; ----------------------------------------------------------------------------
000170r 2               PUT_NEW_LINE:
000170r 2               .ifndef KBD
000170r 2                 .ifdef CONFIG_2
000170r 2                       jsr     SETPTRS
000170r 2                       jsr     LE33D
000170r 2                       lda     INPUTBUFFER
000170r 2                       beq     L2351
000170r 2                       clc
000170r 2                 .else
000170r 2  A5 0A                lda     INPUTBUFFER
000172r 2  F0 2F                beq     FIX_LINKS
000174r 2  A5 86                lda     MEMSIZ
000176r 2  A4 87                ldy     MEMSIZ+1
000178r 2  85 82                sta     FRETOP
00017Ar 2  84 83                sty     FRETOP+1
00017Cr 2                 .endif
00017Cr 2               .endif
00017Cr 2  A5 7C                lda     VARTAB
00017Er 2  85 A9                sta     HIGHTR
000180r 2  65 5C                adc     EOLPNTR
000182r 2  85 A7                sta     HIGHDS
000184r 2  A4 7D                ldy     VARTAB+1
000186r 2  84 AA                sty     HIGHTR+1
000188r 2  90 01                bcc     L23D6
00018Ar 2  C8                   iny
00018Br 2               L23D6:
00018Br 2  84 A8                sty     HIGHDS+1
00018Dr 2  20 rr rr             jsr     BLTU
000190r 2               .ifdef CONFIG_INPUTBUFFER_0200
000190r 2                       lda     LINNUM
000190r 2                       ldy     LINNUM+1
000190r 2                       sta     INPUTBUFFER-2
000190r 2                       sty     INPUTBUFFER-1
000190r 2               .endif
000190r 2  A5 80                lda     STREND
000192r 2  A4 81                ldy     STREND+1
000194r 2  85 7C                sta     VARTAB
000196r 2  84 7D                sty     VARTAB+1
000198r 2  A4 5C                ldy     EOLPNTR
00019Ar 2  88                   dey
00019Br 2               ; ---COPY LINE INTO PROGRAM-------
00019Br 2               L23E6:
00019Br 2  B9 06 00             lda     INPUTBUFFER-4,y
00019Er 2  91 AE                sta     (LOWTR),y
0001A0r 2  88                   dey
0001A1r 2  10 F8                bpl     L23E6
0001A3r 2               
0001A3r 2               ; ----------------------------------------------------------------------------
0001A3r 2               ; CLEAR ALL VARIABLES
0001A3r 2               ; RE-ESTABLISH ALL FORWARD LINKS
0001A3r 2               ; ----------------------------------------------------------------------------
0001A3r 2               FIX_LINKS:
0001A3r 2  20 rr rr             jsr     SETPTRS
0001A6r 2               .ifdef CONFIG_2
0001A6r 2                       jsr     LE33D
0001A6r 2                       jmp     L2351
0001A6r 2               LE33D:
0001A6r 2               .endif
0001A6r 2  A5 7A                lda     TXTTAB
0001A8r 2  A4 7B                ldy     TXTTAB+1
0001AAr 2  85 71                sta     INDEX
0001ACr 2  84 72                sty     INDEX+1
0001AEr 2  18                   clc
0001AFr 2               L23FA:
0001AFr 2  A0 01                ldy     #$01
0001B1r 2  B1 71                lda     (INDEX),y
0001B3r 2               .ifdef CONFIG_2
0001B3r 2                       beq     RET3
0001B3r 2               .else
0001B3r 2  D0 03 4C rr          jeq     L2351
0001B7r 2  rr           
0001B8r 2               .endif
0001B8r 2  A0 04                ldy     #$04
0001BAr 2               L2405:
0001BAr 2  C8                   iny
0001BBr 2  B1 71                lda     (INDEX),y
0001BDr 2  D0 FB                bne     L2405
0001BFr 2  C8                   iny
0001C0r 2  98                   tya
0001C1r 2  65 71                adc     INDEX
0001C3r 2  AA                   tax
0001C4r 2  A0 00                ldy     #$00
0001C6r 2  91 71                sta     (INDEX),y
0001C8r 2  A5 72                lda     INDEX+1
0001CAr 2  69 00                adc     #$00
0001CCr 2  C8                   iny
0001CDr 2  91 71                sta     (INDEX),y
0001CFr 2  86 71                stx     INDEX
0001D1r 2  85 72                sta     INDEX+1
0001D3r 2  90 DA                bcc     L23FA	; always
0001D5r 2               
0001D5r 2               ; ----------------------------------------------------------------------------
0001D5r 2               .ifdef KBD
0001D5r 2               .include "kbd_loadsave.s"
0001D5r 2               .endif
0001D5r 2               
0001D5r 2               .ifdef CONFIG_2
0001D5r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001D5r 2               RET3:
0001D5r 2               		rts
0001D5r 2               .endif
0001D5r 2               
0001D5r 2               .include "inline.s"
0001D5r 3               .segment "CODE"
0001D5r 3               
0001D5r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001D5r 3               L2420:
0001D5r 3                 .ifdef OSI
0001D5r 3                       jsr     OUTDO
0001D5r 3                 .endif
0001D5r 3  CA                   dex
0001D6r 3                 .ifdef AIM65
0001D6r 3                       bmi     L2423
0001D6r 3                       jsr     PSLS
0001D6r 3                       jmp     INLIN2
0001D6r 3               LB35F:
0001D6r 3                       jsr     OUTDO
0001D6r 3                 .else
0001D6r 3  10 05                bpl     INLIN2
0001D8r 3                 .endif
0001D8r 3               L2423:
0001D8r 3                 .ifdef OSI
0001D8r 3                       jsr     OUTDO
0001D8r 3                 .endif
0001D8r 3  20 rr rr             jsr     CRDO
0001DBr 3               .endif
0001DBr 3               
0001DBr 3               ; ----------------------------------------------------------------------------
0001DBr 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001DBr 3               ; ----------------------------------------------------------------------------
0001DBr 3               .ifndef KBD
0001DBr 3               INLIN:
0001DBr 3                 .ifdef APPLE
0001DBr 3                       ldx     #$DD
0001DBr 3               INLIN1:
0001DBr 3                       stx     $33
0001DBr 3                       jsr     L2900
0001DBr 3                       cpx     #$EF
0001DBr 3                       bcs     L0C32
0001DBr 3                       ldx     #$EF
0001DBr 3               L0C32:
0001DBr 3                       lda     #$00
0001DBr 3                       sta     INPUTBUFFER,x
0001DBr 3                       ldx     #<INPUTBUFFER-1
0001DBr 3                       ldy     #>INPUTBUFFER-1
0001DBr 3                       rts
0001DBr 3                 .endif
0001DBr 3               
0001DBr 3                 .ifndef APPLE
0001DBr 3  A2 00                ldx     #$00
0001DDr 3               INLIN2:
0001DDr 3  20 rr rr             jsr     GETLN
0001E0r 3                   .ifdef AIM65
0001E0r 3                       cmp     #$1A
0001E0r 3                       bne     INLINAIM
0001E0r 3                       jsr     DU13
0001E0r 3                       jmp     INLIN
0001E0r 3               INLINAIM:
0001E0r 3                   .endif
0001E0r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E0r 3                       cmp     #$07
0001E0r 3                       beq     L2443
0001E0r 3                   .endif
0001E0r 3  C9 0D                cmp     #$0D
0001E2r 3  F0 05                beq     L2453
0001E4r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E4r 3                       cmp     #$20
0001E4r 3                     .ifdef AIM65
0001E4r 3                       bcc     L244E
0001E4r 3                     .else
0001E4r 3                       bcc     INLIN2
0001E4r 3                     .endif
0001E4r 3                     .ifdef MICROTAN
0001E4r 3                       cmp     #$80
0001E4r 3                     .else
0001E4r 3                       .ifdef AIM65
0001E4r 3                       cmp     #$7F
0001E4r 3                       beq     L2420
0001E4r 3                       .endif
0001E4r 3                       cmp     #$7D
0001E4r 3                     .endif
0001E4r 3                       bcs     INLIN2
0001E4r 3                       cmp     #$40 ; @
0001E4r 3                     .ifdef AIM65
0001E4r 3                       beq     LB35F
0001E4r 3                     .else
0001E4r 3                       beq     L2423
0001E4r 3                     .ifdef MICROTAN
0001E4r 3                       cmp     #$7F ; DEL
0001E4r 3                     .else
0001E4r 3                       cmp     #$5F ; _
0001E4r 3                     .endif
0001E4r 3                       beq     L2420
0001E4r 3                     .endif
0001E4r 3               L2443:
0001E4r 3                     .ifdef MICROTAN
0001E4r 3                       cpx     #$4F
0001E4r 3                     .else
0001E4r 3                       cpx     #$47
0001E4r 3                     .endif
0001E4r 3                       bcs     L244C
0001E4r 3                   .endif
0001E4r 3  95 0A                sta     INPUTBUFFER,x
0001E6r 3  E8                   inx
0001E7r 3                   .if .def(OSI) || .def(AIM65)
0001E7r 3                       .byte   $2C
0001E7r 3                   .else
0001E7r 3  D0 F4                bne     INLIN2
0001E9r 3                   .endif
0001E9r 3               L244C:
0001E9r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E9r 3                       lda     #$07 ; BEL
0001E9r 3               L244E:
0001E9r 3                       jsr     OUTDO
0001E9r 3                       bne     INLIN2
0001E9r 3                   .endif
0001E9r 3               L2453:
0001E9r 3  4C rr rr             jmp     L29B9
0001ECr 3                 .endif
0001ECr 3               .endif
0001ECr 3               
0001ECr 3               .ifndef KBD
0001ECr 3                 .ifndef APPLE
0001ECr 3               GETLN:
0001ECr 3                   .ifdef CONFIG_FILE
0001ECr 3  20 CF FF             jsr     CHRIN
0001EFr 3  A4 03                ldy     CURDVC
0001F1r 3  D0 0C                bne     L2465
0001F3r 3                   .else
0001F3r 3                       jsr     MONRDKEY
0001F3r 3                   .endif
0001F3r 3                   .ifdef OSI
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       nop
0001F3r 3                       and     #$7F
0001F3r 3                   .endif
0001F3r 3                 .endif
0001F3r 3                 .ifdef APPLE
0001F3r 3               RDKEY:
0001F3r 3                       jsr     LFD0C
0001F3r 3                       and     #$7F
0001F3r 3                 .endif
0001F3r 3                   .ifdef SYM1
0001F3r 3                       cmp     #$14
0001F3r 3                   .else
0001F3r 3  C9 0F                cmp     #$0F
0001F5r 3                   .endif
0001F5r 3  D0 08                bne     L2465
0001F7r 3  48                   pha
0001F8r 3  A5 64                lda     Z14
0001FAr 3  49 FF                eor     #$FF
0001FCr 3  85 64                sta     Z14
0001FEr 3  68                   pla
0001FFr 3               L2465:
0001FFr 3  60                   rts
000200r 3               .endif
000200r 3               
000200r 2               
000200r 2               ; ----------------------------------------------------------------------------
000200r 2               ; TOKENIZE THE INPUT LINE
000200r 2               ; ----------------------------------------------------------------------------
000200r 2               PARSE_INPUT_LINE:
000200r 2  A6 C9                ldx     TXTPTR
000202r 2  A0 04                ldy     #$04
000204r 2  84 60                sty     DATAFLG
000206r 2               L246C:
000206r 2  BD 00 00             lda     INPUTBUFFERX,x
000209r 2               .ifdef CONFIG_CBM_ALL
000209r 2  10 07                bpl     LC49E
00020Br 2  C9 FF                cmp     #$FF
00020Dr 2  F0 42                beq     L24AC
00020Fr 2  E8                   inx
000210r 2  D0 F4                bne     L246C
000212r 2               LC49E:
000212r 2               .endif
000212r 2  C9 20                cmp     #$20
000214r 2  F0 3B                beq     L24AC
000216r 2  85 5B                sta     ENDCHR
000218r 2  C9 22                cmp     #$22
00021Ar 2  F0 5A                beq     L24D0
00021Cr 2  24 60                bit     DATAFLG
00021Er 2  70 31                bvs     L24AC
000220r 2  C9 3F                cmp     #$3F
000222r 2  D0 04                bne     L2484
000224r 2  A9 99                lda     #TOKEN_PRINT
000226r 2  D0 29                bne     L24AC
000228r 2               L2484:
000228r 2  C9 30                cmp     #$30
00022Ar 2  90 04                bcc     L248C
00022Cr 2  C9 3C                cmp     #$3C
00022Er 2  90 21                bcc     L24AC
000230r 2               ; ----------------------------------------------------------------------------
000230r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000230r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000230r 2               ; ----------------------------------------------------------------------------
000230r 2               L248C:
000230r 2  84 C0                sty     STRNG2
000232r 2  A0 00                ldy     #$00
000234r 2  84 5C                sty     EOLPNTR
000236r 2  88                   dey
000237r 2  86 C9                stx     TXTPTR
000239r 2  CA                   dex
00023Ar 2               L2496:
00023Ar 2  C8                   iny
00023Br 2               L2497:
00023Br 2  E8                   inx
00023Cr 2               L2498:
00023Cr 2               .ifdef KBD
00023Cr 2                       jsr     GET_UPPER
00023Cr 2               .else
00023Cr 2  BD 00 00             lda     INPUTBUFFERX,x
00023Fr 2                 .ifndef CONFIG_2
00023Fr 2  C9 20                cmp     #$20
000241r 2  F0 F8                beq     L2497
000243r 2                 .endif
000243r 2               .endif
000243r 2  38                   sec
000244r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
000247r 2  F0 F1                beq     L2496
000249r 2  C9 80                cmp     #$80
00024Br 2  D0 30                bne     L24D7
00024Dr 2  05 5C                ora     EOLPNTR
00024Fr 2               ; ----------------------------------------------------------------------------
00024Fr 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
00024Fr 2               ; ----------------------------------------------------------------------------
00024Fr 2               L24AA:
00024Fr 2  A4 C0                ldy     STRNG2
000251r 2               L24AC:
000251r 2  E8                   inx
000252r 2  C8                   iny
000253r 2  99 05 00             sta     INPUTBUFFER-5,y
000256r 2  B9 05 00             lda     INPUTBUFFER-5,y
000259r 2  F0 36                beq     L24EA
00025Br 2  38                   sec
00025Cr 2  E9 3A                sbc     #$3A
00025Er 2  F0 04                beq     L24BF
000260r 2  C9 49                cmp     #$49
000262r 2  D0 02                bne     L24C1
000264r 2               L24BF:
000264r 2  85 60                sta     DATAFLG
000266r 2               L24C1:
000266r 2  38                   sec
000267r 2  E9 55                sbc     #TOKEN_REM-':'
000269r 2  D0 9B                bne     L246C
00026Br 2  85 5B                sta     ENDCHR
00026Dr 2               ; ----------------------------------------------------------------------------
00026Dr 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00026Dr 2               ; BY COPYING CHARS UP TO ENDCHR.
00026Dr 2               ; ----------------------------------------------------------------------------
00026Dr 2               L24C8:
00026Dr 2  BD 00 00             lda     INPUTBUFFERX,x
000270r 2  F0 DF                beq     L24AC
000272r 2  C5 5B                cmp     ENDCHR
000274r 2  F0 DB                beq     L24AC
000276r 2               L24D0:
000276r 2  C8                   iny
000277r 2  99 05 00             sta     INPUTBUFFER-5,y
00027Ar 2  E8                   inx
00027Br 2  D0 F0                bne     L24C8
00027Dr 2               ; ----------------------------------------------------------------------------
00027Dr 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
00027Dr 2               ; ----------------------------------------------------------------------------
00027Dr 2               L24D7:
00027Dr 2  A6 C9                ldx     TXTPTR
00027Fr 2  E6 5C                inc     EOLPNTR
000281r 2               L24DB:
000281r 2  C8                   iny
000282r 2  B9 rr rr             lda     MATHTBL+28+1,y
000285r 2  10 FA                bpl     L24DB
000287r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00028Ar 2  D0 B0                bne     L2498
00028Cr 2  BD 00 00             lda     INPUTBUFFERX,x
00028Fr 2  10 BE                bpl     L24AA
000291r 2               ; ---END OF LINE------------------
000291r 2               L24EA:
000291r 2  99 07 00             sta     INPUTBUFFER-3,y
000294r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000294r 2                       dec     TXTPTR+1
000294r 2               .endif
000294r 2  A9 09                lda     #<INPUTBUFFER-1
000296r 2  85 C9                sta     TXTPTR
000298r 2  60                   rts
000299r 2               
000299r 2               ; ----------------------------------------------------------------------------
000299r 2               ; SEARCH FOR LINE
000299r 2               ;
000299r 2               ; (LINNUM) = LINE # TO FIND
000299r 2               ; IF NOT FOUND:  CARRY = 0
000299r 2               ;	LOWTR POINTS AT NEXT LINE
000299r 2               ; IF FOUND:      CARRY = 1
000299r 2               ;	LOWTR POINTS AT LINE
000299r 2               ; ----------------------------------------------------------------------------
000299r 2               FNDLIN:
000299r 2               .ifdef KBD
000299r 2                       jsr     CHRGET
000299r 2                       jmp     LE444
000299r 2               LE440:
000299r 2                       php
000299r 2                       jsr     LINGET
000299r 2               LE444:
000299r 2                       jsr     LF457
000299r 2                       ldx     #$FF
000299r 2                       plp
000299r 2                       beq     LE464
000299r 2                       jsr     CHRGOT
000299r 2                       beq     L2520
000299r 2                       cmp     #$A5
000299r 2                       bne     L2520
000299r 2                       jsr     CHRGET
000299r 2                       beq     LE464
000299r 2                       bcs     LE461
000299r 2                       jsr     LINGET
000299r 2                       beq     L2520
000299r 2               LE461:
000299r 2                       jmp     SYNERR
000299r 2               LE464:
000299r 2                       stx     LINNUM
000299r 2                       stx     LINNUM+1
000299r 2               .else
000299r 2  A5 7A                lda     TXTTAB
00029Br 2  A6 7B                ldx     TXTTAB+1
00029Dr 2               FL1:
00029Dr 2  A0 01                ldy     #$01
00029Fr 2  85 AE                sta     LOWTR
0002A1r 2  86 AF                stx     LOWTR+1
0002A3r 2  B1 AE                lda     (LOWTR),y
0002A5r 2  F0 1F                beq     L251F
0002A7r 2  C8                   iny
0002A8r 2  C8                   iny
0002A9r 2  A5 09                lda     LINNUM+1
0002ABr 2  D1 AE                cmp     (LOWTR),y
0002ADr 2  90 18                bcc     L2520
0002AFr 2  F0 03                beq     L250D
0002B1r 2  88                   dey
0002B2r 2  D0 09                bne     L2516
0002B4r 2               L250D:
0002B4r 2  A5 08                lda     LINNUM
0002B6r 2  88                   dey
0002B7r 2  D1 AE                cmp     (LOWTR),y
0002B9r 2  90 0C                bcc     L2520
0002BBr 2  F0 0A                beq     L2520
0002BDr 2               L2516:
0002BDr 2  88                   dey
0002BEr 2  B1 AE                lda     (LOWTR),y
0002C0r 2  AA                   tax
0002C1r 2  88                   dey
0002C2r 2  B1 AE                lda     (LOWTR),y
0002C4r 2  B0 D7                bcs     FL1
0002C6r 2               L251F:
0002C6r 2  18                   clc
0002C7r 2               .endif
0002C7r 2               L2520:
0002C7r 2  60                   rts
0002C8r 2               
0002C8r 2               ; ----------------------------------------------------------------------------
0002C8r 2               ; "NEW" STATEMENT
0002C8r 2               ; ----------------------------------------------------------------------------
0002C8r 2               NEW:
0002C8r 2  D0 FD                bne     L2520
0002CAr 2               SCRTCH:
0002CAr 2  A9 00                lda     #$00
0002CCr 2  A8                   tay
0002CDr 2  91 7A                sta     (TXTTAB),y
0002CFr 2  C8                   iny
0002D0r 2  91 7A                sta     (TXTTAB),y
0002D2r 2  A5 7A                lda     TXTTAB
0002D4r 2               .ifdef CONFIG_2
0002D4r 2               		clc
0002D4r 2               .endif
0002D4r 2  69 02                adc     #$02
0002D6r 2  85 7C                sta     VARTAB
0002D8r 2  A5 7B                lda     TXTTAB+1
0002DAr 2  69 00                adc     #$00
0002DCr 2  85 7D                sta     VARTAB+1
0002DEr 2               ; ----------------------------------------------------------------------------
0002DEr 2               SETPTRS:
0002DEr 2  20 rr rr             jsr     STXTPT
0002E1r 2               .ifdef CONFIG_11A
0002E1r 2                       lda     #$00
0002E1r 2               
0002E1r 2               ; ----------------------------------------------------------------------------
0002E1r 2               ; "CLEAR" STATEMENT
0002E1r 2               ; ----------------------------------------------------------------------------
0002E1r 2               CLEAR:
0002E1r 2                       bne     L256A
0002E1r 2               .endif
0002E1r 2               CLEARC:
0002E1r 2               .ifdef KBD
0002E1r 2                       lda     #<CONST_MEMSIZ
0002E1r 2                       ldy     #>CONST_MEMSIZ
0002E1r 2               .else
0002E1r 2  A5 86                lda     MEMSIZ
0002E3r 2  A4 87                ldy     MEMSIZ+1
0002E5r 2               .endif
0002E5r 2  85 82                sta     FRETOP
0002E7r 2  84 83                sty     FRETOP+1
0002E9r 2               .ifdef CONFIG_CBM_ALL
0002E9r 2  20 E7 FF             jsr     CLALL
0002ECr 2               .endif
0002ECr 2  A5 7C                lda     VARTAB
0002EEr 2  A4 7D                ldy     VARTAB+1
0002F0r 2  85 7E                sta     ARYTAB
0002F2r 2  84 7F                sty     ARYTAB+1
0002F4r 2  85 80                sta     STREND
0002F6r 2  84 81                sty     STREND+1
0002F8r 2  20 rr rr             jsr     RESTORE
0002FBr 2               ; ----------------------------------------------------------------------------
0002FBr 2               STKINI:
0002FBr 2  A2 68                ldx     #TEMPST
0002FDr 2  86 65                stx     TEMPPT
0002FFr 2  68                   pla
000300r 2               .ifdef CONFIG_2
000300r 2               		tay
000300r 2               .else
000300r 2  8D FD 01             sta     STACK+STACK_TOP+1
000303r 2               .endif
000303r 2  68                   pla
000304r 2               .ifndef CONFIG_2
000304r 2  8D FE 01             sta     STACK+STACK_TOP+2
000307r 2               .endif
000307r 2  A2 FC                ldx     #STACK_TOP
000309r 2  9A                   txs
00030Ar 2               .ifdef CONFIG_2
00030Ar 2                       pha
00030Ar 2                       tya
00030Ar 2                       pha
00030Ar 2               .endif
00030Ar 2  A9 00                lda     #$00
00030Cr 2  85 8D                sta     OLDTEXT+1
00030Er 2  85 61                sta     SUBFLG
000310r 2               L256A:
000310r 2  60                   rts
000311r 2               
000311r 2               ; ----------------------------------------------------------------------------
000311r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000311r 2               ; ----------------------------------------------------------------------------
000311r 2               STXTPT:
000311r 2  18                   clc
000312r 2  A5 7A                lda     TXTTAB
000314r 2  69 FF                adc     #$FF
000316r 2  85 C9                sta     TXTPTR
000318r 2  A5 7B                lda     TXTTAB+1
00031Ar 2  69 FF                adc     #$FF
00031Cr 2  85 CA                sta     TXTPTR+1
00031Er 2  60                   rts
00031Fr 2               
00031Fr 2               ; ----------------------------------------------------------------------------
00031Fr 2               .ifdef KBD
00031Fr 2               LE4C0:
00031Fr 2                       ldy     #<LE444
00031Fr 2                       ldx     #>LE444
00031Fr 2               LE4C4:
00031Fr 2                       jsr     LFFD6
00031Fr 2                       jsr     LFFED
00031Fr 2                       lda     $0504
00031Fr 2                       clc
00031Fr 2                       adc     #$08
00031Fr 2                       sta     $0504
00031Fr 2                       rts
00031Fr 2               
00031Fr 2               CMPJMPADRS:
00031Fr 2                       lda     1,x
00031Fr 2                       cmp     JMPADRS+2
00031Fr 2                       bne     LE4DE
00031Fr 2                       lda     0,x
00031Fr 2                       cmp     JMPADRS+1
00031Fr 2               LE4DE:
00031Fr 2                       rts
00031Fr 2               .endif
00031Fr 2               
00031Fr 2               ; ----------------------------------------------------------------------------
00031Fr 2               ; "LIST" STATEMENT
00031Fr 2               ; ----------------------------------------------------------------------------
00031Fr 2               LIST:
00031Fr 2               .ifdef KBD
00031Fr 2                       jsr     LE440
00031Fr 2                       bne     LE4DE
00031Fr 2                       pla
00031Fr 2                       pla
00031Fr 2               L25A6:
00031Fr 2                       jsr     CRDO
00031Fr 2               .else
00031Fr 2                   .ifdef AIM65
00031Fr 2                       pha
00031Fr 2                       lda     #$00
00031Fr 2               LB4BF:
00031Fr 2                       sta     INPUTFLG
00031Fr 2                       pla
00031Fr 2                   .endif
00031Fr 2                 .ifdef MICROTAN
00031Fr 2                       php
00031Fr 2                       jmp     LE21C ; patch
00031Fr 2               LC57E:
00031Fr 2                  .elseif .def(AIM65) || .def(SYM1)
00031Fr 2                       php
00031Fr 2                       jsr     LINGET
00031Fr 2               LC57E:
00031Fr 2                 .else
00031Fr 2  90 06                bcc     L2581
000321r 2  F0 04                beq     L2581
000323r 2  C9 AB                cmp     #TOKEN_MINUS
000325r 2  D0 E9                bne     L256A
000327r 2               L2581:
000327r 2  20 rr rr             jsr     LINGET
00032Ar 2                 .endif
00032Ar 2  20 rr rr             jsr     FNDLIN
00032Dr 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00032Dr 2                       plp
00032Dr 2                       beq     L2598
00032Dr 2                 .endif
00032Dr 2  20 C8 00             jsr     CHRGOT
000330r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000330r 2                       beq     L25A6
000330r 2                 .else
000330r 2  F0 0C                beq     L2598
000332r 2                 .endif
000332r 2  C9 AB                cmp     #TOKEN_MINUS
000334r 2  D0 91                bne     L2520
000336r 2  20 C2 00             jsr     CHRGET
000339r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000339r 2                       beq     L2598
000339r 2                       jsr     LINGET
000339r 2                       beq     L25A6
000339r 2                       rts
000339r 2                 .else
000339r 2  20 rr rr             jsr     LINGET
00033Cr 2  D0 89                bne     L2520
00033Er 2                 .endif
00033Er 2               L2598:
00033Er 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
00033Er 2  68                   pla
00033Fr 2  68                   pla
000340r 2  A5 08                lda     LINNUM
000342r 2  05 09                ora     LINNUM+1
000344r 2  D0 06                bne     L25A6
000346r 2                 .endif
000346r 2  A9 FF                lda     #$FF
000348r 2  85 08                sta     LINNUM
00034Ar 2  85 09                sta     LINNUM+1
00034Cr 2               L25A6:
00034Cr 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00034Cr 2                       pla
00034Cr 2                       pla
00034Cr 2                 .endif
00034Cr 2               L25A6X:
00034Cr 2               .endif
00034Cr 2  A0 01                ldy     #$01
00034Er 2               .ifdef CONFIG_DATAFLG
00034Er 2  84 60                sty     DATAFLG
000350r 2               .endif
000350r 2  B1 AE                lda     (LOWTRX),y
000352r 2  F0 41                beq     L25E5
000354r 2               .ifdef MICROTAN
000354r 2                       jmp     LE21F
000354r 2               LC5A9:
000354r 2               .else
000354r 2  20 E1 FF             jsr     ISCNTC
000357r 2               .endif
000357r 2               .ifndef KBD
000357r 2  20 rr rr             jsr     CRDO
00035Ar 2               .endif
00035Ar 2  C8                   iny
00035Br 2  B1 AE                lda     (LOWTRX),y
00035Dr 2  AA                   tax
00035Er 2  C8                   iny
00035Fr 2  B1 AE                lda     (LOWTRX),y
000361r 2  C5 09                cmp     LINNUM+1
000363r 2  D0 04                bne     L25C1
000365r 2  E4 08                cpx     LINNUM
000367r 2  F0 02                beq     L25C3
000369r 2               L25C1:
000369r 2  B0 2A                bcs     L25E5
00036Br 2               ; ---LIST ONE LINE----------------
00036Br 2               L25C3:
00036Br 2  84 98                sty     FORPNT
00036Dr 2  20 rr rr             jsr     LINPRT
000370r 2  A9 20                lda     #$20
000372r 2               L25CA:
000372r 2  A4 98                ldy     FORPNT
000374r 2  29 7F                and     #$7F
000376r 2               L25CE:
000376r 2  20 rr rr             jsr     OUTDO
000379r 2               .ifdef CONFIG_DATAFLG
000379r 2  C9 22                cmp     #$22
00037Br 2  D0 06                bne     LA519
00037Dr 2  A5 60                lda     DATAFLG
00037Fr 2  49 FF                eor     #$FF
000381r 2  85 60                sta     DATAFLG
000383r 2               LA519:
000383r 2               .endif
000383r 2  C8                   iny
000384r 2               .ifdef CONFIG_11
000384r 2                       beq     L25E5
000384r 2               .endif
000384r 2  B1 AE                lda     (LOWTRX),y
000386r 2  D0 10                bne     L25E8
000388r 2  A8                   tay
000389r 2  B1 AE                lda     (LOWTRX),y
00038Br 2  AA                   tax
00038Cr 2  C8                   iny
00038Dr 2  B1 AE                lda     (LOWTRX),y
00038Fr 2  86 AE                stx     LOWTRX
000391r 2  85 AF                sta     LOWTRX+1
000393r 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000393r 2                       bne     L25A6X
000393r 2               .else
000393r 2  D0 B7                bne     L25A6
000395r 2               .endif
000395r 2               L25E5:
000395r 2               .ifdef AIM65
000395r 2                       lda     INPUTFLG
000395r 2                       beq     L25E5a
000395r 2                       jsr     CRDO
000395r 2                       jsr     CRDO
000395r 2                       lda     #$1a
000395r 2                       jsr     OUTDO
000395r 2                       jsr     $e50a
000395r 2               L25E5a:
000395r 2               .endif
000395r 2  4C rr rr             jmp     RESTART
000398r 2               L25E8:
000398r 2  10 DC                bpl     L25CE
00039Ar 2               .ifdef CONFIG_DATAFLG
00039Ar 2  C9 FF                cmp     #$FF
00039Cr 2  F0 D8                beq     L25CE
00039Er 2  24 60                bit     DATAFLG
0003A0r 2  30 D4                bmi     L25CE
0003A2r 2               .endif
0003A2r 2  38                   sec
0003A3r 2  E9 7F                sbc     #$7F
0003A5r 2  AA                   tax
0003A6r 2  84 98                sty     FORPNT
0003A8r 2  A0 FF                ldy     #$FF
0003AAr 2               L25F2:
0003AAr 2  CA                   dex
0003ABr 2  F0 08                beq     L25FD
0003ADr 2               L25F5:
0003ADr 2  C8                   iny
0003AEr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003B1r 2  10 FA                bpl     L25F5
0003B3r 2  30 F5                bmi     L25F2
0003B5r 2               L25FD:
0003B5r 2  C8                   iny
0003B6r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
0003B9r 2  30 B7                bmi     L25CA
0003BBr 2  20 rr rr             jsr     OUTDO
0003BEr 2  D0 F5                bne     L25FD	; always
0003C0r 2               
0003C0r 2               
0003C0r 1               .include "flow1.s"
0003C0r 2               .segment "CODE"
0003C0r 2               
0003C0r 2               ; ----------------------------------------------------------------------------
0003C0r 2               ; "FOR" STATEMENT
0003C0r 2               ;
0003C0r 2               ; FOR PUSHES 18 BYTES ON THE STACK:
0003C0r 2               ; 2 -- TXTPTR
0003C0r 2               ; 2 -- LINE NUMBER
0003C0r 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
0003C0r 2               ; 1 -- STEP SIGN
0003C0r 2               ; 5 -- STEP VALUE
0003C0r 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
0003C0r 2               ; 1 -- FOR TOKEN ($81)
0003C0r 2               ; ----------------------------------------------------------------------------
0003C0r 2               FOR:
0003C0r 2  A9 80                lda     #$80
0003C2r 2  85 61                sta     SUBFLG
0003C4r 2  20 rr rr             jsr     LET
0003C7r 2  20 rr rr             jsr     GTFORPNT
0003CAr 2  D0 05                bne     L2619
0003CCr 2  8A                   txa
0003CDr 2  69 0F                adc     #FOR_STACK1
0003CFr 2  AA                   tax
0003D0r 2  9A                   txs
0003D1r 2               L2619:
0003D1r 2  68                   pla
0003D2r 2  68                   pla
0003D3r 2  A9 09                lda     #FOR_STACK2
0003D5r 2  20 rr rr             jsr     CHKMEM
0003D8r 2  20 rr rr             jsr     DATAN
0003DBr 2  18                   clc
0003DCr 2  98                   tya
0003DDr 2  65 C9                adc     TXTPTR
0003DFr 2  48                   pha
0003E0r 2  A5 CA                lda     TXTPTR+1
0003E2r 2  69 00                adc     #$00
0003E4r 2  48                   pha
0003E5r 2  A5 89                lda     CURLIN+1
0003E7r 2  48                   pha
0003E8r 2  A5 88                lda     CURLIN
0003EAr 2  48                   pha
0003EBr 2  A9 A4                lda     #TOKEN_TO
0003EDr 2  20 rr rr             jsr     SYNCHR
0003F0r 2  20 rr rr             jsr     CHKNUM
0003F3r 2  20 rr rr             jsr     FRMNUM
0003F6r 2  A5 B5                lda     FACSIGN
0003F8r 2  09 7F                ora     #$7F
0003FAr 2  25 B1                and     FAC+1
0003FCr 2  85 B1                sta     FAC+1
0003FEr 2  A9 rr                lda     #<STEP
000400r 2  A0 rr                ldy     #>STEP
000402r 2  85 71                sta     INDEX
000404r 2  84 72                sty     INDEX+1
000406r 2  4C rr rr             jmp     FRM_STACK3
000409r 2               
000409r 2               ; ----------------------------------------------------------------------------
000409r 2               ; "STEP" PHRASE OF "FOR" STATEMENT
000409r 2               ; ----------------------------------------------------------------------------
000409r 2               STEP:
000409r 2  A9 rr                lda     #<CON_ONE
00040Br 2  A0 rr                ldy     #>CON_ONE
00040Dr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000410r 2  20 C8 00             jsr     CHRGOT
000413r 2  C9 A9                cmp     #TOKEN_STEP
000415r 2  D0 06                bne     L2665
000417r 2  20 C2 00             jsr     CHRGET
00041Ar 2  20 rr rr             jsr     FRMNUM
00041Dr 2               L2665:
00041Dr 2  20 rr rr             jsr     SIGN
000420r 2  20 rr rr             jsr     FRM_STACK2
000423r 2  A5 99                lda     FORPNT+1
000425r 2  48                   pha
000426r 2  A5 98                lda     FORPNT
000428r 2  48                   pha
000429r 2  A9 81                lda     #$81
00042Br 2  48                   pha
00042Cr 2               
00042Cr 2               ; ----------------------------------------------------------------------------
00042Cr 2               ; PERFORM NEXT STATEMENT
00042Cr 2               ; ----------------------------------------------------------------------------
00042Cr 2               NEWSTT:
00042Cr 2  20 E1 FF             jsr     ISCNTC
00042Fr 2  A5 C9                lda     TXTPTR
000431r 2  A4 CA                ldy     TXTPTR+1
000433r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000433r 2                       cpy     #>INPUTBUFFER
000433r 2                 .ifdef CBM2
000433r 2                       nop
000433r 2                 .endif
000433r 2                       beq     LC6D4
000433r 2               .else
000433r 2               ; BUG on AppleSoft I,
000433r 2               ; fixed differently on AppleSoft II (ldx/inx)
000433r 2  F0 06                beq     L2683
000435r 2               .endif
000435r 2  85 8C                sta     OLDTEXT
000437r 2  84 8D                sty     OLDTEXT+1
000439r 2               LC6D4:
000439r 2  A0 00                ldy     #$00
00043Br 2               L2683:
00043Br 2  B1 C9                lda     (TXTPTR),y
00043Dr 2               .ifndef CONFIG_11
00043Dr 2  F0 07                beq     LA5DC	; old: 1 cycle more on generic case
00043Fr 2  C9 3A                cmp     #$3A
000441r 2  F0 1D                beq     NEWSTT2
000443r 2               SYNERR1:
000443r 2  4C rr rr             jmp     SYNERR
000446r 2               LA5DC:
000446r 2               .else
000446r 2                       bne     COLON; new: 1 cycle more on ":" case
000446r 2               .endif
000446r 2  A0 02                ldy     #$02
000448r 2  B1 C9                lda     (TXTPTR),y
00044Ar 2  18                   clc
00044Br 2               .ifdef CONFIG_2
00044Br 2                       jeq     L2701
00044Br 2               .else
00044Br 2  F0 5F                beq     L2701
00044Dr 2               .endif
00044Dr 2  C8                   iny
00044Er 2  B1 C9                lda     (TXTPTR),y
000450r 2  85 88                sta     CURLIN
000452r 2  C8                   iny
000453r 2  B1 C9                lda     (TXTPTR),y
000455r 2  85 89                sta     CURLIN+1
000457r 2  98                   tya
000458r 2  65 C9                adc     TXTPTR
00045Ar 2  85 C9                sta     TXTPTR
00045Cr 2  90 02                bcc     NEWSTT2
00045Er 2  E6 CA                inc     TXTPTR+1
000460r 2               NEWSTT2:
000460r 2  20 C2 00             jsr     CHRGET
000463r 2  20 rr rr             jsr     EXECUTE_STATEMENT
000466r 2  4C rr rr             jmp     NEWSTT
000469r 2               
000469r 2               ; ----------------------------------------------------------------------------
000469r 2               ; EXECUTE A STATEMENT
000469r 2               ;
000469r 2               ; (A) IS FIRST CHAR OF STATEMENT
000469r 2               ; CARRY IS SET
000469r 2               ; ----------------------------------------------------------------------------
000469r 2               EXECUTE_STATEMENT:
000469r 2               .ifndef CONFIG_11A
000469r 2  F0 6A                beq     RET1
00046Br 2               .else
00046Br 2                       beq     RET2
00046Br 2               .endif
00046Br 2               .ifndef CONFIG_11
00046Br 2  38                   sec
00046Cr 2               .endif
00046Cr 2               EXECUTE_STATEMENT1:
00046Cr 2  E9 80                sbc     #$80
00046Er 2               .ifndef CONFIG_11
00046Er 2  B0 03 4C rr          jcc     LET	; old: 1 cycle more on instr.
000472r 2  rr           
000473r 2               .else
000473r 2                       bcc     LET1; new: 1 cycle more on assignment
000473r 2               .endif
000473r 2  C9 23                cmp     #NUM_TOKENS
000475r 2               .ifdef CONFIG_2
000475r 2                       bcs     LC721
000475r 2               .else
000475r 2  B0 CC                bcs     SYNERR1
000477r 2               .endif
000477r 2  0A                   asl     a
000478r 2  A8                   tay
000479r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
00047Cr 2  48                   pha
00047Dr 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000480r 2  48                   pha
000481r 2  4C C2 00             jmp     CHRGET
000484r 2               
000484r 2               .ifdef CONFIG_11
000484r 2               LET1:
000484r 2                       jmp     LET
000484r 2               
000484r 2               COLON:
000484r 2                       cmp     #$3A
000484r 2                       beq     NEWSTT2
000484r 2               SYNERR1:
000484r 2                       jmp     SYNERR
000484r 2               .endif
000484r 2               
000484r 2               .ifdef CONFIG_2; GO TO
000484r 2               LC721:
000484r 2                       cmp     #TOKEN_GO-$80
000484r 2                       bne     SYNERR1
000484r 2                       jsr     CHRGET
000484r 2                       lda     #TOKEN_TO
000484r 2                       jsr     SYNCHR
000484r 2                       jmp     GOTO
000484r 2               .endif
000484r 2               
000484r 2               ; ----------------------------------------------------------------------------
000484r 2               ; "RESTORE" STATEMENT
000484r 2               ; ----------------------------------------------------------------------------
000484r 2               RESTORE:
000484r 2  38                   sec
000485r 2  A5 7A                lda     TXTTAB
000487r 2  E9 01                sbc     #$01
000489r 2  A4 7B                ldy     TXTTAB+1
00048Br 2  B0 01                bcs     SETDA
00048Dr 2  88                   dey
00048Er 2               SETDA:
00048Er 2  85 90                sta     DATPTR
000490r 2  84 91                sty     DATPTR+1
000492r 2               RET2:
000492r 2  60                   rts
000493r 2               
000493r 2               .include "iscntc.s"
000493r 3               .segment "CODE"
000493r 3               ; ----------------------------------------------------------------------------
000493r 3               ; SEE IF CONTROL-C TYPED
000493r 3               ; ----------------------------------------------------------------------------
000493r 3               .ifndef CONFIG_CBM_ALL
000493r 3               .include "cbm_iscntc.s"
000493r 3               .endif
000493r 3               .ifdef KBD
000493r 3               .include "kbd_iscntc.s"
000493r 3               .endif
000493r 3               .ifdef OSI
000493r 3               .include "osi_iscntc.s"
000493r 3               .endif
000493r 3               .ifdef APPLE
000493r 3               .include "apple_iscntc.s"
000493r 3               .endif
000493r 3               .ifdef KIM
000493r 3               .include "kim_iscntc.s"
000493r 3               .endif
000493r 3               .ifdef MICROTAN
000493r 3               .include "microtan_iscntc.s"
000493r 3               .endif
000493r 3               .ifdef AIM65
000493r 3               .include "aim65_iscntc.s"
000493r 3               .endif
000493r 3               .ifdef SYM1
000493r 3               .include "sym1_iscntc.s"
000493r 3               .endif
000493r 3               .ifdef EATER
000493r 3               .include "eater_iscntc.s"
000493r 3               .endif
000493r 3               ;!!! runs into "STOP"
000493r 3               
000493r 2               ;!!! runs into "STOP"
000493r 2               ; ----------------------------------------------------------------------------
000493r 2               ; "STOP" STATEMENT
000493r 2               ; ----------------------------------------------------------------------------
000493r 2               STOP:
000493r 2  B0 01                bcs     END2
000495r 2               
000495r 2               ; ----------------------------------------------------------------------------
000495r 2               ; "END" STATEMENT
000495r 2               ; ----------------------------------------------------------------------------
000495r 2               END:
000495r 2  18                   clc
000496r 2               END2:
000496r 2  D0 3D                bne     RET1
000498r 2  A5 C9                lda     TXTPTR
00049Ar 2  A4 CA                ldy     TXTPTR+1
00049Cr 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
00049Cr 2               ; BUG on AppleSoft I
00049Cr 2               ; fix exists on AppleSoft II
00049Cr 2               ; TXTPTR+1 will always be > 0
00049Cr 2                       ldx     CURLIN+1
00049Cr 2                       inx
00049Cr 2               .endif
00049Cr 2  F0 0C                beq     END4
00049Er 2  85 8C                sta     OLDTEXT
0004A0r 2  84 8D                sty     OLDTEXT+1
0004A2r 2               CONTROL_C_TYPED:
0004A2r 2  A5 88                lda     CURLIN
0004A4r 2  A4 89                ldy     CURLIN+1
0004A6r 2  85 8A                sta     OLDLIN
0004A8r 2  84 8B                sty     OLDLIN+1
0004AAr 2               END4:
0004AAr 2  68                   pla
0004ABr 2  68                   pla
0004ACr 2               L2701:
0004ACr 2  A9 rr                lda     #<QT_BREAK
0004AEr 2  A0 rr                ldy     #>QT_BREAK
0004B0r 2               .ifndef KBD
0004B0r 2  A2 00                ldx     #$00
0004B2r 2  86 64                stx     Z14
0004B4r 2               .endif
0004B4r 2  90 03                bcc     L270E
0004B6r 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004B9r 2               L270E:
0004B9r 2  4C rr rr             jmp     RESTART
0004BCr 2               .ifdef KBD
0004BCr 2               LE664:
0004BCr 2                       tay
0004BCr 2                       jmp     SNGFLT
0004BCr 2               .endif
0004BCr 2               
0004BCr 2               ; ----------------------------------------------------------------------------
0004BCr 2               ; "CONT" COMMAND
0004BCr 2               ; ----------------------------------------------------------------------------
0004BCr 2               CONT:
0004BCr 2  D0 17                bne     RET1
0004BEr 2  A2 DF                ldx     #ERR_CANTCONT
0004C0r 2  A4 8D                ldy     OLDTEXT+1
0004C2r 2  D0 03                bne     L271C
0004C4r 2  4C rr rr             jmp     ERROR
0004C7r 2               L271C:
0004C7r 2  A5 8C                lda     OLDTEXT
0004C9r 2  85 C9                sta     TXTPTR
0004CBr 2  84 CA                sty     TXTPTR+1
0004CDr 2  A5 8A                lda     OLDLIN
0004CFr 2  A4 8B                ldy     OLDLIN+1
0004D1r 2  85 88                sta     CURLIN
0004D3r 2  84 89                sty     CURLIN+1
0004D5r 2               RET1:
0004D5r 2  60                   rts
0004D6r 2               
0004D6r 2               .ifdef KBD
0004D6r 2               PRT:
0004D6r 2                       jsr     GETBYT
0004D6r 2                       txa
0004D6r 2               ; not ROR bug safe
0004D6r 2                       ror     a
0004D6r 2                       ror     a
0004D6r 2                       ror     a
0004D6r 2                       sta     $8F
0004D6r 2                       rts
0004D6r 2               
0004D6r 2               LE68C:
0004D6r 2                       ldy     #$12
0004D6r 2               LE68E:
0004D6r 2                       lda     LEA30,y
0004D6r 2                       sta     $03A2,y
0004D6r 2                       dey
0004D6r 2                       bpl     LE68E
0004D6r 2                       rts
0004D6r 2               .endif
0004D6r 2               
0004D6r 2               .ifndef AIM65
0004D6r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004D6r 2               ; CBM1 has the keyword removed,
0004D6r 2               ; but the code is still here
0004D6r 2               NULL:
0004D6r 2  20 rr rr             jsr     GETBYT
0004D9r 2  D0 FA                bne     RET1
0004DBr 2  E8                   inx
0004DCr 2  E0 0A                cpx     #NULL_MAX
0004DEr 2  B0 04                bcs     L2739
0004E0r 2  CA                   dex
0004E1r 2  86 04                stx     Z15
0004E3r 2               L2738:
0004E3r 2  60                   rts
0004E4r 2               L2739:
0004E4r 2  4C rr rr             jmp     IQERR
0004E7r 2               .endif
0004E7r 2               .ifndef CONFIG_11A
0004E7r 2               CLEAR:
0004E7r 2  D0 EC                bne     RET1
0004E9r 2  4C rr rr             jmp     CLEARC
0004ECr 2               .endif
0004ECr 2               .endif
0004ECr 2               
0004ECr 1               .include "loadsave.s"
0004ECr 2               .segment "CODE"
0004ECr 2               
0004ECr 2               .ifdef APPLE
0004ECr 2               .include "apple_loadsave.s"
0004ECr 2               .endif
0004ECr 2               .ifdef KIM
0004ECr 2               .include "kim_loadsave.s"
0004ECr 2               .endif
0004ECr 2               .ifdef MICROTAN
0004ECr 2               .include "microtan_loadsave.s"
0004ECr 2               .endif
0004ECr 2               .ifdef AIM65
0004ECr 2               .include "aim65_loadsave.s"
0004ECr 2               .endif
0004ECr 2               .ifdef SYM1
0004ECr 2               .include "sym1_loadsave.s"
0004ECr 2               .endif
0004ECr 2               
0004ECr 1               .include "flow2.s"
0004ECr 2               .segment "CODE"
0004ECr 2               ; ----------------------------------------------------------------------------
0004ECr 2               ; "RUN" COMMAND
0004ECr 2               ; ----------------------------------------------------------------------------
0004ECr 2               RUN:
0004ECr 2  D0 03                bne     L27CF
0004EEr 2  4C rr rr             jmp     SETPTRS
0004F1r 2               L27CF:
0004F1r 2  20 rr rr             jsr     CLEARC
0004F4r 2  4C rr rr             jmp     L27E9
0004F7r 2               
0004F7r 2               ; ----------------------------------------------------------------------------
0004F7r 2               ; "GOSUB" STATEMENT
0004F7r 2               ;
0004F7r 2               ; LEAVES 7 BYTES ON STACK:
0004F7r 2               ; 2 -- RETURN ADDRESS (NEWSTT)
0004F7r 2               ; 2 -- TXTPTR
0004F7r 2               ; 2 -- LINE #
0004F7r 2               ; 1 -- GOSUB TOKEN
0004F7r 2               ; ----------------------------------------------------------------------------
0004F7r 2               GOSUB:
0004F7r 2  A9 03                lda     #$03
0004F9r 2  20 rr rr             jsr     CHKMEM
0004FCr 2  A5 CA                lda     TXTPTR+1
0004FEr 2  48                   pha
0004FFr 2  A5 C9                lda     TXTPTR
000501r 2  48                   pha
000502r 2  A5 89                lda     CURLIN+1
000504r 2  48                   pha
000505r 2  A5 88                lda     CURLIN
000507r 2  48                   pha
000508r 2  A9 8D                lda     #TOKEN_GOSUB
00050Ar 2  48                   pha
00050Br 2               L27E9:
00050Br 2  20 C8 00             jsr     CHRGOT
00050Er 2  20 rr rr             jsr     GOTO
000511r 2  4C rr rr             jmp     NEWSTT
000514r 2               
000514r 2               ; ----------------------------------------------------------------------------
000514r 2               ; "GOTO" STATEMENT
000514r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000514r 2               ; ----------------------------------------------------------------------------
000514r 2               GOTO:
000514r 2  20 rr rr             jsr     LINGET
000517r 2  20 rr rr             jsr     REMN
00051Ar 2  A5 89                lda     CURLIN+1
00051Cr 2  C5 09                cmp     LINNUM+1
00051Er 2  B0 0B                bcs     L2809
000520r 2  98                   tya
000521r 2  38                   sec
000522r 2  65 C9                adc     TXTPTR
000524r 2  A6 CA                ldx     TXTPTR+1
000526r 2  90 07                bcc     L280D
000528r 2  E8                   inx
000529r 2  B0 04                bcs     L280D
00052Br 2               L2809:
00052Br 2  A5 7A                lda     TXTTAB
00052Dr 2  A6 7B                ldx     TXTTAB+1
00052Fr 2               L280D:
00052Fr 2               .ifdef KBD
00052Fr 2                       jsr     LF457
00052Fr 2                       bne     UNDERR
00052Fr 2               .else
00052Fr 2  20 rr rr             jsr     FL1
000532r 2  90 1E                bcc     UNDERR
000534r 2               .endif
000534r 2  A5 AE                lda     LOWTRX
000536r 2  E9 01                sbc     #$01
000538r 2  85 C9                sta     TXTPTR
00053Ar 2  A5 AF                lda     LOWTRX+1
00053Cr 2  E9 00                sbc     #$00
00053Er 2  85 CA                sta     TXTPTR+1
000540r 2               L281E:
000540r 2  60                   rts
000541r 2               
000541r 2               ; ----------------------------------------------------------------------------
000541r 2               ; "POP" AND "RETURN" STATEMENTS
000541r 2               ; ----------------------------------------------------------------------------
000541r 2               POP:
000541r 2  D0 FD                bne     L281E
000543r 2  A9 FF                lda     #$FF
000545r 2               .ifdef CONFIG_2A
000545r 2                       sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000545r 2               .else
000545r 2  85 98                sta     FORPNT
000547r 2               .endif
000547r 2  20 rr rr             jsr     GTFORPNT
00054Ar 2  9A                   txs
00054Br 2  C9 8D                cmp     #TOKEN_GOSUB
00054Dr 2  F0 0B                beq     RETURN
00054Fr 2  A2 16                ldx     #ERR_NOGOSUB
000551r 2  2C                   .byte   $2C
000552r 2               UNDERR:
000552r 2  A2 5F                ldx     #ERR_UNDEFSTAT
000554r 2  4C rr rr             jmp     ERROR
000557r 2               ; ----------------------------------------------------------------------------
000557r 2               SYNERR2:
000557r 2  4C rr rr             jmp     SYNERR
00055Ar 2               ; ----------------------------------------------------------------------------
00055Ar 2               RETURN:
00055Ar 2  68                   pla
00055Br 2  68                   pla
00055Cr 2  85 88                sta     CURLIN
00055Er 2  68                   pla
00055Fr 2  85 89                sta     CURLIN+1
000561r 2  68                   pla
000562r 2  85 C9                sta     TXTPTR
000564r 2  68                   pla
000565r 2  85 CA                sta     TXTPTR+1
000567r 2               
000567r 2               ; ----------------------------------------------------------------------------
000567r 2               ; "DATA" STATEMENT
000567r 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
000567r 2               ; ----------------------------------------------------------------------------
000567r 2               DATA:
000567r 2  20 rr rr             jsr     DATAN
00056Ar 2               
00056Ar 2               ; ----------------------------------------------------------------------------
00056Ar 2               ; ADD (Y) TO TXTPTR
00056Ar 2               ; ----------------------------------------------------------------------------
00056Ar 2               ADDON:
00056Ar 2  98                   tya
00056Br 2  18                   clc
00056Cr 2  65 C9                adc     TXTPTR
00056Er 2  85 C9                sta     TXTPTR
000570r 2  90 02                bcc     L2852
000572r 2  E6 CA                inc     TXTPTR+1
000574r 2               L2852:
000574r 2  60                   rts
000575r 2               
000575r 2               ; ----------------------------------------------------------------------------
000575r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000575r 2               ; ----------------------------------------------------------------------------
000575r 2               DATAN:
000575r 2  A2 3A                ldx     #$3A
000577r 2  2C                   .byte   $2C
000578r 2               REMN:
000578r 2  A2 00                ldx     #$00
00057Ar 2  86 5A                stx     CHARAC
00057Cr 2  A0 00                ldy     #$00
00057Er 2  84 5B                sty     ENDCHR
000580r 2               L285E:
000580r 2  A5 5B                lda     ENDCHR
000582r 2  A6 5A                ldx     CHARAC
000584r 2  85 5A                sta     CHARAC
000586r 2  86 5B                stx     ENDCHR
000588r 2               L2866:
000588r 2  B1 C9                lda     (TXTPTR),y
00058Ar 2  F0 E8                beq     L2852
00058Cr 2  C5 5B                cmp     ENDCHR
00058Er 2  F0 E4                beq     L2852
000590r 2  C8                   iny
000591r 2  C9 22                cmp     #$22
000593r 2               .ifndef CONFIG_11
000593r 2  F0 EB                beq     L285E; old: swap & cont is faster
000595r 2  D0 F1                bne     L2866
000597r 2               .else
000597r 2                       bne     L2866; new: cont is faster
000597r 2                       beq     L285E
000597r 2               .endif
000597r 2               
000597r 2               ; ----------------------------------------------------------------------------
000597r 2               ; "IF" STATEMENT
000597r 2               ; ----------------------------------------------------------------------------
000597r 2               IF:
000597r 2  20 rr rr             jsr     FRMEVL
00059Ar 2  20 C8 00             jsr     CHRGOT
00059Dr 2  C9 89                cmp     #TOKEN_GOTO
00059Fr 2  F0 05                beq     L2884
0005A1r 2  A9 A7                lda     #TOKEN_THEN
0005A3r 2  20 rr rr             jsr     SYNCHR
0005A6r 2               L2884:
0005A6r 2  A5 B0                lda     FAC
0005A8r 2  D0 05                bne     L288D
0005AAr 2               
0005AAr 2               ; ----------------------------------------------------------------------------
0005AAr 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005AAr 2               ; ----------------------------------------------------------------------------
0005AAr 2               REM:
0005AAr 2  20 rr rr             jsr     REMN
0005ADr 2  F0 BB                beq     ADDON
0005AFr 2               L288D:
0005AFr 2  20 C8 00             jsr     CHRGOT
0005B2r 2  B0 03                bcs     L2895
0005B4r 2  4C rr rr             jmp     GOTO
0005B7r 2               L2895:
0005B7r 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005BAr 2               
0005BAr 2               ; ----------------------------------------------------------------------------
0005BAr 2               ; "ON" STATEMENT
0005BAr 2               ;
0005BAr 2               ; ON <EXP> GOTO <LIST>
0005BAr 2               ; ON <EXP> GOSUB <LIST>
0005BAr 2               ; ----------------------------------------------------------------------------
0005BAr 2               ON:
0005BAr 2  20 rr rr             jsr     GETBYT
0005BDr 2  48                   pha
0005BEr 2  C9 8D                cmp     #TOKEN_GOSUB
0005C0r 2  F0 04                beq     L28A4
0005C2r 2               L28A0:
0005C2r 2  C9 89                cmp     #TOKEN_GOTO
0005C4r 2  D0 91                bne     SYNERR2
0005C6r 2               L28A4:
0005C6r 2  C6 B4                dec     FAC_LAST
0005C8r 2  D0 04                bne     L28AC
0005CAr 2  68                   pla
0005CBr 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005CEr 2               L28AC:
0005CEr 2  20 C2 00             jsr     CHRGET
0005D1r 2  20 rr rr             jsr     LINGET
0005D4r 2  C9 2C                cmp     #$2C
0005D6r 2  F0 EE                beq     L28A4
0005D8r 2  68                   pla
0005D9r 2               L28B7:
0005D9r 2  60                   rts
0005DAr 2               
0005DAr 1               .include "misc1.s"
0005DAr 2               .segment "CODE"
0005DAr 2               
0005DAr 2               ; ----------------------------------------------------------------------------
0005DAr 2               ; CONVERT LINE NUMBER
0005DAr 2               ; ----------------------------------------------------------------------------
0005DAr 2               LINGET:
0005DAr 2  A2 00                ldx     #$00
0005DCr 2  86 08                stx     LINNUM
0005DEr 2  86 09                stx     LINNUM+1
0005E0r 2               L28BE:
0005E0r 2  B0 F7                bcs     L28B7
0005E2r 2  E9 2F                sbc     #$2F
0005E4r 2  85 5A                sta     CHARAC
0005E6r 2  A5 09                lda     LINNUM+1
0005E8r 2  85 71                sta     INDEX
0005EAr 2  C9 19                cmp     #$19
0005ECr 2  B0 D4                bcs     L28A0
0005EEr 2               ; <<<<<DANGEROUS CODE>>>>>
0005EEr 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
0005EEr 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
0005EEr 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
0005EEr 2               ; FOR OTHER CALLS TO LINGET.
0005EEr 2               ;
0005EEr 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
0005EEr 2               ; THEN TYPE "GO TO 437761".
0005EEr 2               ;
0005EEr 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
0005EEr 2               ; THE PROBLEM.  ($AB00 - $ABFF)
0005EEr 2               ; <<<<<DANGEROUS CODE>>>>>
0005EEr 2  A5 08                lda     LINNUM
0005F0r 2  0A                   asl     a
0005F1r 2  26 71                rol     INDEX
0005F3r 2  0A                   asl     a
0005F4r 2  26 71                rol     INDEX
0005F6r 2  65 08                adc     LINNUM
0005F8r 2  85 08                sta     LINNUM
0005FAr 2  A5 71                lda     INDEX
0005FCr 2  65 09                adc     LINNUM+1
0005FEr 2  85 09                sta     LINNUM+1
000600r 2  06 08                asl     LINNUM
000602r 2  26 09                rol     LINNUM+1
000604r 2  A5 08                lda     LINNUM
000606r 2  65 5A                adc     CHARAC
000608r 2  85 08                sta     LINNUM
00060Ar 2  90 02                bcc     L28EC
00060Cr 2  E6 09                inc     LINNUM+1
00060Er 2               L28EC:
00060Er 2  20 C2 00             jsr     CHRGET
000611r 2  4C rr rr             jmp     L28BE
000614r 2               
000614r 2               ; ----------------------------------------------------------------------------
000614r 2               ; "LET" STATEMENT
000614r 2               ;
000614r 2               ; LET <VAR> = <EXP>
000614r 2               ; <VAR> = <EXP>
000614r 2               ; ----------------------------------------------------------------------------
000614r 2               LET:
000614r 2  20 rr rr             jsr     PTRGET
000617r 2  85 98                sta     FORPNT
000619r 2  84 99                sty     FORPNT+1
00061Br 2  A9 B2                lda     #TOKEN_EQUAL
00061Dr 2  20 rr rr             jsr     SYNCHR
000620r 2               .ifndef CONFIG_SMALL
000620r 2  A5 5F                lda     VALTYP+1
000622r 2  48                   pha
000623r 2               .endif
000623r 2  A5 5E                lda     VALTYP
000625r 2  48                   pha
000626r 2  20 rr rr             jsr     FRMEVL
000629r 2  68                   pla
00062Ar 2  2A                   rol     a
00062Br 2  20 rr rr             jsr     CHKVAL
00062Er 2  D0 18                bne     LETSTRING
000630r 2               .ifndef CONFIG_SMALL
000630r 2  68                   pla
000631r 2               LET2:
000631r 2  10 12                bpl     L2923
000633r 2  20 rr rr             jsr     ROUND_FAC
000636r 2  20 rr rr             jsr     AYINT
000639r 2  A0 00                ldy     #$00
00063Br 2  A5 B3                lda     FAC+3
00063Dr 2  91 98                sta     (FORPNT),y
00063Fr 2  C8                   iny
000640r 2  A5 B4                lda     FAC+4
000642r 2  91 98                sta     (FORPNT),y
000644r 2  60                   rts
000645r 2               L2923:
000645r 2               .endif
000645r 2               
000645r 2               ; ----------------------------------------------------------------------------
000645r 2               ; REAL VARIABLE = EXPRESSION
000645r 2               ; ----------------------------------------------------------------------------
000645r 2  4C rr rr             jmp     SETFOR
000648r 2               LETSTRING:
000648r 2               .ifndef CONFIG_SMALL
000648r 2  68                   pla
000649r 2               .endif
000649r 2               
000649r 2               ; ----------------------------------------------------------------------------
000649r 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
000649r 2               ; ----------------------------------------------------------------------------
000649r 2               PUTSTR:
000649r 2               .ifdef CONFIG_CBM_ALL
000649r 2  A4 99                ldy     FORPNT+1
00064Br 2                 .ifdef CBM1
00064Br 2  C0 D0                cpy     #$D0	; TI$
00064Dr 2                 .else
00064Dr 2                       cpy     #$DE
00064Dr 2                 .endif
00064Dr 2  D0 53                bne     LC92B
00064Fr 2  20 rr rr             jsr     FREFAC
000652r 2  C9 06                cmp     #$06
000654r 2                 .ifdef CBM2
000654r 2                       bne     IQERR1
000654r 2                 .else
000654r 2  F0 03 4C rr          jne     IQERR
000658r 2  rr           
000659r 2                 .endif
000659r 2  A0 00                ldy     #$00
00065Br 2  84 B0                sty     FAC
00065Dr 2  84 B5                sty     FACSIGN
00065Fr 2               LC8E8:
00065Fr 2  84 C0                sty     STRNG2
000661r 2  20 rr rr             jsr     LC91C
000664r 2  20 rr rr             jsr     MUL10
000667r 2  E6 C0                inc     STRNG2
000669r 2  A4 C0                ldy     STRNG2
00066Br 2  20 rr rr             jsr     LC91C
00066Er 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
000671r 2  AA                   tax
000672r 2  F0 05                beq     LC902
000674r 2  E8                   inx
000675r 2  8A                   txa
000676r 2  20 rr rr             jsr     LD9BF
000679r 2               LC902:
000679r 2  A4 C0                ldy     STRNG2
00067Br 2  C8                   iny
00067Cr 2  C0 06                cpy     #$06
00067Er 2  D0 DF                bne     LC8E8
000680r 2  20 rr rr             jsr     MUL10
000683r 2  20 rr rr             jsr     QINT
000686r 2  A2 02                ldx     #$02
000688r 2  78                   sei
000689r 2               LC912:
000689r 2  B5 B2                lda     FAC+2,x
00068Br 2  9D 00 02             sta     TISTR,x
00068Er 2  CA                   dex
00068Fr 2  10 F8                bpl     LC912
000691r 2  58                   cli
000692r 2  60                   rts
000693r 2               LC91C:
000693r 2  B1 71                lda     (INDEX),y
000695r 2  20 CF 00             jsr     CHRGOT2
000698r 2  90 03                bcc     LC926
00069Ar 2               IQERR1:
00069Ar 2  4C rr rr             jmp     IQERR
00069Dr 2               LC926:
00069Dr 2  E9 2F                sbc     #$2F
00069Fr 2  4C rr rr             jmp     ADDACC
0006A2r 2               LC92B:
0006A2r 2               .endif
0006A2r 2  A0 02                ldy     #$02
0006A4r 2  B1 B3                lda     (FAC_LAST-1),y
0006A6r 2  C5 83                cmp     FRETOP+1
0006A8r 2  90 17                bcc     L2946
0006AAr 2  D0 07                bne     L2938
0006ACr 2  88                   dey
0006ADr 2  B1 B3                lda     (FAC_LAST-1),y
0006AFr 2  C5 82                cmp     FRETOP
0006B1r 2  90 0E                bcc     L2946
0006B3r 2               L2938:
0006B3r 2  A4 B4                ldy     FAC_LAST
0006B5r 2  C4 7D                cpy     VARTAB+1
0006B7r 2  90 08                bcc     L2946
0006B9r 2  D0 0D                bne     L294D
0006BBr 2  A5 B3                lda     FAC_LAST-1
0006BDr 2  C5 7C                cmp     VARTAB
0006BFr 2  B0 07                bcs     L294D
0006C1r 2               L2946:
0006C1r 2  A5 B3                lda     FAC_LAST-1
0006C3r 2  A4 B4                ldy     FAC_LAST
0006C5r 2  4C rr rr             jmp     L2963
0006C8r 2               L294D:
0006C8r 2  A0 00                ldy     #$00
0006CAr 2  B1 B3                lda     (FAC_LAST-1),y
0006CCr 2  20 rr rr             jsr     STRINI
0006CFr 2  A5 9F                lda     DSCPTR
0006D1r 2  A4 A0                ldy     DSCPTR+1
0006D3r 2  85 BE                sta     STRNG1
0006D5r 2  84 BF                sty     STRNG1+1
0006D7r 2  20 rr rr             jsr     MOVINS
0006DAr 2  A9 B0                lda     #FAC
0006DCr 2  A0 00                ldy     #$00
0006DEr 2               L2963:
0006DEr 2  85 9F                sta     DSCPTR
0006E0r 2  84 A0                sty     DSCPTR+1
0006E2r 2  20 rr rr             jsr     FRETMS
0006E5r 2  A0 00                ldy     #$00
0006E7r 2  B1 9F                lda     (DSCPTR),y
0006E9r 2  91 98                sta     (FORPNT),y
0006EBr 2  C8                   iny
0006ECr 2  B1 9F                lda     (DSCPTR),y
0006EEr 2  91 98                sta     (FORPNT),y
0006F0r 2  C8                   iny
0006F1r 2  B1 9F                lda     (DSCPTR),y
0006F3r 2  91 98                sta     (FORPNT),y
0006F5r 2               RET5:
0006F5r 2  60                   rts
0006F6r 2               .ifdef AIM65
0006F6r 2               LB89D:
0006F6r 2                       cmp     #$21
0006F6r 2                       bne     RET5
0006F6r 2                       lda     #$80
0006F6r 2                       sta     PRIFLG
0006F6r 2                       jmp     CHRGET
0006F6r 2               .endif
0006F6r 2               
0006F6r 2               .ifdef CONFIG_FILE
0006F6r 2               PRINTH:
0006F6r 2  20 rr rr             jsr     CMD
0006F9r 2  4C rr rr             jmp     LCAD6
0006FCr 2               CMD:
0006FCr 2  20 rr rr             jsr     GETBYT
0006FFr 2  F0 05                beq     LC98F
000701r 2  A9 2C                lda     #$2C
000703r 2  20 rr rr             jsr     SYNCHR
000706r 2               LC98F:
000706r 2  08                   php
000707r 2  20 C9 FF             jsr     CHKOUT
00070Ar 2  86 03                stx     CURDVC
00070Cr 2  28                   plp
00070Dr 2  4C rr rr             jmp     PRINT
000710r 2               .endif
000710r 2               
000710r 2               
000710r 1               .include "print.s"
000710r 2               .segment "CODE"
000710r 2               
000710r 2               .ifdef AIM65
000710r 2               PRINT:
000710r 2                       lda     PRIFLG
000710r 2                       sta     ZBE
000710r 2                       jsr     L297E
000710r 2               LB8B1:
000710r 2                       lda     ZBE
000710r 2                       sta     PRIFLG
000710r 2                       rts
000710r 2               .endif
000710r 2               
000710r 2               PRSTRING:
000710r 2  20 rr rr             jsr     STRPRT
000713r 2               L297E:
000713r 2  20 C8 00             jsr     CHRGOT
000716r 2               
000716r 2               ; ----------------------------------------------------------------------------
000716r 2               ; "PRINT" STATEMENT
000716r 2               ; ----------------------------------------------------------------------------
000716r 2               .ifndef AIM65
000716r 2               PRINT:
000716r 2               .endif
000716r 2  F0 31                beq     CRDO
000718r 2               PRINT2:
000718r 2  F0 55                beq     L29DD
00071Ar 2               .ifdef AIM65
00071Ar 2                       jsr     LB89D
00071Ar 2                       beq     L29DD
00071Ar 2               .endif
00071Ar 2  C9 A3                cmp     #TOKEN_TAB
00071Cr 2  F0 5F                beq     L29F5
00071Er 2  C9 A6                cmp     #TOKEN_SPC
000720r 2               .ifdef CONFIG_2
000720r 2                       clc	; also AppleSoft II
000720r 2               .endif
000720r 2  F0 5B                beq     L29F5
000722r 2  C9 2C                cmp     #','
000724r 2               ; Pre-KIM had no CLC. KIM added the CLC
000724r 2               ; here. Post-KIM moved the CLC up...
000724r 2               ; (makes no sense on KIM, liveness = 0)
000724r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
000724r 2                       clc
000724r 2               .endif
000724r 2  F0 4A                beq     L29DE
000726r 2  C9 3B                cmp     #$3B
000728r 2  F0 6E                beq     L2A0D
00072Ar 2  20 rr rr             jsr     FRMEVL
00072Dr 2  24 5E                bit     VALTYP
00072Fr 2  30 DF                bmi     PRSTRING
000731r 2  20 rr rr             jsr     FOUT
000734r 2  20 rr rr             jsr     STRLIT
000737r 2               .ifndef CONFIG_NO_CR
000737r 2                       ldy     #$00
000737r 2                       lda     (FAC_LAST-1),y
000737r 2                       clc
000737r 2                       adc     POSX
000737r 2                 .ifdef KBD
000737r 2                       cmp     #$28
000737r 2                 .else
000737r 2                       cmp     Z17
000737r 2                 .endif
000737r 2                       bcc     L29B1
000737r 2                       jsr     CRDO
000737r 2               L29B1:
000737r 2               .endif
000737r 2  20 rr rr             jsr     STRPRT
00073Ar 2               .ifdef KBD
00073Ar 2                       jmp     L297E
00073Ar 2               .else
00073Ar 2  20 rr rr             jsr     OUTSP
00073Dr 2  D0 D4                bne     L297E ; branch always
00073Fr 2               .endif
00073Fr 2               
00073Fr 2               .ifdef KBD
00073Fr 2               ; PATCHES
00073Fr 2               LE86C:
00073Fr 2                       pla
00073Fr 2                       jmp     CONTROL_C_TYPED
00073Fr 2               LE870:
00073Fr 2                       jsr     GETBYT
00073Fr 2                       txa
00073Fr 2               LE874:
00073Fr 2                       beq     LE878
00073Fr 2                       bpl     LE8F2
00073Fr 2               LE878:
00073Fr 2                       jmp     IQERR
00073Fr 2               ; PATCHES
00073Fr 2               .endif
00073Fr 2               
00073Fr 2               
00073Fr 2               
00073Fr 2               .ifndef KBD
00073Fr 2               L29B9:
00073Fr 2                 .ifdef CBM2
00073Fr 2                       lda     #$00
00073Fr 2                       sta     INPUTBUFFER,x
00073Fr 2                       ldx     #<(INPUTBUFFER-1)
00073Fr 2                       ldy     #>(INPUTBUFFER-1)
00073Fr 2                 .else
00073Fr 2                   .ifndef APPLE
00073Fr 2  A0 00                ldy     #$00
000741r 2  94 0A                sty     INPUTBUFFER,x
000743r 2  A2 09                ldx     #LINNUM+1
000745r 2                   .endif
000745r 2                   .if .def(MICROTAN) || .def(SYM1)
000745r 2                       bne     CRDO2
000745r 2               	.endif
000745r 2                 .endif
000745r 2                 .ifdef CONFIG_FILE
000745r 2  A5 03                lda     CURDVC
000747r 2  D0 26                bne     L29DD
000749r 2                 .endif
000749r 2               .endif
000749r 2               
000749r 2               
000749r 2               CRDO:
000749r 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
000749r 2  A5 03                lda     CURDVC
00074Br 2  D0 02                bne     LC9D8
00074Dr 2  85 05                sta     POSX
00074Fr 2               LC9D8:
00074Fr 2               .endif
00074Fr 2  A9 0D                lda     #CRLF_1
000751r 2               .ifndef CONFIG_CBM_ALL
000751r 2                       sta     POSX
000751r 2               .endif
000751r 2  20 rr rr             jsr     OUTDO
000754r 2               CRDO2:
000754r 2  A9 0A                lda     #CRLF_2
000756r 2  20 rr rr             jsr     OUTDO
000759r 2               
000759r 2               PRINTNULLS:
000759r 2               .if .def(KBD) || .def(AIM65)
000759r 2                       lda     #$00
000759r 2                       sta     POSX
000759r 2                       eor     #$FF
000759r 2               .else
000759r 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
000759r 2                   .ifdef CONFIG_FILE
000759r 2                   ; Although there is no statement for it,
000759r 2                   ; CBM1 had NULL support and ignores
000759r 2                   ; it when not targeting the screen,
000759r 2                   ; CBM2 dropped it completely.
000759r 2  A5 03                lda     CURDVC
00075Br 2  D0 12                bne     L29DD
00075Dr 2                   .endif
00075Dr 2  8A                   txa
00075Er 2  48                   pha
00075Fr 2  A6 04                ldx     Z15
000761r 2  F0 08                beq     L29D9
000763r 2                     .ifdef SYM1
000763r 2                       lda     #$FF
000763r 2                     .else
000763r 2  A9 00                lda     #$00
000765r 2                     .endif
000765r 2               L29D3:
000765r 2  20 rr rr             jsr     OUTDO
000768r 2  CA                   dex
000769r 2  D0 FA                bne     L29D3
00076Br 2               L29D9:
00076Br 2  86 05                stx     POSX
00076Dr 2  68                   pla
00076Er 2  AA                   tax
00076Fr 2                 .else
00076Fr 2                   .ifndef CONFIG_2
00076Fr 2                       lda     #$00
00076Fr 2                       sta     POSX
00076Fr 2                   .endif
00076Fr 2                       eor     #$FF
00076Fr 2                 .endif
00076Fr 2               .endif
00076Fr 2               L29DD:
00076Fr 2  60                   rts
000770r 2               L29DE:
000770r 2  A5 05                lda     POSX
000772r 2               .ifndef CONFIG_NO_CR
000772r 2                 .ifdef KBD
000772r 2                       cmp     #$1A
000772r 2                 .else
000772r 2                       cmp     Z18
000772r 2                 .endif
000772r 2                       bcc     L29EA
000772r 2                       jsr     CRDO
000772r 2                       jmp     L2A0D
000772r 2               L29EA:
000772r 2               .endif
000772r 2  38                   sec
000773r 2               L29EB:
000773r 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
000773r 2  E9 0A                sbc     #$0A
000775r 2               .else
000775r 2                 .ifdef KBD
000775r 2                       sbc     #$0D
000775r 2                 .else
000775r 2                       sbc     #$0E
000775r 2                 .endif
000775r 2               .endif
000775r 2  B0 FC                bcs     L29EB
000777r 2  49 FF                eor     #$FF
000779r 2  69 01                adc     #$01
00077Br 2  D0 14                bne     L2A08
00077Dr 2               L29F5:
00077Dr 2               .ifdef CONFIG_11A
00077Dr 2                       php
00077Dr 2               .else
00077Dr 2  48                   pha
00077Er 2               .endif
00077Er 2  20 rr rr             jsr     GTBYTC
000781r 2  C9 29                cmp     #')'
000783r 2               .ifdef CONFIG_11A
000783r 2                 .ifdef CONFIG_2
000783r 2                       bne     SYNERR4
000783r 2                 .else
000783r 2                       jne     SYNERR
000783r 2                 .endif
000783r 2                       plp
000783r 2                       bcc     L2A09
000783r 2               .else
000783r 2                 .ifdef CONFIG_11
000783r 2                       jne     SYNERR
000783r 2                 .else
000783r 2  D0 75                bne     SYNERR4
000785r 2                 .endif
000785r 2  68                   pla
000786r 2  C9 A3                cmp     #TOKEN_TAB
000788r 2                 .ifdef CONFIG_11
000788r 2                       bne     L2A09
000788r 2                 .else
000788r 2  D0 08                bne     L2A0A
00078Ar 2                 .endif
00078Ar 2               .endif
00078Ar 2  8A                   txa
00078Br 2  E5 05                sbc     POSX
00078Dr 2  90 09                bcc     L2A0D
00078Fr 2               .ifndef CONFIG_11
00078Fr 2  F0 07                beq     L2A0D
000791r 2               .endif
000791r 2               L2A08:
000791r 2  AA                   tax
000792r 2               .ifdef CONFIG_11
000792r 2               L2A09:
000792r 2                       inx
000792r 2               .endif
000792r 2               L2A0A:
000792r 2               .ifndef CONFIG_11
000792r 2  20 rr rr             jsr     OUTSP
000795r 2               .endif
000795r 2  CA                   dex
000796r 2               .ifndef CONFIG_11
000796r 2  D0 FA                bne     L2A0A
000798r 2               .else
000798r 2                       bne     L2A13
000798r 2               .endif
000798r 2               L2A0D:
000798r 2  20 C2 00             jsr     CHRGET
00079Br 2  4C rr rr             jmp     PRINT2
00079Er 2               .ifdef CONFIG_11
00079Er 2               L2A13:
00079Er 2                       jsr     OUTSP
00079Er 2                       bne     L2A0A
00079Er 2               .endif
00079Er 2               
00079Er 2               ; ----------------------------------------------------------------------------
00079Er 2               ; PRINT STRING AT (Y,A)
00079Er 2               ; ----------------------------------------------------------------------------
00079Er 2               STROUT:
00079Er 2  20 rr rr             jsr     STRLIT
0007A1r 2               
0007A1r 2               ; ----------------------------------------------------------------------------
0007A1r 2               ; PRINT STRING AT (FACMO,FACLO)
0007A1r 2               ; ----------------------------------------------------------------------------
0007A1r 2               STRPRT:
0007A1r 2  20 rr rr             jsr     FREFAC
0007A4r 2  AA                   tax
0007A5r 2  A0 00                ldy     #$00
0007A7r 2  E8                   inx
0007A8r 2               L2A22:
0007A8r 2  CA                   dex
0007A9r 2  F0 C4                beq     L29DD
0007ABr 2  B1 71                lda     (INDEX),y
0007ADr 2  20 rr rr             jsr     OUTDO
0007B0r 2  C8                   iny
0007B1r 2  C9 0D                cmp     #$0D
0007B3r 2  D0 F3                bne     L2A22
0007B5r 2  20 rr rr             jsr     PRINTNULLS
0007B8r 2  4C rr rr             jmp     L2A22
0007BBr 2               ; ----------------------------------------------------------------------------
0007BBr 2               OUTSP:
0007BBr 2               .ifdef CONFIG_FILE
0007BBr 2                 .ifndef CBM1
0007BBr 2               ; on non-screen devices, print SPACE
0007BBr 2               ; instead of CRSR RIGHT
0007BBr 2                       lda     CURDVC
0007BBr 2                       beq     LCA40
0007BBr 2                       lda     #$20
0007BBr 2                       .byte   $2C
0007BBr 2               LCA40:
0007BBr 2                 .endif
0007BBr 2  A9 1D                lda     #$1D ; CRSR RIGHT
0007BDr 2               .else
0007BDr 2                       lda     #$20
0007BDr 2               .endif
0007BDr 2  2C                   .byte   $2C
0007BEr 2               OUTQUES:
0007BEr 2  A9 3F                lda     #$3F
0007C0r 2               
0007C0r 2               ; ----------------------------------------------------------------------------
0007C0r 2               ; PRINT CHAR FROM (A)
0007C0r 2               ; ----------------------------------------------------------------------------
0007C0r 2               OUTDO:
0007C0r 2               .ifndef KBD
0007C0r 2  24 64                bit     Z14
0007C2r 2  30 27                bmi     L2A56
0007C4r 2               .endif
0007C4r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007C4r 2               ; Commodore forgot to remove this in CBM1
0007C4r 2  48                   pha
0007C5r 2               .endif
0007C5r 2               .ifdef CBM1
0007C5r 2  C9 1D                cmp     #$1D ; CRSR RIGHT
0007C7r 2  F0 18                beq     LCA6A
0007C9r 2  C9 9D                cmp     #$9D ; CRSR LEFT
0007CBr 2  F0 04                beq     LCA5A
0007CDr 2  C9 14                cmp     #$14 ; DEL
0007CFr 2  D0 0A                bne     LCA64
0007D1r 2               LCA5A:
0007D1r 2  A5 05                lda     POSX
0007D3r 2  F0 12                beq     L2A4E
0007D5r 2  A5 03                lda     CURDVC
0007D7r 2  D0 0E                bne     L2A4E
0007D9r 2  C6 05                dec     POSX
0007DBr 2               LCA64:
0007DBr 2  29 7F                and     #$7F
0007DDr 2               .endif
0007DDr 2               .ifndef CBM2
0007DDr 2  C9 20                cmp     #$20
0007DFr 2  90 06                bcc     L2A4E
0007E1r 2               .endif
0007E1r 2               LCA6A:
0007E1r 2               .ifdef CONFIG_CBM1_PATCHES
0007E1r 2  A5 03                lda     CURDVC
0007E3r 2  20 rr rr             jsr     PATCH6
0007E6r 2  EA                   nop
0007E7r 2               .endif
0007E7r 2               .ifdef CONFIG_PRINT_CR
0007E7r 2                       lda     POSX
0007E7r 2                       cmp     Z17
0007E7r 2                       bne     L2A4C
0007E7r 2                 .ifdef AIM65
0007E7r 2                       lda #$00
0007E7r 2                       sta POSX
0007E7r 2                 .elseif .def(APPLE)
0007E7r 2                       nop ; PATCH!
0007E7r 2                       nop ; don't print CR
0007E7r 2                       nop
0007E7r 2                 .else
0007E7r 2                       jsr     CRDO
0007E7r 2                 .endif
0007E7r 2               L2A4C:
0007E7r 2               .endif
0007E7r 2               .ifndef CONFIG_CBM_ALL
0007E7r 2                       inc     POSX
0007E7r 2               .endif
0007E7r 2               L2A4E:
0007E7r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
0007E7r 2               ; Commodore forgot to remove this in CBM1
0007E7r 2  68                   pla
0007E8r 2               .endif
0007E8r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007E8r 2                       sty     DIMFLG
0007E8r 2               .endif
0007E8r 2               .ifdef CONFIG_IO_MSB
0007E8r 2                       ora     #$80
0007E8r 2               .endif
0007E8r 2  20 D2 FF             jsr     MONCOUT
0007EBr 2               .ifdef CONFIG_IO_MSB
0007EBr 2                       and     #$7F
0007EBr 2               .endif
0007EBr 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
0007EBr 2                       ldy     DIMFLG
0007EBr 2               .endif
0007EBr 2               .ifdef OSI
0007EBr 2                       nop
0007EBr 2                       nop
0007EBr 2                       nop
0007EBr 2                       nop
0007EBr 2               .endif
0007EBr 2               L2A56:
0007EBr 2  29 FF                and     #$FF
0007EDr 2               LE8F2:
0007EDr 2  60                   rts
0007EEr 2               
0007EEr 2               ; ----------------------------------------------------------------------------
0007EEr 2               ; ???
0007EEr 2               ; ----------------------------------------------------------------------------
0007EEr 2               .ifdef KBD
0007EEr 2               LE8F3:
0007EEr 2                       pha
0007EEr 2                       lda     $047F
0007EEr 2                       clc
0007EEr 2                       beq     LE900
0007EEr 2                       lda     #$00
0007EEr 2                       sta     $047F
0007EEr 2                       sec
0007EEr 2               LE900:
0007EEr 2                       pla
0007EEr 2                       rts
0007EEr 2               .endif
0007EEr 2               
0007EEr 1               .include "input.s"
0007EEr 2               .segment "CODE"
0007EEr 2               
0007EEr 2               ; ----------------------------------------------------------------------------
0007EEr 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
0007EEr 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
0007EEr 2               ; BETWEEN INPUT, READ, AND GET
0007EEr 2               ; ----------------------------------------------------------------------------
0007EEr 2               INPUTERR:
0007EEr 2  A5 62                lda     INPUTFLG
0007F0r 2  F0 0B                beq     RESPERR	; INPUT
0007F2r 2               .ifndef SYM1
0007F2r 2               .ifndef CONFIG_SMALL
0007F2r 2               .ifdef CONFIG_10A
0007F2r 2               ; without this, it treats GET errors
0007F2r 2               ; like READ errors
0007F2r 2                       bmi     L2A63	; READ
0007F2r 2                       ldy     #$FF	; GET
0007F2r 2                       bne     L2A67
0007F2r 2               L2A63:
0007F2r 2               .endif
0007F2r 2               .endif
0007F2r 2               .endif
0007F2r 2               .ifdef CONFIG_CBM1_PATCHES
0007F2r 2  20 rr rr             jsr     PATCH5
0007F5r 2  EA           		nop
0007F6r 2               .else
0007F6r 2                       lda     Z8C
0007F6r 2                       ldy     Z8C+1
0007F6r 2               .endif
0007F6r 2               L2A67:
0007F6r 2  85 88                sta     CURLIN
0007F8r 2  84 89                sty     CURLIN+1
0007FAr 2               SYNERR4:
0007FAr 2  4C rr rr             jmp     SYNERR
0007FDr 2               RESPERR:
0007FDr 2               .ifdef CONFIG_FILE
0007FDr 2  A5 03                lda     CURDVC
0007FFr 2  F0 05                beq     LCA8F
000801r 2  A2 C4                ldx     #ERR_BADDATA
000803r 2  4C rr rr             jmp     ERROR
000806r 2               LCA8F:
000806r 2               .endif
000806r 2  A9 rr                lda     #<ERRREENTRY
000808r 2  A0 rr                ldy     #>ERRREENTRY
00080Ar 2  20 rr rr             jsr     STROUT
00080Dr 2  A5 8C                lda     OLDTEXT
00080Fr 2  A4 8D                ldy     OLDTEXT+1
000811r 2  85 C9                sta     TXTPTR
000813r 2  84 CA                sty     TXTPTR+1
000815r 2               RTS20:
000815r 2  60                   rts
000816r 2               
000816r 2               ; ----------------------------------------------------------------------------
000816r 2               ; "GET" STATEMENT
000816r 2               ; ----------------------------------------------------------------------------
000816r 2               .ifndef CONFIG_SMALL
000816r 2               .ifndef SYM1
000816r 2               GET:
000816r 2  20 rr rr             jsr     ERRDIR
000819r 2               ; CBM: if GET#, then switch input
000819r 2               .ifdef CONFIG_FILE
000819r 2  C9 23                cmp     #'#'
00081Br 2  D0 10                bne     LCAB6
00081Dr 2  20 C2 00             jsr     CHRGET
000820r 2  20 rr rr             jsr     GETBYT
000823r 2  A9 2C                lda     #','
000825r 2  20 rr rr             jsr     SYNCHR
000828r 2  20 C6 FF             jsr     CHKIN
00082Br 2  86 03                stx     CURDVC
00082Dr 2               LCAB6:
00082Dr 2               .endif
00082Dr 2  A2 0B                ldx     #<(INPUTBUFFER+1)
00082Fr 2  A0 00                ldy     #>(INPUTBUFFER+1)
000831r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000831r 2                       lda     #$00
000831r 2                       sta     INPUTBUFFER+1
000831r 2               .else
000831r 2  84 0B                sty     INPUTBUFFER+1
000833r 2               .endif
000833r 2  A9 40                lda     #$40
000835r 2  20 rr rr             jsr     PROCESS_INPUT_LIST
000838r 2               ; CBM: if GET#, then switch input back
000838r 2               .ifdef CONFIG_FILE
000838r 2  A6 03                ldx     CURDVC
00083Ar 2  D0 13                bne     LCAD8
00083Cr 2               .endif
00083Cr 2  60                   rts
00083Dr 2               .endif
00083Dr 2               .endif
00083Dr 2               
00083Dr 2               ; ----------------------------------------------------------------------------
00083Dr 2               ; "INPUT#" STATEMENT
00083Dr 2               ; ----------------------------------------------------------------------------
00083Dr 2               .ifdef CONFIG_FILE
00083Dr 2               INPUTH:
00083Dr 2  20 rr rr             jsr     GETBYT
000840r 2  A9 2C                lda     #$2C
000842r 2  20 rr rr             jsr     SYNCHR
000845r 2  20 C6 FF             jsr     CHKIN
000848r 2  86 03                stx     CURDVC
00084Ar 2  20 rr rr             jsr     L2A9E
00084Dr 2               LCAD6:
00084Dr 2  A5 03                lda     CURDVC
00084Fr 2               LCAD8:
00084Fr 2  20 CC FF             jsr     CLRCH
000852r 2  A2 00                ldx     #$00
000854r 2  86 03                stx     CURDVC
000856r 2  60                   rts
000857r 2               LCAE0:
000857r 2               .endif
000857r 2               
000857r 2               .ifdef SYM1
000857r 2               LC9B0:
000857r 2                       jsr     OUTQUES	; '?'
000857r 2                       jsr     OUTSP
000857r 2                       jmp     L2A9E
000857r 2               .endif
000857r 2               ; ----------------------------------------------------------------------------
000857r 2               ; "INPUT" STATEMENT
000857r 2               ; ----------------------------------------------------------------------------
000857r 2               INPUT:
000857r 2               .ifndef KBD
000857r 2  46 64                lsr     Z14
000859r 2               .endif
000859r 2               .ifdef AIM65
000859r 2                       lda     PRIFLG
000859r 2                       sta     ZBE
000859r 2                       jsr     LCFFA
000859r 2               .endif
000859r 2  C9 22                cmp     #$22
00085Br 2               .ifdef SYM1
00085Br 2                       bne     LC9B0
00085Br 2               .else
00085Br 2  D0 0B                bne     L2A9E
00085Dr 2               .endif
00085Dr 2  20 rr rr             jsr     STRTXT
000860r 2  A9 3B                lda     #$3B
000862r 2  20 rr rr             jsr     SYNCHR
000865r 2  20 rr rr             jsr     STRPRT
000868r 2               L2A9E:
000868r 2  20 rr rr             jsr     ERRDIR
00086Br 2  A9 2C                lda     #$2C
00086Dr 2  85 09                sta     INPUTBUFFER-1
00086Fr 2               LCAF8:
00086Fr 2               .ifdef APPLE
00086Fr 2                       jsr     INLINX
00086Fr 2               .elseif .def(SYM1)
00086Fr 2                       jsr     INLIN
00086Fr 2               .else
00086Fr 2  20 rr rr             jsr     NXIN
000872r 2               .endif
000872r 2               .ifdef KBD
000872r 2                       bmi     L2ABE
000872r 2               .else
000872r 2                 .ifdef CONFIG_FILE
000872r 2  A5 03                lda     CURDVC
000874r 2  F0 0D                beq     LCB0C
000876r 2  AD 0C 02             lda     Z96
000879r 2  29 02                and     #$02
00087Br 2  F0 06                beq     LCB0C
00087Dr 2  20 rr rr             jsr     LCAD6
000880r 2  4C rr rr             jmp     DATA
000883r 2               LCB0C:
000883r 2                 .endif
000883r 2  A5 0A                lda     INPUTBUFFER
000885r 2  D0 19                bne     L2ABE
000887r 2                 .ifdef CONFIG_FILE
000887r 2  A5 03                lda     CURDVC
000889r 2  D0 E4                bne     LCAF8
00088Br 2                 .endif
00088Br 2                 .ifdef CONFIG_CBM1_PATCHES
00088Br 2  4C rr rr             jmp     PATCH1
00088Er 2                 .else
00088Er 2                       clc
00088Er 2                       jmp     CONTROL_C_TYPED
00088Er 2                 .endif
00088Er 2               .endif
00088Er 2               
00088Er 2               NXIN:
00088Er 2               .ifdef KBD
00088Er 2                       jsr     INLIN
00088Er 2                       bmi     RTS20
00088Er 2                       pla
00088Er 2                       jmp     LE86C
00088Er 2               .else
00088Er 2                 .ifdef CONFIG_FILE
00088Er 2  A5 03                lda     CURDVC
000890r 2  D0 06                bne     LCB21
000892r 2                 .endif
000892r 2  20 rr rr             jsr     OUTQUES	; '?'
000895r 2  20 rr rr             jsr     OUTSP
000898r 2               LCB21:
000898r 2  4C rr rr             jmp     INLIN
00089Br 2               .endif
00089Br 2               
00089Br 2               ; ----------------------------------------------------------------------------
00089Br 2               ; "GETC" STATEMENT
00089Br 2               ; ----------------------------------------------------------------------------
00089Br 2               .ifdef KBD
00089Br 2               GETC:
00089Br 2                       jsr     CONINT
00089Br 2                       jsr     LF43D
00089Br 2                       jmp     LE664
00089Br 2               .endif
00089Br 2               
00089Br 2               ; ----------------------------------------------------------------------------
00089Br 2               ; "READ" STATEMENT
00089Br 2               ; ----------------------------------------------------------------------------
00089Br 2               READ:
00089Br 2  A6 90                ldx     DATPTR
00089Dr 2  A4 91                ldy     DATPTR+1
00089Fr 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
00089Fr 2               ; AppleSoft II, too
00089Fr 2                       lda     #$98	; READ
00089Fr 2                       .byte   $2C
00089Fr 2               L2ABE:
00089Fr 2                       lda     #$00	; INPUT
00089Fr 2               .else
00089Fr 2  A9                   .byte   $A9	; LDA #$98
0008A0r 2               L2ABE:
0008A0r 2  98                   tya
0008A1r 2               .endif
0008A1r 2               
0008A1r 2               ; ----------------------------------------------------------------------------
0008A1r 2               ; PROCESS INPUT LIST
0008A1r 2               ;
0008A1r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
0008A1r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
0008A1r 2               ; 				$40 FOR GET
0008A1r 2               ;				$98 FOR READ
0008A1r 2               ; ----------------------------------------------------------------------------
0008A1r 2               PROCESS_INPUT_LIST:
0008A1r 2  85 62                sta     INPUTFLG
0008A3r 2  86 92                stx     INPTR
0008A5r 2  84 93                sty     INPTR+1
0008A7r 2               PROCESS_INPUT_ITEM:
0008A7r 2  20 rr rr             jsr     PTRGET
0008AAr 2  85 98                sta     FORPNT
0008ACr 2  84 99                sty     FORPNT+1
0008AEr 2  A5 C9                lda     TXTPTR
0008B0r 2  A4 CA                ldy     TXTPTR+1
0008B2r 2  85 08                sta     TXPSV
0008B4r 2  84 09                sty     TXPSV+1
0008B6r 2  A6 92                ldx     INPTR
0008B8r 2  A4 93                ldy     INPTR+1
0008BAr 2  86 C9                stx     TXTPTR
0008BCr 2  84 CA                sty     TXTPTR+1
0008BEr 2  20 C8 00             jsr     CHRGOT
0008C1r 2  D0 1F                bne     INSTART
0008C3r 2  24 62                bit     INPUTFLG
0008C5r 2               .ifndef CONFIG_SMALL ; GET
0008C5r 2                .ifndef SYM1
0008C5r 2  50 0B                bvc     L2AF0
0008C7r 2                 .ifdef MICROTAN
0008C7r 2                       jsr     MONRDKEY2
0008C7r 2                 .elseif .def(AIM65)
0008C7r 2                       jsr     MONRDKEY2
0008C7r 2                 .else
0008C7r 2  20 E4 FF             jsr     MONRDKEY
0008CAr 2                 .endif
0008CAr 2                 .ifdef CONFIG_IO_MSB
0008CAr 2                       and     #$7F
0008CAr 2                 .endif
0008CAr 2  85 0A                sta     INPUTBUFFER
0008CCr 2               ; BUG: The beq/bne L2AF8 below is supposed
0008CCr 2               ; to be always taken. For this to happen,
0008CCr 2               ; the last load must be a 0 for beq
0008CCr 2               ; and != 0 for bne. The original Microsoft
0008CCr 2               ; code had ldx/ldy/bne here, which was only
0008CCr 2               ; correct for a non-ZP INPUTBUFFER. Commodore
0008CCr 2               ; fixed it in CBMBASIC V1 by swapping the
0008CCr 2               ; ldx and the ldy. It was broken on KIM,
0008CCr 2               ; but okay on APPLE and CBM2, because
0008CCr 2               ; these used a non-ZP INPUTBUFFER.
0008CCr 2               ; Microsoft fixed this somewhere after KIM
0008CCr 2               ; and before MICROTAN, by using beq instead
0008CCr 2               ; of bne in the ZP case.
0008CCr 2                 .ifdef CBM1
0008CCr 2  A0 00                ldy     #>(INPUTBUFFER-1)
0008CEr 2  A2 09                ldx     #<(INPUTBUFFER-1)
0008D0r 2                 .else
0008D0r 2                       ldx     #<(INPUTBUFFER-1)
0008D0r 2                       ldy     #>(INPUTBUFFER-1)
0008D0r 2                 .endif
0008D0r 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
0008D0r 2                       beq     L2AF8	; always
0008D0r 2                 .else
0008D0r 2  D0 0C                bne     L2AF8	; always
0008D2r 2                 .endif
0008D2r 2               L2AF0:
0008D2r 2                .endif
0008D2r 2               .endif
0008D2r 2  30 72                bmi     FINDATA
0008D4r 2               .ifdef CONFIG_FILE
0008D4r 2  A5 03                lda     CURDVC
0008D6r 2  D0 03                bne     LCB64
0008D8r 2               .endif
0008D8r 2               .ifdef KBD
0008D8r 2                       jsr     OUTQUESSP
0008D8r 2               .else
0008D8r 2  20 rr rr             jsr     OUTQUES
0008DBr 2               .endif
0008DBr 2               LCB64:
0008DBr 2  20 rr rr             jsr     NXIN
0008DEr 2               L2AF8:
0008DEr 2  86 C9                stx     TXTPTR
0008E0r 2  84 CA                sty     TXTPTR+1
0008E2r 2               
0008E2r 2               ; ----------------------------------------------------------------------------
0008E2r 2               INSTART:
0008E2r 2  20 C2 00             jsr     CHRGET
0008E5r 2  24 5E                bit     VALTYP
0008E7r 2  10 2E                bpl     L2B34
0008E9r 2               .ifndef CONFIG_SMALL ; GET
0008E9r 2                .ifndef SYM1
0008E9r 2  24 62                bit     INPUTFLG
0008EBr 2  50 06                bvc     L2B10
0008EDr 2                 .ifdef CONFIG_CBM1_PATCHES
0008EDr 2  A9 00                lda     #$00
0008EFr 2  20 rr rr             jsr     PATCH4
0008F2r 2  EA                   nop
0008F3r 2                 .else
0008F3r 2                       inx
0008F3r 2                       stx     TXTPTR
0008F3r 2                       lda     #$00
0008F3r 2                       sta     CHARAC
0008F3r 2                       beq     L2B1C
0008F3r 2                 .endif
0008F3r 2               L2B10:
0008F3r 2                .endif
0008F3r 2               .endif
0008F3r 2  85 5A                sta     CHARAC
0008F5r 2  C9 22                cmp     #$22
0008F7r 2  F0 07                beq     L2B1D
0008F9r 2  A9 3A                lda     #$3A
0008FBr 2  85 5A                sta     CHARAC
0008FDr 2  A9 2C                lda     #$2C
0008FFr 2               L2B1C:
0008FFr 2  18                   clc
000900r 2               L2B1D:
000900r 2  85 5B                sta     ENDCHR
000902r 2  A5 C9                lda     TXTPTR
000904r 2  A4 CA                ldy     TXTPTR+1
000906r 2  69 00                adc     #$00
000908r 2  90 01                bcc     L2B28
00090Ar 2  C8                   iny
00090Br 2               L2B28:
00090Br 2  20 rr rr             jsr     STRLT2
00090Er 2  20 rr rr             jsr     POINT
000911r 2               .ifdef CONFIG_SMALL
000911r 2                       jsr     LETSTRING
000911r 2               .else
000911r 2  20 rr rr             jsr     PUTSTR
000914r 2               .endif
000914r 2  4C rr rr             jmp     INPUT_MORE
000917r 2               ; ----------------------------------------------------------------------------
000917r 2               L2B34:
000917r 2  20 rr rr             jsr     FIN
00091Ar 2               .ifdef CONFIG_SMALL
00091Ar 2                       jsr     SETFOR
00091Ar 2               .else
00091Ar 2  A5 5F                lda     VALTYP+1
00091Cr 2  20 rr rr             jsr     LET2
00091Fr 2               .endif
00091Fr 2               ; ----------------------------------------------------------------------------
00091Fr 2               INPUT_MORE:
00091Fr 2  20 C8 00             jsr     CHRGOT
000922r 2  F0 07                beq     L2B48
000924r 2  C9 2C                cmp     #$2C
000926r 2  F0 03                beq     L2B48
000928r 2  4C rr rr             jmp     INPUTERR
00092Br 2               L2B48:
00092Br 2  A5 C9                lda     TXTPTR
00092Dr 2  A4 CA                ldy     TXTPTR+1
00092Fr 2  85 92                sta     INPTR
000931r 2  84 93                sty     INPTR+1
000933r 2  A5 08                lda     TXPSV
000935r 2  A4 09                ldy     TXPSV+1
000937r 2  85 C9                sta     TXTPTR
000939r 2  84 CA                sty     TXTPTR+1
00093Br 2  20 C8 00             jsr     CHRGOT
00093Er 2  F0 2C                beq     INPDONE
000940r 2  20 rr rr             jsr     CHKCOM
000943r 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
000946r 2               ; ----------------------------------------------------------------------------
000946r 2               FINDATA:
000946r 2  20 rr rr             jsr     DATAN
000949r 2  C8                   iny
00094Ar 2  AA                   tax
00094Br 2  D0 12                bne     L2B7C
00094Dr 2  A2 2A                ldx     #ERR_NODATA
00094Fr 2  C8                   iny
000950r 2  B1 C9                lda     (TXTPTR),y
000952r 2  F0 6D                beq     GERR
000954r 2  C8                   iny
000955r 2  B1 C9                lda     (TXTPTR),y
000957r 2  85 8E                sta     Z8C
000959r 2  C8                   iny
00095Ar 2  B1 C9                lda     (TXTPTR),y
00095Cr 2  C8                   iny
00095Dr 2  85 8F                sta     Z8C+1
00095Fr 2               L2B7C:
00095Fr 2  B1 C9                lda     (TXTPTR),y
000961r 2  AA                   tax
000962r 2  20 rr rr             jsr     ADDON
000965r 2  E0 83                cpx     #$83
000967r 2  D0 DD                bne     FINDATA
000969r 2  4C rr rr             jmp     INSTART
00096Cr 2               ; ---NO MORE INPUT REQUESTED------
00096Cr 2               INPDONE:
00096Cr 2  A5 92                lda     INPTR
00096Er 2  A4 93                ldy     INPTR+1
000970r 2  A6 62                ldx     INPUTFLG
000972r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
000972r 2                       beq     L2B94 ; INPUT
000972r 2               .else
000972r 2  10 03                bpl     L2B94; INPUT or GET
000974r 2               .endif
000974r 2  4C rr rr             jmp     SETDA
000977r 2               L2B94:
000977r 2  A0 00                ldy     #$00
000979r 2               .ifdef AIM65
000979r 2                       jsr     LB8B1
000979r 2               .endif
000979r 2  B1 92                lda     (INPTR),y
00097Br 2  F0 0B                beq     L2BA1
00097Dr 2               .ifdef CONFIG_FILE
00097Dr 2  A5 03                lda     CURDVC
00097Fr 2  D0 07                bne     L2BA1
000981r 2               .endif
000981r 2  A9 rr                lda     #<ERREXTRA
000983r 2  A0 rr                ldy     #>ERREXTRA
000985r 2  4C rr rr             jmp     STROUT
000988r 2               L2BA1:
000988r 2  60                   rts
000989r 2               
000989r 2               ; ----------------------------------------------------------------------------
000989r 2               ERREXTRA:
000989r 2               .ifdef KBD
000989r 2                       .byte   "?Extra"
000989r 2               .else
000989r 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
00098Dr 2  52 41 20 49  
000991r 2  47 4E 4F 52  
000997r 2               .endif
000997r 2  0D 0A 00             .byte   $0D,$0A,$00
00099Ar 2               ERRREENTRY:
00099Ar 2               .ifdef KBD
00099Ar 2                       .byte   "What?"
00099Ar 2               .else
00099Ar 2  3F 52 45 44          .byte   "?REDO FROM START"
00099Er 2  4F 20 46 52  
0009A2r 2  4F 4D 20 53  
0009AAr 2               .endif
0009AAr 2  0D 0A 00             .byte   $0D,$0A,$00
0009ADr 2               .ifdef KBD
0009ADr 2               LEA30:
0009ADr 2                       .byte   "B"
0009ADr 2                       .byte   $FD
0009ADr 2                       .byte   "GsBASIC"
0009ADr 2                       .byte   $00,$1B,$0D,$13
0009ADr 2                       .byte   " BASIC"
0009ADr 2               .endif
0009ADr 2               
0009ADr 1               .include "eval.s"
0009ADr 2               .segment "CODE"
0009ADr 2               
0009ADr 2               ; ----------------------------------------------------------------------------
0009ADr 2               ; "NEXT" STATEMENT
0009ADr 2               ; ----------------------------------------------------------------------------
0009ADr 2               NEXT:
0009ADr 2  D0 04                bne     NEXT1
0009AFr 2  A0 00                ldy     #$00
0009B1r 2  F0 03                beq     NEXT2
0009B3r 2               NEXT1:
0009B3r 2  20 rr rr             jsr     PTRGET
0009B6r 2               NEXT2:
0009B6r 2  85 98                sta     FORPNT
0009B8r 2  84 99                sty     FORPNT+1
0009BAr 2  20 rr rr             jsr     GTFORPNT
0009BDr 2  F0 04                beq     NEXT3
0009BFr 2  A2 00                ldx     #$00
0009C1r 2               GERR:
0009C1r 2  F0 69                beq     JERROR
0009C3r 2               NEXT3:
0009C3r 2  9A                   txs
0009C4r 2               .ifndef CONFIG_2
0009C4r 2  E8                   inx
0009C5r 2  E8                   inx
0009C6r 2  E8                   inx
0009C7r 2  E8                   inx
0009C8r 2               .endif
0009C8r 2  8A                   txa
0009C9r 2               .ifdef CONFIG_2
0009C9r 2                       clc
0009C9r 2                       adc     #$04
0009C9r 2                       pha
0009C9r 2                       adc     #BYTES_FP+1
0009C9r 2                       sta     DEST
0009C9r 2                       pla
0009C9r 2               .else
0009C9r 2  E8                   inx
0009CAr 2  E8                   inx
0009CBr 2  E8                   inx
0009CCr 2  E8                   inx
0009CDr 2  E8                   inx
0009CEr 2               .ifndef CONFIG_SMALL
0009CEr 2  E8                   inx
0009CFr 2               .endif
0009CFr 2  86 73                stx     DEST
0009D1r 2               .endif
0009D1r 2  A0 01                ldy     #>STACK
0009D3r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0009D6r 2  BA                   tsx
0009D7r 2  BD 09 01             lda     STACK+BYTES_FP+4,x
0009DAr 2  85 B5                sta     FACSIGN
0009DCr 2  A5 98                lda     FORPNT
0009DEr 2  A4 99                ldy     FORPNT+1
0009E0r 2  20 rr rr             jsr     FADD
0009E3r 2  20 rr rr             jsr     SETFOR
0009E6r 2  A0 01                ldy     #>STACK
0009E8r 2  20 rr rr             jsr     FCOMP2
0009EBr 2  BA                   tsx
0009ECr 2  38                   sec
0009EDr 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
0009F0r 2  F0 17                beq     L2C22
0009F2r 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
0009F5r 2  85 88                sta     CURLIN
0009F7r 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
0009FAr 2  85 89                sta     CURLIN+1
0009FCr 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
0009FFr 2  85 C9                sta     TXTPTR
000A01r 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
000A04r 2  85 CA                sta     TXTPTR+1
000A06r 2               L2C1F:
000A06r 2  4C rr rr             jmp     NEWSTT
000A09r 2               L2C22:
000A09r 2  8A                   txa
000A0Ar 2  69 11                adc     #2*BYTES_FP+7
000A0Cr 2  AA                   tax
000A0Dr 2  9A                   txs
000A0Er 2  20 C8 00             jsr     CHRGOT
000A11r 2  C9 2C                cmp     #$2C
000A13r 2  D0 F1                bne     L2C1F
000A15r 2  20 C2 00             jsr     CHRGET
000A18r 2  20 rr rr             jsr     NEXT1
000A1Br 2               
000A1Br 2               ; ----------------------------------------------------------------------------
000A1Br 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000A1Br 2               ; ----------------------------------------------------------------------------
000A1Br 2               FRMNUM:
000A1Br 2  20 rr rr             jsr     FRMEVL
000A1Er 2               
000A1Er 2               ; ----------------------------------------------------------------------------
000A1Er 2               ; MAKE SURE (FAC) IS NUMERIC
000A1Er 2               ; ----------------------------------------------------------------------------
000A1Er 2               CHKNUM:
000A1Er 2  18                   clc
000A1Fr 2  24                   .byte   $24
000A20r 2               
000A20r 2               ; ----------------------------------------------------------------------------
000A20r 2               ; MAKE SURE (FAC) IS STRING
000A20r 2               ; ----------------------------------------------------------------------------
000A20r 2               CHKSTR:
000A20r 2  38                   sec
000A21r 2               
000A21r 2               ; ----------------------------------------------------------------------------
000A21r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
000A21r 2               ; IF C=0, TYPE MUST BE NUMERIC
000A21r 2               ; IF C=1, TYPE MUST BE STRING
000A21r 2               ; ----------------------------------------------------------------------------
000A21r 2               CHKVAL:
000A21r 2  24 5E                bit     VALTYP
000A23r 2  30 03                bmi     L2C41
000A25r 2  B0 03                bcs     L2C43
000A27r 2               L2C40:
000A27r 2  60                   rts
000A28r 2               L2C41:
000A28r 2  B0 FD                bcs     L2C40
000A2Ar 2               L2C43:
000A2Ar 2  A2 A8                ldx     #ERR_BADTYPE
000A2Cr 2               JERROR:
000A2Cr 2  4C rr rr             jmp     ERROR
000A2Fr 2               
000A2Fr 2               ; ----------------------------------------------------------------------------
000A2Fr 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
000A2Fr 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
000A2Fr 2               ; EXPRESSIONS.
000A2Fr 2               ; ----------------------------------------------------------------------------
000A2Fr 2               FRMEVL:
000A2Fr 2  A6 C9                ldx     TXTPTR
000A31r 2  D0 02                bne     L2C4E
000A33r 2  C6 CA                dec     TXTPTR+1
000A35r 2               L2C4E:
000A35r 2  C6 C9                dec     TXTPTR
000A37r 2  A2 00                ldx     #$00
000A39r 2  24                   .byte   $24
000A3Ar 2               FRMEVL1:
000A3Ar 2  48                   pha
000A3Br 2  8A                   txa
000A3Cr 2  48                   pha
000A3Dr 2  A9 01                lda     #$01
000A3Fr 2  20 rr rr             jsr     CHKMEM
000A42r 2  20 rr rr             jsr     FRM_ELEMENT
000A45r 2  A9 00                lda     #$00
000A47r 2  85 9C                sta     CPRTYP
000A49r 2               FRMEVL2:
000A49r 2  20 C8 00             jsr     CHRGOT
000A4Cr 2               L2C65:
000A4Cr 2  38                   sec
000A4Dr 2  E9 B1                sbc     #TOKEN_GREATER
000A4Fr 2  90 17                bcc     L2C81
000A51r 2  C9 03                cmp     #$03
000A53r 2  B0 13                bcs     L2C81
000A55r 2  C9 01                cmp     #$01
000A57r 2  2A                   rol     a
000A58r 2  49 01                eor     #$01
000A5Ar 2  45 9C                eor     CPRTYP
000A5Cr 2  C5 9C                cmp     CPRTYP
000A5Er 2  90 61                bcc     SNTXERR
000A60r 2  85 9C                sta     CPRTYP
000A62r 2  20 C2 00             jsr     CHRGET
000A65r 2  4C rr rr             jmp     L2C65
000A68r 2               L2C81:
000A68r 2  A6 9C                ldx     CPRTYP
000A6Ar 2  D0 2C                bne     FRM_RELATIONAL
000A6Cr 2  B0 7B                bcs     L2D02
000A6Er 2  69 07                adc     #$07
000A70r 2  90 77                bcc     L2D02
000A72r 2  65 5E                adc     VALTYP
000A74r 2  D0 03                bne     L2C92
000A76r 2  4C rr rr             jmp     CAT
000A79r 2               L2C92:
000A79r 2  69 FF                adc     #$FF
000A7Br 2  85 71                sta     INDEX
000A7Dr 2  0A                   asl     a
000A7Er 2  65 71                adc     INDEX
000A80r 2  A8                   tay
000A81r 2               FRM_PRECEDENCE_TEST:
000A81r 2  68                   pla
000A82r 2  D9 rr rr             cmp     MATHTBL,y
000A85r 2  B0 67                bcs     FRM_PERFORM1
000A87r 2  20 rr rr             jsr     CHKNUM
000A8Ar 2               L2CA3:
000A8Ar 2  48                   pha
000A8Br 2               L2CA4:
000A8Br 2  20 rr rr             jsr     FRM_RECURSE
000A8Er 2  68                   pla
000A8Fr 2  A4 9A                ldy     LASTOP
000A91r 2  10 17                bpl     PREFNC
000A93r 2  AA                   tax
000A94r 2  F0 56                beq     GOEX
000A96r 2  D0 5F                bne     FRM_PERFORM2
000A98r 2               
000A98r 2               ; ----------------------------------------------------------------------------
000A98r 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
000A98r 2               ; ----------------------------------------------------------------------------
000A98r 2               FRM_RELATIONAL:
000A98r 2  46 5E                lsr     VALTYP
000A9Ar 2  8A                   txa
000A9Br 2  2A                   rol     a
000A9Cr 2  A6 C9                ldx     TXTPTR
000A9Er 2  D0 02                bne     L2CBB
000AA0r 2  C6 CA                dec     TXTPTR+1
000AA2r 2               L2CBB:
000AA2r 2  C6 C9                dec     TXTPTR
000AA4r 2  A0 1B                ldy     #$1B
000AA6r 2  85 9C                sta     CPRTYP
000AA8r 2  D0 D7                bne     FRM_PRECEDENCE_TEST
000AAAr 2               PREFNC:
000AAAr 2  D9 rr rr             cmp     MATHTBL,y
000AADr 2  B0 48                bcs     FRM_PERFORM2
000AAFr 2  90 D9                bcc     L2CA3
000AB1r 2               
000AB1r 2               ; ----------------------------------------------------------------------------
000AB1r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000AB1r 2               ; ANOTHER ONE
000AB1r 2               ; ----------------------------------------------------------------------------
000AB1r 2               FRM_RECURSE:
000AB1r 2  B9 rr rr             lda     MATHTBL+2,y
000AB4r 2  48                   pha
000AB5r 2  B9 rr rr             lda     MATHTBL+1,y
000AB8r 2  48                   pha
000AB9r 2  20 rr rr             jsr     FRM_STACK1
000ABCr 2  A5 9C                lda     CPRTYP
000ABEr 2  4C rr rr             jmp     FRMEVL1
000AC1r 2               SNTXERR:
000AC1r 2  4C rr rr             jmp     SYNERR
000AC4r 2               
000AC4r 2               ; ----------------------------------------------------------------------------
000AC4r 2               ; STACK (FAC)
000AC4r 2               ; THREE ENTRY POINTS:
000AC4r 2               ; 	1, FROM FRMEVL
000AC4r 2               ;	2, FROM "STEP"
000AC4r 2               ;	3, FROM "FOR"
000AC4r 2               ; ----------------------------------------------------------------------------
000AC4r 2               FRM_STACK1:
000AC4r 2  A5 B5                lda     FACSIGN
000AC6r 2  BE rr rr             ldx     MATHTBL,y
000AC9r 2               
000AC9r 2               ; ----------------------------------------------------------------------------
000AC9r 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000AC9r 2               ; ----------------------------------------------------------------------------
000AC9r 2               FRM_STACK2:
000AC9r 2  A8                   tay
000ACAr 2  68                   pla
000ACBr 2  85 71                sta     INDEX
000ACDr 2               .ifndef CONFIG_2B
000ACDr 2  E6 71                inc     INDEX ; bug: assumes not on page boundary
000ACFr 2               ; bug exists on AppleSoft II
000ACFr 2               .endif
000ACFr 2  68                   pla
000AD0r 2  85 72                sta     INDEX+1
000AD2r 2               .ifdef CONFIG_2B
000AD2r 2                       inc     INDEX
000AD2r 2                       bne     LEB69
000AD2r 2                       inc     INDEX+1
000AD2r 2               LEB69:
000AD2r 2               .endif
000AD2r 2  98                   tya
000AD3r 2  48                   pha
000AD4r 2               
000AD4r 2               ; ----------------------------------------------------------------------------
000AD4r 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000AD4r 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000AD4r 2               ; ----------------------------------------------------------------------------
000AD4r 2               FRM_STACK3:
000AD4r 2  20 rr rr             jsr     ROUND_FAC
000AD7r 2               .ifndef CONFIG_SMALL
000AD7r 2  A5 B4                lda     FAC+4
000AD9r 2  48                   pha
000ADAr 2               .endif
000ADAr 2  A5 B3                lda     FAC+3
000ADCr 2  48                   pha
000ADDr 2  A5 B2                lda     FAC+2
000ADFr 2  48                   pha
000AE0r 2  A5 B1                lda     FAC+1
000AE2r 2  48                   pha
000AE3r 2  A5 B0                lda     FAC
000AE5r 2  48                   pha
000AE6r 2  6C 71 00             jmp     (INDEX)
000AE9r 2               L2D02:
000AE9r 2  A0 FF                ldy     #$FF
000AEBr 2  68                   pla
000AECr 2               GOEX:
000AECr 2  F0 23                beq     EXIT
000AEEr 2               
000AEEr 2               ; ----------------------------------------------------------------------------
000AEEr 2               ; PERFORM STACKED OPERATION
000AEEr 2               ;
000AEEr 2               ; (A) = PRECEDENCE BYTE
000AEEr 2               ; STACK:  1 -- CPRMASK
000AEEr 2               ;	5 -- (ARG)
000AEEr 2               ;	2 -- ADDR OF PERFORMER
000AEEr 2               ; ----------------------------------------------------------------------------
000AEEr 2               FRM_PERFORM1:
000AEEr 2  C9 64                cmp     #$64
000AF0r 2  F0 03                beq     L2D0E
000AF2r 2  20 rr rr             jsr     CHKNUM
000AF5r 2               L2D0E:
000AF5r 2  84 9A                sty     LASTOP
000AF7r 2               FRM_PERFORM2:
000AF7r 2  68                   pla
000AF8r 2  4A                   lsr     a
000AF9r 2  85 63                sta     CPRMASK
000AFBr 2  68                   pla
000AFCr 2  85 B8                sta     ARG
000AFEr 2  68                   pla
000AFFr 2  85 B9                sta     ARG+1
000B01r 2  68                   pla
000B02r 2  85 BA                sta     ARG+2
000B04r 2  68                   pla
000B05r 2  85 BB                sta     ARG+3
000B07r 2  68                   pla
000B08r 2               .ifndef CONFIG_SMALL
000B08r 2  85 BC                sta     ARG+4
000B0Ar 2  68                   pla
000B0Br 2               .endif
000B0Br 2  85 BD                sta     ARGSIGN
000B0Dr 2  45 B5                eor     FACSIGN
000B0Fr 2  85 BE                sta     SGNCPR
000B11r 2               EXIT:
000B11r 2  A5 B0                lda     FAC
000B13r 2  60                   rts
000B14r 2               
000B14r 2               ; ----------------------------------------------------------------------------
000B14r 2               ; GET ELEMENT IN EXPRESSION
000B14r 2               ;
000B14r 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000B14r 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000B14r 2               ; ----------------------------------------------------------------------------
000B14r 2               FRM_ELEMENT:
000B14r 2  A9 00                lda     #$00
000B16r 2  85 5E                sta     VALTYP
000B18r 2               L2D31:
000B18r 2  20 C2 00             jsr     CHRGET
000B1Br 2  B0 03                bcs     L2D39
000B1Dr 2               L2D36:
000B1Dr 2  4C rr rr             jmp     FIN
000B20r 2               L2D39:
000B20r 2  20 rr rr             jsr     ISLETC
000B23r 2  B0 7A                bcs     FRM_VARIABLE
000B25r 2               .ifdef CONFIG_CBM_ALL
000B25r 2  C9 FF                cmp     #$FF
000B27r 2  D0 0F                bne     LCDC1
000B29r 2  A9 rr                lda     #<CON_PI
000B2Br 2  A0 rr                ldy     #>CON_PI
000B2Dr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000B30r 2  4C C2 00             jmp     CHRGET
000B33r 2               CON_PI:
000B33r 2  82 49 0F DA          .byte   $82,$49,$0f,$DA,$A1
000B37r 2  A1           
000B38r 2               LCDC1:
000B38r 2               .endif
000B38r 2  C9 2E                cmp     #$2E
000B3Ar 2  F0 E1                beq     L2D36
000B3Cr 2  C9 AB                cmp     #TOKEN_MINUS
000B3Er 2  F0 58                beq     MIN
000B40r 2  C9 AA                cmp     #TOKEN_PLUS
000B42r 2  F0 D4                beq     L2D31
000B44r 2  C9 22                cmp     #$22
000B46r 2  D0 0F                bne     NOT_
000B48r 2               
000B48r 2               ; ----------------------------------------------------------------------------
000B48r 2               ; STRING CONSTANT ELEMENT
000B48r 2               ;
000B48r 2               ; SET Y,A = (TXTPTR)+CARRY
000B48r 2               ; ----------------------------------------------------------------------------
000B48r 2               STRTXT:
000B48r 2  A5 C9                lda     TXTPTR
000B4Ar 2  A4 CA                ldy     TXTPTR+1
000B4Cr 2  69 00                adc     #$00
000B4Er 2  90 01                bcc     L2D57
000B50r 2  C8                   iny
000B51r 2               L2D57:
000B51r 2  20 rr rr             jsr     STRLIT
000B54r 2  4C rr rr             jmp     POINT
000B57r 2               
000B57r 2               ; ----------------------------------------------------------------------------
000B57r 2               ; "NOT" FUNCTION
000B57r 2               ; IF FAC=0, RETURN FAC=1
000B57r 2               ; IF FAC<>0, RETURN FAC=0
000B57r 2               ; ----------------------------------------------------------------------------
000B57r 2               NOT_:
000B57r 2  C9 A8                cmp     #TOKEN_NOT
000B59r 2  D0 13                bne     L2D74
000B5Br 2  A0 18                ldy     #$18
000B5Dr 2  D0 3B                bne     EQUL
000B5Fr 2               
000B5Fr 2               ; ----------------------------------------------------------------------------
000B5Fr 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000B5Fr 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000B5Fr 2               ; ----------------------------------------------------------------------------
000B5Fr 2               EQUOP:
000B5Fr 2  20 rr rr             jsr     AYINT
000B62r 2  A5 B4                lda     FAC_LAST
000B64r 2  49 FF                eor     #$FF
000B66r 2  A8                   tay
000B67r 2  A5 B3                lda     FAC_LAST-1
000B69r 2  49 FF                eor     #$FF
000B6Br 2  4C rr rr             jmp     GIVAYF
000B6Er 2               L2D74:
000B6Er 2               .ifdef SYM1
000B6Er 2                       cmp     #TOKEN_USR
000B6Er 2                       bne     LCC8A
000B6Er 2                       jmp     LCDBD
000B6Er 2               LCC8A:
000B6Er 2                       cmp     #$26
000B6Er 2                       bne     LCC91
000B6Er 2                       jmp     LCDFE
000B6Er 2               LCC91:
000B6Er 2               .endif
000B6Er 2  C9 A5                cmp     #TOKEN_FN
000B70r 2  D0 03                bne     L2D7B
000B72r 2  4C rr rr             jmp     L31F3
000B75r 2               L2D7B:
000B75r 2  C9 B4                cmp     #TOKEN_SGN
000B77r 2  90 03                bcc     PARCHK
000B79r 2  4C rr rr             jmp     UNARY
000B7Cr 2               
000B7Cr 2               ; ----------------------------------------------------------------------------
000B7Cr 2               ; EVALUATE "(EXPRESSION)"
000B7Cr 2               ; ----------------------------------------------------------------------------
000B7Cr 2               PARCHK:
000B7Cr 2  20 rr rr             jsr     CHKOPN
000B7Fr 2  20 rr rr             jsr     FRMEVL
000B82r 2               CHKCLS:
000B82r 2  A9 29                lda     #$29
000B84r 2  2C                   .byte   $2C
000B85r 2               CHKOPN:
000B85r 2  A9 28                lda     #$28
000B87r 2  2C                   .byte   $2C
000B88r 2               CHKCOM:
000B88r 2  A9 2C                lda     #$2C
000B8Ar 2               
000B8Ar 2               ; ----------------------------------------------------------------------------
000B8Ar 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000B8Ar 2               ; ----------------------------------------------------------------------------
000B8Ar 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000B8Ar 2  A0 00                ldy     #$00
000B8Cr 2  D1 C9                cmp     (TXTPTR),y
000B8Er 2  D0 03                bne     SYNERR
000B90r 2  4C C2 00             jmp     CHRGET
000B93r 2               ; ----------------------------------------------------------------------------
000B93r 2               SYNERR:
000B93r 2  A2 10                ldx     #ERR_SYNTAX
000B95r 2  4C rr rr             jmp     ERROR
000B98r 2               ; ----------------------------------------------------------------------------
000B98r 2               MIN:
000B98r 2  A0 15                ldy     #$15
000B9Ar 2               EQUL:
000B9Ar 2  68                   pla
000B9Br 2  68                   pla
000B9Cr 2  4C rr rr             jmp     L2CA4
000B9Fr 2               ; ----------------------------------------------------------------------------
000B9Fr 2               FRM_VARIABLE:
000B9Fr 2  20 rr rr             jsr     PTRGET
000BA2r 2               FRM_VARIABLE_CALL	= *-1
000BA2r 2  85 B3                sta     FAC_LAST-1
000BA4r 2  84 B4                sty     FAC_LAST
000BA6r 2               .ifdef CONFIG_CBM_ALL
000BA6r 2  A5 94                lda     VARNAM
000BA8r 2  A4 95                ldy     VARNAM+1
000BAAr 2               .endif
000BAAr 2  A6 5E                ldx     VALTYP
000BACr 2  F0 1D                beq     L2DB1
000BAEr 2               .ifdef CONFIG_CBM_ALL
000BAEr 2                 .ifdef CONFIG_CBM1_PATCHES
000BAEr 2  4C rr rr             jmp     PATCH2
000BB1r 2  18                   clc
000BB2r 2               LCE3B:
000BB2r 2                 .else
000BB2r 2                       ldx     #$00
000BB2r 2                       stx     STRNG1+1
000BB2r 2                       bit     FAC+4
000BB2r 2                       bpl     LCE53
000BB2r 2                       cmp     #$54	; T
000BB2r 2                       bne     LCE53
000BB2r 2                 .endif
000BB2r 2  C0 C9                cpy     #$C9	; I$
000BB4r 2  D0 14                bne     LCE53
000BB6r 2  20 rr rr             jsr     LCE76
000BB9r 2  84 AD                sty     EXPON
000BBBr 2  88                   dey
000BBCr 2  84 C0                sty     STRNG2
000BBEr 2  A0 06                ldy     #$06
000BC0r 2  84 AC                sty     INDX
000BC2r 2  A0 24                ldy     #$24
000BC4r 2  20 rr rr             jsr     LDD3A
000BC7r 2  4C rr rr             jmp     LD353
000BCAr 2               LCE53:
000BCAr 2               .endif
000BCAr 2               .ifdef CONFIG_2
000BCAr 2                 .ifndef CBM2
000BCAr 2               ; bugfix?
000BCAr 2               ; fixed on AppleSoft II, not on any CBM
000BCAr 2                       ldx     #$00
000BCAr 2                       stx     STRNG1+1
000BCAr 2                 .endif
000BCAr 2               .endif
000BCAr 2  60                   rts
000BCBr 2               L2DB1:
000BCBr 2               .ifndef CONFIG_SMALL
000BCBr 2  A6 5F                ldx     VALTYP+1
000BCDr 2  10 0D                bpl     L2DC2
000BCFr 2  A0 00                ldy     #$00
000BD1r 2  B1 B3                lda     (FAC+3),y
000BD3r 2  AA                   tax
000BD4r 2  C8                   iny
000BD5r 2  B1 B3                lda     (FAC+3),y
000BD7r 2  A8                   tay
000BD8r 2  8A                   txa
000BD9r 2  4C rr rr             jmp     GIVAYF
000BDCr 2               L2DC2:
000BDCr 2               .endif
000BDCr 2               .ifdef CONFIG_CBM1_PATCHES
000BDCr 2  4C rr rr             jmp     PATCH3
000BDFr 2  19                   .byte   $19
000BE0r 2               .endif
000BE0r 2               .ifdef CBM2
000BE0r 2                       bit     FAC+4
000BE0r 2                       bpl     LCE90
000BE0r 2                       cmp     #$54
000BE0r 2                       bne     LCE82
000BE0r 2               .endif
000BE0r 2               .ifndef CONFIG_CBM_ALL
000BE0r 2                       jmp     LOAD_FAC_FROM_YA
000BE0r 2               .endif
000BE0r 2               .ifdef CONFIG_CBM_ALL
000BE0r 2               LCE69:
000BE0r 2  C0 49                cpy     #$49
000BE2r 2               .ifdef CBM1
000BE2r 2  D0 15                bne     LCE82
000BE4r 2               .else
000BE4r 2                       bne     LCE90
000BE4r 2               .endif
000BE4r 2  20 rr rr             jsr     LCE76
000BE7r 2  98                   tya
000BE8r 2  A2 A0                ldx     #$A0
000BEAr 2  4C rr rr             jmp     LDB21
000BEDr 2               LCE76:
000BEDr 2               .ifdef CBM1
000BEDr 2  A9 FE                lda     #$FE
000BEFr 2  A0 01                ldy     #$01
000BF1r 2               .else
000BF1r 2                       lda     #$8B
000BF1r 2                       ldy     #$00
000BF1r 2               .endif
000BF1r 2  78                   sei
000BF2r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
000BF5r 2  58                   cli
000BF6r 2  84 B1                sty     FAC+1
000BF8r 2  60                   rts
000BF9r 2               LCE82:
000BF9r 2  C9 53                cmp     #$53
000BFBr 2  D0 0A                bne     LCE90
000BFDr 2  C0 54                cpy     #$54
000BFFr 2  D0 06                bne     LCE90
000C01r 2  AD 0C 02             lda     Z96
000C04r 2  4C rr rr             jmp     FLOAT
000C07r 2               LCE90:
000C07r 2  A5 B3                lda     FAC+3
000C09r 2  A4 B4                ldy     FAC+4
000C0Br 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000C0Er 2               .endif
000C0Er 2               
000C0Er 2               ; ----------------------------------------------------------------------------
000C0Er 2               UNARY:
000C0Er 2  0A                   asl     a
000C0Fr 2  48                   pha
000C10r 2  AA                   tax
000C11r 2  20 C2 00             jsr     CHRGET
000C14r 2  E0 8F                cpx     #<(TOKEN_LEFTSTR*2-1)
000C16r 2  90 20                bcc     L2DEF
000C18r 2  20 rr rr             jsr     CHKOPN
000C1Br 2  20 rr rr             jsr     FRMEVL
000C1Er 2  20 rr rr             jsr     CHKCOM
000C21r 2  20 rr rr             jsr     CHKSTR
000C24r 2  68                   pla
000C25r 2  AA                   tax
000C26r 2  A5 B4                lda     FAC_LAST
000C28r 2  48                   pha
000C29r 2  A5 B3                lda     FAC_LAST-1
000C2Br 2  48                   pha
000C2Cr 2  8A                   txa
000C2Dr 2  48                   pha
000C2Er 2  20 rr rr             jsr     GETBYT
000C31r 2  68                   pla
000C32r 2  A8                   tay
000C33r 2  8A                   txa
000C34r 2  48                   pha
000C35r 2  4C rr rr             jmp     L2DF4
000C38r 2               L2DEF:
000C38r 2  20 rr rr             jsr     PARCHK
000C3Br 2  68                   pla
000C3Cr 2  A8                   tay
000C3Dr 2               L2DF4:
000C3Dr 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000C40r 2  85 A4                sta     JMPADRS+1
000C42r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000C45r 2  85 A5                sta     JMPADRS+2
000C47r 2               .ifdef KBD
000C47r 2                       jsr     LF47D
000C47r 2               .else
000C47r 2  20 A3 00             jsr     JMPADRS
000C4Ar 2               .endif
000C4Ar 2  4C rr rr             jmp     CHKNUM
000C4Dr 2               
000C4Dr 2               ; ----------------------------------------------------------------------------
000C4Dr 2               OR:
000C4Dr 2  A0 FF                ldy     #$FF
000C4Fr 2  2C                   .byte   $2C
000C50r 2               ; ----------------------------------------------------------------------------
000C50r 2               TAND:
000C50r 2  A0 00                ldy     #$00
000C52r 2  84 5C                sty     EOLPNTR
000C54r 2  20 rr rr             jsr     AYINT
000C57r 2  A5 B3                lda     FAC_LAST-1
000C59r 2  45 5C                eor     EOLPNTR
000C5Br 2  85 5A                sta     CHARAC
000C5Dr 2  A5 B4                lda     FAC_LAST
000C5Fr 2  45 5C                eor     EOLPNTR
000C61r 2  85 5B                sta     ENDCHR
000C63r 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000C66r 2  20 rr rr             jsr     AYINT
000C69r 2  A5 B4                lda     FAC_LAST
000C6Br 2  45 5C                eor     EOLPNTR
000C6Dr 2  25 5B                and     ENDCHR
000C6Fr 2  45 5C                eor     EOLPNTR
000C71r 2  A8                   tay
000C72r 2  A5 B3                lda     FAC_LAST-1
000C74r 2  45 5C                eor     EOLPNTR
000C76r 2  25 5A                and     CHARAC
000C78r 2  45 5C                eor     EOLPNTR
000C7Ar 2  4C rr rr             jmp     GIVAYF
000C7Dr 2               
000C7Dr 2               ; ----------------------------------------------------------------------------
000C7Dr 2               ; PERFORM RELATIONAL OPERATIONS
000C7Dr 2               ; ----------------------------------------------------------------------------
000C7Dr 2               RELOPS:
000C7Dr 2  20 rr rr             jsr     CHKVAL
000C80r 2  B0 13                bcs     STRCMP
000C82r 2  A5 BD                lda     ARGSIGN
000C84r 2  09 7F                ora     #$7F
000C86r 2  25 B9                and     ARG+1
000C88r 2  85 B9                sta     ARG+1
000C8Ar 2  A9 B8                lda     #<ARG
000C8Cr 2  A0 00                ldy     #$00
000C8Er 2  20 rr rr             jsr     FCOMP
000C91r 2  AA                   tax
000C92r 2  4C rr rr             jmp     NUMCMP
000C95r 2               
000C95r 2               ; ----------------------------------------------------------------------------
000C95r 2               ; STRING COMPARISON
000C95r 2               ; ----------------------------------------------------------------------------
000C95r 2               STRCMP:
000C95r 2  A9 00                lda     #$00
000C97r 2  85 5E                sta     VALTYP
000C99r 2  C6 9C                dec     CPRTYP
000C9Br 2  20 rr rr             jsr     FREFAC
000C9Er 2  85 B0                sta     FAC
000CA0r 2  86 B1                stx     FAC+1
000CA2r 2  84 B2                sty     FAC+2
000CA4r 2  A5 BB                lda     ARG_LAST-1
000CA6r 2  A4 BC                ldy     ARG_LAST
000CA8r 2  20 rr rr             jsr     FRETMP
000CABr 2  86 BB                stx     ARG_LAST-1
000CADr 2  84 BC                sty     ARG_LAST
000CAFr 2  AA                   tax
000CB0r 2  38                   sec
000CB1r 2  E5 B0                sbc     FAC
000CB3r 2  F0 08                beq     L2E74
000CB5r 2  A9 01                lda     #$01
000CB7r 2  90 04                bcc     L2E74
000CB9r 2  A6 B0                ldx     FAC
000CBBr 2  A9 FF                lda     #$FF
000CBDr 2               L2E74:
000CBDr 2  85 B5                sta     FACSIGN
000CBFr 2  A0 FF                ldy     #$FF
000CC1r 2  E8                   inx
000CC2r 2               STRCMP1:
000CC2r 2  C8                   iny
000CC3r 2  CA                   dex
000CC4r 2  D0 07                bne     L2E84
000CC6r 2  A6 B5                ldx     FACSIGN
000CC8r 2               NUMCMP:
000CC8r 2  30 0F                bmi     CMPDONE
000CCAr 2  18                   clc
000CCBr 2  90 0C                bcc     CMPDONE
000CCDr 2               L2E84:
000CCDr 2  B1 BB                lda     (ARG_LAST-1),y
000CCFr 2  D1 B1                cmp     (FAC+1),y
000CD1r 2  F0 EF                beq     STRCMP1
000CD3r 2  A2 FF                ldx     #$FF
000CD5r 2  B0 02                bcs     CMPDONE
000CD7r 2  A2 01                ldx     #$01
000CD9r 2               CMPDONE:
000CD9r 2  E8                   inx
000CDAr 2  8A                   txa
000CDBr 2  2A                   rol     a
000CDCr 2  25 63                and     CPRMASK
000CDEr 2  F0 02                beq     L2E99
000CE0r 2  A9 FF                lda     #$FF
000CE2r 2               L2E99:
000CE2r 2  4C rr rr             jmp     FLOAT
000CE5r 2               
000CE5r 2               .ifdef SYM1
000CE5r 2               LCDBD:
000CE5r 2                       jsr     CHRGET
000CE5r 2                       jsr     CHKOPN
000CE5r 2                       jsr     FRMEVL
000CE5r 2                       jsr     CHRGOT
000CE5r 2                       cmp     #$29
000CE5r 2                       beq     LCDF1
000CE5r 2                       jsr     AYINT
000CE5r 2                       lda     FAC+4
000CE5r 2                       ldy     FAC+3
000CE5r 2                       sta     USR+1
000CE5r 2                       sty     USR+2
000CE5r 2               LCDD8:
000CE5r 2                       jsr     CHKCOM
000CE5r 2                       jsr     FRMEVL
000CE5r 2                       jsr     CHRGOT
000CE5r 2                       cmp     #$29
000CE5r 2                       beq     LCDF1
000CE5r 2                       jsr     AYINT
000CE5r 2                       lda     FAC+3
000CE5r 2                       pha
000CE5r 2                       lda     FAC+4
000CE5r 2                       pha
000CE5r 2                       jmp     LCDD8
000CE5r 2               
000CE5r 2               LCDF1:
000CE5r 2                       jsr     CHRGET
000CE5r 2                       jsr     AYINT
000CE5r 2                       lda     FAC+3
000CE5r 2                       ldy     FAC+4
000CE5r 2                       jmp     USR
000CE5r 2               
000CE5r 2               LCDFE:
000CE5r 2                       lda     ZD4
000CE5r 2                       pha
000CE5r 2                       lda     ZD3
000CE5r 2                       pha
000CE5r 2                       jsr     CHRGET
000CE5r 2                       cmp     #$22
000CE5r 2                       bne     LCE49
000CE5r 2                       jsr     CHRGET
000CE5r 2                       jsr     LCE2B
000CE5r 2                       tax
000CE5r 2                       jsr     CHRGOT
000CE5r 2                       jsr     LCE2B
000CE5r 2                       pha
000CE5r 2                       jsr     CHRGOT
000CE5r 2                       cmp     #$22
000CE5r 2                       bne     LCE48
000CE5r 2                       jsr     CHRGET
000CE5r 2                       pla
000CE5r 2                       tay
000CE5r 2                       pla
000CE5r 2                       pla
000CE5r 2                       txa
000CE5r 2                       jmp     GIVAYF
000CE5r 2               
000CE5r 2               LCE2B:
000CE5r 2                       jsr     ASCNIB
000CE5r 2                       bcs     LCE47
000CE5r 2                       pha
000CE5r 2                       jsr     CHRGET
000CE5r 2                       jsr     ASCNIB
000CE5r 2                       sta     FAC+4
000CE5r 2                       bcs     LCE46
000CE5r 2                       jsr     CHRGET
000CE5r 2                       pla
000CE5r 2                       asl     a
000CE5r 2                       asl     a
000CE5r 2                       asl     a
000CE5r 2                       asl     a
000CE5r 2                       ora     FAC+4
000CE5r 2                       rts
000CE5r 2               
000CE5r 2               LCE46:
000CE5r 2                       pla
000CE5r 2               LCE47:
000CE5r 2                       pla
000CE5r 2               LCE48:
000CE5r 2                       pla
000CE5r 2               LCE49:
000CE5r 2                       pla
000CE5r 2                       sta     ZD3
000CE5r 2                       pla
000CE5r 2                       sta     ZD4
000CE5r 2                       jmp     ZERO_FAC
000CE5r 2               .endif
000CE5r 2               
000CE5r 1               .include "var.s"
000CE5r 2               .segment "CODE"
000CE5r 2               
000CE5r 2               ; ----------------------------------------------------------------------------
000CE5r 2               ; "DIM" STATEMENT
000CE5r 2               ; ----------------------------------------------------------------------------
000CE5r 2               NXDIM:
000CE5r 2  20 rr rr             jsr     CHKCOM
000CE8r 2               DIM:
000CE8r 2  AA                   tax
000CE9r 2  20 rr rr             jsr     PTRGET2
000CECr 2  20 C8 00             jsr     CHRGOT
000CEFr 2  D0 F4                bne     NXDIM
000CF1r 2  60                   rts
000CF2r 2               
000CF2r 2               ; ----------------------------------------------------------------------------
000CF2r 2               ; PTRGET -- GENERAL VARIABLE SCAN
000CF2r 2               ;
000CF2r 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000CF2r 2               ; VARTAB AND ARYTAB FOR THE NAME.
000CF2r 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000CF2r 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000CF2r 2               ;
000CF2r 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000CF2r 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000CF2r 2               ;		ELSE = 0
000CF2r 2               ;
000CF2r 2               ;	SUBFLG -- = $00
000CF2r 2               ;		= $40 IF CALLED FROM "GETARYPT"
000CF2r 2               ; ----------------------------------------------------------------------------
000CF2r 2               PTRGET:
000CF2r 2  A2 00                ldx     #$00
000CF4r 2  20 C8 00             jsr     CHRGOT
000CF7r 2               PTRGET2:
000CF7r 2  86 5D                stx     DIMFLG
000CF9r 2               PTRGET3:
000CF9r 2  85 94                sta     VARNAM
000CFBr 2  20 C8 00             jsr     CHRGOT
000CFEr 2  20 rr rr             jsr     ISLETC
000D01r 2  B0 03                bcs     NAMOK
000D03r 2               SYNERR3:
000D03r 2  4C rr rr             jmp     SYNERR
000D06r 2               NAMOK:
000D06r 2  A2 00                ldx     #$00
000D08r 2  86 5E                stx     VALTYP
000D0Ar 2               .ifndef CONFIG_SMALL
000D0Ar 2  86 5F                stx     VALTYP+1
000D0Cr 2               .endif
000D0Cr 2  20 C2 00             jsr     CHRGET
000D0Fr 2  90 05                bcc     L2ECD
000D11r 2  20 rr rr             jsr     ISLETC
000D14r 2  90 0B                bcc     L2ED8
000D16r 2               L2ECD:
000D16r 2  AA                   tax
000D17r 2               L2ECE:
000D17r 2  20 C2 00             jsr     CHRGET
000D1Ar 2  90 FB                bcc     L2ECE
000D1Cr 2  20 rr rr             jsr     ISLETC
000D1Fr 2  B0 F6                bcs     L2ECE
000D21r 2               L2ED8:
000D21r 2  C9 24                cmp     #$24
000D23r 2               .ifdef CONFIG_SMALL
000D23r 2                       bne     L2EF9
000D23r 2               .else
000D23r 2  D0 06                bne     L2EE2
000D25r 2               .endif
000D25r 2  A9 FF                lda     #$FF
000D27r 2  85 5E                sta     VALTYP
000D29r 2               .ifndef CONFIG_SMALL
000D29r 2  D0 10                bne     L2EF2
000D2Br 2               L2EE2:
000D2Br 2  C9 25                cmp     #$25
000D2Dr 2  D0 13                bne     L2EF9
000D2Fr 2  A5 61                lda     SUBFLG
000D31r 2  D0 D0                bne     SYNERR3
000D33r 2  A9 80                lda     #$80
000D35r 2  85 5F                sta     VALTYP+1
000D37r 2  05 94                ora     VARNAM
000D39r 2  85 94                sta     VARNAM
000D3Br 2               L2EF2:
000D3Br 2               .endif
000D3Br 2  8A                   txa
000D3Cr 2  09 80                ora     #$80
000D3Er 2  AA                   tax
000D3Fr 2  20 C2 00             jsr     CHRGET
000D42r 2               L2EF9:
000D42r 2  86 95                stx     VARNAM+1
000D44r 2  38                   sec
000D45r 2  05 61                ora     SUBFLG
000D47r 2  E9 28                sbc     #$28
000D49r 2  D0 03                bne     L2F05
000D4Br 2  4C rr rr             jmp     ARRAY
000D4Er 2               L2F05:
000D4Er 2  A9 00                lda     #$00
000D50r 2  85 61                sta     SUBFLG
000D52r 2  A5 7C                lda     VARTAB
000D54r 2  A6 7D                ldx     VARTAB+1
000D56r 2  A0 00                ldy     #$00
000D58r 2               L2F0F:
000D58r 2  86 AF                stx     LOWTR+1
000D5Ar 2               L2F11:
000D5Ar 2  85 AE                sta     LOWTR
000D5Cr 2  E4 7F                cpx     ARYTAB+1
000D5Er 2  D0 04                bne     L2F1B
000D60r 2  C5 7E                cmp     ARYTAB
000D62r 2  F0 22                beq     NAMENOTFOUND
000D64r 2               L2F1B:
000D64r 2  A5 94                lda     VARNAM
000D66r 2  D1 AE                cmp     (LOWTR),y
000D68r 2  D0 08                bne     L2F29
000D6Ar 2  A5 95                lda     VARNAM+1
000D6Cr 2  C8                   iny
000D6Dr 2  D1 AE                cmp     (LOWTR),y
000D6Fr 2  F0 7F                beq     SET_VARPNT_AND_YA
000D71r 2  88                   dey
000D72r 2               L2F29:
000D72r 2  18                   clc
000D73r 2  A5 AE                lda     LOWTR
000D75r 2  69 07                adc     #BYTES_PER_VARIABLE
000D77r 2  90 E1                bcc     L2F11
000D79r 2  E8                   inx
000D7Ar 2  D0 DC                bne     L2F0F
000D7Cr 2               
000D7Cr 2               ; ----------------------------------------------------------------------------
000D7Cr 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000D7Cr 2               ;
000D7Cr 2               ; RETURN CARRY = 1 IF A-Z
000D7Cr 2               ;	= 0 IF NOT
000D7Cr 2               ; ----------------------------------------------------------------------------
000D7Cr 2               ISLETC:
000D7Cr 2  C9 41                cmp     #$41
000D7Er 2  90 05                bcc     L2F3C
000D80r 2  E9 5B                sbc     #$5B
000D82r 2  38                   sec
000D83r 2  E9 A5                sbc     #$A5
000D85r 2               L2F3C:
000D85r 2  60                   rts
000D86r 2               
000D86r 2               ; ----------------------------------------------------------------------------
000D86r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000D86r 2               ; ----------------------------------------------------------------------------
000D86r 2               NAMENOTFOUND:
000D86r 2  68                   pla
000D87r 2  48                   pha
000D88r 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000D8Ar 2  D0 07                bne     MAKENEWVARIABLE
000D8Cr 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000D8Cr 2                       tsx
000D8Cr 2                       lda     STACK+2,x
000D8Cr 2                       cmp     #>FRM_VARIABLE_CALL
000D8Cr 2                       bne     MAKENEWVARIABLE
000D8Cr 2               .endif
000D8Cr 2               LD015:
000D8Cr 2  A9 rr                lda     #<C_ZERO
000D8Er 2  A0 rr                ldy     #>C_ZERO
000D90r 2  60                   rts
000D91r 2               
000D91r 2               ; ----------------------------------------------------------------------------
000D91r 2               .ifndef CONFIG_2
000D91r 2               C_ZERO:
000D91r 2  00 00                .byte   $00,$00
000D93r 2               .endif
000D93r 2               
000D93r 2               ; ----------------------------------------------------------------------------
000D93r 2               ; MAKE A NEW SIMPLE VARIABLE
000D93r 2               ;
000D93r 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000D93r 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000D93r 2               ; ----------------------------------------------------------------------------
000D93r 2               MAKENEWVARIABLE:
000D93r 2               .ifdef CONFIG_CBM_ALL
000D93r 2  A5 94                lda     VARNAM
000D95r 2  A4 95                ldy     VARNAM+1
000D97r 2  C9 54                cmp     #$54
000D99r 2  D0 0B                bne     LD02F
000D9Br 2  C0 C9                cpy     #$C9
000D9Dr 2  F0 ED                beq     LD015
000D9Fr 2  C0 49                cpy     #$49
000DA1r 2  D0 03                bne     LD02F
000DA3r 2               LD02C:
000DA3r 2  4C rr rr             jmp     SYNERR
000DA6r 2               LD02F:
000DA6r 2  C9 53                cmp     #$53
000DA8r 2  D0 04                bne     LD037
000DAAr 2  C0 54                cpy     #$54
000DACr 2  F0 F5                beq     LD02C
000DAEr 2               LD037:
000DAEr 2               .endif
000DAEr 2  A5 7E                lda     ARYTAB
000DB0r 2  A4 7F                ldy     ARYTAB+1
000DB2r 2  85 AE                sta     LOWTR
000DB4r 2  84 AF                sty     LOWTR+1
000DB6r 2  A5 80                lda     STREND
000DB8r 2  A4 81                ldy     STREND+1
000DBAr 2  85 A9                sta     HIGHTR
000DBCr 2  84 AA                sty     HIGHTR+1
000DBEr 2  18                   clc
000DBFr 2  69 07                adc     #BYTES_PER_VARIABLE
000DC1r 2  90 01                bcc     L2F68
000DC3r 2  C8                   iny
000DC4r 2               L2F68:
000DC4r 2  85 A7                sta     HIGHDS
000DC6r 2  84 A8                sty     HIGHDS+1
000DC8r 2  20 rr rr             jsr     BLTU
000DCBr 2  A5 A7                lda     HIGHDS
000DCDr 2  A4 A8                ldy     HIGHDS+1
000DCFr 2  C8                   iny
000DD0r 2  85 7E                sta     ARYTAB
000DD2r 2  84 7F                sty     ARYTAB+1
000DD4r 2  A0 00                ldy     #$00
000DD6r 2  A5 94                lda     VARNAM
000DD8r 2  91 AE                sta     (LOWTR),y
000DDAr 2  C8                   iny
000DDBr 2  A5 95                lda     VARNAM+1
000DDDr 2  91 AE                sta     (LOWTR),y
000DDFr 2  A9 00                lda     #$00
000DE1r 2  C8                   iny
000DE2r 2  91 AE                sta     (LOWTR),y
000DE4r 2  C8                   iny
000DE5r 2  91 AE                sta     (LOWTR),y
000DE7r 2  C8                   iny
000DE8r 2  91 AE                sta     (LOWTR),y
000DEAr 2  C8                   iny
000DEBr 2  91 AE                sta     (LOWTR),y
000DEDr 2               .ifndef CONFIG_SMALL
000DEDr 2  C8                   iny
000DEEr 2  91 AE                sta     (LOWTR),y
000DF0r 2               .endif
000DF0r 2               
000DF0r 2               ; ----------------------------------------------------------------------------
000DF0r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000DF0r 2               ; ----------------------------------------------------------------------------
000DF0r 2               SET_VARPNT_AND_YA:
000DF0r 2  A5 AE                lda     LOWTR
000DF2r 2  18                   clc
000DF3r 2  69 02                adc     #$02
000DF5r 2  A4 AF                ldy     LOWTR+1
000DF7r 2  90 01                bcc     L2F9E
000DF9r 2  C8                   iny
000DFAr 2               L2F9E:
000DFAr 2  85 96                sta     VARPNT
000DFCr 2  84 97                sty     VARPNT+1
000DFEr 2  60                   rts
000DFFr 2               
000DFFr 1               .include "array.s"
000DFFr 2               .segment "CODE"
000DFFr 2               
000DFFr 2               ; ----------------------------------------------------------------------------
000DFFr 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000DFFr 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000DFFr 2               ; ----------------------------------------------------------------------------
000DFFr 2               GETARY:
000DFFr 2  A5 5C                lda     EOLPNTR
000E01r 2  0A                   asl     a
000E02r 2  69 05                adc     #$05
000E04r 2  65 AE                adc     LOWTR
000E06r 2  A4 AF                ldy     LOWTR+1
000E08r 2  90 01                bcc     L2FAF
000E0Ar 2  C8                   iny
000E0Br 2               L2FAF:
000E0Br 2  85 A7                sta     HIGHDS
000E0Dr 2  84 A8                sty     HIGHDS+1
000E0Fr 2  60                   rts
000E10r 2               
000E10r 2               ; ----------------------------------------------------------------------------
000E10r 2               NEG32768:
000E10r 2  90 80 00 00          .byte   $90,$80,$00,$00
000E14r 2               
000E14r 2               .ifdef CONFIG_2C
000E14r 2               		.byte	$00; bugfix: short number
000E14r 2               .endif
000E14r 2               
000E14r 2               ; ----------------------------------------------------------------------------
000E14r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000E14r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000E14r 2               ; IN FAC+3,4
000E14r 2               ; ----------------------------------------------------------------------------
000E14r 2               MAKINT:
000E14r 2  20 C2 00             jsr     CHRGET
000E17r 2               .ifdef CONFIG_2
000E17r 2                       jsr     FRMEVL
000E17r 2               .else
000E17r 2  20 rr rr             jsr     FRMNUM
000E1Ar 2               .endif
000E1Ar 2               
000E1Ar 2               ; ----------------------------------------------------------------------------
000E1Ar 2               ; CONVERT FAC TO INTEGER
000E1Ar 2               ; MUST BE POSITIVE AND LESS THAN 32768
000E1Ar 2               ; ----------------------------------------------------------------------------
000E1Ar 2               MKINT:
000E1Ar 2               .ifdef CONFIG_2
000E1Ar 2                       jsr     CHKNUM
000E1Ar 2               .endif
000E1Ar 2  A5 B5                lda     FACSIGN
000E1Cr 2  30 0D                bmi     MI1
000E1Er 2               
000E1Er 2               ; ----------------------------------------------------------------------------
000E1Er 2               ; CONVERT FAC TO INTEGER
000E1Er 2               ; MUST BE -32767 <= FAC <= 32767
000E1Er 2               ; ----------------------------------------------------------------------------
000E1Er 2               AYINT:
000E1Er 2  A5 B0                lda     FAC
000E20r 2  C9 90                cmp     #$90
000E22r 2  90 09                bcc     MI2
000E24r 2  A9 rr                lda     #<NEG32768
000E26r 2  A0 rr                ldy     #>NEG32768
000E28r 2  20 rr rr             jsr     FCOMP
000E2Br 2               MI1:
000E2Br 2  D0 7A                bne     IQERR
000E2Dr 2               MI2:
000E2Dr 2  4C rr rr             jmp     QINT
000E30r 2               
000E30r 2               ; ----------------------------------------------------------------------------
000E30r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000E30r 2               ; ----------------------------------------------------------------------------
000E30r 2               ARRAY:
000E30r 2  A5 5D                lda     DIMFLG
000E32r 2               .ifndef CONFIG_SMALL
000E32r 2  05 5F                ora     VALTYP+1
000E34r 2               .endif
000E34r 2  48                   pha
000E35r 2  A5 5E                lda     VALTYP
000E37r 2  48                   pha
000E38r 2  A0 00                ldy     #$00
000E3Ar 2               L2FDE:
000E3Ar 2  98                   tya
000E3Br 2  48                   pha
000E3Cr 2  A5 95                lda     VARNAM+1
000E3Er 2  48                   pha
000E3Fr 2  A5 94                lda     VARNAM
000E41r 2  48                   pha
000E42r 2  20 rr rr             jsr     MAKINT
000E45r 2  68                   pla
000E46r 2  85 94                sta     VARNAM
000E48r 2  68                   pla
000E49r 2  85 95                sta     VARNAM+1
000E4Br 2  68                   pla
000E4Cr 2  A8                   tay
000E4Dr 2  BA                   tsx
000E4Er 2  BD 02 01             lda     STACK+2,x
000E51r 2  48                   pha
000E52r 2  BD 01 01             lda     STACK+1,x
000E55r 2  48                   pha
000E56r 2  A5 B3                lda     FAC_LAST-1
000E58r 2  9D 02 01             sta     STACK+2,x
000E5Br 2  A5 B4                lda     FAC_LAST
000E5Dr 2  9D 01 01             sta     STACK+1,x
000E60r 2  C8                   iny
000E61r 2  20 C8 00             jsr     CHRGOT
000E64r 2  C9 2C                cmp     #$2C
000E66r 2  F0 D2                beq     L2FDE
000E68r 2  84 5C                sty     EOLPNTR
000E6Ar 2  20 rr rr             jsr     CHKCLS
000E6Dr 2  68                   pla
000E6Er 2  85 5E                sta     VALTYP
000E70r 2  68                   pla
000E71r 2               .ifndef CONFIG_SMALL
000E71r 2  85 5F                sta     VALTYP+1
000E73r 2  29 7F                and     #$7F
000E75r 2               .endif
000E75r 2  85 5D                sta     DIMFLG
000E77r 2               ; ----------------------------------------------------------------------------
000E77r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000E77r 2               ; ----------------------------------------------------------------------------
000E77r 2  A6 7E                ldx     ARYTAB
000E79r 2  A5 7F                lda     ARYTAB+1
000E7Br 2               L301F:
000E7Br 2  86 AE                stx     LOWTR
000E7Dr 2  85 AF                sta     LOWTR+1
000E7Fr 2  C5 81                cmp     STREND+1
000E81r 2  D0 04                bne     L302B
000E83r 2  E4 80                cpx     STREND
000E85r 2  F0 39                beq     MAKE_NEW_ARRAY
000E87r 2               L302B:
000E87r 2  A0 00                ldy     #$00
000E89r 2  B1 AE                lda     (LOWTR),y
000E8Br 2  C8                   iny
000E8Cr 2  C5 94                cmp     VARNAM
000E8Er 2  D0 06                bne     L303A
000E90r 2  A5 95                lda     VARNAM+1
000E92r 2  D1 AE                cmp     (LOWTR),y
000E94r 2  F0 16                beq     USE_OLD_ARRAY
000E96r 2               L303A:
000E96r 2  C8                   iny
000E97r 2  B1 AE                lda     (LOWTR),y
000E99r 2  18                   clc
000E9Ar 2  65 AE                adc     LOWTR
000E9Cr 2  AA                   tax
000E9Dr 2  C8                   iny
000E9Er 2  B1 AE                lda     (LOWTR),y
000EA0r 2  65 AF                adc     LOWTR+1
000EA2r 2  90 D7                bcc     L301F
000EA4r 2               
000EA4r 2               ; ----------------------------------------------------------------------------
000EA4r 2               ; ERROR:  BAD SUBSCRIPTS
000EA4r 2               ; ----------------------------------------------------------------------------
000EA4r 2               SUBERR:
000EA4r 2  A2 70                ldx     #ERR_BADSUBS
000EA6r 2  2C                   .byte   $2C
000EA7r 2               
000EA7r 2               ; ----------------------------------------------------------------------------
000EA7r 2               ; ERROR:  ILLEGAL QUANTITY
000EA7r 2               ; ----------------------------------------------------------------------------
000EA7r 2               IQERR:
000EA7r 2  A2 35                ldx     #ERR_ILLQTY
000EA9r 2               JER:
000EA9r 2  4C rr rr             jmp     ERROR
000EACr 2               
000EACr 2               ; ----------------------------------------------------------------------------
000EACr 2               ; FOUND THE ARRAY
000EACr 2               ; ----------------------------------------------------------------------------
000EACr 2               USE_OLD_ARRAY:
000EACr 2  A2 7D                ldx     #ERR_REDIMD
000EAEr 2  A5 5D                lda     DIMFLG
000EB0r 2  D0 F7                bne     JER
000EB2r 2  20 rr rr             jsr     GETARY
000EB5r 2  A5 5C                lda     EOLPNTR
000EB7r 2  A0 04                ldy     #$04
000EB9r 2  D1 AE                cmp     (LOWTR),y
000EBBr 2  D0 E7                bne     SUBERR
000EBDr 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000EC0r 2               
000EC0r 2               ; ----------------------------------------------------------------------------
000EC0r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000EC0r 2               ; ----------------------------------------------------------------------------
000EC0r 2               MAKE_NEW_ARRAY:
000EC0r 2  20 rr rr             jsr     GETARY
000EC3r 2  20 rr rr             jsr     REASON
000EC6r 2  A9 00                lda     #$00
000EC8r 2  A8                   tay
000EC9r 2  85 C1                sta     STRNG2+1
000ECBr 2  A2 05                ldx     #BYTES_PER_ELEMENT
000ECDr 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000ECDr 2                       stx     STRNG2
000ECDr 2               .endif
000ECDr 2  A5 94                lda     VARNAM
000ECFr 2  91 AE                sta     (LOWTR),y
000ED1r 2               .ifndef CONFIG_SMALL
000ED1r 2  10 01                bpl     L3078
000ED3r 2  CA                   dex
000ED4r 2               L3078:
000ED4r 2               .endif
000ED4r 2  C8                   iny
000ED5r 2  A5 95                lda     VARNAM+1
000ED7r 2  91 AE                sta     (LOWTR),y
000ED9r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000ED9r 2  10 02                bpl     L3081
000EDBr 2  CA                   dex
000EDCr 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000EDCr 2  CA                   dex
000EDDr 2                 .endif
000EDDr 2               L3081:
000EDDr 2  86 C0                stx     STRNG2
000EDFr 2               .endif
000EDFr 2  A5 5C                lda     EOLPNTR
000EE1r 2  C8                   iny
000EE2r 2  C8                   iny
000EE3r 2  C8                   iny
000EE4r 2  91 AE                sta     (LOWTR),y
000EE6r 2               L308A:
000EE6r 2  A2 0B                ldx     #$0B
000EE8r 2  A9 00                lda     #$00
000EEAr 2  24 5D                bit     DIMFLG
000EECr 2  50 08                bvc     L309A
000EEEr 2  68                   pla
000EEFr 2  18                   clc
000EF0r 2  69 01                adc     #$01
000EF2r 2  AA                   tax
000EF3r 2  68                   pla
000EF4r 2  69 00                adc     #$00
000EF6r 2               L309A:
000EF6r 2  C8                   iny
000EF7r 2  91 AE                sta     (LOWTR),y
000EF9r 2  C8                   iny
000EFAr 2  8A                   txa
000EFBr 2  91 AE                sta     (LOWTR),y
000EFDr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000F00r 2  86 C0                stx     STRNG2
000F02r 2  85 C1                sta     STRNG2+1
000F04r 2  A4 71                ldy     INDEX
000F06r 2  C6 5C                dec     EOLPNTR
000F08r 2  D0 DC                bne     L308A
000F0Ar 2  65 A8                adc     HIGHDS+1
000F0Cr 2  B0 5D                bcs     GME
000F0Er 2  85 A8                sta     HIGHDS+1
000F10r 2  A8                   tay
000F11r 2  8A                   txa
000F12r 2  65 A7                adc     HIGHDS
000F14r 2  90 03                bcc     L30BD
000F16r 2  C8                   iny
000F17r 2  F0 52                beq     GME
000F19r 2               L30BD:
000F19r 2  20 rr rr             jsr     REASON
000F1Cr 2  85 80                sta     STREND
000F1Er 2  84 81                sty     STREND+1
000F20r 2  A9 00                lda     #$00
000F22r 2  E6 C1                inc     STRNG2+1
000F24r 2  A4 C0                ldy     STRNG2
000F26r 2  F0 05                beq     L30D1
000F28r 2               L30CC:
000F28r 2  88                   dey
000F29r 2  91 A7                sta     (HIGHDS),y
000F2Br 2  D0 FB                bne     L30CC
000F2Dr 2               L30D1:
000F2Dr 2  C6 A8                dec     HIGHDS+1
000F2Fr 2  C6 C1                dec     STRNG2+1
000F31r 2  D0 F5                bne     L30CC
000F33r 2  E6 A8                inc     HIGHDS+1
000F35r 2  38                   sec
000F36r 2  A5 80                lda     STREND
000F38r 2  E5 AE                sbc     LOWTR
000F3Ar 2  A0 02                ldy     #$02
000F3Cr 2  91 AE                sta     (LOWTR),y
000F3Er 2  A5 81                lda     STREND+1
000F40r 2  C8                   iny
000F41r 2  E5 AF                sbc     LOWTR+1
000F43r 2  91 AE                sta     (LOWTR),y
000F45r 2  A5 5D                lda     DIMFLG
000F47r 2  D0 60                bne     RTS9
000F49r 2  C8                   iny
000F4Ar 2               
000F4Ar 2               ; ----------------------------------------------------------------------------
000F4Ar 2               ; FIND SPECIFIED ARRAY ELEMENT
000F4Ar 2               ;
000F4Ar 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000F4Ar 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000F4Ar 2               ; ----------------------------------------------------------------------------
000F4Ar 2               FIND_ARRAY_ELEMENT:
000F4Ar 2  B1 AE                lda     (LOWTR),y
000F4Cr 2  85 5C                sta     EOLPNTR
000F4Er 2  A9 00                lda     #$00
000F50r 2  85 C0                sta     STRNG2
000F52r 2               L30F6:
000F52r 2  85 C1                sta     STRNG2+1
000F54r 2  C8                   iny
000F55r 2  68                   pla
000F56r 2  AA                   tax
000F57r 2  85 B3                sta     FAC_LAST-1
000F59r 2  68                   pla
000F5Ar 2  85 B4                sta     FAC_LAST
000F5Cr 2  D1 AE                cmp     (LOWTR),y
000F5Er 2  90 0E                bcc     FAE2
000F60r 2  D0 06                bne     GSE
000F62r 2  C8                   iny
000F63r 2  8A                   txa
000F64r 2  D1 AE                cmp     (LOWTR),y
000F66r 2  90 07                bcc     FAE3
000F68r 2               ; ----------------------------------------------------------------------------
000F68r 2               GSE:
000F68r 2  4C rr rr             jmp     SUBERR
000F6Br 2               GME:
000F6Br 2  4C rr rr             jmp     MEMERR
000F6Er 2               ; ----------------------------------------------------------------------------
000F6Er 2               FAE2:
000F6Er 2  C8                   iny
000F6Fr 2               FAE3:
000F6Fr 2  A5 C1                lda     STRNG2+1
000F71r 2  05 C0                ora     STRNG2
000F73r 2  18                   clc
000F74r 2  F0 0A                beq     L3124
000F76r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000F79r 2  8A                   txa
000F7Ar 2  65 B3                adc     FAC_LAST-1
000F7Cr 2  AA                   tax
000F7Dr 2  98                   tya
000F7Er 2  A4 71                ldy     INDEX
000F80r 2               L3124:
000F80r 2  65 B4                adc     FAC_LAST
000F82r 2  86 C0                stx     STRNG2
000F84r 2  C6 5C                dec     EOLPNTR
000F86r 2  D0 CA                bne     L30F6
000F88r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000F88r 2                       asl     STRNG2
000F88r 2                       rol     a
000F88r 2                       bcs     GSE
000F88r 2                       asl     STRNG2
000F88r 2                       rol     a
000F88r 2                       bcs     GSE
000F88r 2                       tay
000F88r 2                       lda     STRNG2
000F88r 2               .else
000F88r 2                 .ifdef CONFIG_11A
000F88r 2                       sta     STRNG2+1
000F88r 2                 .endif
000F88r 2  A2 05                ldx     #BYTES_FP
000F8Ar 2                 .ifdef CONFIG_SMALL
000F8Ar 2                       lda     VARNAM+1
000F8Ar 2                 .else
000F8Ar 2  A5 94                lda     VARNAM
000F8Cr 2                 .endif
000F8Cr 2  10 01                bpl     L3135
000F8Er 2  CA                   dex
000F8Fr 2               L3135:
000F8Fr 2                 .ifdef CONFIG_SMALL
000F8Fr 2                       stx     RESULT+1
000F8Fr 2                 .else
000F8Fr 2  A5 95                lda     VARNAM+1
000F91r 2  10 02                bpl     L313B
000F93r 2  CA                   dex
000F94r 2  CA                   dex
000F95r 2               L313B:
000F95r 2  86 77                stx     RESULT+2
000F97r 2                 .endif
000F97r 2  A9 00                lda     #$00
000F99r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000F9Cr 2  8A                   txa
000F9Dr 2               .endif
000F9Dr 2  65 A7                adc     HIGHDS
000F9Fr 2  85 96                sta     VARPNT
000FA1r 2  98                   tya
000FA2r 2  65 A8                adc     HIGHDS+1
000FA4r 2  85 97                sta     VARPNT+1
000FA6r 2  A8                   tay
000FA7r 2  A5 96                lda     VARPNT
000FA9r 2               RTS9:
000FA9r 2  60                   rts
000FAAr 2               
000FAAr 2               ; ----------------------------------------------------------------------------
000FAAr 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000FAAr 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000FAAr 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000FAAr 2               ; ----------------------------------------------------------------------------
000FAAr 2               MULTIPLY_SUBSCRIPT:
000FAAr 2  84 71                sty     INDEX
000FACr 2  B1 AE                lda     (LOWTR),y
000FAEr 2  85 77                sta     RESULT_LAST-2
000FB0r 2  88                   dey
000FB1r 2  B1 AE                lda     (LOWTR),y
000FB3r 2               MULTIPLY_SUBS1:
000FB3r 2  85 78                sta     RESULT_LAST-1
000FB5r 2  A9 10                lda     #$10
000FB7r 2  85 AC                sta     INDX
000FB9r 2  A2 00                ldx     #$00
000FBBr 2  A0 00                ldy     #$00
000FBDr 2               L3163:
000FBDr 2  8A                   txa
000FBEr 2  0A                   asl     a
000FBFr 2  AA                   tax
000FC0r 2  98                   tya
000FC1r 2  2A                   rol     a
000FC2r 2  A8                   tay
000FC3r 2  B0 A6                bcs     GME
000FC5r 2  06 C0                asl     STRNG2
000FC7r 2  26 C1                rol     STRNG2+1
000FC9r 2  90 0B                bcc     L317C
000FCBr 2  18                   clc
000FCCr 2  8A                   txa
000FCDr 2  65 77                adc     RESULT_LAST-2
000FCFr 2  AA                   tax
000FD0r 2  98                   tya
000FD1r 2  65 78                adc     RESULT_LAST-1
000FD3r 2  A8                   tay
000FD4r 2  B0 95                bcs     GME
000FD6r 2               L317C:
000FD6r 2  C6 AC                dec     INDX
000FD8r 2  D0 E3                bne     L3163
000FDAr 2  60                   rts
000FDBr 2               
000FDBr 2               
000FDBr 1               .include "misc2.s"
000FDBr 2               .segment "CODE"
000FDBr 2               
000FDBr 2               ; ----------------------------------------------------------------------------
000FDBr 2               ; "FRE" FUNCTION
000FDBr 2               ;
000FDBr 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000FDBr 2               ; ----------------------------------------------------------------------------
000FDBr 2               FRE:
000FDBr 2  A5 5E                lda     VALTYP
000FDDr 2  F0 03                beq     L3188
000FDFr 2  20 rr rr             jsr     FREFAC
000FE2r 2               L3188:
000FE2r 2  20 rr rr             jsr     GARBAG
000FE5r 2  38                   sec
000FE6r 2  A5 82                lda     FRETOP
000FE8r 2  E5 80                sbc     STREND
000FEAr 2  A8                   tay
000FEBr 2  A5 83                lda     FRETOP+1
000FEDr 2  E5 81                sbc     STREND+1
000FEFr 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000FEFr 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000FEFr 2               
000FEFr 2               ; ----------------------------------------------------------------------------
000FEFr 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000FEFr 2               ; ----------------------------------------------------------------------------
000FEFr 2               GIVAYF:
000FEFr 2  A2 00                ldx     #$00
000FF1r 2  86 5E                stx     VALTYP
000FF3r 2  85 B1                sta     FAC+1
000FF5r 2  84 B2                sty     FAC+2
000FF7r 2  A2 90                ldx     #$90
000FF9r 2  4C rr rr             jmp     FLOAT1
000FFCr 2               POS:
000FFCr 2  A4 05                ldy     POSX
000FFEr 2               
000FFEr 2               ; ----------------------------------------------------------------------------
000FFEr 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000FFEr 2               ; ----------------------------------------------------------------------------
000FFEr 2               SNGFLT:
000FFEr 2  A9 00                lda     #$00
001000r 2  F0 ED                beq     GIVAYF
001002r 2               
001002r 2               ; ----------------------------------------------------------------------------
001002r 2               ; CHECK FOR DIRECT OR RUNNING MODE
001002r 2               ; GIVING ERROR IF DIRECT MODE
001002r 2               ; ----------------------------------------------------------------------------
001002r 2               ERRDIR:
001002r 2  A6 89                ldx     CURLIN+1
001004r 2  E8                   inx
001005r 2  D0 A2                bne     RTS9
001007r 2  A2 9A                ldx     #ERR_ILLDIR
001009r 2               .ifdef CONFIG_2
001009r 2                       .byte   $2C
001009r 2               LD288:
001009r 2                       ldx     #ERR_UNDEFFN
001009r 2               .endif
001009r 2               L31AF:
001009r 2  4C rr rr             jmp     ERROR
00100Cr 2               DEF:
00100Cr 2  20 rr rr             jsr     FNC
00100Fr 2  20 rr rr             jsr     ERRDIR
001012r 2  20 rr rr             jsr     CHKOPN
001015r 2  A9 80                lda     #$80
001017r 2  85 61                sta     SUBFLG
001019r 2  20 rr rr             jsr     PTRGET
00101Cr 2  20 rr rr             jsr     CHKNUM
00101Fr 2  20 rr rr             jsr     CHKCLS
001022r 2  A9 B2                lda     #TOKEN_EQUAL
001024r 2  20 rr rr             jsr     SYNCHR
001027r 2               .ifndef CONFIG_SMALL
001027r 2  48                   pha
001028r 2               .endif
001028r 2  A5 97                lda     VARPNT+1
00102Ar 2  48                   pha
00102Br 2  A5 96                lda     VARPNT
00102Dr 2  48                   pha
00102Er 2  A5 CA                lda     TXTPTR+1
001030r 2  48                   pha
001031r 2  A5 C9                lda     TXTPTR
001033r 2  48                   pha
001034r 2  20 rr rr             jsr     DATA
001037r 2  4C rr rr             jmp     L3250
00103Ar 2               FNC:
00103Ar 2  A9 A5                lda     #TOKEN_FN
00103Cr 2  20 rr rr             jsr     SYNCHR
00103Fr 2  09 80                ora     #$80
001041r 2  85 61                sta     SUBFLG
001043r 2  20 rr rr             jsr     PTRGET3
001046r 2  85 9D                sta     FNCNAM
001048r 2  84 9E                sty     FNCNAM+1
00104Ar 2  4C rr rr             jmp     CHKNUM
00104Dr 2               L31F3:
00104Dr 2  20 rr rr             jsr     FNC
001050r 2  A5 9E                lda     FNCNAM+1
001052r 2  48                   pha
001053r 2  A5 9D                lda     FNCNAM
001055r 2  48                   pha
001056r 2  20 rr rr             jsr     PARCHK
001059r 2  20 rr rr             jsr     CHKNUM
00105Cr 2  68                   pla
00105Dr 2  85 9D                sta     FNCNAM
00105Fr 2  68                   pla
001060r 2  85 9E                sta     FNCNAM+1
001062r 2  A0 02                ldy     #$02
001064r 2               .ifndef CONFIG_2
001064r 2  A2 ED                ldx     #ERR_UNDEFFN
001066r 2               .endif
001066r 2  B1 9D                lda     (FNCNAM),y
001068r 2               .ifndef CONFIG_2
001068r 2  F0 9F                beq     L31AF
00106Ar 2               .endif
00106Ar 2  85 96                sta     VARPNT
00106Cr 2  AA                   tax
00106Dr 2  C8                   iny
00106Er 2  B1 9D                lda     (FNCNAM),y
001070r 2               .ifdef CONFIG_2
001070r 2                       beq     LD288
001070r 2               .endif
001070r 2  85 97                sta     VARPNT+1
001072r 2               .ifndef CONFIG_SMALL
001072r 2  C8                   iny
001073r 2               .endif
001073r 2               L3219:
001073r 2  B1 96                lda     (VARPNT),y
001075r 2  48                   pha
001076r 2  88                   dey
001077r 2  10 FA                bpl     L3219
001079r 2  A4 97                ldy     VARPNT+1
00107Br 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
00107Er 2  A5 CA                lda     TXTPTR+1
001080r 2  48                   pha
001081r 2  A5 C9                lda     TXTPTR
001083r 2  48                   pha
001084r 2  B1 9D                lda     (FNCNAM),y
001086r 2  85 C9                sta     TXTPTR
001088r 2  C8                   iny
001089r 2  B1 9D                lda     (FNCNAM),y
00108Br 2  85 CA                sta     TXTPTR+1
00108Dr 2  A5 97                lda     VARPNT+1
00108Fr 2  48                   pha
001090r 2  A5 96                lda     VARPNT
001092r 2  48                   pha
001093r 2  20 rr rr             jsr     FRMNUM
001096r 2  68                   pla
001097r 2  85 9D                sta     FNCNAM
001099r 2  68                   pla
00109Ar 2  85 9E                sta     FNCNAM+1
00109Cr 2  20 C8 00             jsr     CHRGOT
00109Fr 2  F0 03                beq     L324A
0010A1r 2  4C rr rr             jmp     SYNERR
0010A4r 2               L324A:
0010A4r 2  68                   pla
0010A5r 2  85 C9                sta     TXTPTR
0010A7r 2  68                   pla
0010A8r 2  85 CA                sta     TXTPTR+1
0010AAr 2               L3250:
0010AAr 2  A0 00                ldy     #$00
0010ACr 2  68                   pla
0010ADr 2  91 9D                sta     (FNCNAM),y
0010AFr 2  68                   pla
0010B0r 2  C8                   iny
0010B1r 2  91 9D                sta     (FNCNAM),y
0010B3r 2  68                   pla
0010B4r 2  C8                   iny
0010B5r 2  91 9D                sta     (FNCNAM),y
0010B7r 2  68                   pla
0010B8r 2  C8                   iny
0010B9r 2  91 9D                sta     (FNCNAM),y
0010BBr 2               .ifndef CONFIG_SMALL
0010BBr 2  68                   pla
0010BCr 2  C8                   iny
0010BDr 2  91 9D                sta     (FNCNAM),y
0010BFr 2               .endif
0010BFr 2  60                   rts
0010C0r 2               
0010C0r 1               .include "string.s"
0010C0r 2               .segment "CODE"
0010C0r 2               ; ----------------------------------------------------------------------------
0010C0r 2               ; "STR$" FUNCTION
0010C0r 2               ; ----------------------------------------------------------------------------
0010C0r 2               STR:
0010C0r 2  20 rr rr             jsr     CHKNUM
0010C3r 2  A0 00                ldy     #$00
0010C5r 2  20 rr rr             jsr     FOUT1
0010C8r 2  68                   pla
0010C9r 2  68                   pla
0010CAr 2               LD353:
0010CAr 2  A9 FF                lda     #<(STACK2-1)
0010CCr 2  A0 00                ldy     #>(STACK2-1)
0010CEr 2               .if STACK2 > $0100
0010CEr 2                       bne     STRLIT
0010CEr 2               .else
0010CEr 2  F0 12                beq     STRLIT
0010D0r 2               .endif
0010D0r 2               
0010D0r 2               ; ----------------------------------------------------------------------------
0010D0r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010D0r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
0010D0r 2               ; ----------------------------------------------------------------------------
0010D0r 2               STRINI:
0010D0r 2  A6 B3                ldx     FAC_LAST-1
0010D2r 2  A4 B4                ldy     FAC_LAST
0010D4r 2  86 9F                stx     DSCPTR
0010D6r 2  84 A0                sty     DSCPTR+1
0010D8r 2               
0010D8r 2               ; ----------------------------------------------------------------------------
0010D8r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
0010D8r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
0010D8r 2               ; ----------------------------------------------------------------------------
0010D8r 2               STRSPA:
0010D8r 2  20 rr rr             jsr     GETSPA
0010DBr 2  86 B1                stx     FAC+1
0010DDr 2  84 B2                sty     FAC+2
0010DFr 2  85 B0                sta     FAC
0010E1r 2  60                   rts
0010E2r 2               
0010E2r 2               ; ----------------------------------------------------------------------------
0010E2r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010E2r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
0010E2r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010E2r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010E2r 2               ; ----------------------------------------------------------------------------
0010E2r 2               STRLIT:
0010E2r 2  A2 22                ldx     #$22
0010E4r 2  86 5A                stx     CHARAC
0010E6r 2  86 5B                stx     ENDCHR
0010E8r 2               
0010E8r 2               ; ----------------------------------------------------------------------------
0010E8r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
0010E8r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
0010E8r 2               ;
0010E8r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
0010E8r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
0010E8r 2               ; ----------------------------------------------------------------------------
0010E8r 2               STRLT2:
0010E8r 2  85 BE                sta     STRNG1
0010EAr 2  84 BF                sty     STRNG1+1
0010ECr 2  85 B1                sta     FAC+1
0010EEr 2  84 B2                sty     FAC+2
0010F0r 2  A0 FF                ldy     #$FF
0010F2r 2               L3298:
0010F2r 2  C8                   iny
0010F3r 2  B1 BE                lda     (STRNG1),y
0010F5r 2  F0 0C                beq     L32A9
0010F7r 2  C5 5A                cmp     CHARAC
0010F9r 2  F0 04                beq     L32A5
0010FBr 2  C5 5B                cmp     ENDCHR
0010FDr 2  D0 F3                bne     L3298
0010FFr 2               L32A5:
0010FFr 2  C9 22                cmp     #$22
001101r 2  F0 01                beq     L32AA
001103r 2               L32A9:
001103r 2  18                   clc
001104r 2               L32AA:
001104r 2  84 B0                sty     FAC
001106r 2  98                   tya
001107r 2  65 BE                adc     STRNG1
001109r 2  85 C0                sta     STRNG2
00110Br 2  A6 BF                ldx     STRNG1+1
00110Dr 2  90 01                bcc     L32B6
00110Fr 2  E8                   inx
001110r 2               L32B6:
001110r 2  86 C1                stx     STRNG2+1
001112r 2  A5 BF                lda     STRNG1+1
001114r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
001114r 2                       beq     LD399
001114r 2                       cmp     #>INPUTBUFFER
001114r 2               .elseif .def(AIM65)
001114r 2                       beq     LD399
001114r 2                       cmp     #$01
001114r 2               .endif
001114r 2  D0 0B                bne     PUTNEW
001116r 2               LD399:
001116r 2  98                   tya
001117r 2  20 rr rr             jsr     STRINI
00111Ar 2  A6 BE                ldx     STRNG1
00111Cr 2  A4 BF                ldy     STRNG1+1
00111Er 2  20 rr rr             jsr     MOVSTR
001121r 2               
001121r 2               ; ----------------------------------------------------------------------------
001121r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
001121r 2               ;
001121r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
001121r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
001121r 2               ; ----------------------------------------------------------------------------
001121r 2               PUTNEW:
001121r 2  A6 65                ldx     TEMPPT
001123r 2  E0 71                cpx     #TEMPST+9
001125r 2  D0 05                bne     PUTEMP
001127r 2  A2 CC                ldx     #ERR_FRMCPX
001129r 2               JERR:
001129r 2  4C rr rr             jmp     ERROR
00112Cr 2               PUTEMP:
00112Cr 2  A5 B0                lda     FAC
00112Er 2  95 00                sta     0,x
001130r 2  A5 B1                lda     FAC+1
001132r 2  95 01                sta     1,x
001134r 2  A5 B2                lda     FAC+2
001136r 2  95 02                sta     2,x
001138r 2  A0 00                ldy     #$00
00113Ar 2  86 B3                stx     FAC_LAST-1
00113Cr 2  84 B4                sty     FAC_LAST
00113Er 2               .ifdef CONFIG_2
00113Er 2                       sty     FACEXTENSION
00113Er 2               .endif
00113Er 2  88                   dey
00113Fr 2  84 5E                sty     VALTYP
001141r 2  86 66                stx     LASTPT
001143r 2  E8                   inx
001144r 2  E8                   inx
001145r 2  E8                   inx
001146r 2  86 65                stx     TEMPPT
001148r 2  60                   rts
001149r 2               
001149r 2               ; ----------------------------------------------------------------------------
001149r 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
001149r 2               ; (A)=# BYTES SPACE TO MAKE
001149r 2               ;
001149r 2               ; RETURN WITH (A) SAME,
001149r 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
001149r 2               ; ----------------------------------------------------------------------------
001149r 2               GETSPA:
001149r 2  46 60                lsr     DATAFLG
00114Br 2               L32F1:
00114Br 2  48                   pha
00114Cr 2  49 FF                eor     #$FF
00114Er 2  38                   sec
00114Fr 2  65 82                adc     FRETOP
001151r 2  A4 83                ldy     FRETOP+1
001153r 2  B0 01                bcs     L32FC
001155r 2  88                   dey
001156r 2               L32FC:
001156r 2  C4 81                cpy     STREND+1
001158r 2  90 11                bcc     L3311
00115Ar 2  D0 04                bne     L3306
00115Cr 2  C5 80                cmp     STREND
00115Er 2  90 0B                bcc     L3311
001160r 2               L3306:
001160r 2  85 82                sta     FRETOP
001162r 2  84 83                sty     FRETOP+1
001164r 2  85 84                sta     FRESPC
001166r 2  84 85                sty     FRESPC+1
001168r 2  AA                   tax
001169r 2  68                   pla
00116Ar 2  60                   rts
00116Br 2               L3311:
00116Br 2  A2 52                ldx     #ERR_MEMFULL
00116Dr 2  A5 60                lda     DATAFLG
00116Fr 2  30 B8                bmi     JERR
001171r 2  20 rr rr             jsr     GARBAG
001174r 2  A9 80                lda     #$80
001176r 2  85 60                sta     DATAFLG
001178r 2  68                   pla
001179r 2  D0 D0                bne     L32F1
00117Br 2               
00117Br 2               ; ----------------------------------------------------------------------------
00117Br 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00117Br 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00117Br 2               ; BELOW STRING AREA DOWN TO STREND.
00117Br 2               ; ----------------------------------------------------------------------------
00117Br 2               GARBAG:
00117Br 2               
00117Br 2               .ifdef CONST_MEMSIZ
00117Br 2                       ldx     #<CONST_MEMSIZ
00117Br 2                       lda     #>CONST_MEMSIZ
00117Br 2               .else
00117Br 2  A6 86                ldx     MEMSIZ
00117Dr 2  A5 87                lda     MEMSIZ+1
00117Fr 2               .endif
00117Fr 2               FINDHIGHESTSTRING:
00117Fr 2  86 82                stx     FRETOP
001181r 2  85 83                sta     FRETOP+1
001183r 2  A0 00                ldy     #$00
001185r 2  84 9E                sty     FNCNAM+1
001187r 2               .ifdef CONFIG_2
001187r 2                       sty     FNCNAM	; GC bugfix!
001187r 2               .endif
001187r 2  A5 80                lda     STREND
001189r 2  A6 81                ldx     STREND+1
00118Br 2  85 AE                sta     LOWTR
00118Dr 2  86 AF                stx     LOWTR+1
00118Fr 2  A9 68                lda     #TEMPST
001191r 2  A2 00                ldx     #$00
001193r 2  85 71                sta     INDEX
001195r 2  86 72                stx     INDEX+1
001197r 2               L333D:
001197r 2  C5 65                cmp     TEMPPT
001199r 2  F0 05                beq     L3346
00119Br 2  20 rr rr             jsr     CHECK_VARIABLE
00119Er 2  F0 F7                beq     L333D
0011A0r 2               L3346:
0011A0r 2  A9 07                lda     #BYTES_PER_VARIABLE
0011A2r 2  85 A2                sta     DSCLEN
0011A4r 2  A5 7C                lda     VARTAB
0011A6r 2  A6 7D                ldx     VARTAB+1
0011A8r 2  85 71                sta     INDEX
0011AAr 2  86 72                stx     INDEX+1
0011ACr 2               L3352:
0011ACr 2  E4 7F                cpx     ARYTAB+1
0011AEr 2  D0 04                bne     L335A
0011B0r 2  C5 7E                cmp     ARYTAB
0011B2r 2  F0 05                beq     L335F
0011B4r 2               L335A:
0011B4r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
0011B7r 2  F0 F3                beq     L3352
0011B9r 2               L335F:
0011B9r 2  85 A7                sta     HIGHDS
0011BBr 2  86 A8                stx     HIGHDS+1
0011BDr 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
0011BFr 2  85 A2                sta     DSCLEN
0011C1r 2               L3367:
0011C1r 2  A5 A7                lda     HIGHDS
0011C3r 2  A6 A8                ldx     HIGHDS+1
0011C5r 2               L336B:
0011C5r 2  E4 81                cpx     STREND+1
0011C7r 2  D0 07                bne     L3376
0011C9r 2  C5 80                cmp     STREND
0011CBr 2  D0 03                bne     L3376
0011CDr 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
0011D0r 2               L3376:
0011D0r 2  85 71                sta     INDEX
0011D2r 2  86 72                stx     INDEX+1
0011D4r 2               .ifdef CONFIG_SMALL
0011D4r 2                       ldy     #$01
0011D4r 2               .else
0011D4r 2  A0 00                ldy     #$00
0011D6r 2  B1 71                lda     (INDEX),y
0011D8r 2  AA                   tax
0011D9r 2  C8                   iny
0011DAr 2               .endif
0011DAr 2  B1 71                lda     (INDEX),y
0011DCr 2  08                   php
0011DDr 2  C8                   iny
0011DEr 2  B1 71                lda     (INDEX),y
0011E0r 2  65 A7                adc     HIGHDS
0011E2r 2  85 A7                sta     HIGHDS
0011E4r 2  C8                   iny
0011E5r 2  B1 71                lda     (INDEX),y
0011E7r 2  65 A8                adc     HIGHDS+1
0011E9r 2  85 A8                sta     HIGHDS+1
0011EBr 2  28                   plp
0011ECr 2  10 D3                bpl     L3367
0011EEr 2               .ifndef CONFIG_SMALL
0011EEr 2  8A                   txa
0011EFr 2  30 D0                bmi     L3367
0011F1r 2               .endif
0011F1r 2  C8                   iny
0011F2r 2  B1 71                lda     (INDEX),y
0011F4r 2               .ifdef CONFIG_CBM1_PATCHES
0011F4r 2  20 F3 E7             jsr     LE7F3 ; XXX patch, call into screen editor
0011F7r 2               .else
0011F7r 2                 .ifdef CONFIG_11
0011F7r 2                       ldy     #$00	; GC bugfix
0011F7r 2                 .endif
0011F7r 2                       asl     a
0011F7r 2                       adc     #$05
0011F7r 2               .endif
0011F7r 2  65 71                adc     INDEX
0011F9r 2  85 71                sta     INDEX
0011FBr 2  90 02                bcc     L33A7
0011FDr 2  E6 72                inc     INDEX+1
0011FFr 2               L33A7:
0011FFr 2  A6 72                ldx     INDEX+1
001201r 2               L33A9:
001201r 2  E4 A8                cpx     HIGHDS+1
001203r 2  D0 04                bne     L33B1
001205r 2  C5 A7                cmp     HIGHDS
001207r 2  F0 BC                beq     L336B
001209r 2               L33B1:
001209r 2  20 rr rr             jsr     CHECK_VARIABLE
00120Cr 2  F0 F3                beq     L33A9
00120Er 2               
00120Er 2               ; ----------------------------------------------------------------------------
00120Er 2               ; PROCESS A SIMPLE VARIABLE
00120Er 2               ; ----------------------------------------------------------------------------
00120Er 2               CHECK_SIMPLE_VARIABLE:
00120Er 2               .ifndef CONFIG_SMALL
00120Er 2  B1 71                lda     (INDEX),y
001210r 2  30 35                bmi     CHECK_BUMP
001212r 2               .endif
001212r 2  C8                   iny
001213r 2  B1 71                lda     (INDEX),y
001215r 2  10 30                bpl     CHECK_BUMP
001217r 2  C8                   iny
001218r 2               
001218r 2               ; ----------------------------------------------------------------------------
001218r 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
001218r 2               ; ----------------------------------------------------------------------------
001218r 2               CHECK_VARIABLE:
001218r 2  B1 71                lda     (INDEX),y
00121Ar 2  F0 2B                beq     CHECK_BUMP
00121Cr 2  C8                   iny
00121Dr 2  B1 71                lda     (INDEX),y
00121Fr 2  AA                   tax
001220r 2  C8                   iny
001221r 2  B1 71                lda     (INDEX),y
001223r 2  C5 83                cmp     FRETOP+1
001225r 2  90 06                bcc     L33D5
001227r 2  D0 1E                bne     CHECK_BUMP
001229r 2  E4 82                cpx     FRETOP
00122Br 2  B0 1A                bcs     CHECK_BUMP
00122Dr 2               L33D5:
00122Dr 2  C5 AF                cmp     LOWTR+1
00122Fr 2  90 16                bcc     CHECK_BUMP
001231r 2  D0 04                bne     L33DF
001233r 2  E4 AE                cpx     LOWTR
001235r 2  90 10                bcc     CHECK_BUMP
001237r 2               L33DF:
001237r 2  86 AE                stx     LOWTR
001239r 2  85 AF                sta     LOWTR+1
00123Br 2  A5 71                lda     INDEX
00123Dr 2  A6 72                ldx     INDEX+1
00123Fr 2  85 9D                sta     FNCNAM
001241r 2  86 9E                stx     FNCNAM+1
001243r 2  A5 A2                lda     DSCLEN
001245r 2  85 A4                sta     Z52
001247r 2               
001247r 2               ; ----------------------------------------------------------------------------
001247r 2               ; ADD (DSCLEN) TO PNTR IN INDEX
001247r 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
001247r 2               ; ----------------------------------------------------------------------------
001247r 2               CHECK_BUMP:
001247r 2  A5 A2                lda     DSCLEN
001249r 2  18                   clc
00124Ar 2  65 71                adc     INDEX
00124Cr 2  85 71                sta     INDEX
00124Er 2  90 02                bcc     L33FA
001250r 2  E6 72                inc     INDEX+1
001252r 2               L33FA:
001252r 2  A6 72                ldx     INDEX+1
001254r 2  A0 00                ldy     #$00
001256r 2  60                   rts
001257r 2               
001257r 2               ; ----------------------------------------------------------------------------
001257r 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
001257r 2               ; TO TOP AND GO BACK FOR ANOTHER
001257r 2               ; ----------------------------------------------------------------------------
001257r 2               MOVE_HIGHEST_STRING_TO_TOP:
001257r 2               .ifdef CONFIG_2
001257r 2                       lda     FNCNAM+1	; GC bugfix
001257r 2                       ora     FNCNAM
001257r 2               .else
001257r 2  A6 9E                ldx     FNCNAM+1
001259r 2               .endif
001259r 2  F0 F7                beq     L33FA
00125Br 2  A5 A4                lda     Z52
00125Dr 2               .ifndef CONFIG_10A
00125Dr 2  E9 03                sbc     #$03
00125Fr 2               .else
00125Fr 2                       and     #$04
00125Fr 2               .endif
00125Fr 2  4A                   lsr     a
001260r 2  A8                   tay
001261r 2  85 A4                sta     Z52
001263r 2  B1 9D                lda     (FNCNAM),y
001265r 2  65 AE                adc     LOWTR
001267r 2  85 A9                sta     HIGHTR
001269r 2  A5 AF                lda     LOWTR+1
00126Br 2  69 00                adc     #$00
00126Dr 2  85 AA                sta     HIGHTR+1
00126Fr 2  A5 82                lda     FRETOP
001271r 2  A6 83                ldx     FRETOP+1
001273r 2  85 A7                sta     HIGHDS
001275r 2  86 A8                stx     HIGHDS+1
001277r 2  20 rr rr             jsr     BLTU2
00127Ar 2  A4 A4                ldy     Z52
00127Cr 2  C8                   iny
00127Dr 2  A5 A7                lda     HIGHDS
00127Fr 2  91 9D                sta     (FNCNAM),y
001281r 2  AA                   tax
001282r 2  E6 A8                inc     HIGHDS+1
001284r 2  A5 A8                lda     HIGHDS+1
001286r 2  C8                   iny
001287r 2  91 9D                sta     (FNCNAM),y
001289r 2  4C rr rr             jmp     FINDHIGHESTSTRING
00128Cr 2               
00128Cr 2               ; ----------------------------------------------------------------------------
00128Cr 2               ; CONCATENATE TWO STRINGS
00128Cr 2               ; ----------------------------------------------------------------------------
00128Cr 2               CAT:
00128Cr 2  A5 B4                lda     FAC_LAST
00128Er 2  48                   pha
00128Fr 2  A5 B3                lda     FAC_LAST-1
001291r 2  48                   pha
001292r 2  20 rr rr             jsr     FRM_ELEMENT
001295r 2  20 rr rr             jsr     CHKSTR
001298r 2  68                   pla
001299r 2  85 BE                sta     STRNG1
00129Br 2  68                   pla
00129Cr 2  85 BF                sta     STRNG1+1
00129Er 2  A0 00                ldy     #$00
0012A0r 2  B1 BE                lda     (STRNG1),y
0012A2r 2  18                   clc
0012A3r 2  71 B3                adc     (FAC_LAST-1),y
0012A5r 2  90 05                bcc     L3454
0012A7r 2  A2 B5                ldx     #ERR_STRLONG
0012A9r 2  4C rr rr             jmp     ERROR
0012ACr 2               L3454:
0012ACr 2  20 rr rr             jsr     STRINI
0012AFr 2  20 rr rr             jsr     MOVINS
0012B2r 2  A5 9F                lda     DSCPTR
0012B4r 2  A4 A0                ldy     DSCPTR+1
0012B6r 2  20 rr rr             jsr     FRETMP
0012B9r 2  20 rr rr             jsr     MOVSTR1
0012BCr 2  A5 BE                lda     STRNG1
0012BEr 2  A4 BF                ldy     STRNG1+1
0012C0r 2  20 rr rr             jsr     FRETMP
0012C3r 2  20 rr rr             jsr     PUTNEW
0012C6r 2  4C rr rr             jmp     FRMEVL2
0012C9r 2               
0012C9r 2               ; ----------------------------------------------------------------------------
0012C9r 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
0012C9r 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
0012C9r 2               ; ----------------------------------------------------------------------------
0012C9r 2               MOVINS:
0012C9r 2  A0 00                ldy     #$00
0012CBr 2  B1 BE                lda     (STRNG1),y
0012CDr 2  48                   pha
0012CEr 2  C8                   iny
0012CFr 2  B1 BE                lda     (STRNG1),y
0012D1r 2  AA                   tax
0012D2r 2  C8                   iny
0012D3r 2  B1 BE                lda     (STRNG1),y
0012D5r 2  A8                   tay
0012D6r 2  68                   pla
0012D7r 2               
0012D7r 2               ; ----------------------------------------------------------------------------
0012D7r 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
0012D7r 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
0012D7r 2               ; ----------------------------------------------------------------------------
0012D7r 2               MOVSTR:
0012D7r 2  86 71                stx     INDEX
0012D9r 2  84 72                sty     INDEX+1
0012DBr 2               MOVSTR1:
0012DBr 2  A8                   tay
0012DCr 2  F0 0A                beq     L3490
0012DEr 2  48                   pha
0012DFr 2               L3487:
0012DFr 2  88                   dey
0012E0r 2  B1 71                lda     (INDEX),y
0012E2r 2  91 84                sta     (FRESPC),y
0012E4r 2  98                   tya
0012E5r 2  D0 F8                bne     L3487
0012E7r 2  68                   pla
0012E8r 2               L3490:
0012E8r 2  18                   clc
0012E9r 2  65 84                adc     FRESPC
0012EBr 2  85 84                sta     FRESPC
0012EDr 2  90 02                bcc     L3499
0012EFr 2  E6 85                inc     FRESPC+1
0012F1r 2               L3499:
0012F1r 2  60                   rts
0012F2r 2               
0012F2r 2               ; ----------------------------------------------------------------------------
0012F2r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
0012F2r 2               ; ----------------------------------------------------------------------------
0012F2r 2               FRESTR:
0012F2r 2  20 rr rr             jsr     CHKSTR
0012F5r 2               
0012F5r 2               ; ----------------------------------------------------------------------------
0012F5r 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
0012F5r 2               ; A TEMPORARY STRING, RELEASE IT.
0012F5r 2               ; ----------------------------------------------------------------------------
0012F5r 2               FREFAC:
0012F5r 2  A5 B3                lda     FAC_LAST-1
0012F7r 2  A4 B4                ldy     FAC_LAST
0012F9r 2               
0012F9r 2               ; ----------------------------------------------------------------------------
0012F9r 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
0012F9r 2               ; A TEMPORARY STRING, RELEASE IT.
0012F9r 2               ; ----------------------------------------------------------------------------
0012F9r 2               FRETMP:
0012F9r 2  85 71                sta     INDEX
0012FBr 2  84 72                sty     INDEX+1
0012FDr 2  20 rr rr             jsr     FRETMS
001300r 2  08                   php
001301r 2  A0 00                ldy     #$00
001303r 2  B1 71                lda     (INDEX),y
001305r 2  48                   pha
001306r 2  C8                   iny
001307r 2  B1 71                lda     (INDEX),y
001309r 2  AA                   tax
00130Ar 2  C8                   iny
00130Br 2  B1 71                lda     (INDEX),y
00130Dr 2  A8                   tay
00130Er 2  68                   pla
00130Fr 2  28                   plp
001310r 2  D0 13                bne     L34CD
001312r 2  C4 83                cpy     FRETOP+1
001314r 2  D0 0F                bne     L34CD
001316r 2  E4 82                cpx     FRETOP
001318r 2  D0 0B                bne     L34CD
00131Ar 2  48                   pha
00131Br 2  18                   clc
00131Cr 2  65 82                adc     FRETOP
00131Er 2  85 82                sta     FRETOP
001320r 2  90 02                bcc     L34CC
001322r 2  E6 83                inc     FRETOP+1
001324r 2               L34CC:
001324r 2  68                   pla
001325r 2               L34CD:
001325r 2  86 71                stx     INDEX
001327r 2  84 72                sty     INDEX+1
001329r 2  60                   rts
00132Ar 2               
00132Ar 2               ; ----------------------------------------------------------------------------
00132Ar 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
00132Ar 2               ; ----------------------------------------------------------------------------
00132Ar 2               FRETMS:
00132Ar 2               .ifdef KBD
00132Ar 2                       cpy     #$00
00132Ar 2               .else
00132Ar 2  C4 67                cpy     LASTPT+1
00132Cr 2               .endif
00132Cr 2  D0 0C                bne     L34E2
00132Er 2  C5 66                cmp     LASTPT
001330r 2  D0 08                bne     L34E2
001332r 2  85 65                sta     TEMPPT
001334r 2  E9 03                sbc     #$03
001336r 2  85 66                sta     LASTPT
001338r 2  A0 00                ldy     #$00
00133Ar 2               L34E2:
00133Ar 2  60                   rts
00133Br 2               
00133Br 2               ; ----------------------------------------------------------------------------
00133Br 2               ; "CHR$" FUNCTION
00133Br 2               ; ----------------------------------------------------------------------------
00133Br 2               CHRSTR:
00133Br 2  20 rr rr             jsr     CONINT
00133Er 2  8A                   txa
00133Fr 2  48                   pha
001340r 2  A9 01                lda     #$01
001342r 2  20 rr rr             jsr     STRSPA
001345r 2  68                   pla
001346r 2  A0 00                ldy     #$00
001348r 2  91 B1                sta     (FAC+1),y
00134Ar 2  68                   pla
00134Br 2  68                   pla
00134Cr 2  4C rr rr             jmp     PUTNEW
00134Fr 2               
00134Fr 2               ; ----------------------------------------------------------------------------
00134Fr 2               ; "LEFT$" FUNCTION
00134Fr 2               ; ----------------------------------------------------------------------------
00134Fr 2               LEFTSTR:
00134Fr 2  20 rr rr             jsr     SUBSTRING_SETUP
001352r 2  D1 9F                cmp     (DSCPTR),y
001354r 2  98                   tya
001355r 2               SUBSTRING1:
001355r 2  90 04                bcc     L3503
001357r 2  B1 9F                lda     (DSCPTR),y
001359r 2  AA                   tax
00135Ar 2  98                   tya
00135Br 2               L3503:
00135Br 2  48                   pha
00135Cr 2               SUBSTRING2:
00135Cr 2  8A                   txa
00135Dr 2               SUBSTRING3:
00135Dr 2  48                   pha
00135Er 2  20 rr rr             jsr     STRSPA
001361r 2  A5 9F                lda     DSCPTR
001363r 2  A4 A0                ldy     DSCPTR+1
001365r 2  20 rr rr             jsr     FRETMP
001368r 2  68                   pla
001369r 2  A8                   tay
00136Ar 2  68                   pla
00136Br 2  18                   clc
00136Cr 2  65 71                adc     INDEX
00136Er 2  85 71                sta     INDEX
001370r 2  90 02                bcc     L351C
001372r 2  E6 72                inc     INDEX+1
001374r 2               L351C:
001374r 2  98                   tya
001375r 2  20 rr rr             jsr     MOVSTR1
001378r 2  4C rr rr             jmp     PUTNEW
00137Br 2               
00137Br 2               ; ----------------------------------------------------------------------------
00137Br 2               ; "RIGHT$" FUNCTION
00137Br 2               ; ----------------------------------------------------------------------------
00137Br 2               RIGHTSTR:
00137Br 2  20 rr rr             jsr     SUBSTRING_SETUP
00137Er 2  18                   clc
00137Fr 2  F1 9F                sbc     (DSCPTR),y
001381r 2  49 FF                eor     #$FF
001383r 2  4C rr rr             jmp     SUBSTRING1
001386r 2               
001386r 2               ; ----------------------------------------------------------------------------
001386r 2               ; "MID$" FUNCTION
001386r 2               ; ----------------------------------------------------------------------------
001386r 2               MIDSTR:
001386r 2  A9 FF                lda     #$FF
001388r 2  85 B4                sta     FAC_LAST
00138Ar 2  20 C8 00             jsr     CHRGOT
00138Dr 2  C9 29                cmp     #$29
00138Fr 2  F0 06                beq     L353F
001391r 2  20 rr rr             jsr     CHKCOM
001394r 2  20 rr rr             jsr     GETBYT
001397r 2               L353F:
001397r 2  20 rr rr             jsr     SUBSTRING_SETUP
00139Ar 2               .ifdef CONFIG_2
00139Ar 2                       beq     GOIQ
00139Ar 2               .endif
00139Ar 2  CA                   dex
00139Br 2  8A                   txa
00139Cr 2  48                   pha
00139Dr 2  18                   clc
00139Er 2  A2 00                ldx     #$00
0013A0r 2  F1 9F                sbc     (DSCPTR),y
0013A2r 2  B0 B8                bcs     SUBSTRING2
0013A4r 2  49 FF                eor     #$FF
0013A6r 2  C5 B4                cmp     FAC_LAST
0013A8r 2  90 B3                bcc     SUBSTRING3
0013AAr 2  A5 B4                lda     FAC_LAST
0013ACr 2  B0 AF                bcs     SUBSTRING3
0013AEr 2               
0013AEr 2               ; ----------------------------------------------------------------------------
0013AEr 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
0013AEr 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
0013AEr 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
0013AEr 2               ; ----------------------------------------------------------------------------
0013AEr 2               SUBSTRING_SETUP:
0013AEr 2  20 rr rr             jsr     CHKCLS
0013B1r 2  68                   pla
0013B2r 2               .ifndef CONFIG_11
0013B2r 2  85 A4                sta     JMPADRS+1
0013B4r 2  68                   pla
0013B5r 2  85 A5                sta     JMPADRS+2
0013B7r 2               .else
0013B7r 2                       tay
0013B7r 2                       pla
0013B7r 2                       sta     Z52
0013B7r 2               .endif
0013B7r 2  68                   pla
0013B8r 2  68                   pla
0013B9r 2  68                   pla
0013BAr 2  AA                   tax
0013BBr 2  68                   pla
0013BCr 2  85 9F                sta     DSCPTR
0013BEr 2  68                   pla
0013BFr 2  85 A0                sta     DSCPTR+1
0013C1r 2               .ifdef CONFIG_11
0013C1r 2                       lda     Z52
0013C1r 2                       pha
0013C1r 2                       tya
0013C1r 2                       pha
0013C1r 2               .endif
0013C1r 2  A0 00                ldy     #$00
0013C3r 2  8A                   txa
0013C4r 2               .ifndef CONFIG_2
0013C4r 2  F0 21                beq     GOIQ
0013C6r 2               .endif
0013C6r 2               .ifndef CONFIG_11
0013C6r 2  E6 A4                inc     JMPADRS+1
0013C8r 2  6C A4 00             jmp     (JMPADRS+1)
0013CBr 2               .else
0013CBr 2                       rts
0013CBr 2               .endif
0013CBr 2               
0013CBr 2               ; ----------------------------------------------------------------------------
0013CBr 2               ; "LEN" FUNCTION
0013CBr 2               ; ----------------------------------------------------------------------------
0013CBr 2               LEN:
0013CBr 2  20 rr rr             jsr     GETSTR
0013CEr 2               SNGFLT1:
0013CEr 2  4C rr rr             jmp     SNGFLT
0013D1r 2               
0013D1r 2               ; ----------------------------------------------------------------------------
0013D1r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
0013D1r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
0013D1r 2               ; ----------------------------------------------------------------------------
0013D1r 2               GETSTR:
0013D1r 2  20 rr rr             jsr     FRESTR
0013D4r 2  A2 00                ldx     #$00
0013D6r 2  86 5E                stx     VALTYP
0013D8r 2  A8                   tay
0013D9r 2  60                   rts
0013DAr 2               
0013DAr 2               ; ----------------------------------------------------------------------------
0013DAr 2               ; "ASC" FUNCTION
0013DAr 2               ; ----------------------------------------------------------------------------
0013DAr 2               ASC:
0013DAr 2  20 rr rr             jsr     GETSTR
0013DDr 2  F0 08                beq     GOIQ
0013DFr 2  A0 00                ldy     #$00
0013E1r 2  B1 71                lda     (INDEX),y
0013E3r 2  A8                   tay
0013E4r 2               .ifndef CONFIG_11A
0013E4r 2  4C rr rr             jmp     SNGFLT1
0013E7r 2               .else
0013E7r 2                       jmp     SNGFLT
0013E7r 2               .endif
0013E7r 2               ; ----------------------------------------------------------------------------
0013E7r 2               GOIQ:
0013E7r 2  4C rr rr             jmp     IQERR
0013EAr 2               
0013EAr 2               ; ----------------------------------------------------------------------------
0013EAr 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
0013EAr 2               ; TO SINGLE BYTE IN X-REG
0013EAr 2               ; ----------------------------------------------------------------------------
0013EAr 2               GTBYTC:
0013EAr 2  20 C2 00             jsr     CHRGET
0013EDr 2               
0013EDr 2               ; ----------------------------------------------------------------------------
0013EDr 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
0013EDr 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
0013EDr 2               ; ----------------------------------------------------------------------------
0013EDr 2               GETBYT:
0013EDr 2  20 rr rr             jsr     FRMNUM
0013F0r 2               
0013F0r 2               ; ----------------------------------------------------------------------------
0013F0r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
0013F0r 2               ; ----------------------------------------------------------------------------
0013F0r 2               CONINT:
0013F0r 2  20 rr rr             jsr     MKINT
0013F3r 2  A6 B3                ldx     FAC_LAST-1
0013F5r 2  D0 F0                bne     GOIQ
0013F7r 2  A6 B4                ldx     FAC_LAST
0013F9r 2  4C C8 00             jmp     CHRGOT
0013FCr 2               
0013FCr 2               ; ----------------------------------------------------------------------------
0013FCr 2               ; "VAL" FUNCTION
0013FCr 2               ; ----------------------------------------------------------------------------
0013FCr 2               VAL:
0013FCr 2  20 rr rr             jsr     GETSTR
0013FFr 2  D0 03                bne     L35AC
001401r 2  4C rr rr             jmp     ZERO_FAC
001404r 2               L35AC:
001404r 2  A6 C9                ldx     TXTPTR
001406r 2  A4 CA                ldy     TXTPTR+1
001408r 2  86 C0                stx     STRNG2
00140Ar 2  84 C1                sty     STRNG2+1
00140Cr 2  A6 71                ldx     INDEX
00140Er 2  86 C9                stx     TXTPTR
001410r 2  18                   clc
001411r 2  65 71                adc     INDEX
001413r 2  85 73                sta     DEST
001415r 2  A6 72                ldx     INDEX+1
001417r 2  86 CA                stx     TXTPTR+1
001419r 2  90 01                bcc     L35C4
00141Br 2  E8                   inx
00141Cr 2               L35C4:
00141Cr 2  86 74                stx     DEST+1
00141Er 2  A0 00                ldy     #$00
001420r 2  B1 73                lda     (DEST),y
001422r 2  48                   pha
001423r 2  A9 00                lda     #$00
001425r 2  91 73                sta     (DEST),y
001427r 2  20 C8 00             jsr     CHRGOT
00142Ar 2  20 rr rr             jsr     FIN
00142Dr 2  68                   pla
00142Er 2  A0 00                ldy     #$00
001430r 2  91 73                sta     (DEST),y
001432r 2               
001432r 2               ; ----------------------------------------------------------------------------
001432r 2               ; COPY STRNG2 INTO TXTPTR
001432r 2               ; ----------------------------------------------------------------------------
001432r 2               POINT:
001432r 2  A6 C0                ldx     STRNG2
001434r 2  A4 C1                ldy     STRNG2+1
001436r 2  86 C9                stx     TXTPTR
001438r 2  84 CA                sty     TXTPTR+1
00143Ar 2  60                   rts
00143Br 2               
00143Br 2               
00143Br 1               .include "misc3.s"
00143Br 2               ; KBD specific patches
00143Br 2               
00143Br 2               .segment "CODE"
00143Br 2               
00143Br 2               .ifdef KBD
00143Br 2               VARTAB_MINUS_2_TO_AY:
00143Br 2                       lda     VARTAB
00143Br 2                       sec
00143Br 2                       sbc     #$02
00143Br 2                       ldy     VARTAB+1
00143Br 2                       bcs     LF42C
00143Br 2                       dey
00143Br 2               LF42C:
00143Br 2                       rts
00143Br 2               
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               GET_UPPER:
00143Br 2                       lda     INPUTBUFFERX,x
00143Br 2               LF430:
00143Br 2                       cmp     #'a'
00143Br 2                       bcc     LF43A
00143Br 2                       cmp     #'z'+1
00143Br 2                       bcs     LF43A
00143Br 2               LF438:
00143Br 2                       sbc     #$1F
00143Br 2               LF43A:
00143Br 2                       rts
00143Br 2               
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               GETLN:
00143Br 2                       ldx     #$5D
00143Br 2               LF43D:
00143Br 2                       txa
00143Br 2                       and     #$7F
00143Br 2                       cmp     $0340
00143Br 2                       beq     LF44D
00143Br 2                       sta     $0340
00143Br 2                       lda     #$03
00143Br 2                       jsr     LDE48
00143Br 2               LF44D:
00143Br 2                       jsr     LDE7F
00143Br 2                       bne     RTS4
00143Br 2                       cpx     #$80
00143Br 2                       bcc     LF44D
00143Br 2               RTS4:
00143Br 2                       rts
00143Br 2               
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               LF457:
00143Br 2                       lda     TXTTAB
00143Br 2                       ldx     TXTTAB+1
00143Br 2               LF45B:
00143Br 2                       sta     JMPADRS+1
00143Br 2                       stx     JMPADRS+2
00143Br 2                       ldy     #$01
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       beq     LF438
00143Br 2                       iny
00143Br 2                       iny
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       dey
00143Br 2                       cmp     LINNUM+1
00143Br 2                       bne     LF472
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       cmp     LINNUM
00143Br 2               LF472:
00143Br 2                       bcs     LF43A
00143Br 2                       dey
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       tax
00143Br 2                       dey
00143Br 2                       lda     (JMPADRS+1),y
00143Br 2                       bcc     LF45B
00143Br 2               LF47D:
00143Br 2                       jmp     (JMPADRS+1)
00143Br 2               .endif
00143Br 2               
00143Br 1               .include "poke.s"
00143Br 2               .segment "CODE"
00143Br 2               
00143Br 2               .ifndef CONFIG_NO_POKE
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               ; EVALUATE "EXP1,EXP2"
00143Br 2               ;
00143Br 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
00143Br 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
00143Br 2               ; ----------------------------------------------------------------------------
00143Br 2               GTNUM:
00143Br 2  20 rr rr             jsr     FRMNUM
00143Er 2  20 rr rr             jsr     GETADR
001441r 2               
001441r 2               ; ----------------------------------------------------------------------------
001441r 2               ; EVALUATE ",EXPRESSION"
001441r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001441r 2               ; ----------------------------------------------------------------------------
001441r 2               COMBYTE:
001441r 2  20 rr rr             jsr     CHKCOM
001444r 2  4C rr rr             jmp     GETBYT
001447r 2               
001447r 2               ; ----------------------------------------------------------------------------
001447r 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
001447r 2               ; ----------------------------------------------------------------------------
001447r 2               GETADR:
001447r 2  A5 B5                lda     FACSIGN
001449r 2                 .ifdef APPLE
001449r 2                       nop ; PATCH
001449r 2                       nop
001449r 2                 .else
001449r 2  30 9C                bmi     GOIQ
00144Br 2                 .endif
00144Br 2  A5 B0                lda     FAC
00144Dr 2  C9 91                cmp     #$91
00144Fr 2  B0 96                bcs     GOIQ
001451r 2  20 rr rr             jsr     QINT
001454r 2  A5 B3                lda     FAC_LAST-1
001456r 2  A4 B4                ldy     FAC_LAST
001458r 2  84 08                sty     LINNUM
00145Ar 2  85 09                sta     LINNUM+1
00145Cr 2  60                   rts
00145Dr 2               
00145Dr 2               ; ----------------------------------------------------------------------------
00145Dr 2               ; "PEEK" FUNCTION
00145Dr 2               ; ----------------------------------------------------------------------------
00145Dr 2               PEEK:
00145Dr 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
00145Dr 2                       lda     LINNUM+1
00145Dr 2                       pha
00145Dr 2                       lda     LINNUM
00145Dr 2                       pha
00145Dr 2               .endif
00145Dr 2  20 rr rr             jsr     GETADR
001460r 2  A0 00                ldy     #$00
001462r 2               .ifdef CBM1
001462r 2               ; disallow PEEK between $C000 and $DFFF
001462r 2  C9 C0                cmp     #$C0
001464r 2  90 04                bcc     LD6F3
001466r 2  C9 E1                cmp     #$E1
001468r 2  90 03                bcc     LD6F6
00146Ar 2               LD6F3:
00146Ar 2               .endif
00146Ar 2               .ifdef CBM2
00146Ar 2               		nop ; patch that disables the compares above
00146Ar 2               		nop
00146Ar 2               		nop
00146Ar 2               		nop
00146Ar 2               		nop
00146Ar 2               		nop
00146Ar 2               		nop
00146Ar 2               		nop
00146Ar 2               .endif
00146Ar 2  B1 08                lda     (LINNUM),y
00146Cr 2  A8                   tay
00146Dr 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
00146Dr 2                       pla
00146Dr 2                       sta     LINNUM
00146Dr 2                       pla
00146Dr 2                       sta     LINNUM+1
00146Dr 2               .endif
00146Dr 2               LD6F6:
00146Dr 2  4C rr rr             jmp     SNGFLT
001470r 2               
001470r 2               ; ----------------------------------------------------------------------------
001470r 2               ; "POKE" STATEMENT
001470r 2               ; ----------------------------------------------------------------------------
001470r 2               POKE:
001470r 2  20 rr rr             jsr     GTNUM
001473r 2  8A                   txa
001474r 2  A0 00                ldy     #$00
001476r 2  91 08                sta     (LINNUM),y
001478r 2  60                   rts
001479r 2               
001479r 2               ; ----------------------------------------------------------------------------
001479r 2               ; "WAIT" STATEMENT
001479r 2               ; ----------------------------------------------------------------------------
001479r 2               WAIT:
001479r 2  20 rr rr             jsr     GTNUM
00147Cr 2  86 98                stx     FORPNT
00147Er 2  A2 00                ldx     #$00
001480r 2  20 C8 00             jsr     CHRGOT
001483r 2               .ifdef CONFIG_EASTER_EGG
001483r 2                       beq     EASTER_EGG
001483r 2               .else
001483r 2  F0 03                beq     L3628
001485r 2               .endif
001485r 2  20 rr rr             jsr     COMBYTE
001488r 2               L3628:
001488r 2  86 99                stx     FORPNT+1
00148Ar 2  A0 00                ldy     #$00
00148Cr 2               L362C:
00148Cr 2  B1 08                lda     (LINNUM),y
00148Er 2  45 99                eor     FORPNT+1
001490r 2  25 98                and     FORPNT
001492r 2  F0 F8                beq     L362C
001494r 2               RTS3:
001494r 2  60                   rts
001495r 2               .endif
001495r 2               
001495r 1               .include "float.s"
001495r 2               .segment "CODE"
001495r 2               
001495r 2               TEMP1X = TEMP1+(5-BYTES_FP)
001495r 2               
001495r 2               ; ----------------------------------------------------------------------------
001495r 2               ; ADD 0.5 TO FAC
001495r 2               ; ----------------------------------------------------------------------------
001495r 2               FADDH:
001495r 2  A9 rr                lda     #<CON_HALF
001497r 2  A0 rr                ldy     #>CON_HALF
001499r 2  4C rr rr             jmp     FADD
00149Cr 2               
00149Cr 2               ; ----------------------------------------------------------------------------
00149Cr 2               ; FAC = (Y,A) - FAC
00149Cr 2               ; ----------------------------------------------------------------------------
00149Cr 2               FSUB:
00149Cr 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00149Fr 2               
00149Fr 2               ; ----------------------------------------------------------------------------
00149Fr 2               ; FAC = ARG - FAC
00149Fr 2               ; ----------------------------------------------------------------------------
00149Fr 2               FSUBT:
00149Fr 2  A5 B5                lda     FACSIGN
0014A1r 2  49 FF                eor     #$FF
0014A3r 2  85 B5                sta     FACSIGN
0014A5r 2  45 BD                eor     ARGSIGN
0014A7r 2  85 BE                sta     SGNCPR
0014A9r 2  A5 B0                lda     FAC
0014ABr 2  4C rr rr             jmp     FADDT
0014AEr 2               
0014AEr 2               ; ----------------------------------------------------------------------------
0014AEr 2               ; Commodore BASIC V2 Easter Egg
0014AEr 2               ; ----------------------------------------------------------------------------
0014AEr 2               .ifdef CONFIG_EASTER_EGG
0014AEr 2               EASTER_EGG:
0014AEr 2                       lda     LINNUM
0014AEr 2                       cmp     #<6502
0014AEr 2                       bne     L3628
0014AEr 2                       lda     LINNUM+1
0014AEr 2                       sbc     #>6502
0014AEr 2                       bne     L3628
0014AEr 2                       sta     LINNUM
0014AEr 2                       tay
0014AEr 2                       lda     #$80
0014AEr 2                       sta     LINNUM+1
0014AEr 2               LD758:
0014AEr 2                       ldx     #$0A
0014AEr 2               LD75A:
0014AEr 2                       lda     MICROSOFT-1,x
0014AEr 2                       and     #$3F
0014AEr 2                       sta     (LINNUM),y
0014AEr 2                       iny
0014AEr 2                       bne     LD766
0014AEr 2                       inc     LINNUM+1
0014AEr 2               LD766:
0014AEr 2                       dex
0014AEr 2                       bne     LD75A
0014AEr 2                       dec     FORPNT
0014AEr 2                       bne     LD758
0014AEr 2                       rts
0014AEr 2               .endif
0014AEr 2               
0014AEr 2               ; ----------------------------------------------------------------------------
0014AEr 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
0014AEr 2               ; ----------------------------------------------------------------------------
0014AEr 2               FADD1:
0014AEr 2  20 rr rr             jsr     SHIFT_RIGHT
0014B1r 2  90 3C                bcc     FADD3
0014B3r 2               
0014B3r 2               ; ----------------------------------------------------------------------------
0014B3r 2               ; FAC = (Y,A) + FAC
0014B3r 2               ; ----------------------------------------------------------------------------
0014B3r 2               FADD:
0014B3r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
0014B6r 2               
0014B6r 2               ; ----------------------------------------------------------------------------
0014B6r 2               ; FAC = ARG + FAC
0014B6r 2               ; ----------------------------------------------------------------------------
0014B6r 2               FADDT:
0014B6r 2  D0 03                bne     L365B
0014B8r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
0014BBr 2               L365B:
0014BBr 2  A6 BF                ldx     FACEXTENSION
0014BDr 2  86 A5                stx     ARGEXTENSION
0014BFr 2  A2 B8                ldx     #ARG
0014C1r 2  A5 B8                lda     ARG
0014C3r 2               FADD2:
0014C3r 2  A8                   tay
0014C4r 2               .ifdef KBD
0014C4r 2                       beq     RTS4
0014C4r 2               .else
0014C4r 2  F0 CE                beq     RTS3
0014C6r 2               .endif
0014C6r 2  38                   sec
0014C7r 2  E5 B0                sbc     FAC
0014C9r 2  F0 24                beq     FADD3
0014CBr 2  90 12                bcc     L367F
0014CDr 2  84 B0                sty     FAC
0014CFr 2  A4 BD                ldy     ARGSIGN
0014D1r 2  84 B5                sty     FACSIGN
0014D3r 2  49 FF                eor     #$FF
0014D5r 2  69 00                adc     #$00
0014D7r 2  A0 00                ldy     #$00
0014D9r 2  84 A5                sty     ARGEXTENSION
0014DBr 2  A2 B0                ldx     #FAC
0014DDr 2  D0 04                bne     L3683
0014DFr 2               L367F:
0014DFr 2  A0 00                ldy     #$00
0014E1r 2  84 BF                sty     FACEXTENSION
0014E3r 2               L3683:
0014E3r 2  C9 F9                cmp     #$F9
0014E5r 2  30 C7                bmi     FADD1
0014E7r 2  A8                   tay
0014E8r 2  A5 BF                lda     FACEXTENSION
0014EAr 2  56 01                lsr     1,x
0014ECr 2  20 rr rr             jsr     SHIFT_RIGHT4
0014EFr 2               FADD3:
0014EFr 2  24 BE                bit     SGNCPR
0014F1r 2  10 57                bpl     FADD4
0014F3r 2  A0 B0                ldy     #FAC
0014F5r 2  E0 B8                cpx     #ARG
0014F7r 2  F0 02                beq     L369B
0014F9r 2  A0 B8                ldy     #ARG
0014FBr 2               L369B:
0014FBr 2  38                   sec
0014FCr 2  49 FF                eor     #$FF
0014FEr 2  65 A5                adc     ARGEXTENSION
001500r 2  85 BF                sta     FACEXTENSION
001502r 2               .ifndef CONFIG_SMALL
001502r 2  B9 04 00             lda     4,y
001505r 2  F5 04                sbc     4,x
001507r 2  85 B4                sta     FAC+4
001509r 2               .endif
001509r 2  B9 03 00             lda     3,y
00150Cr 2  F5 03                sbc     3,x
00150Er 2  85 B3                sta     FAC+3
001510r 2  B9 02 00             lda     2,y
001513r 2  F5 02                sbc     2,x
001515r 2  85 B2                sta     FAC+2
001517r 2  B9 01 00             lda     1,y
00151Ar 2  F5 01                sbc     1,x
00151Cr 2  85 B1                sta     FAC+1
00151Er 2               
00151Er 2               ; ----------------------------------------------------------------------------
00151Er 2               ; NORMALIZE VALUE IN FAC
00151Er 2               ; ----------------------------------------------------------------------------
00151Er 2               NORMALIZE_FAC1:
00151Er 2  B0 03                bcs     NORMALIZE_FAC2
001520r 2  20 rr rr             jsr     COMPLEMENT_FAC
001523r 2               NORMALIZE_FAC2:
001523r 2  A0 00                ldy     #$00
001525r 2  98                   tya
001526r 2  18                   clc
001527r 2               L36C7:
001527r 2  A6 B1                ldx     FAC+1
001529r 2  D0 4A                bne     NORMALIZE_FAC4
00152Br 2  A6 B2                ldx     FAC+2
00152Dr 2  86 B1                stx     FAC+1
00152Fr 2  A6 B3                ldx     FAC+3
001531r 2  86 B2                stx     FAC+2
001533r 2               .ifdef CONFIG_SMALL
001533r 2                       ldx     FACEXTENSION
001533r 2                       stx     FAC+3
001533r 2               .else
001533r 2  A6 B4                ldx     FAC+4
001535r 2  86 B3                stx     FAC+3
001537r 2  A6 BF                ldx     FACEXTENSION
001539r 2  86 B4                stx     FAC+4
00153Br 2               .endif
00153Br 2  84 BF                sty     FACEXTENSION
00153Dr 2  69 08                adc     #$08
00153Fr 2               .ifdef CONFIG_2B
00153Fr 2               ; bugfix?
00153Fr 2               ; fix does not exist on AppleSoft 2
00153Fr 2                       cmp     #(MANTISSA_BYTES+1)*8
00153Fr 2               .else
00153Fr 2  C9 20                cmp     #MANTISSA_BYTES*8
001541r 2               .endif
001541r 2  D0 E4                bne     L36C7
001543r 2               
001543r 2               ; ----------------------------------------------------------------------------
001543r 2               ; SET FAC = 0
001543r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
001543r 2               ; ----------------------------------------------------------------------------
001543r 2               ZERO_FAC:
001543r 2  A9 00                lda     #$00
001545r 2               STA_IN_FAC_SIGN_AND_EXP:
001545r 2  85 B0                sta     FAC
001547r 2               STA_IN_FAC_SIGN:
001547r 2  85 B5                sta     FACSIGN
001549r 2  60                   rts
00154Ar 2               
00154Ar 2               ; ----------------------------------------------------------------------------
00154Ar 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
00154Ar 2               ; ----------------------------------------------------------------------------
00154Ar 2               FADD4:
00154Ar 2  65 A5                adc     ARGEXTENSION
00154Cr 2  85 BF                sta     FACEXTENSION
00154Er 2               .ifndef CONFIG_SMALL
00154Er 2  A5 B4                lda     FAC+4
001550r 2  65 BC                adc     ARG+4
001552r 2  85 B4                sta     FAC+4
001554r 2               .endif
001554r 2  A5 B3                lda     FAC+3
001556r 2  65 BB                adc     ARG+3
001558r 2  85 B3                sta     FAC+3
00155Ar 2  A5 B2                lda     FAC+2
00155Cr 2  65 BA                adc     ARG+2
00155Er 2  85 B2                sta     FAC+2
001560r 2  A5 B1                lda     FAC+1
001562r 2  65 B9                adc     ARG+1
001564r 2  85 B1                sta     FAC+1
001566r 2  4C rr rr             jmp     NORMALIZE_FAC5
001569r 2               
001569r 2               ; ----------------------------------------------------------------------------
001569r 2               ; FINISH NORMALIZING FAC
001569r 2               ; ----------------------------------------------------------------------------
001569r 2               NORMALIZE_FAC3:
001569r 2  69 01                adc     #$01
00156Br 2  06 BF                asl     FACEXTENSION
00156Dr 2               .ifndef CONFIG_SMALL
00156Dr 2  26 B4                rol     FAC+4
00156Fr 2               .endif
00156Fr 2  26 B3                rol     FAC+3
001571r 2  26 B2                rol     FAC+2
001573r 2  26 B1                rol     FAC+1
001575r 2               NORMALIZE_FAC4:
001575r 2  10 F2                bpl     NORMALIZE_FAC3
001577r 2  38                   sec
001578r 2  E5 B0                sbc     FAC
00157Ar 2  B0 C7                bcs     ZERO_FAC
00157Cr 2  49 FF                eor     #$FF
00157Er 2  69 01                adc     #$01
001580r 2  85 B0                sta     FAC
001582r 2               NORMALIZE_FAC5:
001582r 2  90 0E                bcc     L3764
001584r 2               NORMALIZE_FAC6:
001584r 2  E6 B0                inc     FAC
001586r 2  F0 42                beq     OVERFLOW
001588r 2               .ifndef CONFIG_ROR_WORKAROUND
001588r 2  66 B1                ror     FAC+1
00158Ar 2  66 B2                ror     FAC+2
00158Cr 2  66 B3                ror     FAC+3
00158Er 2                 .ifndef CONFIG_SMALL
00158Er 2  66 B4                ror     FAC+4
001590r 2                 .endif
001590r 2  66 BF                ror     FACEXTENSION
001592r 2               .else
001592r 2                       lda     #$00
001592r 2                       bcc     L372E
001592r 2                       lda     #$80
001592r 2               L372E:
001592r 2                       lsr     FAC+1
001592r 2                       ora     FAC+1
001592r 2                       sta     FAC+1
001592r 2                       lda     #$00
001592r 2                       bcc     L373A
001592r 2                       lda     #$80
001592r 2               L373A:
001592r 2                       lsr     FAC+2
001592r 2                       ora     FAC+2
001592r 2                       sta     FAC+2
001592r 2                       lda     #$00
001592r 2                       bcc     L3746
001592r 2                       lda     #$80
001592r 2               L3746:
001592r 2                       lsr     FAC+3
001592r 2                       ora     FAC+3
001592r 2                       sta     FAC+3
001592r 2                       lda     #$00
001592r 2                       bcc     L3752
001592r 2                       lda     #$80
001592r 2               L3752:
001592r 2                       lsr     FAC+4
001592r 2                       ora     FAC+4
001592r 2                       sta     FAC+4
001592r 2                       lda     #$00
001592r 2                       bcc     L375E
001592r 2                       lda     #$80
001592r 2               L375E:
001592r 2                       lsr     FACEXTENSION
001592r 2                       ora     FACEXTENSION
001592r 2                       sta     FACEXTENSION
001592r 2               .endif
001592r 2               L3764:
001592r 2  60                   rts
001593r 2               
001593r 2               ; ----------------------------------------------------------------------------
001593r 2               ; 2'S COMPLEMENT OF FAC
001593r 2               ; ----------------------------------------------------------------------------
001593r 2               COMPLEMENT_FAC:
001593r 2  A5 B5                lda     FACSIGN
001595r 2  49 FF                eor     #$FF
001597r 2  85 B5                sta     FACSIGN
001599r 2               
001599r 2               ; ----------------------------------------------------------------------------
001599r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
001599r 2               ; ----------------------------------------------------------------------------
001599r 2               COMPLEMENT_FAC_MANTISSA:
001599r 2  A5 B1                lda     FAC+1
00159Br 2  49 FF                eor     #$FF
00159Dr 2  85 B1                sta     FAC+1
00159Fr 2  A5 B2                lda     FAC+2
0015A1r 2  49 FF                eor     #$FF
0015A3r 2  85 B2                sta     FAC+2
0015A5r 2  A5 B3                lda     FAC+3
0015A7r 2  49 FF                eor     #$FF
0015A9r 2  85 B3                sta     FAC+3
0015ABr 2               .ifndef CONFIG_SMALL
0015ABr 2  A5 B4                lda     FAC+4
0015ADr 2  49 FF                eor     #$FF
0015AFr 2  85 B4                sta     FAC+4
0015B1r 2               .endif
0015B1r 2  A5 BF                lda     FACEXTENSION
0015B3r 2  49 FF                eor     #$FF
0015B5r 2  85 BF                sta     FACEXTENSION
0015B7r 2  E6 BF                inc     FACEXTENSION
0015B9r 2  D0 0E                bne     RTS12
0015BBr 2               
0015BBr 2               ; ----------------------------------------------------------------------------
0015BBr 2               ; INCREMENT FAC MANTISSA
0015BBr 2               ; ----------------------------------------------------------------------------
0015BBr 2               INCREMENT_FAC_MANTISSA:
0015BBr 2               .ifndef CONFIG_SMALL
0015BBr 2  E6 B4                inc     FAC+4
0015BDr 2  D0 0A                bne     RTS12
0015BFr 2               .endif
0015BFr 2  E6 B3                inc     FAC+3
0015C1r 2  D0 06                bne     RTS12
0015C3r 2  E6 B2                inc     FAC+2
0015C5r 2  D0 02                bne     RTS12
0015C7r 2  E6 B1                inc     FAC+1
0015C9r 2               RTS12:
0015C9r 2  60                   rts
0015CAr 2               OVERFLOW:
0015CAr 2  A2 4A                ldx     #ERR_OVERFLOW
0015CCr 2  4C rr rr             jmp     ERROR
0015CFr 2               
0015CFr 2               ; ----------------------------------------------------------------------------
0015CFr 2               ; SHIFT 1,X THRU 5,X RIGHT
0015CFr 2               ; (A) = NEGATIVE OF SHIFT COUNT
0015CFr 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
0015CFr 2               ;
0015CFr 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
0015CFr 2               ; ----------------------------------------------------------------------------
0015CFr 2               SHIFT_RIGHT1:
0015CFr 2  A2 74                ldx     #RESULT-1
0015D1r 2               SHIFT_RIGHT2:
0015D1r 2               .ifdef CONFIG_SMALL
0015D1r 2                       ldy     3,x
0015D1r 2               .else
0015D1r 2  B4 04                ldy     4,x
0015D3r 2               .endif
0015D3r 2  84 BF                sty     FACEXTENSION
0015D5r 2               .ifndef CONFIG_SMALL
0015D5r 2  B4 03                ldy     3,x
0015D7r 2  94 04                sty     4,x
0015D9r 2               .endif
0015D9r 2  B4 02                ldy     2,x
0015DBr 2  94 03                sty     3,x
0015DDr 2  B4 01                ldy     1,x
0015DFr 2  94 02                sty     2,x
0015E1r 2  A4 B7                ldy     SHIFTSIGNEXT
0015E3r 2  94 01                sty     1,x
0015E5r 2               
0015E5r 2               ; ----------------------------------------------------------------------------
0015E5r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0015E5r 2               ; ----------------------------------------------------------------------------
0015E5r 2               SHIFT_RIGHT:
0015E5r 2  69 08                adc     #$08
0015E7r 2  30 E8                bmi     SHIFT_RIGHT2
0015E9r 2  F0 E6                beq     SHIFT_RIGHT2
0015EBr 2  E9 08                sbc     #$08
0015EDr 2  A8                   tay
0015EEr 2  A5 BF                lda     FACEXTENSION
0015F0r 2  B0 14                bcs     SHIFT_RIGHT5
0015F2r 2               .ifndef CONFIG_ROR_WORKAROUND
0015F2r 2               LB588:
0015F2r 2  16 01                asl     1,x
0015F4r 2  90 02                bcc     LB58E
0015F6r 2  F6 01                inc     1,x
0015F8r 2               LB58E:
0015F8r 2  76 01                ror     1,x
0015FAr 2  76 01                ror     1,x
0015FCr 2               
0015FCr 2               ; ----------------------------------------------------------------------------
0015FCr 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
0015FCr 2               ; ----------------------------------------------------------------------------
0015FCr 2               SHIFT_RIGHT4:
0015FCr 2  76 02                ror     2,x
0015FEr 2  76 03                ror     3,x
001600r 2                 .ifndef CONFIG_SMALL
001600r 2  76 04                ror     4,x
001602r 2                 .endif
001602r 2  6A                   ror     a
001603r 2  C8                   iny
001604r 2  D0 EC                bne     LB588
001606r 2               .else
001606r 2               L37C4:
001606r 2                       pha
001606r 2                       lda     1,x
001606r 2                       and     #$80
001606r 2                       lsr     1,x
001606r 2                       ora     1,x
001606r 2                       sta     1,x
001606r 2                       .byte   $24
001606r 2               SHIFT_RIGHT4:
001606r 2                       pha
001606r 2                       lda     #$00
001606r 2                       bcc     L37D7
001606r 2                       lda     #$80
001606r 2               L37D7:
001606r 2                       lsr     2,x
001606r 2                       ora     2,x
001606r 2                       sta     2,x
001606r 2                       lda     #$00
001606r 2                       bcc     L37E3
001606r 2                       lda     #$80
001606r 2               L37E3:
001606r 2                       lsr     3,x
001606r 2                       ora     3,x
001606r 2                       sta     3,x
001606r 2                       lda     #$00
001606r 2                       bcc     L37EF
001606r 2                       lda     #$80
001606r 2               L37EF:
001606r 2                       lsr     4,x
001606r 2                       ora     4,x
001606r 2                       sta     4,x
001606r 2                       pla
001606r 2                       php
001606r 2                       lsr     a
001606r 2                       plp
001606r 2                       bcc     L37FD
001606r 2                       ora     #$80
001606r 2               L37FD:
001606r 2                       iny
001606r 2                       bne     L37C4
001606r 2               .endif
001606r 2               SHIFT_RIGHT5:
001606r 2  18                   clc
001607r 2  60                   rts
001608r 2               
001608r 2               ; ----------------------------------------------------------------------------
001608r 2               .ifdef CONFIG_SMALL
001608r 2               CON_ONE:
001608r 2                       .byte   $81,$00,$00,$00
001608r 2               POLY_LOG:
001608r 2               		.byte	$02
001608r 2               		.byte   $80,$19,$56,$62
001608r 2               		.byte   $80,$76,$22,$F3
001608r 2               		.byte   $82,$38,$AA,$40
001608r 2               CON_SQR_HALF:
001608r 2               		.byte   $80,$35,$04,$F3
001608r 2               CON_SQR_TWO:
001608r 2               		.byte   $81,$35,$04,$F3
001608r 2               CON_NEG_HALF:
001608r 2               		.byte   $80,$80,$00,$00
001608r 2               CON_LOG_TWO:
001608r 2               		.byte   $80,$31,$72,$18
001608r 2               .else
001608r 2               CON_ONE:
001608r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
00160Cr 2  00           
00160Dr 2               POLY_LOG:
00160Dr 2  03                   .byte   $03
00160Er 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
001612r 2  79           
001613r 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
001617r 2  64           
001618r 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
00161Cr 2  16           
00161Dr 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
001621r 2  20           
001622r 2               CON_SQR_HALF:
001622r 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
001626r 2  34           
001627r 2               CON_SQR_TWO:
001627r 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
00162Br 2  34           
00162Cr 2               CON_NEG_HALF:
00162Cr 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
001630r 2  00           
001631r 2               CON_LOG_TWO:
001631r 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
001635r 2  F8           
001636r 2               .endif
001636r 2               
001636r 2               ; ----------------------------------------------------------------------------
001636r 2               ; "LOG" FUNCTION
001636r 2               ; ----------------------------------------------------------------------------
001636r 2               LOG:
001636r 2  20 rr rr             jsr     SIGN
001639r 2  F0 02                beq     GIQ
00163Br 2  10 03                bpl     LOG2
00163Dr 2               GIQ:
00163Dr 2  4C rr rr             jmp     IQERR
001640r 2               LOG2:
001640r 2  A5 B0                lda     FAC
001642r 2  E9 7F                sbc     #$7F
001644r 2  48                   pha
001645r 2  A9 80                lda     #$80
001647r 2  85 B0                sta     FAC
001649r 2  A9 rr                lda     #<CON_SQR_HALF
00164Br 2  A0 rr                ldy     #>CON_SQR_HALF
00164Dr 2  20 rr rr             jsr     FADD
001650r 2  A9 rr                lda     #<CON_SQR_TWO
001652r 2  A0 rr                ldy     #>CON_SQR_TWO
001654r 2  20 rr rr             jsr     FDIV
001657r 2  A9 rr                lda     #<CON_ONE
001659r 2  A0 rr                ldy     #>CON_ONE
00165Br 2  20 rr rr             jsr     FSUB
00165Er 2  A9 rr                lda     #<POLY_LOG
001660r 2  A0 rr                ldy     #>POLY_LOG
001662r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001665r 2  A9 rr                lda     #<CON_NEG_HALF
001667r 2  A0 rr                ldy     #>CON_NEG_HALF
001669r 2  20 rr rr             jsr     FADD
00166Cr 2  68                   pla
00166Dr 2  20 rr rr             jsr     ADDACC
001670r 2  A9 rr                lda     #<CON_LOG_TWO
001672r 2  A0 rr                ldy     #>CON_LOG_TWO
001674r 2               
001674r 2               ; ----------------------------------------------------------------------------
001674r 2               ; FAC = (Y,A) * FAC
001674r 2               ; ----------------------------------------------------------------------------
001674r 2               FMULT:
001674r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001677r 2               
001677r 2               ; ----------------------------------------------------------------------------
001677r 2               ; FAC = ARG * FAC
001677r 2               ; ----------------------------------------------------------------------------
001677r 2               FMULTT:
001677r 2               .ifndef CONFIG_11
001677r 2  F0 5B                beq     L3903
001679r 2               .else
001679r 2                       jeq     L3903
001679r 2               .endif
001679r 2  20 rr rr             jsr     ADD_EXPONENTS
00167Cr 2  A9 00                lda     #$00
00167Er 2  85 75                sta     RESULT
001680r 2  85 76                sta     RESULT+1
001682r 2  85 77                sta     RESULT+2
001684r 2               .ifndef CONFIG_SMALL
001684r 2  85 78                sta     RESULT+3
001686r 2               .endif
001686r 2  A5 BF                lda     FACEXTENSION
001688r 2  20 rr rr             jsr     MULTIPLY1
00168Br 2               .ifndef CONFIG_SMALL
00168Br 2  A5 B4                lda     FAC+4
00168Dr 2  20 rr rr             jsr     MULTIPLY1
001690r 2               .endif
001690r 2  A5 B3                lda     FAC+3
001692r 2  20 rr rr             jsr     MULTIPLY1
001695r 2  A5 B2                lda     FAC+2
001697r 2  20 rr rr             jsr     MULTIPLY1
00169Ar 2  A5 B1                lda     FAC+1
00169Cr 2  20 rr rr             jsr     MULTIPLY2
00169Fr 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0016A2r 2               
0016A2r 2               ; ----------------------------------------------------------------------------
0016A2r 2               ; MULTIPLY ARG BY (A) INTO RESULT
0016A2r 2               ; ----------------------------------------------------------------------------
0016A2r 2               MULTIPLY1:
0016A2r 2  D0 03                bne     MULTIPLY2
0016A4r 2  4C rr rr             jmp     SHIFT_RIGHT1
0016A7r 2               MULTIPLY2:
0016A7r 2  4A                   lsr     a
0016A8r 2  09 80                ora     #$80
0016AAr 2               L38A7:
0016AAr 2  A8                   tay
0016ABr 2  90 19                bcc     L38C3
0016ADr 2  18                   clc
0016AEr 2               .ifndef CONFIG_SMALL
0016AEr 2  A5 78                lda     RESULT+3
0016B0r 2  65 BC                adc     ARG+4
0016B2r 2  85 78                sta     RESULT+3
0016B4r 2               .endif
0016B4r 2  A5 77                lda     RESULT+2
0016B6r 2  65 BB                adc     ARG+3
0016B8r 2  85 77                sta     RESULT+2
0016BAr 2  A5 76                lda     RESULT+1
0016BCr 2  65 BA                adc     ARG+2
0016BEr 2  85 76                sta     RESULT+1
0016C0r 2  A5 75                lda     RESULT
0016C2r 2  65 B9                adc     ARG+1
0016C4r 2  85 75                sta     RESULT
0016C6r 2               L38C3:
0016C6r 2               .ifndef CONFIG_ROR_WORKAROUND
0016C6r 2  66 75                ror     RESULT
0016C8r 2  66 76                ror     RESULT+1
0016CAr 2               .ifdef APPLE_BAD_BYTE
0016CAr 2               ; this seems to be a bad byte in the dump
0016CAr 2               		.byte	RESULT+2,RESULT+2 ; XXX BUG!
0016CAr 2               .else
0016CAr 2  66 77                ror     RESULT+2
0016CCr 2               .endif
0016CCr 2               .ifndef CONFIG_SMALL
0016CCr 2  66 78                ror     RESULT+3
0016CEr 2               .endif
0016CEr 2  66 BF                ror     FACEXTENSION
0016D0r 2               .else
0016D0r 2                       lda     #$00
0016D0r 2                       bcc     L38C9
0016D0r 2                       lda     #$80
0016D0r 2               L38C9:
0016D0r 2                       lsr     RESULT
0016D0r 2                       ora     RESULT
0016D0r 2                       sta     RESULT
0016D0r 2                       lda     #$00
0016D0r 2                       bcc     L38D5
0016D0r 2                       lda     #$80
0016D0r 2               L38D5:
0016D0r 2                       lsr     RESULT+1
0016D0r 2                       ora     RESULT+1
0016D0r 2                       sta     RESULT+1
0016D0r 2                       lda     #$00
0016D0r 2                       bcc     L38E1
0016D0r 2                       lda     #$80
0016D0r 2               L38E1:
0016D0r 2                       lsr     RESULT+2
0016D0r 2                       ora     RESULT+2
0016D0r 2                       sta     RESULT+2
0016D0r 2                       lda     #$00
0016D0r 2                       bcc     L38ED
0016D0r 2                       lda     #$80
0016D0r 2               L38ED:
0016D0r 2                       lsr     RESULT+3
0016D0r 2                       ora     RESULT+3
0016D0r 2                       sta     RESULT+3
0016D0r 2                       lda     #$00
0016D0r 2                       bcc     L38F9
0016D0r 2                       lda     #$80
0016D0r 2               L38F9:
0016D0r 2                       lsr     FACEXTENSION
0016D0r 2                       ora     FACEXTENSION
0016D0r 2                       sta     FACEXTENSION
0016D0r 2               .endif
0016D0r 2  98                   tya
0016D1r 2  4A                   lsr     a
0016D2r 2  D0 D6                bne     L38A7
0016D4r 2               L3903:
0016D4r 2  60                   rts
0016D5r 2               
0016D5r 2               ; ----------------------------------------------------------------------------
0016D5r 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0016D5r 2               ; ----------------------------------------------------------------------------
0016D5r 2               LOAD_ARG_FROM_YA:
0016D5r 2  85 71                sta     INDEX
0016D7r 2  84 72                sty     INDEX+1
0016D9r 2  A0 04                ldy     #BYTES_FP-1
0016DBr 2               .ifndef CONFIG_SMALL
0016DBr 2  B1 71                lda     (INDEX),y
0016DDr 2  85 BC                sta     ARG+4
0016DFr 2  88                   dey
0016E0r 2               .endif
0016E0r 2  B1 71                lda     (INDEX),y
0016E2r 2  85 BB                sta     ARG+3
0016E4r 2  88                   dey
0016E5r 2  B1 71                lda     (INDEX),y
0016E7r 2  85 BA                sta     ARG+2
0016E9r 2  88                   dey
0016EAr 2  B1 71                lda     (INDEX),y
0016ECr 2  85 BD                sta     ARGSIGN
0016EEr 2  45 B5                eor     FACSIGN
0016F0r 2  85 BE                sta     SGNCPR
0016F2r 2  A5 BD                lda     ARGSIGN
0016F4r 2  09 80                ora     #$80
0016F6r 2  85 B9                sta     ARG+1
0016F8r 2  88                   dey
0016F9r 2  B1 71                lda     (INDEX),y
0016FBr 2  85 B8                sta     ARG
0016FDr 2  A5 B0                lda     FAC
0016FFr 2  60                   rts
001700r 2               
001700r 2               ; ----------------------------------------------------------------------------
001700r 2               ; ADD EXPONENTS OF ARG AND FAC
001700r 2               ; (CALLED BY FMULT AND FDIV)
001700r 2               ;
001700r 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
001700r 2               ; ----------------------------------------------------------------------------
001700r 2               ADD_EXPONENTS:
001700r 2  A5 B8                lda     ARG
001702r 2               ADD_EXPONENTS1:
001702r 2  F0 1F                beq     ZERO
001704r 2  18                   clc
001705r 2  65 B0                adc     FAC
001707r 2  90 04                bcc     L393C
001709r 2  30 1D                bmi     JOV
00170Br 2  18                   clc
00170Cr 2  2C                   .byte   $2C
00170Dr 2               L393C:
00170Dr 2  10 14                bpl     ZERO
00170Fr 2  69 80                adc     #$80
001711r 2  85 B0                sta     FAC
001713r 2  D0 03                bne     L3947
001715r 2  4C rr rr             jmp     STA_IN_FAC_SIGN
001718r 2               L3947:
001718r 2  A5 BE                lda     SGNCPR
00171Ar 2  85 B5                sta     FACSIGN
00171Cr 2  60                   rts
00171Dr 2               
00171Dr 2               ; ----------------------------------------------------------------------------
00171Dr 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
00171Dr 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
00171Dr 2               ; CALLED FROM "EXP" FUNCTION
00171Dr 2               ; ----------------------------------------------------------------------------
00171Dr 2               OUTOFRNG:
00171Dr 2  A5 B5                lda     FACSIGN
00171Fr 2  49 FF                eor     #$FF
001721r 2  30 05                bmi     JOV
001723r 2               
001723r 2               ; ----------------------------------------------------------------------------
001723r 2               ; POP RETURN ADDRESS AND SET FAC=0
001723r 2               ; ----------------------------------------------------------------------------
001723r 2               ZERO:
001723r 2  68                   pla
001724r 2  68                   pla
001725r 2  4C rr rr             jmp     ZERO_FAC
001728r 2               JOV:
001728r 2  4C rr rr             jmp     OVERFLOW
00172Br 2               
00172Br 2               ; ----------------------------------------------------------------------------
00172Br 2               ; MULTIPLY FAC BY 10
00172Br 2               ; ----------------------------------------------------------------------------
00172Br 2               MUL10:
00172Br 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00172Er 2  AA                   tax
00172Fr 2  F0 10                beq     L3970
001731r 2  18                   clc
001732r 2  69 02                adc     #$02
001734r 2  B0 F2                bcs     JOV
001736r 2               LD9BF:
001736r 2  A2 00                ldx     #$00
001738r 2  86 BE                stx     SGNCPR
00173Ar 2  20 rr rr             jsr     FADD2
00173Dr 2  E6 B0                inc     FAC
00173Fr 2  F0 E7                beq     JOV
001741r 2               L3970:
001741r 2  60                   rts
001742r 2               
001742r 2               ; ----------------------------------------------------------------------------
001742r 2               CONTEN:
001742r 2               .ifdef CONFIG_SMALL
001742r 2                       .byte   $84,$20,$00,$00
001742r 2               .else
001742r 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
001746r 2  00           
001747r 2               .endif
001747r 2               
001747r 2               ; ----------------------------------------------------------------------------
001747r 2               ; DIVIDE FAC BY 10
001747r 2               ; ----------------------------------------------------------------------------
001747r 2               DIV10:
001747r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00174Ar 2  A9 rr                lda     #<CONTEN
00174Cr 2  A0 rr                ldy     #>CONTEN
00174Er 2  A2 00                ldx     #$00
001750r 2               
001750r 2               ; ----------------------------------------------------------------------------
001750r 2               ; FAC = ARG / (Y,A)
001750r 2               ; ----------------------------------------------------------------------------
001750r 2               DIV:
001750r 2  86 BE                stx     SGNCPR
001752r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001755r 2  4C rr rr             jmp     FDIVT
001758r 2               
001758r 2               ; ----------------------------------------------------------------------------
001758r 2               ; FAC = (Y,A) / FAC
001758r 2               ; ----------------------------------------------------------------------------
001758r 2               FDIV:
001758r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00175Br 2               
00175Br 2               ; ----------------------------------------------------------------------------
00175Br 2               ; FAC = ARG / FAC
00175Br 2               ; ----------------------------------------------------------------------------
00175Br 2               FDIVT:
00175Br 2  F0 76                beq     L3A02
00175Dr 2  20 rr rr             jsr     ROUND_FAC
001760r 2  A9 00                lda     #$00
001762r 2  38                   sec
001763r 2  E5 B0                sbc     FAC
001765r 2  85 B0                sta     FAC
001767r 2  20 rr rr             jsr     ADD_EXPONENTS
00176Ar 2  E6 B0                inc     FAC
00176Cr 2  F0 BA                beq     JOV
00176Er 2  A2 FC                ldx     #-MANTISSA_BYTES
001770r 2  A9 01                lda     #$01
001772r 2               L39A1:
001772r 2  A4 B9                ldy     ARG+1
001774r 2  C4 B1                cpy     FAC+1
001776r 2  D0 10                bne     L39B7
001778r 2  A4 BA                ldy     ARG+2
00177Ar 2  C4 B2                cpy     FAC+2
00177Cr 2  D0 0A                bne     L39B7
00177Er 2  A4 BB                ldy     ARG+3
001780r 2  C4 B3                cpy     FAC+3
001782r 2               .ifndef CONFIG_SMALL
001782r 2  D0 04                bne     L39B7
001784r 2  A4 BC                ldy     ARG+4
001786r 2  C4 B4                cpy     FAC+4
001788r 2               .endif
001788r 2               L39B7:
001788r 2  08                   php
001789r 2  2A                   rol     a
00178Ar 2  90 09                bcc     L39C4
00178Cr 2  E8                   inx
00178Dr 2  95 78                sta     RESULT_LAST-1,x
00178Fr 2  F0 32                beq     L39F2
001791r 2  10 34                bpl     L39F6
001793r 2  A9 01                lda     #$01
001795r 2               L39C4:
001795r 2  28                   plp
001796r 2  B0 0E                bcs     L39D5
001798r 2               L39C7:
001798r 2  06 BC                asl     ARG_LAST
00179Ar 2               .ifndef CONFIG_SMALL
00179Ar 2  26 BB                rol     ARG+3
00179Cr 2               .endif
00179Cr 2  26 BA                rol     ARG+2
00179Er 2  26 B9                rol     ARG+1
0017A0r 2  B0 E6                bcs     L39B7
0017A2r 2  30 CE                bmi     L39A1
0017A4r 2  10 E2                bpl     L39B7
0017A6r 2               L39D5:
0017A6r 2  A8                   tay
0017A7r 2               .ifndef CONFIG_SMALL
0017A7r 2  A5 BC                lda     ARG+4
0017A9r 2  E5 B4                sbc     FAC+4
0017ABr 2  85 BC                sta     ARG+4
0017ADr 2               .endif
0017ADr 2  A5 BB                lda     ARG+3
0017AFr 2  E5 B3                sbc     FAC+3
0017B1r 2  85 BB                sta     ARG+3
0017B3r 2  A5 BA                lda     ARG+2
0017B5r 2  E5 B2                sbc     FAC+2
0017B7r 2  85 BA                sta     ARG+2
0017B9r 2  A5 B9                lda     ARG+1
0017BBr 2  E5 B1                sbc     FAC+1
0017BDr 2  85 B9                sta     ARG+1
0017BFr 2  98                   tya
0017C0r 2  4C rr rr             jmp     L39C7
0017C3r 2               L39F2:
0017C3r 2  A9 40                lda     #$40
0017C5r 2  D0 CE                bne     L39C4
0017C7r 2               L39F6:
0017C7r 2  0A                   asl     a
0017C8r 2  0A                   asl     a
0017C9r 2  0A                   asl     a
0017CAr 2  0A                   asl     a
0017CBr 2  0A                   asl     a
0017CCr 2  0A                   asl     a
0017CDr 2  85 BF                sta     FACEXTENSION
0017CFr 2  28                   plp
0017D0r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0017D3r 2               L3A02:
0017D3r 2  A2 8A                ldx     #ERR_ZERODIV
0017D5r 2  4C rr rr             jmp     ERROR
0017D8r 2               
0017D8r 2               ; ----------------------------------------------------------------------------
0017D8r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0017D8r 2               ; ----------------------------------------------------------------------------
0017D8r 2               COPY_RESULT_INTO_FAC:
0017D8r 2  A5 75                lda     RESULT
0017DAr 2  85 B1                sta     FAC+1
0017DCr 2  A5 76                lda     RESULT+1
0017DEr 2  85 B2                sta     FAC+2
0017E0r 2  A5 77                lda     RESULT+2
0017E2r 2  85 B3                sta     FAC+3
0017E4r 2               .ifndef CONFIG_SMALL
0017E4r 2  A5 78                lda     RESULT+3
0017E6r 2  85 B4                sta     FAC+4
0017E8r 2               .endif
0017E8r 2  4C rr rr             jmp     NORMALIZE_FAC2
0017EBr 2               
0017EBr 2               ; ----------------------------------------------------------------------------
0017EBr 2               ; UNPACK (Y,A) INTO FAC
0017EBr 2               ; ----------------------------------------------------------------------------
0017EBr 2               LOAD_FAC_FROM_YA:
0017EBr 2  85 71                sta     INDEX
0017EDr 2  84 72                sty     INDEX+1
0017EFr 2  A0 04                ldy     #MANTISSA_BYTES
0017F1r 2               .ifndef CONFIG_SMALL
0017F1r 2  B1 71                lda     (INDEX),y
0017F3r 2  85 B4                sta     FAC+4
0017F5r 2  88                   dey
0017F6r 2               .endif
0017F6r 2  B1 71                lda     (INDEX),y
0017F8r 2  85 B3                sta     FAC+3
0017FAr 2  88                   dey
0017FBr 2  B1 71                lda     (INDEX),y
0017FDr 2  85 B2                sta     FAC+2
0017FFr 2  88                   dey
001800r 2  B1 71                lda     (INDEX),y
001802r 2  85 B5                sta     FACSIGN
001804r 2  09 80                ora     #$80
001806r 2  85 B1                sta     FAC+1
001808r 2  88                   dey
001809r 2  B1 71                lda     (INDEX),y
00180Br 2  85 B0                sta     FAC
00180Dr 2  84 BF                sty     FACEXTENSION
00180Fr 2  60                   rts
001810r 2               
001810r 2               ; ----------------------------------------------------------------------------
001810r 2               ; ROUND FAC, STORE IN TEMP2
001810r 2               ; ----------------------------------------------------------------------------
001810r 2               STORE_FAC_IN_TEMP2_ROUNDED:
001810r 2  A2 AB                ldx     #TEMP2
001812r 2  2C                   .byte   $2C
001813r 2               
001813r 2               ; ----------------------------------------------------------------------------
001813r 2               ; ROUND FAC, STORE IN TEMP1
001813r 2               ; ----------------------------------------------------------------------------
001813r 2               STORE_FAC_IN_TEMP1_ROUNDED:
001813r 2  A2 A6                ldx     #TEMP1X
001815r 2  A0 00                ldy     #$00
001817r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
001819r 2               
001819r 2               ; ----------------------------------------------------------------------------
001819r 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
001819r 2               ; ----------------------------------------------------------------------------
001819r 2               SETFOR:
001819r 2  A6 98                ldx     FORPNT
00181Br 2  A4 99                ldy     FORPNT+1
00181Dr 2               
00181Dr 2               ; ----------------------------------------------------------------------------
00181Dr 2               ; ROUND FAC, AND STORE AT (Y,X)
00181Dr 2               ; ----------------------------------------------------------------------------
00181Dr 2               STORE_FAC_AT_YX_ROUNDED:
00181Dr 2  20 rr rr             jsr     ROUND_FAC
001820r 2  86 71                stx     INDEX
001822r 2  84 72                sty     INDEX+1
001824r 2  A0 04                ldy     #MANTISSA_BYTES
001826r 2               .ifndef CONFIG_SMALL
001826r 2  A5 B4                lda     FAC+4
001828r 2  91 71                sta     (INDEX),y
00182Ar 2  88                   dey
00182Br 2               .endif
00182Br 2  A5 B3                lda     FAC+3
00182Dr 2  91 71                sta     (INDEX),y
00182Fr 2  88                   dey
001830r 2  A5 B2                lda     FAC+2
001832r 2  91 71                sta     (INDEX),y
001834r 2  88                   dey
001835r 2  A5 B5                lda     FACSIGN
001837r 2  09 7F                ora     #$7F
001839r 2  25 B1                and     FAC+1
00183Br 2  91 71                sta     (INDEX),y
00183Dr 2  88                   dey
00183Er 2  A5 B0                lda     FAC
001840r 2  91 71                sta     (INDEX),y
001842r 2  84 BF                sty     FACEXTENSION
001844r 2  60                   rts
001845r 2               
001845r 2               ; ----------------------------------------------------------------------------
001845r 2               ; COPY ARG INTO FAC
001845r 2               ; ----------------------------------------------------------------------------
001845r 2               COPY_ARG_TO_FAC:
001845r 2  A5 BD                lda     ARGSIGN
001847r 2               MFA:
001847r 2  85 B5                sta     FACSIGN
001849r 2  A2 05                ldx     #BYTES_FP
00184Br 2               L3A7A:
00184Br 2  B5 B7                lda     SHIFTSIGNEXT,x
00184Dr 2  95 AF                sta     EXPSGN,x
00184Fr 2  CA                   dex
001850r 2  D0 F9                bne     L3A7A
001852r 2  86 BF                stx     FACEXTENSION
001854r 2  60                   rts
001855r 2               
001855r 2               ; ----------------------------------------------------------------------------
001855r 2               ; ROUND FAC AND COPY TO ARG
001855r 2               ; ----------------------------------------------------------------------------
001855r 2               COPY_FAC_TO_ARG_ROUNDED:
001855r 2  20 rr rr             jsr     ROUND_FAC
001858r 2               MAF:
001858r 2  A2 06                ldx     #BYTES_FP+1
00185Ar 2               L3A89:
00185Ar 2  B5 AF                lda     EXPSGN,x
00185Cr 2  95 B7                sta     SHIFTSIGNEXT,x
00185Er 2  CA                   dex
00185Fr 2  D0 F9                bne     L3A89
001861r 2  86 BF                stx     FACEXTENSION
001863r 2               RTS14:
001863r 2  60                   rts
001864r 2               
001864r 2               ; ----------------------------------------------------------------------------
001864r 2               ; ROUND FAC USING EXTENSION BYTE
001864r 2               ; ----------------------------------------------------------------------------
001864r 2               ROUND_FAC:
001864r 2  A5 B0                lda     FAC
001866r 2  F0 FB                beq     RTS14
001868r 2  06 BF                asl     FACEXTENSION
00186Ar 2  90 F7                bcc     RTS14
00186Cr 2               
00186Cr 2               ; ----------------------------------------------------------------------------
00186Cr 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00186Cr 2               ; ----------------------------------------------------------------------------
00186Cr 2               INCREMENT_MANTISSA:
00186Cr 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
00186Fr 2  D0 F2                bne     RTS14
001871r 2  4C rr rr             jmp     NORMALIZE_FAC6
001874r 2               
001874r 2               ; ----------------------------------------------------------------------------
001874r 2               ; TEST FAC FOR ZERO AND SIGN
001874r 2               ;
001874r 2               ; FAC > 0, RETURN +1
001874r 2               ; FAC = 0, RETURN  0
001874r 2               ; FAC < 0, RETURN -1
001874r 2               ; ----------------------------------------------------------------------------
001874r 2               SIGN:
001874r 2  A5 B0                lda     FAC
001876r 2  F0 09                beq     RTS15
001878r 2               L3AA7:
001878r 2  A5 B5                lda     FACSIGN
00187Ar 2               SIGN2:
00187Ar 2  2A                   rol     a
00187Br 2  A9 FF                lda     #$FF
00187Dr 2  B0 02                bcs     RTS15
00187Fr 2  A9 01                lda     #$01
001881r 2               RTS15:
001881r 2  60                   rts
001882r 2               
001882r 2               ; ----------------------------------------------------------------------------
001882r 2               ; "SGN" FUNCTION
001882r 2               ; ----------------------------------------------------------------------------
001882r 2               SGN:
001882r 2  20 rr rr             jsr     SIGN
001885r 2               
001885r 2               ; ----------------------------------------------------------------------------
001885r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001885r 2               ; ----------------------------------------------------------------------------
001885r 2               FLOAT:
001885r 2  85 B1                sta     FAC+1
001887r 2  A9 00                lda     #$00
001889r 2  85 B2                sta     FAC+2
00188Br 2  A2 88                ldx     #$88
00188Dr 2               
00188Dr 2               ; ----------------------------------------------------------------------------
00188Dr 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00188Dr 2               ; (X) = EXPONENT
00188Dr 2               ; ----------------------------------------------------------------------------
00188Dr 2               FLOAT1:
00188Dr 2  A5 B1                lda     FAC+1
00188Fr 2  49 FF                eor     #$FF
001891r 2  2A                   rol     a
001892r 2               
001892r 2               ; ----------------------------------------------------------------------------
001892r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001892r 2               ; (X) = EXPONENT
001892r 2               ; C=0 TO MAKE VALUE NEGATIVE
001892r 2               ; C=1 TO MAKE VALUE POSITIVE
001892r 2               ; ----------------------------------------------------------------------------
001892r 2               FLOAT2:
001892r 2  A9 00                lda     #$00
001894r 2               .ifndef CONFIG_SMALL
001894r 2  85 B4                sta     FAC+4
001896r 2               .endif
001896r 2  85 B3                sta     FAC+3
001898r 2               LDB21:
001898r 2  86 B0                stx     FAC
00189Ar 2  85 BF                sta     FACEXTENSION
00189Cr 2  85 B5                sta     FACSIGN
00189Er 2  4C rr rr             jmp     NORMALIZE_FAC1
0018A1r 2               
0018A1r 2               ; ----------------------------------------------------------------------------
0018A1r 2               ; "ABS" FUNCTION
0018A1r 2               ; ----------------------------------------------------------------------------
0018A1r 2               ABS:
0018A1r 2  46 B5                lsr     FACSIGN
0018A3r 2  60                   rts
0018A4r 2               
0018A4r 2               ; ----------------------------------------------------------------------------
0018A4r 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
0018A4r 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
0018A4r 2               ; ----------------------------------------------------------------------------
0018A4r 2               FCOMP:
0018A4r 2  85 73                sta     DEST
0018A6r 2               
0018A6r 2               ; ----------------------------------------------------------------------------
0018A6r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
0018A6r 2               ; "DEST" ALREADY SET UP
0018A6r 2               ; ----------------------------------------------------------------------------
0018A6r 2               FCOMP2:
0018A6r 2  84 74                sty     DEST+1
0018A8r 2  A0 00                ldy     #$00
0018AAr 2  B1 73                lda     (DEST),y
0018ACr 2  C8                   iny
0018ADr 2  AA                   tax
0018AEr 2  F0 C4                beq     SIGN
0018B0r 2  B1 73                lda     (DEST),y
0018B2r 2  45 B5                eor     FACSIGN
0018B4r 2  30 C2                bmi     L3AA7
0018B6r 2  E4 B0                cpx     FAC
0018B8r 2  D0 21                bne     L3B0A
0018BAr 2  B1 73                lda     (DEST),y
0018BCr 2  09 80                ora     #$80
0018BEr 2  C5 B1                cmp     FAC+1
0018C0r 2  D0 19                bne     L3B0A
0018C2r 2  C8                   iny
0018C3r 2  B1 73                lda     (DEST),y
0018C5r 2  C5 B2                cmp     FAC+2
0018C7r 2  D0 12                bne     L3B0A
0018C9r 2  C8                   iny
0018CAr 2               .ifndef CONFIG_SMALL
0018CAr 2  B1 73                lda     (DEST),y
0018CCr 2  C5 B3                cmp     FAC+3
0018CEr 2  D0 0B                bne     L3B0A
0018D0r 2  C8                   iny
0018D1r 2               .endif
0018D1r 2  A9 7F                lda     #$7F
0018D3r 2  C5 BF                cmp     FACEXTENSION
0018D5r 2  B1 73                lda     (DEST),y
0018D7r 2  E5 B4                sbc     FAC_LAST
0018D9r 2  F0 28                beq     L3B32
0018DBr 2               L3B0A:
0018DBr 2  A5 B5                lda     FACSIGN
0018DDr 2  90 02                bcc     L3B10
0018DFr 2  49 FF                eor     #$FF
0018E1r 2               L3B10:
0018E1r 2  4C rr rr             jmp     SIGN2
0018E4r 2               
0018E4r 2               ; ----------------------------------------------------------------------------
0018E4r 2               ; QUICK INTEGER FUNCTION
0018E4r 2               ;
0018E4r 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0018E4r 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0018E4r 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0018E4r 2               ;
0018E4r 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0018E4r 2               ; ----------------------------------------------------------------------------
0018E4r 2               QINT:
0018E4r 2  A5 B0                lda     FAC
0018E6r 2  F0 4A                beq     QINT3
0018E8r 2  38                   sec
0018E9r 2  E9 A0                sbc     #120+8*BYTES_FP
0018EBr 2  24 B5                bit     FACSIGN
0018EDr 2  10 09                bpl     L3B27
0018EFr 2  AA                   tax
0018F0r 2  A9 FF                lda     #$FF
0018F2r 2  85 B7                sta     SHIFTSIGNEXT
0018F4r 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0018F7r 2  8A                   txa
0018F8r 2               L3B27:
0018F8r 2  A2 B0                ldx     #FAC
0018FAr 2  C9 F9                cmp     #$F9
0018FCr 2  10 06                bpl     QINT2
0018FEr 2  20 rr rr             jsr     SHIFT_RIGHT
001901r 2  84 B7                sty     SHIFTSIGNEXT
001903r 2               L3B32:
001903r 2  60                   rts
001904r 2               QINT2:
001904r 2  A8                   tay
001905r 2  A5 B5                lda     FACSIGN
001907r 2  29 80                and     #$80
001909r 2  46 B1                lsr     FAC+1
00190Br 2  05 B1                ora     FAC+1
00190Dr 2  85 B1                sta     FAC+1
00190Fr 2  20 rr rr             jsr     SHIFT_RIGHT4
001912r 2  84 B7                sty     SHIFTSIGNEXT
001914r 2  60                   rts
001915r 2               
001915r 2               ; ----------------------------------------------------------------------------
001915r 2               ; "INT" FUNCTION
001915r 2               ;
001915r 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
001915r 2               ; AND THEN REFLOATS THE INTEGER.
001915r 2               ; ----------------------------------------------------------------------------
001915r 2               INT:
001915r 2  A5 B0                lda     FAC
001917r 2  C9 A0                cmp     #120+8*BYTES_FP
001919r 2  B0 20                bcs     RTS17
00191Br 2  20 rr rr             jsr     QINT
00191Er 2  84 BF                sty     FACEXTENSION
001920r 2  A5 B5                lda     FACSIGN
001922r 2  84 B5                sty     FACSIGN
001924r 2  49 80                eor     #$80
001926r 2  2A                   rol     a
001927r 2  A9 A0                lda     #120+8*BYTES_FP
001929r 2  85 B0                sta     FAC
00192Br 2  A5 B4                lda     FAC_LAST
00192Dr 2  85 5A                sta     CHARAC
00192Fr 2  4C rr rr             jmp     NORMALIZE_FAC1
001932r 2               QINT3:
001932r 2  85 B1                sta     FAC+1
001934r 2  85 B2                sta     FAC+2
001936r 2  85 B3                sta     FAC+3
001938r 2               .ifndef CONFIG_SMALL
001938r 2  85 B4                sta     FAC+4
00193Ar 2               .endif
00193Ar 2  A8                   tay
00193Br 2               RTS17:
00193Br 2  60                   rts
00193Cr 2               
00193Cr 2               ; ----------------------------------------------------------------------------
00193Cr 2               ; CONVERT STRING TO FP VALUE IN FAC
00193Cr 2               ;
00193Cr 2               ; STRING POINTED TO BY TXTPTR
00193Cr 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00193Cr 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00193Cr 2               ; ----------------------------------------------------------------------------
00193Cr 2               FIN:
00193Cr 2  A0 00                ldy     #$00
00193Er 2  A2 0A                ldx     #SERLEN-TMPEXP
001940r 2               L3B6F:
001940r 2  94 AC                sty     TMPEXP,x
001942r 2  CA                   dex
001943r 2  10 FB                bpl     L3B6F
001945r 2  90 0F                bcc     FIN2
001947r 2               .ifdef SYM1
001947r 2                       cmp     #$26
001947r 2                       bne     LDABB
001947r 2                       jmp     LCDFE
001947r 2               LDABB:
001947r 2               .endif
001947r 2  C9 2D                cmp     #$2D
001949r 2  D0 04                bne     L3B7E
00194Br 2  86 B6                stx     SERLEN
00194Dr 2  F0 04                beq     FIN1
00194Fr 2               L3B7E:
00194Fr 2  C9 2B                cmp     #$2B
001951r 2  D0 05                bne     FIN3
001953r 2               FIN1:
001953r 2  20 C2 00             jsr     CHRGET
001956r 2               FIN2:
001956r 2  90 5B                bcc     FIN9
001958r 2               FIN3:
001958r 2  C9 2E                cmp     #$2E
00195Ar 2  F0 2E                beq     FIN10
00195Cr 2  C9 45                cmp     #$45
00195Er 2  D0 30                bne     FIN7
001960r 2  20 C2 00             jsr     CHRGET
001963r 2  90 17                bcc     FIN5
001965r 2  C9 AB                cmp     #TOKEN_MINUS
001967r 2  F0 0E                beq     L3BA6
001969r 2  C9 2D                cmp     #$2D
00196Br 2  F0 0A                beq     L3BA6
00196Dr 2  C9 AA                cmp     #TOKEN_PLUS
00196Fr 2  F0 08                beq     FIN4
001971r 2  C9 2B                cmp     #$2B
001973r 2  F0 04                beq     FIN4
001975r 2  D0 07                bne     FIN6
001977r 2               L3BA6:
001977r 2               .ifndef CONFIG_ROR_WORKAROUND
001977r 2  66 AF                ror     EXPSGN
001979r 2               .else
001979r 2                       lda     #$00
001979r 2                       bcc     L3BAC
001979r 2                       lda     #$80
001979r 2               L3BAC:
001979r 2                       lsr     EXPSGN
001979r 2                       ora     EXPSGN
001979r 2                       sta     EXPSGN
001979r 2               .endif
001979r 2               FIN4:
001979r 2  20 C2 00             jsr     CHRGET
00197Cr 2               FIN5:
00197Cr 2  90 5C                bcc     GETEXP
00197Er 2               FIN6:
00197Er 2  24 AF                bit     EXPSGN
001980r 2  10 0E                bpl     FIN7
001982r 2  A9 00                lda     #$00
001984r 2  38                   sec
001985r 2  E5 AD                sbc     EXPON
001987r 2  4C rr rr             jmp     FIN8
00198Ar 2               
00198Ar 2               ; ----------------------------------------------------------------------------
00198Ar 2               ; FOUND A DECIMAL POINT
00198Ar 2               ; ----------------------------------------------------------------------------
00198Ar 2               FIN10:
00198Ar 2               .ifndef CONFIG_ROR_WORKAROUND
00198Ar 2  66 AE                ror     LOWTR
00198Cr 2               .else
00198Cr 2                       lda     #$00
00198Cr 2                       bcc     L3BC9
00198Cr 2                       lda     #$80
00198Cr 2               L3BC9:
00198Cr 2                       lsr     LOWTR
00198Cr 2                       ora     LOWTR
00198Cr 2                       sta     LOWTR
00198Cr 2               .endif
00198Cr 2  24 AE                bit     LOWTR
00198Er 2  50 C3                bvc     FIN1
001990r 2               
001990r 2               ; ----------------------------------------------------------------------------
001990r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001990r 2               ; ----------------------------------------------------------------------------
001990r 2               FIN7:
001990r 2  A5 AD                lda     EXPON
001992r 2               FIN8:
001992r 2  38                   sec
001993r 2  E5 AC                sbc     INDX
001995r 2  85 AD                sta     EXPON
001997r 2  F0 12                beq     L3BEE
001999r 2  10 09                bpl     L3BE7
00199Br 2               L3BDE:
00199Br 2  20 rr rr             jsr     DIV10
00199Er 2  E6 AD                inc     EXPON
0019A0r 2  D0 F9                bne     L3BDE
0019A2r 2  F0 07                beq     L3BEE
0019A4r 2               L3BE7:
0019A4r 2  20 rr rr             jsr     MUL10
0019A7r 2  C6 AD                dec     EXPON
0019A9r 2  D0 F9                bne     L3BE7
0019ABr 2               L3BEE:
0019ABr 2  A5 B6                lda     SERLEN
0019ADr 2  30 01                bmi     L3BF3
0019AFr 2  60                   rts
0019B0r 2               L3BF3:
0019B0r 2  4C rr rr             jmp     NEGOP
0019B3r 2               
0019B3r 2               ; ----------------------------------------------------------------------------
0019B3r 2               ; ACCUMULATE A DIGIT INTO FAC
0019B3r 2               ; ----------------------------------------------------------------------------
0019B3r 2               FIN9:
0019B3r 2  48                   pha
0019B4r 2  24 AE                bit     LOWTR
0019B6r 2  10 02                bpl     L3BFD
0019B8r 2  E6 AC                inc     INDX
0019BAr 2               L3BFD:
0019BAr 2  20 rr rr             jsr     MUL10
0019BDr 2  68                   pla
0019BEr 2  38                   sec
0019BFr 2  E9 30                sbc     #$30
0019C1r 2  20 rr rr             jsr     ADDACC
0019C4r 2  4C rr rr             jmp     FIN1
0019C7r 2               
0019C7r 2               ; ----------------------------------------------------------------------------
0019C7r 2               ; ADD (A) TO FAC
0019C7r 2               ; ----------------------------------------------------------------------------
0019C7r 2               ADDACC:
0019C7r 2  48                   pha
0019C8r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0019CBr 2  68                   pla
0019CCr 2  20 rr rr             jsr     FLOAT
0019CFr 2  A5 BD                lda     ARGSIGN
0019D1r 2  45 B5                eor     FACSIGN
0019D3r 2  85 BE                sta     SGNCPR
0019D5r 2  A6 B0                ldx     FAC
0019D7r 2  4C rr rr             jmp     FADDT
0019DAr 2               
0019DAr 2               ; ----------------------------------------------------------------------------
0019DAr 2               ; ACCUMULATE DIGIT OF EXPONENT
0019DAr 2               ; ----------------------------------------------------------------------------
0019DAr 2               GETEXP:
0019DAr 2  A5 AD                lda     EXPON
0019DCr 2  C9 0C                cmp     #MAX_EXPON
0019DEr 2  90 09                bcc     L3C2C
0019E0r 2               .ifdef CONFIG_10A
0019E0r 2                       lda     #$64
0019E0r 2               .endif
0019E0r 2  24 AF                bit     EXPSGN
0019E2r 2               .ifdef CONFIG_10A
0019E2r 2                       bmi     L3C3A
0019E2r 2               .else
0019E2r 2  30 03                bmi     LDC70
0019E4r 2               .endif
0019E4r 2  4C rr rr             jmp     OVERFLOW
0019E7r 2               LDC70:
0019E7r 2               .ifndef CONFIG_10A
0019E7r 2  A9 0B                lda     #$0B
0019E9r 2               .endif
0019E9r 2               L3C2C:
0019E9r 2  0A                   asl     a
0019EAr 2  0A                   asl     a
0019EBr 2  18                   clc
0019ECr 2  65 AD                adc     EXPON
0019EEr 2  0A                   asl     a
0019EFr 2  18                   clc
0019F0r 2  A0 00                ldy     #$00
0019F2r 2  71 C9                adc     (TXTPTR),y
0019F4r 2  38                   sec
0019F5r 2  E9 30                sbc     #$30
0019F7r 2               L3C3A:
0019F7r 2  85 AD                sta     EXPON
0019F9r 2  4C rr rr             jmp     FIN4
0019FCr 2               
0019FCr 2               ; ----------------------------------------------------------------------------
0019FCr 2               .ifdef CONFIG_SMALL
0019FCr 2               ; these values are /1000 of what the labels say
0019FCr 2               CON_99999999_9:
0019FCr 2                       .byte   $91,$43,$4F,$F8
0019FCr 2               CON_999999999:
0019FCr 2               		.byte   $94,$74,$23,$F7
0019FCr 2               CON_BILLION:
0019FCr 2                       .byte   $94,$74,$24,$00
0019FCr 2               .else
0019FCr 2               CON_99999999_9:
0019FCr 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
001A00r 2  FD           
001A01r 2               CON_999999999:
001A01r 2               .ifndef CONFIG_10A
001A01r 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FE
001A05r 2  FE           
001A06r 2               .else
001A06r 2                       .byte   $9E,$6E,$6B,$27,$FD
001A06r 2               .endif
001A06r 2               CON_BILLION:
001A06r 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
001A0Ar 2  00           
001A0Br 2               .endif
001A0Br 2               
001A0Br 2               ; ----------------------------------------------------------------------------
001A0Br 2               ; PRINT "IN <LINE #>"
001A0Br 2               ; ----------------------------------------------------------------------------
001A0Br 2               INPRT:
001A0Br 2               .ifdef KBD
001A0Br 2                       jsr     LFE0B
001A0Br 2                       .byte	" in"
001A0Br 2                       .byte	0
001A0Br 2               .else
001A0Br 2  A9 rr                lda     #<QT_IN
001A0Dr 2  A0 rr                ldy     #>QT_IN
001A0Fr 2  20 rr rr             jsr     GOSTROUT2
001A12r 2               .endif
001A12r 2  A5 89                lda     CURLIN+1
001A14r 2  A6 88                ldx     CURLIN
001A16r 2               
001A16r 2               ; ----------------------------------------------------------------------------
001A16r 2               ; PRINT A,X AS DECIMAL INTEGER
001A16r 2               ; ----------------------------------------------------------------------------
001A16r 2               LINPRT:
001A16r 2  85 B1                sta     FAC+1
001A18r 2  86 B2                stx     FAC+2
001A1Ar 2  A2 90                ldx     #$90
001A1Cr 2  38                   sec
001A1Dr 2  20 rr rr             jsr     FLOAT2
001A20r 2  20 rr rr             jsr     FOUT
001A23r 2               GOSTROUT2:
001A23r 2  4C rr rr             jmp     STROUT
001A26r 2               
001A26r 2               ; ----------------------------------------------------------------------------
001A26r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
001A26r 2               ; RETURN WITH (Y,A) POINTING AT STRING
001A26r 2               ; ----------------------------------------------------------------------------
001A26r 2               FOUT:
001A26r 2  A0 01                ldy     #$01
001A28r 2               
001A28r 2               ; ----------------------------------------------------------------------------
001A28r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
001A28r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
001A28r 2               ; (THIS IS USED AS A FLAG)
001A28r 2               ; ----------------------------------------------------------------------------
001A28r 2               FOUT1:
001A28r 2  A9 20                lda     #$20
001A2Ar 2  24 B5                bit     FACSIGN
001A2Cr 2  10 02                bpl     L3C73
001A2Er 2  A9 2D                lda     #$2D
001A30r 2               L3C73:
001A30r 2  99 FF 00             sta     STACK2-1,y
001A33r 2  85 B5                sta     FACSIGN
001A35r 2  84 C0                sty     STRNG2
001A37r 2  C8                   iny
001A38r 2  A9 30                lda     #$30
001A3Ar 2  A6 B0                ldx     FAC
001A3Cr 2  D0 03                bne     L3C84
001A3Er 2  4C rr rr             jmp     FOUT4
001A41r 2               L3C84:
001A41r 2  A9 00                lda     #$00
001A43r 2  E0 80                cpx     #$80
001A45r 2  F0 02                beq     L3C8C
001A47r 2  B0 09                bcs     L3C95
001A49r 2               L3C8C:
001A49r 2  A9 rr                lda     #<CON_BILLION
001A4Br 2  A0 rr                ldy     #>CON_BILLION
001A4Dr 2  20 rr rr             jsr     FMULT
001A50r 2               .ifdef CONFIG_SMALL
001A50r 2                       lda     #-6 ; exponent adjustment
001A50r 2               .else
001A50r 2  A9 F7                lda     #-9
001A52r 2               .endif
001A52r 2               L3C95:
001A52r 2  85 AC                sta     INDX
001A54r 2               ; ----------------------------------------------------------------------------
001A54r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
001A54r 2               ; ----------------------------------------------------------------------------
001A54r 2               L3C97:
001A54r 2  A9 rr                lda     #<CON_999999999
001A56r 2  A0 rr                ldy     #>CON_999999999
001A58r 2  20 rr rr             jsr     FCOMP
001A5Br 2  F0 1E                beq     L3CBE
001A5Dr 2  10 12                bpl     L3CB4
001A5Fr 2               L3CA2:
001A5Fr 2  A9 rr                lda     #<CON_99999999_9
001A61r 2  A0 rr                ldy     #>CON_99999999_9
001A63r 2  20 rr rr             jsr     FCOMP
001A66r 2  F0 02                beq     L3CAD
001A68r 2  10 0E                bpl     L3CBB
001A6Ar 2               L3CAD:
001A6Ar 2  20 rr rr             jsr     MUL10
001A6Dr 2  C6 AC                dec     INDX
001A6Fr 2  D0 EE                bne     L3CA2
001A71r 2               L3CB4:
001A71r 2  20 rr rr             jsr     DIV10
001A74r 2  E6 AC                inc     INDX
001A76r 2  D0 DC                bne     L3C97
001A78r 2               L3CBB:
001A78r 2  20 rr rr             jsr     FADDH
001A7Br 2               L3CBE:
001A7Br 2  20 rr rr             jsr     QINT
001A7Er 2               ; ----------------------------------------------------------------------------
001A7Er 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
001A7Er 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
001A7Er 2               ;
001A7Er 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
001A7Er 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
001A7Er 2               ; ----------------------------------------------------------------------------
001A7Er 2  A2 01                ldx     #$01
001A80r 2  A5 AC                lda     INDX
001A82r 2  18                   clc
001A83r 2  69 0A                adc     #3*BYTES_FP-5
001A85r 2  30 09                bmi     L3CD3
001A87r 2  C9 0B                cmp     #3*BYTES_FP-4
001A89r 2  B0 06                bcs     L3CD4
001A8Br 2  69 FF                adc     #$FF
001A8Dr 2  AA                   tax
001A8Er 2  A9 02                lda     #$02
001A90r 2               L3CD3:
001A90r 2  38                   sec
001A91r 2               L3CD4:
001A91r 2  E9 02                sbc     #$02
001A93r 2  85 AD                sta     EXPON
001A95r 2  86 AC                stx     INDX
001A97r 2  8A                   txa
001A98r 2  F0 02                beq     L3CDF
001A9Ar 2  10 13                bpl     L3CF2
001A9Cr 2               L3CDF:
001A9Cr 2  A4 C0                ldy     STRNG2
001A9Er 2  A9 2E                lda     #$2E
001AA0r 2  C8                   iny
001AA1r 2  99 FF 00             sta     STACK2-1,y
001AA4r 2  8A                   txa
001AA5r 2  F0 06                beq     L3CF0
001AA7r 2  A9 30                lda     #$30
001AA9r 2  C8                   iny
001AAAr 2  99 FF 00             sta     STACK2-1,y
001AADr 2               L3CF0:
001AADr 2  84 C0                sty     STRNG2
001AAFr 2               ; ----------------------------------------------------------------------------
001AAFr 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001AAFr 2               ; ----------------------------------------------------------------------------
001AAFr 2               L3CF2:
001AAFr 2  A0 00                ldy     #$00
001AB1r 2               LDD3A:
001AB1r 2  A2 80                ldx     #$80
001AB3r 2               L3CF6:
001AB3r 2  A5 B4                lda     FAC_LAST
001AB5r 2  18                   clc
001AB6r 2               .ifndef CONFIG_SMALL
001AB6r 2  79 rr rr             adc     DECTBL+3,y
001AB9r 2  85 B4                sta     FAC+4
001ABBr 2  A5 B3                lda     FAC+3
001ABDr 2               .endif
001ABDr 2  79 rr rr             adc     DECTBL+2,y
001AC0r 2  85 B3                sta     FAC+3
001AC2r 2  A5 B2                lda     FAC+2
001AC4r 2  79 rr rr             adc     DECTBL+1,y
001AC7r 2  85 B2                sta     FAC+2
001AC9r 2  A5 B1                lda     FAC+1
001ACBr 2  79 rr rr             adc     DECTBL,y
001ACEr 2  85 B1                sta     FAC+1
001AD0r 2  E8                   inx
001AD1r 2  B0 04                bcs     L3D1A
001AD3r 2  10 DE                bpl     L3CF6
001AD5r 2  30 02                bmi     L3D1C
001AD7r 2               L3D1A:
001AD7r 2  30 DA                bmi     L3CF6
001AD9r 2               L3D1C:
001AD9r 2  8A                   txa
001ADAr 2  90 04                bcc     L3D23
001ADCr 2  49 FF                eor     #$FF
001ADEr 2  69 0A                adc     #$0A
001AE0r 2               L3D23:
001AE0r 2  69 2F                adc     #$2F
001AE2r 2  C8                   iny
001AE3r 2  C8                   iny
001AE4r 2  C8                   iny
001AE5r 2               .ifndef CONFIG_SMALL
001AE5r 2  C8                   iny
001AE6r 2               .endif
001AE6r 2  84 96                sty     VARPNT
001AE8r 2  A4 C0                ldy     STRNG2
001AEAr 2  C8                   iny
001AEBr 2  AA                   tax
001AECr 2  29 7F                and     #$7F
001AEEr 2  99 FF 00             sta     STACK2-1,y
001AF1r 2  C6 AC                dec     INDX
001AF3r 2  D0 06                bne     L3D3E
001AF5r 2  A9 2E                lda     #$2E
001AF7r 2  C8                   iny
001AF8r 2  99 FF 00             sta     STACK2-1,y
001AFBr 2               L3D3E:
001AFBr 2  84 C0                sty     STRNG2
001AFDr 2  A4 96                ldy     VARPNT
001AFFr 2  8A                   txa
001B00r 2  49 FF                eor     #$FF
001B02r 2  29 80                and     #$80
001B04r 2  AA                   tax
001B05r 2  C0 24                cpy     #DECTBL_END-DECTBL
001B07r 2               .ifdef CONFIG_CBM_ALL
001B07r 2  F0 04                beq     LDD96
001B09r 2  C0 3C                cpy     #$3C ; XXX
001B0Br 2               .endif
001B0Br 2  D0 A6                bne     L3CF6
001B0Dr 2               ; ----------------------------------------------------------------------------
001B0Dr 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
001B0Dr 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
001B0Dr 2               ; DECIMAL POINT.
001B0Dr 2               ; ----------------------------------------------------------------------------
001B0Dr 2               LDD96:
001B0Dr 2  A4 C0                ldy     STRNG2
001B0Fr 2               L3D4E:
001B0Fr 2  B9 FF 00             lda     STACK2-1,y
001B12r 2  88                   dey
001B13r 2  C9 30                cmp     #$30
001B15r 2  F0 F8                beq     L3D4E
001B17r 2  C9 2E                cmp     #$2E
001B19r 2  F0 01                beq     L3D5B
001B1Br 2  C8                   iny
001B1Cr 2               L3D5B:
001B1Cr 2  A9 2B                lda     #$2B
001B1Er 2  A6 AD                ldx     EXPON
001B20r 2  F0 2E                beq     L3D8F
001B22r 2  10 08                bpl     L3D6B
001B24r 2  A9 00                lda     #$00
001B26r 2  38                   sec
001B27r 2  E5 AD                sbc     EXPON
001B29r 2  AA                   tax
001B2Ar 2  A9 2D                lda     #$2D
001B2Cr 2               L3D6B:
001B2Cr 2  99 01 01             sta     STACK2+1,y
001B2Fr 2  A9 45                lda     #$45
001B31r 2  99 00 01             sta     STACK2,y
001B34r 2  8A                   txa
001B35r 2  A2 2F                ldx     #$2F
001B37r 2  38                   sec
001B38r 2               L3D77:
001B38r 2  E8                   inx
001B39r 2  E9 0A                sbc     #$0A
001B3Br 2  B0 FB                bcs     L3D77
001B3Dr 2  69 3A                adc     #$3A
001B3Fr 2  99 03 01             sta     STACK2+3,y
001B42r 2  8A                   txa
001B43r 2  99 02 01             sta     STACK2+2,y
001B46r 2  A9 00                lda     #$00
001B48r 2  99 04 01             sta     STACK2+4,y
001B4Br 2  F0 08                beq     L3D94
001B4Dr 2               FOUT4:
001B4Dr 2  99 FF 00             sta     STACK2-1,y
001B50r 2               L3D8F:
001B50r 2  A9 00                lda     #$00
001B52r 2  99 00 01             sta     STACK2,y
001B55r 2               L3D94:
001B55r 2  A9 00                lda     #<STACK2
001B57r 2  A0 01                ldy     #>STACK2
001B59r 2  60                   rts
001B5Ar 2               
001B5Ar 2               ; ----------------------------------------------------------------------------
001B5Ar 2               CON_HALF:
001B5Ar 2               .ifdef CONFIG_SMALL
001B5Ar 2                       .byte   $80,$00,$00,$00
001B5Ar 2               .else
001B5Ar 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
001B5Er 2  00           
001B5Fr 2               .endif
001B5Fr 2               
001B5Fr 2               ; ----------------------------------------------------------------------------
001B5Fr 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001B5Fr 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001B5Fr 2               ; ----------------------------------------------------------------------------
001B5Fr 2               DECTBL:
001B5Fr 2               .ifdef CONFIG_SMALL
001B5Fr 2                       .byte   $FE,$79,$60 ; -100000
001B5Fr 2               		.byte	$00,$27,$10 ; 10000
001B5Fr 2               		.byte	$FF,$FC,$18 ; -1000
001B5Fr 2               		.byte	$00,$00,$64 ; 100
001B5Fr 2               		.byte	$FF,$FF,$F6 ; -10
001B5Fr 2               		.byte	$00,$00,$01 ; 1
001B5Fr 2               .else
001B5Fr 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
001B63r 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
001B67r 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001B6Br 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001B6Fr 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001B73r 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001B77r 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001B7Br 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001B7Fr 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001B83r 2               .endif
001B83r 2               DECTBL_END:
001B83r 2               .ifdef CONFIG_CBM_ALL
001B83r 2  FF DF 0A 80  		.byte	$FF,$DF,$0A,$80 ; TI$
001B87r 2  00 03 4B C0  		.byte	$00,$03,$4B,$C0
001B8Br 2  FF FF 73 60  		.byte	$FF,$FF,$73,$60
001B8Fr 2  00 00 0E 10  		.byte	$00,$00,$0E,$10
001B93r 2  FF FF FD A8  		.byte	$FF,$FF,$FD,$A8
001B97r 2  00 00 00 3C  		.byte	$00,$00,$00,$3C
001B9Br 2               .endif
001B9Br 2               .ifdef CONFIG_2
001B9Br 2               C_ZERO = CON_HALF + 2
001B9Br 2               .endif
001B9Br 2               
001B9Br 2               ; ----------------------------------------------------------------------------
001B9Br 2               ; "SQR" FUNCTION
001B9Br 2               ; ----------------------------------------------------------------------------
001B9Br 2               SQR:
001B9Br 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001B9Er 2  A9 rr                lda     #<CON_HALF
001BA0r 2  A0 rr                ldy     #>CON_HALF
001BA2r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001BA5r 2               
001BA5r 2               ; ----------------------------------------------------------------------------
001BA5r 2               ; EXPONENTIATION OPERATION
001BA5r 2               ;
001BA5r 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001BA5r 2               ; ----------------------------------------------------------------------------
001BA5r 2               FPWRT:
001BA5r 2  F0 70                beq     EXP
001BA7r 2  A5 B8                lda     ARG
001BA9r 2  D0 03                bne     L3DD5
001BABr 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001BAEr 2               L3DD5:
001BAEr 2  A2 9D                ldx     #TEMP3
001BB0r 2  A0 00                ldy     #$00
001BB2r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001BB5r 2  A5 BD                lda     ARGSIGN
001BB7r 2  10 0F                bpl     L3DEF
001BB9r 2  20 rr rr             jsr     INT
001BBCr 2  A9 9D                lda     #TEMP3
001BBEr 2  A0 00                ldy     #$00
001BC0r 2  20 rr rr             jsr     FCOMP
001BC3r 2  D0 03                bne     L3DEF
001BC5r 2  98                   tya
001BC6r 2  A4 5A                ldy     CHARAC
001BC8r 2               L3DEF:
001BC8r 2  20 rr rr             jsr     MFA
001BCBr 2  98                   tya
001BCCr 2  48                   pha
001BCDr 2  20 rr rr             jsr     LOG
001BD0r 2  A9 9D                lda     #TEMP3
001BD2r 2  A0 00                ldy     #$00
001BD4r 2  20 rr rr             jsr     FMULT
001BD7r 2  20 rr rr             jsr     EXP
001BDAr 2  68                   pla
001BDBr 2  4A                   lsr     a
001BDCr 2  90 0A                bcc     L3E0F
001BDEr 2               
001BDEr 2               ; ----------------------------------------------------------------------------
001BDEr 2               ; NEGATE VALUE IN FAC
001BDEr 2               ; ----------------------------------------------------------------------------
001BDEr 2               NEGOP:
001BDEr 2  A5 B0                lda     FAC
001BE0r 2  F0 06                beq     L3E0F
001BE2r 2  A5 B5                lda     FACSIGN
001BE4r 2  49 FF                eor     #$FF
001BE6r 2  85 B5                sta     FACSIGN
001BE8r 2               L3E0F:
001BE8r 2  60                   rts
001BE9r 2               
001BE9r 2               ; ----------------------------------------------------------------------------
001BE9r 2               .ifdef CONFIG_SMALL
001BE9r 2               CON_LOG_E:
001BE9r 2                       .byte   $81,$38,$AA,$3B
001BE9r 2               POLY_EXP:
001BE9r 2               		.byte	$06
001BE9r 2               		.byte	$74,$63,$90,$8C
001BE9r 2               		.byte	$77,$23,$0C,$AB
001BE9r 2               		.byte	$7A,$1E,$94,$00
001BE9r 2               		.byte	$7C,$63,$42,$80
001BE9r 2               		.byte	$7E,$75,$FE,$D0
001BE9r 2               		.byte	$80,$31,$72,$15
001BE9r 2               		.byte	$81,$00,$00,$00
001BE9r 2               .else
001BE9r 2               CON_LOG_E:
001BE9r 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001BEDr 2  29           
001BEEr 2               POLY_EXP:
001BEEr 2  07                   .byte   $07
001BEFr 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001BF3r 2  56           
001BF4r 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001BF8r 2  1B           
001BF9r 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001BFDr 2  85           
001BFEr 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001C02r 2  2A           
001C03r 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001C07r 2  0A           
001C08r 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001C0Cr 2  C6           
001C0Dr 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001C11r 2  10           
001C12r 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001C16r 2  00           
001C17r 2               .endif
001C17r 2               
001C17r 2               ; ----------------------------------------------------------------------------
001C17r 2               ; "EXP" FUNCTION
001C17r 2               ;
001C17r 2               ; FAC = E ^ FAC
001C17r 2               ; ----------------------------------------------------------------------------
001C17r 2               EXP:
001C17r 2  A9 rr                lda     #<CON_LOG_E
001C19r 2  A0 rr                ldy     #>CON_LOG_E
001C1Br 2  20 rr rr             jsr     FMULT
001C1Er 2  A5 BF                lda     FACEXTENSION
001C20r 2  69 50                adc     #$50
001C22r 2  90 03                bcc     L3E4E
001C24r 2  20 rr rr             jsr     INCREMENT_MANTISSA
001C27r 2               L3E4E:
001C27r 2  85 A5                sta     ARGEXTENSION
001C29r 2  20 rr rr             jsr     MAF
001C2Cr 2  A5 B0                lda     FAC
001C2Er 2  C9 88                cmp     #$88
001C30r 2  90 03                bcc     L3E5C
001C32r 2               L3E59:
001C32r 2  20 rr rr             jsr     OUTOFRNG
001C35r 2               L3E5C:
001C35r 2  20 rr rr             jsr     INT
001C38r 2  A5 5A                lda     CHARAC
001C3Ar 2  18                   clc
001C3Br 2  69 81                adc     #$81
001C3Dr 2  F0 F3                beq     L3E59
001C3Fr 2  38                   sec
001C40r 2  E9 01                sbc     #$01
001C42r 2  48                   pha
001C43r 2  A2 05                ldx     #BYTES_FP
001C45r 2               L3E6C:
001C45r 2  B5 B8                lda     ARG,x
001C47r 2  B4 B0                ldy     FAC,x
001C49r 2  95 B0                sta     FAC,x
001C4Br 2  94 B8                sty     ARG,x
001C4Dr 2  CA                   dex
001C4Er 2  10 F5                bpl     L3E6C
001C50r 2  A5 A5                lda     ARGEXTENSION
001C52r 2  85 BF                sta     FACEXTENSION
001C54r 2  20 rr rr             jsr     FSUBT
001C57r 2  20 rr rr             jsr     NEGOP
001C5Ar 2  A9 rr                lda     #<POLY_EXP
001C5Cr 2  A0 rr                ldy     #>POLY_EXP
001C5Er 2  20 rr rr             jsr     POLYNOMIAL
001C61r 2  A9 00                lda     #$00
001C63r 2  85 BE                sta     SGNCPR
001C65r 2  68                   pla
001C66r 2  20 rr rr             jsr     ADD_EXPONENTS1
001C69r 2  60                   rts
001C6Ar 2               
001C6Ar 2               ; ----------------------------------------------------------------------------
001C6Ar 2               ; ODD POLYNOMIAL SUBROUTINE
001C6Ar 2               ;
001C6Ar 2               ; F(X) = X * P(X^2)
001C6Ar 2               ;
001C6Ar 2               ; WHERE:  X IS VALUE IN FAC
001C6Ar 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001C6Ar 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001C6Ar 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001C6Ar 2               ;
001C6Ar 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001C6Ar 2               ; ----------------------------------------------------------------------------
001C6Ar 2               POLYNOMIAL_ODD:
001C6Ar 2  85 C0                sta     STRNG2
001C6Cr 2  84 C1                sty     STRNG2+1
001C6Er 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001C71r 2  A9 A6                lda     #TEMP1X
001C73r 2  20 rr rr             jsr     FMULT
001C76r 2  20 rr rr             jsr     SERMAIN
001C79r 2  A9 A6                lda     #TEMP1X
001C7Br 2  A0 00                ldy     #$00
001C7Dr 2  4C rr rr             jmp     FMULT
001C80r 2               
001C80r 2               ; ----------------------------------------------------------------------------
001C80r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001C80r 2               ;
001C80r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001C80r 2               ;
001C80r 2               ; WHERE:  X IS VALUE IN FAC
001C80r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001C80r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001C80r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001C80r 2               ; ----------------------------------------------------------------------------
001C80r 2               POLYNOMIAL:
001C80r 2  85 C0                sta     STRNG2
001C82r 2  84 C1                sty     STRNG2+1
001C84r 2               SERMAIN:
001C84r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001C87r 2  B1 C0                lda     (STRNG2),y
001C89r 2  85 B6                sta     SERLEN
001C8Br 2  A4 C0                ldy     STRNG2
001C8Dr 2  C8                   iny
001C8Er 2  98                   tya
001C8Fr 2  D0 02                bne     L3EBA
001C91r 2  E6 C1                inc     STRNG2+1
001C93r 2               L3EBA:
001C93r 2  85 C0                sta     STRNG2
001C95r 2  A4 C1                ldy     STRNG2+1
001C97r 2               L3EBE:
001C97r 2  20 rr rr             jsr     FMULT
001C9Ar 2  A5 C0                lda     STRNG2
001C9Cr 2  A4 C1                ldy     STRNG2+1
001C9Er 2  18                   clc
001C9Fr 2  69 05                adc     #BYTES_FP
001CA1r 2  90 01                bcc     L3ECB
001CA3r 2  C8                   iny
001CA4r 2               L3ECB:
001CA4r 2  85 C0                sta     STRNG2
001CA6r 2  84 C1                sty     STRNG2+1
001CA8r 2  20 rr rr             jsr     FADD
001CABr 2  A9 AB                lda     #TEMP2
001CADr 2  A0 00                ldy     #$00
001CAFr 2  C6 B6                dec     SERLEN
001CB1r 2  D0 E4                bne     L3EBE
001CB3r 2               RTS19:
001CB3r 2  60                   rts
001CB4r 2               
001CB4r 1               .include "chrget.s"
001CB4r 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 C9                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 CA                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001CB4r 2               
001CB4r 2               ; ----------------------------------------------------------------------------
001CB4r 2               ; "RND" FUNCTION
001CB4r 2               ; ----------------------------------------------------------------------------
001CB4r 2               
001CB4r 2               .ifdef KBD
001CB4r 2               RND:
001CB4r 2                       ldx     #$10
001CB4r 2                       jsr     SIGN
001CB4r 2                       beq     LFC26
001CB4r 2                       bmi     LFC10
001CB4r 2                       lda     RNDSEED
001CB4r 2                       ldy     RNDSEED+1
001CB4r 2               LFBFA:
001CB4r 2                       sta     FAC+2
001CB4r 2                       sty     FAC+1
001CB4r 2               LFBFE:
001CB4r 2                       asl     a
001CB4r 2                       asl     a
001CB4r 2                       eor     FAC+2
001CB4r 2                       asl     a
001CB4r 2                       eor     FAC+1
001CB4r 2                       asl     a
001CB4r 2                       asl     a
001CB4r 2                       asl     a
001CB4r 2                       asl     a
001CB4r 2                       eor     FAC+1
001CB4r 2                       asl     a
001CB4r 2                       rol     FAC+2
001CB4r 2                       rol     FAC+1
001CB4r 2               LFC10:
001CB4r 2                       lda     FAC+2
001CB4r 2                       dex
001CB4r 2                       bne     LFBFE
001CB4r 2                       sta     RNDSEED
001CB4r 2                       sta     FAC+3
001CB4r 2                       lda     FAC+1
001CB4r 2                       sta     RNDSEED+1
001CB4r 2                       lda     #$80
001CB4r 2                       sta     FAC
001CB4r 2                       stx     FACSIGN
001CB4r 2                       jmp     NORMALIZE_FAC2
001CB4r 2               LFC26:
001CB4r 2                       ldy     $03CA
001CB4r 2                       lda     $03C7
001CB4r 2                       ora     #$01
001CB4r 2               GOMOVMF:
001CB4r 2                       bne     LFBFA
001CB4r 2                       .byte   $F0
001CB4r 2               .else
001CB4r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001CB4r 2               ; (non CONFIG_SMALL)
001CB4r 2               CONRND1:
001CB4r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001CB8r 2               CONRND2:
001CB8r 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001CBCr 2               RND:
001CBCr 2  20 rr rr             jsr     SIGN
001CBFr 2               .ifdef CONFIG_CBM_ALL
001CBFr 2  30 2E                bmi     L3F01
001CC1r 2  D0 17                bne     LDF63
001CC3r 2  AD 44 90             lda     ENTROPY
001CC6r 2  85 B1                sta     FAC+1
001CC8r 2  AD 48 90             lda     ENTROPY+4
001CCBr 2  85 B2                sta     FAC+2
001CCDr 2  AD 45 90             lda     ENTROPY+1
001CD0r 2  85 B3                sta     FAC+3
001CD2r 2  AD 49 90             lda     ENTROPY+5
001CD5r 2  85 B4                sta     FAC+4
001CD7r 2  4C rr rr             jmp     LDF88
001CDAr 2               LDF63:
001CDAr 2               .else
001CDAr 2                       tax
001CDAr 2                       bmi     L3F01
001CDAr 2               .endif
001CDAr 2  A9 DA                lda     #<RNDSEED
001CDCr 2  A0 00                ldy     #>RNDSEED
001CDEr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001CE1r 2               .ifndef CONFIG_CBM_ALL
001CE1r 2                       txa
001CE1r 2                       beq     RTS19
001CE1r 2               .endif
001CE1r 2  A9 rr                lda     #<CONRND1
001CE3r 2  A0 rr                ldy     #>CONRND1
001CE5r 2  20 rr rr             jsr     FMULT
001CE8r 2  A9 rr                lda     #<CONRND2
001CEAr 2  A0 rr                ldy     #>CONRND2
001CECr 2  20 rr rr             jsr     FADD
001CEFr 2               L3F01:
001CEFr 2  A6 B4                ldx     FAC_LAST
001CF1r 2  A5 B1                lda     FAC+1
001CF3r 2  85 B4                sta     FAC_LAST
001CF5r 2  86 B1                stx     FAC+1
001CF7r 2               .ifdef CONFIG_CBM_ALL
001CF7r 2  A6 B2                ldx     FAC+2
001CF9r 2  A5 B3                lda     FAC+3
001CFBr 2  85 B2                sta     FAC+2
001CFDr 2  86 B3                stx     FAC+3
001CFFr 2               LDF88:
001CFFr 2               .endif
001CFFr 2  A9 00                lda     #$00
001D01r 2  85 B5                sta     FACSIGN
001D03r 2  A5 B0                lda     FAC
001D05r 2  85 BF                sta     FACEXTENSION
001D07r 2  A9 80                lda     #$80
001D09r 2  85 B0                sta     FAC
001D0Br 2  20 rr rr             jsr     NORMALIZE_FAC2
001D0Er 2  A2 DA                ldx     #<RNDSEED
001D10r 2  A0 00                ldy     #>RNDSEED
001D12r 2               GOMOVMF:
001D12r 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001D15r 2               .endif
001D15r 2               
001D15r 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2                       .byte   $80,$4F,$C7,$52,$58
000018r 2                   .else
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$59
00001Cr 2  59           
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001D15r 2               
001D15r 2               .ifndef SYM1
001D15r 2               SIN_COS_TAN_ATN:
001D15r 2               ; ----------------------------------------------------------------------------
001D15r 2               ; "COS" FUNCTION
001D15r 2               ; ----------------------------------------------------------------------------
001D15r 2               COS:
001D15r 2  A9 rr                lda     #<CON_PI_HALF
001D17r 2  A0 rr                ldy     #>CON_PI_HALF
001D19r 2  20 rr rr             jsr     FADD
001D1Cr 2               
001D1Cr 2               ; ----------------------------------------------------------------------------
001D1Cr 2               ; "SIN" FUNCTION
001D1Cr 2               ; ----------------------------------------------------------------------------
001D1Cr 2               SIN:
001D1Cr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001D1Fr 2  A9 rr                lda     #<CON_PI_DOUB
001D21r 2  A0 rr                ldy     #>CON_PI_DOUB
001D23r 2  A6 BD                ldx     ARGSIGN
001D25r 2  20 rr rr             jsr     DIV
001D28r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001D2Br 2  20 rr rr             jsr     INT
001D2Er 2  A9 00                lda     #$00
001D30r 2  85 BE                sta     STRNG1
001D32r 2  20 rr rr             jsr     FSUBT
001D35r 2               ; ----------------------------------------------------------------------------
001D35r 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001D35r 2               ;
001D35r 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001D35r 2               ;
001D35r 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001D35r 2               ; ----------------------------------------------------------------------------
001D35r 2  A9 rr                lda     #<QUARTER
001D37r 2  A0 rr                ldy     #>QUARTER
001D39r 2  20 rr rr             jsr     FSUB
001D3Cr 2  A5 B5                lda     FACSIGN
001D3Er 2  48                   pha
001D3Fr 2  10 0D                bpl     SIN1
001D41r 2  20 rr rr             jsr     FADDH
001D44r 2  A5 B5                lda     FACSIGN
001D46r 2  30 09                bmi     L3F5B
001D48r 2  A5 63                lda     CPRMASK
001D4Ar 2  49 FF                eor     #$FF
001D4Cr 2  85 63                sta     CPRMASK
001D4Er 2               ; ----------------------------------------------------------------------------
001D4Er 2               ; IF FALL THRU, RANGE IS 0...1/2
001D4Er 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001D4Er 2               ; ----------------------------------------------------------------------------
001D4Er 2               SIN1:
001D4Er 2  20 rr rr             jsr     NEGOP
001D51r 2               ; ----------------------------------------------------------------------------
001D51r 2               ; IF FALL THRU, RANGE IS -1/2...0
001D51r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001D51r 2               ; ----------------------------------------------------------------------------
001D51r 2               L3F5B:
001D51r 2  A9 rr                lda     #<QUARTER
001D53r 2  A0 rr                ldy     #>QUARTER
001D55r 2  20 rr rr             jsr     FADD
001D58r 2  68                   pla
001D59r 2  10 03                bpl     L3F68
001D5Br 2  20 rr rr             jsr     NEGOP
001D5Er 2               L3F68:
001D5Er 2  A9 rr                lda     #<POLY_SIN
001D60r 2  A0 rr                ldy     #>POLY_SIN
001D62r 2  4C rr rr             jmp     POLYNOMIAL_ODD
001D65r 2               
001D65r 2               ; ----------------------------------------------------------------------------
001D65r 2               ; "TAN" FUNCTION
001D65r 2               ;
001D65r 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001D65r 2               ; ----------------------------------------------------------------------------
001D65r 2               TAN:
001D65r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001D68r 2  A9 00                lda     #$00
001D6Ar 2  85 63                sta     CPRMASK
001D6Cr 2  20 rr rr             jsr     SIN
001D6Fr 2  A2 9D                ldx     #TEMP3
001D71r 2  A0 00                ldy     #$00
001D73r 2  20 rr rr             jsr     GOMOVMF
001D76r 2  A9 A6                lda     #TEMP1+(5-BYTES_FP)
001D78r 2  A0 00                ldy     #$00
001D7Ar 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001D7Dr 2  A9 00                lda     #$00
001D7Fr 2  85 B5                sta     FACSIGN
001D81r 2  A5 63                lda     CPRMASK
001D83r 2  20 rr rr             jsr     TAN1
001D86r 2  A9 9D                lda     #TEMP3
001D88r 2  A0 00                ldy     #$00
001D8Ar 2  4C rr rr             jmp     FDIV
001D8Dr 2               TAN1:
001D8Dr 2  48                   pha
001D8Er 2  4C rr rr             jmp     SIN1
001D91r 2               
001D91r 2               ; ----------------------------------------------------------------------------
001D91r 2               .ifdef CONFIG_SMALL
001D91r 2               CON_PI_HALF:
001D91r 2                       .byte   $81,$49,$0F,$DB
001D91r 2               CON_PI_DOUB:
001D91r 2                       .byte   $83,$49,$0F,$DB
001D91r 2               QUARTER:
001D91r 2                       .byte   $7F,$00,$00,$00
001D91r 2               POLY_SIN:
001D91r 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001D91r 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001D91r 2                       .byte   $E1,$83,$49,$0F,$DB
001D91r 2               .else
001D91r 2               CON_PI_HALF:
001D91r 2  81 49 0F DA          .byte   $81,$49,$0F,$DA,$A2
001D95r 2  A2           
001D96r 2               CON_PI_DOUB:
001D96r 2  83 49 0F DA          .byte   $83,$49,$0F,$DA,$A2
001D9Ar 2  A2           
001D9Br 2               QUARTER:
001D9Br 2  7F 00 00 00          .byte   $7F,$00,$00,$00,$00
001D9Fr 2  00           
001DA0r 2               POLY_SIN:
001DA0r 2  05 84 E6 1A          .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001DA4r 2  2D 1B 86 28  
001DA8r 2  07 FB F8 87          .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001DACr 2  99 68 89 01  
001DB0r 2  87 23 35 DF          .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001DB4r 2  E1 86 A5 5D  
001DB8r 2  E7 28 83 49          .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001DBCr 2  0F DA A2     
001DBFr 2                 .ifndef CONFIG_11
001DBFr 2               ; no easter egg text before BASIC 1.1
001DBFr 2                 .elseif !.def(CONFIG_2A)
001DBFr 2               ; ASCII encoded easter egg
001DBFr 2               MICROSOFT:
001DBFr 2                       .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001DBFr 2                       .byte   $CE,$CA
001DBFr 2                 .else
001DBFr 2               ; PET encoded easter egg text since CBM2
001DBFr 2               MICROSOFT:
001DBFr 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001DBFr 2                       .byte   $89,$CD
001DBFr 2                 .endif
001DBFr 2               .endif
001DBFr 2               
001DBFr 2               .ifndef AIM65
001DBFr 2               ; ----------------------------------------------------------------------------
001DBFr 2               ; "ATN" FUNCTION
001DBFr 2               ; ----------------------------------------------------------------------------
001DBFr 2               ATN:
001DBFr 2  A5 B5                lda     FACSIGN
001DC1r 2  48                   pha
001DC2r 2  10 03                bpl     L3FDB
001DC4r 2  20 rr rr             jsr     NEGOP
001DC7r 2               L3FDB:
001DC7r 2  A5 B0                lda     FAC
001DC9r 2  48                   pha
001DCAr 2  C9 81                cmp     #$81
001DCCr 2  90 07                bcc     L3FE9
001DCEr 2  A9 rr                lda     #<CON_ONE
001DD0r 2  A0 rr                ldy     #>CON_ONE
001DD2r 2  20 rr rr             jsr     FDIV
001DD5r 2               ; ----------------------------------------------------------------------------
001DD5r 2               ; 0 <= X <= 1
001DD5r 2               ; 0 <= ATN(X) <= PI/8
001DD5r 2               ; ----------------------------------------------------------------------------
001DD5r 2               L3FE9:
001DD5r 2  A9 rr                lda     #<POLY_ATN
001DD7r 2  A0 rr                ldy     #>POLY_ATN
001DD9r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001DDCr 2  68                   pla
001DDDr 2  C9 81                cmp     #$81
001DDFr 2  90 07                bcc     L3FFC
001DE1r 2  A9 rr                lda     #<CON_PI_HALF
001DE3r 2  A0 rr                ldy     #>CON_PI_HALF
001DE5r 2  20 rr rr             jsr     FSUB
001DE8r 2               L3FFC:
001DE8r 2  68                   pla
001DE9r 2  10 03                bpl     L4002
001DEBr 2  4C rr rr             jmp     NEGOP
001DEEr 2               L4002:
001DEEr 2  60                   rts
001DEFr 2               
001DEFr 2               ; ----------------------------------------------------------------------------
001DEFr 2               POLY_ATN:
001DEFr 2               .ifdef CONFIG_SMALL
001DEFr 2                       .byte   $08
001DEFr 2               		.byte	$78,$3A,$C5,$37
001DEFr 2               		.byte	$7B,$83,$A2,$5C
001DEFr 2               		.byte	$7C,$2E,$DD,$4D
001DEFr 2               		.byte	$7D,$99,$B0,$1E
001DEFr 2               		.byte	$7D,$59,$ED,$24
001DEFr 2               		.byte	$7E,$91,$72,$00
001DEFr 2               		.byte	$7E,$4C,$B9,$73
001DEFr 2               		.byte	$7F,$AA,$AA,$53
001DEFr 2               		.byte	$81,$00,$00,$00
001DEFr 2               .else
001DEFr 2  0B                   .byte   $0B
001DF0r 2  76 B3 83 BD  		.byte	$76,$B3,$83,$BD,$D3
001DF4r 2  D3           
001DF5r 2  79 1E F4 A6  		.byte	$79,$1E,$F4,$A6,$F5
001DF9r 2  F5           
001DFAr 2  7B 83 FC B0  		.byte	$7B,$83,$FC,$B0,$10
001DFEr 2  10           
001DFFr 2  7C 0C 1F 67          .byte   $7C,$0C,$1F,$67,$CA
001E03r 2  CA           
001E04r 2  7C DE 53 CB  		.byte	$7C,$DE,$53,$CB,$C1
001E08r 2  C1           
001E09r 2  7D 14 64 70  		.byte	$7D,$14,$64,$70,$4C
001E0Dr 2  4C           
001E0Er 2  7D B7 EA 51  		.byte	$7D,$B7,$EA,$51,$7A
001E12r 2  7A           
001E13r 2  7D 63 30 88  		.byte	$7D,$63,$30,$88,$7E
001E17r 2  7E           
001E18r 2  7E 92 44 99  		.byte	$7E,$92,$44,$99,$3A
001E1Cr 2  3A           
001E1Dr 2  7E 4C CC 91  		.byte	$7E,$4C,$CC,$91,$C7
001E21r 2  C7           
001E22r 2  7F AA AA AA  		.byte	$7F,$AA,$AA,$AA,$13
001E26r 2  13           
001E27r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001E2Br 2  00           
001E2Cr 2               .endif
001E2Cr 2               
001E2Cr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001E2Cr 2               		.byte	$00 ; XXX
001E2Cr 2               .endif
001E2Cr 2               .endif
001E2Cr 2               .endif
001E2Cr 2               
001E2Cr 1               .include "init.s"
001E2Cr 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2                   .ifndef AIM65
000000r 2                     .ifndef SYM1
000000r 2                       lda     #<QT_WRITTEN_BY
000000r 2                       ldy     #>QT_WRITTEN_BY
000000r 2                       jsr     STROUT
000000r 2                     .endif
000000r 2                   .endif
000000r 2                 .endif
000000r 2               .endif
000000r 2               COLD_START:
000000r 2               .ifdef SYM1
000000r 2                       jsr     ACCESS
000000r 2               .endif
000000r 2               .ifdef KBD
000000r 2                       lda     #<LFD81
000000r 2                       sta     $03A0
000000r 2                       lda     #>LFD81
000000r 2                       sta     $03A1
000000r 2                       lda     #$20
000000r 2                       sta     $0480
000000r 2                       lda     $0352
000000r 2                       sta     $04
000000r 2                       lda     $0353
000000r 2                       sta     $05
000000r 2               .else
000000r 2                 .ifndef CBM2
000000r 2  A2 FF                ldx     #$FF
000002r 2  86 89                stx     CURLIN+1
000004r 2                 .endif
000004r 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
000004r 2                       ldx     #$FB
000004r 2                 .elseif .def(AIM65)
000004r 2                       ldx     #$FE
000004r 2                 .endif
000004r 2  9A                   txs
000005r 2                 .ifndef CONFIG_CBM_ALL
000005r 2                       lda     #<COLD_START
000005r 2                       ldy     #>COLD_START
000005r 2                       sta     GORESTART+1
000005r 2                       sty     GORESTART+2
000005r 2                   .ifndef AIM65
000005r 2                       sta     GOSTROUT+1
000005r 2                       sty     GOSTROUT+2
000005r 2                       lda     #<AYINT
000005r 2                       ldy     #>AYINT
000005r 2                       sta     GOAYINT
000005r 2                       sty     GOAYINT+1
000005r 2                       lda     #<GIVAYF
000005r 2                       ldy     #>GIVAYF
000005r 2                       sta     GOGIVEAYF
000005r 2                       sty     GOGIVEAYF+1
000005r 2                   .endif
000005r 2                 .endif
000005r 2  A9 4C                lda     #$4C
000007r 2                 .ifdef CONFIG_CBM_ALL
000007r 2  85 A3                sta     JMPADRS
000009r 2                 .endif
000009r 2  85 00                sta     GORESTART
00000Br 2                 .ifdef AIM65
00000Br 2                       sta     JMPADRS
00000Br 2                       sta     ATN
00000Br 2                       sta     GOSTROUT
00000Br 2                 .else
00000Br 2                 .ifndef CONFIG_CBM_ALL
00000Br 2                       sta     GOSTROUT
00000Br 2                       sta     JMPADRS
00000Br 2                 .endif
00000Br 2                 .ifdef SYM1
00000Br 2                       sta     USR1
00000Br 2                       sta     USR3
00000Br 2                       sta     USR2
00000Br 2                 .endif
00000Br 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
00000Br 2                       sta     USR
00000Br 2                 .endif
00000Br 2                 .endif
00000Br 2               
00000Br 2                 .ifndef CONFIG_RAM
00000Br 2                   .ifdef APPLE
00000Br 2                         lda     #<USR_FUNC
00000Br 2                         ldy     #>USR_FUNC
00000Br 2                   .else
00000Br 2  A9 rr                  lda     #<IQERR
00000Dr 2  A0 rr                  ldy     #>IQERR
00000Fr 2                   .endif
00000Fr 2                   .ifdef AIM65
00000Fr 2                         sta     ATN+1
00000Fr 2                         sty     ATN+2
00000Fr 2                         sta     GOSTROUT+1
00000Fr 2                         sty     GOSTROUT+2
00000Fr 2                   .else
00000Fr 2  85 01                  sta     USR+1
000011r 2  84 02                  sty     USR+2
000013r 2                     .ifdef SYM1
000013r 2                         sta     USR1+1
000013r 2                         sty     USR1+2
000013r 2                         lda     #<DUMPT
000013r 2                         ldy     #>DUMPT
000013r 2                         sta     USR2+1
000013r 2                         sty     USR2+2
000013r 2                         lda     #<L8C78
000013r 2                         ldy     #>L8C78
000013r 2                         sta     USR3+1
000013r 2                         sty     USR3+2
000013r 2                     .endif
000013r 2                   .endif
000013r 2                 .endif
000013r 2                 .ifndef CBM1
000013r 2                       lda     #WIDTH
000013r 2                       sta     Z17
000013r 2                       lda     #WIDTH2
000013r 2                       sta     Z18
000013r 2                 .endif
000013r 2                 .ifdef EATER
000013r 2                       jsr     LCDINIT
000013r 2                 .endif
000013r 2               .endif
000013r 2               
000013r 2               ; All non-CONFIG_SMALL versions of BASIC have
000013r 2               ; the same bug here: While the number of bytes
000013r 2               ; to be copied is correct for CONFIG_SMALL,
000013r 2               ; it is one byte short on non-CONFIG_SMALL:
000013r 2               ; It seems the "ldx" value below has been
000013r 2               ; hardcoded. So on these configurations,
000013r 2               ; the last byte of GENERIC_RNDSEED, which
000013r 2               ; is 5 bytes instead of 4, does not get copied -
000013r 2               ; which is nothing major, because it is just
000013r 2               ; the least significant 8 bits of the mantissa
000013r 2               ; of the random number seed.
000013r 2               ; KBD added three bytes to CHRGET and removed
000013r 2               ; the random number seed, but only adjusted
000013r 2               ; the number of bytes by adding 3 - this
000013r 2               ; copies four bytes too many, which is no
000013r 2               ; problem.
000013r 2               .ifdef CONFIG_SMALL
000013r 2                 .ifdef KBD
000013r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000013r 2                 .else
000013r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000013r 2                 .endif
000013r 2               .else
000013r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
000015r 2               .endif
000015r 2               L4098:
000015r 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000018r 2  95 C1                sta     CHRGET-1,x
00001Ar 2  CA                   dex
00001Br 2  D0 F8                bne     L4098
00001Dr 2               .ifdef CONFIG_2
00001Dr 2                       lda     #$03
00001Dr 2                       sta     DSCLEN
00001Dr 2               .endif
00001Dr 2               .ifndef KBD
00001Dr 2  8A                   txa
00001Er 2  85 B7                sta     SHIFTSIGNEXT
000020r 2                 .ifdef CONFIG_CBM_ALL
000020r 2  85 03                sta     CURDVC
000022r 2                 .endif
000022r 2  85 67                sta     LASTPT+1
000024r 2                 .ifndef AIM65
000024r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000024r 2  85 04                sta     Z15
000026r 2                 .endif
000026r 2                 .endif
000026r 2                 .ifndef CONFIG_11
000026r 2  85 05                sta     POSX
000028r 2                 .endif
000028r 2  48                   pha
000029r 2  85 64                sta     Z14
00002Br 2                 .ifndef CBM2
00002Br 2                  .ifndef AIM65
00002Br 2                  .ifndef SYM1
00002Br 2                   .ifndef MICROTAN
00002Br 2  A9 03                lda     #$03
00002Dr 2  85 A2                sta     DSCLEN
00002Fr 2                   .endif
00002Fr 2                  .endif
00002Fr 2                  .endif
00002Fr 2                   .ifndef CONFIG_11
00002Fr 2  A9 2C                lda     #$2C
000031r 2  85 09                sta     LINNUM+1
000033r 2                   .endif
000033r 2  20 rr rr             jsr     CRDO
000036r 2                 .endif
000036r 2                 .ifdef CBM2
000036r 2                       inx
000036r 2                       stx     INPUTBUFFER-3
000036r 2                       stx     INPUTBUFFER-4
000036r 2                 .endif
000036r 2                 .ifdef APPLE
000036r 2                       lda     #$01
000036r 2                       sta     INPUTBUFFER-3
000036r 2                       sta     INPUTBUFFER-4
000036r 2                 .endif
000036r 2  A2 68                ldx     #TEMPST
000038r 2  86 65                stx     TEMPPT
00003Ar 2               .ifndef CONFIG_CBM_ALL
00003Ar 2                       lda     #<QT_MEMORY_SIZE
00003Ar 2                       ldy     #>QT_MEMORY_SIZE
00003Ar 2                       jsr     STROUT
00003Ar 2                 .ifdef APPLE
00003Ar 2                       jsr     INLINX
00003Ar 2                 .else
00003Ar 2                       jsr     NXIN
00003Ar 2                 .endif
00003Ar 2                       stx     TXTPTR
00003Ar 2                       sty     TXTPTR+1
00003Ar 2                       jsr     CHRGET
00003Ar 2                 .ifndef AIM65
00003Ar 2                   .ifndef SYM1
00003Ar 2                       cmp     #$41
00003Ar 2                       beq     PR_WRITTEN_BY
00003Ar 2                   .endif
00003Ar 2                 .endif
00003Ar 2                       tay
00003Ar 2                       bne     L40EE
00003Ar 2               .endif
00003Ar 2               .ifndef CBM2
00003Ar 2  A9 00                lda     #<RAMSTART2
00003Cr 2               .endif
00003Cr 2  A0 04                ldy     #>RAMSTART2
00003Er 2               .ifdef CONFIG_2
00003Er 2                       sta     TXTTAB
00003Er 2                       sty     TXTTAB+1
00003Er 2               .endif
00003Er 2  85 08                sta     LINNUM
000040r 2  84 09                sty     LINNUM+1
000042r 2               .ifdef CBM2
000042r 2               		tay
000042r 2               .else
000042r 2  A0 00                ldy     #$00
000044r 2               .endif
000044r 2               L40D7:
000044r 2  E6 08                inc     LINNUM
000046r 2  D0 08                bne     L40DD
000048r 2  E6 09                inc     LINNUM+1
00004Ar 2               .ifdef CBM1
00004Ar 2               ; CBM: hard RAM top limit is $8000
00004Ar 2  A5 09                lda     LINNUM+1
00004Cr 2  C9 80                cmp     #$80
00004Er 2  F0 0F                beq     L40FA
000050r 2               .endif
000050r 2               .ifdef CBM2
000050r 2               ; optimized version of the CBM1 code
000050r 2                       bmi     L40FA
000050r 2               .endif
000050r 2               .if .def(AIM65)
000050r 2               ; AIM65: hard RAM top limit is $A000
000050r 2                       lda     LINNUM+1
000050r 2                       cmp     #$A0
000050r 2                       beq     L40FA
000050r 2               .endif
000050r 2               L40DD:
000050r 2               .ifdef CONFIG_2
000050r 2                       lda     #$55 ; 01010101 / 10101010
000050r 2               .else
000050r 2  A9 92                lda     #$92 ; 10010010 / 00100100
000052r 2               .endif
000052r 2  91 08                sta     (LINNUM),y
000054r 2  D1 08                cmp     (LINNUM),y
000056r 2  D0 07                bne     L40FA
000058r 2  0A                   asl     a
000059r 2  91 08                sta     (LINNUM),y
00005Br 2  D1 08                cmp     (LINNUM),y
00005Dr 2               .ifdef CONFIG_CBM_ALL
00005Dr 2  F0 E5                beq     L40D7
00005Fr 2               .else
00005Fr 2                 .ifndef CONFIG_11
00005Fr 2                       beq     L40D7; old: faster
00005Fr 2                       bne     L40FA
00005Fr 2                 .else
00005Fr 2                       bne     L40FA; new: slower
00005Fr 2                       beq     L40D7
00005Fr 2                 .endif
00005Fr 2               L40EE:
00005Fr 2                       jsr     CHRGOT
00005Fr 2                       jsr     LINGET
00005Fr 2                       tay
00005Fr 2                       beq     L40FA
00005Fr 2                       jmp     SYNERR
00005Fr 2               .endif
00005Fr 2               L40FA:
00005Fr 2  A5 08                lda     LINNUM
000061r 2  A4 09                ldy     LINNUM+1
000063r 2  85 86                sta     MEMSIZ
000065r 2  84 87                sty     MEMSIZ+1
000067r 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
000067r 2  85 82                sta     FRETOP
000069r 2  84 83                sty     FRETOP+1
00006Br 2               .endif
00006Br 2               L4106:
00006Br 2               .ifndef CONFIG_CBM_ALL
00006Br 2                 .ifdef APPLE
00006Br 2                       lda     #$FF
00006Br 2                       jmp     L2829
00006Br 2                       .word	STROUT ; PATCH!
00006Br 2                       jsr     NXIN
00006Br 2                 .else
00006Br 2                       lda     #<QT_TERMINAL_WIDTH
00006Br 2                       ldy     #>QT_TERMINAL_WIDTH
00006Br 2                       jsr     STROUT
00006Br 2                       jsr     NXIN
00006Br 2                 .endif
00006Br 2                       stx     TXTPTR
00006Br 2                       sty     TXTPTR+1
00006Br 2                       jsr     CHRGET
00006Br 2                       tay
00006Br 2                       beq     L4136
00006Br 2                       jsr     LINGET
00006Br 2                       lda     LINNUM+1
00006Br 2                       bne     L4106
00006Br 2                       lda     LINNUM
00006Br 2                       cmp     #$10
00006Br 2                       bcc     L4106
00006Br 2               L2829:
00006Br 2                       sta     Z17
00006Br 2               L4129:
00006Br 2                 .ifdef AIM65
00006Br 2                       sbc     #$0A
00006Br 2                 .else
00006Br 2                       sbc     #$0E
00006Br 2                 .endif
00006Br 2                       bcs     L4129
00006Br 2                       eor     #$FF
00006Br 2                 .ifdef AIM65
00006Br 2                       sbc     #$08
00006Br 2                 .else
00006Br 2                       sbc     #$0C
00006Br 2                 .endif
00006Br 2                       clc
00006Br 2                       adc     Z17
00006Br 2                       sta     Z18
00006Br 2               .endif
00006Br 2               L4136:
00006Br 2               .ifdef CONFIG_RAM
00006Br 2                       lda     #<QT_WANT
00006Br 2                       ldy     #>QT_WANT
00006Br 2                       jsr     STROUT
00006Br 2                       jsr     NXIN
00006Br 2                       stx     TXTPTR
00006Br 2                       sty     TXTPTR+1
00006Br 2                       jsr     CHRGET
00006Br 2                       ldx     #<RAMSTART1
00006Br 2                       ldy     #>RAMSTART1
00006Br 2                       cmp     #'Y'
00006Br 2                       beq     L4183
00006Br 2                       cmp     #'A'
00006Br 2                       beq     L4157
00006Br 2                       cmp     #'N'
00006Br 2                       bne     L4136
00006Br 2               L4157:
00006Br 2                       ldx     #<IQERR
00006Br 2                       ldy     #>IQERR
00006Br 2                       stx     UNFNC_ATN
00006Br 2                       sty     UNFNC_ATN+1
00006Br 2                       ldx     #<ATN	; overwrite starting
00006Br 2                       ldy     #>ATN	; with ATN
00006Br 2                       cmp     #'A'
00006Br 2                       beq     L4183
00006Br 2                       ldx     #<IQERR
00006Br 2                       ldy     #>IQERR
00006Br 2                       stx     UNFNC_COS
00006Br 2                       sty     UNFNC_COS+1
00006Br 2                       stx     UNFNC_TAN
00006Br 2                       sty     UNFNC_TAN+1
00006Br 2                       stx     UNFNC_SIN
00006Br 2                       sty     UNFNC_SIN+1
00006Br 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
00006Br 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
00006Br 2               L4183:
00006Br 2               .else
00006Br 2  A2 00                ldx     #<RAMSTART2
00006Dr 2  A0 04                ldy     #>RAMSTART2
00006Fr 2               .endif
00006Fr 2  86 7A                stx     TXTTAB
000071r 2  84 7B                sty     TXTTAB+1
000073r 2  A0 00                ldy     #$00
000075r 2  98                   tya
000076r 2  91 7A                sta     (TXTTAB),y
000078r 2  E6 7A                inc     TXTTAB
00007Ar 2               .ifndef CBM2
00007Ar 2  D0 02                bne     L4192
00007Cr 2  E6 7B                inc     TXTTAB+1
00007Er 2               L4192:
00007Er 2               .endif
00007Er 2               .if CONFIG_SCRTCH_ORDER = 1
00007Er 2                       jsr     SCRTCH
00007Er 2               .endif
00007Er 2  A5 7A                lda     TXTTAB
000080r 2  A4 7B                ldy     TXTTAB+1
000082r 2  20 rr rr             jsr     REASON
000085r 2               .ifdef CBM2
000085r 2                       lda     #<QT_BASIC
000085r 2                       ldy     #>QT_BASIC
000085r 2                       jsr     STROUT
000085r 2               .else
000085r 2  20 rr rr             jsr     CRDO
000088r 2               .endif
000088r 2  A5 86                lda     MEMSIZ
00008Ar 2  38                   sec
00008Br 2  E5 7A                sbc     TXTTAB
00008Dr 2  AA                   tax
00008Er 2  A5 87                lda     MEMSIZ+1
000090r 2  E5 7B                sbc     TXTTAB+1
000092r 2  20 rr rr             jsr     LINPRT
000095r 2  A9 rr                lda     #<QT_BYTES_FREE
000097r 2  A0 rr                ldy     #>QT_BYTES_FREE
000099r 2  20 rr rr             jsr     STROUT
00009Cr 2               .if CONFIG_SCRTCH_ORDER = 2
00009Cr 2  20 rr rr             jsr     SCRTCH
00009Fr 2               .endif
00009Fr 2               .ifdef CONFIG_CBM_ALL
00009Fr 2  4C rr rr             jmp     RESTART
0000A2r 2               .elseif .def(AIM65)
0000A2r 2                       lda     #<CRDO
0000A2r 2                       ldy     #>CRDO
0000A2r 2                       sta     GORESTART+1
0000A2r 2                       sty     GORESTART+2
0000A2r 2                       jmp     RESTART
0000A2r 2               .else
0000A2r 2                       lda     #<STROUT
0000A2r 2                       ldy     #>STROUT
0000A2r 2                       sta     GOSTROUT+1
0000A2r 2                       sty     GOSTROUT+2
0000A2r 2                 .if CONFIG_SCRTCH_ORDER = 3
0000A2r 2                        jsr     SCRTCH
0000A2r 2                 .endif
0000A2r 2                       lda     #<RESTART
0000A2r 2                       ldy     #>RESTART
0000A2r 2                       sta     GORESTART+1
0000A2r 2                       sty     GORESTART+2
0000A2r 2                       jmp     (GORESTART+1)
0000A2r 2               .endif
0000A2r 2               
0000A2r 2                 .if .def(CONFIG_RAM) || .def(OSI)
0000A2r 2               ; OSI is compiled for ROM, but includes
0000A2r 2               ; this unused string
0000A2r 2               QT_WANT:
0000A2r 2                       .byte   "WANT SIN-COS-TAN-ATN"
0000A2r 2                       .byte   0
0000A2r 2                 .endif
0000A2r 2               QT_WRITTEN_BY:
0000A2r 2                 .ifndef CONFIG_CBM_ALL
0000A2r 2                 .if !(.def(AIM65) || .def(SYM1))
0000A2r 2                   .ifdef APPLE
0000A2r 2               		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
0000A2r 2               		.byte	CR,0
0000A2r 2                   .else
0000A2r 2                       .byte   CR,LF,$0C ; FORM FEED
0000A2r 2                     .ifndef CONFIG_11
0000A2r 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
0000A2r 2                     .else
0000A2r 2                       .byte   "WRITTEN BY WEILAND & GATES"
0000A2r 2                     .endif
0000A2r 2                       .byte   CR,LF,0
0000A2r 2                   .endif
0000A2r 2                  .endif
0000A2r 2               QT_MEMORY_SIZE:
0000A2r 2                       .byte   "MEMORY SIZE"
0000A2r 2                       .byte   0
0000A2r 2               QT_TERMINAL_WIDTH:
0000A2r 2                   .if !(.def(AIM65) || .def(SYM1))
0000A2r 2                       .byte   "TERMINAL "
0000A2r 2                   .endif
0000A2r 2                       .byte   "WIDTH"
0000A2r 2                       .byte   0
0000A2r 2                 .endif
0000A2r 2               QT_BYTES_FREE:
0000A2r 2  20 42 59 54          .byte   " BYTES FREE"
0000A6r 2  45 53 20 46  
0000AAr 2  52 45 45     
0000ADr 2                 .ifdef CBM1
0000ADr 2                 .elseif .def(CBM2)
0000ADr 2                       .byte   CR,0
0000ADr 2                 .elseif .def(APPLE)
0000ADr 2                       .byte   0
0000ADr 2                 .else
0000ADr 2                       .byte   CR,LF,CR,LF
0000ADr 2                 .endif
0000ADr 2               QT_BASIC:
0000ADr 2                 .ifdef OSI
0000ADr 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
0000ADr 2                 .endif
0000ADr 2                 .ifdef KIM
0000ADr 2                       .byte   "MOS TECH 6502 BASIC V1.1"
0000ADr 2                 .endif
0000ADr 2                 .ifdef MICROTAN
0000ADr 2                       .byte   "MICROTAN BASIC"
0000ADr 2                 .endif
0000ADr 2                 .ifdef AIM65
0000ADr 2                       .byte   "  AIM 65 BASIC V1.1"
0000ADr 2                 .endif
0000ADr 2                 .ifdef SYM1
0000ADr 2                       .byte   "BASIC V1.1"
0000ADr 2                 .endif
0000ADr 2                 .ifdef CBM1
0000ADr 2  13                   .byte   $13 ; HOME
0000AEr 2  2A 2A 2A 20          .byte   "*** COMMODORE BASIC ***"
0000B2r 2  43 4F 4D 4D  
0000B6r 2  4F 44 4F 52  
0000C5r 2  11 11 11 00          .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
0000C9r 2                 .endif
0000C9r 2                 .ifdef CBM2
0000C9r 2                       .byte   "### COMMODORE BASIC ###"
0000C9r 2                       .byte   CR,CR,0
0000C9r 2                 .endif
0000C9r 2                 .ifdef APPLE
0000C9r 2                       .byte   LF,CR,LF
0000C9r 2               		.byte	"APPLE BASIC V1.1"
0000C9r 2                 .endif
0000C9r 2                 .ifndef CONFIG_CBM_ALL
0000C9r 2                       .byte   CR,LF
0000C9r 2                   .ifdef MICROTAN
0000C9r 2                       .byte   "(C) 1980 MICROSOFT"
0000C9r 2                   .elseif .def(AIM65)
0000C9r 2                       .byte   0
0000C9r 2                       .byte   "(C) 1978 MICROSOFT"
0000C9r 2                   .elseif .def(SYM1)
0000C9r 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
0000C9r 2                   .else
0000C9r 2                       .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
0000C9r 2                   .endif
0000C9r 2                       .byte   CR,LF
0000C9r 2                     .ifndef AIM65
0000C9r 2                       .byte   0
0000C9r 2                     .endif
0000C9r 2                 .endif
0000C9r 2               .endif
0000C9r 2               
0000C9r 1               .include "extra.s"
0000C9r 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 3               .segment "INIT"
0000C9r 3               
0000C9r 3               PATCH1:
0000C9r 3  18                   clc
0000CAr 3  4C rr rr             jmp     CONTROL_C_TYPED
0000CDr 3               PATCH2:
0000CDr 3  24 B4                bit     FAC+4
0000CFr 3  10 07                bpl     LE1AA
0000D1r 3  C9 54                cmp     #$54
0000D3r 3  D0 03                bne     LE1AA
0000D5r 3  4C rr rr             jmp     LCE3B
0000D8r 3               LE1AA:
0000D8r 3  60                   rts
0000D9r 3               PATCH3:
0000D9r 3  24 B4                bit     FAC+4
0000DBr 3  30 03                bmi     LE1B2
0000DDr 3  4C rr rr             jmp     LCE90
0000E0r 3               LE1B2:
0000E0r 3  C9 54                cmp     #$54
0000E2r 3  F0 03                beq     LE1B9
0000E4r 3  4C rr rr             jmp     LCE82
0000E7r 3               LE1B9:
0000E7r 3  4C rr rr             jmp     LCE69
0000EAr 3               PATCH4:
0000EAr 3  85 5A                sta     CHARAC
0000ECr 3  E8                   inx
0000EDr 3  4C rr rr             jmp     LE1D9
0000F0r 3               PATCH5:
0000F0r 3  10 05                bpl     LE1C9
0000F2r 3  A5 8E                lda     Z8C
0000F4r 3  A4 8F                ldy     Z8C+1
0000F6r 3  60                   rts
0000F7r 3               LE1C9:
0000F7r 3  A0 FF                ldy     #$FF
0000F9r 3  60                   rts
0000FAr 3               PATCH6:
0000FAr 3  D0 0A                bne     LE1D8
0000FCr 3               LE1CE:
0000FCr 3  E6 05                inc     POSX
0000FEr 3  D0 06                bne     LE1D8
000100r 3  A5 E2                lda     $E2
000102r 3  85 05                sta     POSX
000104r 3  D0 F6                bne     LE1CE
000106r 3               LE1D8:
000106r 3  60                   rts
000107r 3               LE1D9:
000107r 3  86 C9                stx     TXTPTR
000109r 3  68                   pla
00010Ar 3  68                   pla
00010Br 3  98                   tya
00010Cr 3  4C rr rr             jmp     L2B1C
00010Fr 3               
00010Fr 2               .endif
00010Fr 2               
00010Fr 2               .ifdef KBD
00010Fr 2               .include "kbd_extra.s"
00010Fr 2               .endif
00010Fr 2               
00010Fr 2               .ifdef APPLE
00010Fr 2               .include "apple_extra.s"
00010Fr 2               .endif
00010Fr 2               
00010Fr 2               .ifdef MICROTAN
00010Fr 2               .include "microtan_extra.s"
00010Fr 2               .endif
00010Fr 2               
00010Fr 2               .ifdef AIM65
00010Fr 2               .include "aim65_extra.s"
00010Fr 2               .endif
00010Fr 2               
00010Fr 2               .ifdef SYM1
00010Fr 2                       .byte   0,0,0
00010Fr 2               .endif
00010Fr 2               
00010Fr 2               .ifdef EATER
00010Fr 2               .include "bios.s"
00010Fr 2               .endif
00010Fr 2               
00010Fr 1               .include "lcd.s"
00010Fr 2               .segment "CODE"
001E2Cr 2               .ifdef EATER
001E2Cr 2               PORTB = $6000
001E2Cr 2               DDRB = $6002
001E2Cr 2               E  = %01000000
001E2Cr 2               RW = %00100000
001E2Cr 2               RS = %00010000
001E2Cr 2               
001E2Cr 2               lcd_wait:
001E2Cr 2                 pha
001E2Cr 2                 lda #%11110000  ; LCD data is input
001E2Cr 2                 sta DDRB
001E2Cr 2               lcdbusy:
001E2Cr 2                 lda #RW
001E2Cr 2                 sta PORTB
001E2Cr 2                 lda #(RW | E)
001E2Cr 2                 sta PORTB
001E2Cr 2                 lda PORTB       ; Read high nibble
001E2Cr 2                 pha             ; and put on stack since it has the busy flag
001E2Cr 2                 lda #RW
001E2Cr 2                 sta PORTB
001E2Cr 2                 lda #(RW | E)
001E2Cr 2                 sta PORTB
001E2Cr 2                 lda PORTB       ; Read low nibble
001E2Cr 2                 pla             ; Get high nibble off stack
001E2Cr 2                 and #%00001000
001E2Cr 2                 bne lcdbusy
001E2Cr 2               
001E2Cr 2                 lda #RW
001E2Cr 2                 sta PORTB
001E2Cr 2                 lda #%11111111  ; LCD data is output
001E2Cr 2                 sta DDRB
001E2Cr 2                 pla
001E2Cr 2                 rts
001E2Cr 2               
001E2Cr 2               LCDINIT:
001E2Cr 2                 lda #$ff ; Set all pins on port B to output
001E2Cr 2                 sta DDRB
001E2Cr 2               
001E2Cr 2                 lda #%00000011 ; Set 8-bit mode
001E2Cr 2                 sta PORTB
001E2Cr 2                 ora #E
001E2Cr 2                 sta PORTB
001E2Cr 2                 and #%00001111
001E2Cr 2                 sta PORTB
001E2Cr 2               
001E2Cr 2                 lda #%00000011 ; Set 8-bit mode
001E2Cr 2                 sta PORTB
001E2Cr 2                 ora #E
001E2Cr 2                 sta PORTB
001E2Cr 2                 and #%00001111
001E2Cr 2                 sta PORTB
001E2Cr 2               
001E2Cr 2                 lda #%00000011 ; Set 8-bit mode
001E2Cr 2                 sta PORTB
001E2Cr 2                 ora #E
001E2Cr 2                 sta PORTB
001E2Cr 2                 and #%00001111
001E2Cr 2                 sta PORTB
001E2Cr 2               
001E2Cr 2                 ; Okay, now we're really in 8-bit mode.
001E2Cr 2                 ; Command to get to 4-bit mode ought to work now
001E2Cr 2                 lda #%00000010 ; Set 4-bit mode
001E2Cr 2                 sta PORTB
001E2Cr 2                 ora #E
001E2Cr 2                 sta PORTB
001E2Cr 2                 and #%00001111
001E2Cr 2                 sta PORTB
001E2Cr 2               
001E2Cr 2                 lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
001E2Cr 2                 jsr lcd_instruction
001E2Cr 2                 lda #%00001110 ; Display on; cursor on; blink off
001E2Cr 2                 jsr lcd_instruction
001E2Cr 2                 lda #%00000110 ; Increment and shift cursor; don't shift display
001E2Cr 2                 jsr lcd_instruction
001E2Cr 2                 lda #%00000001 ; Clear display
001E2Cr 2                 jsr lcd_instruction
001E2Cr 2                 rts
001E2Cr 2               
001E2Cr 2               
001E2Cr 2               LCDCMD:
001E2Cr 2                 jsr GETBYT
001E2Cr 2                 txa
001E2Cr 2               lcd_instruction:
001E2Cr 2                 jsr lcd_wait
001E2Cr 2                 pha
001E2Cr 2                 lsr
001E2Cr 2                 lsr
001E2Cr 2                 lsr
001E2Cr 2                 lsr            ; Send high 4 bits
001E2Cr 2                 sta PORTB
001E2Cr 2                 ora #E         ; Set E bit to send instruction
001E2Cr 2                 sta PORTB
001E2Cr 2                 eor #E         ; Clear E bit
001E2Cr 2                 sta PORTB
001E2Cr 2                 pla
001E2Cr 2                 and #%00001111 ; Send low 4 bits
001E2Cr 2                 sta PORTB
001E2Cr 2                 ora #E         ; Set E bit to send instruction
001E2Cr 2                 sta PORTB
001E2Cr 2                 eor #E         ; Clear E bit
001E2Cr 2                 sta PORTB
001E2Cr 2                 rts
001E2Cr 2               
001E2Cr 2               LCDPRINT:
001E2Cr 2                 jsr GETBYT
001E2Cr 2                 txa
001E2Cr 2                 jsr lcd_wait
001E2Cr 2                 pha
001E2Cr 2                 lsr
001E2Cr 2                 lsr
001E2Cr 2                 lsr
001E2Cr 2                 lsr             ; Send high 4 bits
001E2Cr 2                 ora #RS         ; Set RS
001E2Cr 2                 sta PORTB
001E2Cr 2                 ora #E          ; Set E bit to send instruction
001E2Cr 2                 sta PORTB
001E2Cr 2                 eor #E          ; Clear E bit
001E2Cr 2                 sta PORTB
001E2Cr 2                 pla
001E2Cr 2                 and #%00001111  ; Send low 4 bits
001E2Cr 2                 ora #RS         ; Set RS
001E2Cr 2                 sta PORTB
001E2Cr 2                 ora #E          ; Set E bit to send instruction
001E2Cr 2                 sta PORTB
001E2Cr 2                 eor #E          ; Clear E bit
001E2Cr 2                 sta PORTB
001E2Cr 2                 rts
001E2Cr 2               
001E2Cr 2               .endif
001E2Cr 2               
001E2Cr 1               
