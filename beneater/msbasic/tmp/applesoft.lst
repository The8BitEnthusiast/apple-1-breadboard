ca65 V2.19 - Git 3dfe03300
Main file   : msbasic.s
Current file: msbasic.s

000000r 1               .feature force_range
000000r 1               .debuginfo +
000000r 1               
000000r 1               .setcpu "6502"
000000r 1               .macpack longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               
000000r 1               .include "defines.s"
000000r 2               .if .def(cbmbasic1)
000000r 2               CBM1 := 1
000000r 2               .include "defines_cbm1.s"
000000r 2               .elseif .def(osi)
000000r 2               OSI := 1
000000r 2               .include "defines_osi.s"
000000r 2               .elseif .def(applesoft)
000000r 2               APPLE := 1
000000r 2               .include "defines_apple.s"
000000r 3               ; configuration
000000r 3               CONFIG_11 := 1
000000r 3               
000000r 3               APPLE_BAD_BYTE := 1
000000r 3               CONFIG_IO_MSB := 1 ; all I/O has bit #7 set
000000r 3               CONFIG_PRINT_CR := 1 ; print CR when line end reached
000000r 3               CONFIG_SAFE_NAMENOTFOUND := 1
000000r 3               CONFIG_SCRTCH_ORDER := 3
000000r 3               
000000r 3               BYTES_PER_ELEMENT := 6 ; XXX override
000000r 3               
000000r 3               ; zero page
000000r 3               ZP_START1 = $00
000000r 3               ZP_START2 = $4F
000000r 3               ZP_START3 = $0D
000000r 3               ZP_START4 = $55
000000r 3               
000000r 3               ;extra ZP variables
000000r 3               USR				:= $000A
000000r 3               
000000r 3               ; inputbuffer
000000r 3               INPUTBUFFER     := $0200
000000r 3               
000000r 3               ; constants
000000r 3               STACK_TOP		:= $F8
000000r 3               SPACE_FOR_GOSUB := $36
000000r 3               CRLF_1 := CR
000000r 3               CRLF_2 := $80
000000r 3               WIDTH			:= 40
000000r 3               WIDTH2			:= 14
000000r 3               
000000r 3               ; memory layout
000000r 3               RAMSTART2	:= $2A00
000000r 3               
000000r 3               ; monitor functions
000000r 3               MONRDKEY        := $FD0C
000000r 3               MONCOUT         := $FDED
000000r 3               LF689			:= $F689
000000r 3               LF800			:= $F800
000000r 3               LF819			:= $F819
000000r 3               LF828			:= $F828
000000r 3               LF864			:= $F864
000000r 3               TEX				:= $FB2F
000000r 3               LFB40			:= $FB40
000000r 3               LFD0C			:= $FD0C
000000r 3               LFD6A			:= $FD6A
000000r 3               LFECD			:= $FECD
000000r 3               LFEFD			:= $FEFD
000000r 3               
000000r 3               
000000r 2               .elseif .def(kb9)
000000r 2               KIM := 1
000000r 2               .include "defines_kim.s"
000000r 2               .elseif .def(cbmbasic2)
000000r 2               CBM2 := 1
000000r 2               .include "defines_cbm2.s"
000000r 2               .elseif .def(kbdbasic)
000000r 2               KBD := 1
000000r 2               .include "defines_kbd.s"
000000r 2               .elseif .def(microtan)
000000r 2               MICROTAN := 1
000000r 2               .include "defines_microtan.s"
000000r 2               .elseif .def(aim65)
000000r 2               AIM65 := 1
000000r 2               .include "defines_aim65.s"
000000r 2               .elseif .def(sym1)
000000r 2               SYM1 := 1
000000r 2               .include "defines_sym1.s"
000000r 2               .elseif .def(eater)
000000r 2               EATER := 1
000000r 2               .include "defines_eater.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_2C
000000r 2               CONFIG_2B := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2B
000000r 2               CONFIG_2A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2A
000000r 2               CONFIG_2 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_2
000000r 2               CONFIG_11A := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11A
000000r 2               CONFIG_11 := 1
000000r 2               .endif
000000r 2               .ifdef CONFIG_11
000000r 2               CONFIG_10A := 1
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_SMALL
000000r 2               BYTES_FP		:= 4
000000r 2               CONFIG_SMALL_ERROR := 1
000000r 2               .else
000000r 2               BYTES_FP		:= 5
000000r 2               .endif
000000r 2               
000000r 2               .ifndef BYTES_PER_ELEMENT
000000r 2               BYTES_PER_ELEMENT := BYTES_FP
000000r 2               .endif
000000r 2               BYTES_PER_VARIABLE := BYTES_FP+2
000000r 2               MANTISSA_BYTES	:= BYTES_FP-1
000000r 2               BYTES_PER_FRAME := 2*BYTES_FP+8
000000r 2               FOR_STACK1		:= 2*BYTES_FP+5
000000r 2               FOR_STACK2		:= BYTES_FP+4
000000r 2               
000000r 2               .ifndef MAX_EXPON
000000r 2               MAX_EXPON = 10
000000r 2               .endif
000000r 2               
000000r 2               STACK           := $0100
000000r 2               .ifndef STACK2
000000r 2               STACK2          := STACK
000000r 2               .endif
000000r 2               
000000r 2               .ifdef INPUTBUFFER
000000r 2                 .if INPUTBUFFER >= $0100
000000r 2               CONFIG_NO_INPUTBUFFER_ZP := 1
000000r 2                 .endif
000000r 2                 .if INPUTBUFFER = $0200
000000r 2               CONFIG_INPUTBUFFER_0200 := 1
000000r 2                 .endif
000000r 2               .endif
000000r 2               INPUTBUFFERX = INPUTBUFFER & $FF00
000000r 2               
000000r 2               CR=13
000000r 2               LF=10
000000r 2               
000000r 2               .ifndef CRLF_1
000000r 2               CRLF_1 := CR
000000r 2               CRLF_2 := LF
000000r 2               .endif
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 1               .include "macros.s"
000000r 2               ; htasc - set the hi bit on the last byte of a string for termination
000000r 2               ; (by Tom Greene)
000000r 2               .macro htasc str
000000r 2               	.repeat	.strlen(str)-1,I
000000r 2               		.byte	.strat(str,I)
000000r 2               	.endrep
000000r 2               	.byte	.strat(str,.strlen(str)-1) | $80
000000r 2               .endmacro
000000r 2               
000000r 2               ; For every token, a byte gets put into segment "DUMMY".
000000r 2               ; This way, we count up with every token. The DUMMY segment
000000r 2               ; doesn't get linked into the binary.
000000r 2               .macro init_token_tables
000000r 2                       .segment "VECTORS"
000000r 2               TOKEN_ADDRESS_TABLE:
000000r 2                       .segment "KEYWORDS"
000000r 2               TOKEN_NAME_TABLE:
000000r 2               		.segment "DUMMY"
000000r 2               DUMMY_START:
000000r 2               .endmacro
000000r 2               
000000r 2               ; optionally define token symbol
000000r 2               ; count up token number
000000r 2               .macro define_token token
000000r 2                       .segment "DUMMY"
000000r 2               		.ifnblank token
000000r 2               			token := <(*-DUMMY_START)+$80
000000r 2               		.endif
000000r 2               		.res 1; count up in any case
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword, optionally define a token symbol
000000r 2               .macro keyword key, token
000000r 2               		.segment "KEYWORDS"
000000r 2               		htasc	key
000000r 2               		define_token token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address (RTS style),
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_rts key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.word	vec-1
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               ; lay down a keyword and an address,
000000r 2               ; optionally define a token symbol
000000r 2               .macro keyword_addr key, vec, token
000000r 2                       .segment "VECTORS"
000000r 2               		.addr	vec
000000r 2               		keyword key, token
000000r 2               .endmacro
000000r 2               
000000r 2               .macro count_tokens
000000r 2                       .segment "DUMMY"
000000r 2               		NUM_TOKENS := <(*-DUMMY_START)
000000r 2               .endmacro
000000r 2               
000000r 2               .macro init_error_table
000000r 2                       .segment "ERROR"
000000r 2               ERROR_MESSAGES:
000000r 2               .endmacro
000000r 2               
000000r 2               .macro define_error error, msg
000000r 2                       .segment "ERROR"
000000r 2               		error := <(*-ERROR_MESSAGES)
000000r 2               		htasc msg
000000r 2               .endmacro
000000r 2               
000000r 2               ;---------------------------------------------
000000r 2               ; set the MSB of every byte of a string
000000r 2               .macro asc80 str
000000r 2               	.repeat	.strlen(str),I
000000r 2               		.byte	.strat(str,I)+$80
000000r 2               	.endrep
000000r 2               .endmacro
000000r 2               
000000r 2               
000000r 1               .include "zeropage.s"
000000r 2               
000000r 2               .feature org_per_seg
000000r 2               .zeropage
000000r 2               
000000r 2               .org ZP_START1
000000  2               
000000  2               GORESTART:
000000  2  xx xx xx     	.res 3
000003  2               GOSTROUT:
000003  2  xx xx xx     	.res 3
000006  2               GOAYINT:
000006  2  xx xx        	.res 2
000008  2               GOGIVEAYF:
000008  2  xx xx        	.res 2
00000A  2               
00000A  2               .org ZP_START2
00004F  2               Z15:
00004F  2  xx           	.res 1
000050  2               .ifndef POSX; allow override
000050  2               POSX:
000050  2               .endif
000050  2  xx           	.res 1
000051  2               .ifndef Z17; allow override
000051  2               Z17:
000051  2               .endif
000051  2  xx           	.res 1
000052  2               .ifndef Z18; allow override
000052  2               Z18:
000052  2               .endif
000052  2  xx           	.res 1
000053  2               LINNUM:
000053  2               .ifndef TXPSV; allow override
000053  2               TXPSV:
000053  2               .endif
000053  2  xx xx        	.res 2
000055  2               .ifndef INPUTBUFFER; allow override
000055  2               INPUTBUFFER:
000055  2               .endif
000055  2               
000055  2               .org ZP_START3
00000D  2               
00000D  2               CHARAC:
00000D  2  xx           	.res 1
00000E  2               ENDCHR:
00000E  2  xx           	.res 1
00000F  2               EOLPNTR:
00000F  2  xx           	.res 1
000010  2               DIMFLG:
000010  2  xx           	.res 1
000011  2               VALTYP:
000011  2               .ifdef CONFIG_SMALL
000011  2               	.res 1
000011  2               .else
000011  2  xx xx        	.res 2
000013  2               .endif
000013  2               DATAFLG:
000013  2  xx           	.res 1
000014  2               SUBFLG:
000014  2  xx           	.res 1
000015  2               INPUTFLG:
000015  2  xx           	.res 1
000016  2               CPRMASK:
000016  2  xx           	.res 1
000017  2               Z14:
000017  2  xx           	.res 1
000018  2               
000018  2               .org ZP_START4
000055  2               
000055  2               TEMPPT:
000055  2  xx           	.res 1
000056  2               LASTPT:
000056  2  xx xx        	.res 2
000058  2               TEMPST:
000058  2  xx xx xx xx  	.res 9
00005C  2  xx xx xx xx  
000060  2  xx           
000061  2               INDEX:
000061  2  xx xx        	.res 2
000063  2               DEST:
000063  2  xx xx        	.res 2
000065  2               RESULT:
000065  2  xx xx xx xx  	.res BYTES_FP
000069  2  xx           
00006A  2               RESULT_LAST = RESULT + BYTES_FP-1
00006A  2               TXTTAB:
00006A  2  xx xx        	.res 2
00006C  2               VARTAB:
00006C  2  xx xx        	.res 2
00006E  2               ARYTAB:
00006E  2  xx xx        	.res 2
000070  2               STREND:
000070  2  xx xx        	.res 2
000072  2               FRETOP:
000072  2  xx xx        	.res 2
000074  2               FRESPC:
000074  2  xx xx        	.res 2
000076  2               MEMSIZ:
000076  2  xx xx        	.res 2
000078  2               CURLIN:
000078  2  xx xx        	.res 2
00007A  2               OLDLIN:
00007A  2  xx xx        	.res 2
00007C  2               OLDTEXT:
00007C  2  xx xx        	.res 2
00007E  2               Z8C:
00007E  2  xx xx        	.res 2
000080  2               DATPTR:
000080  2  xx xx        	.res 2
000082  2               INPTR:
000082  2  xx xx        	.res 2
000084  2               VARNAM:
000084  2  xx xx        	.res 2
000086  2               VARPNT:
000086  2  xx xx        	.res 2
000088  2               FORPNT:
000088  2  xx xx        	.res 2
00008A  2               LASTOP:
00008A  2  xx xx        	.res 2
00008C  2               CPRTYP:
00008C  2  xx           	.res 1
00008D  2               FNCNAM:
00008D  2               TEMP3:
00008D  2  xx xx        	.res 2
00008F  2               DSCPTR:
00008F  2               .ifdef CONFIG_SMALL
00008F  2               		.res 2
00008F  2               .else
00008F  2  xx xx xx     		.res 3
000092  2               .endif
000092  2               DSCLEN:
000092  2  xx xx        	.res 2
000094  2               .ifndef JMPADRS ; allow override
000094  2               JMPADRS			:= DSCLEN + 1
000094  2               .endif
000094  2               Z52:
000094  2  xx           	.res 1
000095  2               ARGEXTENSION:
000095  2               .ifndef CONFIG_SMALL
000095  2  xx           	.res 1
000096  2               .endif
000096  2               TEMP1:
000096  2  xx           	.res 1
000097  2               HIGHDS:
000097  2  xx xx        	.res 2
000099  2               HIGHTR:
000099  2  xx xx        	.res 2
00009B  2               .ifndef CONFIG_SMALL
00009B  2               TEMP2:
00009B  2  xx           	.res 1
00009C  2               .endif
00009C  2               INDX:
00009C  2               TMPEXP:
00009C  2               .ifdef CONFIG_SMALL
00009C  2               TEMP2:
00009C  2               .endif
00009C  2  xx           	.res 1
00009D  2               EXPON:
00009D  2  xx           	.res 1
00009E  2               LOWTR:
00009E  2               .ifndef LOWTRX ; allow override
00009E  2               LOWTRX:
00009E  2               .endif
00009E  2  xx           	.res 1
00009F  2               EXPSGN:
00009F  2  xx           	.res 1
0000A0  2               FAC:
0000A0  2  xx xx xx xx  	.res BYTES_FP
0000A4  2  xx           
0000A5  2               FAC_LAST = FAC + BYTES_FP-1
0000A5  2               FACSIGN:
0000A5  2  xx           	.res 1
0000A6  2               SERLEN:
0000A6  2  xx           	.res 1
0000A7  2               SHIFTSIGNEXT:
0000A7  2  xx           	.res 1
0000A8  2               ARG:
0000A8  2  xx xx xx xx  	.res BYTES_FP
0000AC  2  xx           
0000AD  2               ARG_LAST = ARG + BYTES_FP-1
0000AD  2               ARGSIGN:
0000AD  2  xx           	.res 1
0000AE  2               STRNG1:
0000AE  2  xx xx        	.res 2
0000B0  2               SGNCPR = STRNG1
0000B0  2               FACEXTENSION = STRNG1+1
0000B0  2               STRNG2:
0000B0  2  xx xx        	.res 2
0000B2  2               .ifdef AIM65
0000B2  2               ATN:
0000B2  2               	.res 3
0000B2  2               ZBE:
0000B2  2               	.res 1
0000B2  2               .endif
0000B2  2               .ifdef SYM1
0000B2  2               USR1:
0000B2  2               	.res 3
0000B2  2               USR2:
0000B2  2               	.res 3
0000B2  2               USR3:
0000B2  2               	.res 3
0000B2  2               .endif
0000B2  2               CHRGET:
0000B2  2               TXTPTR = <(GENERIC_TXTPTR-GENERIC_CHRGET + CHRGET)
0000B2  2               CHRGOT = <(GENERIC_CHRGOT-GENERIC_CHRGET + CHRGET)
0000B2  2               CHRGOT2 = <(GENERIC_CHRGOT2-GENERIC_CHRGET + CHRGET)
0000B2  2               RNDSEED = <(GENERIC_RNDSEED-GENERIC_CHRGET + CHRGET)
0000B2  2               
0000B2  2               
0000B2  2               
0000B2  1               
0000B2  1               .include "header.s"
0000B2  2               		.segment "HEADER"
000000r 2               .ifdef KBD
000000r 2                       jmp     LE68C
000000r 2                       .byte   $00,$13,$56
000000r 2               .endif
000000r 2               .ifdef AIM65
000000r 2                       jmp     COLD_START
000000r 2                       jmp     RESTART
000000r 2                       .word   AYINT,GIVAYF
000000r 2               .endif
000000r 2               .ifdef SYM1
000000r 2                       jmp     PR_WRITTEN_BY
000000r 2               .endif
000000r 2               .ifdef EATER
000000r 2                       jmp COLD_START
000000r 2               .endif
000000r 2               
000000r 1               .include "token.s"
000000r 2               		init_token_tables
000000r 2               
000000r 2  rr rr 45 4E  		keyword_rts "END", END
000004r 2  C4 xx        
000001r 2  rr rr 46 4F  		keyword_rts "FOR", FOR
000005r 2  D2 xx        
000002r 2  rr rr 4E 45  		keyword_rts "NEXT", NEXT
000006r 2  58 D4 xx     
000003r 2  rr rr 44 41  		keyword_rts "DATA", DATA
000007r 2  54 C1 xx     
000004r 2               .ifdef CONFIG_FILE
000004r 2               		keyword_rts "INPUT#", INPUTH
000004r 2               .endif
000004r 2  rr rr 49 4E  		keyword_rts "INPUT", INPUT
000008r 2  50 55 D4 xx  
000005r 2  rr rr 44 49  		keyword_rts "DIM", DIM
000009r 2  CD xx        
000006r 2  rr rr 52 45  		keyword_rts "READ", READ
00000Ar 2  41 C4 xx     
000007r 2               .ifdef APPLE
000007r 2  rr rr 50 4C  		keyword_rts "PLT", PLT
00000Br 2  D4 xx        
000008r 2               .else
000008r 2               		keyword_rts "LET", LET
000008r 2               .endif
000008r 2  rr rr 47 4F  		keyword_rts "GOTO", GOTO, TOKEN_GOTO
00000Cr 2  54 CF xx     
000009r 2  rr rr 52 55  		keyword_rts "RUN", RUN
00000Dr 2  CE xx        
00000Ar 2  rr rr 49 C6  		keyword_rts "IF", IF
00000Er 2  xx           
00000Br 2  rr rr 52 45  		keyword_rts "RESTORE", RESTORE
00000Fr 2  53 54 4F 52  
000013r 2  C5 xx        
00000Cr 2  rr rr 47 4F  		keyword_rts "GOSUB", GOSUB, TOKEN_GOSUB
000010r 2  53 55 C2 xx  
00000Dr 2  rr rr 52 45  		keyword_rts "RETURN", POP
000011r 2  54 55 52 CE  
000015r 2  xx           
00000Er 2               .ifdef APPLE
00000Er 2  2E FB 54 45  		keyword_rts "TEX", TEX, TOKEN_REM
000012r 2  D8 xx        
00000Fr 2               .else
00000Fr 2               		keyword_rts "REM", REM, TOKEN_REM
00000Fr 2               .endif
00000Fr 2  rr rr 53 54  		keyword_rts "STOP", STOP
000013r 2  4F D0 xx     
000010r 2  rr rr 4F CE  		keyword_rts "ON", ON
000014r 2  xx           
000011r 2               .ifdef CONFIG_NULL
000011r 2               		keyword_rts "NULL", NULL
000011r 2               .endif
000011r 2               .ifdef KBD
000011r 2               		keyword_rts "PLOD", PLOD
000011r 2               		keyword_rts "PSAV", PSAV
000011r 2               		keyword_rts "VLOD", VLOD
000011r 2               		keyword_rts "VSAV", VSAV
000011r 2               .endif
000011r 2               .ifndef CONFIG_NO_POKE
000011r 2  rr rr 57 41  		keyword_rts "WAIT", WAIT
000015r 2  49 D4 xx     
000012r 2               .endif
000012r 2               .ifndef KBD
000012r 2  rr rr 4C 4F  		keyword_rts "LOAD", LOAD
000016r 2  41 C4 xx     
000013r 2  rr rr 53 41  		keyword_rts "SAVE", SAVE
000017r 2  56 C5 xx     
000014r 2               .endif
000014r 2               .ifdef CONFIG_CBM_ALL
000014r 2               		keyword_rts "VERIFY", VERIFY
000014r 2               .endif
000014r 2  rr rr 44 45  		keyword_rts "DEF", DEF
000018r 2  C6 xx        
000015r 2               .ifdef KBD
000015r 2               		keyword_rts "SLOD", SLOD
000015r 2               .endif
000015r 2               .ifndef CONFIG_NO_POKE
000015r 2  rr rr 50 4F  		keyword_rts "POKE", POKE
000019r 2  4B C5 xx     
000016r 2               .endif
000016r 2               .ifdef CONFIG_FILE
000016r 2               		keyword_rts "PRINT#", PRINTH
000016r 2               .endif
000016r 2  rr rr 50 52  		keyword_rts "PRINT", PRINT, TOKEN_PRINT
00001Ar 2  49 4E D4 xx  
000017r 2  rr rr 43 4F  		keyword_rts "CONT", CONT
00001Br 2  4E D4 xx     
000018r 2  rr rr 4C 49  		keyword_rts "LIST", LIST
00001Cr 2  53 D4 xx     
000019r 2               .ifdef CONFIG_CBM_ALL
000019r 2               		keyword_rts "CLR", CLEAR
000019r 2               .else
000019r 2  rr rr 43 4C  		keyword_rts "CLEAR", CLEAR
00001Dr 2  45 41 D2 xx  
00001Ar 2               .endif
00001Ar 2               .ifdef CONFIG_FILE
00001Ar 2               		keyword_rts "CMD", CMD
00001Ar 2               		keyword_rts "SYS", SYS
00001Ar 2               		keyword_rts "OPEN", OPEN
00001Ar 2               		keyword_rts "CLOSE", CLOSE
00001Ar 2               .endif
00001Ar 2               .ifndef CONFIG_SMALL
00001Ar 2  rr rr 47 45  		keyword_rts "GET", GET
00001Er 2  D4 xx        
00001Br 2               .endif
00001Br 2               .ifdef KBD
00001Br 2               		keyword_rts "PRT", PRT
00001Br 2               .endif
00001Br 2  rr rr 4E 45  		keyword_rts "NEW", NEW
00001Fr 2  D7 xx        
00001Cr 2               .ifdef EATER
00001Cr 2               		keyword_rts "LCDCMD", LCDCMD
00001Cr 2               		keyword_rts "LCDPRINT", LCDPRINT
00001Cr 2               .endif
00001Cr 2               
00001Cr 2               		count_tokens
00001Cr 2               
00001Cr 2  54 41 42 A8  		keyword	"TAB(", TOKEN_TAB
000020r 2  xx           
00001Dr 2  54 CF xx     		keyword	"TO", TOKEN_TO
00001Er 2  46 CE xx     		keyword	"FN", TOKEN_FN
00001Fr 2  53 50 43 A8  		keyword	"SPC(", TOKEN_SPC
000023r 2  xx           
000020r 2  54 48 45 CE  		keyword	"THEN", TOKEN_THEN
000024r 2  xx           
000021r 2  4E 4F D4 xx  		keyword	"NOT", TOKEN_NOT
000022r 2  53 54 45 D0  		keyword	"STEP", TOKEN_STEP
000026r 2  xx           
000023r 2  AB xx        		keyword	"+", TOKEN_PLUS
000024r 2  AD xx        		keyword	"-", TOKEN_MINUS
000025r 2  AA xx        		keyword	"*"
000026r 2  AF xx        		keyword	"/"
000027r 2               .ifdef KBD
000027r 2               		keyword	"#"
000027r 2               .else
000027r 2  DE xx        		keyword	"^"
000028r 2               .endif
000028r 2  41 4E C4 xx  		keyword	"AND"
000029r 2  4F D2 xx     		keyword	"OR"
00002Ar 2  BE xx        		keyword	">", TOKEN_GREATER
00002Br 2  BD xx        		keyword	"=", TOKEN_EQUAL
00002Cr 2  BC xx        		keyword	"<"
00002Dr 2               
00002Dr 2                       .segment "VECTORS"
000038r 2               UNFNC:
000038r 2               
000038r 2  rr rr 53 47  		keyword_addr "SGN", SGN, TOKEN_SGN
00003Cr 2  CE xx        
00002Er 2  rr rr 49 4E  		keyword_addr "INT", INT
000032r 2  D4 xx        
00002Fr 2  rr rr 41 42  		keyword_addr "ABS", ABS
000033r 2  D3 xx        
000030r 2               .ifdef KBD
000030r 2               		keyword_addr "VER", VER
000030r 2               .endif
000030r 2               .ifndef CONFIG_NO_POKE
000030r 2                 .ifdef CONFIG_RAM
000030r 2               		keyword_addr "USR", IQERR
000030r 2                 .else
000030r 2  0A 00 55 53  		keyword_addr "USR", USR, TOKEN_USR
000034r 2  D2 xx        
000031r 2                 .endif
000031r 2               .endif
000031r 2  rr rr 46 52  		keyword_addr "FRE", FRE
000035r 2  C5 xx        
000032r 2  rr rr 50 4F  		keyword_addr "POS", POS
000036r 2  D3 xx        
000033r 2  rr rr 53 51  		keyword_addr "SQR", SQR
000037r 2  D2 xx        
000034r 2  rr rr 52 4E  		keyword_addr "RND", RND
000038r 2  C4 xx        
000035r 2  rr rr 4C 4F  		keyword_addr "LOG", LOG
000039r 2  C7 xx        
000036r 2  rr rr 45 58  		keyword_addr "EXP", EXP
00003Ar 2  D0 xx        
000037r 2               .segment "VECTORS"
00004Cr 2               UNFNC_COS:
00004Cr 2  rr rr 43 4F  		keyword_addr "COS", COS
000050r 2  D3 xx        
000038r 2               .segment "VECTORS"
00004Er 2               UNFNC_SIN:
00004Er 2  rr rr 53 49  		keyword_addr "SIN", SIN
000052r 2  CE xx        
000039r 2               .segment "VECTORS"
000050r 2               UNFNC_TAN:
000050r 2  rr rr 54 41  		keyword_addr "TAN", TAN
000054r 2  CE xx        
00003Ar 2               .segment "VECTORS"
000052r 2               UNFNC_ATN:
000052r 2  rr rr 41 54  		keyword_addr "ATN", ATN
000056r 2  CE xx        
00003Br 2               .ifdef KBD
00003Br 2               		keyword_addr "GETC", GETC
00003Br 2               .endif
00003Br 2               .ifndef CONFIG_NO_POKE
00003Br 2  rr rr 50 45  		keyword_addr "PEEK", PEEK
00003Fr 2  45 CB xx     
00003Cr 2               .endif
00003Cr 2  rr rr 4C 45  		keyword_addr "LEN", LEN
000040r 2  CE xx        
00003Dr 2  rr rr 53 54  		keyword_addr "STR$", STR
000041r 2  52 A4 xx     
00003Er 2  rr rr 56 41  		keyword_addr "VAL", VAL
000042r 2  CC xx        
00003Fr 2  rr rr 41 53  		keyword_addr "ASC", ASC
000043r 2  C3 xx        
000040r 2  rr rr 43 48  		keyword_addr "CHR$", CHRSTR
000044r 2  52 A4 xx     
000041r 2  rr rr 4C 45  		keyword_addr "LEFT$", LEFTSTR, TOKEN_LEFTSTR
000045r 2  46 54 A4 xx  
000042r 2  rr rr 52 49  		keyword_addr "RIGHT$", RIGHTSTR
000046r 2  47 48 54 A4  
00004Ar 2  xx           
000043r 2  rr rr 4D 49  		keyword_addr "MID$", MIDSTR
000047r 2  44 A4 xx     
000044r 2               .ifdef CONFIG_2
000044r 2               		keyword	"GO", TOKEN_GO
000044r 2               .endif
000044r 2                       .segment "KEYWORDS"
0000DEr 2  00           		.byte   0
0000DFr 2               
0000DFr 2                       .segment "VECTORS"
000066r 2               MATHTBL:
000066r 2  79                   .byte   $79
000067r 2  rr rr                .word   FADDT-1
000069r 2  79                   .byte   $79
00006Ar 2  rr rr                .word   FSUBT-1
00006Cr 2  7B                   .byte   $7B
00006Dr 2  rr rr                .word   FMULTT-1
00006Fr 2  7B                   .byte   $7B
000070r 2  rr rr                .word   FDIVT-1
000072r 2  7F                   .byte   $7F
000073r 2  rr rr                .word   FPWRT-1
000075r 2  50                   .byte   $50
000076r 2  rr rr                .word   TAND-1
000078r 2  46                   .byte   $46
000079r 2  rr rr                .word   OR-1
00007Br 2  7D                   .byte   $7D
00007Cr 2  rr rr                .word   NEGOP-1
00007Er 2  5A                   .byte   $5A
00007Fr 2  rr rr                .word   EQUOP-1
000081r 2  64                   .byte   $64
000082r 2  rr rr                .word   RELOPS-1
000084r 2               
000084r 1               .include "error.s"
000084r 2               init_error_table
000000r 2               
000000r 2               .ifdef CONFIG_SMALL_ERROR
000000r 2               define_error ERR_NOFOR, "NF"
000000r 2               define_error ERR_SYNTAX, "SN"
000000r 2               define_error ERR_NOGOSUB, "RG"
000000r 2               define_error ERR_NODATA, "OD"
000000r 2               define_error ERR_ILLQTY, "FC"
000000r 2               define_error ERR_OVERFLOW, "OV"
000000r 2               define_error ERR_MEMFULL, "OM"
000000r 2               define_error ERR_UNDEFSTAT, "US"
000000r 2               define_error ERR_BADSUBS, "BS"
000000r 2               define_error ERR_REDIMD, "DD"
000000r 2               define_error ERR_ZERODIV, "/0"
000000r 2               define_error ERR_ILLDIR, "ID"
000000r 2               define_error ERR_BADTYPE, "TM"
000000r 2               define_error ERR_STRLONG, "LS"
000000r 2               define_error ERR_FRMCPX, "ST"
000000r 2               define_error ERR_CANTCONT, "CN"
000000r 2               define_error ERR_UNDEFFN, "UF"
000000r 2               .else
000000r 2  4E 45 58 54  define_error ERR_NOFOR, "NEXT WITHOUT FOR"
000004r 2  20 57 49 54  
000008r 2  48 4F 55 54  
000010r 2  53 59 4E 54  define_error ERR_SYNTAX, "SYNTAX"
000014r 2  41 D8        
000016r 2  52 45 54 55  define_error ERR_NOGOSUB, "RETURN WITHOUT GOSUB"
00001Ar 2  52 4E 20 57  
00001Er 2  49 54 48 4F  
00002Ar 2  4F 55 54 20  define_error ERR_NODATA, "OUT OF DATA"
00002Er 2  4F 46 20 44  
000032r 2  41 54 C1     
000035r 2  49 4C 4C 45  define_error ERR_ILLQTY, "ILLEGAL QUANTITY"
000039r 2  47 41 4C 20  
00003Dr 2  51 55 41 4E  
000045r 2               .ifdef CBM1
000045r 2               	.byte 0,0,0,0,0
000045r 2               .endif
000045r 2  4F 56 45 52  define_error ERR_OVERFLOW, "OVERFLOW"
000049r 2  46 4C 4F D7  
00004Dr 2  4F 55 54 20  define_error ERR_MEMFULL, "OUT OF MEMORY"
000051r 2  4F 46 20 4D  
000055r 2  45 4D 4F 52  
00005Ar 2  55 4E 44 45  define_error ERR_UNDEFSTAT, "UNDEF'D STATEMENT"
00005Er 2  46 27 44 20  
000062r 2  53 54 41 54  
00006Br 2  42 41 44 20  define_error ERR_BADSUBS, "BAD SUBSCRIPT"
00006Fr 2  53 55 42 53  
000073r 2  43 52 49 50  
000078r 2  52 45 44 49  define_error ERR_REDIMD, "REDIM'D ARRAY"
00007Cr 2  4D 27 44 20  
000080r 2  41 52 52 41  
000085r 2  44 49 56 49  define_error ERR_ZERODIV, "DIVISION BY ZERO"
000089r 2  53 49 4F 4E  
00008Dr 2  20 42 59 20  
000095r 2  49 4C 4C 45  define_error ERR_ILLDIR, "ILLEGAL DIRECT"
000099r 2  47 41 4C 20  
00009Dr 2  44 49 52 45  
0000A3r 2  54 59 50 45  define_error ERR_BADTYPE, "TYPE MISMATCH"
0000A7r 2  20 4D 49 53  
0000ABr 2  4D 41 54 43  
0000B0r 2  53 54 52 49  define_error ERR_STRLONG, "STRING TOO LONG"
0000B4r 2  4E 47 20 54  
0000B8r 2  4F 4F 20 4C  
0000BFr 2               .ifdef CONFIG_FILE
0000BFr 2                 .ifdef CBM1
0000BFr 2               define_error ERR_BADDATA, "BAD DATA"
0000BFr 2                 .else
0000BFr 2               define_error ERR_BADDATA, "FILE DATA"
0000BFr 2                 .endif
0000BFr 2               .endif
0000BFr 2  46 4F 52 4D  define_error ERR_FRMCPX, "FORMULA TOO COMPLEX"
0000C3r 2  55 4C 41 20  
0000C7r 2  54 4F 4F 20  
0000D2r 2  43 41 4E 27  define_error ERR_CANTCONT, "CAN'T CONTINUE"
0000D6r 2  54 20 43 4F  
0000DAr 2  4E 54 49 4E  
0000E0r 2  55 4E 44 45  define_error ERR_UNDEFFN, "UNDEF'D FUNCTION"
0000E4r 2  46 27 44 20  
0000E8r 2  46 55 4E 43  
0000F0r 2               .endif
0000F0r 2               
0000F0r 1               .include "message.s"
0000F0r 2               ; global messages: "error", "in", "ready", "break"
0000F0r 2               
0000F0r 2               .segment "CODE"
000000r 2               
000000r 2               QT_ERROR:
000000r 2               .ifdef KBD
000000r 2                       .byte   " err"
000000r 2               .else
000000r 2                 .ifdef APPLE
000000r 2  20 45 52 52          .byte   " ERR"
000004r 2  07 07        		.byte	$07,$07
000006r 2                 .else
000006r 2                       .byte   " ERROR"
000006r 2                 .endif
000006r 2               .endif
000006r 2  00                   .byte   0
000007r 2               
000007r 2               .ifndef KBD
000007r 2               QT_IN:
000007r 2  20 49 4E 20          .byte   " IN "
00000Br 2  00                   .byte   $00
00000Cr 2               .endif
00000Cr 2               
00000Cr 2               .ifdef KBD
00000Cr 2               		.byte	$54,$D2 ; ???
00000Cr 2               OKPRT:
00000Cr 2               		jsr     PRIMM
00000Cr 2                       .byte   CR,CR,">>",CR,LF
00000Cr 2               		.byte	0
00000Cr 2                       rts
00000Cr 2                       nop
00000Cr 2               .else
00000Cr 2                .ifndef AIM65
00000Cr 2               QT_OK:
00000Cr 2                 .ifdef CONFIG_CBM_ALL
00000Cr 2               		.byte   CR,LF,"READY.",CR,LF
00000Cr 2                 .else
00000Cr 2                   .ifdef APPLE
00000Cr 2               		; binary patch!
00000Cr 2  0D 00 00 4B          .byte   CR,0,0,"K",CR,LF
000010r 2  0D 0A        
000012r 2                   .else
000012r 2               		.byte   CR,LF,"OK",CR,LF
000012r 2                   .endif
000012r 2                 .endif
000012r 2  00           		.byte	0
000013r 2                .endif
000013r 2               .endif
000013r 2               QT_BREAK:
000013r 2               
000013r 2               .ifdef KBD
000013r 2               		.byte	CR,LF," Brk"
000013r 2                       .byte   0
000013r 2                       .byte   $54,$D0 ; ???
000013r 2               .elseif .def(MICROTAN) || .def(AIM65)
000013r 2               		.byte CR,LF," BREAK"
000013r 2                       .byte   0
000013r 2               .else
000013r 2  0D 0A 42 52  		.byte CR,LF,"BREAK"
000017r 2  45 41 4B     
00001Ar 2  00                   .byte   0
00001Br 2               .endif
00001Br 2               
00001Br 1               .include "memory.s"
00001Br 2               ; generic stack and memory management code
00001Br 2               ; this code is identical across all versions of
00001Br 2               ; BASIC
00001Br 2               
00001Br 2               .segment "CODE"
00001Br 2               
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               ; CALLED BY "NEXT" AND "FOR" TO SCAN THROUGH
00001Br 2               ; THE STACK FOR A FRAME WITH THE SAME VARIABLE.
00001Br 2               ;
00001Br 2               ; (FORPNT) = ADDRESS OF VARIABLE IF "FOR" OR "NEXT"
00001Br 2               ; 	= $XXFF IF CALLED FROM "RETURN"
00001Br 2               ; 	<<< BUG: SHOULD BE $FFXX >>>
00001Br 2               ;
00001Br 2               ;	RETURNS .NE. IF VARIABLE NOT FOUND,
00001Br 2               ;	(X) = STACK PNTR AFTER SKIPPING ALL FRAMES
00001Br 2               ;
00001Br 2               ;	.EQ. IF FOUND
00001Br 2               ;	(X) = STACK PNTR OF FRAME FOUND
00001Br 2               ; ----------------------------------------------------------------------------
00001Br 2               GTFORPNT:
00001Br 2  BA                   tsx
00001Cr 2  E8                   inx
00001Dr 2  E8                   inx
00001Er 2  E8                   inx
00001Fr 2  E8                   inx
000020r 2               L2279:
000020r 2  BD 01 01             lda     STACK+1,x
000023r 2  C9 81                cmp     #$81
000025r 2  D0 21                bne     L22A1
000027r 2  A5 89                lda     FORPNT+1
000029r 2  D0 0A                bne     L228E
00002Br 2  BD 02 01             lda     STACK+2,x
00002Er 2  85 88                sta     FORPNT
000030r 2  BD 03 01             lda     STACK+3,x
000033r 2  85 89                sta     FORPNT+1
000035r 2               L228E:
000035r 2  DD 03 01             cmp     STACK+3,x
000038r 2  D0 07                bne     L229A
00003Ar 2  A5 88                lda     FORPNT
00003Cr 2  DD 02 01             cmp     STACK+2,x
00003Fr 2  F0 07                beq     L22A1
000041r 2               L229A:
000041r 2  8A                   txa
000042r 2  18                   clc
000043r 2  69 12                adc     #BYTES_PER_FRAME
000045r 2  AA                   tax
000046r 2  D0 D8                bne     L2279
000048r 2               L22A1:
000048r 2  60                   rts
000049r 2               
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               ; MOVE BLOCK OF MEMORY UP
000049r 2               ;
000049r 2               ; ON ENTRY:
000049r 2               ;	(Y,A) = (HIGHDS) = DESTINATION END+1
000049r 2               ;	(LOWTR) = LOWEST ADDRESS OF SOURCE
000049r 2               ;	(HIGHTR) = HIGHEST SOURCE ADDRESS+1
000049r 2               ; ----------------------------------------------------------------------------
000049r 2               BLTU:
000049r 2  20 rr rr             jsr     REASON
00004Cr 2  85 70                sta     STREND
00004Er 2  84 71                sty     STREND+1
000050r 2               BLTU2:
000050r 2  38                   sec
000051r 2  A5 99                lda     HIGHTR
000053r 2  E5 9E                sbc     LOWTR
000055r 2  85 61                sta     INDEX
000057r 2  A8                   tay
000058r 2  A5 9A                lda     HIGHTR+1
00005Ar 2  E5 9F                sbc     LOWTR+1
00005Cr 2  AA                   tax
00005Dr 2  E8                   inx
00005Er 2  98                   tya
00005Fr 2  F0 23                beq     L22DD
000061r 2  A5 99                lda     HIGHTR
000063r 2  38                   sec
000064r 2  E5 61                sbc     INDEX
000066r 2  85 99                sta     HIGHTR
000068r 2  B0 03                bcs     L22C6
00006Ar 2  C6 9A                dec     HIGHTR+1
00006Cr 2  38                   sec
00006Dr 2               L22C6:
00006Dr 2  A5 97                lda     HIGHDS
00006Fr 2  E5 61                sbc     INDEX
000071r 2  85 97                sta     HIGHDS
000073r 2  B0 08                bcs     L22D6
000075r 2  C6 98                dec     HIGHDS+1
000077r 2  90 04                bcc     L22D6
000079r 2               L22D2:
000079r 2  B1 99                lda     (HIGHTR),y
00007Br 2  91 97                sta     (HIGHDS),y
00007Dr 2               L22D6:
00007Dr 2  88                   dey
00007Er 2  D0 F9                bne     L22D2
000080r 2  B1 99                lda     (HIGHTR),y
000082r 2  91 97                sta     (HIGHDS),y
000084r 2               L22DD:
000084r 2  C6 9A                dec     HIGHTR+1
000086r 2  C6 98                dec     HIGHDS+1
000088r 2  CA                   dex
000089r 2  D0 F2                bne     L22D6
00008Br 2  60                   rts
00008Cr 2               
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               ; CHECK IF ENOUGH ROOM LEFT ON STACK
00008Cr 2               ; FOR "FOR", "GOSUB", OR EXPRESSION EVALUATION
00008Cr 2               ; ----------------------------------------------------------------------------
00008Cr 2               CHKMEM:
00008Cr 2  0A                   asl     a
00008Dr 2  69 36                adc     #SPACE_FOR_GOSUB
00008Fr 2  B0 35                bcs     MEMERR
000091r 2  85 61                sta     INDEX
000093r 2  BA                   tsx
000094r 2  E4 61                cpx     INDEX
000096r 2  90 2E                bcc     MEMERR
000098r 2  60                   rts
000099r 2               
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               ; CHECK IF ENOUGH ROOM BETWEEN ARRAYS AND STRINGS
000099r 2               ; (Y,A) = ADDR ARRAYS NEED TO GROW TO
000099r 2               ; ----------------------------------------------------------------------------
000099r 2               REASON:
000099r 2  C4 73                cpy     FRETOP+1
00009Br 2  90 28                bcc     L231E
00009Dr 2  D0 04                bne     L22FC
00009Fr 2  C5 72                cmp     FRETOP
0000A1r 2  90 22                bcc     L231E
0000A3r 2               L22FC:
0000A3r 2  48                   pha
0000A4r 2  A2 09                ldx     #FAC-TEMP1-1
0000A6r 2  98                   tya
0000A7r 2               L2300:
0000A7r 2  48                   pha
0000A8r 2  B5 96                lda     TEMP1,x
0000AAr 2  CA                   dex
0000ABr 2  10 FA                bpl     L2300
0000ADr 2  20 rr rr             jsr     GARBAG
0000B0r 2  A2 F7                ldx     #TEMP1-FAC+1
0000B2r 2               L230B:
0000B2r 2  68                   pla
0000B3r 2  95 A0                sta     FAC,x
0000B5r 2  E8                   inx
0000B6r 2  30 FA                bmi     L230B
0000B8r 2  68                   pla
0000B9r 2  A8                   tay
0000BAr 2  68                   pla
0000BBr 2  C4 73                cpy     FRETOP+1
0000BDr 2  90 06                bcc     L231E
0000BFr 2  D0 05                bne     MEMERR
0000C1r 2  C5 72                cmp     FRETOP
0000C3r 2  B0 01                bcs     MEMERR
0000C5r 2               L231E:
0000C5r 2  60                   rts
0000C6r 2               
0000C6r 1               .include "program.s"
0000C6r 2               ; error
0000C6r 2               ; line input, line editing
0000C6r 2               ; tokenize
0000C6r 2               ; detokenize
0000C6r 2               ; BASIC program memory management
0000C6r 2               
0000C6r 2               ; MICROTAN has some nonstandard extension to LIST here
0000C6r 2               
0000C6r 2               .segment "CODE"
0000C6r 2               
0000C6r 2               MEMERR:
0000C6r 2  A2 4D                ldx     #ERR_MEMFULL
0000C8r 2               
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ; HANDLE AN ERROR
0000C8r 2               ;
0000C8r 2               ; (X)=OFFSET IN ERROR MESSAGE TABLE
0000C8r 2               ; (ERRFLG) > 128 IF "ON ERR" TURNED ON
0000C8r 2               ; (CURLIN+1) = $FF IF IN DIRECT MODE
0000C8r 2               ; ----------------------------------------------------------------------------
0000C8r 2               ERROR:
0000C8r 2  46 17                lsr     Z14
0000CAr 2               .ifdef CONFIG_FILE
0000CAr 2                       lda     CURDVC    ; output
0000CAr 2                       beq     LC366     ; is screen
0000CAr 2                       jsr     CLRCH     ; otherwise redirect output back to screen
0000CAr 2                       lda     #$00
0000CAr 2                       sta     CURDVC
0000CAr 2               LC366:
0000CAr 2               .endif
0000CAr 2  20 rr rr             jsr     CRDO
0000CDr 2  20 rr rr             jsr     OUTQUES
0000D0r 2               L2329:
0000D0r 2  BD rr rr             lda     ERROR_MESSAGES,x
0000D3r 2               .ifndef CONFIG_SMALL_ERROR
0000D3r 2  48                   pha
0000D4r 2  29 7F                and     #$7F
0000D6r 2               .endif
0000D6r 2  20 rr rr             jsr     OUTDO
0000D9r 2               .ifdef CONFIG_SMALL_ERROR
0000D9r 2                       lda     ERROR_MESSAGES+1,x
0000D9r 2                 .ifdef KBD
0000D9r 2                       and     #$7F
0000D9r 2                 .endif
0000D9r 2                       jsr     OUTDO
0000D9r 2               .else
0000D9r 2  E8                   inx
0000DAr 2  68                   pla
0000DBr 2  10 F3                bpl     L2329
0000DDr 2               .endif
0000DDr 2  20 rr rr             jsr     STKINI
0000E0r 2  A9 rr                lda     #<QT_ERROR
0000E2r 2  A0 rr                ldy     #>QT_ERROR
0000E4r 2               
0000E4r 2               ; ----------------------------------------------------------------------------
0000E4r 2               ; PRINT STRING AT (Y,A)
0000E4r 2               ; PRINT CURRENT LINE # UNLESS IN DIRECT MODE
0000E4r 2               ; FALL INTO WARM RESTART
0000E4r 2               ; ----------------------------------------------------------------------------
0000E4r 2               PRINT_ERROR_LINNUM:
0000E4r 2  20 rr rr             jsr     STROUT
0000E7r 2  A4 79                ldy     CURLIN+1
0000E9r 2  C8                   iny
0000EAr 2  F0 03                beq     RESTART
0000ECr 2  20 rr rr             jsr     INPRT
0000EFr 2               
0000EFr 2               ; ----------------------------------------------------------------------------
0000EFr 2               ; WARM RESTART ENTRY
0000EFr 2               ; ----------------------------------------------------------------------------
0000EFr 2               RESTART:
0000EFr 2               .ifdef KBD
0000EFr 2                       jsr     CRDO
0000EFr 2                       nop
0000EFr 2               L2351X:
0000EFr 2                       jsr     OKPRT
0000EFr 2               L2351:
0000EFr 2                       jsr     INLIN
0000EFr 2               LE28E:
0000EFr 2                       bpl     RESTART
0000EFr 2               .else
0000EFr 2  46 17                lsr     Z14
0000F1r 2                .ifndef AIM65
0000F1r 2  A9 rr                lda     #<QT_OK
0000F3r 2  A0 rr                ldy     #>QT_OK
0000F5r 2                 .ifdef CONFIG_CBM_ALL
0000F5r 2                       jsr     STROUT
0000F5r 2                 .else
0000F5r 2  20 03 00             jsr     GOSTROUT
0000F8r 2                 .endif
0000F8r 2                .else
0000F8r 2                       jsr     GORESTART
0000F8r 2                .endif
0000F8r 2               L2351:
0000F8r 2  20 rr rr             jsr     INLIN
0000FBr 2               .endif
0000FBr 2  86 B9                stx     TXTPTR
0000FDr 2  84 BA                sty     TXTPTR+1
0000FFr 2  20 B2 00             jsr     CHRGET
000102r 2               .ifdef CONFIG_11
000102r 2               ; bug in pre-1.1: CHRGET sets Z on '\0'
000102r 2               ; and ':' - a line starting with ':' in
000102r 2               ; direct mode gets ignored
000102r 2  AA                   tax
000103r 2               .endif
000103r 2               .ifdef KBD
000103r 2                       beq     L2351X
000103r 2               .else
000103r 2  F0 F3                beq     L2351
000105r 2               .endif
000105r 2  A2 FF                ldx     #$FF
000107r 2  86 79                stx     CURLIN+1
000109r 2  90 06                bcc     NUMBERED_LINE
00010Br 2  20 rr rr             jsr     PARSE_INPUT_LINE
00010Er 2  4C rr rr             jmp     NEWSTT2
000111r 2               
000111r 2               ; ----------------------------------------------------------------------------
000111r 2               ; HANDLE NUMBERED LINE
000111r 2               ; ----------------------------------------------------------------------------
000111r 2               NUMBERED_LINE:
000111r 2  20 rr rr             jsr     LINGET
000114r 2  20 rr rr             jsr     PARSE_INPUT_LINE
000117r 2  84 0F                sty     EOLPNTR
000119r 2               .ifdef KBD
000119r 2                       jsr     FNDLIN2
000119r 2                       lda     JMPADRS+1
000119r 2                       sta     LOWTR
000119r 2                       sta     Z96
000119r 2                       lda     JMPADRS+2
000119r 2                       sta     LOWTR+1
000119r 2                       sta     Z96+1
000119r 2                       lda     LINNUM
000119r 2                       sta     L06FE
000119r 2                       lda     LINNUM+1
000119r 2                       sta     L06FE+1
000119r 2                       inc     LINNUM
000119r 2                       bne     LE2D2
000119r 2                       inc     LINNUM+1
000119r 2                       bne     LE2D2
000119r 2                       jmp     SYNERR
000119r 2               LE2D2:
000119r 2                       jsr     LF457
000119r 2                       ldx     #Z96
000119r 2                       jsr     CMPJMPADRS
000119r 2                       bcs     LE2FD
000119r 2               LE2DC:
000119r 2                       ldx     #$00
000119r 2                       lda     (JMPADRS+1,x)
000119r 2                       sta     (Z96,x)
000119r 2                       inc     JMPADRS+1
000119r 2                       bne     LE2E8
000119r 2                       inc     JMPADRS+2
000119r 2               LE2E8:
000119r 2                       inc     Z96
000119r 2                       bne     LE2EE
000119r 2                       inc     Z96+1
000119r 2               LE2EE:
000119r 2                       ldx     #VARTAB
000119r 2                       jsr     CMPJMPADRS
000119r 2                       bne     LE2DC
000119r 2                       lda     Z96
000119r 2                       sta     VARTAB
000119r 2                       lda     Z96+1
000119r 2                       sta     VARTAB+1
000119r 2               LE2FD:
000119r 2                       jsr     SETPTRS
000119r 2                       jsr     LE33D
000119r 2                       lda     INPUTBUFFER
000119r 2               LE306:
000119r 2                       beq     LE28E
000119r 2                       cmp     #$A5
000119r 2                       beq     LE306
000119r 2                       clc
000119r 2               .else
000119r 2  20 rr rr             jsr     FNDLIN
00011Cr 2  90 44                bcc     PUT_NEW_LINE
00011Er 2  A0 01                ldy     #$01
000120r 2  B1 9E                lda     (LOWTR),y
000122r 2  85 62                sta     INDEX+1
000124r 2  A5 6C                lda     VARTAB
000126r 2  85 61                sta     INDEX
000128r 2  A5 9F                lda     LOWTR+1
00012Ar 2  85 64                sta     DEST+1
00012Cr 2  A5 9E                lda     LOWTR
00012Er 2  88                   dey
00012Fr 2  F1 9E                sbc     (LOWTR),y
000131r 2  18                   clc
000132r 2  65 6C                adc     VARTAB
000134r 2  85 6C                sta     VARTAB
000136r 2  85 63                sta     DEST
000138r 2  A5 6D                lda     VARTAB+1
00013Ar 2  69 FF                adc     #$FF
00013Cr 2  85 6D                sta     VARTAB+1
00013Er 2  E5 9F                sbc     LOWTR+1
000140r 2  AA                   tax
000141r 2  38                   sec
000142r 2  A5 9E                lda     LOWTR
000144r 2  E5 6C                sbc     VARTAB
000146r 2  A8                   tay
000147r 2  B0 03                bcs     L23A5
000149r 2  E8                   inx
00014Ar 2  C6 64                dec     DEST+1
00014Cr 2               L23A5:
00014Cr 2  18                   clc
00014Dr 2  65 61                adc     INDEX
00014Fr 2  90 03                bcc     L23AD
000151r 2  C6 62                dec     INDEX+1
000153r 2  18                   clc
000154r 2               L23AD:
000154r 2  B1 61                lda     (INDEX),y
000156r 2  91 63                sta     (DEST),y
000158r 2  C8                   iny
000159r 2  D0 F9                bne     L23AD
00015Br 2  E6 62                inc     INDEX+1
00015Dr 2  E6 64                inc     DEST+1
00015Fr 2  CA                   dex
000160r 2  D0 F2                bne     L23AD
000162r 2               .endif
000162r 2               ; ----------------------------------------------------------------------------
000162r 2               PUT_NEW_LINE:
000162r 2               .ifndef KBD
000162r 2                 .ifdef CONFIG_2
000162r 2                       jsr     SETPTRS
000162r 2                       jsr     LE33D
000162r 2                       lda     INPUTBUFFER
000162r 2                       beq     L2351
000162r 2                       clc
000162r 2                 .else
000162r 2  AD 00 02             lda     INPUTBUFFER
000165r 2  F0 39                beq     FIX_LINKS
000167r 2  A5 76                lda     MEMSIZ
000169r 2  A4 77                ldy     MEMSIZ+1
00016Br 2  85 72                sta     FRETOP
00016Dr 2  84 73                sty     FRETOP+1
00016Fr 2                 .endif
00016Fr 2               .endif
00016Fr 2  A5 6C                lda     VARTAB
000171r 2  85 99                sta     HIGHTR
000173r 2  65 0F                adc     EOLPNTR
000175r 2  85 97                sta     HIGHDS
000177r 2  A4 6D                ldy     VARTAB+1
000179r 2  84 9A                sty     HIGHTR+1
00017Br 2  90 01                bcc     L23D6
00017Dr 2  C8                   iny
00017Er 2               L23D6:
00017Er 2  84 98                sty     HIGHDS+1
000180r 2  20 rr rr             jsr     BLTU
000183r 2               .ifdef CONFIG_INPUTBUFFER_0200
000183r 2  A5 53                lda     LINNUM
000185r 2  A4 54                ldy     LINNUM+1
000187r 2  8D FE 01             sta     INPUTBUFFER-2
00018Ar 2  8C FF 01             sty     INPUTBUFFER-1
00018Dr 2               .endif
00018Dr 2  A5 70                lda     STREND
00018Fr 2  A4 71                ldy     STREND+1
000191r 2  85 6C                sta     VARTAB
000193r 2  84 6D                sty     VARTAB+1
000195r 2  A4 0F                ldy     EOLPNTR
000197r 2  88                   dey
000198r 2               ; ---COPY LINE INTO PROGRAM-------
000198r 2               L23E6:
000198r 2  B9 FC 01             lda     INPUTBUFFER-4,y
00019Br 2  91 9E                sta     (LOWTR),y
00019Dr 2  88                   dey
00019Er 2  10 F8                bpl     L23E6
0001A0r 2               
0001A0r 2               ; ----------------------------------------------------------------------------
0001A0r 2               ; CLEAR ALL VARIABLES
0001A0r 2               ; RE-ESTABLISH ALL FORWARD LINKS
0001A0r 2               ; ----------------------------------------------------------------------------
0001A0r 2               FIX_LINKS:
0001A0r 2  20 rr rr             jsr     SETPTRS
0001A3r 2               .ifdef CONFIG_2
0001A3r 2                       jsr     LE33D
0001A3r 2                       jmp     L2351
0001A3r 2               LE33D:
0001A3r 2               .endif
0001A3r 2  A5 6A                lda     TXTTAB
0001A5r 2  A4 6B                ldy     TXTTAB+1
0001A7r 2  85 61                sta     INDEX
0001A9r 2  84 62                sty     INDEX+1
0001ABr 2  18                   clc
0001ACr 2               L23FA:
0001ACr 2  A0 01                ldy     #$01
0001AEr 2  B1 61                lda     (INDEX),y
0001B0r 2               .ifdef CONFIG_2
0001B0r 2                       beq     RET3
0001B0r 2               .else
0001B0r 2  D0 03 4C rr          jeq     L2351
0001B4r 2  rr           
0001B5r 2               .endif
0001B5r 2  A0 04                ldy     #$04
0001B7r 2               L2405:
0001B7r 2  C8                   iny
0001B8r 2  B1 61                lda     (INDEX),y
0001BAr 2  D0 FB                bne     L2405
0001BCr 2  C8                   iny
0001BDr 2  98                   tya
0001BEr 2  65 61                adc     INDEX
0001C0r 2  AA                   tax
0001C1r 2  A0 00                ldy     #$00
0001C3r 2  91 61                sta     (INDEX),y
0001C5r 2  A5 62                lda     INDEX+1
0001C7r 2  69 00                adc     #$00
0001C9r 2  C8                   iny
0001CAr 2  91 61                sta     (INDEX),y
0001CCr 2  86 61                stx     INDEX
0001CEr 2  85 62                sta     INDEX+1
0001D0r 2  90 DA                bcc     L23FA	; always
0001D2r 2               
0001D2r 2               ; ----------------------------------------------------------------------------
0001D2r 2               .ifdef KBD
0001D2r 2               .include "kbd_loadsave.s"
0001D2r 2               .endif
0001D2r 2               
0001D2r 2               .ifdef CONFIG_2
0001D2r 2               ; !!! kbd_loadsave.s requires an RTS here!
0001D2r 2               RET3:
0001D2r 2               		rts
0001D2r 2               .endif
0001D2r 2               
0001D2r 2               .include "inline.s"
0001D2r 3               .segment "CODE"
0001D2r 3               
0001D2r 3               .ifndef CONFIG_NO_INPUTBUFFER_ZP
0001D2r 3               L2420:
0001D2r 3                 .ifdef OSI
0001D2r 3                       jsr     OUTDO
0001D2r 3                 .endif
0001D2r 3                       dex
0001D2r 3                 .ifdef AIM65
0001D2r 3                       bmi     L2423
0001D2r 3                       jsr     PSLS
0001D2r 3                       jmp     INLIN2
0001D2r 3               LB35F:
0001D2r 3                       jsr     OUTDO
0001D2r 3                 .else
0001D2r 3                       bpl     INLIN2
0001D2r 3                 .endif
0001D2r 3               L2423:
0001D2r 3                 .ifdef OSI
0001D2r 3                       jsr     OUTDO
0001D2r 3                 .endif
0001D2r 3                       jsr     CRDO
0001D2r 3               .endif
0001D2r 3               
0001D2r 3               ; ----------------------------------------------------------------------------
0001D2r 3               ; READ A LINE, AND STRIP OFF SIGN BITS
0001D2r 3               ; ----------------------------------------------------------------------------
0001D2r 3               .ifndef KBD
0001D2r 3               INLIN:
0001D2r 3                 .ifdef APPLE
0001D2r 3  A2 DD                ldx     #$DD
0001D4r 3               INLIN1:
0001D4r 3  86 33                stx     $33
0001D6r 3  20 rr rr             jsr     L2900
0001D9r 3  E0 EF                cpx     #$EF
0001DBr 3  B0 02                bcs     L0C32
0001DDr 3  A2 EF                ldx     #$EF
0001DFr 3               L0C32:
0001DFr 3  A9 00                lda     #$00
0001E1r 3  9D 00 02             sta     INPUTBUFFER,x
0001E4r 3  A2 FF                ldx     #<INPUTBUFFER-1
0001E6r 3  A0 01                ldy     #>INPUTBUFFER-1
0001E8r 3  60                   rts
0001E9r 3                 .endif
0001E9r 3               
0001E9r 3                 .ifndef APPLE
0001E9r 3                       ldx     #$00
0001E9r 3               INLIN2:
0001E9r 3                       jsr     GETLN
0001E9r 3                   .ifdef AIM65
0001E9r 3                       cmp     #$1A
0001E9r 3                       bne     INLINAIM
0001E9r 3                       jsr     DU13
0001E9r 3                       jmp     INLIN
0001E9r 3               INLINAIM:
0001E9r 3                   .endif
0001E9r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E9r 3                       cmp     #$07
0001E9r 3                       beq     L2443
0001E9r 3                   .endif
0001E9r 3                       cmp     #$0D
0001E9r 3                       beq     L2453
0001E9r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E9r 3                       cmp     #$20
0001E9r 3                     .ifdef AIM65
0001E9r 3                       bcc     L244E
0001E9r 3                     .else
0001E9r 3                       bcc     INLIN2
0001E9r 3                     .endif
0001E9r 3                     .ifdef MICROTAN
0001E9r 3                       cmp     #$80
0001E9r 3                     .else
0001E9r 3                       .ifdef AIM65
0001E9r 3                       cmp     #$7F
0001E9r 3                       beq     L2420
0001E9r 3                       .endif
0001E9r 3                       cmp     #$7D
0001E9r 3                     .endif
0001E9r 3                       bcs     INLIN2
0001E9r 3                       cmp     #$40 ; @
0001E9r 3                     .ifdef AIM65
0001E9r 3                       beq     LB35F
0001E9r 3                     .else
0001E9r 3                       beq     L2423
0001E9r 3                     .ifdef MICROTAN
0001E9r 3                       cmp     #$7F ; DEL
0001E9r 3                     .else
0001E9r 3                       cmp     #$5F ; _
0001E9r 3                     .endif
0001E9r 3                       beq     L2420
0001E9r 3                     .endif
0001E9r 3               L2443:
0001E9r 3                     .ifdef MICROTAN
0001E9r 3                       cpx     #$4F
0001E9r 3                     .else
0001E9r 3                       cpx     #$47
0001E9r 3                     .endif
0001E9r 3                       bcs     L244C
0001E9r 3                   .endif
0001E9r 3                       sta     INPUTBUFFER,x
0001E9r 3                       inx
0001E9r 3                   .if .def(OSI) || .def(AIM65)
0001E9r 3                       .byte   $2C
0001E9r 3                   .else
0001E9r 3                       bne     INLIN2
0001E9r 3                   .endif
0001E9r 3               L244C:
0001E9r 3                   .ifndef CONFIG_NO_LINE_EDITING
0001E9r 3                       lda     #$07 ; BEL
0001E9r 3               L244E:
0001E9r 3                       jsr     OUTDO
0001E9r 3                       bne     INLIN2
0001E9r 3                   .endif
0001E9r 3               L2453:
0001E9r 3                       jmp     L29B9
0001E9r 3                 .endif
0001E9r 3               .endif
0001E9r 3               
0001E9r 3               .ifndef KBD
0001E9r 3                 .ifndef APPLE
0001E9r 3               GETLN:
0001E9r 3                   .ifdef CONFIG_FILE
0001E9r 3                       jsr     CHRIN
0001E9r 3                       ldy     CURDVC
0001E9r 3                       bne     L2465
0001E9r 3                   .else
0001E9r 3                       jsr     MONRDKEY
0001E9r 3                   .endif
0001E9r 3                   .ifdef OSI
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       nop
0001E9r 3                       and     #$7F
0001E9r 3                   .endif
0001E9r 3                 .endif
0001E9r 3                 .ifdef APPLE
0001E9r 3               RDKEY:
0001E9r 3  20 0C FD             jsr     LFD0C
0001ECr 3  29 7F                and     #$7F
0001EEr 3                 .endif
0001EEr 3                   .ifdef SYM1
0001EEr 3                       cmp     #$14
0001EEr 3                   .else
0001EEr 3  C9 0F                cmp     #$0F
0001F0r 3                   .endif
0001F0r 3  D0 08                bne     L2465
0001F2r 3  48                   pha
0001F3r 3  A5 17                lda     Z14
0001F5r 3  49 FF                eor     #$FF
0001F7r 3  85 17                sta     Z14
0001F9r 3  68                   pla
0001FAr 3               L2465:
0001FAr 3  60                   rts
0001FBr 3               .endif
0001FBr 3               
0001FBr 2               
0001FBr 2               ; ----------------------------------------------------------------------------
0001FBr 2               ; TOKENIZE THE INPUT LINE
0001FBr 2               ; ----------------------------------------------------------------------------
0001FBr 2               PARSE_INPUT_LINE:
0001FBr 2  A6 B9                ldx     TXTPTR
0001FDr 2  A0 04                ldy     #$04
0001FFr 2  84 13                sty     DATAFLG
000201r 2               L246C:
000201r 2  BD 00 02             lda     INPUTBUFFERX,x
000204r 2               .ifdef CONFIG_CBM_ALL
000204r 2                       bpl     LC49E
000204r 2                       cmp     #$FF
000204r 2                       beq     L24AC
000204r 2                       inx
000204r 2                       bne     L246C
000204r 2               LC49E:
000204r 2               .endif
000204r 2  C9 20                cmp     #$20
000206r 2  F0 3B                beq     L24AC
000208r 2  85 0E                sta     ENDCHR
00020Ar 2  C9 22                cmp     #$22
00020Cr 2  F0 5A                beq     L24D0
00020Er 2  24 13                bit     DATAFLG
000210r 2  70 31                bvs     L24AC
000212r 2  C9 3F                cmp     #$3F
000214r 2  D0 04                bne     L2484
000216r 2  A9 96                lda     #TOKEN_PRINT
000218r 2  D0 29                bne     L24AC
00021Ar 2               L2484:
00021Ar 2  C9 30                cmp     #$30
00021Cr 2  90 04                bcc     L248C
00021Er 2  C9 3C                cmp     #$3C
000220r 2  90 21                bcc     L24AC
000222r 2               ; ----------------------------------------------------------------------------
000222r 2               ; SEARCH TOKEN NAME TABLE FOR MATCH STARTING
000222r 2               ; WITH CURRENT CHAR FROM INPUT LINE
000222r 2               ; ----------------------------------------------------------------------------
000222r 2               L248C:
000222r 2  84 B0                sty     STRNG2
000224r 2  A0 00                ldy     #$00
000226r 2  84 0F                sty     EOLPNTR
000228r 2  88                   dey
000229r 2  86 B9                stx     TXTPTR
00022Br 2  CA                   dex
00022Cr 2               L2496:
00022Cr 2  C8                   iny
00022Dr 2               L2497:
00022Dr 2  E8                   inx
00022Er 2               L2498:
00022Er 2               .ifdef KBD
00022Er 2                       jsr     GET_UPPER
00022Er 2               .else
00022Er 2  BD 00 02             lda     INPUTBUFFERX,x
000231r 2                 .ifndef CONFIG_2
000231r 2  C9 20                cmp     #$20
000233r 2  F0 F8                beq     L2497
000235r 2                 .endif
000235r 2               .endif
000235r 2  38                   sec
000236r 2  F9 rr rr             sbc     TOKEN_NAME_TABLE,y
000239r 2  F0 F1                beq     L2496
00023Br 2  C9 80                cmp     #$80
00023Dr 2  D0 30                bne     L24D7
00023Fr 2  05 0F                ora     EOLPNTR
000241r 2               ; ----------------------------------------------------------------------------
000241r 2               ; STORE CHARACTER OR TOKEN IN OUTPUT LINE
000241r 2               ; ----------------------------------------------------------------------------
000241r 2               L24AA:
000241r 2  A4 B0                ldy     STRNG2
000243r 2               L24AC:
000243r 2  E8                   inx
000244r 2  C8                   iny
000245r 2  99 FB 01             sta     INPUTBUFFER-5,y
000248r 2  B9 FB 01             lda     INPUTBUFFER-5,y
00024Br 2  F0 36                beq     L24EA
00024Dr 2  38                   sec
00024Er 2  E9 3A                sbc     #$3A
000250r 2  F0 04                beq     L24BF
000252r 2  C9 49                cmp     #$49
000254r 2  D0 02                bne     L24C1
000256r 2               L24BF:
000256r 2  85 13                sta     DATAFLG
000258r 2               L24C1:
000258r 2  38                   sec
000259r 2  E9 54                sbc     #TOKEN_REM-':'
00025Br 2  D0 A4                bne     L246C
00025Dr 2  85 0E                sta     ENDCHR
00025Fr 2               ; ----------------------------------------------------------------------------
00025Fr 2               ; HANDLE LITERAL (BETWEEN QUOTES) OR REMARK,
00025Fr 2               ; BY COPYING CHARS UP TO ENDCHR.
00025Fr 2               ; ----------------------------------------------------------------------------
00025Fr 2               L24C8:
00025Fr 2  BD 00 02             lda     INPUTBUFFERX,x
000262r 2  F0 DF                beq     L24AC
000264r 2  C5 0E                cmp     ENDCHR
000266r 2  F0 DB                beq     L24AC
000268r 2               L24D0:
000268r 2  C8                   iny
000269r 2  99 FB 01             sta     INPUTBUFFER-5,y
00026Cr 2  E8                   inx
00026Dr 2  D0 F0                bne     L24C8
00026Fr 2               ; ----------------------------------------------------------------------------
00026Fr 2               ; ADVANCE POINTER TO NEXT TOKEN NAME
00026Fr 2               ; ----------------------------------------------------------------------------
00026Fr 2               L24D7:
00026Fr 2  A6 B9                ldx     TXTPTR
000271r 2  E6 0F                inc     EOLPNTR
000273r 2               L24DB:
000273r 2  C8                   iny
000274r 2  B9 rr rr             lda     MATHTBL+28+1,y
000277r 2  10 FA                bpl     L24DB
000279r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
00027Cr 2  D0 B0                bne     L2498
00027Er 2  BD 00 02             lda     INPUTBUFFERX,x
000281r 2  10 BE                bpl     L24AA
000283r 2               ; ---END OF LINE------------------
000283r 2               L24EA:
000283r 2  99 FD 01             sta     INPUTBUFFER-3,y
000286r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000286r 2  C6 BA                dec     TXTPTR+1
000288r 2               .endif
000288r 2  A9 FF                lda     #<INPUTBUFFER-1
00028Ar 2  85 B9                sta     TXTPTR
00028Cr 2  60                   rts
00028Dr 2               
00028Dr 2               ; ----------------------------------------------------------------------------
00028Dr 2               ; SEARCH FOR LINE
00028Dr 2               ;
00028Dr 2               ; (LINNUM) = LINE # TO FIND
00028Dr 2               ; IF NOT FOUND:  CARRY = 0
00028Dr 2               ;	LOWTR POINTS AT NEXT LINE
00028Dr 2               ; IF FOUND:      CARRY = 1
00028Dr 2               ;	LOWTR POINTS AT LINE
00028Dr 2               ; ----------------------------------------------------------------------------
00028Dr 2               FNDLIN:
00028Dr 2               .ifdef KBD
00028Dr 2                       jsr     CHRGET
00028Dr 2                       jmp     LE444
00028Dr 2               LE440:
00028Dr 2                       php
00028Dr 2                       jsr     LINGET
00028Dr 2               LE444:
00028Dr 2                       jsr     LF457
00028Dr 2                       ldx     #$FF
00028Dr 2                       plp
00028Dr 2                       beq     LE464
00028Dr 2                       jsr     CHRGOT
00028Dr 2                       beq     L2520
00028Dr 2                       cmp     #$A5
00028Dr 2                       bne     L2520
00028Dr 2                       jsr     CHRGET
00028Dr 2                       beq     LE464
00028Dr 2                       bcs     LE461
00028Dr 2                       jsr     LINGET
00028Dr 2                       beq     L2520
00028Dr 2               LE461:
00028Dr 2                       jmp     SYNERR
00028Dr 2               LE464:
00028Dr 2                       stx     LINNUM
00028Dr 2                       stx     LINNUM+1
00028Dr 2               .else
00028Dr 2  A5 6A                lda     TXTTAB
00028Fr 2  A6 6B                ldx     TXTTAB+1
000291r 2               FL1:
000291r 2  A0 01                ldy     #$01
000293r 2  85 9E                sta     LOWTR
000295r 2  86 9F                stx     LOWTR+1
000297r 2  B1 9E                lda     (LOWTR),y
000299r 2  F0 1F                beq     L251F
00029Br 2  C8                   iny
00029Cr 2  C8                   iny
00029Dr 2  A5 54                lda     LINNUM+1
00029Fr 2  D1 9E                cmp     (LOWTR),y
0002A1r 2  90 18                bcc     L2520
0002A3r 2  F0 03                beq     L250D
0002A5r 2  88                   dey
0002A6r 2  D0 09                bne     L2516
0002A8r 2               L250D:
0002A8r 2  A5 53                lda     LINNUM
0002AAr 2  88                   dey
0002ABr 2  D1 9E                cmp     (LOWTR),y
0002ADr 2  90 0C                bcc     L2520
0002AFr 2  F0 0A                beq     L2520
0002B1r 2               L2516:
0002B1r 2  88                   dey
0002B2r 2  B1 9E                lda     (LOWTR),y
0002B4r 2  AA                   tax
0002B5r 2  88                   dey
0002B6r 2  B1 9E                lda     (LOWTR),y
0002B8r 2  B0 D7                bcs     FL1
0002BAr 2               L251F:
0002BAr 2  18                   clc
0002BBr 2               .endif
0002BBr 2               L2520:
0002BBr 2  60                   rts
0002BCr 2               
0002BCr 2               ; ----------------------------------------------------------------------------
0002BCr 2               ; "NEW" STATEMENT
0002BCr 2               ; ----------------------------------------------------------------------------
0002BCr 2               NEW:
0002BCr 2  D0 FD                bne     L2520
0002BEr 2               SCRTCH:
0002BEr 2  A9 00                lda     #$00
0002C0r 2  A8                   tay
0002C1r 2  91 6A                sta     (TXTTAB),y
0002C3r 2  C8                   iny
0002C4r 2  91 6A                sta     (TXTTAB),y
0002C6r 2  A5 6A                lda     TXTTAB
0002C8r 2               .ifdef CONFIG_2
0002C8r 2               		clc
0002C8r 2               .endif
0002C8r 2  69 02                adc     #$02
0002CAr 2  85 6C                sta     VARTAB
0002CCr 2  A5 6B                lda     TXTTAB+1
0002CEr 2  69 00                adc     #$00
0002D0r 2  85 6D                sta     VARTAB+1
0002D2r 2               ; ----------------------------------------------------------------------------
0002D2r 2               SETPTRS:
0002D2r 2  20 rr rr             jsr     STXTPT
0002D5r 2               .ifdef CONFIG_11A
0002D5r 2                       lda     #$00
0002D5r 2               
0002D5r 2               ; ----------------------------------------------------------------------------
0002D5r 2               ; "CLEAR" STATEMENT
0002D5r 2               ; ----------------------------------------------------------------------------
0002D5r 2               CLEAR:
0002D5r 2                       bne     L256A
0002D5r 2               .endif
0002D5r 2               CLEARC:
0002D5r 2               .ifdef KBD
0002D5r 2                       lda     #<CONST_MEMSIZ
0002D5r 2                       ldy     #>CONST_MEMSIZ
0002D5r 2               .else
0002D5r 2  A5 76                lda     MEMSIZ
0002D7r 2  A4 77                ldy     MEMSIZ+1
0002D9r 2               .endif
0002D9r 2  85 72                sta     FRETOP
0002DBr 2  84 73                sty     FRETOP+1
0002DDr 2               .ifdef CONFIG_CBM_ALL
0002DDr 2                       jsr     CLALL
0002DDr 2               .endif
0002DDr 2  A5 6C                lda     VARTAB
0002DFr 2  A4 6D                ldy     VARTAB+1
0002E1r 2  85 6E                sta     ARYTAB
0002E3r 2  84 6F                sty     ARYTAB+1
0002E5r 2  85 70                sta     STREND
0002E7r 2  84 71                sty     STREND+1
0002E9r 2  20 rr rr             jsr     RESTORE
0002ECr 2               ; ----------------------------------------------------------------------------
0002ECr 2               STKINI:
0002ECr 2  A2 58                ldx     #TEMPST
0002EEr 2  86 55                stx     TEMPPT
0002F0r 2  68                   pla
0002F1r 2               .ifdef CONFIG_2
0002F1r 2               		tay
0002F1r 2               .else
0002F1r 2  8D F9 01             sta     STACK+STACK_TOP+1
0002F4r 2               .endif
0002F4r 2  68                   pla
0002F5r 2               .ifndef CONFIG_2
0002F5r 2  8D FA 01             sta     STACK+STACK_TOP+2
0002F8r 2               .endif
0002F8r 2  A2 F8                ldx     #STACK_TOP
0002FAr 2  9A                   txs
0002FBr 2               .ifdef CONFIG_2
0002FBr 2                       pha
0002FBr 2                       tya
0002FBr 2                       pha
0002FBr 2               .endif
0002FBr 2  A9 00                lda     #$00
0002FDr 2  85 7D                sta     OLDTEXT+1
0002FFr 2  85 14                sta     SUBFLG
000301r 2               L256A:
000301r 2  60                   rts
000302r 2               
000302r 2               ; ----------------------------------------------------------------------------
000302r 2               ; SET TXTPTR TO BEGINNING OF PROGRAM
000302r 2               ; ----------------------------------------------------------------------------
000302r 2               STXTPT:
000302r 2  18                   clc
000303r 2  A5 6A                lda     TXTTAB
000305r 2  69 FF                adc     #$FF
000307r 2  85 B9                sta     TXTPTR
000309r 2  A5 6B                lda     TXTTAB+1
00030Br 2  69 FF                adc     #$FF
00030Dr 2  85 BA                sta     TXTPTR+1
00030Fr 2  60                   rts
000310r 2               
000310r 2               ; ----------------------------------------------------------------------------
000310r 2               .ifdef KBD
000310r 2               LE4C0:
000310r 2                       ldy     #<LE444
000310r 2                       ldx     #>LE444
000310r 2               LE4C4:
000310r 2                       jsr     LFFD6
000310r 2                       jsr     LFFED
000310r 2                       lda     $0504
000310r 2                       clc
000310r 2                       adc     #$08
000310r 2                       sta     $0504
000310r 2                       rts
000310r 2               
000310r 2               CMPJMPADRS:
000310r 2                       lda     1,x
000310r 2                       cmp     JMPADRS+2
000310r 2                       bne     LE4DE
000310r 2                       lda     0,x
000310r 2                       cmp     JMPADRS+1
000310r 2               LE4DE:
000310r 2                       rts
000310r 2               .endif
000310r 2               
000310r 2               ; ----------------------------------------------------------------------------
000310r 2               ; "LIST" STATEMENT
000310r 2               ; ----------------------------------------------------------------------------
000310r 2               LIST:
000310r 2               .ifdef KBD
000310r 2                       jsr     LE440
000310r 2                       bne     LE4DE
000310r 2                       pla
000310r 2                       pla
000310r 2               L25A6:
000310r 2                       jsr     CRDO
000310r 2               .else
000310r 2                   .ifdef AIM65
000310r 2                       pha
000310r 2                       lda     #$00
000310r 2               LB4BF:
000310r 2                       sta     INPUTFLG
000310r 2                       pla
000310r 2                   .endif
000310r 2                 .ifdef MICROTAN
000310r 2                       php
000310r 2                       jmp     LE21C ; patch
000310r 2               LC57E:
000310r 2                  .elseif .def(AIM65) || .def(SYM1)
000310r 2                       php
000310r 2                       jsr     LINGET
000310r 2               LC57E:
000310r 2                 .else
000310r 2  90 06                bcc     L2581
000312r 2  F0 04                beq     L2581
000314r 2  C9 A4                cmp     #TOKEN_MINUS
000316r 2  D0 E9                bne     L256A
000318r 2               L2581:
000318r 2  20 rr rr             jsr     LINGET
00031Br 2                 .endif
00031Br 2  20 rr rr             jsr     FNDLIN
00031Er 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00031Er 2                       plp
00031Er 2                       beq     L2598
00031Er 2                 .endif
00031Er 2  20 B8 00             jsr     CHRGOT
000321r 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
000321r 2                       beq     L25A6
000321r 2                 .else
000321r 2  F0 0C                beq     L2598
000323r 2                 .endif
000323r 2  C9 A4                cmp     #TOKEN_MINUS
000325r 2  D0 94                bne     L2520
000327r 2  20 B2 00             jsr     CHRGET
00032Ar 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00032Ar 2                       beq     L2598
00032Ar 2                       jsr     LINGET
00032Ar 2                       beq     L25A6
00032Ar 2                       rts
00032Ar 2                 .else
00032Ar 2  20 rr rr             jsr     LINGET
00032Dr 2  D0 8C                bne     L2520
00032Fr 2                 .endif
00032Fr 2               L2598:
00032Fr 2                 .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
00032Fr 2  68                   pla
000330r 2  68                   pla
000331r 2  A5 53                lda     LINNUM
000333r 2  05 54                ora     LINNUM+1
000335r 2  D0 06                bne     L25A6
000337r 2                 .endif
000337r 2  A9 FF                lda     #$FF
000339r 2  85 53                sta     LINNUM
00033Br 2  85 54                sta     LINNUM+1
00033Dr 2               L25A6:
00033Dr 2                 .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00033Dr 2                       pla
00033Dr 2                       pla
00033Dr 2                 .endif
00033Dr 2               L25A6X:
00033Dr 2               .endif
00033Dr 2  A0 01                ldy     #$01
00033Fr 2               .ifdef CONFIG_DATAFLG
00033Fr 2                       sty     DATAFLG
00033Fr 2               .endif
00033Fr 2  B1 9E                lda     (LOWTRX),y
000341r 2  F0 39                beq     L25E5
000343r 2               .ifdef MICROTAN
000343r 2                       jmp     LE21F
000343r 2               LC5A9:
000343r 2               .else
000343r 2  20 rr rr             jsr     ISCNTC
000346r 2               .endif
000346r 2               .ifndef KBD
000346r 2  20 rr rr             jsr     CRDO
000349r 2               .endif
000349r 2  C8                   iny
00034Ar 2  B1 9E                lda     (LOWTRX),y
00034Cr 2  AA                   tax
00034Dr 2  C8                   iny
00034Er 2  B1 9E                lda     (LOWTRX),y
000350r 2  C5 54                cmp     LINNUM+1
000352r 2  D0 04                bne     L25C1
000354r 2  E4 53                cpx     LINNUM
000356r 2  F0 02                beq     L25C3
000358r 2               L25C1:
000358r 2  B0 22                bcs     L25E5
00035Ar 2               ; ---LIST ONE LINE----------------
00035Ar 2               L25C3:
00035Ar 2  84 88                sty     FORPNT
00035Cr 2  20 rr rr             jsr     LINPRT
00035Fr 2  A9 20                lda     #$20
000361r 2               L25CA:
000361r 2  A4 88                ldy     FORPNT
000363r 2  29 7F                and     #$7F
000365r 2               L25CE:
000365r 2  20 rr rr             jsr     OUTDO
000368r 2               .ifdef CONFIG_DATAFLG
000368r 2                       cmp     #$22
000368r 2                       bne     LA519
000368r 2                       lda     DATAFLG
000368r 2                       eor     #$FF
000368r 2                       sta     DATAFLG
000368r 2               LA519:
000368r 2               .endif
000368r 2  C8                   iny
000369r 2               .ifdef CONFIG_11
000369r 2  F0 11                beq     L25E5
00036Br 2               .endif
00036Br 2  B1 9E                lda     (LOWTRX),y
00036Dr 2  D0 10                bne     L25E8
00036Fr 2  A8                   tay
000370r 2  B1 9E                lda     (LOWTRX),y
000372r 2  AA                   tax
000373r 2  C8                   iny
000374r 2  B1 9E                lda     (LOWTRX),y
000376r 2  86 9E                stx     LOWTRX
000378r 2  85 9F                sta     LOWTRX+1
00037Ar 2               .if .def(MICROTAN) || .def(AIM65) || .def(SYM1)
00037Ar 2                       bne     L25A6X
00037Ar 2               .else
00037Ar 2  D0 C1                bne     L25A6
00037Cr 2               .endif
00037Cr 2               L25E5:
00037Cr 2               .ifdef AIM65
00037Cr 2                       lda     INPUTFLG
00037Cr 2                       beq     L25E5a
00037Cr 2                       jsr     CRDO
00037Cr 2                       jsr     CRDO
00037Cr 2                       lda     #$1a
00037Cr 2                       jsr     OUTDO
00037Cr 2                       jsr     $e50a
00037Cr 2               L25E5a:
00037Cr 2               .endif
00037Cr 2  4C rr rr             jmp     RESTART
00037Fr 2               L25E8:
00037Fr 2  10 E4                bpl     L25CE
000381r 2               .ifdef CONFIG_DATAFLG
000381r 2                       cmp     #$FF
000381r 2                       beq     L25CE
000381r 2                       bit     DATAFLG
000381r 2                       bmi     L25CE
000381r 2               .endif
000381r 2  38                   sec
000382r 2  E9 7F                sbc     #$7F
000384r 2  AA                   tax
000385r 2  84 88                sty     FORPNT
000387r 2  A0 FF                ldy     #$FF
000389r 2               L25F2:
000389r 2  CA                   dex
00038Ar 2  F0 08                beq     L25FD
00038Cr 2               L25F5:
00038Cr 2  C8                   iny
00038Dr 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000390r 2  10 FA                bpl     L25F5
000392r 2  30 F5                bmi     L25F2
000394r 2               L25FD:
000394r 2  C8                   iny
000395r 2  B9 rr rr             lda     TOKEN_NAME_TABLE,y
000398r 2  30 C7                bmi     L25CA
00039Ar 2  20 rr rr             jsr     OUTDO
00039Dr 2  D0 F5                bne     L25FD	; always
00039Fr 2               
00039Fr 2               
00039Fr 1               .include "flow1.s"
00039Fr 2               .segment "CODE"
00039Fr 2               
00039Fr 2               ; ----------------------------------------------------------------------------
00039Fr 2               ; "FOR" STATEMENT
00039Fr 2               ;
00039Fr 2               ; FOR PUSHES 18 BYTES ON THE STACK:
00039Fr 2               ; 2 -- TXTPTR
00039Fr 2               ; 2 -- LINE NUMBER
00039Fr 2               ; 5 -- INITIAL (CURRENT)  FOR VARIABLE VALUE
00039Fr 2               ; 1 -- STEP SIGN
00039Fr 2               ; 5 -- STEP VALUE
00039Fr 2               ; 2 -- ADDRESS OF FOR VARIABLE IN VARTAB
00039Fr 2               ; 1 -- FOR TOKEN ($81)
00039Fr 2               ; ----------------------------------------------------------------------------
00039Fr 2               FOR:
00039Fr 2  A9 80                lda     #$80
0003A1r 2  85 14                sta     SUBFLG
0003A3r 2  20 rr rr             jsr     LET
0003A6r 2  20 rr rr             jsr     GTFORPNT
0003A9r 2  D0 05                bne     L2619
0003ABr 2  8A                   txa
0003ACr 2  69 0F                adc     #FOR_STACK1
0003AEr 2  AA                   tax
0003AFr 2  9A                   txs
0003B0r 2               L2619:
0003B0r 2  68                   pla
0003B1r 2  68                   pla
0003B2r 2  A9 09                lda     #FOR_STACK2
0003B4r 2  20 rr rr             jsr     CHKMEM
0003B7r 2  20 rr rr             jsr     DATAN
0003BAr 2  18                   clc
0003BBr 2  98                   tya
0003BCr 2  65 B9                adc     TXTPTR
0003BEr 2  48                   pha
0003BFr 2  A5 BA                lda     TXTPTR+1
0003C1r 2  69 00                adc     #$00
0003C3r 2  48                   pha
0003C4r 2  A5 79                lda     CURLIN+1
0003C6r 2  48                   pha
0003C7r 2  A5 78                lda     CURLIN
0003C9r 2  48                   pha
0003CAr 2  A9 9D                lda     #TOKEN_TO
0003CCr 2  20 rr rr             jsr     SYNCHR
0003CFr 2  20 rr rr             jsr     CHKNUM
0003D2r 2  20 rr rr             jsr     FRMNUM
0003D5r 2  A5 A5                lda     FACSIGN
0003D7r 2  09 7F                ora     #$7F
0003D9r 2  25 A1                and     FAC+1
0003DBr 2  85 A1                sta     FAC+1
0003DDr 2  A9 rr                lda     #<STEP
0003DFr 2  A0 rr                ldy     #>STEP
0003E1r 2  85 61                sta     INDEX
0003E3r 2  84 62                sty     INDEX+1
0003E5r 2  4C rr rr             jmp     FRM_STACK3
0003E8r 2               
0003E8r 2               ; ----------------------------------------------------------------------------
0003E8r 2               ; "STEP" PHRASE OF "FOR" STATEMENT
0003E8r 2               ; ----------------------------------------------------------------------------
0003E8r 2               STEP:
0003E8r 2  A9 rr                lda     #<CON_ONE
0003EAr 2  A0 rr                ldy     #>CON_ONE
0003ECr 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
0003EFr 2  20 B8 00             jsr     CHRGOT
0003F2r 2  C9 A2                cmp     #TOKEN_STEP
0003F4r 2  D0 06                bne     L2665
0003F6r 2  20 B2 00             jsr     CHRGET
0003F9r 2  20 rr rr             jsr     FRMNUM
0003FCr 2               L2665:
0003FCr 2  20 rr rr             jsr     SIGN
0003FFr 2  20 rr rr             jsr     FRM_STACK2
000402r 2  A5 89                lda     FORPNT+1
000404r 2  48                   pha
000405r 2  A5 88                lda     FORPNT
000407r 2  48                   pha
000408r 2  A9 81                lda     #$81
00040Ar 2  48                   pha
00040Br 2               
00040Br 2               ; ----------------------------------------------------------------------------
00040Br 2               ; PERFORM NEXT STATEMENT
00040Br 2               ; ----------------------------------------------------------------------------
00040Br 2               NEWSTT:
00040Br 2  20 rr rr             jsr     ISCNTC
00040Er 2  A5 B9                lda     TXTPTR
000410r 2  A4 BA                ldy     TXTPTR+1
000412r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000412r 2                       cpy     #>INPUTBUFFER
000412r 2                 .ifdef CBM2
000412r 2                       nop
000412r 2                 .endif
000412r 2                       beq     LC6D4
000412r 2               .else
000412r 2               ; BUG on AppleSoft I,
000412r 2               ; fixed differently on AppleSoft II (ldx/inx)
000412r 2  F0 06                beq     L2683
000414r 2               .endif
000414r 2  85 7C                sta     OLDTEXT
000416r 2  84 7D                sty     OLDTEXT+1
000418r 2               LC6D4:
000418r 2  A0 00                ldy     #$00
00041Ar 2               L2683:
00041Ar 2  B1 B9                lda     (TXTPTR),y
00041Cr 2               .ifndef CONFIG_11
00041Cr 2                       beq     LA5DC	; old: 1 cycle more on generic case
00041Cr 2                       cmp     #$3A
00041Cr 2                       beq     NEWSTT2
00041Cr 2               SYNERR1:
00041Cr 2                       jmp     SYNERR
00041Cr 2               LA5DC:
00041Cr 2               .else
00041Cr 2  D0 3D                bne     COLON; new: 1 cycle more on ":" case
00041Er 2               .endif
00041Er 2  A0 02                ldy     #$02
000420r 2  B1 B9                lda     (TXTPTR),y
000422r 2  18                   clc
000423r 2               .ifdef CONFIG_2
000423r 2                       jeq     L2701
000423r 2               .else
000423r 2  F0 72                beq     L2701
000425r 2               .endif
000425r 2  C8                   iny
000426r 2  B1 B9                lda     (TXTPTR),y
000428r 2  85 78                sta     CURLIN
00042Ar 2  C8                   iny
00042Br 2  B1 B9                lda     (TXTPTR),y
00042Dr 2  85 79                sta     CURLIN+1
00042Fr 2  98                   tya
000430r 2  65 B9                adc     TXTPTR
000432r 2  85 B9                sta     TXTPTR
000434r 2  90 02                bcc     NEWSTT2
000436r 2  E6 BA                inc     TXTPTR+1
000438r 2               NEWSTT2:
000438r 2  20 B2 00             jsr     CHRGET
00043Br 2  20 rr rr             jsr     EXECUTE_STATEMENT
00043Er 2  4C rr rr             jmp     NEWSTT
000441r 2               
000441r 2               ; ----------------------------------------------------------------------------
000441r 2               ; EXECUTE A STATEMENT
000441r 2               ;
000441r 2               ; (A) IS FIRST CHAR OF STATEMENT
000441r 2               ; CARRY IS SET
000441r 2               ; ----------------------------------------------------------------------------
000441r 2               EXECUTE_STATEMENT:
000441r 2               .ifndef CONFIG_11A
000441r 2  F0 7D                beq     RET1
000443r 2               .else
000443r 2                       beq     RET2
000443r 2               .endif
000443r 2               .ifndef CONFIG_11
000443r 2                       sec
000443r 2               .endif
000443r 2               EXECUTE_STATEMENT1:
000443r 2  E9 80                sbc     #$80
000445r 2               .ifndef CONFIG_11
000445r 2                       jcc     LET	; old: 1 cycle more on instr.
000445r 2               .else
000445r 2  90 11                bcc     LET1; new: 1 cycle more on assignment
000447r 2               .endif
000447r 2  C9 1C                cmp     #NUM_TOKENS
000449r 2               .ifdef CONFIG_2
000449r 2                       bcs     LC721
000449r 2               .else
000449r 2  B0 14                bcs     SYNERR1
00044Br 2               .endif
00044Br 2  0A                   asl     a
00044Cr 2  A8                   tay
00044Dr 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE+1,y
000450r 2  48                   pha
000451r 2  B9 rr rr             lda     TOKEN_ADDRESS_TABLE,y
000454r 2  48                   pha
000455r 2  4C B2 00             jmp     CHRGET
000458r 2               
000458r 2               .ifdef CONFIG_11
000458r 2               LET1:
000458r 2  4C rr rr             jmp     LET
00045Br 2               
00045Br 2               COLON:
00045Br 2  C9 3A                cmp     #$3A
00045Dr 2  F0 D9                beq     NEWSTT2
00045Fr 2               SYNERR1:
00045Fr 2  4C rr rr             jmp     SYNERR
000462r 2               .endif
000462r 2               
000462r 2               .ifdef CONFIG_2; GO TO
000462r 2               LC721:
000462r 2                       cmp     #TOKEN_GO-$80
000462r 2                       bne     SYNERR1
000462r 2                       jsr     CHRGET
000462r 2                       lda     #TOKEN_TO
000462r 2                       jsr     SYNCHR
000462r 2                       jmp     GOTO
000462r 2               .endif
000462r 2               
000462r 2               ; ----------------------------------------------------------------------------
000462r 2               ; "RESTORE" STATEMENT
000462r 2               ; ----------------------------------------------------------------------------
000462r 2               RESTORE:
000462r 2  38                   sec
000463r 2  A5 6A                lda     TXTTAB
000465r 2  E9 01                sbc     #$01
000467r 2  A4 6B                ldy     TXTTAB+1
000469r 2  B0 01                bcs     SETDA
00046Br 2  88                   dey
00046Cr 2               SETDA:
00046Cr 2  85 80                sta     DATPTR
00046Er 2  84 81                sty     DATPTR+1
000470r 2               RET2:
000470r 2  60                   rts
000471r 2               
000471r 2               .include "iscntc.s"
000471r 3               .segment "CODE"
000471r 3               ; ----------------------------------------------------------------------------
000471r 3               ; SEE IF CONTROL-C TYPED
000471r 3               ; ----------------------------------------------------------------------------
000471r 3               .ifndef CONFIG_CBM_ALL
000471r 3               .include "cbm_iscntc.s"
000471r 4               ; nothing - ISCNTC is a KERNAL function
000471r 4               
000471r 3               .endif
000471r 3               .ifdef KBD
000471r 3               .include "kbd_iscntc.s"
000471r 3               .endif
000471r 3               .ifdef OSI
000471r 3               .include "osi_iscntc.s"
000471r 3               .endif
000471r 3               .ifdef APPLE
000471r 3               .include "apple_iscntc.s"
000471r 4               .segment "CODE"
000471r 4               ISCNTC:
000471r 4  AD 00 C0             lda     $C000
000474r 4  C9 83                cmp     #$83
000476r 4  F0 01                beq     L0ECC
000478r 4  60                   rts
000479r 4               L0ECC:
000479r 4  20 rr rr             jsr     RDKEY
00047Cr 4  C9 03                cmp     #$03
00047Er 4               ;!!! runs into "STOP"
00047Er 4               
00047Er 3               .endif
00047Er 3               .ifdef KIM
00047Er 3               .include "kim_iscntc.s"
00047Er 3               .endif
00047Er 3               .ifdef MICROTAN
00047Er 3               .include "microtan_iscntc.s"
00047Er 3               .endif
00047Er 3               .ifdef AIM65
00047Er 3               .include "aim65_iscntc.s"
00047Er 3               .endif
00047Er 3               .ifdef SYM1
00047Er 3               .include "sym1_iscntc.s"
00047Er 3               .endif
00047Er 3               .ifdef EATER
00047Er 3               .include "eater_iscntc.s"
00047Er 3               .endif
00047Er 3               ;!!! runs into "STOP"
00047Er 3               
00047Er 2               ;!!! runs into "STOP"
00047Er 2               ; ----------------------------------------------------------------------------
00047Er 2               ; "STOP" STATEMENT
00047Er 2               ; ----------------------------------------------------------------------------
00047Er 2               STOP:
00047Er 2  B0 01                bcs     END2
000480r 2               
000480r 2               ; ----------------------------------------------------------------------------
000480r 2               ; "END" STATEMENT
000480r 2               ; ----------------------------------------------------------------------------
000480r 2               END:
000480r 2  18                   clc
000481r 2               END2:
000481r 2  D0 3D                bne     RET1
000483r 2  A5 B9                lda     TXTPTR
000485r 2  A4 BA                ldy     TXTPTR+1
000487r 2               .if .def(CONFIG_NO_INPUTBUFFER_ZP) && .def(CONFIG_2)
000487r 2               ; BUG on AppleSoft I
000487r 2               ; fix exists on AppleSoft II
000487r 2               ; TXTPTR+1 will always be > 0
000487r 2                       ldx     CURLIN+1
000487r 2                       inx
000487r 2               .endif
000487r 2  F0 0C                beq     END4
000489r 2  85 7C                sta     OLDTEXT
00048Br 2  84 7D                sty     OLDTEXT+1
00048Dr 2               CONTROL_C_TYPED:
00048Dr 2  A5 78                lda     CURLIN
00048Fr 2  A4 79                ldy     CURLIN+1
000491r 2  85 7A                sta     OLDLIN
000493r 2  84 7B                sty     OLDLIN+1
000495r 2               END4:
000495r 2  68                   pla
000496r 2  68                   pla
000497r 2               L2701:
000497r 2  A9 rr                lda     #<QT_BREAK
000499r 2  A0 rr                ldy     #>QT_BREAK
00049Br 2               .ifndef KBD
00049Br 2  A2 00                ldx     #$00
00049Dr 2  86 17                stx     Z14
00049Fr 2               .endif
00049Fr 2  90 03                bcc     L270E
0004A1r 2  4C rr rr             jmp     PRINT_ERROR_LINNUM
0004A4r 2               L270E:
0004A4r 2  4C rr rr             jmp     RESTART
0004A7r 2               .ifdef KBD
0004A7r 2               LE664:
0004A7r 2                       tay
0004A7r 2                       jmp     SNGFLT
0004A7r 2               .endif
0004A7r 2               
0004A7r 2               ; ----------------------------------------------------------------------------
0004A7r 2               ; "CONT" COMMAND
0004A7r 2               ; ----------------------------------------------------------------------------
0004A7r 2               CONT:
0004A7r 2  D0 17                bne     RET1
0004A9r 2  A2 D2                ldx     #ERR_CANTCONT
0004ABr 2  A4 7D                ldy     OLDTEXT+1
0004ADr 2  D0 03                bne     L271C
0004AFr 2  4C rr rr             jmp     ERROR
0004B2r 2               L271C:
0004B2r 2  A5 7C                lda     OLDTEXT
0004B4r 2  85 B9                sta     TXTPTR
0004B6r 2  84 BA                sty     TXTPTR+1
0004B8r 2  A5 7A                lda     OLDLIN
0004BAr 2  A4 7B                ldy     OLDLIN+1
0004BCr 2  85 78                sta     CURLIN
0004BEr 2  84 79                sty     CURLIN+1
0004C0r 2               RET1:
0004C0r 2  60                   rts
0004C1r 2               
0004C1r 2               .ifdef KBD
0004C1r 2               PRT:
0004C1r 2                       jsr     GETBYT
0004C1r 2                       txa
0004C1r 2               ; not ROR bug safe
0004C1r 2                       ror     a
0004C1r 2                       ror     a
0004C1r 2                       ror     a
0004C1r 2                       sta     $8F
0004C1r 2                       rts
0004C1r 2               
0004C1r 2               LE68C:
0004C1r 2                       ldy     #$12
0004C1r 2               LE68E:
0004C1r 2                       lda     LEA30,y
0004C1r 2                       sta     $03A2,y
0004C1r 2                       dey
0004C1r 2                       bpl     LE68E
0004C1r 2                       rts
0004C1r 2               .endif
0004C1r 2               
0004C1r 2               .ifndef AIM65
0004C1r 2               .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
0004C1r 2               ; CBM1 has the keyword removed,
0004C1r 2               ; but the code is still here
0004C1r 2               NULL:
0004C1r 2                       jsr     GETBYT
0004C1r 2                       bne     RET1
0004C1r 2                       inx
0004C1r 2                       cpx     #NULL_MAX
0004C1r 2                       bcs     L2739
0004C1r 2                       dex
0004C1r 2                       stx     Z15
0004C1r 2               L2738:
0004C1r 2                       rts
0004C1r 2               L2739:
0004C1r 2                       jmp     IQERR
0004C1r 2               .endif
0004C1r 2               .ifndef CONFIG_11A
0004C1r 2               CLEAR:
0004C1r 2  D0 FD                bne     RET1
0004C3r 2  4C rr rr             jmp     CLEARC
0004C6r 2               .endif
0004C6r 2               .endif
0004C6r 2               
0004C6r 1               .include "loadsave.s"
0004C6r 2               .segment "CODE"
0004C6r 2               
0004C6r 2               .ifdef APPLE
0004C6r 2               .include "apple_loadsave.s"
0004C6r 3               .segment "CODE"
0004C6r 3               
0004C6r 3               SAVE:
0004C6r 3  20 rr rr             jsr     L0F42
0004C9r 3  20 CD FE             jsr     LFECD
0004CCr 3  20 rr rr             jsr     L0F51
0004CFr 3  4C CD FE             jmp     LFECD
0004D2r 3               LOAD:
0004D2r 3  20 rr rr             jsr     L0F42
0004D5r 3  20 FD FE             jsr     LFEFD
0004D8r 3  20 rr rr             jsr     L0F51
0004DBr 3  20 FD FE             jsr     LFEFD
0004DEr 3  A9 rr                lda     #<QT_LOADED
0004E0r 3  A0 rr                ldy     #>QT_LOADED
0004E2r 3  20 rr rr             jsr     STROUT
0004E5r 3  4C rr rr             jmp     FIX_LINKS
0004E8r 3               QT_LOADED:
0004E8r 3  00                   .byte   0 ; XXX PATCHED
0004E9r 3  4F 41 44 45          .byte   "OADED"
0004EDr 3  44           
0004EEr 3  00                   .byte   0
0004EFr 3               L0F42:
0004EFr 3  A9 6C                lda     #$6C
0004F1r 3  A0 00                ldy     #$00
0004F3r 3  85 3C                sta     $3C
0004F5r 3  84 3D                sty     $3D
0004F7r 3  A9 6E                lda     #$6E
0004F9r 3  85 3E                sta     $3E
0004FBr 3  84 3F                sty     $3F
0004FDr 3  60                   rts
0004FEr 3               L0F51:
0004FEr 3  A5 6A                lda     $6A
000500r 3  A4 6B                ldy     $6B
000502r 3  85 3C                sta     $3C
000504r 3  84 3D                sty     $3D
000506r 3  A5 6C                lda     $6C
000508r 3  A4 6D                ldy     $6D
00050Ar 3  85 3E                sta     $3E
00050Cr 3  84 3F                sty     $3F
00050Er 3  60                   rts
00050Fr 3               
00050Fr 2               .endif
00050Fr 2               .ifdef KIM
00050Fr 2               .include "kim_loadsave.s"
00050Fr 2               .endif
00050Fr 2               .ifdef MICROTAN
00050Fr 2               .include "microtan_loadsave.s"
00050Fr 2               .endif
00050Fr 2               .ifdef AIM65
00050Fr 2               .include "aim65_loadsave.s"
00050Fr 2               .endif
00050Fr 2               .ifdef SYM1
00050Fr 2               .include "sym1_loadsave.s"
00050Fr 2               .endif
00050Fr 2               
00050Fr 1               .include "flow2.s"
00050Fr 2               .segment "CODE"
00050Fr 2               ; ----------------------------------------------------------------------------
00050Fr 2               ; "RUN" COMMAND
00050Fr 2               ; ----------------------------------------------------------------------------
00050Fr 2               RUN:
00050Fr 2  D0 03                bne     L27CF
000511r 2  4C rr rr             jmp     SETPTRS
000514r 2               L27CF:
000514r 2  20 rr rr             jsr     CLEARC
000517r 2  4C rr rr             jmp     L27E9
00051Ar 2               
00051Ar 2               ; ----------------------------------------------------------------------------
00051Ar 2               ; "GOSUB" STATEMENT
00051Ar 2               ;
00051Ar 2               ; LEAVES 7 BYTES ON STACK:
00051Ar 2               ; 2 -- RETURN ADDRESS (NEWSTT)
00051Ar 2               ; 2 -- TXTPTR
00051Ar 2               ; 2 -- LINE #
00051Ar 2               ; 1 -- GOSUB TOKEN
00051Ar 2               ; ----------------------------------------------------------------------------
00051Ar 2               GOSUB:
00051Ar 2  A9 03                lda     #$03
00051Cr 2  20 rr rr             jsr     CHKMEM
00051Fr 2  A5 BA                lda     TXTPTR+1
000521r 2  48                   pha
000522r 2  A5 B9                lda     TXTPTR
000524r 2  48                   pha
000525r 2  A5 79                lda     CURLIN+1
000527r 2  48                   pha
000528r 2  A5 78                lda     CURLIN
00052Ar 2  48                   pha
00052Br 2  A9 8C                lda     #TOKEN_GOSUB
00052Dr 2  48                   pha
00052Er 2               L27E9:
00052Er 2  20 B8 00             jsr     CHRGOT
000531r 2  20 rr rr             jsr     GOTO
000534r 2  4C rr rr             jmp     NEWSTT
000537r 2               
000537r 2               ; ----------------------------------------------------------------------------
000537r 2               ; "GOTO" STATEMENT
000537r 2               ; ALSO USED BY "RUN" AND "GOSUB"
000537r 2               ; ----------------------------------------------------------------------------
000537r 2               GOTO:
000537r 2  20 rr rr             jsr     LINGET
00053Ar 2  20 rr rr             jsr     REMN
00053Dr 2  A5 79                lda     CURLIN+1
00053Fr 2  C5 54                cmp     LINNUM+1
000541r 2  B0 0B                bcs     L2809
000543r 2  98                   tya
000544r 2  38                   sec
000545r 2  65 B9                adc     TXTPTR
000547r 2  A6 BA                ldx     TXTPTR+1
000549r 2  90 07                bcc     L280D
00054Br 2  E8                   inx
00054Cr 2  B0 04                bcs     L280D
00054Er 2               L2809:
00054Er 2  A5 6A                lda     TXTTAB
000550r 2  A6 6B                ldx     TXTTAB+1
000552r 2               L280D:
000552r 2               .ifdef KBD
000552r 2                       jsr     LF457
000552r 2                       bne     UNDERR
000552r 2               .else
000552r 2  20 rr rr             jsr     FL1
000555r 2  90 1E                bcc     UNDERR
000557r 2               .endif
000557r 2  A5 9E                lda     LOWTRX
000559r 2  E9 01                sbc     #$01
00055Br 2  85 B9                sta     TXTPTR
00055Dr 2  A5 9F                lda     LOWTRX+1
00055Fr 2  E9 00                sbc     #$00
000561r 2  85 BA                sta     TXTPTR+1
000563r 2               L281E:
000563r 2  60                   rts
000564r 2               
000564r 2               ; ----------------------------------------------------------------------------
000564r 2               ; "POP" AND "RETURN" STATEMENTS
000564r 2               ; ----------------------------------------------------------------------------
000564r 2               POP:
000564r 2  D0 FD                bne     L281E
000566r 2  A9 FF                lda     #$FF
000568r 2               .ifdef CONFIG_2A
000568r 2                       sta     FORPNT+1 ; bugfix, wrong in AppleSoft II
000568r 2               .else
000568r 2  85 88                sta     FORPNT
00056Ar 2               .endif
00056Ar 2  20 rr rr             jsr     GTFORPNT
00056Dr 2  9A                   txs
00056Er 2  C9 8C                cmp     #TOKEN_GOSUB
000570r 2  F0 0B                beq     RETURN
000572r 2  A2 16                ldx     #ERR_NOGOSUB
000574r 2  2C                   .byte   $2C
000575r 2               UNDERR:
000575r 2  A2 5A                ldx     #ERR_UNDEFSTAT
000577r 2  4C rr rr             jmp     ERROR
00057Ar 2               ; ----------------------------------------------------------------------------
00057Ar 2               SYNERR2:
00057Ar 2  4C rr rr             jmp     SYNERR
00057Dr 2               ; ----------------------------------------------------------------------------
00057Dr 2               RETURN:
00057Dr 2  68                   pla
00057Er 2  68                   pla
00057Fr 2  85 78                sta     CURLIN
000581r 2  68                   pla
000582r 2  85 79                sta     CURLIN+1
000584r 2  68                   pla
000585r 2  85 B9                sta     TXTPTR
000587r 2  68                   pla
000588r 2  85 BA                sta     TXTPTR+1
00058Ar 2               
00058Ar 2               ; ----------------------------------------------------------------------------
00058Ar 2               ; "DATA" STATEMENT
00058Ar 2               ; EXECUTED BY SKIPPING TO NEXT COLON OR EOL
00058Ar 2               ; ----------------------------------------------------------------------------
00058Ar 2               DATA:
00058Ar 2  20 rr rr             jsr     DATAN
00058Dr 2               
00058Dr 2               ; ----------------------------------------------------------------------------
00058Dr 2               ; ADD (Y) TO TXTPTR
00058Dr 2               ; ----------------------------------------------------------------------------
00058Dr 2               ADDON:
00058Dr 2  98                   tya
00058Er 2  18                   clc
00058Fr 2  65 B9                adc     TXTPTR
000591r 2  85 B9                sta     TXTPTR
000593r 2  90 02                bcc     L2852
000595r 2  E6 BA                inc     TXTPTR+1
000597r 2               L2852:
000597r 2  60                   rts
000598r 2               
000598r 2               ; ----------------------------------------------------------------------------
000598r 2               ; SCAN AHEAD TO NEXT ":" OR EOL
000598r 2               ; ----------------------------------------------------------------------------
000598r 2               DATAN:
000598r 2  A2 3A                ldx     #$3A
00059Ar 2  2C                   .byte   $2C
00059Br 2               REMN:
00059Br 2  A2 00                ldx     #$00
00059Dr 2  86 0D                stx     CHARAC
00059Fr 2  A0 00                ldy     #$00
0005A1r 2  84 0E                sty     ENDCHR
0005A3r 2               L285E:
0005A3r 2  A5 0E                lda     ENDCHR
0005A5r 2  A6 0D                ldx     CHARAC
0005A7r 2  85 0D                sta     CHARAC
0005A9r 2  86 0E                stx     ENDCHR
0005ABr 2               L2866:
0005ABr 2  B1 B9                lda     (TXTPTR),y
0005ADr 2  F0 E8                beq     L2852
0005AFr 2  C5 0E                cmp     ENDCHR
0005B1r 2  F0 E4                beq     L2852
0005B3r 2  C8                   iny
0005B4r 2  C9 22                cmp     #$22
0005B6r 2               .ifndef CONFIG_11
0005B6r 2                       beq     L285E; old: swap & cont is faster
0005B6r 2                       bne     L2866
0005B6r 2               .else
0005B6r 2  D0 F3                bne     L2866; new: cont is faster
0005B8r 2  F0 E9                beq     L285E
0005BAr 2               .endif
0005BAr 2               
0005BAr 2               ; ----------------------------------------------------------------------------
0005BAr 2               ; "IF" STATEMENT
0005BAr 2               ; ----------------------------------------------------------------------------
0005BAr 2               IF:
0005BAr 2  20 rr rr             jsr     FRMEVL
0005BDr 2  20 B8 00             jsr     CHRGOT
0005C0r 2  C9 88                cmp     #TOKEN_GOTO
0005C2r 2  F0 05                beq     L2884
0005C4r 2  A9 A0                lda     #TOKEN_THEN
0005C6r 2  20 rr rr             jsr     SYNCHR
0005C9r 2               L2884:
0005C9r 2  A5 A0                lda     FAC
0005CBr 2  D0 05                bne     L288D
0005CDr 2               
0005CDr 2               ; ----------------------------------------------------------------------------
0005CDr 2               ; "REM" STATEMENT, OR FALSE "IF" STATEMENT
0005CDr 2               ; ----------------------------------------------------------------------------
0005CDr 2               REM:
0005CDr 2  20 rr rr             jsr     REMN
0005D0r 2  F0 BB                beq     ADDON
0005D2r 2               L288D:
0005D2r 2  20 B8 00             jsr     CHRGOT
0005D5r 2  B0 03                bcs     L2895
0005D7r 2  4C rr rr             jmp     GOTO
0005DAr 2               L2895:
0005DAr 2  4C rr rr             jmp     EXECUTE_STATEMENT
0005DDr 2               
0005DDr 2               ; ----------------------------------------------------------------------------
0005DDr 2               ; "ON" STATEMENT
0005DDr 2               ;
0005DDr 2               ; ON <EXP> GOTO <LIST>
0005DDr 2               ; ON <EXP> GOSUB <LIST>
0005DDr 2               ; ----------------------------------------------------------------------------
0005DDr 2               ON:
0005DDr 2  20 rr rr             jsr     GETBYT
0005E0r 2  48                   pha
0005E1r 2  C9 8C                cmp     #TOKEN_GOSUB
0005E3r 2  F0 04                beq     L28A4
0005E5r 2               L28A0:
0005E5r 2  C9 88                cmp     #TOKEN_GOTO
0005E7r 2  D0 91                bne     SYNERR2
0005E9r 2               L28A4:
0005E9r 2  C6 A4                dec     FAC_LAST
0005EBr 2  D0 04                bne     L28AC
0005EDr 2  68                   pla
0005EEr 2  4C rr rr             jmp     EXECUTE_STATEMENT1
0005F1r 2               L28AC:
0005F1r 2  20 B2 00             jsr     CHRGET
0005F4r 2  20 rr rr             jsr     LINGET
0005F7r 2  C9 2C                cmp     #$2C
0005F9r 2  F0 EE                beq     L28A4
0005FBr 2  68                   pla
0005FCr 2               L28B7:
0005FCr 2  60                   rts
0005FDr 2               
0005FDr 1               .include "misc1.s"
0005FDr 2               .segment "CODE"
0005FDr 2               
0005FDr 2               ; ----------------------------------------------------------------------------
0005FDr 2               ; CONVERT LINE NUMBER
0005FDr 2               ; ----------------------------------------------------------------------------
0005FDr 2               LINGET:
0005FDr 2  A2 00                ldx     #$00
0005FFr 2  86 53                stx     LINNUM
000601r 2  86 54                stx     LINNUM+1
000603r 2               L28BE:
000603r 2  B0 F7                bcs     L28B7
000605r 2  E9 2F                sbc     #$2F
000607r 2  85 0D                sta     CHARAC
000609r 2  A5 54                lda     LINNUM+1
00060Br 2  85 61                sta     INDEX
00060Dr 2  C9 19                cmp     #$19
00060Fr 2  B0 D4                bcs     L28A0
000611r 2               ; <<<<<DANGEROUS CODE>>>>>
000611r 2               ; NOTE THAT IF (A) = $AB ON THE LINE ABOVE,
000611r 2               ; ON.1 WILL COMPARE = AND CAUSE A CATASTROPHIC
000611r 2               ; JUMP TO $22D9 (FOR GOTO), OR OTHER LOCATIONS
000611r 2               ; FOR OTHER CALLS TO LINGET.
000611r 2               ;
000611r 2               ; YOU CAN SEE THIS IS YOU FIRST PUT "BRK" IN $22D9,
000611r 2               ; THEN TYPE "GO TO 437761".
000611r 2               ;
000611r 2               ; ANY VALUE FROM 437760 THROUGH 440319 WILL CAUSE
000611r 2               ; THE PROBLEM.  ($AB00 - $ABFF)
000611r 2               ; <<<<<DANGEROUS CODE>>>>>
000611r 2  A5 53                lda     LINNUM
000613r 2  0A                   asl     a
000614r 2  26 61                rol     INDEX
000616r 2  0A                   asl     a
000617r 2  26 61                rol     INDEX
000619r 2  65 53                adc     LINNUM
00061Br 2  85 53                sta     LINNUM
00061Dr 2  A5 61                lda     INDEX
00061Fr 2  65 54                adc     LINNUM+1
000621r 2  85 54                sta     LINNUM+1
000623r 2  06 53                asl     LINNUM
000625r 2  26 54                rol     LINNUM+1
000627r 2  A5 53                lda     LINNUM
000629r 2  65 0D                adc     CHARAC
00062Br 2  85 53                sta     LINNUM
00062Dr 2  90 02                bcc     L28EC
00062Fr 2  E6 54                inc     LINNUM+1
000631r 2               L28EC:
000631r 2  20 B2 00             jsr     CHRGET
000634r 2  4C rr rr             jmp     L28BE
000637r 2               
000637r 2               ; ----------------------------------------------------------------------------
000637r 2               ; "LET" STATEMENT
000637r 2               ;
000637r 2               ; LET <VAR> = <EXP>
000637r 2               ; <VAR> = <EXP>
000637r 2               ; ----------------------------------------------------------------------------
000637r 2               LET:
000637r 2  20 rr rr             jsr     PTRGET
00063Ar 2  85 88                sta     FORPNT
00063Cr 2  84 89                sty     FORPNT+1
00063Er 2  A9 AB                lda     #TOKEN_EQUAL
000640r 2  20 rr rr             jsr     SYNCHR
000643r 2               .ifndef CONFIG_SMALL
000643r 2  A5 12                lda     VALTYP+1
000645r 2  48                   pha
000646r 2               .endif
000646r 2  A5 11                lda     VALTYP
000648r 2  48                   pha
000649r 2  20 rr rr             jsr     FRMEVL
00064Cr 2  68                   pla
00064Dr 2  2A                   rol     a
00064Er 2  20 rr rr             jsr     CHKVAL
000651r 2  D0 18                bne     LETSTRING
000653r 2               .ifndef CONFIG_SMALL
000653r 2  68                   pla
000654r 2               LET2:
000654r 2  10 12                bpl     L2923
000656r 2  20 rr rr             jsr     ROUND_FAC
000659r 2  20 rr rr             jsr     AYINT
00065Cr 2  A0 00                ldy     #$00
00065Er 2  A5 A3                lda     FAC+3
000660r 2  91 88                sta     (FORPNT),y
000662r 2  C8                   iny
000663r 2  A5 A4                lda     FAC+4
000665r 2  91 88                sta     (FORPNT),y
000667r 2  60                   rts
000668r 2               L2923:
000668r 2               .endif
000668r 2               
000668r 2               ; ----------------------------------------------------------------------------
000668r 2               ; REAL VARIABLE = EXPRESSION
000668r 2               ; ----------------------------------------------------------------------------
000668r 2  4C rr rr             jmp     SETFOR
00066Br 2               LETSTRING:
00066Br 2               .ifndef CONFIG_SMALL
00066Br 2  68                   pla
00066Cr 2               .endif
00066Cr 2               
00066Cr 2               ; ----------------------------------------------------------------------------
00066Cr 2               ; INSTALL STRING, DESCRIPTOR ADDRESS IS AT FAC+3,4
00066Cr 2               ; ----------------------------------------------------------------------------
00066Cr 2               PUTSTR:
00066Cr 2               .ifdef CONFIG_CBM_ALL
00066Cr 2                       ldy     FORPNT+1
00066Cr 2                 .ifdef CBM1
00066Cr 2                       cpy     #$D0	; TI$
00066Cr 2                 .else
00066Cr 2                       cpy     #$DE
00066Cr 2                 .endif
00066Cr 2                       bne     LC92B
00066Cr 2                       jsr     FREFAC
00066Cr 2                       cmp     #$06
00066Cr 2                 .ifdef CBM2
00066Cr 2                       bne     IQERR1
00066Cr 2                 .else
00066Cr 2                       jne     IQERR
00066Cr 2                 .endif
00066Cr 2                       ldy     #$00
00066Cr 2                       sty     FAC
00066Cr 2                       sty     FACSIGN
00066Cr 2               LC8E8:
00066Cr 2                       sty     STRNG2
00066Cr 2                       jsr     LC91C
00066Cr 2                       jsr     MUL10
00066Cr 2                       inc     STRNG2
00066Cr 2                       ldy     STRNG2
00066Cr 2                       jsr     LC91C
00066Cr 2                       jsr     COPY_FAC_TO_ARG_ROUNDED
00066Cr 2                       tax
00066Cr 2                       beq     LC902
00066Cr 2                       inx
00066Cr 2                       txa
00066Cr 2                       jsr     LD9BF
00066Cr 2               LC902:
00066Cr 2                       ldy     STRNG2
00066Cr 2                       iny
00066Cr 2                       cpy     #$06
00066Cr 2                       bne     LC8E8
00066Cr 2                       jsr     MUL10
00066Cr 2                       jsr     QINT
00066Cr 2                       ldx     #$02
00066Cr 2                       sei
00066Cr 2               LC912:
00066Cr 2                       lda     FAC+2,x
00066Cr 2                       sta     TISTR,x
00066Cr 2                       dex
00066Cr 2                       bpl     LC912
00066Cr 2                       cli
00066Cr 2                       rts
00066Cr 2               LC91C:
00066Cr 2                       lda     (INDEX),y
00066Cr 2                       jsr     CHRGOT2
00066Cr 2                       bcc     LC926
00066Cr 2               IQERR1:
00066Cr 2                       jmp     IQERR
00066Cr 2               LC926:
00066Cr 2                       sbc     #$2F
00066Cr 2                       jmp     ADDACC
00066Cr 2               LC92B:
00066Cr 2               .endif
00066Cr 2  A0 02                ldy     #$02
00066Er 2  B1 A3                lda     (FAC_LAST-1),y
000670r 2  C5 73                cmp     FRETOP+1
000672r 2  90 17                bcc     L2946
000674r 2  D0 07                bne     L2938
000676r 2  88                   dey
000677r 2  B1 A3                lda     (FAC_LAST-1),y
000679r 2  C5 72                cmp     FRETOP
00067Br 2  90 0E                bcc     L2946
00067Dr 2               L2938:
00067Dr 2  A4 A4                ldy     FAC_LAST
00067Fr 2  C4 6D                cpy     VARTAB+1
000681r 2  90 08                bcc     L2946
000683r 2  D0 0D                bne     L294D
000685r 2  A5 A3                lda     FAC_LAST-1
000687r 2  C5 6C                cmp     VARTAB
000689r 2  B0 07                bcs     L294D
00068Br 2               L2946:
00068Br 2  A5 A3                lda     FAC_LAST-1
00068Dr 2  A4 A4                ldy     FAC_LAST
00068Fr 2  4C rr rr             jmp     L2963
000692r 2               L294D:
000692r 2  A0 00                ldy     #$00
000694r 2  B1 A3                lda     (FAC_LAST-1),y
000696r 2  20 rr rr             jsr     STRINI
000699r 2  A5 8F                lda     DSCPTR
00069Br 2  A4 90                ldy     DSCPTR+1
00069Dr 2  85 AE                sta     STRNG1
00069Fr 2  84 AF                sty     STRNG1+1
0006A1r 2  20 rr rr             jsr     MOVINS
0006A4r 2  A9 A0                lda     #FAC
0006A6r 2  A0 00                ldy     #$00
0006A8r 2               L2963:
0006A8r 2  85 8F                sta     DSCPTR
0006AAr 2  84 90                sty     DSCPTR+1
0006ACr 2  20 rr rr             jsr     FRETMS
0006AFr 2  A0 00                ldy     #$00
0006B1r 2  B1 8F                lda     (DSCPTR),y
0006B3r 2  91 88                sta     (FORPNT),y
0006B5r 2  C8                   iny
0006B6r 2  B1 8F                lda     (DSCPTR),y
0006B8r 2  91 88                sta     (FORPNT),y
0006BAr 2  C8                   iny
0006BBr 2  B1 8F                lda     (DSCPTR),y
0006BDr 2  91 88                sta     (FORPNT),y
0006BFr 2               RET5:
0006BFr 2  60                   rts
0006C0r 2               .ifdef AIM65
0006C0r 2               LB89D:
0006C0r 2                       cmp     #$21
0006C0r 2                       bne     RET5
0006C0r 2                       lda     #$80
0006C0r 2                       sta     PRIFLG
0006C0r 2                       jmp     CHRGET
0006C0r 2               .endif
0006C0r 2               
0006C0r 2               .ifdef CONFIG_FILE
0006C0r 2               PRINTH:
0006C0r 2                       jsr     CMD
0006C0r 2                       jmp     LCAD6
0006C0r 2               CMD:
0006C0r 2                       jsr     GETBYT
0006C0r 2                       beq     LC98F
0006C0r 2                       lda     #$2C
0006C0r 2                       jsr     SYNCHR
0006C0r 2               LC98F:
0006C0r 2                       php
0006C0r 2                       jsr     CHKOUT
0006C0r 2                       stx     CURDVC
0006C0r 2                       plp
0006C0r 2                       jmp     PRINT
0006C0r 2               .endif
0006C0r 2               
0006C0r 2               
0006C0r 1               .include "print.s"
0006C0r 2               .segment "CODE"
0006C0r 2               
0006C0r 2               .ifdef AIM65
0006C0r 2               PRINT:
0006C0r 2                       lda     PRIFLG
0006C0r 2                       sta     ZBE
0006C0r 2                       jsr     L297E
0006C0r 2               LB8B1:
0006C0r 2                       lda     ZBE
0006C0r 2                       sta     PRIFLG
0006C0r 2                       rts
0006C0r 2               .endif
0006C0r 2               
0006C0r 2               PRSTRING:
0006C0r 2  20 rr rr             jsr     STRPRT
0006C3r 2               L297E:
0006C3r 2  20 B8 00             jsr     CHRGOT
0006C6r 2               
0006C6r 2               ; ----------------------------------------------------------------------------
0006C6r 2               ; "PRINT" STATEMENT
0006C6r 2               ; ----------------------------------------------------------------------------
0006C6r 2               .ifndef AIM65
0006C6r 2               PRINT:
0006C6r 2               .endif
0006C6r 2  F0 35                beq     CRDO
0006C8r 2               PRINT2:
0006C8r 2  F0 45                beq     L29DD
0006CAr 2               .ifdef AIM65
0006CAr 2                       jsr     LB89D
0006CAr 2                       beq     L29DD
0006CAr 2               .endif
0006CAr 2  C9 9C                cmp     #TOKEN_TAB
0006CCr 2  F0 59                beq     L29F5
0006CEr 2  C9 9F                cmp     #TOKEN_SPC
0006D0r 2               .ifdef CONFIG_2
0006D0r 2                       clc	; also AppleSoft II
0006D0r 2               .endif
0006D0r 2  F0 55                beq     L29F5
0006D2r 2  C9 2C                cmp     #','
0006D4r 2               ; Pre-KIM had no CLC. KIM added the CLC
0006D4r 2               ; here. Post-KIM moved the CLC up...
0006D4r 2               ; (makes no sense on KIM, liveness = 0)
0006D4r 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
0006D4r 2                       clc
0006D4r 2               .endif
0006D4r 2  F0 3A                beq     L29DE
0006D6r 2  C9 3B                cmp     #$3B
0006D8r 2  F0 67                beq     L2A0D
0006DAr 2  20 rr rr             jsr     FRMEVL
0006DDr 2  24 11                bit     VALTYP
0006DFr 2  30 DF                bmi     PRSTRING
0006E1r 2  20 rr rr             jsr     FOUT
0006E4r 2  20 rr rr             jsr     STRLIT
0006E7r 2               .ifndef CONFIG_NO_CR
0006E7r 2  A0 00                ldy     #$00
0006E9r 2  B1 A3                lda     (FAC_LAST-1),y
0006EBr 2  18                   clc
0006ECr 2  65 50                adc     POSX
0006EEr 2                 .ifdef KBD
0006EEr 2                       cmp     #$28
0006EEr 2                 .else
0006EEr 2  C5 51                cmp     Z17
0006F0r 2                 .endif
0006F0r 2  90 03                bcc     L29B1
0006F2r 2  20 rr rr             jsr     CRDO
0006F5r 2               L29B1:
0006F5r 2               .endif
0006F5r 2  20 rr rr             jsr     STRPRT
0006F8r 2               .ifdef KBD
0006F8r 2                       jmp     L297E
0006F8r 2               .else
0006F8r 2  20 rr rr             jsr     OUTSP
0006FBr 2  D0 C6                bne     L297E ; branch always
0006FDr 2               .endif
0006FDr 2               
0006FDr 2               .ifdef KBD
0006FDr 2               ; PATCHES
0006FDr 2               LE86C:
0006FDr 2                       pla
0006FDr 2                       jmp     CONTROL_C_TYPED
0006FDr 2               LE870:
0006FDr 2                       jsr     GETBYT
0006FDr 2                       txa
0006FDr 2               LE874:
0006FDr 2                       beq     LE878
0006FDr 2                       bpl     LE8F2
0006FDr 2               LE878:
0006FDr 2                       jmp     IQERR
0006FDr 2               ; PATCHES
0006FDr 2               .endif
0006FDr 2               
0006FDr 2               
0006FDr 2               
0006FDr 2               .ifndef KBD
0006FDr 2               L29B9:
0006FDr 2                 .ifdef CBM2
0006FDr 2                       lda     #$00
0006FDr 2                       sta     INPUTBUFFER,x
0006FDr 2                       ldx     #<(INPUTBUFFER-1)
0006FDr 2                       ldy     #>(INPUTBUFFER-1)
0006FDr 2                 .else
0006FDr 2                   .ifndef APPLE
0006FDr 2                       ldy     #$00
0006FDr 2                       sty     INPUTBUFFER,x
0006FDr 2                       ldx     #LINNUM+1
0006FDr 2                   .endif
0006FDr 2                   .if .def(MICROTAN) || .def(SYM1)
0006FDr 2                       bne     CRDO2
0006FDr 2               	.endif
0006FDr 2                 .endif
0006FDr 2                 .ifdef CONFIG_FILE
0006FDr 2                       lda     CURDVC
0006FDr 2                       bne     L29DD
0006FDr 2                 .endif
0006FDr 2               .endif
0006FDr 2               
0006FDr 2               
0006FDr 2               CRDO:
0006FDr 2               .if .def(CONFIG_PRINTNULLS) && .def(CONFIG_FILE)
0006FDr 2                       lda     CURDVC
0006FDr 2                       bne     LC9D8
0006FDr 2                       sta     POSX
0006FDr 2               LC9D8:
0006FDr 2               .endif
0006FDr 2  A9 0D                lda     #CRLF_1
0006FFr 2               .ifndef CONFIG_CBM_ALL
0006FFr 2  85 50                sta     POSX
000701r 2               .endif
000701r 2  20 rr rr             jsr     OUTDO
000704r 2               CRDO2:
000704r 2  A9 80                lda     #CRLF_2
000706r 2  20 rr rr             jsr     OUTDO
000709r 2               
000709r 2               PRINTNULLS:
000709r 2               .if .def(KBD) || .def(AIM65)
000709r 2                       lda     #$00
000709r 2                       sta     POSX
000709r 2                       eor     #$FF
000709r 2               .else
000709r 2                 .if .def(CONFIG_NULL) || .def(CONFIG_PRINTNULLS)
000709r 2                   .ifdef CONFIG_FILE
000709r 2                   ; Although there is no statement for it,
000709r 2                   ; CBM1 had NULL support and ignores
000709r 2                   ; it when not targeting the screen,
000709r 2                   ; CBM2 dropped it completely.
000709r 2                       lda     CURDVC
000709r 2                       bne     L29DD
000709r 2                   .endif
000709r 2                       txa
000709r 2                       pha
000709r 2                       ldx     Z15
000709r 2                       beq     L29D9
000709r 2                     .ifdef SYM1
000709r 2                       lda     #$FF
000709r 2                     .else
000709r 2                       lda     #$00
000709r 2                     .endif
000709r 2               L29D3:
000709r 2                       jsr     OUTDO
000709r 2                       dex
000709r 2                       bne     L29D3
000709r 2               L29D9:
000709r 2                       stx     POSX
000709r 2                       pla
000709r 2                       tax
000709r 2                 .else
000709r 2                   .ifndef CONFIG_2
000709r 2  A9 00                lda     #$00
00070Br 2  85 50                sta     POSX
00070Dr 2                   .endif
00070Dr 2  49 FF                eor     #$FF
00070Fr 2                 .endif
00070Fr 2               .endif
00070Fr 2               L29DD:
00070Fr 2  60                   rts
000710r 2               L29DE:
000710r 2  A5 50                lda     POSX
000712r 2               .ifndef CONFIG_NO_CR
000712r 2                 .ifdef KBD
000712r 2                       cmp     #$1A
000712r 2                 .else
000712r 2  C5 52                cmp     Z18
000714r 2                 .endif
000714r 2  90 06                bcc     L29EA
000716r 2  20 rr rr             jsr     CRDO
000719r 2  4C rr rr             jmp     L2A0D
00071Cr 2               L29EA:
00071Cr 2               .endif
00071Cr 2  38                   sec
00071Dr 2               L29EB:
00071Dr 2               .if .def(CONFIG_CBM_ALL) || .def(AIM65)
00071Dr 2                       sbc     #$0A
00071Dr 2               .else
00071Dr 2                 .ifdef KBD
00071Dr 2                       sbc     #$0D
00071Dr 2                 .else
00071Dr 2  E9 0E                sbc     #$0E
00071Fr 2                 .endif
00071Fr 2               .endif
00071Fr 2  B0 FC                bcs     L29EB
000721r 2  49 FF                eor     #$FF
000723r 2  69 01                adc     #$01
000725r 2  D0 15                bne     L2A08
000727r 2               L29F5:
000727r 2               .ifdef CONFIG_11A
000727r 2                       php
000727r 2               .else
000727r 2  48                   pha
000728r 2               .endif
000728r 2  20 rr rr             jsr     GTBYTC
00072Br 2  C9 29                cmp     #')'
00072Dr 2               .ifdef CONFIG_11A
00072Dr 2                 .ifdef CONFIG_2
00072Dr 2                       bne     SYNERR4
00072Dr 2                 .else
00072Dr 2                       jne     SYNERR
00072Dr 2                 .endif
00072Dr 2                       plp
00072Dr 2                       bcc     L2A09
00072Dr 2               .else
00072Dr 2                 .ifdef CONFIG_11
00072Dr 2  F0 03 4C rr          jne     SYNERR
000731r 2  rr           
000732r 2                 .else
000732r 2                       bne     SYNERR4
000732r 2                 .endif
000732r 2  68                   pla
000733r 2  C9 9C                cmp     #TOKEN_TAB
000735r 2                 .ifdef CONFIG_11
000735r 2  D0 06                bne     L2A09
000737r 2                 .else
000737r 2                       bne     L2A0A
000737r 2                 .endif
000737r 2               .endif
000737r 2  8A                   txa
000738r 2  E5 50                sbc     POSX
00073Ar 2  90 05                bcc     L2A0D
00073Cr 2               .ifndef CONFIG_11
00073Cr 2                       beq     L2A0D
00073Cr 2               .endif
00073Cr 2               L2A08:
00073Cr 2  AA                   tax
00073Dr 2               .ifdef CONFIG_11
00073Dr 2               L2A09:
00073Dr 2  E8                   inx
00073Er 2               .endif
00073Er 2               L2A0A:
00073Er 2               .ifndef CONFIG_11
00073Er 2                       jsr     OUTSP
00073Er 2               .endif
00073Er 2  CA                   dex
00073Fr 2               .ifndef CONFIG_11
00073Fr 2                       bne     L2A0A
00073Fr 2               .else
00073Fr 2  D0 06                bne     L2A13
000741r 2               .endif
000741r 2               L2A0D:
000741r 2  20 B2 00             jsr     CHRGET
000744r 2  4C rr rr             jmp     PRINT2
000747r 2               .ifdef CONFIG_11
000747r 2               L2A13:
000747r 2  20 rr rr             jsr     OUTSP
00074Ar 2  D0 F2                bne     L2A0A
00074Cr 2               .endif
00074Cr 2               
00074Cr 2               ; ----------------------------------------------------------------------------
00074Cr 2               ; PRINT STRING AT (Y,A)
00074Cr 2               ; ----------------------------------------------------------------------------
00074Cr 2               STROUT:
00074Cr 2  20 rr rr             jsr     STRLIT
00074Fr 2               
00074Fr 2               ; ----------------------------------------------------------------------------
00074Fr 2               ; PRINT STRING AT (FACMO,FACLO)
00074Fr 2               ; ----------------------------------------------------------------------------
00074Fr 2               STRPRT:
00074Fr 2  20 rr rr             jsr     FREFAC
000752r 2  AA                   tax
000753r 2  A0 00                ldy     #$00
000755r 2  E8                   inx
000756r 2               L2A22:
000756r 2  CA                   dex
000757r 2  F0 B6                beq     L29DD
000759r 2  B1 61                lda     (INDEX),y
00075Br 2  20 rr rr             jsr     OUTDO
00075Er 2  C8                   iny
00075Fr 2  C9 0D                cmp     #$0D
000761r 2  D0 F3                bne     L2A22
000763r 2  20 rr rr             jsr     PRINTNULLS
000766r 2  4C rr rr             jmp     L2A22
000769r 2               ; ----------------------------------------------------------------------------
000769r 2               OUTSP:
000769r 2               .ifdef CONFIG_FILE
000769r 2                 .ifndef CBM1
000769r 2               ; on non-screen devices, print SPACE
000769r 2               ; instead of CRSR RIGHT
000769r 2                       lda     CURDVC
000769r 2                       beq     LCA40
000769r 2                       lda     #$20
000769r 2                       .byte   $2C
000769r 2               LCA40:
000769r 2                 .endif
000769r 2                       lda     #$1D ; CRSR RIGHT
000769r 2               .else
000769r 2  A9 20                lda     #$20
00076Br 2               .endif
00076Br 2  2C                   .byte   $2C
00076Cr 2               OUTQUES:
00076Cr 2  A9 3F                lda     #$3F
00076Er 2               
00076Er 2               ; ----------------------------------------------------------------------------
00076Er 2               ; PRINT CHAR FROM (A)
00076Er 2               ; ----------------------------------------------------------------------------
00076Er 2               OUTDO:
00076Er 2               .ifndef KBD
00076Er 2  24 17                bit     Z14
000770r 2  30 18                bmi     L2A56
000772r 2               .endif
000772r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000772r 2               ; Commodore forgot to remove this in CBM1
000772r 2  48                   pha
000773r 2               .endif
000773r 2               .ifdef CBM1
000773r 2                       cmp     #$1D ; CRSR RIGHT
000773r 2                       beq     LCA6A
000773r 2                       cmp     #$9D ; CRSR LEFT
000773r 2                       beq     LCA5A
000773r 2                       cmp     #$14 ; DEL
000773r 2                       bne     LCA64
000773r 2               LCA5A:
000773r 2                       lda     POSX
000773r 2                       beq     L2A4E
000773r 2                       lda     CURDVC
000773r 2                       bne     L2A4E
000773r 2                       dec     POSX
000773r 2               LCA64:
000773r 2                       and     #$7F
000773r 2               .endif
000773r 2               .ifndef CBM2
000773r 2  C9 20                cmp     #$20
000775r 2  90 0B                bcc     L2A4E
000777r 2               .endif
000777r 2               LCA6A:
000777r 2               .ifdef CONFIG_CBM1_PATCHES
000777r 2                       lda     CURDVC
000777r 2                       jsr     PATCH6
000777r 2                       nop
000777r 2               .endif
000777r 2               .ifdef CONFIG_PRINT_CR
000777r 2  A5 50                lda     POSX
000779r 2  C5 51                cmp     Z17
00077Br 2  D0 03                bne     L2A4C
00077Dr 2                 .ifdef AIM65
00077Dr 2                       lda #$00
00077Dr 2                       sta POSX
00077Dr 2                 .elseif .def(APPLE)
00077Dr 2  EA                   nop ; PATCH!
00077Er 2  EA                   nop ; don't print CR
00077Fr 2  EA                   nop
000780r 2                 .else
000780r 2                       jsr     CRDO
000780r 2                 .endif
000780r 2               L2A4C:
000780r 2               .endif
000780r 2               .ifndef CONFIG_CBM_ALL
000780r 2  E6 50                inc     POSX
000782r 2               .endif
000782r 2               L2A4E:
000782r 2               .if .def(CONFIG_PRINT_CR) || .def(CBM1)
000782r 2               ; Commodore forgot to remove this in CBM1
000782r 2  68                   pla
000783r 2               .endif
000783r 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
000783r 2                       sty     DIMFLG
000783r 2               .endif
000783r 2               .ifdef CONFIG_IO_MSB
000783r 2  09 80                ora     #$80
000785r 2               .endif
000785r 2  20 ED FD             jsr     MONCOUT
000788r 2               .ifdef CONFIG_IO_MSB
000788r 2  29 7F                and     #$7F
00078Ar 2               .endif
00078Ar 2               .ifdef CONFIG_MONCOUT_DESTROYS_Y
00078Ar 2                       ldy     DIMFLG
00078Ar 2               .endif
00078Ar 2               .ifdef OSI
00078Ar 2                       nop
00078Ar 2                       nop
00078Ar 2                       nop
00078Ar 2                       nop
00078Ar 2               .endif
00078Ar 2               L2A56:
00078Ar 2  29 FF                and     #$FF
00078Cr 2               LE8F2:
00078Cr 2  60                   rts
00078Dr 2               
00078Dr 2               ; ----------------------------------------------------------------------------
00078Dr 2               ; ???
00078Dr 2               ; ----------------------------------------------------------------------------
00078Dr 2               .ifdef KBD
00078Dr 2               LE8F3:
00078Dr 2                       pha
00078Dr 2                       lda     $047F
00078Dr 2                       clc
00078Dr 2                       beq     LE900
00078Dr 2                       lda     #$00
00078Dr 2                       sta     $047F
00078Dr 2                       sec
00078Dr 2               LE900:
00078Dr 2                       pla
00078Dr 2                       rts
00078Dr 2               .endif
00078Dr 2               
00078Dr 1               .include "input.s"
00078Dr 2               .segment "CODE"
00078Dr 2               
00078Dr 2               ; ----------------------------------------------------------------------------
00078Dr 2               ; INPUT CONVERSION ERROR:  ILLEGAL CHARACTER
00078Dr 2               ; IN NUMERIC FIELD.  MUST DISTINGUISH
00078Dr 2               ; BETWEEN INPUT, READ, AND GET
00078Dr 2               ; ----------------------------------------------------------------------------
00078Dr 2               INPUTERR:
00078Dr 2  A5 15                lda     INPUTFLG
00078Fr 2  F0 11                beq     RESPERR	; INPUT
000791r 2               .ifndef SYM1
000791r 2               .ifndef CONFIG_SMALL
000791r 2               .ifdef CONFIG_10A
000791r 2               ; without this, it treats GET errors
000791r 2               ; like READ errors
000791r 2  30 04                bmi     L2A63	; READ
000793r 2  A0 FF                ldy     #$FF	; GET
000795r 2  D0 04                bne     L2A67
000797r 2               L2A63:
000797r 2               .endif
000797r 2               .endif
000797r 2               .endif
000797r 2               .ifdef CONFIG_CBM1_PATCHES
000797r 2                       jsr     PATCH5
000797r 2               		nop
000797r 2               .else
000797r 2  A5 7E                lda     Z8C
000799r 2  A4 7F                ldy     Z8C+1
00079Br 2               .endif
00079Br 2               L2A67:
00079Br 2  85 78                sta     CURLIN
00079Dr 2  84 79                sty     CURLIN+1
00079Fr 2               SYNERR4:
00079Fr 2  4C rr rr             jmp     SYNERR
0007A2r 2               RESPERR:
0007A2r 2               .ifdef CONFIG_FILE
0007A2r 2                       lda     CURDVC
0007A2r 2                       beq     LCA8F
0007A2r 2                       ldx     #ERR_BADDATA
0007A2r 2                       jmp     ERROR
0007A2r 2               LCA8F:
0007A2r 2               .endif
0007A2r 2  A9 rr                lda     #<ERRREENTRY
0007A4r 2  A0 rr                ldy     #>ERRREENTRY
0007A6r 2  20 rr rr             jsr     STROUT
0007A9r 2  A5 7C                lda     OLDTEXT
0007ABr 2  A4 7D                ldy     OLDTEXT+1
0007ADr 2  85 B9                sta     TXTPTR
0007AFr 2  84 BA                sty     TXTPTR+1
0007B1r 2               RTS20:
0007B1r 2  60                   rts
0007B2r 2               
0007B2r 2               ; ----------------------------------------------------------------------------
0007B2r 2               ; "GET" STATEMENT
0007B2r 2               ; ----------------------------------------------------------------------------
0007B2r 2               .ifndef CONFIG_SMALL
0007B2r 2               .ifndef SYM1
0007B2r 2               GET:
0007B2r 2  20 rr rr             jsr     ERRDIR
0007B5r 2               ; CBM: if GET#, then switch input
0007B5r 2               .ifdef CONFIG_FILE
0007B5r 2                       cmp     #'#'
0007B5r 2                       bne     LCAB6
0007B5r 2                       jsr     CHRGET
0007B5r 2                       jsr     GETBYT
0007B5r 2                       lda     #','
0007B5r 2                       jsr     SYNCHR
0007B5r 2                       jsr     CHKIN
0007B5r 2                       stx     CURDVC
0007B5r 2               LCAB6:
0007B5r 2               .endif
0007B5r 2  A2 01                ldx     #<(INPUTBUFFER+1)
0007B7r 2  A0 02                ldy     #>(INPUTBUFFER+1)
0007B9r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
0007B9r 2  A9 00                lda     #$00
0007BBr 2  8D 01 02             sta     INPUTBUFFER+1
0007BEr 2               .else
0007BEr 2                       sty     INPUTBUFFER+1
0007BEr 2               .endif
0007BEr 2  A9 40                lda     #$40
0007C0r 2  20 rr rr             jsr     PROCESS_INPUT_LIST
0007C3r 2               ; CBM: if GET#, then switch input back
0007C3r 2               .ifdef CONFIG_FILE
0007C3r 2                       ldx     CURDVC
0007C3r 2                       bne     LCAD8
0007C3r 2               .endif
0007C3r 2  60                   rts
0007C4r 2               .endif
0007C4r 2               .endif
0007C4r 2               
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               ; "INPUT#" STATEMENT
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               .ifdef CONFIG_FILE
0007C4r 2               INPUTH:
0007C4r 2                       jsr     GETBYT
0007C4r 2                       lda     #$2C
0007C4r 2                       jsr     SYNCHR
0007C4r 2                       jsr     CHKIN
0007C4r 2                       stx     CURDVC
0007C4r 2                       jsr     L2A9E
0007C4r 2               LCAD6:
0007C4r 2                       lda     CURDVC
0007C4r 2               LCAD8:
0007C4r 2                       jsr     CLRCH
0007C4r 2                       ldx     #$00
0007C4r 2                       stx     CURDVC
0007C4r 2                       rts
0007C4r 2               LCAE0:
0007C4r 2               .endif
0007C4r 2               
0007C4r 2               .ifdef SYM1
0007C4r 2               LC9B0:
0007C4r 2                       jsr     OUTQUES	; '?'
0007C4r 2                       jsr     OUTSP
0007C4r 2                       jmp     L2A9E
0007C4r 2               .endif
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               ; "INPUT" STATEMENT
0007C4r 2               ; ----------------------------------------------------------------------------
0007C4r 2               INPUT:
0007C4r 2               .ifndef KBD
0007C4r 2  46 17                lsr     Z14
0007C6r 2               .endif
0007C6r 2               .ifdef AIM65
0007C6r 2                       lda     PRIFLG
0007C6r 2                       sta     ZBE
0007C6r 2                       jsr     LCFFA
0007C6r 2               .endif
0007C6r 2  C9 22                cmp     #$22
0007C8r 2               .ifdef SYM1
0007C8r 2                       bne     LC9B0
0007C8r 2               .else
0007C8r 2  D0 0B                bne     L2A9E
0007CAr 2               .endif
0007CAr 2  20 rr rr             jsr     STRTXT
0007CDr 2  A9 3B                lda     #$3B
0007CFr 2  20 rr rr             jsr     SYNCHR
0007D2r 2  20 rr rr             jsr     STRPRT
0007D5r 2               L2A9E:
0007D5r 2  20 rr rr             jsr     ERRDIR
0007D8r 2  A9 2C                lda     #$2C
0007DAr 2  8D FF 01             sta     INPUTBUFFER-1
0007DDr 2               LCAF8:
0007DDr 2               .ifdef APPLE
0007DDr 2  20 rr rr             jsr     INLINX
0007E0r 2               .elseif .def(SYM1)
0007E0r 2                       jsr     INLIN
0007E0r 2               .else
0007E0r 2                       jsr     NXIN
0007E0r 2               .endif
0007E0r 2               .ifdef KBD
0007E0r 2                       bmi     L2ABE
0007E0r 2               .else
0007E0r 2                 .ifdef CONFIG_FILE
0007E0r 2                       lda     CURDVC
0007E0r 2                       beq     LCB0C
0007E0r 2                       lda     Z96
0007E0r 2                       and     #$02
0007E0r 2                       beq     LCB0C
0007E0r 2                       jsr     LCAD6
0007E0r 2                       jmp     DATA
0007E0r 2               LCB0C:
0007E0r 2                 .endif
0007E0r 2  AD 00 02             lda     INPUTBUFFER
0007E3r 2  D0 12                bne     L2ABE
0007E5r 2                 .ifdef CONFIG_FILE
0007E5r 2                       lda     CURDVC
0007E5r 2                       bne     LCAF8
0007E5r 2                 .endif
0007E5r 2                 .ifdef CONFIG_CBM1_PATCHES
0007E5r 2                       jmp     PATCH1
0007E5r 2                 .else
0007E5r 2  18                   clc
0007E6r 2  4C rr rr             jmp     CONTROL_C_TYPED
0007E9r 2                 .endif
0007E9r 2               .endif
0007E9r 2               
0007E9r 2               NXIN:
0007E9r 2               .ifdef KBD
0007E9r 2                       jsr     INLIN
0007E9r 2                       bmi     RTS20
0007E9r 2                       pla
0007E9r 2                       jmp     LE86C
0007E9r 2               .else
0007E9r 2                 .ifdef CONFIG_FILE
0007E9r 2                       lda     CURDVC
0007E9r 2                       bne     LCB21
0007E9r 2                 .endif
0007E9r 2  20 rr rr             jsr     OUTQUES	; '?'
0007ECr 2  20 rr rr             jsr     OUTSP
0007EFr 2               LCB21:
0007EFr 2  4C rr rr             jmp     INLIN
0007F2r 2               .endif
0007F2r 2               
0007F2r 2               ; ----------------------------------------------------------------------------
0007F2r 2               ; "GETC" STATEMENT
0007F2r 2               ; ----------------------------------------------------------------------------
0007F2r 2               .ifdef KBD
0007F2r 2               GETC:
0007F2r 2                       jsr     CONINT
0007F2r 2                       jsr     LF43D
0007F2r 2                       jmp     LE664
0007F2r 2               .endif
0007F2r 2               
0007F2r 2               ; ----------------------------------------------------------------------------
0007F2r 2               ; "READ" STATEMENT
0007F2r 2               ; ----------------------------------------------------------------------------
0007F2r 2               READ:
0007F2r 2  A6 80                ldx     DATPTR
0007F4r 2  A4 81                ldy     DATPTR+1
0007F6r 2               .ifdef CONFIG_NO_READ_Y_IS_ZERO_HACK
0007F6r 2               ; AppleSoft II, too
0007F6r 2                       lda     #$98	; READ
0007F6r 2                       .byte   $2C
0007F6r 2               L2ABE:
0007F6r 2                       lda     #$00	; INPUT
0007F6r 2               .else
0007F6r 2  A9                   .byte   $A9	; LDA #$98
0007F7r 2               L2ABE:
0007F7r 2  98                   tya
0007F8r 2               .endif
0007F8r 2               
0007F8r 2               ; ----------------------------------------------------------------------------
0007F8r 2               ; PROCESS INPUT LIST
0007F8r 2               ;
0007F8r 2               ; (Y,X) IS ADDRESS OF INPUT DATA STRING
0007F8r 2               ; (A) = VALUE FOR INPUTFLG:  $00 FOR INPUT
0007F8r 2               ; 				$40 FOR GET
0007F8r 2               ;				$98 FOR READ
0007F8r 2               ; ----------------------------------------------------------------------------
0007F8r 2               PROCESS_INPUT_LIST:
0007F8r 2  85 15                sta     INPUTFLG
0007FAr 2  86 82                stx     INPTR
0007FCr 2  84 83                sty     INPTR+1
0007FEr 2               PROCESS_INPUT_ITEM:
0007FEr 2  20 rr rr             jsr     PTRGET
000801r 2  85 88                sta     FORPNT
000803r 2  84 89                sty     FORPNT+1
000805r 2  A5 B9                lda     TXTPTR
000807r 2  A4 BA                ldy     TXTPTR+1
000809r 2  85 53                sta     TXPSV
00080Br 2  84 54                sty     TXPSV+1
00080Dr 2  A6 82                ldx     INPTR
00080Fr 2  A4 83                ldy     INPTR+1
000811r 2  86 B9                stx     TXTPTR
000813r 2  84 BA                sty     TXTPTR+1
000815r 2  20 B8 00             jsr     CHRGOT
000818r 2  D0 1E                bne     INSTART
00081Ar 2  24 15                bit     INPUTFLG
00081Cr 2               .ifndef CONFIG_SMALL ; GET
00081Cr 2                .ifndef SYM1
00081Cr 2  50 0E                bvc     L2AF0
00081Er 2                 .ifdef MICROTAN
00081Er 2                       jsr     MONRDKEY2
00081Er 2                 .elseif .def(AIM65)
00081Er 2                       jsr     MONRDKEY2
00081Er 2                 .else
00081Er 2  20 0C FD             jsr     MONRDKEY
000821r 2                 .endif
000821r 2                 .ifdef CONFIG_IO_MSB
000821r 2  29 7F                and     #$7F
000823r 2                 .endif
000823r 2  8D 00 02             sta     INPUTBUFFER
000826r 2               ; BUG: The beq/bne L2AF8 below is supposed
000826r 2               ; to be always taken. For this to happen,
000826r 2               ; the last load must be a 0 for beq
000826r 2               ; and != 0 for bne. The original Microsoft
000826r 2               ; code had ldx/ldy/bne here, which was only
000826r 2               ; correct for a non-ZP INPUTBUFFER. Commodore
000826r 2               ; fixed it in CBMBASIC V1 by swapping the
000826r 2               ; ldx and the ldy. It was broken on KIM,
000826r 2               ; but okay on APPLE and CBM2, because
000826r 2               ; these used a non-ZP INPUTBUFFER.
000826r 2               ; Microsoft fixed this somewhere after KIM
000826r 2               ; and before MICROTAN, by using beq instead
000826r 2               ; of bne in the ZP case.
000826r 2                 .ifdef CBM1
000826r 2                       ldy     #>(INPUTBUFFER-1)
000826r 2                       ldx     #<(INPUTBUFFER-1)
000826r 2                 .else
000826r 2  A2 FF                ldx     #<(INPUTBUFFER-1)
000828r 2  A0 01                ldy     #>(INPUTBUFFER-1)
00082Ar 2                 .endif
00082Ar 2                 .if .def(CONFIG_2) && (!.def(CONFIG_NO_INPUTBUFFER_ZP))
00082Ar 2                       beq     L2AF8	; always
00082Ar 2                 .else
00082Ar 2  D0 08                bne     L2AF8	; always
00082Cr 2                 .endif
00082Cr 2               L2AF0:
00082Cr 2                .endif
00082Cr 2               .endif
00082Cr 2  30 71                bmi     FINDATA
00082Er 2               .ifdef CONFIG_FILE
00082Er 2                       lda     CURDVC
00082Er 2                       bne     LCB64
00082Er 2               .endif
00082Er 2               .ifdef KBD
00082Er 2                       jsr     OUTQUESSP
00082Er 2               .else
00082Er 2  20 rr rr             jsr     OUTQUES
000831r 2               .endif
000831r 2               LCB64:
000831r 2  20 rr rr             jsr     NXIN
000834r 2               L2AF8:
000834r 2  86 B9                stx     TXTPTR
000836r 2  84 BA                sty     TXTPTR+1
000838r 2               
000838r 2               ; ----------------------------------------------------------------------------
000838r 2               INSTART:
000838r 2  20 B2 00             jsr     CHRGET
00083Br 2  24 11                bit     VALTYP
00083Dr 2  10 31                bpl     L2B34
00083Fr 2               .ifndef CONFIG_SMALL ; GET
00083Fr 2                .ifndef SYM1
00083Fr 2  24 15                bit     INPUTFLG
000841r 2  50 09                bvc     L2B10
000843r 2                 .ifdef CONFIG_CBM1_PATCHES
000843r 2                       lda     #$00
000843r 2                       jsr     PATCH4
000843r 2                       nop
000843r 2                 .else
000843r 2  E8                   inx
000844r 2  86 B9                stx     TXTPTR
000846r 2  A9 00                lda     #$00
000848r 2  85 0D                sta     CHARAC
00084Ar 2  F0 0C                beq     L2B1C
00084Cr 2                 .endif
00084Cr 2               L2B10:
00084Cr 2                .endif
00084Cr 2               .endif
00084Cr 2  85 0D                sta     CHARAC
00084Er 2  C9 22                cmp     #$22
000850r 2  F0 07                beq     L2B1D
000852r 2  A9 3A                lda     #$3A
000854r 2  85 0D                sta     CHARAC
000856r 2  A9 2C                lda     #$2C
000858r 2               L2B1C:
000858r 2  18                   clc
000859r 2               L2B1D:
000859r 2  85 0E                sta     ENDCHR
00085Br 2  A5 B9                lda     TXTPTR
00085Dr 2  A4 BA                ldy     TXTPTR+1
00085Fr 2  69 00                adc     #$00
000861r 2  90 01                bcc     L2B28
000863r 2  C8                   iny
000864r 2               L2B28:
000864r 2  20 rr rr             jsr     STRLT2
000867r 2  20 rr rr             jsr     POINT
00086Ar 2               .ifdef CONFIG_SMALL
00086Ar 2                       jsr     LETSTRING
00086Ar 2               .else
00086Ar 2  20 rr rr             jsr     PUTSTR
00086Dr 2               .endif
00086Dr 2  4C rr rr             jmp     INPUT_MORE
000870r 2               ; ----------------------------------------------------------------------------
000870r 2               L2B34:
000870r 2  20 rr rr             jsr     FIN
000873r 2               .ifdef CONFIG_SMALL
000873r 2                       jsr     SETFOR
000873r 2               .else
000873r 2  A5 12                lda     VALTYP+1
000875r 2  20 rr rr             jsr     LET2
000878r 2               .endif
000878r 2               ; ----------------------------------------------------------------------------
000878r 2               INPUT_MORE:
000878r 2  20 B8 00             jsr     CHRGOT
00087Br 2  F0 07                beq     L2B48
00087Dr 2  C9 2C                cmp     #$2C
00087Fr 2  F0 03                beq     L2B48
000881r 2  4C rr rr             jmp     INPUTERR
000884r 2               L2B48:
000884r 2  A5 B9                lda     TXTPTR
000886r 2  A4 BA                ldy     TXTPTR+1
000888r 2  85 82                sta     INPTR
00088Ar 2  84 83                sty     INPTR+1
00088Cr 2  A5 53                lda     TXPSV
00088Er 2  A4 54                ldy     TXPSV+1
000890r 2  85 B9                sta     TXTPTR
000892r 2  84 BA                sty     TXTPTR+1
000894r 2  20 B8 00             jsr     CHRGOT
000897r 2  F0 2C                beq     INPDONE
000899r 2  20 rr rr             jsr     CHKCOM
00089Cr 2  4C rr rr             jmp     PROCESS_INPUT_ITEM
00089Fr 2               ; ----------------------------------------------------------------------------
00089Fr 2               FINDATA:
00089Fr 2  20 rr rr             jsr     DATAN
0008A2r 2  C8                   iny
0008A3r 2  AA                   tax
0008A4r 2  D0 12                bne     L2B7C
0008A6r 2  A2 2A                ldx     #ERR_NODATA
0008A8r 2  C8                   iny
0008A9r 2  B1 B9                lda     (TXTPTR),y
0008ABr 2  F0 69                beq     GERR
0008ADr 2  C8                   iny
0008AEr 2  B1 B9                lda     (TXTPTR),y
0008B0r 2  85 7E                sta     Z8C
0008B2r 2  C8                   iny
0008B3r 2  B1 B9                lda     (TXTPTR),y
0008B5r 2  C8                   iny
0008B6r 2  85 7F                sta     Z8C+1
0008B8r 2               L2B7C:
0008B8r 2  B1 B9                lda     (TXTPTR),y
0008BAr 2  AA                   tax
0008BBr 2  20 rr rr             jsr     ADDON
0008BEr 2  E0 83                cpx     #$83
0008C0r 2  D0 DD                bne     FINDATA
0008C2r 2  4C rr rr             jmp     INSTART
0008C5r 2               ; ---NO MORE INPUT REQUESTED------
0008C5r 2               INPDONE:
0008C5r 2  A5 82                lda     INPTR
0008C7r 2  A4 83                ldy     INPTR+1
0008C9r 2  A6 15                ldx     INPUTFLG
0008CBr 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_11))
0008CBr 2                       beq     L2B94 ; INPUT
0008CBr 2               .else
0008CBr 2  10 03                bpl     L2B94; INPUT or GET
0008CDr 2               .endif
0008CDr 2  4C rr rr             jmp     SETDA
0008D0r 2               L2B94:
0008D0r 2  A0 00                ldy     #$00
0008D2r 2               .ifdef AIM65
0008D2r 2                       jsr     LB8B1
0008D2r 2               .endif
0008D2r 2  B1 82                lda     (INPTR),y
0008D4r 2  F0 07                beq     L2BA1
0008D6r 2               .ifdef CONFIG_FILE
0008D6r 2                       lda     CURDVC
0008D6r 2                       bne     L2BA1
0008D6r 2               .endif
0008D6r 2  A9 rr                lda     #<ERREXTRA
0008D8r 2  A0 rr                ldy     #>ERREXTRA
0008DAr 2  4C rr rr             jmp     STROUT
0008DDr 2               L2BA1:
0008DDr 2  60                   rts
0008DEr 2               
0008DEr 2               ; ----------------------------------------------------------------------------
0008DEr 2               ERREXTRA:
0008DEr 2               .ifdef KBD
0008DEr 2                       .byte   "?Extra"
0008DEr 2               .else
0008DEr 2  3F 45 58 54          .byte   "?EXTRA IGNORED"
0008E2r 2  52 41 20 49  
0008E6r 2  47 4E 4F 52  
0008ECr 2               .endif
0008ECr 2  0D 0A 00             .byte   $0D,$0A,$00
0008EFr 2               ERRREENTRY:
0008EFr 2               .ifdef KBD
0008EFr 2                       .byte   "What?"
0008EFr 2               .else
0008EFr 2  3F 52 45 44          .byte   "?REDO FROM START"
0008F3r 2  4F 20 46 52  
0008F7r 2  4F 4D 20 53  
0008FFr 2               .endif
0008FFr 2  0D 0A 00             .byte   $0D,$0A,$00
000902r 2               .ifdef KBD
000902r 2               LEA30:
000902r 2                       .byte   "B"
000902r 2                       .byte   $FD
000902r 2                       .byte   "GsBASIC"
000902r 2                       .byte   $00,$1B,$0D,$13
000902r 2                       .byte   " BASIC"
000902r 2               .endif
000902r 2               
000902r 1               .include "eval.s"
000902r 2               .segment "CODE"
000902r 2               
000902r 2               ; ----------------------------------------------------------------------------
000902r 2               ; "NEXT" STATEMENT
000902r 2               ; ----------------------------------------------------------------------------
000902r 2               NEXT:
000902r 2  D0 04                bne     NEXT1
000904r 2  A0 00                ldy     #$00
000906r 2  F0 03                beq     NEXT2
000908r 2               NEXT1:
000908r 2  20 rr rr             jsr     PTRGET
00090Br 2               NEXT2:
00090Br 2  85 88                sta     FORPNT
00090Dr 2  84 89                sty     FORPNT+1
00090Fr 2  20 rr rr             jsr     GTFORPNT
000912r 2  F0 04                beq     NEXT3
000914r 2  A2 00                ldx     #$00
000916r 2               GERR:
000916r 2  F0 69                beq     JERROR
000918r 2               NEXT3:
000918r 2  9A                   txs
000919r 2               .ifndef CONFIG_2
000919r 2  E8                   inx
00091Ar 2  E8                   inx
00091Br 2  E8                   inx
00091Cr 2  E8                   inx
00091Dr 2               .endif
00091Dr 2  8A                   txa
00091Er 2               .ifdef CONFIG_2
00091Er 2                       clc
00091Er 2                       adc     #$04
00091Er 2                       pha
00091Er 2                       adc     #BYTES_FP+1
00091Er 2                       sta     DEST
00091Er 2                       pla
00091Er 2               .else
00091Er 2  E8                   inx
00091Fr 2  E8                   inx
000920r 2  E8                   inx
000921r 2  E8                   inx
000922r 2  E8                   inx
000923r 2               .ifndef CONFIG_SMALL
000923r 2  E8                   inx
000924r 2               .endif
000924r 2  86 63                stx     DEST
000926r 2               .endif
000926r 2  A0 01                ldy     #>STACK
000928r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
00092Br 2  BA                   tsx
00092Cr 2  BD 09 01             lda     STACK+BYTES_FP+4,x
00092Fr 2  85 A5                sta     FACSIGN
000931r 2  A5 88                lda     FORPNT
000933r 2  A4 89                ldy     FORPNT+1
000935r 2  20 rr rr             jsr     FADD
000938r 2  20 rr rr             jsr     SETFOR
00093Br 2  A0 01                ldy     #>STACK
00093Dr 2  20 rr rr             jsr     FCOMP2
000940r 2  BA                   tsx
000941r 2  38                   sec
000942r 2  FD 09 01             sbc     STACK+BYTES_FP+4,x
000945r 2  F0 17                beq     L2C22
000947r 2  BD 0F 01             lda     STACK+2*BYTES_FP+5,x
00094Ar 2  85 78                sta     CURLIN
00094Cr 2  BD 10 01             lda     STACK+2*BYTES_FP+6,x
00094Fr 2  85 79                sta     CURLIN+1
000951r 2  BD 12 01             lda     STACK+2*BYTES_FP+8,x
000954r 2  85 B9                sta     TXTPTR
000956r 2  BD 11 01             lda     STACK+2*BYTES_FP+7,x
000959r 2  85 BA                sta     TXTPTR+1
00095Br 2               L2C1F:
00095Br 2  4C rr rr             jmp     NEWSTT
00095Er 2               L2C22:
00095Er 2  8A                   txa
00095Fr 2  69 11                adc     #2*BYTES_FP+7
000961r 2  AA                   tax
000962r 2  9A                   txs
000963r 2  20 B8 00             jsr     CHRGOT
000966r 2  C9 2C                cmp     #$2C
000968r 2  D0 F1                bne     L2C1F
00096Ar 2  20 B2 00             jsr     CHRGET
00096Dr 2  20 rr rr             jsr     NEXT1
000970r 2               
000970r 2               ; ----------------------------------------------------------------------------
000970r 2               ; EVALUATE EXPRESSION, MAKE SURE IT IS NUMERIC
000970r 2               ; ----------------------------------------------------------------------------
000970r 2               FRMNUM:
000970r 2  20 rr rr             jsr     FRMEVL
000973r 2               
000973r 2               ; ----------------------------------------------------------------------------
000973r 2               ; MAKE SURE (FAC) IS NUMERIC
000973r 2               ; ----------------------------------------------------------------------------
000973r 2               CHKNUM:
000973r 2  18                   clc
000974r 2  24                   .byte   $24
000975r 2               
000975r 2               ; ----------------------------------------------------------------------------
000975r 2               ; MAKE SURE (FAC) IS STRING
000975r 2               ; ----------------------------------------------------------------------------
000975r 2               CHKSTR:
000975r 2  38                   sec
000976r 2               
000976r 2               ; ----------------------------------------------------------------------------
000976r 2               ; MAKE SURE (FAC) IS CORRECT TYPE
000976r 2               ; IF C=0, TYPE MUST BE NUMERIC
000976r 2               ; IF C=1, TYPE MUST BE STRING
000976r 2               ; ----------------------------------------------------------------------------
000976r 2               CHKVAL:
000976r 2  24 11                bit     VALTYP
000978r 2  30 03                bmi     L2C41
00097Ar 2  B0 03                bcs     L2C43
00097Cr 2               L2C40:
00097Cr 2  60                   rts
00097Dr 2               L2C41:
00097Dr 2  B0 FD                bcs     L2C40
00097Fr 2               L2C43:
00097Fr 2  A2 A3                ldx     #ERR_BADTYPE
000981r 2               JERROR:
000981r 2  4C rr rr             jmp     ERROR
000984r 2               
000984r 2               ; ----------------------------------------------------------------------------
000984r 2               ; EVALUATE THE EXPRESSION AT TXTPTR, LEAVING THE
000984r 2               ; RESULT IN FAC.  WORKS FOR BOTH STRING AND NUMERIC
000984r 2               ; EXPRESSIONS.
000984r 2               ; ----------------------------------------------------------------------------
000984r 2               FRMEVL:
000984r 2  A6 B9                ldx     TXTPTR
000986r 2  D0 02                bne     L2C4E
000988r 2  C6 BA                dec     TXTPTR+1
00098Ar 2               L2C4E:
00098Ar 2  C6 B9                dec     TXTPTR
00098Cr 2  A2 00                ldx     #$00
00098Er 2  24                   .byte   $24
00098Fr 2               FRMEVL1:
00098Fr 2  48                   pha
000990r 2  8A                   txa
000991r 2  48                   pha
000992r 2  A9 01                lda     #$01
000994r 2  20 rr rr             jsr     CHKMEM
000997r 2  20 rr rr             jsr     FRM_ELEMENT
00099Ar 2  A9 00                lda     #$00
00099Cr 2  85 8C                sta     CPRTYP
00099Er 2               FRMEVL2:
00099Er 2  20 B8 00             jsr     CHRGOT
0009A1r 2               L2C65:
0009A1r 2  38                   sec
0009A2r 2  E9 AA                sbc     #TOKEN_GREATER
0009A4r 2  90 17                bcc     L2C81
0009A6r 2  C9 03                cmp     #$03
0009A8r 2  B0 13                bcs     L2C81
0009AAr 2  C9 01                cmp     #$01
0009ACr 2  2A                   rol     a
0009ADr 2  49 01                eor     #$01
0009AFr 2  45 8C                eor     CPRTYP
0009B1r 2  C5 8C                cmp     CPRTYP
0009B3r 2  90 61                bcc     SNTXERR
0009B5r 2  85 8C                sta     CPRTYP
0009B7r 2  20 B2 00             jsr     CHRGET
0009BAr 2  4C rr rr             jmp     L2C65
0009BDr 2               L2C81:
0009BDr 2  A6 8C                ldx     CPRTYP
0009BFr 2  D0 2C                bne     FRM_RELATIONAL
0009C1r 2  B0 7B                bcs     L2D02
0009C3r 2  69 07                adc     #$07
0009C5r 2  90 77                bcc     L2D02
0009C7r 2  65 11                adc     VALTYP
0009C9r 2  D0 03                bne     L2C92
0009CBr 2  4C rr rr             jmp     CAT
0009CEr 2               L2C92:
0009CEr 2  69 FF                adc     #$FF
0009D0r 2  85 61                sta     INDEX
0009D2r 2  0A                   asl     a
0009D3r 2  65 61                adc     INDEX
0009D5r 2  A8                   tay
0009D6r 2               FRM_PRECEDENCE_TEST:
0009D6r 2  68                   pla
0009D7r 2  D9 rr rr             cmp     MATHTBL,y
0009DAr 2  B0 67                bcs     FRM_PERFORM1
0009DCr 2  20 rr rr             jsr     CHKNUM
0009DFr 2               L2CA3:
0009DFr 2  48                   pha
0009E0r 2               L2CA4:
0009E0r 2  20 rr rr             jsr     FRM_RECURSE
0009E3r 2  68                   pla
0009E4r 2  A4 8A                ldy     LASTOP
0009E6r 2  10 17                bpl     PREFNC
0009E8r 2  AA                   tax
0009E9r 2  F0 56                beq     GOEX
0009EBr 2  D0 5F                bne     FRM_PERFORM2
0009EDr 2               
0009EDr 2               ; ----------------------------------------------------------------------------
0009EDr 2               ; FOUND ONE OR MORE RELATIONAL OPERATORS <,=,>
0009EDr 2               ; ----------------------------------------------------------------------------
0009EDr 2               FRM_RELATIONAL:
0009EDr 2  46 11                lsr     VALTYP
0009EFr 2  8A                   txa
0009F0r 2  2A                   rol     a
0009F1r 2  A6 B9                ldx     TXTPTR
0009F3r 2  D0 02                bne     L2CBB
0009F5r 2  C6 BA                dec     TXTPTR+1
0009F7r 2               L2CBB:
0009F7r 2  C6 B9                dec     TXTPTR
0009F9r 2  A0 1B                ldy     #$1B
0009FBr 2  85 8C                sta     CPRTYP
0009FDr 2  D0 D7                bne     FRM_PRECEDENCE_TEST
0009FFr 2               PREFNC:
0009FFr 2  D9 rr rr             cmp     MATHTBL,y
000A02r 2  B0 48                bcs     FRM_PERFORM2
000A04r 2  90 D9                bcc     L2CA3
000A06r 2               
000A06r 2               ; ----------------------------------------------------------------------------
000A06r 2               ; STACK THIS OPERATION AND CALL FRMEVL FOR
000A06r 2               ; ANOTHER ONE
000A06r 2               ; ----------------------------------------------------------------------------
000A06r 2               FRM_RECURSE:
000A06r 2  B9 rr rr             lda     MATHTBL+2,y
000A09r 2  48                   pha
000A0Ar 2  B9 rr rr             lda     MATHTBL+1,y
000A0Dr 2  48                   pha
000A0Er 2  20 rr rr             jsr     FRM_STACK1
000A11r 2  A5 8C                lda     CPRTYP
000A13r 2  4C rr rr             jmp     FRMEVL1
000A16r 2               SNTXERR:
000A16r 2  4C rr rr             jmp     SYNERR
000A19r 2               
000A19r 2               ; ----------------------------------------------------------------------------
000A19r 2               ; STACK (FAC)
000A19r 2               ; THREE ENTRY POINTS:
000A19r 2               ; 	1, FROM FRMEVL
000A19r 2               ;	2, FROM "STEP"
000A19r 2               ;	3, FROM "FOR"
000A19r 2               ; ----------------------------------------------------------------------------
000A19r 2               FRM_STACK1:
000A19r 2  A5 A5                lda     FACSIGN
000A1Br 2  BE rr rr             ldx     MATHTBL,y
000A1Er 2               
000A1Er 2               ; ----------------------------------------------------------------------------
000A1Er 2               ; ENTER HERE FROM "STEP", TO PUSH STEP SIGN AND VALUE
000A1Er 2               ; ----------------------------------------------------------------------------
000A1Er 2               FRM_STACK2:
000A1Er 2  A8                   tay
000A1Fr 2  68                   pla
000A20r 2  85 61                sta     INDEX
000A22r 2               .ifndef CONFIG_2B
000A22r 2  E6 61                inc     INDEX ; bug: assumes not on page boundary
000A24r 2               ; bug exists on AppleSoft II
000A24r 2               .endif
000A24r 2  68                   pla
000A25r 2  85 62                sta     INDEX+1
000A27r 2               .ifdef CONFIG_2B
000A27r 2                       inc     INDEX
000A27r 2                       bne     LEB69
000A27r 2                       inc     INDEX+1
000A27r 2               LEB69:
000A27r 2               .endif
000A27r 2  98                   tya
000A28r 2  48                   pha
000A29r 2               
000A29r 2               ; ----------------------------------------------------------------------------
000A29r 2               ; ENTER HERE FROM "FOR", WITH (INDEX) = STEP,
000A29r 2               ; TO PUSH INITIAL VALUE OF "FOR" VARIABLE
000A29r 2               ; ----------------------------------------------------------------------------
000A29r 2               FRM_STACK3:
000A29r 2  20 rr rr             jsr     ROUND_FAC
000A2Cr 2               .ifndef CONFIG_SMALL
000A2Cr 2  A5 A4                lda     FAC+4
000A2Er 2  48                   pha
000A2Fr 2               .endif
000A2Fr 2  A5 A3                lda     FAC+3
000A31r 2  48                   pha
000A32r 2  A5 A2                lda     FAC+2
000A34r 2  48                   pha
000A35r 2  A5 A1                lda     FAC+1
000A37r 2  48                   pha
000A38r 2  A5 A0                lda     FAC
000A3Ar 2  48                   pha
000A3Br 2  6C 61 00             jmp     (INDEX)
000A3Er 2               L2D02:
000A3Er 2  A0 FF                ldy     #$FF
000A40r 2  68                   pla
000A41r 2               GOEX:
000A41r 2  F0 23                beq     EXIT
000A43r 2               
000A43r 2               ; ----------------------------------------------------------------------------
000A43r 2               ; PERFORM STACKED OPERATION
000A43r 2               ;
000A43r 2               ; (A) = PRECEDENCE BYTE
000A43r 2               ; STACK:  1 -- CPRMASK
000A43r 2               ;	5 -- (ARG)
000A43r 2               ;	2 -- ADDR OF PERFORMER
000A43r 2               ; ----------------------------------------------------------------------------
000A43r 2               FRM_PERFORM1:
000A43r 2  C9 64                cmp     #$64
000A45r 2  F0 03                beq     L2D0E
000A47r 2  20 rr rr             jsr     CHKNUM
000A4Ar 2               L2D0E:
000A4Ar 2  84 8A                sty     LASTOP
000A4Cr 2               FRM_PERFORM2:
000A4Cr 2  68                   pla
000A4Dr 2  4A                   lsr     a
000A4Er 2  85 16                sta     CPRMASK
000A50r 2  68                   pla
000A51r 2  85 A8                sta     ARG
000A53r 2  68                   pla
000A54r 2  85 A9                sta     ARG+1
000A56r 2  68                   pla
000A57r 2  85 AA                sta     ARG+2
000A59r 2  68                   pla
000A5Ar 2  85 AB                sta     ARG+3
000A5Cr 2  68                   pla
000A5Dr 2               .ifndef CONFIG_SMALL
000A5Dr 2  85 AC                sta     ARG+4
000A5Fr 2  68                   pla
000A60r 2               .endif
000A60r 2  85 AD                sta     ARGSIGN
000A62r 2  45 A5                eor     FACSIGN
000A64r 2  85 AE                sta     SGNCPR
000A66r 2               EXIT:
000A66r 2  A5 A0                lda     FAC
000A68r 2  60                   rts
000A69r 2               
000A69r 2               ; ----------------------------------------------------------------------------
000A69r 2               ; GET ELEMENT IN EXPRESSION
000A69r 2               ;
000A69r 2               ; GET VALUE OF VARIABLE OR NUMBER AT TXTPNT, OR POINT
000A69r 2               ; TO STRING DESCRIPTOR IF A STRING, AND PUT IN FAC.
000A69r 2               ; ----------------------------------------------------------------------------
000A69r 2               FRM_ELEMENT:
000A69r 2  A9 00                lda     #$00
000A6Br 2  85 11                sta     VALTYP
000A6Dr 2               L2D31:
000A6Dr 2  20 B2 00             jsr     CHRGET
000A70r 2  B0 03                bcs     L2D39
000A72r 2               L2D36:
000A72r 2  4C rr rr             jmp     FIN
000A75r 2               L2D39:
000A75r 2  20 rr rr             jsr     ISLETC
000A78r 2  B0 67                bcs     FRM_VARIABLE
000A7Ar 2               .ifdef CONFIG_CBM_ALL
000A7Ar 2                       cmp     #$FF
000A7Ar 2                       bne     LCDC1
000A7Ar 2                       lda     #<CON_PI
000A7Ar 2                       ldy     #>CON_PI
000A7Ar 2                       jsr     LOAD_FAC_FROM_YA
000A7Ar 2                       jmp     CHRGET
000A7Ar 2               CON_PI:
000A7Ar 2                       .byte   $82,$49,$0f,$DA,$A1
000A7Ar 2               LCDC1:
000A7Ar 2               .endif
000A7Ar 2  C9 2E                cmp     #$2E
000A7Cr 2  F0 F4                beq     L2D36
000A7Er 2  C9 A4                cmp     #TOKEN_MINUS
000A80r 2  F0 58                beq     MIN
000A82r 2  C9 A3                cmp     #TOKEN_PLUS
000A84r 2  F0 E7                beq     L2D31
000A86r 2  C9 22                cmp     #$22
000A88r 2  D0 0F                bne     NOT_
000A8Ar 2               
000A8Ar 2               ; ----------------------------------------------------------------------------
000A8Ar 2               ; STRING CONSTANT ELEMENT
000A8Ar 2               ;
000A8Ar 2               ; SET Y,A = (TXTPTR)+CARRY
000A8Ar 2               ; ----------------------------------------------------------------------------
000A8Ar 2               STRTXT:
000A8Ar 2  A5 B9                lda     TXTPTR
000A8Cr 2  A4 BA                ldy     TXTPTR+1
000A8Er 2  69 00                adc     #$00
000A90r 2  90 01                bcc     L2D57
000A92r 2  C8                   iny
000A93r 2               L2D57:
000A93r 2  20 rr rr             jsr     STRLIT
000A96r 2  4C rr rr             jmp     POINT
000A99r 2               
000A99r 2               ; ----------------------------------------------------------------------------
000A99r 2               ; "NOT" FUNCTION
000A99r 2               ; IF FAC=0, RETURN FAC=1
000A99r 2               ; IF FAC<>0, RETURN FAC=0
000A99r 2               ; ----------------------------------------------------------------------------
000A99r 2               NOT_:
000A99r 2  C9 A1                cmp     #TOKEN_NOT
000A9Br 2  D0 13                bne     L2D74
000A9Dr 2  A0 18                ldy     #$18
000A9Fr 2  D0 3B                bne     EQUL
000AA1r 2               
000AA1r 2               ; ----------------------------------------------------------------------------
000AA1r 2               ; COMPARISON FOR EQUALITY (= OPERATOR)
000AA1r 2               ; ALSO USED TO EVALUATE "NOT" FUNCTION
000AA1r 2               ; ----------------------------------------------------------------------------
000AA1r 2               EQUOP:
000AA1r 2  20 rr rr             jsr     AYINT
000AA4r 2  A5 A4                lda     FAC_LAST
000AA6r 2  49 FF                eor     #$FF
000AA8r 2  A8                   tay
000AA9r 2  A5 A3                lda     FAC_LAST-1
000AABr 2  49 FF                eor     #$FF
000AADr 2  4C rr rr             jmp     GIVAYF
000AB0r 2               L2D74:
000AB0r 2               .ifdef SYM1
000AB0r 2                       cmp     #TOKEN_USR
000AB0r 2                       bne     LCC8A
000AB0r 2                       jmp     LCDBD
000AB0r 2               LCC8A:
000AB0r 2                       cmp     #$26
000AB0r 2                       bne     LCC91
000AB0r 2                       jmp     LCDFE
000AB0r 2               LCC91:
000AB0r 2               .endif
000AB0r 2  C9 9E                cmp     #TOKEN_FN
000AB2r 2  D0 03                bne     L2D7B
000AB4r 2  4C rr rr             jmp     L31F3
000AB7r 2               L2D7B:
000AB7r 2  C9 AD                cmp     #TOKEN_SGN
000AB9r 2  90 03                bcc     PARCHK
000ABBr 2  4C rr rr             jmp     UNARY
000ABEr 2               
000ABEr 2               ; ----------------------------------------------------------------------------
000ABEr 2               ; EVALUATE "(EXPRESSION)"
000ABEr 2               ; ----------------------------------------------------------------------------
000ABEr 2               PARCHK:
000ABEr 2  20 rr rr             jsr     CHKOPN
000AC1r 2  20 rr rr             jsr     FRMEVL
000AC4r 2               CHKCLS:
000AC4r 2  A9 29                lda     #$29
000AC6r 2  2C                   .byte   $2C
000AC7r 2               CHKOPN:
000AC7r 2  A9 28                lda     #$28
000AC9r 2  2C                   .byte   $2C
000ACAr 2               CHKCOM:
000ACAr 2  A9 2C                lda     #$2C
000ACCr 2               
000ACCr 2               ; ----------------------------------------------------------------------------
000ACCr 2               ; UNLESS CHAR AT TXTPTR = (A), SYNTAX ERROR
000ACCr 2               ; ----------------------------------------------------------------------------
000ACCr 2               SYNCHR:	; XXX all CBM code calls SYNCHR instead of CHKCOM
000ACCr 2  A0 00                ldy     #$00
000ACEr 2  D1 B9                cmp     (TXTPTR),y
000AD0r 2  D0 03                bne     SYNERR
000AD2r 2  4C B2 00             jmp     CHRGET
000AD5r 2               ; ----------------------------------------------------------------------------
000AD5r 2               SYNERR:
000AD5r 2  A2 10                ldx     #ERR_SYNTAX
000AD7r 2  4C rr rr             jmp     ERROR
000ADAr 2               ; ----------------------------------------------------------------------------
000ADAr 2               MIN:
000ADAr 2  A0 15                ldy     #$15
000ADCr 2               EQUL:
000ADCr 2  68                   pla
000ADDr 2  68                   pla
000ADEr 2  4C rr rr             jmp     L2CA4
000AE1r 2               ; ----------------------------------------------------------------------------
000AE1r 2               FRM_VARIABLE:
000AE1r 2  20 rr rr             jsr     PTRGET
000AE4r 2               FRM_VARIABLE_CALL	= *-1
000AE4r 2  85 A3                sta     FAC_LAST-1
000AE6r 2  84 A4                sty     FAC_LAST
000AE8r 2               .ifdef CONFIG_CBM_ALL
000AE8r 2                       lda     VARNAM
000AE8r 2                       ldy     VARNAM+1
000AE8r 2               .endif
000AE8r 2  A6 11                ldx     VALTYP
000AEAr 2  F0 01                beq     L2DB1
000AECr 2               .ifdef CONFIG_CBM_ALL
000AECr 2                 .ifdef CONFIG_CBM1_PATCHES
000AECr 2                       jmp     PATCH2
000AECr 2                       clc
000AECr 2               LCE3B:
000AECr 2                 .else
000AECr 2                       ldx     #$00
000AECr 2                       stx     STRNG1+1
000AECr 2                       bit     FAC+4
000AECr 2                       bpl     LCE53
000AECr 2                       cmp     #$54	; T
000AECr 2                       bne     LCE53
000AECr 2                 .endif
000AECr 2                       cpy     #$C9	; I$
000AECr 2                       bne     LCE53
000AECr 2                       jsr     LCE76
000AECr 2                       sty     EXPON
000AECr 2                       dey
000AECr 2                       sty     STRNG2
000AECr 2                       ldy     #$06
000AECr 2                       sty     INDX
000AECr 2                       ldy     #$24
000AECr 2                       jsr     LDD3A
000AECr 2                       jmp     LD353
000AECr 2               LCE53:
000AECr 2               .endif
000AECr 2               .ifdef CONFIG_2
000AECr 2                 .ifndef CBM2
000AECr 2               ; bugfix?
000AECr 2               ; fixed on AppleSoft II, not on any CBM
000AECr 2                       ldx     #$00
000AECr 2                       stx     STRNG1+1
000AECr 2                 .endif
000AECr 2               .endif
000AECr 2  60                   rts
000AEDr 2               L2DB1:
000AEDr 2               .ifndef CONFIG_SMALL
000AEDr 2  A6 12                ldx     VALTYP+1
000AEFr 2  10 0D                bpl     L2DC2
000AF1r 2  A0 00                ldy     #$00
000AF3r 2  B1 A3                lda     (FAC+3),y
000AF5r 2  AA                   tax
000AF6r 2  C8                   iny
000AF7r 2  B1 A3                lda     (FAC+3),y
000AF9r 2  A8                   tay
000AFAr 2  8A                   txa
000AFBr 2  4C rr rr             jmp     GIVAYF
000AFEr 2               L2DC2:
000AFEr 2               .endif
000AFEr 2               .ifdef CONFIG_CBM1_PATCHES
000AFEr 2                       jmp     PATCH3
000AFEr 2                       .byte   $19
000AFEr 2               .endif
000AFEr 2               .ifdef CBM2
000AFEr 2                       bit     FAC+4
000AFEr 2                       bpl     LCE90
000AFEr 2                       cmp     #$54
000AFEr 2                       bne     LCE82
000AFEr 2               .endif
000AFEr 2               .ifndef CONFIG_CBM_ALL
000AFEr 2  4C rr rr             jmp     LOAD_FAC_FROM_YA
000B01r 2               .endif
000B01r 2               .ifdef CONFIG_CBM_ALL
000B01r 2               LCE69:
000B01r 2                       cpy     #$49
000B01r 2               .ifdef CBM1
000B01r 2                       bne     LCE82
000B01r 2               .else
000B01r 2                       bne     LCE90
000B01r 2               .endif
000B01r 2                       jsr     LCE76
000B01r 2                       tya
000B01r 2                       ldx     #$A0
000B01r 2                       jmp     LDB21
000B01r 2               LCE76:
000B01r 2               .ifdef CBM1
000B01r 2                       lda     #$FE
000B01r 2                       ldy     #$01
000B01r 2               .else
000B01r 2                       lda     #$8B
000B01r 2                       ldy     #$00
000B01r 2               .endif
000B01r 2                       sei
000B01r 2                       jsr     LOAD_FAC_FROM_YA
000B01r 2                       cli
000B01r 2                       sty     FAC+1
000B01r 2                       rts
000B01r 2               LCE82:
000B01r 2                       cmp     #$53
000B01r 2                       bne     LCE90
000B01r 2                       cpy     #$54
000B01r 2                       bne     LCE90
000B01r 2                       lda     Z96
000B01r 2                       jmp     FLOAT
000B01r 2               LCE90:
000B01r 2                       lda     FAC+3
000B01r 2                       ldy     FAC+4
000B01r 2                       jmp     LOAD_FAC_FROM_YA
000B01r 2               .endif
000B01r 2               
000B01r 2               ; ----------------------------------------------------------------------------
000B01r 2               UNARY:
000B01r 2  0A                   asl     a
000B02r 2  48                   pha
000B03r 2  AA                   tax
000B04r 2  20 B2 00             jsr     CHRGET
000B07r 2  E0 81                cpx     #<(TOKEN_LEFTSTR*2-1)
000B09r 2  90 20                bcc     L2DEF
000B0Br 2  20 rr rr             jsr     CHKOPN
000B0Er 2  20 rr rr             jsr     FRMEVL
000B11r 2  20 rr rr             jsr     CHKCOM
000B14r 2  20 rr rr             jsr     CHKSTR
000B17r 2  68                   pla
000B18r 2  AA                   tax
000B19r 2  A5 A4                lda     FAC_LAST
000B1Br 2  48                   pha
000B1Cr 2  A5 A3                lda     FAC_LAST-1
000B1Er 2  48                   pha
000B1Fr 2  8A                   txa
000B20r 2  48                   pha
000B21r 2  20 rr rr             jsr     GETBYT
000B24r 2  68                   pla
000B25r 2  A8                   tay
000B26r 2  8A                   txa
000B27r 2  48                   pha
000B28r 2  4C rr rr             jmp     L2DF4
000B2Br 2               L2DEF:
000B2Br 2  20 rr rr             jsr     PARCHK
000B2Er 2  68                   pla
000B2Fr 2  A8                   tay
000B30r 2               L2DF4:
000B30r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$100,y
000B33r 2  85 94                sta     JMPADRS+1
000B35r 2  B9 rr rr             lda     UNFNC-TOKEN_SGN-TOKEN_SGN+$101,y
000B38r 2  85 95                sta     JMPADRS+2
000B3Ar 2               .ifdef KBD
000B3Ar 2                       jsr     LF47D
000B3Ar 2               .else
000B3Ar 2  20 93 00             jsr     JMPADRS
000B3Dr 2               .endif
000B3Dr 2  4C rr rr             jmp     CHKNUM
000B40r 2               
000B40r 2               ; ----------------------------------------------------------------------------
000B40r 2               OR:
000B40r 2  A0 FF                ldy     #$FF
000B42r 2  2C                   .byte   $2C
000B43r 2               ; ----------------------------------------------------------------------------
000B43r 2               TAND:
000B43r 2  A0 00                ldy     #$00
000B45r 2  84 0F                sty     EOLPNTR
000B47r 2  20 rr rr             jsr     AYINT
000B4Ar 2  A5 A3                lda     FAC_LAST-1
000B4Cr 2  45 0F                eor     EOLPNTR
000B4Er 2  85 0D                sta     CHARAC
000B50r 2  A5 A4                lda     FAC_LAST
000B52r 2  45 0F                eor     EOLPNTR
000B54r 2  85 0E                sta     ENDCHR
000B56r 2  20 rr rr             jsr     COPY_ARG_TO_FAC
000B59r 2  20 rr rr             jsr     AYINT
000B5Cr 2  A5 A4                lda     FAC_LAST
000B5Er 2  45 0F                eor     EOLPNTR
000B60r 2  25 0E                and     ENDCHR
000B62r 2  45 0F                eor     EOLPNTR
000B64r 2  A8                   tay
000B65r 2  A5 A3                lda     FAC_LAST-1
000B67r 2  45 0F                eor     EOLPNTR
000B69r 2  25 0D                and     CHARAC
000B6Br 2  45 0F                eor     EOLPNTR
000B6Dr 2  4C rr rr             jmp     GIVAYF
000B70r 2               
000B70r 2               ; ----------------------------------------------------------------------------
000B70r 2               ; PERFORM RELATIONAL OPERATIONS
000B70r 2               ; ----------------------------------------------------------------------------
000B70r 2               RELOPS:
000B70r 2  20 rr rr             jsr     CHKVAL
000B73r 2  B0 13                bcs     STRCMP
000B75r 2  A5 AD                lda     ARGSIGN
000B77r 2  09 7F                ora     #$7F
000B79r 2  25 A9                and     ARG+1
000B7Br 2  85 A9                sta     ARG+1
000B7Dr 2  A9 A8                lda     #<ARG
000B7Fr 2  A0 00                ldy     #$00
000B81r 2  20 rr rr             jsr     FCOMP
000B84r 2  AA                   tax
000B85r 2  4C rr rr             jmp     NUMCMP
000B88r 2               
000B88r 2               ; ----------------------------------------------------------------------------
000B88r 2               ; STRING COMPARISON
000B88r 2               ; ----------------------------------------------------------------------------
000B88r 2               STRCMP:
000B88r 2  A9 00                lda     #$00
000B8Ar 2  85 11                sta     VALTYP
000B8Cr 2  C6 8C                dec     CPRTYP
000B8Er 2  20 rr rr             jsr     FREFAC
000B91r 2  85 A0                sta     FAC
000B93r 2  86 A1                stx     FAC+1
000B95r 2  84 A2                sty     FAC+2
000B97r 2  A5 AB                lda     ARG_LAST-1
000B99r 2  A4 AC                ldy     ARG_LAST
000B9Br 2  20 rr rr             jsr     FRETMP
000B9Er 2  86 AB                stx     ARG_LAST-1
000BA0r 2  84 AC                sty     ARG_LAST
000BA2r 2  AA                   tax
000BA3r 2  38                   sec
000BA4r 2  E5 A0                sbc     FAC
000BA6r 2  F0 08                beq     L2E74
000BA8r 2  A9 01                lda     #$01
000BAAr 2  90 04                bcc     L2E74
000BACr 2  A6 A0                ldx     FAC
000BAEr 2  A9 FF                lda     #$FF
000BB0r 2               L2E74:
000BB0r 2  85 A5                sta     FACSIGN
000BB2r 2  A0 FF                ldy     #$FF
000BB4r 2  E8                   inx
000BB5r 2               STRCMP1:
000BB5r 2  C8                   iny
000BB6r 2  CA                   dex
000BB7r 2  D0 07                bne     L2E84
000BB9r 2  A6 A5                ldx     FACSIGN
000BBBr 2               NUMCMP:
000BBBr 2  30 0F                bmi     CMPDONE
000BBDr 2  18                   clc
000BBEr 2  90 0C                bcc     CMPDONE
000BC0r 2               L2E84:
000BC0r 2  B1 AB                lda     (ARG_LAST-1),y
000BC2r 2  D1 A1                cmp     (FAC+1),y
000BC4r 2  F0 EF                beq     STRCMP1
000BC6r 2  A2 FF                ldx     #$FF
000BC8r 2  B0 02                bcs     CMPDONE
000BCAr 2  A2 01                ldx     #$01
000BCCr 2               CMPDONE:
000BCCr 2  E8                   inx
000BCDr 2  8A                   txa
000BCEr 2  2A                   rol     a
000BCFr 2  25 16                and     CPRMASK
000BD1r 2  F0 02                beq     L2E99
000BD3r 2  A9 FF                lda     #$FF
000BD5r 2               L2E99:
000BD5r 2  4C rr rr             jmp     FLOAT
000BD8r 2               
000BD8r 2               .ifdef SYM1
000BD8r 2               LCDBD:
000BD8r 2                       jsr     CHRGET
000BD8r 2                       jsr     CHKOPN
000BD8r 2                       jsr     FRMEVL
000BD8r 2                       jsr     CHRGOT
000BD8r 2                       cmp     #$29
000BD8r 2                       beq     LCDF1
000BD8r 2                       jsr     AYINT
000BD8r 2                       lda     FAC+4
000BD8r 2                       ldy     FAC+3
000BD8r 2                       sta     USR+1
000BD8r 2                       sty     USR+2
000BD8r 2               LCDD8:
000BD8r 2                       jsr     CHKCOM
000BD8r 2                       jsr     FRMEVL
000BD8r 2                       jsr     CHRGOT
000BD8r 2                       cmp     #$29
000BD8r 2                       beq     LCDF1
000BD8r 2                       jsr     AYINT
000BD8r 2                       lda     FAC+3
000BD8r 2                       pha
000BD8r 2                       lda     FAC+4
000BD8r 2                       pha
000BD8r 2                       jmp     LCDD8
000BD8r 2               
000BD8r 2               LCDF1:
000BD8r 2                       jsr     CHRGET
000BD8r 2                       jsr     AYINT
000BD8r 2                       lda     FAC+3
000BD8r 2                       ldy     FAC+4
000BD8r 2                       jmp     USR
000BD8r 2               
000BD8r 2               LCDFE:
000BD8r 2                       lda     ZD4
000BD8r 2                       pha
000BD8r 2                       lda     ZD3
000BD8r 2                       pha
000BD8r 2                       jsr     CHRGET
000BD8r 2                       cmp     #$22
000BD8r 2                       bne     LCE49
000BD8r 2                       jsr     CHRGET
000BD8r 2                       jsr     LCE2B
000BD8r 2                       tax
000BD8r 2                       jsr     CHRGOT
000BD8r 2                       jsr     LCE2B
000BD8r 2                       pha
000BD8r 2                       jsr     CHRGOT
000BD8r 2                       cmp     #$22
000BD8r 2                       bne     LCE48
000BD8r 2                       jsr     CHRGET
000BD8r 2                       pla
000BD8r 2                       tay
000BD8r 2                       pla
000BD8r 2                       pla
000BD8r 2                       txa
000BD8r 2                       jmp     GIVAYF
000BD8r 2               
000BD8r 2               LCE2B:
000BD8r 2                       jsr     ASCNIB
000BD8r 2                       bcs     LCE47
000BD8r 2                       pha
000BD8r 2                       jsr     CHRGET
000BD8r 2                       jsr     ASCNIB
000BD8r 2                       sta     FAC+4
000BD8r 2                       bcs     LCE46
000BD8r 2                       jsr     CHRGET
000BD8r 2                       pla
000BD8r 2                       asl     a
000BD8r 2                       asl     a
000BD8r 2                       asl     a
000BD8r 2                       asl     a
000BD8r 2                       ora     FAC+4
000BD8r 2                       rts
000BD8r 2               
000BD8r 2               LCE46:
000BD8r 2                       pla
000BD8r 2               LCE47:
000BD8r 2                       pla
000BD8r 2               LCE48:
000BD8r 2                       pla
000BD8r 2               LCE49:
000BD8r 2                       pla
000BD8r 2                       sta     ZD3
000BD8r 2                       pla
000BD8r 2                       sta     ZD4
000BD8r 2                       jmp     ZERO_FAC
000BD8r 2               .endif
000BD8r 2               
000BD8r 1               .include "var.s"
000BD8r 2               .segment "CODE"
000BD8r 2               
000BD8r 2               ; ----------------------------------------------------------------------------
000BD8r 2               ; "DIM" STATEMENT
000BD8r 2               ; ----------------------------------------------------------------------------
000BD8r 2               NXDIM:
000BD8r 2  20 rr rr             jsr     CHKCOM
000BDBr 2               DIM:
000BDBr 2  AA                   tax
000BDCr 2  20 rr rr             jsr     PTRGET2
000BDFr 2  20 B8 00             jsr     CHRGOT
000BE2r 2  D0 F4                bne     NXDIM
000BE4r 2  60                   rts
000BE5r 2               
000BE5r 2               ; ----------------------------------------------------------------------------
000BE5r 2               ; PTRGET -- GENERAL VARIABLE SCAN
000BE5r 2               ;
000BE5r 2               ; SCANS VARIABLE NAME AT TXTPTR, AND SEARCHES THE
000BE5r 2               ; VARTAB AND ARYTAB FOR THE NAME.
000BE5r 2               ; IF NOT FOUND, CREATE VARIABLE OF APPROPRIATE TYPE.
000BE5r 2               ; RETURN WITH ADDRESS IN VARPNT AND Y,A
000BE5r 2               ;
000BE5r 2               ; ACTUAL ACTIVITY CONTROLLED SOMEWHAT BY TWO FLAGS:
000BE5r 2               ;	DIMFLG -- NONZERO IF CALLED FROM "DIM"
000BE5r 2               ;		ELSE = 0
000BE5r 2               ;
000BE5r 2               ;	SUBFLG -- = $00
000BE5r 2               ;		= $40 IF CALLED FROM "GETARYPT"
000BE5r 2               ; ----------------------------------------------------------------------------
000BE5r 2               PTRGET:
000BE5r 2  A2 00                ldx     #$00
000BE7r 2  20 B8 00             jsr     CHRGOT
000BEAr 2               PTRGET2:
000BEAr 2  86 10                stx     DIMFLG
000BECr 2               PTRGET3:
000BECr 2  85 84                sta     VARNAM
000BEEr 2  20 B8 00             jsr     CHRGOT
000BF1r 2  20 rr rr             jsr     ISLETC
000BF4r 2  B0 03                bcs     NAMOK
000BF6r 2               SYNERR3:
000BF6r 2  4C rr rr             jmp     SYNERR
000BF9r 2               NAMOK:
000BF9r 2  A2 00                ldx     #$00
000BFBr 2  86 11                stx     VALTYP
000BFDr 2               .ifndef CONFIG_SMALL
000BFDr 2  86 12                stx     VALTYP+1
000BFFr 2               .endif
000BFFr 2  20 B2 00             jsr     CHRGET
000C02r 2  90 05                bcc     L2ECD
000C04r 2  20 rr rr             jsr     ISLETC
000C07r 2  90 0B                bcc     L2ED8
000C09r 2               L2ECD:
000C09r 2  AA                   tax
000C0Ar 2               L2ECE:
000C0Ar 2  20 B2 00             jsr     CHRGET
000C0Dr 2  90 FB                bcc     L2ECE
000C0Fr 2  20 rr rr             jsr     ISLETC
000C12r 2  B0 F6                bcs     L2ECE
000C14r 2               L2ED8:
000C14r 2  C9 24                cmp     #$24
000C16r 2               .ifdef CONFIG_SMALL
000C16r 2                       bne     L2EF9
000C16r 2               .else
000C16r 2  D0 06                bne     L2EE2
000C18r 2               .endif
000C18r 2  A9 FF                lda     #$FF
000C1Ar 2  85 11                sta     VALTYP
000C1Cr 2               .ifndef CONFIG_SMALL
000C1Cr 2  D0 10                bne     L2EF2
000C1Er 2               L2EE2:
000C1Er 2  C9 25                cmp     #$25
000C20r 2  D0 13                bne     L2EF9
000C22r 2  A5 14                lda     SUBFLG
000C24r 2  D0 D0                bne     SYNERR3
000C26r 2  A9 80                lda     #$80
000C28r 2  85 12                sta     VALTYP+1
000C2Ar 2  05 84                ora     VARNAM
000C2Cr 2  85 84                sta     VARNAM
000C2Er 2               L2EF2:
000C2Er 2               .endif
000C2Er 2  8A                   txa
000C2Fr 2  09 80                ora     #$80
000C31r 2  AA                   tax
000C32r 2  20 B2 00             jsr     CHRGET
000C35r 2               L2EF9:
000C35r 2  86 85                stx     VARNAM+1
000C37r 2  38                   sec
000C38r 2  05 14                ora     SUBFLG
000C3Ar 2  E9 28                sbc     #$28
000C3Cr 2  D0 03                bne     L2F05
000C3Er 2  4C rr rr             jmp     ARRAY
000C41r 2               L2F05:
000C41r 2  A9 00                lda     #$00
000C43r 2  85 14                sta     SUBFLG
000C45r 2  A5 6C                lda     VARTAB
000C47r 2  A6 6D                ldx     VARTAB+1
000C49r 2  A0 00                ldy     #$00
000C4Br 2               L2F0F:
000C4Br 2  86 9F                stx     LOWTR+1
000C4Dr 2               L2F11:
000C4Dr 2  85 9E                sta     LOWTR
000C4Fr 2  E4 6F                cpx     ARYTAB+1
000C51r 2  D0 04                bne     L2F1B
000C53r 2  C5 6E                cmp     ARYTAB
000C55r 2  F0 22                beq     NAMENOTFOUND
000C57r 2               L2F1B:
000C57r 2  A5 84                lda     VARNAM
000C59r 2  D1 9E                cmp     (LOWTR),y
000C5Br 2  D0 08                bne     L2F29
000C5Dr 2  A5 85                lda     VARNAM+1
000C5Fr 2  C8                   iny
000C60r 2  D1 9E                cmp     (LOWTR),y
000C62r 2  F0 6C                beq     SET_VARPNT_AND_YA
000C64r 2  88                   dey
000C65r 2               L2F29:
000C65r 2  18                   clc
000C66r 2  A5 9E                lda     LOWTR
000C68r 2  69 07                adc     #BYTES_PER_VARIABLE
000C6Ar 2  90 E1                bcc     L2F11
000C6Cr 2  E8                   inx
000C6Dr 2  D0 DC                bne     L2F0F
000C6Fr 2               
000C6Fr 2               ; ----------------------------------------------------------------------------
000C6Fr 2               ; CHECK IF (A) IS ASCII LETTER A-Z
000C6Fr 2               ;
000C6Fr 2               ; RETURN CARRY = 1 IF A-Z
000C6Fr 2               ;	= 0 IF NOT
000C6Fr 2               ; ----------------------------------------------------------------------------
000C6Fr 2               ISLETC:
000C6Fr 2  C9 41                cmp     #$41
000C71r 2  90 05                bcc     L2F3C
000C73r 2  E9 5B                sbc     #$5B
000C75r 2  38                   sec
000C76r 2  E9 A5                sbc     #$A5
000C78r 2               L2F3C:
000C78r 2  60                   rts
000C79r 2               
000C79r 2               ; ----------------------------------------------------------------------------
000C79r 2               ; VARIABLE NOT FOUND, SO MAKE ONE
000C79r 2               ; ----------------------------------------------------------------------------
000C79r 2               NAMENOTFOUND:
000C79r 2  68                   pla
000C7Ar 2  48                   pha
000C7Br 2  C9 rr                cmp     #<FRM_VARIABLE_CALL
000C7Dr 2  D0 0F                bne     MAKENEWVARIABLE
000C7Fr 2               .ifdef CONFIG_SAFE_NAMENOTFOUND
000C7Fr 2  BA                   tsx
000C80r 2  BD 02 01             lda     STACK+2,x
000C83r 2  C9 rr                cmp     #>FRM_VARIABLE_CALL
000C85r 2  D0 07                bne     MAKENEWVARIABLE
000C87r 2               .endif
000C87r 2               LD015:
000C87r 2  A9 rr                lda     #<C_ZERO
000C89r 2  A0 rr                ldy     #>C_ZERO
000C8Br 2  60                   rts
000C8Cr 2               
000C8Cr 2               ; ----------------------------------------------------------------------------
000C8Cr 2               .ifndef CONFIG_2
000C8Cr 2               C_ZERO:
000C8Cr 2  00 00                .byte   $00,$00
000C8Er 2               .endif
000C8Er 2               
000C8Er 2               ; ----------------------------------------------------------------------------
000C8Er 2               ; MAKE A NEW SIMPLE VARIABLE
000C8Er 2               ;
000C8Er 2               ; MOVE ARRAYS UP 7 BYTES TO MAKE ROOM FOR NEW VARIABLE
000C8Er 2               ; ENTER 7-BYTE VARIABLE DATA IN THE HOLE
000C8Er 2               ; ----------------------------------------------------------------------------
000C8Er 2               MAKENEWVARIABLE:
000C8Er 2               .ifdef CONFIG_CBM_ALL
000C8Er 2                       lda     VARNAM
000C8Er 2                       ldy     VARNAM+1
000C8Er 2                       cmp     #$54
000C8Er 2                       bne     LD02F
000C8Er 2                       cpy     #$C9
000C8Er 2                       beq     LD015
000C8Er 2                       cpy     #$49
000C8Er 2                       bne     LD02F
000C8Er 2               LD02C:
000C8Er 2                       jmp     SYNERR
000C8Er 2               LD02F:
000C8Er 2                       cmp     #$53
000C8Er 2                       bne     LD037
000C8Er 2                       cpy     #$54
000C8Er 2                       beq     LD02C
000C8Er 2               LD037:
000C8Er 2               .endif
000C8Er 2  A5 6E                lda     ARYTAB
000C90r 2  A4 6F                ldy     ARYTAB+1
000C92r 2  85 9E                sta     LOWTR
000C94r 2  84 9F                sty     LOWTR+1
000C96r 2  A5 70                lda     STREND
000C98r 2  A4 71                ldy     STREND+1
000C9Ar 2  85 99                sta     HIGHTR
000C9Cr 2  84 9A                sty     HIGHTR+1
000C9Er 2  18                   clc
000C9Fr 2  69 07                adc     #BYTES_PER_VARIABLE
000CA1r 2  90 01                bcc     L2F68
000CA3r 2  C8                   iny
000CA4r 2               L2F68:
000CA4r 2  85 97                sta     HIGHDS
000CA6r 2  84 98                sty     HIGHDS+1
000CA8r 2  20 rr rr             jsr     BLTU
000CABr 2  A5 97                lda     HIGHDS
000CADr 2  A4 98                ldy     HIGHDS+1
000CAFr 2  C8                   iny
000CB0r 2  85 6E                sta     ARYTAB
000CB2r 2  84 6F                sty     ARYTAB+1
000CB4r 2  A0 00                ldy     #$00
000CB6r 2  A5 84                lda     VARNAM
000CB8r 2  91 9E                sta     (LOWTR),y
000CBAr 2  C8                   iny
000CBBr 2  A5 85                lda     VARNAM+1
000CBDr 2  91 9E                sta     (LOWTR),y
000CBFr 2  A9 00                lda     #$00
000CC1r 2  C8                   iny
000CC2r 2  91 9E                sta     (LOWTR),y
000CC4r 2  C8                   iny
000CC5r 2  91 9E                sta     (LOWTR),y
000CC7r 2  C8                   iny
000CC8r 2  91 9E                sta     (LOWTR),y
000CCAr 2  C8                   iny
000CCBr 2  91 9E                sta     (LOWTR),y
000CCDr 2               .ifndef CONFIG_SMALL
000CCDr 2  C8                   iny
000CCEr 2  91 9E                sta     (LOWTR),y
000CD0r 2               .endif
000CD0r 2               
000CD0r 2               ; ----------------------------------------------------------------------------
000CD0r 2               ; PUT ADDRESS OF VALUE OF VARIABLE IN VARPNT AND Y,A
000CD0r 2               ; ----------------------------------------------------------------------------
000CD0r 2               SET_VARPNT_AND_YA:
000CD0r 2  A5 9E                lda     LOWTR
000CD2r 2  18                   clc
000CD3r 2  69 02                adc     #$02
000CD5r 2  A4 9F                ldy     LOWTR+1
000CD7r 2  90 01                bcc     L2F9E
000CD9r 2  C8                   iny
000CDAr 2               L2F9E:
000CDAr 2  85 86                sta     VARPNT
000CDCr 2  84 87                sty     VARPNT+1
000CDEr 2  60                   rts
000CDFr 2               
000CDFr 1               .include "array.s"
000CDFr 2               .segment "CODE"
000CDFr 2               
000CDFr 2               ; ----------------------------------------------------------------------------
000CDFr 2               ; COMPUTE ADDRESS OF FIRST VALUE IN ARRAY
000CDFr 2               ; ARYPNT = (LOWTR) + #DIMS*2 + 5
000CDFr 2               ; ----------------------------------------------------------------------------
000CDFr 2               GETARY:
000CDFr 2  A5 0F                lda     EOLPNTR
000CE1r 2  0A                   asl     a
000CE2r 2  69 05                adc     #$05
000CE4r 2  65 9E                adc     LOWTR
000CE6r 2  A4 9F                ldy     LOWTR+1
000CE8r 2  90 01                bcc     L2FAF
000CEAr 2  C8                   iny
000CEBr 2               L2FAF:
000CEBr 2  85 97                sta     HIGHDS
000CEDr 2  84 98                sty     HIGHDS+1
000CEFr 2  60                   rts
000CF0r 2               
000CF0r 2               ; ----------------------------------------------------------------------------
000CF0r 2               NEG32768:
000CF0r 2  90 80 00 00          .byte   $90,$80,$00,$00
000CF4r 2               
000CF4r 2               .ifdef CONFIG_2C
000CF4r 2               		.byte	$00; bugfix: short number
000CF4r 2               .endif
000CF4r 2               
000CF4r 2               ; ----------------------------------------------------------------------------
000CF4r 2               ; EVALUATE NUMERIC FORMULA AT TXTPTR
000CF4r 2               ; CONVERTING RESULT TO INTEGER 0 <= X <= 32767
000CF4r 2               ; IN FAC+3,4
000CF4r 2               ; ----------------------------------------------------------------------------
000CF4r 2               MAKINT:
000CF4r 2  20 B2 00             jsr     CHRGET
000CF7r 2               .ifdef CONFIG_2
000CF7r 2                       jsr     FRMEVL
000CF7r 2               .else
000CF7r 2  20 rr rr             jsr     FRMNUM
000CFAr 2               .endif
000CFAr 2               
000CFAr 2               ; ----------------------------------------------------------------------------
000CFAr 2               ; CONVERT FAC TO INTEGER
000CFAr 2               ; MUST BE POSITIVE AND LESS THAN 32768
000CFAr 2               ; ----------------------------------------------------------------------------
000CFAr 2               MKINT:
000CFAr 2               .ifdef CONFIG_2
000CFAr 2                       jsr     CHKNUM
000CFAr 2               .endif
000CFAr 2  A5 A5                lda     FACSIGN
000CFCr 2  30 0D                bmi     MI1
000CFEr 2               
000CFEr 2               ; ----------------------------------------------------------------------------
000CFEr 2               ; CONVERT FAC TO INTEGER
000CFEr 2               ; MUST BE -32767 <= FAC <= 32767
000CFEr 2               ; ----------------------------------------------------------------------------
000CFEr 2               AYINT:
000CFEr 2  A5 A0                lda     FAC
000D00r 2  C9 90                cmp     #$90
000D02r 2  90 09                bcc     MI2
000D04r 2  A9 rr                lda     #<NEG32768
000D06r 2  A0 rr                ldy     #>NEG32768
000D08r 2  20 rr rr             jsr     FCOMP
000D0Br 2               MI1:
000D0Br 2  D0 7A                bne     IQERR
000D0Dr 2               MI2:
000D0Dr 2  4C rr rr             jmp     QINT
000D10r 2               
000D10r 2               ; ----------------------------------------------------------------------------
000D10r 2               ; LOCATE ARRAY ELEMENT OR CREATE AN ARRAY
000D10r 2               ; ----------------------------------------------------------------------------
000D10r 2               ARRAY:
000D10r 2  A5 10                lda     DIMFLG
000D12r 2               .ifndef CONFIG_SMALL
000D12r 2  05 12                ora     VALTYP+1
000D14r 2               .endif
000D14r 2  48                   pha
000D15r 2  A5 11                lda     VALTYP
000D17r 2  48                   pha
000D18r 2  A0 00                ldy     #$00
000D1Ar 2               L2FDE:
000D1Ar 2  98                   tya
000D1Br 2  48                   pha
000D1Cr 2  A5 85                lda     VARNAM+1
000D1Er 2  48                   pha
000D1Fr 2  A5 84                lda     VARNAM
000D21r 2  48                   pha
000D22r 2  20 rr rr             jsr     MAKINT
000D25r 2  68                   pla
000D26r 2  85 84                sta     VARNAM
000D28r 2  68                   pla
000D29r 2  85 85                sta     VARNAM+1
000D2Br 2  68                   pla
000D2Cr 2  A8                   tay
000D2Dr 2  BA                   tsx
000D2Er 2  BD 02 01             lda     STACK+2,x
000D31r 2  48                   pha
000D32r 2  BD 01 01             lda     STACK+1,x
000D35r 2  48                   pha
000D36r 2  A5 A3                lda     FAC_LAST-1
000D38r 2  9D 02 01             sta     STACK+2,x
000D3Br 2  A5 A4                lda     FAC_LAST
000D3Dr 2  9D 01 01             sta     STACK+1,x
000D40r 2  C8                   iny
000D41r 2  20 B8 00             jsr     CHRGOT
000D44r 2  C9 2C                cmp     #$2C
000D46r 2  F0 D2                beq     L2FDE
000D48r 2  84 0F                sty     EOLPNTR
000D4Ar 2  20 rr rr             jsr     CHKCLS
000D4Dr 2  68                   pla
000D4Er 2  85 11                sta     VALTYP
000D50r 2  68                   pla
000D51r 2               .ifndef CONFIG_SMALL
000D51r 2  85 12                sta     VALTYP+1
000D53r 2  29 7F                and     #$7F
000D55r 2               .endif
000D55r 2  85 10                sta     DIMFLG
000D57r 2               ; ----------------------------------------------------------------------------
000D57r 2               ; SEARCH ARRAY TABLE FOR THIS ARRAY NAME
000D57r 2               ; ----------------------------------------------------------------------------
000D57r 2  A6 6E                ldx     ARYTAB
000D59r 2  A5 6F                lda     ARYTAB+1
000D5Br 2               L301F:
000D5Br 2  86 9E                stx     LOWTR
000D5Dr 2  85 9F                sta     LOWTR+1
000D5Fr 2  C5 71                cmp     STREND+1
000D61r 2  D0 04                bne     L302B
000D63r 2  E4 70                cpx     STREND
000D65r 2  F0 39                beq     MAKE_NEW_ARRAY
000D67r 2               L302B:
000D67r 2  A0 00                ldy     #$00
000D69r 2  B1 9E                lda     (LOWTR),y
000D6Br 2  C8                   iny
000D6Cr 2  C5 84                cmp     VARNAM
000D6Er 2  D0 06                bne     L303A
000D70r 2  A5 85                lda     VARNAM+1
000D72r 2  D1 9E                cmp     (LOWTR),y
000D74r 2  F0 16                beq     USE_OLD_ARRAY
000D76r 2               L303A:
000D76r 2  C8                   iny
000D77r 2  B1 9E                lda     (LOWTR),y
000D79r 2  18                   clc
000D7Ar 2  65 9E                adc     LOWTR
000D7Cr 2  AA                   tax
000D7Dr 2  C8                   iny
000D7Er 2  B1 9E                lda     (LOWTR),y
000D80r 2  65 9F                adc     LOWTR+1
000D82r 2  90 D7                bcc     L301F
000D84r 2               
000D84r 2               ; ----------------------------------------------------------------------------
000D84r 2               ; ERROR:  BAD SUBSCRIPTS
000D84r 2               ; ----------------------------------------------------------------------------
000D84r 2               SUBERR:
000D84r 2  A2 6B                ldx     #ERR_BADSUBS
000D86r 2  2C                   .byte   $2C
000D87r 2               
000D87r 2               ; ----------------------------------------------------------------------------
000D87r 2               ; ERROR:  ILLEGAL QUANTITY
000D87r 2               ; ----------------------------------------------------------------------------
000D87r 2               IQERR:
000D87r 2  A2 35                ldx     #ERR_ILLQTY
000D89r 2               JER:
000D89r 2  4C rr rr             jmp     ERROR
000D8Cr 2               
000D8Cr 2               ; ----------------------------------------------------------------------------
000D8Cr 2               ; FOUND THE ARRAY
000D8Cr 2               ; ----------------------------------------------------------------------------
000D8Cr 2               USE_OLD_ARRAY:
000D8Cr 2  A2 78                ldx     #ERR_REDIMD
000D8Er 2  A5 10                lda     DIMFLG
000D90r 2  D0 F7                bne     JER
000D92r 2  20 rr rr             jsr     GETARY
000D95r 2  A5 0F                lda     EOLPNTR
000D97r 2  A0 04                ldy     #$04
000D99r 2  D1 9E                cmp     (LOWTR),y
000D9Br 2  D0 E7                bne     SUBERR
000D9Dr 2  4C rr rr             jmp     FIND_ARRAY_ELEMENT
000DA0r 2               
000DA0r 2               ; ----------------------------------------------------------------------------
000DA0r 2               ; CREATE A NEW ARRAY, UNLESS CALLED FROM GETARYPT
000DA0r 2               ; ----------------------------------------------------------------------------
000DA0r 2               MAKE_NEW_ARRAY:
000DA0r 2  20 rr rr             jsr     GETARY
000DA3r 2  20 rr rr             jsr     REASON
000DA6r 2  A9 00                lda     #$00
000DA8r 2  A8                   tay
000DA9r 2  85 B1                sta     STRNG2+1
000DABr 2  A2 06                ldx     #BYTES_PER_ELEMENT
000DADr 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000DADr 2                       stx     STRNG2
000DADr 2               .endif
000DADr 2  A5 84                lda     VARNAM
000DAFr 2  91 9E                sta     (LOWTR),y
000DB1r 2               .ifndef CONFIG_SMALL
000DB1r 2  10 01                bpl     L3078
000DB3r 2  CA                   dex
000DB4r 2               L3078:
000DB4r 2               .endif
000DB4r 2  C8                   iny
000DB5r 2  A5 85                lda     VARNAM+1
000DB7r 2  91 9E                sta     (LOWTR),y
000DB9r 2               .if (!.def(CONFIG_SMALL)) || .def(CONFIG_2)
000DB9r 2  10 02                bpl     L3081
000DBBr 2  CA                   dex
000DBCr 2                 .if !(.def(CONFIG_SMALL) && .def(CONFIG_2))
000DBCr 2  CA                   dex
000DBDr 2                 .endif
000DBDr 2               L3081:
000DBDr 2  86 B0                stx     STRNG2
000DBFr 2               .endif
000DBFr 2  A5 0F                lda     EOLPNTR
000DC1r 2  C8                   iny
000DC2r 2  C8                   iny
000DC3r 2  C8                   iny
000DC4r 2  91 9E                sta     (LOWTR),y
000DC6r 2               L308A:
000DC6r 2  A2 0B                ldx     #$0B
000DC8r 2  A9 00                lda     #$00
000DCAr 2  24 10                bit     DIMFLG
000DCCr 2  50 08                bvc     L309A
000DCEr 2  68                   pla
000DCFr 2  18                   clc
000DD0r 2  69 01                adc     #$01
000DD2r 2  AA                   tax
000DD3r 2  68                   pla
000DD4r 2  69 00                adc     #$00
000DD6r 2               L309A:
000DD6r 2  C8                   iny
000DD7r 2  91 9E                sta     (LOWTR),y
000DD9r 2  C8                   iny
000DDAr 2  8A                   txa
000DDBr 2  91 9E                sta     (LOWTR),y
000DDDr 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000DE0r 2  86 B0                stx     STRNG2
000DE2r 2  85 B1                sta     STRNG2+1
000DE4r 2  A4 61                ldy     INDEX
000DE6r 2  C6 0F                dec     EOLPNTR
000DE8r 2  D0 DC                bne     L308A
000DEAr 2  65 98                adc     HIGHDS+1
000DECr 2  B0 5D                bcs     GME
000DEEr 2  85 98                sta     HIGHDS+1
000DF0r 2  A8                   tay
000DF1r 2  8A                   txa
000DF2r 2  65 97                adc     HIGHDS
000DF4r 2  90 03                bcc     L30BD
000DF6r 2  C8                   iny
000DF7r 2  F0 52                beq     GME
000DF9r 2               L30BD:
000DF9r 2  20 rr rr             jsr     REASON
000DFCr 2  85 70                sta     STREND
000DFEr 2  84 71                sty     STREND+1
000E00r 2  A9 00                lda     #$00
000E02r 2  E6 B1                inc     STRNG2+1
000E04r 2  A4 B0                ldy     STRNG2
000E06r 2  F0 05                beq     L30D1
000E08r 2               L30CC:
000E08r 2  88                   dey
000E09r 2  91 97                sta     (HIGHDS),y
000E0Br 2  D0 FB                bne     L30CC
000E0Dr 2               L30D1:
000E0Dr 2  C6 98                dec     HIGHDS+1
000E0Fr 2  C6 B1                dec     STRNG2+1
000E11r 2  D0 F5                bne     L30CC
000E13r 2  E6 98                inc     HIGHDS+1
000E15r 2  38                   sec
000E16r 2  A5 70                lda     STREND
000E18r 2  E5 9E                sbc     LOWTR
000E1Ar 2  A0 02                ldy     #$02
000E1Cr 2  91 9E                sta     (LOWTR),y
000E1Er 2  A5 71                lda     STREND+1
000E20r 2  C8                   iny
000E21r 2  E5 9F                sbc     LOWTR+1
000E23r 2  91 9E                sta     (LOWTR),y
000E25r 2  A5 10                lda     DIMFLG
000E27r 2  D0 60                bne     RTS9
000E29r 2  C8                   iny
000E2Ar 2               
000E2Ar 2               ; ----------------------------------------------------------------------------
000E2Ar 2               ; FIND SPECIFIED ARRAY ELEMENT
000E2Ar 2               ;
000E2Ar 2               ; (LOWTR),Y POINTS AT # OF DIMS IN ARRAY DESCRIPTOR
000E2Ar 2               ; THE SUBSCRIPTS ARE ALL ON THE STACK AS INTEGERS
000E2Ar 2               ; ----------------------------------------------------------------------------
000E2Ar 2               FIND_ARRAY_ELEMENT:
000E2Ar 2  B1 9E                lda     (LOWTR),y
000E2Cr 2  85 0F                sta     EOLPNTR
000E2Er 2  A9 00                lda     #$00
000E30r 2  85 B0                sta     STRNG2
000E32r 2               L30F6:
000E32r 2  85 B1                sta     STRNG2+1
000E34r 2  C8                   iny
000E35r 2  68                   pla
000E36r 2  AA                   tax
000E37r 2  85 A3                sta     FAC_LAST-1
000E39r 2  68                   pla
000E3Ar 2  85 A4                sta     FAC_LAST
000E3Cr 2  D1 9E                cmp     (LOWTR),y
000E3Er 2  90 0E                bcc     FAE2
000E40r 2  D0 06                bne     GSE
000E42r 2  C8                   iny
000E43r 2  8A                   txa
000E44r 2  D1 9E                cmp     (LOWTR),y
000E46r 2  90 07                bcc     FAE3
000E48r 2               ; ----------------------------------------------------------------------------
000E48r 2               GSE:
000E48r 2  4C rr rr             jmp     SUBERR
000E4Br 2               GME:
000E4Br 2  4C rr rr             jmp     MEMERR
000E4Er 2               ; ----------------------------------------------------------------------------
000E4Er 2               FAE2:
000E4Er 2  C8                   iny
000E4Fr 2               FAE3:
000E4Fr 2  A5 B1                lda     STRNG2+1
000E51r 2  05 B0                ora     STRNG2
000E53r 2  18                   clc
000E54r 2  F0 0A                beq     L3124
000E56r 2  20 rr rr             jsr     MULTIPLY_SUBSCRIPT
000E59r 2  8A                   txa
000E5Ar 2  65 A3                adc     FAC_LAST-1
000E5Cr 2  AA                   tax
000E5Dr 2  98                   tya
000E5Er 2  A4 61                ldy     INDEX
000E60r 2               L3124:
000E60r 2  65 A4                adc     FAC_LAST
000E62r 2  86 B0                stx     STRNG2
000E64r 2  C6 0F                dec     EOLPNTR
000E66r 2  D0 CA                bne     L30F6
000E68r 2               .if .def(CONFIG_SMALL) && (!.def(CONFIG_2))
000E68r 2                       asl     STRNG2
000E68r 2                       rol     a
000E68r 2                       bcs     GSE
000E68r 2                       asl     STRNG2
000E68r 2                       rol     a
000E68r 2                       bcs     GSE
000E68r 2                       tay
000E68r 2                       lda     STRNG2
000E68r 2               .else
000E68r 2                 .ifdef CONFIG_11A
000E68r 2                       sta     STRNG2+1
000E68r 2                 .endif
000E68r 2  A2 05                ldx     #BYTES_FP
000E6Ar 2                 .ifdef CONFIG_SMALL
000E6Ar 2                       lda     VARNAM+1
000E6Ar 2                 .else
000E6Ar 2  A5 84                lda     VARNAM
000E6Cr 2                 .endif
000E6Cr 2  10 01                bpl     L3135
000E6Er 2  CA                   dex
000E6Fr 2               L3135:
000E6Fr 2                 .ifdef CONFIG_SMALL
000E6Fr 2                       stx     RESULT+1
000E6Fr 2                 .else
000E6Fr 2  A5 85                lda     VARNAM+1
000E71r 2  10 02                bpl     L313B
000E73r 2  CA                   dex
000E74r 2  CA                   dex
000E75r 2               L313B:
000E75r 2  86 67                stx     RESULT+2
000E77r 2                 .endif
000E77r 2  A9 00                lda     #$00
000E79r 2  20 rr rr             jsr     MULTIPLY_SUBS1
000E7Cr 2  8A                   txa
000E7Dr 2               .endif
000E7Dr 2  65 97                adc     HIGHDS
000E7Fr 2  85 86                sta     VARPNT
000E81r 2  98                   tya
000E82r 2  65 98                adc     HIGHDS+1
000E84r 2  85 87                sta     VARPNT+1
000E86r 2  A8                   tay
000E87r 2  A5 86                lda     VARPNT
000E89r 2               RTS9:
000E89r 2  60                   rts
000E8Ar 2               
000E8Ar 2               ; ----------------------------------------------------------------------------
000E8Ar 2               ; MULTIPLY (STRNG2) BY ((LOWTR),Y)
000E8Ar 2               ; LEAVING PRODUCT IN A,X.  (HI-BYTE ALSO IN Y.)
000E8Ar 2               ; USED ONLY BY ARRAY SUBSCRIPT ROUTINES
000E8Ar 2               ; ----------------------------------------------------------------------------
000E8Ar 2               MULTIPLY_SUBSCRIPT:
000E8Ar 2  84 61                sty     INDEX
000E8Cr 2  B1 9E                lda     (LOWTR),y
000E8Er 2  85 67                sta     RESULT_LAST-2
000E90r 2  88                   dey
000E91r 2  B1 9E                lda     (LOWTR),y
000E93r 2               MULTIPLY_SUBS1:
000E93r 2  85 68                sta     RESULT_LAST-1
000E95r 2  A9 10                lda     #$10
000E97r 2  85 9C                sta     INDX
000E99r 2  A2 00                ldx     #$00
000E9Br 2  A0 00                ldy     #$00
000E9Dr 2               L3163:
000E9Dr 2  8A                   txa
000E9Er 2  0A                   asl     a
000E9Fr 2  AA                   tax
000EA0r 2  98                   tya
000EA1r 2  2A                   rol     a
000EA2r 2  A8                   tay
000EA3r 2  B0 A6                bcs     GME
000EA5r 2  06 B0                asl     STRNG2
000EA7r 2  26 B1                rol     STRNG2+1
000EA9r 2  90 0B                bcc     L317C
000EABr 2  18                   clc
000EACr 2  8A                   txa
000EADr 2  65 67                adc     RESULT_LAST-2
000EAFr 2  AA                   tax
000EB0r 2  98                   tya
000EB1r 2  65 68                adc     RESULT_LAST-1
000EB3r 2  A8                   tay
000EB4r 2  B0 95                bcs     GME
000EB6r 2               L317C:
000EB6r 2  C6 9C                dec     INDX
000EB8r 2  D0 E3                bne     L3163
000EBAr 2  60                   rts
000EBBr 2               
000EBBr 2               
000EBBr 1               .include "misc2.s"
000EBBr 2               .segment "CODE"
000EBBr 2               
000EBBr 2               ; ----------------------------------------------------------------------------
000EBBr 2               ; "FRE" FUNCTION
000EBBr 2               ;
000EBBr 2               ; COLLECTS GARBAGE AND RETURNS # BYTES OF MEMORY LEFT
000EBBr 2               ; ----------------------------------------------------------------------------
000EBBr 2               FRE:
000EBBr 2  A5 11                lda     VALTYP
000EBDr 2  F0 03                beq     L3188
000EBFr 2  20 rr rr             jsr     FREFAC
000EC2r 2               L3188:
000EC2r 2  20 rr rr             jsr     GARBAG
000EC5r 2  38                   sec
000EC6r 2  A5 72                lda     FRETOP
000EC8r 2  E5 70                sbc     STREND
000ECAr 2  A8                   tay
000ECBr 2  A5 73                lda     FRETOP+1
000ECDr 2  E5 71                sbc     STREND+1
000ECFr 2               ; FALL INTO GIVAYF TO FLOAT THE VALUE
000ECFr 2               ; NOTE THAT VALUES OVER 32767 WILL RETURN AS NEGATIVE
000ECFr 2               
000ECFr 2               ; ----------------------------------------------------------------------------
000ECFr 2               ; FLOAT THE SIGNED INTEGER IN A,Y
000ECFr 2               ; ----------------------------------------------------------------------------
000ECFr 2               GIVAYF:
000ECFr 2  A2 00                ldx     #$00
000ED1r 2  86 11                stx     VALTYP
000ED3r 2  85 A1                sta     FAC+1
000ED5r 2  84 A2                sty     FAC+2
000ED7r 2  A2 90                ldx     #$90
000ED9r 2  4C rr rr             jmp     FLOAT1
000EDCr 2               POS:
000EDCr 2  A4 50                ldy     POSX
000EDEr 2               
000EDEr 2               ; ----------------------------------------------------------------------------
000EDEr 2               ; FLOAT (Y) INTO FAC, GIVING VALUE 0-255
000EDEr 2               ; ----------------------------------------------------------------------------
000EDEr 2               SNGFLT:
000EDEr 2  A9 00                lda     #$00
000EE0r 2  F0 ED                beq     GIVAYF
000EE2r 2               
000EE2r 2               ; ----------------------------------------------------------------------------
000EE2r 2               ; CHECK FOR DIRECT OR RUNNING MODE
000EE2r 2               ; GIVING ERROR IF DIRECT MODE
000EE2r 2               ; ----------------------------------------------------------------------------
000EE2r 2               ERRDIR:
000EE2r 2  A6 79                ldx     CURLIN+1
000EE4r 2  E8                   inx
000EE5r 2  D0 A2                bne     RTS9
000EE7r 2  A2 95                ldx     #ERR_ILLDIR
000EE9r 2               .ifdef CONFIG_2
000EE9r 2                       .byte   $2C
000EE9r 2               LD288:
000EE9r 2                       ldx     #ERR_UNDEFFN
000EE9r 2               .endif
000EE9r 2               L31AF:
000EE9r 2  4C rr rr             jmp     ERROR
000EECr 2               DEF:
000EECr 2  20 rr rr             jsr     FNC
000EEFr 2  20 rr rr             jsr     ERRDIR
000EF2r 2  20 rr rr             jsr     CHKOPN
000EF5r 2  A9 80                lda     #$80
000EF7r 2  85 14                sta     SUBFLG
000EF9r 2  20 rr rr             jsr     PTRGET
000EFCr 2  20 rr rr             jsr     CHKNUM
000EFFr 2  20 rr rr             jsr     CHKCLS
000F02r 2  A9 AB                lda     #TOKEN_EQUAL
000F04r 2  20 rr rr             jsr     SYNCHR
000F07r 2               .ifndef CONFIG_SMALL
000F07r 2  48                   pha
000F08r 2               .endif
000F08r 2  A5 87                lda     VARPNT+1
000F0Ar 2  48                   pha
000F0Br 2  A5 86                lda     VARPNT
000F0Dr 2  48                   pha
000F0Er 2  A5 BA                lda     TXTPTR+1
000F10r 2  48                   pha
000F11r 2  A5 B9                lda     TXTPTR
000F13r 2  48                   pha
000F14r 2  20 rr rr             jsr     DATA
000F17r 2  4C rr rr             jmp     L3250
000F1Ar 2               FNC:
000F1Ar 2  A9 9E                lda     #TOKEN_FN
000F1Cr 2  20 rr rr             jsr     SYNCHR
000F1Fr 2  09 80                ora     #$80
000F21r 2  85 14                sta     SUBFLG
000F23r 2  20 rr rr             jsr     PTRGET3
000F26r 2  85 8D                sta     FNCNAM
000F28r 2  84 8E                sty     FNCNAM+1
000F2Ar 2  4C rr rr             jmp     CHKNUM
000F2Dr 2               L31F3:
000F2Dr 2  20 rr rr             jsr     FNC
000F30r 2  A5 8E                lda     FNCNAM+1
000F32r 2  48                   pha
000F33r 2  A5 8D                lda     FNCNAM
000F35r 2  48                   pha
000F36r 2  20 rr rr             jsr     PARCHK
000F39r 2  20 rr rr             jsr     CHKNUM
000F3Cr 2  68                   pla
000F3Dr 2  85 8D                sta     FNCNAM
000F3Fr 2  68                   pla
000F40r 2  85 8E                sta     FNCNAM+1
000F42r 2  A0 02                ldy     #$02
000F44r 2               .ifndef CONFIG_2
000F44r 2  A2 E0                ldx     #ERR_UNDEFFN
000F46r 2               .endif
000F46r 2  B1 8D                lda     (FNCNAM),y
000F48r 2               .ifndef CONFIG_2
000F48r 2  F0 9F                beq     L31AF
000F4Ar 2               .endif
000F4Ar 2  85 86                sta     VARPNT
000F4Cr 2  AA                   tax
000F4Dr 2  C8                   iny
000F4Er 2  B1 8D                lda     (FNCNAM),y
000F50r 2               .ifdef CONFIG_2
000F50r 2                       beq     LD288
000F50r 2               .endif
000F50r 2  85 87                sta     VARPNT+1
000F52r 2               .ifndef CONFIG_SMALL
000F52r 2  C8                   iny
000F53r 2               .endif
000F53r 2               L3219:
000F53r 2  B1 86                lda     (VARPNT),y
000F55r 2  48                   pha
000F56r 2  88                   dey
000F57r 2  10 FA                bpl     L3219
000F59r 2  A4 87                ldy     VARPNT+1
000F5Br 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
000F5Er 2  A5 BA                lda     TXTPTR+1
000F60r 2  48                   pha
000F61r 2  A5 B9                lda     TXTPTR
000F63r 2  48                   pha
000F64r 2  B1 8D                lda     (FNCNAM),y
000F66r 2  85 B9                sta     TXTPTR
000F68r 2  C8                   iny
000F69r 2  B1 8D                lda     (FNCNAM),y
000F6Br 2  85 BA                sta     TXTPTR+1
000F6Dr 2  A5 87                lda     VARPNT+1
000F6Fr 2  48                   pha
000F70r 2  A5 86                lda     VARPNT
000F72r 2  48                   pha
000F73r 2  20 rr rr             jsr     FRMNUM
000F76r 2  68                   pla
000F77r 2  85 8D                sta     FNCNAM
000F79r 2  68                   pla
000F7Ar 2  85 8E                sta     FNCNAM+1
000F7Cr 2  20 B8 00             jsr     CHRGOT
000F7Fr 2  F0 03                beq     L324A
000F81r 2  4C rr rr             jmp     SYNERR
000F84r 2               L324A:
000F84r 2  68                   pla
000F85r 2  85 B9                sta     TXTPTR
000F87r 2  68                   pla
000F88r 2  85 BA                sta     TXTPTR+1
000F8Ar 2               L3250:
000F8Ar 2  A0 00                ldy     #$00
000F8Cr 2  68                   pla
000F8Dr 2  91 8D                sta     (FNCNAM),y
000F8Fr 2  68                   pla
000F90r 2  C8                   iny
000F91r 2  91 8D                sta     (FNCNAM),y
000F93r 2  68                   pla
000F94r 2  C8                   iny
000F95r 2  91 8D                sta     (FNCNAM),y
000F97r 2  68                   pla
000F98r 2  C8                   iny
000F99r 2  91 8D                sta     (FNCNAM),y
000F9Br 2               .ifndef CONFIG_SMALL
000F9Br 2  68                   pla
000F9Cr 2  C8                   iny
000F9Dr 2  91 8D                sta     (FNCNAM),y
000F9Fr 2               .endif
000F9Fr 2  60                   rts
000FA0r 2               
000FA0r 1               .include "string.s"
000FA0r 2               .segment "CODE"
000FA0r 2               ; ----------------------------------------------------------------------------
000FA0r 2               ; "STR$" FUNCTION
000FA0r 2               ; ----------------------------------------------------------------------------
000FA0r 2               STR:
000FA0r 2  20 rr rr             jsr     CHKNUM
000FA3r 2  A0 00                ldy     #$00
000FA5r 2  20 rr rr             jsr     FOUT1
000FA8r 2  68                   pla
000FA9r 2  68                   pla
000FAAr 2               LD353:
000FAAr 2  A9 FF                lda     #<(STACK2-1)
000FACr 2  A0 00                ldy     #>(STACK2-1)
000FAEr 2               .if STACK2 > $0100
000FAEr 2                       bne     STRLIT
000FAEr 2               .else
000FAEr 2  F0 12                beq     STRLIT
000FB0r 2               .endif
000FB0r 2               
000FB0r 2               ; ----------------------------------------------------------------------------
000FB0r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000FB0r 2               ; ADDRESS IS IN FAC+3,4 AND WHOSE LENGTH IS IN A-REG
000FB0r 2               ; ----------------------------------------------------------------------------
000FB0r 2               STRINI:
000FB0r 2  A6 A3                ldx     FAC_LAST-1
000FB2r 2  A4 A4                ldy     FAC_LAST
000FB4r 2  86 8F                stx     DSCPTR
000FB6r 2  84 90                sty     DSCPTR+1
000FB8r 2               
000FB8r 2               ; ----------------------------------------------------------------------------
000FB8r 2               ; GET SPACE AND MAKE DESCRIPTOR FOR STRING WHOSE
000FB8r 2               ; ADDRESS IS IN Y,X AND WHOSE LENGTH IS IN A-REG
000FB8r 2               ; ----------------------------------------------------------------------------
000FB8r 2               STRSPA:
000FB8r 2  20 rr rr             jsr     GETSPA
000FBBr 2  86 A1                stx     FAC+1
000FBDr 2  84 A2                sty     FAC+2
000FBFr 2  85 A0                sta     FAC
000FC1r 2  60                   rts
000FC2r 2               
000FC2r 2               ; ----------------------------------------------------------------------------
000FC2r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000FC2r 2               ; AND TERMINATED BY $00 OR QUOTATION MARK
000FC2r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000FC2r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000FC2r 2               ; ----------------------------------------------------------------------------
000FC2r 2               STRLIT:
000FC2r 2  A2 22                ldx     #$22
000FC4r 2  86 0D                stx     CHARAC
000FC6r 2  86 0E                stx     ENDCHR
000FC8r 2               
000FC8r 2               ; ----------------------------------------------------------------------------
000FC8r 2               ; BUILD A DESCRIPTOR FOR STRING STARTING AT Y,A
000FC8r 2               ; AND TERMINATED BY $00, (CHARAC), OR (ENDCHR)
000FC8r 2               ;
000FC8r 2               ; RETURN WITH DESCRIPTOR IN A TEMPORARY
000FC8r 2               ; AND ADDRESS OF DESCRIPTOR IN FAC+3,4
000FC8r 2               ; ----------------------------------------------------------------------------
000FC8r 2               STRLT2:
000FC8r 2  85 AE                sta     STRNG1
000FCAr 2  84 AF                sty     STRNG1+1
000FCCr 2  85 A1                sta     FAC+1
000FCEr 2  84 A2                sty     FAC+2
000FD0r 2  A0 FF                ldy     #$FF
000FD2r 2               L3298:
000FD2r 2  C8                   iny
000FD3r 2  B1 AE                lda     (STRNG1),y
000FD5r 2  F0 0C                beq     L32A9
000FD7r 2  C5 0D                cmp     CHARAC
000FD9r 2  F0 04                beq     L32A5
000FDBr 2  C5 0E                cmp     ENDCHR
000FDDr 2  D0 F3                bne     L3298
000FDFr 2               L32A5:
000FDFr 2  C9 22                cmp     #$22
000FE1r 2  F0 01                beq     L32AA
000FE3r 2               L32A9:
000FE3r 2  18                   clc
000FE4r 2               L32AA:
000FE4r 2  84 A0                sty     FAC
000FE6r 2  98                   tya
000FE7r 2  65 AE                adc     STRNG1
000FE9r 2  85 B0                sta     STRNG2
000FEBr 2  A6 AF                ldx     STRNG1+1
000FEDr 2  90 01                bcc     L32B6
000FEFr 2  E8                   inx
000FF0r 2               L32B6:
000FF0r 2  86 B1                stx     STRNG2+1
000FF2r 2  A5 AF                lda     STRNG1+1
000FF4r 2               .ifdef CONFIG_NO_INPUTBUFFER_ZP
000FF4r 2  F0 04                beq     LD399
000FF6r 2  C9 02                cmp     #>INPUTBUFFER
000FF8r 2               .elseif .def(AIM65)
000FF8r 2                       beq     LD399
000FF8r 2                       cmp     #$01
000FF8r 2               .endif
000FF8r 2  D0 0B                bne     PUTNEW
000FFAr 2               LD399:
000FFAr 2  98                   tya
000FFBr 2  20 rr rr             jsr     STRINI
000FFEr 2  A6 AE                ldx     STRNG1
001000r 2  A4 AF                ldy     STRNG1+1
001002r 2  20 rr rr             jsr     MOVSTR
001005r 2               
001005r 2               ; ----------------------------------------------------------------------------
001005r 2               ; STORE DESCRIPTOR IN TEMPORARY DESCRIPTOR STACK
001005r 2               ;
001005r 2               ; THE DESCRIPTOR IS NOW IN FAC, FAC+1, FAC+2
001005r 2               ; PUT ADDRESS OF TEMP DESCRIPTOR IN FAC+3,4
001005r 2               ; ----------------------------------------------------------------------------
001005r 2               PUTNEW:
001005r 2  A6 55                ldx     TEMPPT
001007r 2  E0 61                cpx     #TEMPST+9
001009r 2  D0 05                bne     PUTEMP
00100Br 2  A2 BF                ldx     #ERR_FRMCPX
00100Dr 2               JERR:
00100Dr 2  4C rr rr             jmp     ERROR
001010r 2               PUTEMP:
001010r 2  A5 A0                lda     FAC
001012r 2  95 00                sta     0,x
001014r 2  A5 A1                lda     FAC+1
001016r 2  95 01                sta     1,x
001018r 2  A5 A2                lda     FAC+2
00101Ar 2  95 02                sta     2,x
00101Cr 2  A0 00                ldy     #$00
00101Er 2  86 A3                stx     FAC_LAST-1
001020r 2  84 A4                sty     FAC_LAST
001022r 2               .ifdef CONFIG_2
001022r 2                       sty     FACEXTENSION
001022r 2               .endif
001022r 2  88                   dey
001023r 2  84 11                sty     VALTYP
001025r 2  86 56                stx     LASTPT
001027r 2  E8                   inx
001028r 2  E8                   inx
001029r 2  E8                   inx
00102Ar 2  86 55                stx     TEMPPT
00102Cr 2  60                   rts
00102Dr 2               
00102Dr 2               ; ----------------------------------------------------------------------------
00102Dr 2               ; MAKE SPACE FOR STRING AT BOTTOM OF STRING SPACE
00102Dr 2               ; (A)=# BYTES SPACE TO MAKE
00102Dr 2               ;
00102Dr 2               ; RETURN WITH (A) SAME,
00102Dr 2               ;	AND Y,X = ADDRESS OF SPACE ALLOCATED
00102Dr 2               ; ----------------------------------------------------------------------------
00102Dr 2               GETSPA:
00102Dr 2  46 13                lsr     DATAFLG
00102Fr 2               L32F1:
00102Fr 2  48                   pha
001030r 2  49 FF                eor     #$FF
001032r 2  38                   sec
001033r 2  65 72                adc     FRETOP
001035r 2  A4 73                ldy     FRETOP+1
001037r 2  B0 01                bcs     L32FC
001039r 2  88                   dey
00103Ar 2               L32FC:
00103Ar 2  C4 71                cpy     STREND+1
00103Cr 2  90 11                bcc     L3311
00103Er 2  D0 04                bne     L3306
001040r 2  C5 70                cmp     STREND
001042r 2  90 0B                bcc     L3311
001044r 2               L3306:
001044r 2  85 72                sta     FRETOP
001046r 2  84 73                sty     FRETOP+1
001048r 2  85 74                sta     FRESPC
00104Ar 2  84 75                sty     FRESPC+1
00104Cr 2  AA                   tax
00104Dr 2  68                   pla
00104Er 2  60                   rts
00104Fr 2               L3311:
00104Fr 2  A2 4D                ldx     #ERR_MEMFULL
001051r 2  A5 13                lda     DATAFLG
001053r 2  30 B8                bmi     JERR
001055r 2  20 rr rr             jsr     GARBAG
001058r 2  A9 80                lda     #$80
00105Ar 2  85 13                sta     DATAFLG
00105Cr 2  68                   pla
00105Dr 2  D0 D0                bne     L32F1
00105Fr 2               
00105Fr 2               ; ----------------------------------------------------------------------------
00105Fr 2               ; SHOVE ALL REFERENCED STRINGS AS HIGH AS POSSIBLE
00105Fr 2               ; IN MEMORY (AGAINST HIMEM), FREEING UP SPACE
00105Fr 2               ; BELOW STRING AREA DOWN TO STREND.
00105Fr 2               ; ----------------------------------------------------------------------------
00105Fr 2               GARBAG:
00105Fr 2               
00105Fr 2               .ifdef CONST_MEMSIZ
00105Fr 2                       ldx     #<CONST_MEMSIZ
00105Fr 2                       lda     #>CONST_MEMSIZ
00105Fr 2               .else
00105Fr 2  A6 76                ldx     MEMSIZ
001061r 2  A5 77                lda     MEMSIZ+1
001063r 2               .endif
001063r 2               FINDHIGHESTSTRING:
001063r 2  86 72                stx     FRETOP
001065r 2  85 73                sta     FRETOP+1
001067r 2  A0 00                ldy     #$00
001069r 2  84 8E                sty     FNCNAM+1
00106Br 2               .ifdef CONFIG_2
00106Br 2                       sty     FNCNAM	; GC bugfix!
00106Br 2               .endif
00106Br 2  A5 70                lda     STREND
00106Dr 2  A6 71                ldx     STREND+1
00106Fr 2  85 9E                sta     LOWTR
001071r 2  86 9F                stx     LOWTR+1
001073r 2  A9 58                lda     #TEMPST
001075r 2  A2 00                ldx     #$00
001077r 2  85 61                sta     INDEX
001079r 2  86 62                stx     INDEX+1
00107Br 2               L333D:
00107Br 2  C5 55                cmp     TEMPPT
00107Dr 2  F0 05                beq     L3346
00107Fr 2  20 rr rr             jsr     CHECK_VARIABLE
001082r 2  F0 F7                beq     L333D
001084r 2               L3346:
001084r 2  A9 07                lda     #BYTES_PER_VARIABLE
001086r 2  85 92                sta     DSCLEN
001088r 2  A5 6C                lda     VARTAB
00108Ar 2  A6 6D                ldx     VARTAB+1
00108Cr 2  85 61                sta     INDEX
00108Er 2  86 62                stx     INDEX+1
001090r 2               L3352:
001090r 2  E4 6F                cpx     ARYTAB+1
001092r 2  D0 04                bne     L335A
001094r 2  C5 6E                cmp     ARYTAB
001096r 2  F0 05                beq     L335F
001098r 2               L335A:
001098r 2  20 rr rr             jsr     CHECK_SIMPLE_VARIABLE
00109Br 2  F0 F3                beq     L3352
00109Dr 2               L335F:
00109Dr 2  85 97                sta     HIGHDS
00109Fr 2  86 98                stx     HIGHDS+1
0010A1r 2  A9 03                lda     #$03	; OSI GC bugfix -> $04 ???
0010A3r 2  85 92                sta     DSCLEN
0010A5r 2               L3367:
0010A5r 2  A5 97                lda     HIGHDS
0010A7r 2  A6 98                ldx     HIGHDS+1
0010A9r 2               L336B:
0010A9r 2  E4 71                cpx     STREND+1
0010ABr 2  D0 07                bne     L3376
0010ADr 2  C5 70                cmp     STREND
0010AFr 2  D0 03                bne     L3376
0010B1r 2  4C rr rr             jmp     MOVE_HIGHEST_STRING_TO_TOP
0010B4r 2               L3376:
0010B4r 2  85 61                sta     INDEX
0010B6r 2  86 62                stx     INDEX+1
0010B8r 2               .ifdef CONFIG_SMALL
0010B8r 2                       ldy     #$01
0010B8r 2               .else
0010B8r 2  A0 00                ldy     #$00
0010BAr 2  B1 61                lda     (INDEX),y
0010BCr 2  AA                   tax
0010BDr 2  C8                   iny
0010BEr 2               .endif
0010BEr 2  B1 61                lda     (INDEX),y
0010C0r 2  08                   php
0010C1r 2  C8                   iny
0010C2r 2  B1 61                lda     (INDEX),y
0010C4r 2  65 97                adc     HIGHDS
0010C6r 2  85 97                sta     HIGHDS
0010C8r 2  C8                   iny
0010C9r 2  B1 61                lda     (INDEX),y
0010CBr 2  65 98                adc     HIGHDS+1
0010CDr 2  85 98                sta     HIGHDS+1
0010CFr 2  28                   plp
0010D0r 2  10 D3                bpl     L3367
0010D2r 2               .ifndef CONFIG_SMALL
0010D2r 2  8A                   txa
0010D3r 2  30 D0                bmi     L3367
0010D5r 2               .endif
0010D5r 2  C8                   iny
0010D6r 2  B1 61                lda     (INDEX),y
0010D8r 2               .ifdef CONFIG_CBM1_PATCHES
0010D8r 2                       jsr     LE7F3 ; XXX patch, call into screen editor
0010D8r 2               .else
0010D8r 2                 .ifdef CONFIG_11
0010D8r 2  A0 00                ldy     #$00	; GC bugfix
0010DAr 2                 .endif
0010DAr 2  0A                   asl     a
0010DBr 2  69 05                adc     #$05
0010DDr 2               .endif
0010DDr 2  65 61                adc     INDEX
0010DFr 2  85 61                sta     INDEX
0010E1r 2  90 02                bcc     L33A7
0010E3r 2  E6 62                inc     INDEX+1
0010E5r 2               L33A7:
0010E5r 2  A6 62                ldx     INDEX+1
0010E7r 2               L33A9:
0010E7r 2  E4 98                cpx     HIGHDS+1
0010E9r 2  D0 04                bne     L33B1
0010EBr 2  C5 97                cmp     HIGHDS
0010EDr 2  F0 BA                beq     L336B
0010EFr 2               L33B1:
0010EFr 2  20 rr rr             jsr     CHECK_VARIABLE
0010F2r 2  F0 F3                beq     L33A9
0010F4r 2               
0010F4r 2               ; ----------------------------------------------------------------------------
0010F4r 2               ; PROCESS A SIMPLE VARIABLE
0010F4r 2               ; ----------------------------------------------------------------------------
0010F4r 2               CHECK_SIMPLE_VARIABLE:
0010F4r 2               .ifndef CONFIG_SMALL
0010F4r 2  B1 61                lda     (INDEX),y
0010F6r 2  30 35                bmi     CHECK_BUMP
0010F8r 2               .endif
0010F8r 2  C8                   iny
0010F9r 2  B1 61                lda     (INDEX),y
0010FBr 2  10 30                bpl     CHECK_BUMP
0010FDr 2  C8                   iny
0010FEr 2               
0010FEr 2               ; ----------------------------------------------------------------------------
0010FEr 2               ; IF STRING IS NOT EMPTY, CHECK IF IT IS HIGHEST
0010FEr 2               ; ----------------------------------------------------------------------------
0010FEr 2               CHECK_VARIABLE:
0010FEr 2  B1 61                lda     (INDEX),y
001100r 2  F0 2B                beq     CHECK_BUMP
001102r 2  C8                   iny
001103r 2  B1 61                lda     (INDEX),y
001105r 2  AA                   tax
001106r 2  C8                   iny
001107r 2  B1 61                lda     (INDEX),y
001109r 2  C5 73                cmp     FRETOP+1
00110Br 2  90 06                bcc     L33D5
00110Dr 2  D0 1E                bne     CHECK_BUMP
00110Fr 2  E4 72                cpx     FRETOP
001111r 2  B0 1A                bcs     CHECK_BUMP
001113r 2               L33D5:
001113r 2  C5 9F                cmp     LOWTR+1
001115r 2  90 16                bcc     CHECK_BUMP
001117r 2  D0 04                bne     L33DF
001119r 2  E4 9E                cpx     LOWTR
00111Br 2  90 10                bcc     CHECK_BUMP
00111Dr 2               L33DF:
00111Dr 2  86 9E                stx     LOWTR
00111Fr 2  85 9F                sta     LOWTR+1
001121r 2  A5 61                lda     INDEX
001123r 2  A6 62                ldx     INDEX+1
001125r 2  85 8D                sta     FNCNAM
001127r 2  86 8E                stx     FNCNAM+1
001129r 2  A5 92                lda     DSCLEN
00112Br 2  85 94                sta     Z52
00112Dr 2               
00112Dr 2               ; ----------------------------------------------------------------------------
00112Dr 2               ; ADD (DSCLEN) TO PNTR IN INDEX
00112Dr 2               ; RETURN WITH Y=0, PNTR ALSO IN X,A
00112Dr 2               ; ----------------------------------------------------------------------------
00112Dr 2               CHECK_BUMP:
00112Dr 2  A5 92                lda     DSCLEN
00112Fr 2  18                   clc
001130r 2  65 61                adc     INDEX
001132r 2  85 61                sta     INDEX
001134r 2  90 02                bcc     L33FA
001136r 2  E6 62                inc     INDEX+1
001138r 2               L33FA:
001138r 2  A6 62                ldx     INDEX+1
00113Ar 2  A0 00                ldy     #$00
00113Cr 2  60                   rts
00113Dr 2               
00113Dr 2               ; ----------------------------------------------------------------------------
00113Dr 2               ; FOUND HIGHEST NON-EMPTY STRING, SO MOVE IT
00113Dr 2               ; TO TOP AND GO BACK FOR ANOTHER
00113Dr 2               ; ----------------------------------------------------------------------------
00113Dr 2               MOVE_HIGHEST_STRING_TO_TOP:
00113Dr 2               .ifdef CONFIG_2
00113Dr 2                       lda     FNCNAM+1	; GC bugfix
00113Dr 2                       ora     FNCNAM
00113Dr 2               .else
00113Dr 2  A6 8E                ldx     FNCNAM+1
00113Fr 2               .endif
00113Fr 2  F0 F7                beq     L33FA
001141r 2  A5 94                lda     Z52
001143r 2               .ifndef CONFIG_10A
001143r 2                       sbc     #$03
001143r 2               .else
001143r 2  29 04                and     #$04
001145r 2               .endif
001145r 2  4A                   lsr     a
001146r 2  A8                   tay
001147r 2  85 94                sta     Z52
001149r 2  B1 8D                lda     (FNCNAM),y
00114Br 2  65 9E                adc     LOWTR
00114Dr 2  85 99                sta     HIGHTR
00114Fr 2  A5 9F                lda     LOWTR+1
001151r 2  69 00                adc     #$00
001153r 2  85 9A                sta     HIGHTR+1
001155r 2  A5 72                lda     FRETOP
001157r 2  A6 73                ldx     FRETOP+1
001159r 2  85 97                sta     HIGHDS
00115Br 2  86 98                stx     HIGHDS+1
00115Dr 2  20 rr rr             jsr     BLTU2
001160r 2  A4 94                ldy     Z52
001162r 2  C8                   iny
001163r 2  A5 97                lda     HIGHDS
001165r 2  91 8D                sta     (FNCNAM),y
001167r 2  AA                   tax
001168r 2  E6 98                inc     HIGHDS+1
00116Ar 2  A5 98                lda     HIGHDS+1
00116Cr 2  C8                   iny
00116Dr 2  91 8D                sta     (FNCNAM),y
00116Fr 2  4C rr rr             jmp     FINDHIGHESTSTRING
001172r 2               
001172r 2               ; ----------------------------------------------------------------------------
001172r 2               ; CONCATENATE TWO STRINGS
001172r 2               ; ----------------------------------------------------------------------------
001172r 2               CAT:
001172r 2  A5 A4                lda     FAC_LAST
001174r 2  48                   pha
001175r 2  A5 A3                lda     FAC_LAST-1
001177r 2  48                   pha
001178r 2  20 rr rr             jsr     FRM_ELEMENT
00117Br 2  20 rr rr             jsr     CHKSTR
00117Er 2  68                   pla
00117Fr 2  85 AE                sta     STRNG1
001181r 2  68                   pla
001182r 2  85 AF                sta     STRNG1+1
001184r 2  A0 00                ldy     #$00
001186r 2  B1 AE                lda     (STRNG1),y
001188r 2  18                   clc
001189r 2  71 A3                adc     (FAC_LAST-1),y
00118Br 2  90 05                bcc     L3454
00118Dr 2  A2 B0                ldx     #ERR_STRLONG
00118Fr 2  4C rr rr             jmp     ERROR
001192r 2               L3454:
001192r 2  20 rr rr             jsr     STRINI
001195r 2  20 rr rr             jsr     MOVINS
001198r 2  A5 8F                lda     DSCPTR
00119Ar 2  A4 90                ldy     DSCPTR+1
00119Cr 2  20 rr rr             jsr     FRETMP
00119Fr 2  20 rr rr             jsr     MOVSTR1
0011A2r 2  A5 AE                lda     STRNG1
0011A4r 2  A4 AF                ldy     STRNG1+1
0011A6r 2  20 rr rr             jsr     FRETMP
0011A9r 2  20 rr rr             jsr     PUTNEW
0011ACr 2  4C rr rr             jmp     FRMEVL2
0011AFr 2               
0011AFr 2               ; ----------------------------------------------------------------------------
0011AFr 2               ; GET STRING DESCRIPTOR POINTED AT BY (STRNG1)
0011AFr 2               ; AND MOVE DESCRIBED STRING TO (FRESPC)
0011AFr 2               ; ----------------------------------------------------------------------------
0011AFr 2               MOVINS:
0011AFr 2  A0 00                ldy     #$00
0011B1r 2  B1 AE                lda     (STRNG1),y
0011B3r 2  48                   pha
0011B4r 2  C8                   iny
0011B5r 2  B1 AE                lda     (STRNG1),y
0011B7r 2  AA                   tax
0011B8r 2  C8                   iny
0011B9r 2  B1 AE                lda     (STRNG1),y
0011BBr 2  A8                   tay
0011BCr 2  68                   pla
0011BDr 2               
0011BDr 2               ; ----------------------------------------------------------------------------
0011BDr 2               ; MOVE STRING AT (Y,X) WITH LENGTH (A)
0011BDr 2               ; TO DESTINATION WHOSE ADDRESS IS IN FRESPC,FRESPC+1
0011BDr 2               ; ----------------------------------------------------------------------------
0011BDr 2               MOVSTR:
0011BDr 2  86 61                stx     INDEX
0011BFr 2  84 62                sty     INDEX+1
0011C1r 2               MOVSTR1:
0011C1r 2  A8                   tay
0011C2r 2  F0 0A                beq     L3490
0011C4r 2  48                   pha
0011C5r 2               L3487:
0011C5r 2  88                   dey
0011C6r 2  B1 61                lda     (INDEX),y
0011C8r 2  91 74                sta     (FRESPC),y
0011CAr 2  98                   tya
0011CBr 2  D0 F8                bne     L3487
0011CDr 2  68                   pla
0011CEr 2               L3490:
0011CEr 2  18                   clc
0011CFr 2  65 74                adc     FRESPC
0011D1r 2  85 74                sta     FRESPC
0011D3r 2  90 02                bcc     L3499
0011D5r 2  E6 75                inc     FRESPC+1
0011D7r 2               L3499:
0011D7r 2  60                   rts
0011D8r 2               
0011D8r 2               ; ----------------------------------------------------------------------------
0011D8r 2               ; IF (FAC) IS A TEMPORARY STRING, RELEASE DESCRIPTOR
0011D8r 2               ; ----------------------------------------------------------------------------
0011D8r 2               FRESTR:
0011D8r 2  20 rr rr             jsr     CHKSTR
0011DBr 2               
0011DBr 2               ; ----------------------------------------------------------------------------
0011DBr 2               ; IF STRING DESCRIPTOR POINTED TO BY FAC+3,4 IS
0011DBr 2               ; A TEMPORARY STRING, RELEASE IT.
0011DBr 2               ; ----------------------------------------------------------------------------
0011DBr 2               FREFAC:
0011DBr 2  A5 A3                lda     FAC_LAST-1
0011DDr 2  A4 A4                ldy     FAC_LAST
0011DFr 2               
0011DFr 2               ; ----------------------------------------------------------------------------
0011DFr 2               ; IF STRING DESCRIPTOR WHOSE ADDRESS IS IN Y,A IS
0011DFr 2               ; A TEMPORARY STRING, RELEASE IT.
0011DFr 2               ; ----------------------------------------------------------------------------
0011DFr 2               FRETMP:
0011DFr 2  85 61                sta     INDEX
0011E1r 2  84 62                sty     INDEX+1
0011E3r 2  20 rr rr             jsr     FRETMS
0011E6r 2  08                   php
0011E7r 2  A0 00                ldy     #$00
0011E9r 2  B1 61                lda     (INDEX),y
0011EBr 2  48                   pha
0011ECr 2  C8                   iny
0011EDr 2  B1 61                lda     (INDEX),y
0011EFr 2  AA                   tax
0011F0r 2  C8                   iny
0011F1r 2  B1 61                lda     (INDEX),y
0011F3r 2  A8                   tay
0011F4r 2  68                   pla
0011F5r 2  28                   plp
0011F6r 2  D0 13                bne     L34CD
0011F8r 2  C4 73                cpy     FRETOP+1
0011FAr 2  D0 0F                bne     L34CD
0011FCr 2  E4 72                cpx     FRETOP
0011FEr 2  D0 0B                bne     L34CD
001200r 2  48                   pha
001201r 2  18                   clc
001202r 2  65 72                adc     FRETOP
001204r 2  85 72                sta     FRETOP
001206r 2  90 02                bcc     L34CC
001208r 2  E6 73                inc     FRETOP+1
00120Ar 2               L34CC:
00120Ar 2  68                   pla
00120Br 2               L34CD:
00120Br 2  86 61                stx     INDEX
00120Dr 2  84 62                sty     INDEX+1
00120Fr 2  60                   rts
001210r 2               
001210r 2               ; ----------------------------------------------------------------------------
001210r 2               ; RELEASE TEMPORARY DESCRIPTOR IF Y,A = LASTPT
001210r 2               ; ----------------------------------------------------------------------------
001210r 2               FRETMS:
001210r 2               .ifdef KBD
001210r 2                       cpy     #$00
001210r 2               .else
001210r 2  C4 57                cpy     LASTPT+1
001212r 2               .endif
001212r 2  D0 0C                bne     L34E2
001214r 2  C5 56                cmp     LASTPT
001216r 2  D0 08                bne     L34E2
001218r 2  85 55                sta     TEMPPT
00121Ar 2  E9 03                sbc     #$03
00121Cr 2  85 56                sta     LASTPT
00121Er 2  A0 00                ldy     #$00
001220r 2               L34E2:
001220r 2  60                   rts
001221r 2               
001221r 2               ; ----------------------------------------------------------------------------
001221r 2               ; "CHR$" FUNCTION
001221r 2               ; ----------------------------------------------------------------------------
001221r 2               CHRSTR:
001221r 2  20 rr rr             jsr     CONINT
001224r 2  8A                   txa
001225r 2  48                   pha
001226r 2  A9 01                lda     #$01
001228r 2  20 rr rr             jsr     STRSPA
00122Br 2  68                   pla
00122Cr 2  A0 00                ldy     #$00
00122Er 2  91 A1                sta     (FAC+1),y
001230r 2  68                   pla
001231r 2  68                   pla
001232r 2  4C rr rr             jmp     PUTNEW
001235r 2               
001235r 2               ; ----------------------------------------------------------------------------
001235r 2               ; "LEFT$" FUNCTION
001235r 2               ; ----------------------------------------------------------------------------
001235r 2               LEFTSTR:
001235r 2  20 rr rr             jsr     SUBSTRING_SETUP
001238r 2  D1 8F                cmp     (DSCPTR),y
00123Ar 2  98                   tya
00123Br 2               SUBSTRING1:
00123Br 2  90 04                bcc     L3503
00123Dr 2  B1 8F                lda     (DSCPTR),y
00123Fr 2  AA                   tax
001240r 2  98                   tya
001241r 2               L3503:
001241r 2  48                   pha
001242r 2               SUBSTRING2:
001242r 2  8A                   txa
001243r 2               SUBSTRING3:
001243r 2  48                   pha
001244r 2  20 rr rr             jsr     STRSPA
001247r 2  A5 8F                lda     DSCPTR
001249r 2  A4 90                ldy     DSCPTR+1
00124Br 2  20 rr rr             jsr     FRETMP
00124Er 2  68                   pla
00124Fr 2  A8                   tay
001250r 2  68                   pla
001251r 2  18                   clc
001252r 2  65 61                adc     INDEX
001254r 2  85 61                sta     INDEX
001256r 2  90 02                bcc     L351C
001258r 2  E6 62                inc     INDEX+1
00125Ar 2               L351C:
00125Ar 2  98                   tya
00125Br 2  20 rr rr             jsr     MOVSTR1
00125Er 2  4C rr rr             jmp     PUTNEW
001261r 2               
001261r 2               ; ----------------------------------------------------------------------------
001261r 2               ; "RIGHT$" FUNCTION
001261r 2               ; ----------------------------------------------------------------------------
001261r 2               RIGHTSTR:
001261r 2  20 rr rr             jsr     SUBSTRING_SETUP
001264r 2  18                   clc
001265r 2  F1 8F                sbc     (DSCPTR),y
001267r 2  49 FF                eor     #$FF
001269r 2  4C rr rr             jmp     SUBSTRING1
00126Cr 2               
00126Cr 2               ; ----------------------------------------------------------------------------
00126Cr 2               ; "MID$" FUNCTION
00126Cr 2               ; ----------------------------------------------------------------------------
00126Cr 2               MIDSTR:
00126Cr 2  A9 FF                lda     #$FF
00126Er 2  85 A4                sta     FAC_LAST
001270r 2  20 B8 00             jsr     CHRGOT
001273r 2  C9 29                cmp     #$29
001275r 2  F0 06                beq     L353F
001277r 2  20 rr rr             jsr     CHKCOM
00127Ar 2  20 rr rr             jsr     GETBYT
00127Dr 2               L353F:
00127Dr 2  20 rr rr             jsr     SUBSTRING_SETUP
001280r 2               .ifdef CONFIG_2
001280r 2                       beq     GOIQ
001280r 2               .endif
001280r 2  CA                   dex
001281r 2  8A                   txa
001282r 2  48                   pha
001283r 2  18                   clc
001284r 2  A2 00                ldx     #$00
001286r 2  F1 8F                sbc     (DSCPTR),y
001288r 2  B0 B8                bcs     SUBSTRING2
00128Ar 2  49 FF                eor     #$FF
00128Cr 2  C5 A4                cmp     FAC_LAST
00128Er 2  90 B3                bcc     SUBSTRING3
001290r 2  A5 A4                lda     FAC_LAST
001292r 2  B0 AF                bcs     SUBSTRING3
001294r 2               
001294r 2               ; ----------------------------------------------------------------------------
001294r 2               ; COMMON SETUP ROUTINE FOR LEFT$, RIGHT$, MID$:
001294r 2               ; REQUIRE ")"; POP RETURN ADRS, GET DESCRIPTOR
001294r 2               ; ADDRESS, GET 1ST PARAMETER OF COMMAND
001294r 2               ; ----------------------------------------------------------------------------
001294r 2               SUBSTRING_SETUP:
001294r 2  20 rr rr             jsr     CHKCLS
001297r 2  68                   pla
001298r 2               .ifndef CONFIG_11
001298r 2                       sta     JMPADRS+1
001298r 2                       pla
001298r 2                       sta     JMPADRS+2
001298r 2               .else
001298r 2  A8                   tay
001299r 2  68                   pla
00129Ar 2  85 94                sta     Z52
00129Cr 2               .endif
00129Cr 2  68                   pla
00129Dr 2  68                   pla
00129Er 2  68                   pla
00129Fr 2  AA                   tax
0012A0r 2  68                   pla
0012A1r 2  85 8F                sta     DSCPTR
0012A3r 2  68                   pla
0012A4r 2  85 90                sta     DSCPTR+1
0012A6r 2               .ifdef CONFIG_11
0012A6r 2  A5 94                lda     Z52
0012A8r 2  48                   pha
0012A9r 2  98                   tya
0012AAr 2  48                   pha
0012ABr 2               .endif
0012ABr 2  A0 00                ldy     #$00
0012ADr 2  8A                   txa
0012AEr 2               .ifndef CONFIG_2
0012AEr 2  F0 1D                beq     GOIQ
0012B0r 2               .endif
0012B0r 2               .ifndef CONFIG_11
0012B0r 2                       inc     JMPADRS+1
0012B0r 2                       jmp     (JMPADRS+1)
0012B0r 2               .else
0012B0r 2  60                   rts
0012B1r 2               .endif
0012B1r 2               
0012B1r 2               ; ----------------------------------------------------------------------------
0012B1r 2               ; "LEN" FUNCTION
0012B1r 2               ; ----------------------------------------------------------------------------
0012B1r 2               LEN:
0012B1r 2  20 rr rr             jsr     GETSTR
0012B4r 2               SNGFLT1:
0012B4r 2  4C rr rr             jmp     SNGFLT
0012B7r 2               
0012B7r 2               ; ----------------------------------------------------------------------------
0012B7r 2               ; IF LAST RESULT IS A TEMPORARY STRING, FREE IT
0012B7r 2               ; MAKE VALTYP NUMERIC, RETURN LENGTH IN Y-REG
0012B7r 2               ; ----------------------------------------------------------------------------
0012B7r 2               GETSTR:
0012B7r 2  20 rr rr             jsr     FRESTR
0012BAr 2  A2 00                ldx     #$00
0012BCr 2  86 11                stx     VALTYP
0012BEr 2  A8                   tay
0012BFr 2  60                   rts
0012C0r 2               
0012C0r 2               ; ----------------------------------------------------------------------------
0012C0r 2               ; "ASC" FUNCTION
0012C0r 2               ; ----------------------------------------------------------------------------
0012C0r 2               ASC:
0012C0r 2  20 rr rr             jsr     GETSTR
0012C3r 2  F0 08                beq     GOIQ
0012C5r 2  A0 00                ldy     #$00
0012C7r 2  B1 61                lda     (INDEX),y
0012C9r 2  A8                   tay
0012CAr 2               .ifndef CONFIG_11A
0012CAr 2  4C rr rr             jmp     SNGFLT1
0012CDr 2               .else
0012CDr 2                       jmp     SNGFLT
0012CDr 2               .endif
0012CDr 2               ; ----------------------------------------------------------------------------
0012CDr 2               GOIQ:
0012CDr 2  4C rr rr             jmp     IQERR
0012D0r 2               
0012D0r 2               ; ----------------------------------------------------------------------------
0012D0r 2               ; SCAN TO NEXT CHARACTER AND CONVERT EXPRESSION
0012D0r 2               ; TO SINGLE BYTE IN X-REG
0012D0r 2               ; ----------------------------------------------------------------------------
0012D0r 2               GTBYTC:
0012D0r 2  20 B2 00             jsr     CHRGET
0012D3r 2               
0012D3r 2               ; ----------------------------------------------------------------------------
0012D3r 2               ; EVALUATE EXPRESSION AT TXTPTR, AND
0012D3r 2               ; CONVERT IT TO SINGLE BYTE IN X-REG
0012D3r 2               ; ----------------------------------------------------------------------------
0012D3r 2               GETBYT:
0012D3r 2  20 rr rr             jsr     FRMNUM
0012D6r 2               
0012D6r 2               ; ----------------------------------------------------------------------------
0012D6r 2               ; CONVERT (FAC) TO SINGLE BYTE INTEGER IN X-REG
0012D6r 2               ; ----------------------------------------------------------------------------
0012D6r 2               CONINT:
0012D6r 2  20 rr rr             jsr     MKINT
0012D9r 2  A6 A3                ldx     FAC_LAST-1
0012DBr 2  D0 F0                bne     GOIQ
0012DDr 2  A6 A4                ldx     FAC_LAST
0012DFr 2  4C B8 00             jmp     CHRGOT
0012E2r 2               
0012E2r 2               ; ----------------------------------------------------------------------------
0012E2r 2               ; "VAL" FUNCTION
0012E2r 2               ; ----------------------------------------------------------------------------
0012E2r 2               VAL:
0012E2r 2  20 rr rr             jsr     GETSTR
0012E5r 2  D0 03                bne     L35AC
0012E7r 2  4C rr rr             jmp     ZERO_FAC
0012EAr 2               L35AC:
0012EAr 2  A6 B9                ldx     TXTPTR
0012ECr 2  A4 BA                ldy     TXTPTR+1
0012EEr 2  86 B0                stx     STRNG2
0012F0r 2  84 B1                sty     STRNG2+1
0012F2r 2  A6 61                ldx     INDEX
0012F4r 2  86 B9                stx     TXTPTR
0012F6r 2  18                   clc
0012F7r 2  65 61                adc     INDEX
0012F9r 2  85 63                sta     DEST
0012FBr 2  A6 62                ldx     INDEX+1
0012FDr 2  86 BA                stx     TXTPTR+1
0012FFr 2  90 01                bcc     L35C4
001301r 2  E8                   inx
001302r 2               L35C4:
001302r 2  86 64                stx     DEST+1
001304r 2  A0 00                ldy     #$00
001306r 2  B1 63                lda     (DEST),y
001308r 2  48                   pha
001309r 2  A9 00                lda     #$00
00130Br 2  91 63                sta     (DEST),y
00130Dr 2  20 B8 00             jsr     CHRGOT
001310r 2  20 rr rr             jsr     FIN
001313r 2  68                   pla
001314r 2  A0 00                ldy     #$00
001316r 2  91 63                sta     (DEST),y
001318r 2               
001318r 2               ; ----------------------------------------------------------------------------
001318r 2               ; COPY STRNG2 INTO TXTPTR
001318r 2               ; ----------------------------------------------------------------------------
001318r 2               POINT:
001318r 2  A6 B0                ldx     STRNG2
00131Ar 2  A4 B1                ldy     STRNG2+1
00131Cr 2  86 B9                stx     TXTPTR
00131Er 2  84 BA                sty     TXTPTR+1
001320r 2  60                   rts
001321r 2               
001321r 2               
001321r 1               .include "misc3.s"
001321r 2               ; KBD specific patches
001321r 2               
001321r 2               .segment "CODE"
001321r 2               
001321r 2               .ifdef KBD
001321r 2               VARTAB_MINUS_2_TO_AY:
001321r 2                       lda     VARTAB
001321r 2                       sec
001321r 2                       sbc     #$02
001321r 2                       ldy     VARTAB+1
001321r 2                       bcs     LF42C
001321r 2                       dey
001321r 2               LF42C:
001321r 2                       rts
001321r 2               
001321r 2               ; ----------------------------------------------------------------------------
001321r 2               GET_UPPER:
001321r 2                       lda     INPUTBUFFERX,x
001321r 2               LF430:
001321r 2                       cmp     #'a'
001321r 2                       bcc     LF43A
001321r 2                       cmp     #'z'+1
001321r 2                       bcs     LF43A
001321r 2               LF438:
001321r 2                       sbc     #$1F
001321r 2               LF43A:
001321r 2                       rts
001321r 2               
001321r 2               ; ----------------------------------------------------------------------------
001321r 2               GETLN:
001321r 2                       ldx     #$5D
001321r 2               LF43D:
001321r 2                       txa
001321r 2                       and     #$7F
001321r 2                       cmp     $0340
001321r 2                       beq     LF44D
001321r 2                       sta     $0340
001321r 2                       lda     #$03
001321r 2                       jsr     LDE48
001321r 2               LF44D:
001321r 2                       jsr     LDE7F
001321r 2                       bne     RTS4
001321r 2                       cpx     #$80
001321r 2                       bcc     LF44D
001321r 2               RTS4:
001321r 2                       rts
001321r 2               
001321r 2               ; ----------------------------------------------------------------------------
001321r 2               LF457:
001321r 2                       lda     TXTTAB
001321r 2                       ldx     TXTTAB+1
001321r 2               LF45B:
001321r 2                       sta     JMPADRS+1
001321r 2                       stx     JMPADRS+2
001321r 2                       ldy     #$01
001321r 2                       lda     (JMPADRS+1),y
001321r 2                       beq     LF438
001321r 2                       iny
001321r 2                       iny
001321r 2                       lda     (JMPADRS+1),y
001321r 2                       dey
001321r 2                       cmp     LINNUM+1
001321r 2                       bne     LF472
001321r 2                       lda     (JMPADRS+1),y
001321r 2                       cmp     LINNUM
001321r 2               LF472:
001321r 2                       bcs     LF43A
001321r 2                       dey
001321r 2                       lda     (JMPADRS+1),y
001321r 2                       tax
001321r 2                       dey
001321r 2                       lda     (JMPADRS+1),y
001321r 2                       bcc     LF45B
001321r 2               LF47D:
001321r 2                       jmp     (JMPADRS+1)
001321r 2               .endif
001321r 2               
001321r 1               .include "poke.s"
001321r 2               .segment "CODE"
001321r 2               
001321r 2               .ifndef CONFIG_NO_POKE
001321r 2               ; ----------------------------------------------------------------------------
001321r 2               ; EVALUATE "EXP1,EXP2"
001321r 2               ;
001321r 2               ; CONVERT EXP1 TO 16-BIT NUMBER IN LINNUM
001321r 2               ; CONVERT EXP2 TO 8-BIT NUMBER IN X-REG
001321r 2               ; ----------------------------------------------------------------------------
001321r 2               GTNUM:
001321r 2  20 rr rr             jsr     FRMNUM
001324r 2  20 rr rr             jsr     GETADR
001327r 2               
001327r 2               ; ----------------------------------------------------------------------------
001327r 2               ; EVALUATE ",EXPRESSION"
001327r 2               ; CONVERT EXPRESSION TO SINGLE BYTE IN X-REG
001327r 2               ; ----------------------------------------------------------------------------
001327r 2               COMBYTE:
001327r 2  20 rr rr             jsr     CHKCOM
00132Ar 2  4C rr rr             jmp     GETBYT
00132Dr 2               
00132Dr 2               ; ----------------------------------------------------------------------------
00132Dr 2               ; CONVERT (FAC) TO A 16-BIT VALUE IN LINNUM
00132Dr 2               ; ----------------------------------------------------------------------------
00132Dr 2               GETADR:
00132Dr 2  A5 A5                lda     FACSIGN
00132Fr 2                 .ifdef APPLE
00132Fr 2  EA                   nop ; PATCH
001330r 2  EA                   nop
001331r 2                 .else
001331r 2                       bmi     GOIQ
001331r 2                 .endif
001331r 2  A5 A0                lda     FAC
001333r 2  C9 91                cmp     #$91
001335r 2  B0 96                bcs     GOIQ
001337r 2  20 rr rr             jsr     QINT
00133Ar 2  A5 A3                lda     FAC_LAST-1
00133Cr 2  A4 A4                ldy     FAC_LAST
00133Er 2  84 53                sty     LINNUM
001340r 2  85 54                sta     LINNUM+1
001342r 2  60                   rts
001343r 2               
001343r 2               ; ----------------------------------------------------------------------------
001343r 2               ; "PEEK" FUNCTION
001343r 2               ; ----------------------------------------------------------------------------
001343r 2               PEEK:
001343r 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
001343r 2                       lda     LINNUM+1
001343r 2                       pha
001343r 2                       lda     LINNUM
001343r 2                       pha
001343r 2               .endif
001343r 2  20 rr rr             jsr     GETADR
001346r 2  A0 00                ldy     #$00
001348r 2               .ifdef CBM1
001348r 2               ; disallow PEEK between $C000 and $DFFF
001348r 2                       cmp     #$C0
001348r 2                       bcc     LD6F3
001348r 2                       cmp     #$E1
001348r 2                       bcc     LD6F6
001348r 2               LD6F3:
001348r 2               .endif
001348r 2               .ifdef CBM2
001348r 2               		nop ; patch that disables the compares above
001348r 2               		nop
001348r 2               		nop
001348r 2               		nop
001348r 2               		nop
001348r 2               		nop
001348r 2               		nop
001348r 2               		nop
001348r 2               .endif
001348r 2  B1 53                lda     (LINNUM),y
00134Ar 2  A8                   tay
00134Br 2               .ifdef CONFIG_PEEK_SAVE_LINNUM
00134Br 2                       pla
00134Br 2                       sta     LINNUM
00134Br 2                       pla
00134Br 2                       sta     LINNUM+1
00134Br 2               .endif
00134Br 2               LD6F6:
00134Br 2  4C rr rr             jmp     SNGFLT
00134Er 2               
00134Er 2               ; ----------------------------------------------------------------------------
00134Er 2               ; "POKE" STATEMENT
00134Er 2               ; ----------------------------------------------------------------------------
00134Er 2               POKE:
00134Er 2  20 rr rr             jsr     GTNUM
001351r 2  8A                   txa
001352r 2  A0 00                ldy     #$00
001354r 2  91 53                sta     (LINNUM),y
001356r 2  60                   rts
001357r 2               
001357r 2               ; ----------------------------------------------------------------------------
001357r 2               ; "WAIT" STATEMENT
001357r 2               ; ----------------------------------------------------------------------------
001357r 2               WAIT:
001357r 2  20 rr rr             jsr     GTNUM
00135Ar 2  86 88                stx     FORPNT
00135Cr 2  A2 00                ldx     #$00
00135Er 2  20 B8 00             jsr     CHRGOT
001361r 2               .ifdef CONFIG_EASTER_EGG
001361r 2                       beq     EASTER_EGG
001361r 2               .else
001361r 2  F0 03                beq     L3628
001363r 2               .endif
001363r 2  20 rr rr             jsr     COMBYTE
001366r 2               L3628:
001366r 2  86 89                stx     FORPNT+1
001368r 2  A0 00                ldy     #$00
00136Ar 2               L362C:
00136Ar 2  B1 53                lda     (LINNUM),y
00136Cr 2  45 89                eor     FORPNT+1
00136Er 2  25 88                and     FORPNT
001370r 2  F0 F8                beq     L362C
001372r 2               RTS3:
001372r 2  60                   rts
001373r 2               .endif
001373r 2               
001373r 1               .include "float.s"
001373r 2               .segment "CODE"
001373r 2               
001373r 2               TEMP1X = TEMP1+(5-BYTES_FP)
001373r 2               
001373r 2               ; ----------------------------------------------------------------------------
001373r 2               ; ADD 0.5 TO FAC
001373r 2               ; ----------------------------------------------------------------------------
001373r 2               FADDH:
001373r 2  A9 rr                lda     #<CON_HALF
001375r 2  A0 rr                ldy     #>CON_HALF
001377r 2  4C rr rr             jmp     FADD
00137Ar 2               
00137Ar 2               ; ----------------------------------------------------------------------------
00137Ar 2               ; FAC = (Y,A) - FAC
00137Ar 2               ; ----------------------------------------------------------------------------
00137Ar 2               FSUB:
00137Ar 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00137Dr 2               
00137Dr 2               ; ----------------------------------------------------------------------------
00137Dr 2               ; FAC = ARG - FAC
00137Dr 2               ; ----------------------------------------------------------------------------
00137Dr 2               FSUBT:
00137Dr 2  A5 A5                lda     FACSIGN
00137Fr 2  49 FF                eor     #$FF
001381r 2  85 A5                sta     FACSIGN
001383r 2  45 AD                eor     ARGSIGN
001385r 2  85 AE                sta     SGNCPR
001387r 2  A5 A0                lda     FAC
001389r 2  4C rr rr             jmp     FADDT
00138Cr 2               
00138Cr 2               ; ----------------------------------------------------------------------------
00138Cr 2               ; Commodore BASIC V2 Easter Egg
00138Cr 2               ; ----------------------------------------------------------------------------
00138Cr 2               .ifdef CONFIG_EASTER_EGG
00138Cr 2               EASTER_EGG:
00138Cr 2                       lda     LINNUM
00138Cr 2                       cmp     #<6502
00138Cr 2                       bne     L3628
00138Cr 2                       lda     LINNUM+1
00138Cr 2                       sbc     #>6502
00138Cr 2                       bne     L3628
00138Cr 2                       sta     LINNUM
00138Cr 2                       tay
00138Cr 2                       lda     #$80
00138Cr 2                       sta     LINNUM+1
00138Cr 2               LD758:
00138Cr 2                       ldx     #$0A
00138Cr 2               LD75A:
00138Cr 2                       lda     MICROSOFT-1,x
00138Cr 2                       and     #$3F
00138Cr 2                       sta     (LINNUM),y
00138Cr 2                       iny
00138Cr 2                       bne     LD766
00138Cr 2                       inc     LINNUM+1
00138Cr 2               LD766:
00138Cr 2                       dex
00138Cr 2                       bne     LD75A
00138Cr 2                       dec     FORPNT
00138Cr 2                       bne     LD758
00138Cr 2                       rts
00138Cr 2               .endif
00138Cr 2               
00138Cr 2               ; ----------------------------------------------------------------------------
00138Cr 2               ; SHIFT SMALLER ARGUMENT MORE THAN 7 BITS
00138Cr 2               ; ----------------------------------------------------------------------------
00138Cr 2               FADD1:
00138Cr 2  20 rr rr             jsr     SHIFT_RIGHT
00138Fr 2  90 3C                bcc     FADD3
001391r 2               
001391r 2               ; ----------------------------------------------------------------------------
001391r 2               ; FAC = (Y,A) + FAC
001391r 2               ; ----------------------------------------------------------------------------
001391r 2               FADD:
001391r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001394r 2               
001394r 2               ; ----------------------------------------------------------------------------
001394r 2               ; FAC = ARG + FAC
001394r 2               ; ----------------------------------------------------------------------------
001394r 2               FADDT:
001394r 2  D0 03                bne     L365B
001396r 2  4C rr rr             jmp     COPY_ARG_TO_FAC
001399r 2               L365B:
001399r 2  A6 AF                ldx     FACEXTENSION
00139Br 2  86 95                stx     ARGEXTENSION
00139Dr 2  A2 A8                ldx     #ARG
00139Fr 2  A5 A8                lda     ARG
0013A1r 2               FADD2:
0013A1r 2  A8                   tay
0013A2r 2               .ifdef KBD
0013A2r 2                       beq     RTS4
0013A2r 2               .else
0013A2r 2  F0 CE                beq     RTS3
0013A4r 2               .endif
0013A4r 2  38                   sec
0013A5r 2  E5 A0                sbc     FAC
0013A7r 2  F0 24                beq     FADD3
0013A9r 2  90 12                bcc     L367F
0013ABr 2  84 A0                sty     FAC
0013ADr 2  A4 AD                ldy     ARGSIGN
0013AFr 2  84 A5                sty     FACSIGN
0013B1r 2  49 FF                eor     #$FF
0013B3r 2  69 00                adc     #$00
0013B5r 2  A0 00                ldy     #$00
0013B7r 2  84 95                sty     ARGEXTENSION
0013B9r 2  A2 A0                ldx     #FAC
0013BBr 2  D0 04                bne     L3683
0013BDr 2               L367F:
0013BDr 2  A0 00                ldy     #$00
0013BFr 2  84 AF                sty     FACEXTENSION
0013C1r 2               L3683:
0013C1r 2  C9 F9                cmp     #$F9
0013C3r 2  30 C7                bmi     FADD1
0013C5r 2  A8                   tay
0013C6r 2  A5 AF                lda     FACEXTENSION
0013C8r 2  56 01                lsr     1,x
0013CAr 2  20 rr rr             jsr     SHIFT_RIGHT4
0013CDr 2               FADD3:
0013CDr 2  24 AE                bit     SGNCPR
0013CFr 2  10 57                bpl     FADD4
0013D1r 2  A0 A0                ldy     #FAC
0013D3r 2  E0 A8                cpx     #ARG
0013D5r 2  F0 02                beq     L369B
0013D7r 2  A0 A8                ldy     #ARG
0013D9r 2               L369B:
0013D9r 2  38                   sec
0013DAr 2  49 FF                eor     #$FF
0013DCr 2  65 95                adc     ARGEXTENSION
0013DEr 2  85 AF                sta     FACEXTENSION
0013E0r 2               .ifndef CONFIG_SMALL
0013E0r 2  B9 04 00             lda     4,y
0013E3r 2  F5 04                sbc     4,x
0013E5r 2  85 A4                sta     FAC+4
0013E7r 2               .endif
0013E7r 2  B9 03 00             lda     3,y
0013EAr 2  F5 03                sbc     3,x
0013ECr 2  85 A3                sta     FAC+3
0013EEr 2  B9 02 00             lda     2,y
0013F1r 2  F5 02                sbc     2,x
0013F3r 2  85 A2                sta     FAC+2
0013F5r 2  B9 01 00             lda     1,y
0013F8r 2  F5 01                sbc     1,x
0013FAr 2  85 A1                sta     FAC+1
0013FCr 2               
0013FCr 2               ; ----------------------------------------------------------------------------
0013FCr 2               ; NORMALIZE VALUE IN FAC
0013FCr 2               ; ----------------------------------------------------------------------------
0013FCr 2               NORMALIZE_FAC1:
0013FCr 2  B0 03                bcs     NORMALIZE_FAC2
0013FEr 2  20 rr rr             jsr     COMPLEMENT_FAC
001401r 2               NORMALIZE_FAC2:
001401r 2  A0 00                ldy     #$00
001403r 2  98                   tya
001404r 2  18                   clc
001405r 2               L36C7:
001405r 2  A6 A1                ldx     FAC+1
001407r 2  D0 4A                bne     NORMALIZE_FAC4
001409r 2  A6 A2                ldx     FAC+2
00140Br 2  86 A1                stx     FAC+1
00140Dr 2  A6 A3                ldx     FAC+3
00140Fr 2  86 A2                stx     FAC+2
001411r 2               .ifdef CONFIG_SMALL
001411r 2                       ldx     FACEXTENSION
001411r 2                       stx     FAC+3
001411r 2               .else
001411r 2  A6 A4                ldx     FAC+4
001413r 2  86 A3                stx     FAC+3
001415r 2  A6 AF                ldx     FACEXTENSION
001417r 2  86 A4                stx     FAC+4
001419r 2               .endif
001419r 2  84 AF                sty     FACEXTENSION
00141Br 2  69 08                adc     #$08
00141Dr 2               .ifdef CONFIG_2B
00141Dr 2               ; bugfix?
00141Dr 2               ; fix does not exist on AppleSoft 2
00141Dr 2                       cmp     #(MANTISSA_BYTES+1)*8
00141Dr 2               .else
00141Dr 2  C9 20                cmp     #MANTISSA_BYTES*8
00141Fr 2               .endif
00141Fr 2  D0 E4                bne     L36C7
001421r 2               
001421r 2               ; ----------------------------------------------------------------------------
001421r 2               ; SET FAC = 0
001421r 2               ; (ONLY NECESSARY TO ZERO EXPONENT AND SIGN CELLS)
001421r 2               ; ----------------------------------------------------------------------------
001421r 2               ZERO_FAC:
001421r 2  A9 00                lda     #$00
001423r 2               STA_IN_FAC_SIGN_AND_EXP:
001423r 2  85 A0                sta     FAC
001425r 2               STA_IN_FAC_SIGN:
001425r 2  85 A5                sta     FACSIGN
001427r 2  60                   rts
001428r 2               
001428r 2               ; ----------------------------------------------------------------------------
001428r 2               ; ADD MANTISSAS OF FAC AND ARG INTO FAC
001428r 2               ; ----------------------------------------------------------------------------
001428r 2               FADD4:
001428r 2  65 95                adc     ARGEXTENSION
00142Ar 2  85 AF                sta     FACEXTENSION
00142Cr 2               .ifndef CONFIG_SMALL
00142Cr 2  A5 A4                lda     FAC+4
00142Er 2  65 AC                adc     ARG+4
001430r 2  85 A4                sta     FAC+4
001432r 2               .endif
001432r 2  A5 A3                lda     FAC+3
001434r 2  65 AB                adc     ARG+3
001436r 2  85 A3                sta     FAC+3
001438r 2  A5 A2                lda     FAC+2
00143Ar 2  65 AA                adc     ARG+2
00143Cr 2  85 A2                sta     FAC+2
00143Er 2  A5 A1                lda     FAC+1
001440r 2  65 A9                adc     ARG+1
001442r 2  85 A1                sta     FAC+1
001444r 2  4C rr rr             jmp     NORMALIZE_FAC5
001447r 2               
001447r 2               ; ----------------------------------------------------------------------------
001447r 2               ; FINISH NORMALIZING FAC
001447r 2               ; ----------------------------------------------------------------------------
001447r 2               NORMALIZE_FAC3:
001447r 2  69 01                adc     #$01
001449r 2  06 AF                asl     FACEXTENSION
00144Br 2               .ifndef CONFIG_SMALL
00144Br 2  26 A4                rol     FAC+4
00144Dr 2               .endif
00144Dr 2  26 A3                rol     FAC+3
00144Fr 2  26 A2                rol     FAC+2
001451r 2  26 A1                rol     FAC+1
001453r 2               NORMALIZE_FAC4:
001453r 2  10 F2                bpl     NORMALIZE_FAC3
001455r 2  38                   sec
001456r 2  E5 A0                sbc     FAC
001458r 2  B0 C7                bcs     ZERO_FAC
00145Ar 2  49 FF                eor     #$FF
00145Cr 2  69 01                adc     #$01
00145Er 2  85 A0                sta     FAC
001460r 2               NORMALIZE_FAC5:
001460r 2  90 0E                bcc     L3764
001462r 2               NORMALIZE_FAC6:
001462r 2  E6 A0                inc     FAC
001464r 2  F0 42                beq     OVERFLOW
001466r 2               .ifndef CONFIG_ROR_WORKAROUND
001466r 2  66 A1                ror     FAC+1
001468r 2  66 A2                ror     FAC+2
00146Ar 2  66 A3                ror     FAC+3
00146Cr 2                 .ifndef CONFIG_SMALL
00146Cr 2  66 A4                ror     FAC+4
00146Er 2                 .endif
00146Er 2  66 AF                ror     FACEXTENSION
001470r 2               .else
001470r 2                       lda     #$00
001470r 2                       bcc     L372E
001470r 2                       lda     #$80
001470r 2               L372E:
001470r 2                       lsr     FAC+1
001470r 2                       ora     FAC+1
001470r 2                       sta     FAC+1
001470r 2                       lda     #$00
001470r 2                       bcc     L373A
001470r 2                       lda     #$80
001470r 2               L373A:
001470r 2                       lsr     FAC+2
001470r 2                       ora     FAC+2
001470r 2                       sta     FAC+2
001470r 2                       lda     #$00
001470r 2                       bcc     L3746
001470r 2                       lda     #$80
001470r 2               L3746:
001470r 2                       lsr     FAC+3
001470r 2                       ora     FAC+3
001470r 2                       sta     FAC+3
001470r 2                       lda     #$00
001470r 2                       bcc     L3752
001470r 2                       lda     #$80
001470r 2               L3752:
001470r 2                       lsr     FAC+4
001470r 2                       ora     FAC+4
001470r 2                       sta     FAC+4
001470r 2                       lda     #$00
001470r 2                       bcc     L375E
001470r 2                       lda     #$80
001470r 2               L375E:
001470r 2                       lsr     FACEXTENSION
001470r 2                       ora     FACEXTENSION
001470r 2                       sta     FACEXTENSION
001470r 2               .endif
001470r 2               L3764:
001470r 2  60                   rts
001471r 2               
001471r 2               ; ----------------------------------------------------------------------------
001471r 2               ; 2'S COMPLEMENT OF FAC
001471r 2               ; ----------------------------------------------------------------------------
001471r 2               COMPLEMENT_FAC:
001471r 2  A5 A5                lda     FACSIGN
001473r 2  49 FF                eor     #$FF
001475r 2  85 A5                sta     FACSIGN
001477r 2               
001477r 2               ; ----------------------------------------------------------------------------
001477r 2               ; 2'S COMPLEMENT OF FAC MANTISSA ONLY
001477r 2               ; ----------------------------------------------------------------------------
001477r 2               COMPLEMENT_FAC_MANTISSA:
001477r 2  A5 A1                lda     FAC+1
001479r 2  49 FF                eor     #$FF
00147Br 2  85 A1                sta     FAC+1
00147Dr 2  A5 A2                lda     FAC+2
00147Fr 2  49 FF                eor     #$FF
001481r 2  85 A2                sta     FAC+2
001483r 2  A5 A3                lda     FAC+3
001485r 2  49 FF                eor     #$FF
001487r 2  85 A3                sta     FAC+3
001489r 2               .ifndef CONFIG_SMALL
001489r 2  A5 A4                lda     FAC+4
00148Br 2  49 FF                eor     #$FF
00148Dr 2  85 A4                sta     FAC+4
00148Fr 2               .endif
00148Fr 2  A5 AF                lda     FACEXTENSION
001491r 2  49 FF                eor     #$FF
001493r 2  85 AF                sta     FACEXTENSION
001495r 2  E6 AF                inc     FACEXTENSION
001497r 2  D0 0E                bne     RTS12
001499r 2               
001499r 2               ; ----------------------------------------------------------------------------
001499r 2               ; INCREMENT FAC MANTISSA
001499r 2               ; ----------------------------------------------------------------------------
001499r 2               INCREMENT_FAC_MANTISSA:
001499r 2               .ifndef CONFIG_SMALL
001499r 2  E6 A4                inc     FAC+4
00149Br 2  D0 0A                bne     RTS12
00149Dr 2               .endif
00149Dr 2  E6 A3                inc     FAC+3
00149Fr 2  D0 06                bne     RTS12
0014A1r 2  E6 A2                inc     FAC+2
0014A3r 2  D0 02                bne     RTS12
0014A5r 2  E6 A1                inc     FAC+1
0014A7r 2               RTS12:
0014A7r 2  60                   rts
0014A8r 2               OVERFLOW:
0014A8r 2  A2 45                ldx     #ERR_OVERFLOW
0014AAr 2  4C rr rr             jmp     ERROR
0014ADr 2               
0014ADr 2               ; ----------------------------------------------------------------------------
0014ADr 2               ; SHIFT 1,X THRU 5,X RIGHT
0014ADr 2               ; (A) = NEGATIVE OF SHIFT COUNT
0014ADr 2               ; (X) = POINTER TO BYTES TO BE SHIFTED
0014ADr 2               ;
0014ADr 2               ; RETURN WITH (Y)=0, CARRY=0, EXTENSION BITS IN A-REG
0014ADr 2               ; ----------------------------------------------------------------------------
0014ADr 2               SHIFT_RIGHT1:
0014ADr 2  A2 64                ldx     #RESULT-1
0014AFr 2               SHIFT_RIGHT2:
0014AFr 2               .ifdef CONFIG_SMALL
0014AFr 2                       ldy     3,x
0014AFr 2               .else
0014AFr 2  B4 04                ldy     4,x
0014B1r 2               .endif
0014B1r 2  84 AF                sty     FACEXTENSION
0014B3r 2               .ifndef CONFIG_SMALL
0014B3r 2  B4 03                ldy     3,x
0014B5r 2  94 04                sty     4,x
0014B7r 2               .endif
0014B7r 2  B4 02                ldy     2,x
0014B9r 2  94 03                sty     3,x
0014BBr 2  B4 01                ldy     1,x
0014BDr 2  94 02                sty     2,x
0014BFr 2  A4 A7                ldy     SHIFTSIGNEXT
0014C1r 2  94 01                sty     1,x
0014C3r 2               
0014C3r 2               ; ----------------------------------------------------------------------------
0014C3r 2               ; MAIN ENTRY TO RIGHT SHIFT SUBROUTINE
0014C3r 2               ; ----------------------------------------------------------------------------
0014C3r 2               SHIFT_RIGHT:
0014C3r 2  69 08                adc     #$08
0014C5r 2  30 E8                bmi     SHIFT_RIGHT2
0014C7r 2  F0 E6                beq     SHIFT_RIGHT2
0014C9r 2  E9 08                sbc     #$08
0014CBr 2  A8                   tay
0014CCr 2  A5 AF                lda     FACEXTENSION
0014CEr 2  B0 14                bcs     SHIFT_RIGHT5
0014D0r 2               .ifndef CONFIG_ROR_WORKAROUND
0014D0r 2               LB588:
0014D0r 2  16 01                asl     1,x
0014D2r 2  90 02                bcc     LB58E
0014D4r 2  F6 01                inc     1,x
0014D6r 2               LB58E:
0014D6r 2  76 01                ror     1,x
0014D8r 2  76 01                ror     1,x
0014DAr 2               
0014DAr 2               ; ----------------------------------------------------------------------------
0014DAr 2               ; ENTER HERE FOR SHORT SHIFTS WITH NO SIGN EXTENSION
0014DAr 2               ; ----------------------------------------------------------------------------
0014DAr 2               SHIFT_RIGHT4:
0014DAr 2  76 02                ror     2,x
0014DCr 2  76 03                ror     3,x
0014DEr 2                 .ifndef CONFIG_SMALL
0014DEr 2  76 04                ror     4,x
0014E0r 2                 .endif
0014E0r 2  6A                   ror     a
0014E1r 2  C8                   iny
0014E2r 2  D0 EC                bne     LB588
0014E4r 2               .else
0014E4r 2               L37C4:
0014E4r 2                       pha
0014E4r 2                       lda     1,x
0014E4r 2                       and     #$80
0014E4r 2                       lsr     1,x
0014E4r 2                       ora     1,x
0014E4r 2                       sta     1,x
0014E4r 2                       .byte   $24
0014E4r 2               SHIFT_RIGHT4:
0014E4r 2                       pha
0014E4r 2                       lda     #$00
0014E4r 2                       bcc     L37D7
0014E4r 2                       lda     #$80
0014E4r 2               L37D7:
0014E4r 2                       lsr     2,x
0014E4r 2                       ora     2,x
0014E4r 2                       sta     2,x
0014E4r 2                       lda     #$00
0014E4r 2                       bcc     L37E3
0014E4r 2                       lda     #$80
0014E4r 2               L37E3:
0014E4r 2                       lsr     3,x
0014E4r 2                       ora     3,x
0014E4r 2                       sta     3,x
0014E4r 2                       lda     #$00
0014E4r 2                       bcc     L37EF
0014E4r 2                       lda     #$80
0014E4r 2               L37EF:
0014E4r 2                       lsr     4,x
0014E4r 2                       ora     4,x
0014E4r 2                       sta     4,x
0014E4r 2                       pla
0014E4r 2                       php
0014E4r 2                       lsr     a
0014E4r 2                       plp
0014E4r 2                       bcc     L37FD
0014E4r 2                       ora     #$80
0014E4r 2               L37FD:
0014E4r 2                       iny
0014E4r 2                       bne     L37C4
0014E4r 2               .endif
0014E4r 2               SHIFT_RIGHT5:
0014E4r 2  18                   clc
0014E5r 2  60                   rts
0014E6r 2               
0014E6r 2               ; ----------------------------------------------------------------------------
0014E6r 2               .ifdef CONFIG_SMALL
0014E6r 2               CON_ONE:
0014E6r 2                       .byte   $81,$00,$00,$00
0014E6r 2               POLY_LOG:
0014E6r 2               		.byte	$02
0014E6r 2               		.byte   $80,$19,$56,$62
0014E6r 2               		.byte   $80,$76,$22,$F3
0014E6r 2               		.byte   $82,$38,$AA,$40
0014E6r 2               CON_SQR_HALF:
0014E6r 2               		.byte   $80,$35,$04,$F3
0014E6r 2               CON_SQR_TWO:
0014E6r 2               		.byte   $81,$35,$04,$F3
0014E6r 2               CON_NEG_HALF:
0014E6r 2               		.byte   $80,$80,$00,$00
0014E6r 2               CON_LOG_TWO:
0014E6r 2               		.byte   $80,$31,$72,$18
0014E6r 2               .else
0014E6r 2               CON_ONE:
0014E6r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
0014EAr 2  00           
0014EBr 2               POLY_LOG:
0014EBr 2  03                   .byte   $03
0014ECr 2  7F 5E 56 CB  		.byte   $7F,$5E,$56,$CB,$79
0014F0r 2  79           
0014F1r 2  80 13 9B 0B  		.byte   $80,$13,$9B,$0B,$64
0014F5r 2  64           
0014F6r 2  80 76 38 93  		.byte   $80,$76,$38,$93,$16
0014FAr 2  16           
0014FBr 2  82 38 AA 3B          .byte   $82,$38,$AA,$3B,$20
0014FFr 2  20           
001500r 2               CON_SQR_HALF:
001500r 2  80 35 04 F3          .byte   $80,$35,$04,$F3,$34
001504r 2  34           
001505r 2               CON_SQR_TWO:
001505r 2  81 35 04 F3          .byte   $81,$35,$04,$F3,$34
001509r 2  34           
00150Ar 2               CON_NEG_HALF:
00150Ar 2  80 80 00 00          .byte   $80,$80,$00,$00,$00
00150Er 2  00           
00150Fr 2               CON_LOG_TWO:
00150Fr 2  80 31 72 17          .byte   $80,$31,$72,$17,$F8
001513r 2  F8           
001514r 2               .endif
001514r 2               
001514r 2               ; ----------------------------------------------------------------------------
001514r 2               ; "LOG" FUNCTION
001514r 2               ; ----------------------------------------------------------------------------
001514r 2               LOG:
001514r 2  20 rr rr             jsr     SIGN
001517r 2  F0 02                beq     GIQ
001519r 2  10 03                bpl     LOG2
00151Br 2               GIQ:
00151Br 2  4C rr rr             jmp     IQERR
00151Er 2               LOG2:
00151Er 2  A5 A0                lda     FAC
001520r 2  E9 7F                sbc     #$7F
001522r 2  48                   pha
001523r 2  A9 80                lda     #$80
001525r 2  85 A0                sta     FAC
001527r 2  A9 rr                lda     #<CON_SQR_HALF
001529r 2  A0 rr                ldy     #>CON_SQR_HALF
00152Br 2  20 rr rr             jsr     FADD
00152Er 2  A9 rr                lda     #<CON_SQR_TWO
001530r 2  A0 rr                ldy     #>CON_SQR_TWO
001532r 2  20 rr rr             jsr     FDIV
001535r 2  A9 rr                lda     #<CON_ONE
001537r 2  A0 rr                ldy     #>CON_ONE
001539r 2  20 rr rr             jsr     FSUB
00153Cr 2  A9 rr                lda     #<POLY_LOG
00153Er 2  A0 rr                ldy     #>POLY_LOG
001540r 2  20 rr rr             jsr     POLYNOMIAL_ODD
001543r 2  A9 rr                lda     #<CON_NEG_HALF
001545r 2  A0 rr                ldy     #>CON_NEG_HALF
001547r 2  20 rr rr             jsr     FADD
00154Ar 2  68                   pla
00154Br 2  20 rr rr             jsr     ADDACC
00154Er 2  A9 rr                lda     #<CON_LOG_TWO
001550r 2  A0 rr                ldy     #>CON_LOG_TWO
001552r 2               
001552r 2               ; ----------------------------------------------------------------------------
001552r 2               ; FAC = (Y,A) * FAC
001552r 2               ; ----------------------------------------------------------------------------
001552r 2               FMULT:
001552r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
001555r 2               
001555r 2               ; ----------------------------------------------------------------------------
001555r 2               ; FAC = ARG * FAC
001555r 2               ; ----------------------------------------------------------------------------
001555r 2               FMULTT:
001555r 2               .ifndef CONFIG_11
001555r 2                       beq     L3903
001555r 2               .else
001555r 2  D0 03 4C rr          jeq     L3903
001559r 2  rr           
00155Ar 2               .endif
00155Ar 2  20 rr rr             jsr     ADD_EXPONENTS
00155Dr 2  A9 00                lda     #$00
00155Fr 2  85 65                sta     RESULT
001561r 2  85 66                sta     RESULT+1
001563r 2  85 67                sta     RESULT+2
001565r 2               .ifndef CONFIG_SMALL
001565r 2  85 68                sta     RESULT+3
001567r 2               .endif
001567r 2  A5 AF                lda     FACEXTENSION
001569r 2  20 rr rr             jsr     MULTIPLY1
00156Cr 2               .ifndef CONFIG_SMALL
00156Cr 2  A5 A4                lda     FAC+4
00156Er 2  20 rr rr             jsr     MULTIPLY1
001571r 2               .endif
001571r 2  A5 A3                lda     FAC+3
001573r 2  20 rr rr             jsr     MULTIPLY1
001576r 2  A5 A2                lda     FAC+2
001578r 2  20 rr rr             jsr     MULTIPLY1
00157Br 2  A5 A1                lda     FAC+1
00157Dr 2  20 rr rr             jsr     MULTIPLY2
001580r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
001583r 2               
001583r 2               ; ----------------------------------------------------------------------------
001583r 2               ; MULTIPLY ARG BY (A) INTO RESULT
001583r 2               ; ----------------------------------------------------------------------------
001583r 2               MULTIPLY1:
001583r 2  D0 03                bne     MULTIPLY2
001585r 2  4C rr rr             jmp     SHIFT_RIGHT1
001588r 2               MULTIPLY2:
001588r 2  4A                   lsr     a
001589r 2  09 80                ora     #$80
00158Br 2               L38A7:
00158Br 2  A8                   tay
00158Cr 2  90 19                bcc     L38C3
00158Er 2  18                   clc
00158Fr 2               .ifndef CONFIG_SMALL
00158Fr 2  A5 68                lda     RESULT+3
001591r 2  65 AC                adc     ARG+4
001593r 2  85 68                sta     RESULT+3
001595r 2               .endif
001595r 2  A5 67                lda     RESULT+2
001597r 2  65 AB                adc     ARG+3
001599r 2  85 67                sta     RESULT+2
00159Br 2  A5 66                lda     RESULT+1
00159Dr 2  65 AA                adc     ARG+2
00159Fr 2  85 66                sta     RESULT+1
0015A1r 2  A5 65                lda     RESULT
0015A3r 2  65 A9                adc     ARG+1
0015A5r 2  85 65                sta     RESULT
0015A7r 2               L38C3:
0015A7r 2               .ifndef CONFIG_ROR_WORKAROUND
0015A7r 2  66 65                ror     RESULT
0015A9r 2  66 66                ror     RESULT+1
0015ABr 2               .ifdef APPLE_BAD_BYTE
0015ABr 2               ; this seems to be a bad byte in the dump
0015ABr 2  67 67        		.byte	RESULT+2,RESULT+2 ; XXX BUG!
0015ADr 2               .else
0015ADr 2                       ror     RESULT+2
0015ADr 2               .endif
0015ADr 2               .ifndef CONFIG_SMALL
0015ADr 2  66 68                ror     RESULT+3
0015AFr 2               .endif
0015AFr 2  66 AF                ror     FACEXTENSION
0015B1r 2               .else
0015B1r 2                       lda     #$00
0015B1r 2                       bcc     L38C9
0015B1r 2                       lda     #$80
0015B1r 2               L38C9:
0015B1r 2                       lsr     RESULT
0015B1r 2                       ora     RESULT
0015B1r 2                       sta     RESULT
0015B1r 2                       lda     #$00
0015B1r 2                       bcc     L38D5
0015B1r 2                       lda     #$80
0015B1r 2               L38D5:
0015B1r 2                       lsr     RESULT+1
0015B1r 2                       ora     RESULT+1
0015B1r 2                       sta     RESULT+1
0015B1r 2                       lda     #$00
0015B1r 2                       bcc     L38E1
0015B1r 2                       lda     #$80
0015B1r 2               L38E1:
0015B1r 2                       lsr     RESULT+2
0015B1r 2                       ora     RESULT+2
0015B1r 2                       sta     RESULT+2
0015B1r 2                       lda     #$00
0015B1r 2                       bcc     L38ED
0015B1r 2                       lda     #$80
0015B1r 2               L38ED:
0015B1r 2                       lsr     RESULT+3
0015B1r 2                       ora     RESULT+3
0015B1r 2                       sta     RESULT+3
0015B1r 2                       lda     #$00
0015B1r 2                       bcc     L38F9
0015B1r 2                       lda     #$80
0015B1r 2               L38F9:
0015B1r 2                       lsr     FACEXTENSION
0015B1r 2                       ora     FACEXTENSION
0015B1r 2                       sta     FACEXTENSION
0015B1r 2               .endif
0015B1r 2  98                   tya
0015B2r 2  4A                   lsr     a
0015B3r 2  D0 D6                bne     L38A7
0015B5r 2               L3903:
0015B5r 2  60                   rts
0015B6r 2               
0015B6r 2               ; ----------------------------------------------------------------------------
0015B6r 2               ; UNPACK NUMBER AT (Y,A) INTO ARG
0015B6r 2               ; ----------------------------------------------------------------------------
0015B6r 2               LOAD_ARG_FROM_YA:
0015B6r 2  85 61                sta     INDEX
0015B8r 2  84 62                sty     INDEX+1
0015BAr 2  A0 04                ldy     #BYTES_FP-1
0015BCr 2               .ifndef CONFIG_SMALL
0015BCr 2  B1 61                lda     (INDEX),y
0015BEr 2  85 AC                sta     ARG+4
0015C0r 2  88                   dey
0015C1r 2               .endif
0015C1r 2  B1 61                lda     (INDEX),y
0015C3r 2  85 AB                sta     ARG+3
0015C5r 2  88                   dey
0015C6r 2  B1 61                lda     (INDEX),y
0015C8r 2  85 AA                sta     ARG+2
0015CAr 2  88                   dey
0015CBr 2  B1 61                lda     (INDEX),y
0015CDr 2  85 AD                sta     ARGSIGN
0015CFr 2  45 A5                eor     FACSIGN
0015D1r 2  85 AE                sta     SGNCPR
0015D3r 2  A5 AD                lda     ARGSIGN
0015D5r 2  09 80                ora     #$80
0015D7r 2  85 A9                sta     ARG+1
0015D9r 2  88                   dey
0015DAr 2  B1 61                lda     (INDEX),y
0015DCr 2  85 A8                sta     ARG
0015DEr 2  A5 A0                lda     FAC
0015E0r 2  60                   rts
0015E1r 2               
0015E1r 2               ; ----------------------------------------------------------------------------
0015E1r 2               ; ADD EXPONENTS OF ARG AND FAC
0015E1r 2               ; (CALLED BY FMULT AND FDIV)
0015E1r 2               ;
0015E1r 2               ; ALSO CHECK FOR OVERFLOW, AND SET RESULT SIGN
0015E1r 2               ; ----------------------------------------------------------------------------
0015E1r 2               ADD_EXPONENTS:
0015E1r 2  A5 A8                lda     ARG
0015E3r 2               ADD_EXPONENTS1:
0015E3r 2  F0 1F                beq     ZERO
0015E5r 2  18                   clc
0015E6r 2  65 A0                adc     FAC
0015E8r 2  90 04                bcc     L393C
0015EAr 2  30 1D                bmi     JOV
0015ECr 2  18                   clc
0015EDr 2  2C                   .byte   $2C
0015EEr 2               L393C:
0015EEr 2  10 14                bpl     ZERO
0015F0r 2  69 80                adc     #$80
0015F2r 2  85 A0                sta     FAC
0015F4r 2  D0 03                bne     L3947
0015F6r 2  4C rr rr             jmp     STA_IN_FAC_SIGN
0015F9r 2               L3947:
0015F9r 2  A5 AE                lda     SGNCPR
0015FBr 2  85 A5                sta     FACSIGN
0015FDr 2  60                   rts
0015FEr 2               
0015FEr 2               ; ----------------------------------------------------------------------------
0015FEr 2               ; IF (FAC) IS POSITIVE, GIVE "OVERFLOW" ERROR
0015FEr 2               ; IF (FAC) IS NEGATIVE, SET FAC=0, POP ONE RETURN, AND RTS
0015FEr 2               ; CALLED FROM "EXP" FUNCTION
0015FEr 2               ; ----------------------------------------------------------------------------
0015FEr 2               OUTOFRNG:
0015FEr 2  A5 A5                lda     FACSIGN
001600r 2  49 FF                eor     #$FF
001602r 2  30 05                bmi     JOV
001604r 2               
001604r 2               ; ----------------------------------------------------------------------------
001604r 2               ; POP RETURN ADDRESS AND SET FAC=0
001604r 2               ; ----------------------------------------------------------------------------
001604r 2               ZERO:
001604r 2  68                   pla
001605r 2  68                   pla
001606r 2  4C rr rr             jmp     ZERO_FAC
001609r 2               JOV:
001609r 2  4C rr rr             jmp     OVERFLOW
00160Cr 2               
00160Cr 2               ; ----------------------------------------------------------------------------
00160Cr 2               ; MULTIPLY FAC BY 10
00160Cr 2               ; ----------------------------------------------------------------------------
00160Cr 2               MUL10:
00160Cr 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00160Fr 2  AA                   tax
001610r 2  F0 10                beq     L3970
001612r 2  18                   clc
001613r 2  69 02                adc     #$02
001615r 2  B0 F2                bcs     JOV
001617r 2               LD9BF:
001617r 2  A2 00                ldx     #$00
001619r 2  86 AE                stx     SGNCPR
00161Br 2  20 rr rr             jsr     FADD2
00161Er 2  E6 A0                inc     FAC
001620r 2  F0 E7                beq     JOV
001622r 2               L3970:
001622r 2  60                   rts
001623r 2               
001623r 2               ; ----------------------------------------------------------------------------
001623r 2               CONTEN:
001623r 2               .ifdef CONFIG_SMALL
001623r 2                       .byte   $84,$20,$00,$00
001623r 2               .else
001623r 2  84 20 00 00          .byte   $84,$20,$00,$00,$00
001627r 2  00           
001628r 2               .endif
001628r 2               
001628r 2               ; ----------------------------------------------------------------------------
001628r 2               ; DIVIDE FAC BY 10
001628r 2               ; ----------------------------------------------------------------------------
001628r 2               DIV10:
001628r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
00162Br 2  A9 rr                lda     #<CONTEN
00162Dr 2  A0 rr                ldy     #>CONTEN
00162Fr 2  A2 00                ldx     #$00
001631r 2               
001631r 2               ; ----------------------------------------------------------------------------
001631r 2               ; FAC = ARG / (Y,A)
001631r 2               ; ----------------------------------------------------------------------------
001631r 2               DIV:
001631r 2  86 AE                stx     SGNCPR
001633r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001636r 2  4C rr rr             jmp     FDIVT
001639r 2               
001639r 2               ; ----------------------------------------------------------------------------
001639r 2               ; FAC = (Y,A) / FAC
001639r 2               ; ----------------------------------------------------------------------------
001639r 2               FDIV:
001639r 2  20 rr rr             jsr     LOAD_ARG_FROM_YA
00163Cr 2               
00163Cr 2               ; ----------------------------------------------------------------------------
00163Cr 2               ; FAC = ARG / FAC
00163Cr 2               ; ----------------------------------------------------------------------------
00163Cr 2               FDIVT:
00163Cr 2  F0 76                beq     L3A02
00163Er 2  20 rr rr             jsr     ROUND_FAC
001641r 2  A9 00                lda     #$00
001643r 2  38                   sec
001644r 2  E5 A0                sbc     FAC
001646r 2  85 A0                sta     FAC
001648r 2  20 rr rr             jsr     ADD_EXPONENTS
00164Br 2  E6 A0                inc     FAC
00164Dr 2  F0 BA                beq     JOV
00164Fr 2  A2 FC                ldx     #-MANTISSA_BYTES
001651r 2  A9 01                lda     #$01
001653r 2               L39A1:
001653r 2  A4 A9                ldy     ARG+1
001655r 2  C4 A1                cpy     FAC+1
001657r 2  D0 10                bne     L39B7
001659r 2  A4 AA                ldy     ARG+2
00165Br 2  C4 A2                cpy     FAC+2
00165Dr 2  D0 0A                bne     L39B7
00165Fr 2  A4 AB                ldy     ARG+3
001661r 2  C4 A3                cpy     FAC+3
001663r 2               .ifndef CONFIG_SMALL
001663r 2  D0 04                bne     L39B7
001665r 2  A4 AC                ldy     ARG+4
001667r 2  C4 A4                cpy     FAC+4
001669r 2               .endif
001669r 2               L39B7:
001669r 2  08                   php
00166Ar 2  2A                   rol     a
00166Br 2  90 09                bcc     L39C4
00166Dr 2  E8                   inx
00166Er 2  95 68                sta     RESULT_LAST-1,x
001670r 2  F0 32                beq     L39F2
001672r 2  10 34                bpl     L39F6
001674r 2  A9 01                lda     #$01
001676r 2               L39C4:
001676r 2  28                   plp
001677r 2  B0 0E                bcs     L39D5
001679r 2               L39C7:
001679r 2  06 AC                asl     ARG_LAST
00167Br 2               .ifndef CONFIG_SMALL
00167Br 2  26 AB                rol     ARG+3
00167Dr 2               .endif
00167Dr 2  26 AA                rol     ARG+2
00167Fr 2  26 A9                rol     ARG+1
001681r 2  B0 E6                bcs     L39B7
001683r 2  30 CE                bmi     L39A1
001685r 2  10 E2                bpl     L39B7
001687r 2               L39D5:
001687r 2  A8                   tay
001688r 2               .ifndef CONFIG_SMALL
001688r 2  A5 AC                lda     ARG+4
00168Ar 2  E5 A4                sbc     FAC+4
00168Cr 2  85 AC                sta     ARG+4
00168Er 2               .endif
00168Er 2  A5 AB                lda     ARG+3
001690r 2  E5 A3                sbc     FAC+3
001692r 2  85 AB                sta     ARG+3
001694r 2  A5 AA                lda     ARG+2
001696r 2  E5 A2                sbc     FAC+2
001698r 2  85 AA                sta     ARG+2
00169Ar 2  A5 A9                lda     ARG+1
00169Cr 2  E5 A1                sbc     FAC+1
00169Er 2  85 A9                sta     ARG+1
0016A0r 2  98                   tya
0016A1r 2  4C rr rr             jmp     L39C7
0016A4r 2               L39F2:
0016A4r 2  A9 40                lda     #$40
0016A6r 2  D0 CE                bne     L39C4
0016A8r 2               L39F6:
0016A8r 2  0A                   asl     a
0016A9r 2  0A                   asl     a
0016AAr 2  0A                   asl     a
0016ABr 2  0A                   asl     a
0016ACr 2  0A                   asl     a
0016ADr 2  0A                   asl     a
0016AEr 2  85 AF                sta     FACEXTENSION
0016B0r 2  28                   plp
0016B1r 2  4C rr rr             jmp     COPY_RESULT_INTO_FAC
0016B4r 2               L3A02:
0016B4r 2  A2 85                ldx     #ERR_ZERODIV
0016B6r 2  4C rr rr             jmp     ERROR
0016B9r 2               
0016B9r 2               ; ----------------------------------------------------------------------------
0016B9r 2               ; COPY RESULT INTO FAC MANTISSA, AND NORMALIZE
0016B9r 2               ; ----------------------------------------------------------------------------
0016B9r 2               COPY_RESULT_INTO_FAC:
0016B9r 2  A5 65                lda     RESULT
0016BBr 2  85 A1                sta     FAC+1
0016BDr 2  A5 66                lda     RESULT+1
0016BFr 2  85 A2                sta     FAC+2
0016C1r 2  A5 67                lda     RESULT+2
0016C3r 2  85 A3                sta     FAC+3
0016C5r 2               .ifndef CONFIG_SMALL
0016C5r 2  A5 68                lda     RESULT+3
0016C7r 2  85 A4                sta     FAC+4
0016C9r 2               .endif
0016C9r 2  4C rr rr             jmp     NORMALIZE_FAC2
0016CCr 2               
0016CCr 2               ; ----------------------------------------------------------------------------
0016CCr 2               ; UNPACK (Y,A) INTO FAC
0016CCr 2               ; ----------------------------------------------------------------------------
0016CCr 2               LOAD_FAC_FROM_YA:
0016CCr 2  85 61                sta     INDEX
0016CEr 2  84 62                sty     INDEX+1
0016D0r 2  A0 04                ldy     #MANTISSA_BYTES
0016D2r 2               .ifndef CONFIG_SMALL
0016D2r 2  B1 61                lda     (INDEX),y
0016D4r 2  85 A4                sta     FAC+4
0016D6r 2  88                   dey
0016D7r 2               .endif
0016D7r 2  B1 61                lda     (INDEX),y
0016D9r 2  85 A3                sta     FAC+3
0016DBr 2  88                   dey
0016DCr 2  B1 61                lda     (INDEX),y
0016DEr 2  85 A2                sta     FAC+2
0016E0r 2  88                   dey
0016E1r 2  B1 61                lda     (INDEX),y
0016E3r 2  85 A5                sta     FACSIGN
0016E5r 2  09 80                ora     #$80
0016E7r 2  85 A1                sta     FAC+1
0016E9r 2  88                   dey
0016EAr 2  B1 61                lda     (INDEX),y
0016ECr 2  85 A0                sta     FAC
0016EEr 2  84 AF                sty     FACEXTENSION
0016F0r 2  60                   rts
0016F1r 2               
0016F1r 2               ; ----------------------------------------------------------------------------
0016F1r 2               ; ROUND FAC, STORE IN TEMP2
0016F1r 2               ; ----------------------------------------------------------------------------
0016F1r 2               STORE_FAC_IN_TEMP2_ROUNDED:
0016F1r 2  A2 9B                ldx     #TEMP2
0016F3r 2  2C                   .byte   $2C
0016F4r 2               
0016F4r 2               ; ----------------------------------------------------------------------------
0016F4r 2               ; ROUND FAC, STORE IN TEMP1
0016F4r 2               ; ----------------------------------------------------------------------------
0016F4r 2               STORE_FAC_IN_TEMP1_ROUNDED:
0016F4r 2  A2 96                ldx     #TEMP1X
0016F6r 2  A0 00                ldy     #$00
0016F8r 2  F0 04                beq     STORE_FAC_AT_YX_ROUNDED
0016FAr 2               
0016FAr 2               ; ----------------------------------------------------------------------------
0016FAr 2               ; ROUND FAC, AND STORE WHERE FORPNT POINTS
0016FAr 2               ; ----------------------------------------------------------------------------
0016FAr 2               SETFOR:
0016FAr 2  A6 88                ldx     FORPNT
0016FCr 2  A4 89                ldy     FORPNT+1
0016FEr 2               
0016FEr 2               ; ----------------------------------------------------------------------------
0016FEr 2               ; ROUND FAC, AND STORE AT (Y,X)
0016FEr 2               ; ----------------------------------------------------------------------------
0016FEr 2               STORE_FAC_AT_YX_ROUNDED:
0016FEr 2  20 rr rr             jsr     ROUND_FAC
001701r 2  86 61                stx     INDEX
001703r 2  84 62                sty     INDEX+1
001705r 2  A0 04                ldy     #MANTISSA_BYTES
001707r 2               .ifndef CONFIG_SMALL
001707r 2  A5 A4                lda     FAC+4
001709r 2  91 61                sta     (INDEX),y
00170Br 2  88                   dey
00170Cr 2               .endif
00170Cr 2  A5 A3                lda     FAC+3
00170Er 2  91 61                sta     (INDEX),y
001710r 2  88                   dey
001711r 2  A5 A2                lda     FAC+2
001713r 2  91 61                sta     (INDEX),y
001715r 2  88                   dey
001716r 2  A5 A5                lda     FACSIGN
001718r 2  09 7F                ora     #$7F
00171Ar 2  25 A1                and     FAC+1
00171Cr 2  91 61                sta     (INDEX),y
00171Er 2  88                   dey
00171Fr 2  A5 A0                lda     FAC
001721r 2  91 61                sta     (INDEX),y
001723r 2  84 AF                sty     FACEXTENSION
001725r 2  60                   rts
001726r 2               
001726r 2               ; ----------------------------------------------------------------------------
001726r 2               ; COPY ARG INTO FAC
001726r 2               ; ----------------------------------------------------------------------------
001726r 2               COPY_ARG_TO_FAC:
001726r 2  A5 AD                lda     ARGSIGN
001728r 2               MFA:
001728r 2  85 A5                sta     FACSIGN
00172Ar 2  A2 05                ldx     #BYTES_FP
00172Cr 2               L3A7A:
00172Cr 2  B5 A7                lda     SHIFTSIGNEXT,x
00172Er 2  95 9F                sta     EXPSGN,x
001730r 2  CA                   dex
001731r 2  D0 F9                bne     L3A7A
001733r 2  86 AF                stx     FACEXTENSION
001735r 2  60                   rts
001736r 2               
001736r 2               ; ----------------------------------------------------------------------------
001736r 2               ; ROUND FAC AND COPY TO ARG
001736r 2               ; ----------------------------------------------------------------------------
001736r 2               COPY_FAC_TO_ARG_ROUNDED:
001736r 2  20 rr rr             jsr     ROUND_FAC
001739r 2               MAF:
001739r 2  A2 06                ldx     #BYTES_FP+1
00173Br 2               L3A89:
00173Br 2  B5 9F                lda     EXPSGN,x
00173Dr 2  95 A7                sta     SHIFTSIGNEXT,x
00173Fr 2  CA                   dex
001740r 2  D0 F9                bne     L3A89
001742r 2  86 AF                stx     FACEXTENSION
001744r 2               RTS14:
001744r 2  60                   rts
001745r 2               
001745r 2               ; ----------------------------------------------------------------------------
001745r 2               ; ROUND FAC USING EXTENSION BYTE
001745r 2               ; ----------------------------------------------------------------------------
001745r 2               ROUND_FAC:
001745r 2  A5 A0                lda     FAC
001747r 2  F0 FB                beq     RTS14
001749r 2  06 AF                asl     FACEXTENSION
00174Br 2  90 F7                bcc     RTS14
00174Dr 2               
00174Dr 2               ; ----------------------------------------------------------------------------
00174Dr 2               ; INCREMENT MANTISSA AND RE-NORMALIZE IF CARRY
00174Dr 2               ; ----------------------------------------------------------------------------
00174Dr 2               INCREMENT_MANTISSA:
00174Dr 2  20 rr rr             jsr     INCREMENT_FAC_MANTISSA
001750r 2  D0 F2                bne     RTS14
001752r 2  4C rr rr             jmp     NORMALIZE_FAC6
001755r 2               
001755r 2               ; ----------------------------------------------------------------------------
001755r 2               ; TEST FAC FOR ZERO AND SIGN
001755r 2               ;
001755r 2               ; FAC > 0, RETURN +1
001755r 2               ; FAC = 0, RETURN  0
001755r 2               ; FAC < 0, RETURN -1
001755r 2               ; ----------------------------------------------------------------------------
001755r 2               SIGN:
001755r 2  A5 A0                lda     FAC
001757r 2  F0 09                beq     RTS15
001759r 2               L3AA7:
001759r 2  A5 A5                lda     FACSIGN
00175Br 2               SIGN2:
00175Br 2  2A                   rol     a
00175Cr 2  A9 FF                lda     #$FF
00175Er 2  B0 02                bcs     RTS15
001760r 2  A9 01                lda     #$01
001762r 2               RTS15:
001762r 2  60                   rts
001763r 2               
001763r 2               ; ----------------------------------------------------------------------------
001763r 2               ; "SGN" FUNCTION
001763r 2               ; ----------------------------------------------------------------------------
001763r 2               SGN:
001763r 2  20 rr rr             jsr     SIGN
001766r 2               
001766r 2               ; ----------------------------------------------------------------------------
001766r 2               ; CONVERT (A) INTO FAC, AS SIGNED VALUE -128 TO +127
001766r 2               ; ----------------------------------------------------------------------------
001766r 2               FLOAT:
001766r 2  85 A1                sta     FAC+1
001768r 2  A9 00                lda     #$00
00176Ar 2  85 A2                sta     FAC+2
00176Cr 2  A2 88                ldx     #$88
00176Er 2               
00176Er 2               ; ----------------------------------------------------------------------------
00176Er 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
00176Er 2               ; (X) = EXPONENT
00176Er 2               ; ----------------------------------------------------------------------------
00176Er 2               FLOAT1:
00176Er 2  A5 A1                lda     FAC+1
001770r 2  49 FF                eor     #$FF
001772r 2  2A                   rol     a
001773r 2               
001773r 2               ; ----------------------------------------------------------------------------
001773r 2               ; FLOAT UNSIGNED VALUE IN FAC+1,2
001773r 2               ; (X) = EXPONENT
001773r 2               ; C=0 TO MAKE VALUE NEGATIVE
001773r 2               ; C=1 TO MAKE VALUE POSITIVE
001773r 2               ; ----------------------------------------------------------------------------
001773r 2               FLOAT2:
001773r 2  A9 00                lda     #$00
001775r 2               .ifndef CONFIG_SMALL
001775r 2  85 A4                sta     FAC+4
001777r 2               .endif
001777r 2  85 A3                sta     FAC+3
001779r 2               LDB21:
001779r 2  86 A0                stx     FAC
00177Br 2  85 AF                sta     FACEXTENSION
00177Dr 2  85 A5                sta     FACSIGN
00177Fr 2  4C rr rr             jmp     NORMALIZE_FAC1
001782r 2               
001782r 2               ; ----------------------------------------------------------------------------
001782r 2               ; "ABS" FUNCTION
001782r 2               ; ----------------------------------------------------------------------------
001782r 2               ABS:
001782r 2  46 A5                lsr     FACSIGN
001784r 2  60                   rts
001785r 2               
001785r 2               ; ----------------------------------------------------------------------------
001785r 2               ; COMPARE FAC WITH PACKED # AT (Y,A)
001785r 2               ; RETURN A=1,0,-1 AS (Y,A) IS <,=,> FAC
001785r 2               ; ----------------------------------------------------------------------------
001785r 2               FCOMP:
001785r 2  85 63                sta     DEST
001787r 2               
001787r 2               ; ----------------------------------------------------------------------------
001787r 2               ; SPECIAL ENTRY FROM "NEXT" PROCESSOR
001787r 2               ; "DEST" ALREADY SET UP
001787r 2               ; ----------------------------------------------------------------------------
001787r 2               FCOMP2:
001787r 2  84 64                sty     DEST+1
001789r 2  A0 00                ldy     #$00
00178Br 2  B1 63                lda     (DEST),y
00178Dr 2  C8                   iny
00178Er 2  AA                   tax
00178Fr 2  F0 C4                beq     SIGN
001791r 2  B1 63                lda     (DEST),y
001793r 2  45 A5                eor     FACSIGN
001795r 2  30 C2                bmi     L3AA7
001797r 2  E4 A0                cpx     FAC
001799r 2  D0 21                bne     L3B0A
00179Br 2  B1 63                lda     (DEST),y
00179Dr 2  09 80                ora     #$80
00179Fr 2  C5 A1                cmp     FAC+1
0017A1r 2  D0 19                bne     L3B0A
0017A3r 2  C8                   iny
0017A4r 2  B1 63                lda     (DEST),y
0017A6r 2  C5 A2                cmp     FAC+2
0017A8r 2  D0 12                bne     L3B0A
0017AAr 2  C8                   iny
0017ABr 2               .ifndef CONFIG_SMALL
0017ABr 2  B1 63                lda     (DEST),y
0017ADr 2  C5 A3                cmp     FAC+3
0017AFr 2  D0 0B                bne     L3B0A
0017B1r 2  C8                   iny
0017B2r 2               .endif
0017B2r 2  A9 7F                lda     #$7F
0017B4r 2  C5 AF                cmp     FACEXTENSION
0017B6r 2  B1 63                lda     (DEST),y
0017B8r 2  E5 A4                sbc     FAC_LAST
0017BAr 2  F0 28                beq     L3B32
0017BCr 2               L3B0A:
0017BCr 2  A5 A5                lda     FACSIGN
0017BEr 2  90 02                bcc     L3B10
0017C0r 2  49 FF                eor     #$FF
0017C2r 2               L3B10:
0017C2r 2  4C rr rr             jmp     SIGN2
0017C5r 2               
0017C5r 2               ; ----------------------------------------------------------------------------
0017C5r 2               ; QUICK INTEGER FUNCTION
0017C5r 2               ;
0017C5r 2               ; CONVERTS FP VALUE IN FAC TO INTEGER VALUE
0017C5r 2               ; IN FAC+1...FAC+4, BY SHIFTING RIGHT WITH SIGN
0017C5r 2               ; EXTENSION UNTIL FRACTIONAL BITS ARE OUT.
0017C5r 2               ;
0017C5r 2               ; THIS SUBROUTINE ASSUMES THE EXPONENT < 32.
0017C5r 2               ; ----------------------------------------------------------------------------
0017C5r 2               QINT:
0017C5r 2  A5 A0                lda     FAC
0017C7r 2  F0 4A                beq     QINT3
0017C9r 2  38                   sec
0017CAr 2  E9 A0                sbc     #120+8*BYTES_FP
0017CCr 2  24 A5                bit     FACSIGN
0017CEr 2  10 09                bpl     L3B27
0017D0r 2  AA                   tax
0017D1r 2  A9 FF                lda     #$FF
0017D3r 2  85 A7                sta     SHIFTSIGNEXT
0017D5r 2  20 rr rr             jsr     COMPLEMENT_FAC_MANTISSA
0017D8r 2  8A                   txa
0017D9r 2               L3B27:
0017D9r 2  A2 A0                ldx     #FAC
0017DBr 2  C9 F9                cmp     #$F9
0017DDr 2  10 06                bpl     QINT2
0017DFr 2  20 rr rr             jsr     SHIFT_RIGHT
0017E2r 2  84 A7                sty     SHIFTSIGNEXT
0017E4r 2               L3B32:
0017E4r 2  60                   rts
0017E5r 2               QINT2:
0017E5r 2  A8                   tay
0017E6r 2  A5 A5                lda     FACSIGN
0017E8r 2  29 80                and     #$80
0017EAr 2  46 A1                lsr     FAC+1
0017ECr 2  05 A1                ora     FAC+1
0017EEr 2  85 A1                sta     FAC+1
0017F0r 2  20 rr rr             jsr     SHIFT_RIGHT4
0017F3r 2  84 A7                sty     SHIFTSIGNEXT
0017F5r 2  60                   rts
0017F6r 2               
0017F6r 2               ; ----------------------------------------------------------------------------
0017F6r 2               ; "INT" FUNCTION
0017F6r 2               ;
0017F6r 2               ; USES QINT TO CONVERT (FAC) TO INTEGER FORM,
0017F6r 2               ; AND THEN REFLOATS THE INTEGER.
0017F6r 2               ; ----------------------------------------------------------------------------
0017F6r 2               INT:
0017F6r 2  A5 A0                lda     FAC
0017F8r 2  C9 A0                cmp     #120+8*BYTES_FP
0017FAr 2  B0 20                bcs     RTS17
0017FCr 2  20 rr rr             jsr     QINT
0017FFr 2  84 AF                sty     FACEXTENSION
001801r 2  A5 A5                lda     FACSIGN
001803r 2  84 A5                sty     FACSIGN
001805r 2  49 80                eor     #$80
001807r 2  2A                   rol     a
001808r 2  A9 A0                lda     #120+8*BYTES_FP
00180Ar 2  85 A0                sta     FAC
00180Cr 2  A5 A4                lda     FAC_LAST
00180Er 2  85 0D                sta     CHARAC
001810r 2  4C rr rr             jmp     NORMALIZE_FAC1
001813r 2               QINT3:
001813r 2  85 A1                sta     FAC+1
001815r 2  85 A2                sta     FAC+2
001817r 2  85 A3                sta     FAC+3
001819r 2               .ifndef CONFIG_SMALL
001819r 2  85 A4                sta     FAC+4
00181Br 2               .endif
00181Br 2  A8                   tay
00181Cr 2               RTS17:
00181Cr 2  60                   rts
00181Dr 2               
00181Dr 2               ; ----------------------------------------------------------------------------
00181Dr 2               ; CONVERT STRING TO FP VALUE IN FAC
00181Dr 2               ;
00181Dr 2               ; STRING POINTED TO BY TXTPTR
00181Dr 2               ; FIRST CHAR ALREADY SCANNED BY CHRGET
00181Dr 2               ; (A) = FIRST CHAR, C=0 IF DIGIT.
00181Dr 2               ; ----------------------------------------------------------------------------
00181Dr 2               FIN:
00181Dr 2  A0 00                ldy     #$00
00181Fr 2  A2 0A                ldx     #SERLEN-TMPEXP
001821r 2               L3B6F:
001821r 2  94 9C                sty     TMPEXP,x
001823r 2  CA                   dex
001824r 2  10 FB                bpl     L3B6F
001826r 2  90 0F                bcc     FIN2
001828r 2               .ifdef SYM1
001828r 2                       cmp     #$26
001828r 2                       bne     LDABB
001828r 2                       jmp     LCDFE
001828r 2               LDABB:
001828r 2               .endif
001828r 2  C9 2D                cmp     #$2D
00182Ar 2  D0 04                bne     L3B7E
00182Cr 2  86 A6                stx     SERLEN
00182Er 2  F0 04                beq     FIN1
001830r 2               L3B7E:
001830r 2  C9 2B                cmp     #$2B
001832r 2  D0 05                bne     FIN3
001834r 2               FIN1:
001834r 2  20 B2 00             jsr     CHRGET
001837r 2               FIN2:
001837r 2  90 5B                bcc     FIN9
001839r 2               FIN3:
001839r 2  C9 2E                cmp     #$2E
00183Br 2  F0 2E                beq     FIN10
00183Dr 2  C9 45                cmp     #$45
00183Fr 2  D0 30                bne     FIN7
001841r 2  20 B2 00             jsr     CHRGET
001844r 2  90 17                bcc     FIN5
001846r 2  C9 A4                cmp     #TOKEN_MINUS
001848r 2  F0 0E                beq     L3BA6
00184Ar 2  C9 2D                cmp     #$2D
00184Cr 2  F0 0A                beq     L3BA6
00184Er 2  C9 A3                cmp     #TOKEN_PLUS
001850r 2  F0 08                beq     FIN4
001852r 2  C9 2B                cmp     #$2B
001854r 2  F0 04                beq     FIN4
001856r 2  D0 07                bne     FIN6
001858r 2               L3BA6:
001858r 2               .ifndef CONFIG_ROR_WORKAROUND
001858r 2  66 9F                ror     EXPSGN
00185Ar 2               .else
00185Ar 2                       lda     #$00
00185Ar 2                       bcc     L3BAC
00185Ar 2                       lda     #$80
00185Ar 2               L3BAC:
00185Ar 2                       lsr     EXPSGN
00185Ar 2                       ora     EXPSGN
00185Ar 2                       sta     EXPSGN
00185Ar 2               .endif
00185Ar 2               FIN4:
00185Ar 2  20 B2 00             jsr     CHRGET
00185Dr 2               FIN5:
00185Dr 2  90 5C                bcc     GETEXP
00185Fr 2               FIN6:
00185Fr 2  24 9F                bit     EXPSGN
001861r 2  10 0E                bpl     FIN7
001863r 2  A9 00                lda     #$00
001865r 2  38                   sec
001866r 2  E5 9D                sbc     EXPON
001868r 2  4C rr rr             jmp     FIN8
00186Br 2               
00186Br 2               ; ----------------------------------------------------------------------------
00186Br 2               ; FOUND A DECIMAL POINT
00186Br 2               ; ----------------------------------------------------------------------------
00186Br 2               FIN10:
00186Br 2               .ifndef CONFIG_ROR_WORKAROUND
00186Br 2  66 9E                ror     LOWTR
00186Dr 2               .else
00186Dr 2                       lda     #$00
00186Dr 2                       bcc     L3BC9
00186Dr 2                       lda     #$80
00186Dr 2               L3BC9:
00186Dr 2                       lsr     LOWTR
00186Dr 2                       ora     LOWTR
00186Dr 2                       sta     LOWTR
00186Dr 2               .endif
00186Dr 2  24 9E                bit     LOWTR
00186Fr 2  50 C3                bvc     FIN1
001871r 2               
001871r 2               ; ----------------------------------------------------------------------------
001871r 2               ; NUMBER TERMINATED, ADJUST EXPONENT NOW
001871r 2               ; ----------------------------------------------------------------------------
001871r 2               FIN7:
001871r 2  A5 9D                lda     EXPON
001873r 2               FIN8:
001873r 2  38                   sec
001874r 2  E5 9C                sbc     INDX
001876r 2  85 9D                sta     EXPON
001878r 2  F0 12                beq     L3BEE
00187Ar 2  10 09                bpl     L3BE7
00187Cr 2               L3BDE:
00187Cr 2  20 rr rr             jsr     DIV10
00187Fr 2  E6 9D                inc     EXPON
001881r 2  D0 F9                bne     L3BDE
001883r 2  F0 07                beq     L3BEE
001885r 2               L3BE7:
001885r 2  20 rr rr             jsr     MUL10
001888r 2  C6 9D                dec     EXPON
00188Ar 2  D0 F9                bne     L3BE7
00188Cr 2               L3BEE:
00188Cr 2  A5 A6                lda     SERLEN
00188Er 2  30 01                bmi     L3BF3
001890r 2  60                   rts
001891r 2               L3BF3:
001891r 2  4C rr rr             jmp     NEGOP
001894r 2               
001894r 2               ; ----------------------------------------------------------------------------
001894r 2               ; ACCUMULATE A DIGIT INTO FAC
001894r 2               ; ----------------------------------------------------------------------------
001894r 2               FIN9:
001894r 2  48                   pha
001895r 2  24 9E                bit     LOWTR
001897r 2  10 02                bpl     L3BFD
001899r 2  E6 9C                inc     INDX
00189Br 2               L3BFD:
00189Br 2  20 rr rr             jsr     MUL10
00189Er 2  68                   pla
00189Fr 2  38                   sec
0018A0r 2  E9 30                sbc     #$30
0018A2r 2  20 rr rr             jsr     ADDACC
0018A5r 2  4C rr rr             jmp     FIN1
0018A8r 2               
0018A8r 2               ; ----------------------------------------------------------------------------
0018A8r 2               ; ADD (A) TO FAC
0018A8r 2               ; ----------------------------------------------------------------------------
0018A8r 2               ADDACC:
0018A8r 2  48                   pha
0018A9r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
0018ACr 2  68                   pla
0018ADr 2  20 rr rr             jsr     FLOAT
0018B0r 2  A5 AD                lda     ARGSIGN
0018B2r 2  45 A5                eor     FACSIGN
0018B4r 2  85 AE                sta     SGNCPR
0018B6r 2  A6 A0                ldx     FAC
0018B8r 2  4C rr rr             jmp     FADDT
0018BBr 2               
0018BBr 2               ; ----------------------------------------------------------------------------
0018BBr 2               ; ACCUMULATE DIGIT OF EXPONENT
0018BBr 2               ; ----------------------------------------------------------------------------
0018BBr 2               GETEXP:
0018BBr 2  A5 9D                lda     EXPON
0018BDr 2  C9 0A                cmp     #MAX_EXPON
0018BFr 2  90 09                bcc     L3C2C
0018C1r 2               .ifdef CONFIG_10A
0018C1r 2  A9 64                lda     #$64
0018C3r 2               .endif
0018C3r 2  24 9F                bit     EXPSGN
0018C5r 2               .ifdef CONFIG_10A
0018C5r 2  30 11                bmi     L3C3A
0018C7r 2               .else
0018C7r 2                       bmi     LDC70
0018C7r 2               .endif
0018C7r 2  4C rr rr             jmp     OVERFLOW
0018CAr 2               LDC70:
0018CAr 2               .ifndef CONFIG_10A
0018CAr 2                       lda     #$0B
0018CAr 2               .endif
0018CAr 2               L3C2C:
0018CAr 2  0A                   asl     a
0018CBr 2  0A                   asl     a
0018CCr 2  18                   clc
0018CDr 2  65 9D                adc     EXPON
0018CFr 2  0A                   asl     a
0018D0r 2  18                   clc
0018D1r 2  A0 00                ldy     #$00
0018D3r 2  71 B9                adc     (TXTPTR),y
0018D5r 2  38                   sec
0018D6r 2  E9 30                sbc     #$30
0018D8r 2               L3C3A:
0018D8r 2  85 9D                sta     EXPON
0018DAr 2  4C rr rr             jmp     FIN4
0018DDr 2               
0018DDr 2               ; ----------------------------------------------------------------------------
0018DDr 2               .ifdef CONFIG_SMALL
0018DDr 2               ; these values are /1000 of what the labels say
0018DDr 2               CON_99999999_9:
0018DDr 2                       .byte   $91,$43,$4F,$F8
0018DDr 2               CON_999999999:
0018DDr 2               		.byte   $94,$74,$23,$F7
0018DDr 2               CON_BILLION:
0018DDr 2                       .byte   $94,$74,$24,$00
0018DDr 2               .else
0018DDr 2               CON_99999999_9:
0018DDr 2  9B 3E BC 1F          .byte   $9B,$3E,$BC,$1F,$FD
0018E1r 2  FD           
0018E2r 2               CON_999999999:
0018E2r 2               .ifndef CONFIG_10A
0018E2r 2                       .byte   $9E,$6E,$6B,$27,$FE
0018E2r 2               .else
0018E2r 2  9E 6E 6B 27          .byte   $9E,$6E,$6B,$27,$FD
0018E6r 2  FD           
0018E7r 2               .endif
0018E7r 2               CON_BILLION:
0018E7r 2  9E 6E 6B 28          .byte   $9E,$6E,$6B,$28,$00
0018EBr 2  00           
0018ECr 2               .endif
0018ECr 2               
0018ECr 2               ; ----------------------------------------------------------------------------
0018ECr 2               ; PRINT "IN <LINE #>"
0018ECr 2               ; ----------------------------------------------------------------------------
0018ECr 2               INPRT:
0018ECr 2               .ifdef KBD
0018ECr 2                       jsr     LFE0B
0018ECr 2                       .byte	" in"
0018ECr 2                       .byte	0
0018ECr 2               .else
0018ECr 2  A9 rr                lda     #<QT_IN
0018EEr 2  A0 rr                ldy     #>QT_IN
0018F0r 2  20 rr rr             jsr     GOSTROUT2
0018F3r 2               .endif
0018F3r 2  A5 79                lda     CURLIN+1
0018F5r 2  A6 78                ldx     CURLIN
0018F7r 2               
0018F7r 2               ; ----------------------------------------------------------------------------
0018F7r 2               ; PRINT A,X AS DECIMAL INTEGER
0018F7r 2               ; ----------------------------------------------------------------------------
0018F7r 2               LINPRT:
0018F7r 2  85 A1                sta     FAC+1
0018F9r 2  86 A2                stx     FAC+2
0018FBr 2  A2 90                ldx     #$90
0018FDr 2  38                   sec
0018FEr 2  20 rr rr             jsr     FLOAT2
001901r 2  20 rr rr             jsr     FOUT
001904r 2               GOSTROUT2:
001904r 2  4C rr rr             jmp     STROUT
001907r 2               
001907r 2               ; ----------------------------------------------------------------------------
001907r 2               ; CONVERT (FAC) TO STRING STARTING AT STACK
001907r 2               ; RETURN WITH (Y,A) POINTING AT STRING
001907r 2               ; ----------------------------------------------------------------------------
001907r 2               FOUT:
001907r 2  A0 01                ldy     #$01
001909r 2               
001909r 2               ; ----------------------------------------------------------------------------
001909r 2               ; "STR$" FUNCTION ENTERS HERE, WITH (Y)=0
001909r 2               ; SO THAT RESULT STRING STARTS AT STACK-1
001909r 2               ; (THIS IS USED AS A FLAG)
001909r 2               ; ----------------------------------------------------------------------------
001909r 2               FOUT1:
001909r 2  A9 20                lda     #$20
00190Br 2  24 A5                bit     FACSIGN
00190Dr 2  10 02                bpl     L3C73
00190Fr 2  A9 2D                lda     #$2D
001911r 2               L3C73:
001911r 2  99 FF 00             sta     STACK2-1,y
001914r 2  85 A5                sta     FACSIGN
001916r 2  84 B0                sty     STRNG2
001918r 2  C8                   iny
001919r 2  A9 30                lda     #$30
00191Br 2  A6 A0                ldx     FAC
00191Dr 2  D0 03                bne     L3C84
00191Fr 2  4C rr rr             jmp     FOUT4
001922r 2               L3C84:
001922r 2  A9 00                lda     #$00
001924r 2  E0 80                cpx     #$80
001926r 2  F0 02                beq     L3C8C
001928r 2  B0 09                bcs     L3C95
00192Ar 2               L3C8C:
00192Ar 2  A9 rr                lda     #<CON_BILLION
00192Cr 2  A0 rr                ldy     #>CON_BILLION
00192Er 2  20 rr rr             jsr     FMULT
001931r 2               .ifdef CONFIG_SMALL
001931r 2                       lda     #-6 ; exponent adjustment
001931r 2               .else
001931r 2  A9 F7                lda     #-9
001933r 2               .endif
001933r 2               L3C95:
001933r 2  85 9C                sta     INDX
001935r 2               ; ----------------------------------------------------------------------------
001935r 2               ; ADJUST UNTIL 1E8 <= (FAC) <1E9
001935r 2               ; ----------------------------------------------------------------------------
001935r 2               L3C97:
001935r 2  A9 rr                lda     #<CON_999999999
001937r 2  A0 rr                ldy     #>CON_999999999
001939r 2  20 rr rr             jsr     FCOMP
00193Cr 2  F0 1E                beq     L3CBE
00193Er 2  10 12                bpl     L3CB4
001940r 2               L3CA2:
001940r 2  A9 rr                lda     #<CON_99999999_9
001942r 2  A0 rr                ldy     #>CON_99999999_9
001944r 2  20 rr rr             jsr     FCOMP
001947r 2  F0 02                beq     L3CAD
001949r 2  10 0E                bpl     L3CBB
00194Br 2               L3CAD:
00194Br 2  20 rr rr             jsr     MUL10
00194Er 2  C6 9C                dec     INDX
001950r 2  D0 EE                bne     L3CA2
001952r 2               L3CB4:
001952r 2  20 rr rr             jsr     DIV10
001955r 2  E6 9C                inc     INDX
001957r 2  D0 DC                bne     L3C97
001959r 2               L3CBB:
001959r 2  20 rr rr             jsr     FADDH
00195Cr 2               L3CBE:
00195Cr 2  20 rr rr             jsr     QINT
00195Fr 2               ; ----------------------------------------------------------------------------
00195Fr 2               ; FAC+1...FAC+4 IS NOW IN INTEGER FORM
00195Fr 2               ; WITH POWER OF TEN ADJUSTMENT IN TMPEXP
00195Fr 2               ;
00195Fr 2               ; IF -10 < TMPEXP > 1, PRINT IN DECIMAL FORM
00195Fr 2               ; OTHERWISE, PRINT IN EXPONENTIAL FORM
00195Fr 2               ; ----------------------------------------------------------------------------
00195Fr 2  A2 01                ldx     #$01
001961r 2  A5 9C                lda     INDX
001963r 2  18                   clc
001964r 2  69 0A                adc     #3*BYTES_FP-5
001966r 2  30 09                bmi     L3CD3
001968r 2  C9 0B                cmp     #3*BYTES_FP-4
00196Ar 2  B0 06                bcs     L3CD4
00196Cr 2  69 FF                adc     #$FF
00196Er 2  AA                   tax
00196Fr 2  A9 02                lda     #$02
001971r 2               L3CD3:
001971r 2  38                   sec
001972r 2               L3CD4:
001972r 2  E9 02                sbc     #$02
001974r 2  85 9D                sta     EXPON
001976r 2  86 9C                stx     INDX
001978r 2  8A                   txa
001979r 2  F0 02                beq     L3CDF
00197Br 2  10 13                bpl     L3CF2
00197Dr 2               L3CDF:
00197Dr 2  A4 B0                ldy     STRNG2
00197Fr 2  A9 2E                lda     #$2E
001981r 2  C8                   iny
001982r 2  99 FF 00             sta     STACK2-1,y
001985r 2  8A                   txa
001986r 2  F0 06                beq     L3CF0
001988r 2  A9 30                lda     #$30
00198Ar 2  C8                   iny
00198Br 2  99 FF 00             sta     STACK2-1,y
00198Er 2               L3CF0:
00198Er 2  84 B0                sty     STRNG2
001990r 2               ; ----------------------------------------------------------------------------
001990r 2               ; NOW DIVIDE BY POWERS OF TEN TO GET SUCCESSIVE DIGITS
001990r 2               ; ----------------------------------------------------------------------------
001990r 2               L3CF2:
001990r 2  A0 00                ldy     #$00
001992r 2               LDD3A:
001992r 2  A2 80                ldx     #$80
001994r 2               L3CF6:
001994r 2  A5 A4                lda     FAC_LAST
001996r 2  18                   clc
001997r 2               .ifndef CONFIG_SMALL
001997r 2  79 rr rr             adc     DECTBL+3,y
00199Ar 2  85 A4                sta     FAC+4
00199Cr 2  A5 A3                lda     FAC+3
00199Er 2               .endif
00199Er 2  79 rr rr             adc     DECTBL+2,y
0019A1r 2  85 A3                sta     FAC+3
0019A3r 2  A5 A2                lda     FAC+2
0019A5r 2  79 rr rr             adc     DECTBL+1,y
0019A8r 2  85 A2                sta     FAC+2
0019AAr 2  A5 A1                lda     FAC+1
0019ACr 2  79 rr rr             adc     DECTBL,y
0019AFr 2  85 A1                sta     FAC+1
0019B1r 2  E8                   inx
0019B2r 2  B0 04                bcs     L3D1A
0019B4r 2  10 DE                bpl     L3CF6
0019B6r 2  30 02                bmi     L3D1C
0019B8r 2               L3D1A:
0019B8r 2  30 DA                bmi     L3CF6
0019BAr 2               L3D1C:
0019BAr 2  8A                   txa
0019BBr 2  90 04                bcc     L3D23
0019BDr 2  49 FF                eor     #$FF
0019BFr 2  69 0A                adc     #$0A
0019C1r 2               L3D23:
0019C1r 2  69 2F                adc     #$2F
0019C3r 2  C8                   iny
0019C4r 2  C8                   iny
0019C5r 2  C8                   iny
0019C6r 2               .ifndef CONFIG_SMALL
0019C6r 2  C8                   iny
0019C7r 2               .endif
0019C7r 2  84 86                sty     VARPNT
0019C9r 2  A4 B0                ldy     STRNG2
0019CBr 2  C8                   iny
0019CCr 2  AA                   tax
0019CDr 2  29 7F                and     #$7F
0019CFr 2  99 FF 00             sta     STACK2-1,y
0019D2r 2  C6 9C                dec     INDX
0019D4r 2  D0 06                bne     L3D3E
0019D6r 2  A9 2E                lda     #$2E
0019D8r 2  C8                   iny
0019D9r 2  99 FF 00             sta     STACK2-1,y
0019DCr 2               L3D3E:
0019DCr 2  84 B0                sty     STRNG2
0019DEr 2  A4 86                ldy     VARPNT
0019E0r 2  8A                   txa
0019E1r 2  49 FF                eor     #$FF
0019E3r 2  29 80                and     #$80
0019E5r 2  AA                   tax
0019E6r 2  C0 24                cpy     #DECTBL_END-DECTBL
0019E8r 2               .ifdef CONFIG_CBM_ALL
0019E8r 2                       beq     LDD96
0019E8r 2                       cpy     #$3C ; XXX
0019E8r 2               .endif
0019E8r 2  D0 AA                bne     L3CF6
0019EAr 2               ; ----------------------------------------------------------------------------
0019EAr 2               ; NINE DIGITS HAVE BEEN STORED IN STRING.  NOW LOOK
0019EAr 2               ; BACK AND LOP OFF TRAILING ZEROES AND A TRAILING
0019EAr 2               ; DECIMAL POINT.
0019EAr 2               ; ----------------------------------------------------------------------------
0019EAr 2               LDD96:
0019EAr 2  A4 B0                ldy     STRNG2
0019ECr 2               L3D4E:
0019ECr 2  B9 FF 00             lda     STACK2-1,y
0019EFr 2  88                   dey
0019F0r 2  C9 30                cmp     #$30
0019F2r 2  F0 F8                beq     L3D4E
0019F4r 2  C9 2E                cmp     #$2E
0019F6r 2  F0 01                beq     L3D5B
0019F8r 2  C8                   iny
0019F9r 2               L3D5B:
0019F9r 2  A9 2B                lda     #$2B
0019FBr 2  A6 9D                ldx     EXPON
0019FDr 2  F0 2E                beq     L3D8F
0019FFr 2  10 08                bpl     L3D6B
001A01r 2  A9 00                lda     #$00
001A03r 2  38                   sec
001A04r 2  E5 9D                sbc     EXPON
001A06r 2  AA                   tax
001A07r 2  A9 2D                lda     #$2D
001A09r 2               L3D6B:
001A09r 2  99 01 01             sta     STACK2+1,y
001A0Cr 2  A9 45                lda     #$45
001A0Er 2  99 00 01             sta     STACK2,y
001A11r 2  8A                   txa
001A12r 2  A2 2F                ldx     #$2F
001A14r 2  38                   sec
001A15r 2               L3D77:
001A15r 2  E8                   inx
001A16r 2  E9 0A                sbc     #$0A
001A18r 2  B0 FB                bcs     L3D77
001A1Ar 2  69 3A                adc     #$3A
001A1Cr 2  99 03 01             sta     STACK2+3,y
001A1Fr 2  8A                   txa
001A20r 2  99 02 01             sta     STACK2+2,y
001A23r 2  A9 00                lda     #$00
001A25r 2  99 04 01             sta     STACK2+4,y
001A28r 2  F0 08                beq     L3D94
001A2Ar 2               FOUT4:
001A2Ar 2  99 FF 00             sta     STACK2-1,y
001A2Dr 2               L3D8F:
001A2Dr 2  A9 00                lda     #$00
001A2Fr 2  99 00 01             sta     STACK2,y
001A32r 2               L3D94:
001A32r 2  A9 00                lda     #<STACK2
001A34r 2  A0 01                ldy     #>STACK2
001A36r 2  60                   rts
001A37r 2               
001A37r 2               ; ----------------------------------------------------------------------------
001A37r 2               CON_HALF:
001A37r 2               .ifdef CONFIG_SMALL
001A37r 2                       .byte   $80,$00,$00,$00
001A37r 2               .else
001A37r 2  80 00 00 00          .byte   $80,$00,$00,$00,$00
001A3Br 2  00           
001A3Cr 2               .endif
001A3Cr 2               
001A3Cr 2               ; ----------------------------------------------------------------------------
001A3Cr 2               ; POWERS OF 10 FROM 1E8 DOWN TO 1,
001A3Cr 2               ; AS 32-BIT INTEGERS, WITH ALTERNATING SIGNS
001A3Cr 2               ; ----------------------------------------------------------------------------
001A3Cr 2               DECTBL:
001A3Cr 2               .ifdef CONFIG_SMALL
001A3Cr 2                       .byte   $FE,$79,$60 ; -100000
001A3Cr 2               		.byte	$00,$27,$10 ; 10000
001A3Cr 2               		.byte	$FF,$FC,$18 ; -1000
001A3Cr 2               		.byte	$00,$00,$64 ; 100
001A3Cr 2               		.byte	$FF,$FF,$F6 ; -10
001A3Cr 2               		.byte	$00,$00,$01 ; 1
001A3Cr 2               .else
001A3Cr 2  FA 0A 1F 00  		.byte	$FA,$0A,$1F,$00	; -100000000
001A40r 2  00 98 96 80  		.byte	$00,$98,$96,$80	; 10000000
001A44r 2  FF F0 BD C0  		.byte	$FF,$F0,$BD,$C0	; -1000000
001A48r 2  00 01 86 A0  		.byte	$00,$01,$86,$A0	; 100000
001A4Cr 2  FF FF D8 F0  		.byte	$FF,$FF,$D8,$F0	; -10000
001A50r 2  00 00 03 E8  		.byte   $00,$00,$03,$E8	; 1000
001A54r 2  FF FF FF 9C  		.byte	$FF,$FF,$FF,$9C	; -100
001A58r 2  00 00 00 0A  		.byte   $00,$00,$00,$0A	; 10
001A5Cr 2  FF FF FF FF  		.byte	$FF,$FF,$FF,$FF	; -1
001A60r 2               .endif
001A60r 2               DECTBL_END:
001A60r 2               .ifdef CONFIG_CBM_ALL
001A60r 2               		.byte	$FF,$DF,$0A,$80 ; TI$
001A60r 2               		.byte	$00,$03,$4B,$C0
001A60r 2               		.byte	$FF,$FF,$73,$60
001A60r 2               		.byte	$00,$00,$0E,$10
001A60r 2               		.byte	$FF,$FF,$FD,$A8
001A60r 2               		.byte	$00,$00,$00,$3C
001A60r 2               .endif
001A60r 2               .ifdef CONFIG_2
001A60r 2               C_ZERO = CON_HALF + 2
001A60r 2               .endif
001A60r 2               
001A60r 2               ; ----------------------------------------------------------------------------
001A60r 2               ; "SQR" FUNCTION
001A60r 2               ; ----------------------------------------------------------------------------
001A60r 2               SQR:
001A60r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001A63r 2  A9 rr                lda     #<CON_HALF
001A65r 2  A0 rr                ldy     #>CON_HALF
001A67r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001A6Ar 2               
001A6Ar 2               ; ----------------------------------------------------------------------------
001A6Ar 2               ; EXPONENTIATION OPERATION
001A6Ar 2               ;
001A6Ar 2               ; ARG ^ FAC  =  EXP( LOG(ARG) * FAC )
001A6Ar 2               ; ----------------------------------------------------------------------------
001A6Ar 2               FPWRT:
001A6Ar 2  F0 70                beq     EXP
001A6Cr 2  A5 A8                lda     ARG
001A6Er 2  D0 03                bne     L3DD5
001A70r 2  4C rr rr             jmp     STA_IN_FAC_SIGN_AND_EXP
001A73r 2               L3DD5:
001A73r 2  A2 8D                ldx     #TEMP3
001A75r 2  A0 00                ldy     #$00
001A77r 2  20 rr rr             jsr     STORE_FAC_AT_YX_ROUNDED
001A7Ar 2  A5 AD                lda     ARGSIGN
001A7Cr 2  10 0F                bpl     L3DEF
001A7Er 2  20 rr rr             jsr     INT
001A81r 2  A9 8D                lda     #TEMP3
001A83r 2  A0 00                ldy     #$00
001A85r 2  20 rr rr             jsr     FCOMP
001A88r 2  D0 03                bne     L3DEF
001A8Ar 2  98                   tya
001A8Br 2  A4 0D                ldy     CHARAC
001A8Dr 2               L3DEF:
001A8Dr 2  20 rr rr             jsr     MFA
001A90r 2  98                   tya
001A91r 2  48                   pha
001A92r 2  20 rr rr             jsr     LOG
001A95r 2  A9 8D                lda     #TEMP3
001A97r 2  A0 00                ldy     #$00
001A99r 2  20 rr rr             jsr     FMULT
001A9Cr 2  20 rr rr             jsr     EXP
001A9Fr 2  68                   pla
001AA0r 2  4A                   lsr     a
001AA1r 2  90 0A                bcc     L3E0F
001AA3r 2               
001AA3r 2               ; ----------------------------------------------------------------------------
001AA3r 2               ; NEGATE VALUE IN FAC
001AA3r 2               ; ----------------------------------------------------------------------------
001AA3r 2               NEGOP:
001AA3r 2  A5 A0                lda     FAC
001AA5r 2  F0 06                beq     L3E0F
001AA7r 2  A5 A5                lda     FACSIGN
001AA9r 2  49 FF                eor     #$FF
001AABr 2  85 A5                sta     FACSIGN
001AADr 2               L3E0F:
001AADr 2  60                   rts
001AAEr 2               
001AAEr 2               ; ----------------------------------------------------------------------------
001AAEr 2               .ifdef CONFIG_SMALL
001AAEr 2               CON_LOG_E:
001AAEr 2                       .byte   $81,$38,$AA,$3B
001AAEr 2               POLY_EXP:
001AAEr 2               		.byte	$06
001AAEr 2               		.byte	$74,$63,$90,$8C
001AAEr 2               		.byte	$77,$23,$0C,$AB
001AAEr 2               		.byte	$7A,$1E,$94,$00
001AAEr 2               		.byte	$7C,$63,$42,$80
001AAEr 2               		.byte	$7E,$75,$FE,$D0
001AAEr 2               		.byte	$80,$31,$72,$15
001AAEr 2               		.byte	$81,$00,$00,$00
001AAEr 2               .else
001AAEr 2               CON_LOG_E:
001AAEr 2  81 38 AA 3B          .byte   $81,$38,$AA,$3B,$29
001AB2r 2  29           
001AB3r 2               POLY_EXP:
001AB3r 2  07                   .byte   $07
001AB4r 2  71 34 58 3E  		.byte	$71,$34,$58,$3E,$56
001AB8r 2  56           
001AB9r 2  74 16 7E B3  		.byte	$74,$16,$7E,$B3,$1B
001ABDr 2  1B           
001ABEr 2  77 2F EE E3  		.byte	$77,$2F,$EE,$E3,$85
001AC2r 2  85           
001AC3r 2  7A 1D 84 1C          .byte   $7A,$1D,$84,$1C,$2A
001AC7r 2  2A           
001AC8r 2  7C 63 59 58  		.byte	$7C,$63,$59,$58,$0A
001ACCr 2  0A           
001ACDr 2  7E 75 FD E7  		.byte	$7E,$75,$FD,$E7,$C6
001AD1r 2  C6           
001AD2r 2  80 31 72 18  		.byte	$80,$31,$72,$18,$10
001AD6r 2  10           
001AD7r 2  81 00 00 00  		.byte	$81,$00,$00,$00,$00
001ADBr 2  00           
001ADCr 2               .endif
001ADCr 2               
001ADCr 2               ; ----------------------------------------------------------------------------
001ADCr 2               ; "EXP" FUNCTION
001ADCr 2               ;
001ADCr 2               ; FAC = E ^ FAC
001ADCr 2               ; ----------------------------------------------------------------------------
001ADCr 2               EXP:
001ADCr 2  A9 rr                lda     #<CON_LOG_E
001ADEr 2  A0 rr                ldy     #>CON_LOG_E
001AE0r 2  20 rr rr             jsr     FMULT
001AE3r 2  A5 AF                lda     FACEXTENSION
001AE5r 2  69 50                adc     #$50
001AE7r 2  90 03                bcc     L3E4E
001AE9r 2  20 rr rr             jsr     INCREMENT_MANTISSA
001AECr 2               L3E4E:
001AECr 2  85 95                sta     ARGEXTENSION
001AEEr 2  20 rr rr             jsr     MAF
001AF1r 2  A5 A0                lda     FAC
001AF3r 2  C9 88                cmp     #$88
001AF5r 2  90 03                bcc     L3E5C
001AF7r 2               L3E59:
001AF7r 2  20 rr rr             jsr     OUTOFRNG
001AFAr 2               L3E5C:
001AFAr 2  20 rr rr             jsr     INT
001AFDr 2  A5 0D                lda     CHARAC
001AFFr 2  18                   clc
001B00r 2  69 81                adc     #$81
001B02r 2  F0 F3                beq     L3E59
001B04r 2  38                   sec
001B05r 2  E9 01                sbc     #$01
001B07r 2  48                   pha
001B08r 2  A2 05                ldx     #BYTES_FP
001B0Ar 2               L3E6C:
001B0Ar 2  B5 A8                lda     ARG,x
001B0Cr 2  B4 A0                ldy     FAC,x
001B0Er 2  95 A0                sta     FAC,x
001B10r 2  94 A8                sty     ARG,x
001B12r 2  CA                   dex
001B13r 2  10 F5                bpl     L3E6C
001B15r 2  A5 95                lda     ARGEXTENSION
001B17r 2  85 AF                sta     FACEXTENSION
001B19r 2  20 rr rr             jsr     FSUBT
001B1Cr 2  20 rr rr             jsr     NEGOP
001B1Fr 2  A9 rr                lda     #<POLY_EXP
001B21r 2  A0 rr                ldy     #>POLY_EXP
001B23r 2  20 rr rr             jsr     POLYNOMIAL
001B26r 2  A9 00                lda     #$00
001B28r 2  85 AE                sta     SGNCPR
001B2Ar 2  68                   pla
001B2Br 2  20 rr rr             jsr     ADD_EXPONENTS1
001B2Er 2  60                   rts
001B2Fr 2               
001B2Fr 2               ; ----------------------------------------------------------------------------
001B2Fr 2               ; ODD POLYNOMIAL SUBROUTINE
001B2Fr 2               ;
001B2Fr 2               ; F(X) = X * P(X^2)
001B2Fr 2               ;
001B2Fr 2               ; WHERE:  X IS VALUE IN FAC
001B2Fr 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001B2Fr 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001B2Fr 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001B2Fr 2               ;
001B2Fr 2               ; P(X^2) COMPUTED USING NORMAL POLYNOMIAL SUBROUTINE
001B2Fr 2               ; ----------------------------------------------------------------------------
001B2Fr 2               POLYNOMIAL_ODD:
001B2Fr 2  85 B0                sta     STRNG2
001B31r 2  84 B1                sty     STRNG2+1
001B33r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001B36r 2  A9 96                lda     #TEMP1X
001B38r 2  20 rr rr             jsr     FMULT
001B3Br 2  20 rr rr             jsr     SERMAIN
001B3Er 2  A9 96                lda     #TEMP1X
001B40r 2  A0 00                ldy     #$00
001B42r 2  4C rr rr             jmp     FMULT
001B45r 2               
001B45r 2               ; ----------------------------------------------------------------------------
001B45r 2               ; NORMAL POLYNOMIAL SUBROUTINE
001B45r 2               ;
001B45r 2               ; P(X) = C(0)*X^N + C(1)*X^(N-1) + ... + C(N)
001B45r 2               ;
001B45r 2               ; WHERE:  X IS VALUE IN FAC
001B45r 2               ;	Y,A POINTS AT COEFFICIENT TABLE
001B45r 2               ;	FIRST BYTE OF COEFF. TABLE IS N
001B45r 2               ;	COEFFICIENTS FOLLOW, HIGHEST POWER FIRST
001B45r 2               ; ----------------------------------------------------------------------------
001B45r 2               POLYNOMIAL:
001B45r 2  85 B0                sta     STRNG2
001B47r 2  84 B1                sty     STRNG2+1
001B49r 2               SERMAIN:
001B49r 2  20 rr rr             jsr     STORE_FAC_IN_TEMP2_ROUNDED
001B4Cr 2  B1 B0                lda     (STRNG2),y
001B4Er 2  85 A6                sta     SERLEN
001B50r 2  A4 B0                ldy     STRNG2
001B52r 2  C8                   iny
001B53r 2  98                   tya
001B54r 2  D0 02                bne     L3EBA
001B56r 2  E6 B1                inc     STRNG2+1
001B58r 2               L3EBA:
001B58r 2  85 B0                sta     STRNG2
001B5Ar 2  A4 B1                ldy     STRNG2+1
001B5Cr 2               L3EBE:
001B5Cr 2  20 rr rr             jsr     FMULT
001B5Fr 2  A5 B0                lda     STRNG2
001B61r 2  A4 B1                ldy     STRNG2+1
001B63r 2  18                   clc
001B64r 2  69 05                adc     #BYTES_FP
001B66r 2  90 01                bcc     L3ECB
001B68r 2  C8                   iny
001B69r 2               L3ECB:
001B69r 2  85 B0                sta     STRNG2
001B6Br 2  84 B1                sty     STRNG2+1
001B6Dr 2  20 rr rr             jsr     FADD
001B70r 2  A9 9B                lda     #TEMP2
001B72r 2  A0 00                ldy     #$00
001B74r 2  C6 A6                dec     SERLEN
001B76r 2  D0 E4                bne     L3EBE
001B78r 2               RTS19:
001B78r 2  60                   rts
001B79r 2               
001B79r 1               .include "chrget.s"
001B79r 2               .segment "CHRGET"
000000r 2               RAMSTART1:
000000r 2               GENERIC_CHRGET:
000000r 2  E6 B9                inc     TXTPTR
000002r 2  D0 02                bne     GENERIC_CHRGOT
000004r 2  E6 BA                inc     TXTPTR+1
000006r 2               GENERIC_CHRGOT:
000006r 2               GENERIC_TXTPTR = GENERIC_CHRGOT + 1
000006r 2  AD 60 EA             lda     $EA60
000009r 2               .ifdef KBD
000009r 2                       jsr     LF430
000009r 2               .endif
000009r 2  C9 3A                cmp     #$3A
00000Br 2  B0 0A                bcs     L4058
00000Dr 2               GENERIC_CHRGOT2:
00000Dr 2  C9 20                cmp     #$20
00000Fr 2  F0 EF                beq     GENERIC_CHRGET
000011r 2  38                   sec
000012r 2  E9 30                sbc     #$30
000014r 2  38                   sec
000015r 2  E9 D0                sbc     #$D0
000017r 2               L4058:
000017r 2  60                   rts
000018r 2               
000018r 1               .include "rnd.s"
000018r 2               .segment "CODE"
001B79r 2               
001B79r 2               ; ----------------------------------------------------------------------------
001B79r 2               ; "RND" FUNCTION
001B79r 2               ; ----------------------------------------------------------------------------
001B79r 2               
001B79r 2               .ifdef KBD
001B79r 2               RND:
001B79r 2                       ldx     #$10
001B79r 2                       jsr     SIGN
001B79r 2                       beq     LFC26
001B79r 2                       bmi     LFC10
001B79r 2                       lda     RNDSEED
001B79r 2                       ldy     RNDSEED+1
001B79r 2               LFBFA:
001B79r 2                       sta     FAC+2
001B79r 2                       sty     FAC+1
001B79r 2               LFBFE:
001B79r 2                       asl     a
001B79r 2                       asl     a
001B79r 2                       eor     FAC+2
001B79r 2                       asl     a
001B79r 2                       eor     FAC+1
001B79r 2                       asl     a
001B79r 2                       asl     a
001B79r 2                       asl     a
001B79r 2                       asl     a
001B79r 2                       eor     FAC+1
001B79r 2                       asl     a
001B79r 2                       rol     FAC+2
001B79r 2                       rol     FAC+1
001B79r 2               LFC10:
001B79r 2                       lda     FAC+2
001B79r 2                       dex
001B79r 2                       bne     LFBFE
001B79r 2                       sta     RNDSEED
001B79r 2                       sta     FAC+3
001B79r 2                       lda     FAC+1
001B79r 2                       sta     RNDSEED+1
001B79r 2                       lda     #$80
001B79r 2                       sta     FAC
001B79r 2                       stx     FACSIGN
001B79r 2                       jmp     NORMALIZE_FAC2
001B79r 2               LFC26:
001B79r 2                       ldy     $03CA
001B79r 2                       lda     $03C7
001B79r 2                       ora     #$01
001B79r 2               GOMOVMF:
001B79r 2                       bne     LFBFA
001B79r 2                       .byte   $F0
001B79r 2               .else
001B79r 2               ; <<< THESE ARE MISSING ONE BYTE FOR FP VALUES >>>
001B79r 2               ; (non CONFIG_SMALL)
001B79r 2               CONRND1:
001B79r 2  98 35 44 7A          .byte   $98,$35,$44,$7A
001B7Dr 2               CONRND2:
001B7Dr 2  68 28 B1 46          .byte   $68,$28,$B1,$46
001B81r 2               RND:
001B81r 2  20 rr rr             jsr     SIGN
001B84r 2               .ifdef CONFIG_CBM_ALL
001B84r 2                       bmi     L3F01
001B84r 2                       bne     LDF63
001B84r 2                       lda     ENTROPY
001B84r 2                       sta     FAC+1
001B84r 2                       lda     ENTROPY+4
001B84r 2                       sta     FAC+2
001B84r 2                       lda     ENTROPY+1
001B84r 2                       sta     FAC+3
001B84r 2                       lda     ENTROPY+5
001B84r 2                       sta     FAC+4
001B84r 2                       jmp     LDF88
001B84r 2               LDF63:
001B84r 2               .else
001B84r 2  AA                   tax
001B85r 2  30 18                bmi     L3F01
001B87r 2               .endif
001B87r 2  A9 CA                lda     #<RNDSEED
001B89r 2  A0 00                ldy     #>RNDSEED
001B8Br 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001B8Er 2               .ifndef CONFIG_CBM_ALL
001B8Er 2  8A                   txa
001B8Fr 2  F0 E7                beq     RTS19
001B91r 2               .endif
001B91r 2  A9 rr                lda     #<CONRND1
001B93r 2  A0 rr                ldy     #>CONRND1
001B95r 2  20 rr rr             jsr     FMULT
001B98r 2  A9 rr                lda     #<CONRND2
001B9Ar 2  A0 rr                ldy     #>CONRND2
001B9Cr 2  20 rr rr             jsr     FADD
001B9Fr 2               L3F01:
001B9Fr 2  A6 A4                ldx     FAC_LAST
001BA1r 2  A5 A1                lda     FAC+1
001BA3r 2  85 A4                sta     FAC_LAST
001BA5r 2  86 A1                stx     FAC+1
001BA7r 2               .ifdef CONFIG_CBM_ALL
001BA7r 2                       ldx     FAC+2
001BA7r 2                       lda     FAC+3
001BA7r 2                       sta     FAC+2
001BA7r 2                       stx     FAC+3
001BA7r 2               LDF88:
001BA7r 2               .endif
001BA7r 2  A9 00                lda     #$00
001BA9r 2  85 A5                sta     FACSIGN
001BABr 2  A5 A0                lda     FAC
001BADr 2  85 AF                sta     FACEXTENSION
001BAFr 2  A9 80                lda     #$80
001BB1r 2  85 A0                sta     FAC
001BB3r 2  20 rr rr             jsr     NORMALIZE_FAC2
001BB6r 2  A2 CA                ldx     #<RNDSEED
001BB8r 2  A0 00                ldy     #>RNDSEED
001BBAr 2               GOMOVMF:
001BBAr 2  4C rr rr             jmp     STORE_FAC_AT_YX_ROUNDED
001BBDr 2               .endif
001BBDr 2               
001BBDr 2               .segment "CHRGET"
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               ; INITIAL VALUE FOR RANDOM NUMBER, ALSO COPIED
000018r 2               ; IN ALONG WITH CHRGET, BUT ERRONEOUSLY:
000018r 2               ; <<< THE LAST BYTE IS NOT COPIED >>>
000018r 2               ; (on all non-CONFIG_SMALL)
000018r 2               ; ----------------------------------------------------------------------------
000018r 2               GENERIC_RNDSEED:
000018r 2               .ifndef KBD
000018r 2               ; random number seed
000018r 2                 .ifdef CONFIG_SMALL
000018r 2                       .byte   $80,$4F,$C7,$52
000018r 2                 .else
000018r 2                   .ifdef CONFIG_11
000018r 2  80 4F C7 52          .byte   $80,$4F,$C7,$52,$58
00001Cr 2  58           
00001Dr 2                   .else
00001Dr 2                       .byte   $80,$4F,$C7,$52,$59
00001Dr 2                   .endif
00001Dr 2                 .endif
00001Dr 2               .endif
00001Dr 2               GENERIC_CHRGET_END:
00001Dr 2               
00001Dr 1               .include "trig.s"
00001Dr 2               .segment "CODE"
001BBDr 2               
001BBDr 2               .ifndef SYM1
001BBDr 2               SIN_COS_TAN_ATN:
001BBDr 2               ; ----------------------------------------------------------------------------
001BBDr 2               ; "COS" FUNCTION
001BBDr 2               ; ----------------------------------------------------------------------------
001BBDr 2               COS:
001BBDr 2  A9 rr                lda     #<CON_PI_HALF
001BBFr 2  A0 rr                ldy     #>CON_PI_HALF
001BC1r 2  20 rr rr             jsr     FADD
001BC4r 2               
001BC4r 2               ; ----------------------------------------------------------------------------
001BC4r 2               ; "SIN" FUNCTION
001BC4r 2               ; ----------------------------------------------------------------------------
001BC4r 2               SIN:
001BC4r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001BC7r 2  A9 rr                lda     #<CON_PI_DOUB
001BC9r 2  A0 rr                ldy     #>CON_PI_DOUB
001BCBr 2  A6 AD                ldx     ARGSIGN
001BCDr 2  20 rr rr             jsr     DIV
001BD0r 2  20 rr rr             jsr     COPY_FAC_TO_ARG_ROUNDED
001BD3r 2  20 rr rr             jsr     INT
001BD6r 2  A9 00                lda     #$00
001BD8r 2  85 AE                sta     STRNG1
001BDAr 2  20 rr rr             jsr     FSUBT
001BDDr 2               ; ----------------------------------------------------------------------------
001BDDr 2               ; (FAC) = ANGLE AS A FRACTION OF A FULL CIRCLE
001BDDr 2               ;
001BDDr 2               ; NOW FOLD THE RANGE INTO A QUARTER CIRCLE
001BDDr 2               ;
001BDDr 2               ; <<< THERE ARE MUCH SIMPLER WAYS TO DO THIS >>>
001BDDr 2               ; ----------------------------------------------------------------------------
001BDDr 2  A9 rr                lda     #<QUARTER
001BDFr 2  A0 rr                ldy     #>QUARTER
001BE1r 2  20 rr rr             jsr     FSUB
001BE4r 2  A5 A5                lda     FACSIGN
001BE6r 2  48                   pha
001BE7r 2  10 0D                bpl     SIN1
001BE9r 2  20 rr rr             jsr     FADDH
001BECr 2  A5 A5                lda     FACSIGN
001BEEr 2  30 09                bmi     L3F5B
001BF0r 2  A5 16                lda     CPRMASK
001BF2r 2  49 FF                eor     #$FF
001BF4r 2  85 16                sta     CPRMASK
001BF6r 2               ; ----------------------------------------------------------------------------
001BF6r 2               ; IF FALL THRU, RANGE IS 0...1/2
001BF6r 2               ; IF BRANCH HERE, RANGE IS 0...1/4
001BF6r 2               ; ----------------------------------------------------------------------------
001BF6r 2               SIN1:
001BF6r 2  20 rr rr             jsr     NEGOP
001BF9r 2               ; ----------------------------------------------------------------------------
001BF9r 2               ; IF FALL THRU, RANGE IS -1/2...0
001BF9r 2               ; IF BRANCH HERE, RANGE IS -1/4...0
001BF9r 2               ; ----------------------------------------------------------------------------
001BF9r 2               L3F5B:
001BF9r 2  A9 rr                lda     #<QUARTER
001BFBr 2  A0 rr                ldy     #>QUARTER
001BFDr 2  20 rr rr             jsr     FADD
001C00r 2  68                   pla
001C01r 2  10 03                bpl     L3F68
001C03r 2  20 rr rr             jsr     NEGOP
001C06r 2               L3F68:
001C06r 2  A9 rr                lda     #<POLY_SIN
001C08r 2  A0 rr                ldy     #>POLY_SIN
001C0Ar 2  4C rr rr             jmp     POLYNOMIAL_ODD
001C0Dr 2               
001C0Dr 2               ; ----------------------------------------------------------------------------
001C0Dr 2               ; "TAN" FUNCTION
001C0Dr 2               ;
001C0Dr 2               ; COMPUTE TAN(X) = SIN(X) / COS(X)
001C0Dr 2               ; ----------------------------------------------------------------------------
001C0Dr 2               TAN:
001C0Dr 2  20 rr rr             jsr     STORE_FAC_IN_TEMP1_ROUNDED
001C10r 2  A9 00                lda     #$00
001C12r 2  85 16                sta     CPRMASK
001C14r 2  20 rr rr             jsr     SIN
001C17r 2  A2 8D                ldx     #TEMP3
001C19r 2  A0 00                ldy     #$00
001C1Br 2  20 rr rr             jsr     GOMOVMF
001C1Er 2  A9 96                lda     #TEMP1+(5-BYTES_FP)
001C20r 2  A0 00                ldy     #$00
001C22r 2  20 rr rr             jsr     LOAD_FAC_FROM_YA
001C25r 2  A9 00                lda     #$00
001C27r 2  85 A5                sta     FACSIGN
001C29r 2  A5 16                lda     CPRMASK
001C2Br 2  20 rr rr             jsr     TAN1
001C2Er 2  A9 8D                lda     #TEMP3
001C30r 2  A0 00                ldy     #$00
001C32r 2  4C rr rr             jmp     FDIV
001C35r 2               TAN1:
001C35r 2  48                   pha
001C36r 2  4C rr rr             jmp     SIN1
001C39r 2               
001C39r 2               ; ----------------------------------------------------------------------------
001C39r 2               .ifdef CONFIG_SMALL
001C39r 2               CON_PI_HALF:
001C39r 2                       .byte   $81,$49,$0F,$DB
001C39r 2               CON_PI_DOUB:
001C39r 2                       .byte   $83,$49,$0F,$DB
001C39r 2               QUARTER:
001C39r 2                       .byte   $7F,$00,$00,$00
001C39r 2               POLY_SIN:
001C39r 2                       .byte   $04,$86,$1E,$D7,$FB,$87,$99,$26
001C39r 2                       .byte   $65,$87,$23,$34,$58,$86,$A5,$5D
001C39r 2                       .byte   $E1,$83,$49,$0F,$DB
001C39r 2               .else
001C39r 2               CON_PI_HALF:
001C39r 2  81 49 0F DA          .byte   $81,$49,$0F,$DA,$A2
001C3Dr 2  A2           
001C3Er 2               CON_PI_DOUB:
001C3Er 2  83 49 0F DA          .byte   $83,$49,$0F,$DA,$A2
001C42r 2  A2           
001C43r 2               QUARTER:
001C43r 2  7F 00 00 00          .byte   $7F,$00,$00,$00,$00
001C47r 2  00           
001C48r 2               POLY_SIN:
001C48r 2  05 84 E6 1A          .byte   $05,$84,$E6,$1A,$2D,$1B,$86,$28
001C4Cr 2  2D 1B 86 28  
001C50r 2  07 FB F8 87          .byte   $07,$FB,$F8,$87,$99,$68,$89,$01
001C54r 2  99 68 89 01  
001C58r 2  87 23 35 DF          .byte   $87,$23,$35,$DF,$E1,$86,$A5,$5D
001C5Cr 2  E1 86 A5 5D  
001C60r 2  E7 28 83 49          .byte   $E7,$28,$83,$49,$0F,$DA,$A2
001C64r 2  0F DA A2     
001C67r 2                 .ifndef CONFIG_11
001C67r 2               ; no easter egg text before BASIC 1.1
001C67r 2                 .elseif !.def(CONFIG_2A)
001C67r 2               ; ASCII encoded easter egg
001C67r 2               MICROSOFT:
001C67r 2  A6 D3 C1 C8          .byte   $A6,$D3,$C1,$C8,$D4,$C8,$D5,$C4
001C6Br 2  D4 C8 D5 C4  
001C6Fr 2  CE CA                .byte   $CE,$CA
001C71r 2                 .else
001C71r 2               ; PET encoded easter egg text since CBM2
001C71r 2               MICROSOFT:
001C71r 2                       .byte   $A1,$54,$46,$8F,$13,$8F,$52,$43
001C71r 2                       .byte   $89,$CD
001C71r 2                 .endif
001C71r 2               .endif
001C71r 2               
001C71r 2               .ifndef AIM65
001C71r 2               ; ----------------------------------------------------------------------------
001C71r 2               ; "ATN" FUNCTION
001C71r 2               ; ----------------------------------------------------------------------------
001C71r 2               ATN:
001C71r 2  A5 A5                lda     FACSIGN
001C73r 2  48                   pha
001C74r 2  10 03                bpl     L3FDB
001C76r 2  20 rr rr             jsr     NEGOP
001C79r 2               L3FDB:
001C79r 2  A5 A0                lda     FAC
001C7Br 2  48                   pha
001C7Cr 2  C9 81                cmp     #$81
001C7Er 2  90 07                bcc     L3FE9
001C80r 2  A9 rr                lda     #<CON_ONE
001C82r 2  A0 rr                ldy     #>CON_ONE
001C84r 2  20 rr rr             jsr     FDIV
001C87r 2               ; ----------------------------------------------------------------------------
001C87r 2               ; 0 <= X <= 1
001C87r 2               ; 0 <= ATN(X) <= PI/8
001C87r 2               ; ----------------------------------------------------------------------------
001C87r 2               L3FE9:
001C87r 2  A9 rr                lda     #<POLY_ATN
001C89r 2  A0 rr                ldy     #>POLY_ATN
001C8Br 2  20 rr rr             jsr     POLYNOMIAL_ODD
001C8Er 2  68                   pla
001C8Fr 2  C9 81                cmp     #$81
001C91r 2  90 07                bcc     L3FFC
001C93r 2  A9 rr                lda     #<CON_PI_HALF
001C95r 2  A0 rr                ldy     #>CON_PI_HALF
001C97r 2  20 rr rr             jsr     FSUB
001C9Ar 2               L3FFC:
001C9Ar 2  68                   pla
001C9Br 2  10 03                bpl     L4002
001C9Dr 2  4C rr rr             jmp     NEGOP
001CA0r 2               L4002:
001CA0r 2  60                   rts
001CA1r 2               
001CA1r 2               ; ----------------------------------------------------------------------------
001CA1r 2               POLY_ATN:
001CA1r 2               .ifdef CONFIG_SMALL
001CA1r 2                       .byte   $08
001CA1r 2               		.byte	$78,$3A,$C5,$37
001CA1r 2               		.byte	$7B,$83,$A2,$5C
001CA1r 2               		.byte	$7C,$2E,$DD,$4D
001CA1r 2               		.byte	$7D,$99,$B0,$1E
001CA1r 2               		.byte	$7D,$59,$ED,$24
001CA1r 2               		.byte	$7E,$91,$72,$00
001CA1r 2               		.byte	$7E,$4C,$B9,$73
001CA1r 2               		.byte	$7F,$AA,$AA,$53
001CA1r 2               		.byte	$81,$00,$00,$00
001CA1r 2               .else
001CA1r 2  0B                   .byte   $0B
001CA2r 2  76 B3 83 BD  		.byte	$76,$B3,$83,$BD,$D3
001CA6r 2  D3           
001CA7r 2  79 1E F4 A6  		.byte	$79,$1E,$F4,$A6,$F5
001CABr 2  F5           
001CACr 2  7B 83 FC B0  		.byte	$7B,$83,$FC,$B0,$10
001CB0r 2  10           
001CB1r 2  7C 0C 1F 67          .byte   $7C,$0C,$1F,$67,$CA
001CB5r 2  CA           
001CB6r 2  7C DE 53 CB  		.byte	$7C,$DE,$53,$CB,$C1
001CBAr 2  C1           
001CBBr 2  7D 14 64 70  		.byte	$7D,$14,$64,$70,$4C
001CBFr 2  4C           
001CC0r 2  7D B7 EA 51  		.byte	$7D,$B7,$EA,$51,$7A
001CC4r 2  7A           
001CC5r 2  7D 63 30 88  		.byte	$7D,$63,$30,$88,$7E
001CC9r 2  7E           
001CCAr 2  7E 92 44 99  		.byte	$7E,$92,$44,$99,$3A
001CCEr 2  3A           
001CCFr 2  7E 4C CC 91  		.byte	$7E,$4C,$CC,$91,$C7
001CD3r 2  C7           
001CD4r 2  7F AA AA AA  		.byte	$7F,$AA,$AA,$AA,$13
001CD8r 2  13           
001CD9r 2  81 00 00 00          .byte   $81,$00,$00,$00,$00
001CDDr 2  00           
001CDEr 2               .endif
001CDEr 2               
001CDEr 2               .if .def(CONFIG_11A) && (!.def(CONFIG_2))
001CDEr 2               		.byte	$00 ; XXX
001CDEr 2               .endif
001CDEr 2               .endif
001CDEr 2               .endif
001CDEr 2               
001CDEr 1               .include "init.s"
001CDEr 2               .segment "INIT"
000000r 2               
000000r 2               .ifdef KBD
000000r 2               FNDLIN2:
000000r 2                       php
000000r 2                       jmp     FNDLIN
000000r 2               .endif
000000r 2               
000000r 2               ; ----------------------------------------------------------------------------
000000r 2               PR_WRITTEN_BY:
000000r 2               .ifndef KBD
000000r 2                 .ifndef CONFIG_CBM_ALL
000000r 2                   .ifndef AIM65
000000r 2                     .ifndef SYM1
000000r 2  A9 rr                lda     #<QT_WRITTEN_BY
000002r 2  A0 rr                ldy     #>QT_WRITTEN_BY
000004r 2  20 rr rr             jsr     STROUT
000007r 2                     .endif
000007r 2                   .endif
000007r 2                 .endif
000007r 2               .endif
000007r 2               COLD_START:
000007r 2               .ifdef SYM1
000007r 2                       jsr     ACCESS
000007r 2               .endif
000007r 2               .ifdef KBD
000007r 2                       lda     #<LFD81
000007r 2                       sta     $03A0
000007r 2                       lda     #>LFD81
000007r 2                       sta     $03A1
000007r 2                       lda     #$20
000007r 2                       sta     $0480
000007r 2                       lda     $0352
000007r 2                       sta     $04
000007r 2                       lda     $0353
000007r 2                       sta     $05
000007r 2               .else
000007r 2                 .ifndef CBM2
000007r 2  A2 FF                ldx     #$FF
000009r 2  86 79                stx     CURLIN+1
00000Br 2                 .endif
00000Br 2                 .ifdef CONFIG_NO_INPUTBUFFER_ZP
00000Br 2  A2 FB                ldx     #$FB
00000Dr 2                 .elseif .def(AIM65)
00000Dr 2                       ldx     #$FE
00000Dr 2                 .endif
00000Dr 2  9A                   txs
00000Er 2                 .ifndef CONFIG_CBM_ALL
00000Er 2  A9 rr                lda     #<COLD_START
000010r 2  A0 rr                ldy     #>COLD_START
000012r 2  85 01                sta     GORESTART+1
000014r 2  84 02                sty     GORESTART+2
000016r 2                   .ifndef AIM65
000016r 2  85 04                sta     GOSTROUT+1
000018r 2  84 05                sty     GOSTROUT+2
00001Ar 2  A9 rr                lda     #<AYINT
00001Cr 2  A0 rr                ldy     #>AYINT
00001Er 2  85 06                sta     GOAYINT
000020r 2  84 07                sty     GOAYINT+1
000022r 2  A9 rr                lda     #<GIVAYF
000024r 2  A0 rr                ldy     #>GIVAYF
000026r 2  85 08                sta     GOGIVEAYF
000028r 2  84 09                sty     GOGIVEAYF+1
00002Ar 2                   .endif
00002Ar 2                 .endif
00002Ar 2  A9 4C                lda     #$4C
00002Cr 2                 .ifdef CONFIG_CBM_ALL
00002Cr 2                       sta     JMPADRS
00002Cr 2                 .endif
00002Cr 2  85 00                sta     GORESTART
00002Er 2                 .ifdef AIM65
00002Er 2                       sta     JMPADRS
00002Er 2                       sta     ATN
00002Er 2                       sta     GOSTROUT
00002Er 2                 .else
00002Er 2                 .ifndef CONFIG_CBM_ALL
00002Er 2  85 03                sta     GOSTROUT
000030r 2  85 93                sta     JMPADRS
000032r 2                 .endif
000032r 2                 .ifdef SYM1
000032r 2                       sta     USR1
000032r 2                       sta     USR3
000032r 2                       sta     USR2
000032r 2                 .endif
000032r 2                 .if (!.def(CONFIG_RAM)) && (!.def(CONFIG_CBM_ALL))
000032r 2  85 0A                sta     USR
000034r 2                 .endif
000034r 2                 .endif
000034r 2               
000034r 2                 .ifndef CONFIG_RAM
000034r 2                   .ifdef APPLE
000034r 2  A9 rr                  lda     #<USR_FUNC
000036r 2  A0 rr                  ldy     #>USR_FUNC
000038r 2                   .else
000038r 2                         lda     #<IQERR
000038r 2                         ldy     #>IQERR
000038r 2                   .endif
000038r 2                   .ifdef AIM65
000038r 2                         sta     ATN+1
000038r 2                         sty     ATN+2
000038r 2                         sta     GOSTROUT+1
000038r 2                         sty     GOSTROUT+2
000038r 2                   .else
000038r 2  85 0B                  sta     USR+1
00003Ar 2  84 0C                  sty     USR+2
00003Cr 2                     .ifdef SYM1
00003Cr 2                         sta     USR1+1
00003Cr 2                         sty     USR1+2
00003Cr 2                         lda     #<DUMPT
00003Cr 2                         ldy     #>DUMPT
00003Cr 2                         sta     USR2+1
00003Cr 2                         sty     USR2+2
00003Cr 2                         lda     #<L8C78
00003Cr 2                         ldy     #>L8C78
00003Cr 2                         sta     USR3+1
00003Cr 2                         sty     USR3+2
00003Cr 2                     .endif
00003Cr 2                   .endif
00003Cr 2                 .endif
00003Cr 2                 .ifndef CBM1
00003Cr 2  A9 28                lda     #WIDTH
00003Er 2  85 51                sta     Z17
000040r 2  A9 0E                lda     #WIDTH2
000042r 2  85 52                sta     Z18
000044r 2                 .endif
000044r 2                 .ifdef EATER
000044r 2                       jsr     LCDINIT
000044r 2                 .endif
000044r 2               .endif
000044r 2               
000044r 2               ; All non-CONFIG_SMALL versions of BASIC have
000044r 2               ; the same bug here: While the number of bytes
000044r 2               ; to be copied is correct for CONFIG_SMALL,
000044r 2               ; it is one byte short on non-CONFIG_SMALL:
000044r 2               ; It seems the "ldx" value below has been
000044r 2               ; hardcoded. So on these configurations,
000044r 2               ; the last byte of GENERIC_RNDSEED, which
000044r 2               ; is 5 bytes instead of 4, does not get copied -
000044r 2               ; which is nothing major, because it is just
000044r 2               ; the least significant 8 bits of the mantissa
000044r 2               ; of the random number seed.
000044r 2               ; KBD added three bytes to CHRGET and removed
000044r 2               ; the random number seed, but only adjusted
000044r 2               ; the number of bytes by adding 3 - this
000044r 2               ; copies four bytes too many, which is no
000044r 2               ; problem.
000044r 2               .ifdef CONFIG_SMALL
000044r 2                 .ifdef KBD
000044r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET+4
000044r 2                 .else
000044r 2                       ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET
000044r 2                 .endif
000044r 2               .else
000044r 2  A2 1C                ldx     #GENERIC_CHRGET_END-GENERIC_CHRGET-1 ; XXX
000046r 2               .endif
000046r 2               L4098:
000046r 2  BD rr rr             lda     GENERIC_CHRGET-1,x
000049r 2  95 B1                sta     CHRGET-1,x
00004Br 2  CA                   dex
00004Cr 2  D0 F8                bne     L4098
00004Er 2               .ifdef CONFIG_2
00004Er 2                       lda     #$03
00004Er 2                       sta     DSCLEN
00004Er 2               .endif
00004Er 2               .ifndef KBD
00004Er 2  8A                   txa
00004Fr 2  85 A7                sta     SHIFTSIGNEXT
000051r 2                 .ifdef CONFIG_CBM_ALL
000051r 2                       sta     CURDVC
000051r 2                 .endif
000051r 2  85 57                sta     LASTPT+1
000053r 2                 .ifndef AIM65
000053r 2                 .if .defined(CONFIG_NULL) || .defined(CONFIG_PRINTNULLS)
000053r 2                       sta     Z15
000053r 2                 .endif
000053r 2                 .endif
000053r 2                 .ifndef CONFIG_11
000053r 2                       sta     POSX
000053r 2                 .endif
000053r 2  48                   pha
000054r 2  85 17                sta     Z14
000056r 2                 .ifndef CBM2
000056r 2                  .ifndef AIM65
000056r 2                  .ifndef SYM1
000056r 2                   .ifndef MICROTAN
000056r 2  A9 03                lda     #$03
000058r 2  85 92                sta     DSCLEN
00005Ar 2                   .endif
00005Ar 2                  .endif
00005Ar 2                  .endif
00005Ar 2                   .ifndef CONFIG_11
00005Ar 2                       lda     #$2C
00005Ar 2                       sta     LINNUM+1
00005Ar 2                   .endif
00005Ar 2  20 rr rr             jsr     CRDO
00005Dr 2                 .endif
00005Dr 2                 .ifdef CBM2
00005Dr 2                       inx
00005Dr 2                       stx     INPUTBUFFER-3
00005Dr 2                       stx     INPUTBUFFER-4
00005Dr 2                 .endif
00005Dr 2                 .ifdef APPLE
00005Dr 2  A9 01                lda     #$01
00005Fr 2  8D FD 01             sta     INPUTBUFFER-3
000062r 2  8D FC 01             sta     INPUTBUFFER-4
000065r 2                 .endif
000065r 2  A2 58                ldx     #TEMPST
000067r 2  86 55                stx     TEMPPT
000069r 2               .ifndef CONFIG_CBM_ALL
000069r 2  A9 rr                lda     #<QT_MEMORY_SIZE
00006Br 2  A0 rr                ldy     #>QT_MEMORY_SIZE
00006Dr 2  20 rr rr             jsr     STROUT
000070r 2                 .ifdef APPLE
000070r 2  20 rr rr             jsr     INLINX
000073r 2                 .else
000073r 2                       jsr     NXIN
000073r 2                 .endif
000073r 2  86 B9                stx     TXTPTR
000075r 2  84 BA                sty     TXTPTR+1
000077r 2  20 B2 00             jsr     CHRGET
00007Ar 2                 .ifndef AIM65
00007Ar 2                   .ifndef SYM1
00007Ar 2  C9 41                cmp     #$41
00007Cr 2  F0 82                beq     PR_WRITTEN_BY
00007Er 2                   .endif
00007Er 2                 .endif
00007Er 2  A8                   tay
00007Fr 2  D0 21                bne     L40EE
000081r 2               .endif
000081r 2               .ifndef CBM2
000081r 2  A9 00                lda     #<RAMSTART2
000083r 2               .endif
000083r 2  A0 2A                ldy     #>RAMSTART2
000085r 2               .ifdef CONFIG_2
000085r 2                       sta     TXTTAB
000085r 2                       sty     TXTTAB+1
000085r 2               .endif
000085r 2  85 53                sta     LINNUM
000087r 2  84 54                sty     LINNUM+1
000089r 2               .ifdef CBM2
000089r 2               		tay
000089r 2               .else
000089r 2  A0 00                ldy     #$00
00008Br 2               .endif
00008Br 2               L40D7:
00008Br 2  E6 53                inc     LINNUM
00008Dr 2  D0 02                bne     L40DD
00008Fr 2  E6 54                inc     LINNUM+1
000091r 2               .ifdef CBM1
000091r 2               ; CBM: hard RAM top limit is $8000
000091r 2                       lda     LINNUM+1
000091r 2                       cmp     #$80
000091r 2                       beq     L40FA
000091r 2               .endif
000091r 2               .ifdef CBM2
000091r 2               ; optimized version of the CBM1 code
000091r 2                       bmi     L40FA
000091r 2               .endif
000091r 2               .if .def(AIM65)
000091r 2               ; AIM65: hard RAM top limit is $A000
000091r 2                       lda     LINNUM+1
000091r 2                       cmp     #$A0
000091r 2                       beq     L40FA
000091r 2               .endif
000091r 2               L40DD:
000091r 2               .ifdef CONFIG_2
000091r 2                       lda     #$55 ; 01010101 / 10101010
000091r 2               .else
000091r 2  A9 92                lda     #$92 ; 10010010 / 00100100
000093r 2               .endif
000093r 2  91 53                sta     (LINNUM),y
000095r 2  D1 53                cmp     (LINNUM),y
000097r 2  D0 15                bne     L40FA
000099r 2  0A                   asl     a
00009Ar 2  91 53                sta     (LINNUM),y
00009Cr 2  D1 53                cmp     (LINNUM),y
00009Er 2               .ifdef CONFIG_CBM_ALL
00009Er 2                       beq     L40D7
00009Er 2               .else
00009Er 2                 .ifndef CONFIG_11
00009Er 2                       beq     L40D7; old: faster
00009Er 2                       bne     L40FA
00009Er 2                 .else
00009Er 2  D0 0E                bne     L40FA; new: slower
0000A0r 2  F0 E9                beq     L40D7
0000A2r 2                 .endif
0000A2r 2               L40EE:
0000A2r 2  20 B8 00             jsr     CHRGOT
0000A5r 2  20 rr rr             jsr     LINGET
0000A8r 2  A8                   tay
0000A9r 2  F0 03                beq     L40FA
0000ABr 2  4C rr rr             jmp     SYNERR
0000AEr 2               .endif
0000AEr 2               L40FA:
0000AEr 2  A5 53                lda     LINNUM
0000B0r 2  A4 54                ldy     LINNUM+1
0000B2r 2  85 76                sta     MEMSIZ
0000B4r 2  84 77                sty     MEMSIZ+1
0000B6r 2               .if !(.def(MICROTAN) || .def(AIM65) || .def(SYM1))
0000B6r 2  85 72                sta     FRETOP
0000B8r 2  84 73                sty     FRETOP+1
0000BAr 2               .endif
0000BAr 2               L4106:
0000BAr 2               .ifndef CONFIG_CBM_ALL
0000BAr 2                 .ifdef APPLE
0000BAr 2  A9 FF                lda     #$FF
0000BCr 2  4C rr rr             jmp     L2829
0000BFr 2  rr rr                .word	STROUT ; PATCH!
0000C1r 2  20 rr rr             jsr     NXIN
0000C4r 2                 .else
0000C4r 2                       lda     #<QT_TERMINAL_WIDTH
0000C4r 2                       ldy     #>QT_TERMINAL_WIDTH
0000C4r 2                       jsr     STROUT
0000C4r 2                       jsr     NXIN
0000C4r 2                 .endif
0000C4r 2  86 B9                stx     TXTPTR
0000C6r 2  84 BA                sty     TXTPTR+1
0000C8r 2  20 B2 00             jsr     CHRGET
0000CBr 2  A8                   tay
0000CCr 2  F0 1C                beq     L4136
0000CEr 2  20 rr rr             jsr     LINGET
0000D1r 2  A5 54                lda     LINNUM+1
0000D3r 2  D0 E5                bne     L4106
0000D5r 2  A5 53                lda     LINNUM
0000D7r 2  C9 10                cmp     #$10
0000D9r 2  90 DF                bcc     L4106
0000DBr 2               L2829:
0000DBr 2  85 51                sta     Z17
0000DDr 2               L4129:
0000DDr 2                 .ifdef AIM65
0000DDr 2                       sbc     #$0A
0000DDr 2                 .else
0000DDr 2  E9 0E                sbc     #$0E
0000DFr 2                 .endif
0000DFr 2  B0 FC                bcs     L4129
0000E1r 2  49 FF                eor     #$FF
0000E3r 2                 .ifdef AIM65
0000E3r 2                       sbc     #$08
0000E3r 2                 .else
0000E3r 2  E9 0C                sbc     #$0C
0000E5r 2                 .endif
0000E5r 2  18                   clc
0000E6r 2  65 51                adc     Z17
0000E8r 2  85 52                sta     Z18
0000EAr 2               .endif
0000EAr 2               L4136:
0000EAr 2               .ifdef CONFIG_RAM
0000EAr 2                       lda     #<QT_WANT
0000EAr 2                       ldy     #>QT_WANT
0000EAr 2                       jsr     STROUT
0000EAr 2                       jsr     NXIN
0000EAr 2                       stx     TXTPTR
0000EAr 2                       sty     TXTPTR+1
0000EAr 2                       jsr     CHRGET
0000EAr 2                       ldx     #<RAMSTART1
0000EAr 2                       ldy     #>RAMSTART1
0000EAr 2                       cmp     #'Y'
0000EAr 2                       beq     L4183
0000EAr 2                       cmp     #'A'
0000EAr 2                       beq     L4157
0000EAr 2                       cmp     #'N'
0000EAr 2                       bne     L4136
0000EAr 2               L4157:
0000EAr 2                       ldx     #<IQERR
0000EAr 2                       ldy     #>IQERR
0000EAr 2                       stx     UNFNC_ATN
0000EAr 2                       sty     UNFNC_ATN+1
0000EAr 2                       ldx     #<ATN	; overwrite starting
0000EAr 2                       ldy     #>ATN	; with ATN
0000EAr 2                       cmp     #'A'
0000EAr 2                       beq     L4183
0000EAr 2                       ldx     #<IQERR
0000EAr 2                       ldy     #>IQERR
0000EAr 2                       stx     UNFNC_COS
0000EAr 2                       sty     UNFNC_COS+1
0000EAr 2                       stx     UNFNC_TAN
0000EAr 2                       sty     UNFNC_TAN+1
0000EAr 2                       stx     UNFNC_SIN
0000EAr 2                       sty     UNFNC_SIN+1
0000EAr 2                       ldx     #<SIN_COS_TAN_ATN	; overwrite
0000EAr 2                       ldy     #>SIN_COS_TAN_ATN	; all of trig.s
0000EAr 2               L4183:
0000EAr 2               .else
0000EAr 2  A2 00                ldx     #<RAMSTART2
0000ECr 2  A0 2A                ldy     #>RAMSTART2
0000EEr 2               .endif
0000EEr 2  86 6A                stx     TXTTAB
0000F0r 2  84 6B                sty     TXTTAB+1
0000F2r 2  A0 00                ldy     #$00
0000F4r 2  98                   tya
0000F5r 2  91 6A                sta     (TXTTAB),y
0000F7r 2  E6 6A                inc     TXTTAB
0000F9r 2               .ifndef CBM2
0000F9r 2  D0 02                bne     L4192
0000FBr 2  E6 6B                inc     TXTTAB+1
0000FDr 2               L4192:
0000FDr 2               .endif
0000FDr 2               .if CONFIG_SCRTCH_ORDER = 1
0000FDr 2                       jsr     SCRTCH
0000FDr 2               .endif
0000FDr 2  A5 6A                lda     TXTTAB
0000FFr 2  A4 6B                ldy     TXTTAB+1
000101r 2  20 rr rr             jsr     REASON
000104r 2               .ifdef CBM2
000104r 2                       lda     #<QT_BASIC
000104r 2                       ldy     #>QT_BASIC
000104r 2                       jsr     STROUT
000104r 2               .else
000104r 2  20 rr rr             jsr     CRDO
000107r 2               .endif
000107r 2  A5 76                lda     MEMSIZ
000109r 2  38                   sec
00010Ar 2  E5 6A                sbc     TXTTAB
00010Cr 2  AA                   tax
00010Dr 2  A5 77                lda     MEMSIZ+1
00010Fr 2  E5 6B                sbc     TXTTAB+1
000111r 2  20 rr rr             jsr     LINPRT
000114r 2  A9 rr                lda     #<QT_BYTES_FREE
000116r 2  A0 rr                ldy     #>QT_BYTES_FREE
000118r 2  20 rr rr             jsr     STROUT
00011Br 2               .if CONFIG_SCRTCH_ORDER = 2
00011Br 2                       jsr     SCRTCH
00011Br 2               .endif
00011Br 2               .ifdef CONFIG_CBM_ALL
00011Br 2                       jmp     RESTART
00011Br 2               .elseif .def(AIM65)
00011Br 2                       lda     #<CRDO
00011Br 2                       ldy     #>CRDO
00011Br 2                       sta     GORESTART+1
00011Br 2                       sty     GORESTART+2
00011Br 2                       jmp     RESTART
00011Br 2               .else
00011Br 2  A9 rr                lda     #<STROUT
00011Dr 2  A0 rr                ldy     #>STROUT
00011Fr 2  85 04                sta     GOSTROUT+1
000121r 2  84 05                sty     GOSTROUT+2
000123r 2                 .if CONFIG_SCRTCH_ORDER = 3
000123r 2  20 rr rr              jsr     SCRTCH
000126r 2                 .endif
000126r 2  A9 rr                lda     #<RESTART
000128r 2  A0 rr                ldy     #>RESTART
00012Ar 2  85 01                sta     GORESTART+1
00012Cr 2  84 02                sty     GORESTART+2
00012Er 2  6C 01 00             jmp     (GORESTART+1)
000131r 2               .endif
000131r 2               
000131r 2                 .if .def(CONFIG_RAM) || .def(OSI)
000131r 2               ; OSI is compiled for ROM, but includes
000131r 2               ; this unused string
000131r 2               QT_WANT:
000131r 2                       .byte   "WANT SIN-COS-TAN-ATN"
000131r 2                       .byte   0
000131r 2                 .endif
000131r 2               QT_WRITTEN_BY:
000131r 2                 .ifndef CONFIG_CBM_ALL
000131r 2                 .if !(.def(AIM65) || .def(SYM1))
000131r 2                   .ifdef APPLE
000131r 2  C3 CF D0 D9  		asc80 "COPYRIGHT 1977 BY MICROSOFT CO"
000135r 2  D2 C9 C7 C8  
000139r 2  D4 A0 B1 B9  
00014Fr 2  0D 00        		.byte	CR,0
000151r 2                   .else
000151r 2                       .byte   CR,LF,$0C ; FORM FEED
000151r 2                     .ifndef CONFIG_11
000151r 2                       .byte   "WRITTEN BY RICHARD W. WEILAND."
000151r 2                     .else
000151r 2                       .byte   "WRITTEN BY WEILAND & GATES"
000151r 2                     .endif
000151r 2                       .byte   CR,LF,0
000151r 2                   .endif
000151r 2                  .endif
000151r 2               QT_MEMORY_SIZE:
000151r 2  4D 45 4D 4F          .byte   "MEMORY SIZE"
000155r 2  52 59 20 53  
000159r 2  49 5A 45     
00015Cr 2  00                   .byte   0
00015Dr 2               QT_TERMINAL_WIDTH:
00015Dr 2                   .if !(.def(AIM65) || .def(SYM1))
00015Dr 2  54 45 52 4D          .byte   "TERMINAL "
000161r 2  49 4E 41 4C  
000165r 2  20           
000166r 2                   .endif
000166r 2  57 49 44 54          .byte   "WIDTH"
00016Ar 2  48           
00016Br 2  00                   .byte   0
00016Cr 2                 .endif
00016Cr 2               QT_BYTES_FREE:
00016Cr 2  20 42 59 54          .byte   " BYTES FREE"
000170r 2  45 53 20 46  
000174r 2  52 45 45     
000177r 2                 .ifdef CBM1
000177r 2                 .elseif .def(CBM2)
000177r 2                       .byte   CR,0
000177r 2                 .elseif .def(APPLE)
000177r 2  00                   .byte   0
000178r 2                 .else
000178r 2                       .byte   CR,LF,CR,LF
000178r 2                 .endif
000178r 2               QT_BASIC:
000178r 2                 .ifdef OSI
000178r 2                       .byte   "OSI 6502 BASIC VERSION 1.0 REV 3.2"
000178r 2                 .endif
000178r 2                 .ifdef KIM
000178r 2                       .byte   "MOS TECH 6502 BASIC V1.1"
000178r 2                 .endif
000178r 2                 .ifdef MICROTAN
000178r 2                       .byte   "MICROTAN BASIC"
000178r 2                 .endif
000178r 2                 .ifdef AIM65
000178r 2                       .byte   "  AIM 65 BASIC V1.1"
000178r 2                 .endif
000178r 2                 .ifdef SYM1
000178r 2                       .byte   "BASIC V1.1"
000178r 2                 .endif
000178r 2                 .ifdef CBM1
000178r 2                       .byte   $13 ; HOME
000178r 2                       .byte   "*** COMMODORE BASIC ***"
000178r 2                       .byte   $11,$11,$11,0 ; DOWN/DOWN/DOWN
000178r 2                 .endif
000178r 2                 .ifdef CBM2
000178r 2                       .byte   "### COMMODORE BASIC ###"
000178r 2                       .byte   CR,CR,0
000178r 2                 .endif
000178r 2                 .ifdef APPLE
000178r 2  0A 0D 0A             .byte   LF,CR,LF
00017Br 2  41 50 50 4C  		.byte	"APPLE BASIC V1.1"
00017Fr 2  45 20 42 41  
000183r 2  53 49 43 20  
00018Br 2                 .endif
00018Br 2                 .ifndef CONFIG_CBM_ALL
00018Br 2  0D 0A                .byte   CR,LF
00018Dr 2                   .ifdef MICROTAN
00018Dr 2                       .byte   "(C) 1980 MICROSOFT"
00018Dr 2                   .elseif .def(AIM65)
00018Dr 2                       .byte   0
00018Dr 2                       .byte   "(C) 1978 MICROSOFT"
00018Dr 2                   .elseif .def(SYM1)
00018Dr 2                       .byte   "COPYRIGHT 1978 SYNERTEK SYSTEMS CORP."
00018Dr 2                   .else
00018Dr 2  43 4F 50 59          .byte   "COPYRIGHT 1977 BY MICROSOFT CO."
000191r 2  52 49 47 48  
000195r 2  54 20 31 39  
0001ACr 2                   .endif
0001ACr 2  0D 0A                .byte   CR,LF
0001AEr 2                     .ifndef AIM65
0001AEr 2  00                   .byte   0
0001AFr 2                     .endif
0001AFr 2                 .endif
0001AFr 2               .endif
0001AFr 2               
0001AFr 1               .include "extra.s"
0001AFr 2               .segment "EXTRA"
000000r 2               
000000r 2               .ifdef KIM
000000r 2               .include "kim_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef CONFIG_CBM1_PATCHES
000000r 2               .include "cbm1_patches.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef KBD
000000r 2               .include "kbd_extra.s"
000000r 2               .endif
000000r 2               
000000r 2               .ifdef APPLE
000000r 2               .include "apple_extra.s"
000000r 3               .segment "EXTRA"
000000r 3               
000000r 3  00 00 00             .byte   0,0,0
000003r 3               L2900:
000003r 3  20 6A FD             jsr     LFD6A
000006r 3  86 33                stx     $33
000008r 3  A2 00                ldx     #$00
00000Ar 3               L2907:
00000Ar 3  BD 00 02             lda     $0200,x
00000Dr 3  29 7F                and     #$7F
00000Fr 3  C9 0D                cmp     #$0D
000011r 3  D0 02                bne     L2912
000013r 3  A9 00                lda     #$00
000015r 3               L2912:
000015r 3  9D 00 02             sta     $0200,x
000018r 3  E8                   inx
000019r 3  D0 EF                bne     L2907
00001Br 3  A6 33                ldx     $33
00001Dr 3  60                   rts
00001Er 3               PLT:
00001Er 3  4C rr rr             jmp     L29F0
000021r 3               L291E:
000021r 3  C9 47                cmp     #$47
000023r 3  D0 03                bne     L2925
000025r 3  4C rr rr             jmp     L29E0
000028r 3               L2925:
000028r 3  C9 43                cmp     #$43
00002Ar 3  D0 02                bne     L292B
00002Cr 3  F0 5D                beq     L2988
00002Er 3               L292B:
00002Er 3  C9 50                cmp     #$50
000030r 3  F0 01                beq     L2930
000032r 3  E8                   inx
000033r 3               L2930:
000033r 3  86 33                stx     $33
000035r 3               L2932:
000035r 3  20 rr rr             jsr     FRMEVL
000038r 3  20 rr rr             jsr     ROUND_FAC
00003Br 3  20 rr rr             jsr     AYINT
00003Er 3  A5 A4                lda     FAC+4
000040r 3  A6 33                ldx     $33
000042r 3  9D 00 03             sta     $0300,x
000045r 3  C6 33                dec     $33
000047r 3  30 07                bmi     L294Dx
000049r 3  A9 2C                lda     #$2C
00004Br 3  20 rr rr     		jsr     SYNCHR
00004Er 3  10 E5                bpl     L2932
000050r 3               L294Dx:
000050r 3  A8                   tay
000051r 3  68                   pla
000052r 3  C9 43                cmp     #$43
000054r 3  D0 04                bne     L2957
000056r 3  98                   tya
000057r 3  4C 64 F8             jmp     LF864
00005Ar 3               L2957:
00005Ar 3  C9 50                cmp     #$50
00005Cr 3  D0 07                bne     L2962
00005Er 3  98                   tya
00005Fr 3  AC 01 03             ldy     $0301
000062r 3  4C 00 F8             jmp     LF800
000065r 3               L2962:
000065r 3  48                   pha
000066r 3  AD 01 03             lda     $0301
000069r 3  85 2C                sta     $2C
00006Br 3  85 2D                sta     $2D
00006Dr 3  68                   pla
00006Er 3  C9 48                cmp     #$48
000070r 3  D0 09                bne     L2978
000072r 3  AD 00 03             lda     $0300
000075r 3  AC 02 03             ldy     $0302
000078r 3  4C 19 F8             jmp     LF819
00007Br 3               L2978:
00007Br 3  C9 56                cmp     #$56
00007Dr 3  F0 03                beq     L297F
00007Fr 3  4C rr rr             jmp     SYNERR
000082r 3               L297F:
000082r 3  AC 00 03             ldy     $0300
000085r 3  AD 02 03             lda     $0302
000088r 3  4C 28 F8             jmp     LF828
00008Br 3               L2988:
00008Br 3  CA                   dex
00008Cr 3  F0 A5                beq     L2930
00008Er 3               INLINX:
00008Er 3  20 rr rr             jsr     OUTQUES
000091r 3  20 rr rr             jsr     OUTSP
000094r 3  A2 80                ldx     #$80
000096r 3  4C rr rr             jmp     INLIN1
000099r 3  00 00 00 00          .byte   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
00009Dr 3  00 00 00 00  
0000A1r 3  00 00 00 00  
0000A9r 3  00 00 00 00          .byte   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000ADr 3  00 00 00 00  
0000B1r 3  00 00 00 00  
0000B9r 3  00 00 00 00          .byte   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
0000BDr 3  00 00 00 00  
0000C1r 3  00 00 00 00  
0000C9r 3  00 00 00 00          .byte   0,0,0,0,0,0,0,0,0,0
0000CDr 3  00 00 00 00  
0000D1r 3  00 00        
0000D3r 3               USR_FUNC:
0000D3r 3  20 rr rr             jsr     L29DA
0000D6r 3  A5 A3                lda     FAC+3
0000D8r 3  85 A5                sta     FAC+5
0000DAr 3  6C A4 00             jmp     (FAC+4)
0000DDr 3               L29DA:
0000DDr 3  6C 06 00             jmp     (GOAYINT)
0000E0r 3  00                   brk
0000E1r 3  00                   brk
0000E2r 3  00                   brk
0000E3r 3               L29E0:
0000E3r 3  68                   pla
0000E4r 3  4C 40 FB             jmp     LFB40
0000E7r 3  00 00 00 00          .byte   0,0,0,0,0,0,0,0,0,0,0,0
0000EBr 3  00 00 00 00  
0000EFr 3  00 00 00 00  
0000F3r 3               L29F0:
0000F3r 3  48                   pha
0000F4r 3  A2 01                ldx     #$01
0000F6r 3  E6 B9                inc     $B9
0000F8r 3  D0 02                bne     L29F9
0000FAr 3  E6 BA                inc     $BA
0000FCr 3               L29F9:
0000FCr 3  4C rr rr             jmp     L291E
0000FFr 3  00 00 00 00          .byte   $00,$00,$00,$00,$41,$53,$21,$D2
000103r 3  41 53 21 D2  
000107r 3  02 FA 00     		.byte   $02,$FA,$00
00010Ar 3  A5 12                lda     $12
00010Cr 3  F0 03                beq     L2A0E
00010Er 3  6C 08 00             jmp     (GOGIVEAYF)
000111r 3               L2A0E:
000111r 3  20 89 F6             jsr     LF689
000114r 3  15 BC 08 10          .byte   $15,$BC,$08,$10,$52,$45,$75,$10
000118r 3  52 45 75 10  
00011Cr 3  CD 00 55 15          .byte   $CD,$00,$55,$15,$9E,$08,$10,$4C
000120r 3  9E 08 10 4C  
000124r 3  45 75 10 D4          .byte   $45,$75,$10,$D4,$00,$55,$15,$0E
000128r 3  00 55 15 0E  
00012Cr 3  08 10 89 10          .byte   $08,$10,$89,$10,$75,$15,$1C,$08
000130r 3  75 15 1C 08  
000134r 3  10 1F 10 75          .byte   $10,$1F,$10,$75,$00
000138r 3  00           
000139r 3  6C 08 00             jmp     (GOGIVEAYF)
00013Cr 3               ; ----------------------------------------------------------------------------
00013Cr 3  00 00 00 00          .byte   0,0,0,0,0,0
000140r 3  00 00        
000142r 3               
000142r 2               .endif
000142r 2               
000142r 2               .ifdef MICROTAN
000142r 2               .include "microtan_extra.s"
000142r 2               .endif
000142r 2               
000142r 2               .ifdef AIM65
000142r 2               .include "aim65_extra.s"
000142r 2               .endif
000142r 2               
000142r 2               .ifdef SYM1
000142r 2                       .byte   0,0,0
000142r 2               .endif
000142r 2               
000142r 2               .ifdef EATER
000142r 2               .include "bios.s"
000142r 2               .endif
000142r 2               
000142r 1               .include "lcd.s"
000142r 2               .segment "CODE"
001CDEr 2               .ifdef EATER
001CDEr 2               PORTB = $6000
001CDEr 2               DDRB = $6002
001CDEr 2               E  = %01000000
001CDEr 2               RW = %00100000
001CDEr 2               RS = %00010000
001CDEr 2               
001CDEr 2               lcd_wait:
001CDEr 2                 pha
001CDEr 2                 lda #%11110000  ; LCD data is input
001CDEr 2                 sta DDRB
001CDEr 2               lcdbusy:
001CDEr 2                 lda #RW
001CDEr 2                 sta PORTB
001CDEr 2                 lda #(RW | E)
001CDEr 2                 sta PORTB
001CDEr 2                 lda PORTB       ; Read high nibble
001CDEr 2                 pha             ; and put on stack since it has the busy flag
001CDEr 2                 lda #RW
001CDEr 2                 sta PORTB
001CDEr 2                 lda #(RW | E)
001CDEr 2                 sta PORTB
001CDEr 2                 lda PORTB       ; Read low nibble
001CDEr 2                 pla             ; Get high nibble off stack
001CDEr 2                 and #%00001000
001CDEr 2                 bne lcdbusy
001CDEr 2               
001CDEr 2                 lda #RW
001CDEr 2                 sta PORTB
001CDEr 2                 lda #%11111111  ; LCD data is output
001CDEr 2                 sta DDRB
001CDEr 2                 pla
001CDEr 2                 rts
001CDEr 2               
001CDEr 2               LCDINIT:
001CDEr 2                 lda #$ff ; Set all pins on port B to output
001CDEr 2                 sta DDRB
001CDEr 2               
001CDEr 2                 lda #%00000011 ; Set 8-bit mode
001CDEr 2                 sta PORTB
001CDEr 2                 ora #E
001CDEr 2                 sta PORTB
001CDEr 2                 and #%00001111
001CDEr 2                 sta PORTB
001CDEr 2               
001CDEr 2                 lda #%00000011 ; Set 8-bit mode
001CDEr 2                 sta PORTB
001CDEr 2                 ora #E
001CDEr 2                 sta PORTB
001CDEr 2                 and #%00001111
001CDEr 2                 sta PORTB
001CDEr 2               
001CDEr 2                 lda #%00000011 ; Set 8-bit mode
001CDEr 2                 sta PORTB
001CDEr 2                 ora #E
001CDEr 2                 sta PORTB
001CDEr 2                 and #%00001111
001CDEr 2                 sta PORTB
001CDEr 2               
001CDEr 2                 ; Okay, now we're really in 8-bit mode.
001CDEr 2                 ; Command to get to 4-bit mode ought to work now
001CDEr 2                 lda #%00000010 ; Set 4-bit mode
001CDEr 2                 sta PORTB
001CDEr 2                 ora #E
001CDEr 2                 sta PORTB
001CDEr 2                 and #%00001111
001CDEr 2                 sta PORTB
001CDEr 2               
001CDEr 2                 lda #%00101000 ; Set 4-bit mode; 2-line display; 5x8 font
001CDEr 2                 jsr lcd_instruction
001CDEr 2                 lda #%00001110 ; Display on; cursor on; blink off
001CDEr 2                 jsr lcd_instruction
001CDEr 2                 lda #%00000110 ; Increment and shift cursor; don't shift display
001CDEr 2                 jsr lcd_instruction
001CDEr 2                 lda #%00000001 ; Clear display
001CDEr 2                 jsr lcd_instruction
001CDEr 2                 rts
001CDEr 2               
001CDEr 2               
001CDEr 2               LCDCMD:
001CDEr 2                 jsr GETBYT
001CDEr 2                 txa
001CDEr 2               lcd_instruction:
001CDEr 2                 jsr lcd_wait
001CDEr 2                 pha
001CDEr 2                 lsr
001CDEr 2                 lsr
001CDEr 2                 lsr
001CDEr 2                 lsr            ; Send high 4 bits
001CDEr 2                 sta PORTB
001CDEr 2                 ora #E         ; Set E bit to send instruction
001CDEr 2                 sta PORTB
001CDEr 2                 eor #E         ; Clear E bit
001CDEr 2                 sta PORTB
001CDEr 2                 pla
001CDEr 2                 and #%00001111 ; Send low 4 bits
001CDEr 2                 sta PORTB
001CDEr 2                 ora #E         ; Set E bit to send instruction
001CDEr 2                 sta PORTB
001CDEr 2                 eor #E         ; Clear E bit
001CDEr 2                 sta PORTB
001CDEr 2                 rts
001CDEr 2               
001CDEr 2               LCDPRINT:
001CDEr 2                 jsr GETBYT
001CDEr 2                 txa
001CDEr 2                 jsr lcd_wait
001CDEr 2                 pha
001CDEr 2                 lsr
001CDEr 2                 lsr
001CDEr 2                 lsr
001CDEr 2                 lsr             ; Send high 4 bits
001CDEr 2                 ora #RS         ; Set RS
001CDEr 2                 sta PORTB
001CDEr 2                 ora #E          ; Set E bit to send instruction
001CDEr 2                 sta PORTB
001CDEr 2                 eor #E          ; Clear E bit
001CDEr 2                 sta PORTB
001CDEr 2                 pla
001CDEr 2                 and #%00001111  ; Send low 4 bits
001CDEr 2                 ora #RS         ; Set RS
001CDEr 2                 sta PORTB
001CDEr 2                 ora #E          ; Set E bit to send instruction
001CDEr 2                 sta PORTB
001CDEr 2                 eor #E          ; Clear E bit
001CDEr 2                 sta PORTB
001CDEr 2                 rts
001CDEr 2               
001CDEr 2               .endif
001CDEr 2               
001CDEr 1               
